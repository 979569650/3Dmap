{"ast":null,"code":"import { Vector3 } from \"../Maths/math.vector.js\";\n/**\n * Holds the data for the raycast result\n * @see https://doc.babylonjs.com/features/featuresDeepDive/physics/usingPhysicsEngine\n */\nexport class PhysicsRaycastResult {\n  constructor() {\n    this._hasHit = false;\n    this._hitDistance = 0;\n    this._hitNormalWorld = Vector3.Zero();\n    this._hitPointWorld = Vector3.Zero();\n    this._rayFromWorld = Vector3.Zero();\n    this._rayToWorld = Vector3.Zero();\n    this._triangleIndex = -1;\n  }\n  /**\n   * Gets if there was a hit\n   */\n  get hasHit() {\n    return this._hasHit;\n  }\n  /**\n   * Gets the distance from the hit\n   */\n  get hitDistance() {\n    return this._hitDistance;\n  }\n  /**\n   * Gets the hit normal/direction in the world\n   */\n  get hitNormalWorld() {\n    return this._hitNormalWorld;\n  }\n  /**\n   * Gets the hit point in the world\n   */\n  get hitPointWorld() {\n    return this._hitPointWorld;\n  }\n  /**\n   * Gets the ray \"start point\" of the ray in the world\n   */\n  get rayFromWorld() {\n    return this._rayFromWorld;\n  }\n  /**\n   * Gets the ray \"end point\" of the ray in the world\n   */\n  get rayToWorld() {\n    return this._rayToWorld;\n  }\n  /*\n   * The index of the original triangle which was hit. Will be -1 if contact point is not on a mesh shape\n   */\n  get triangleIndex() {\n    return this._triangleIndex;\n  }\n  /**\n   * Sets the hit data (normal & point in world space)\n   * @param hitNormalWorld defines the normal in world space\n   * @param hitPointWorld defines the point in world space\n   */\n  setHitData(hitNormalWorld, hitPointWorld, triangleIndex) {\n    this._hasHit = true;\n    this._hitNormalWorld.set(hitNormalWorld.x, hitNormalWorld.y, hitNormalWorld.z);\n    this._hitPointWorld.set(hitPointWorld.x, hitPointWorld.y, hitPointWorld.z);\n    this._triangleIndex = triangleIndex !== null && triangleIndex !== void 0 ? triangleIndex : -1;\n  }\n  /**\n   * Sets the distance from the start point to the hit point\n   * @param distance\n   */\n  setHitDistance(distance) {\n    this._hitDistance = distance;\n  }\n  /**\n   * Calculates the distance manually\n   */\n  calculateHitDistance() {\n    this._hitDistance = Vector3.Distance(this._rayFromWorld, this._hitPointWorld);\n  }\n  /**\n   * Resets all the values to default\n   * @param from The from point on world space\n   * @param to The to point on world space\n   */\n  reset(from = Vector3.Zero(), to = Vector3.Zero()) {\n    this._rayFromWorld.copyFrom(from);\n    this._rayToWorld.copyFrom(to);\n    this._hasHit = false;\n    this._hitDistance = 0;\n    this._hitNormalWorld.setAll(0);\n    this._hitPointWorld.setAll(0);\n    this._triangleIndex = -1;\n    this.body = undefined;\n    this.bodyIndex = undefined;\n  }\n}","map":{"version":3,"names":["Vector3","PhysicsRaycastResult","constructor","_hasHit","_hitDistance","_hitNormalWorld","Zero","_hitPointWorld","_rayFromWorld","_rayToWorld","_triangleIndex","hasHit","hitDistance","hitNormalWorld","hitPointWorld","rayFromWorld","rayToWorld","triangleIndex","setHitData","set","x","y","z","setHitDistance","distance","calculateHitDistance","Distance","reset","from","to","copyFrom","setAll","body","undefined","bodyIndex"],"sources":["../../../../dev/core/src/Physics/physicsRaycastResult.ts"],"sourcesContent":["import { Vector3 } from \"../Maths/math.vector\";\r\nimport type { PhysicsBody } from \"./v2/physicsBody\";\r\n\r\n/**\r\n * Interface for query parameters in the raycast function.\r\n * @see the \"Collision Filtering\" section in https://github.com/eoineoineoin/glTF/tree/MSFT_RigidBodies/extensions/2.0/Vendor/MSFT_collision_primitives\r\n */\r\nexport interface IRaycastQuery {\r\n    /** Membership mask */\r\n    membership?: number;\r\n    /** CollideWith mask */\r\n    collideWith?: number;\r\n}\r\n\r\n/**\r\n * Holds the data for the raycast result\r\n * @see https://doc.babylonjs.com/features/featuresDeepDive/physics/usingPhysicsEngine\r\n */\r\nexport class PhysicsRaycastResult {\r\n    private _hasHit: boolean = false;\r\n\r\n    private _hitDistance: number = 0;\r\n    private _hitNormalWorld: Vector3 = Vector3.Zero();\r\n    private _hitPointWorld: Vector3 = Vector3.Zero();\r\n    private _rayFromWorld: Vector3 = Vector3.Zero();\r\n    private _rayToWorld: Vector3 = Vector3.Zero();\r\n    private _triangleIndex: number = -1;\r\n\r\n    /**\r\n     * The Physics body that the ray hit\r\n     */\r\n    public body?: PhysicsBody;\r\n    /**\r\n     * The body Index in case the Physics body is using instances\r\n     */\r\n    public bodyIndex?: number;\r\n\r\n    /**\r\n     * Gets if there was a hit\r\n     */\r\n    get hasHit(): boolean {\r\n        return this._hasHit;\r\n    }\r\n\r\n    /**\r\n     * Gets the distance from the hit\r\n     */\r\n    get hitDistance(): number {\r\n        return this._hitDistance;\r\n    }\r\n\r\n    /**\r\n     * Gets the hit normal/direction in the world\r\n     */\r\n    get hitNormalWorld(): Vector3 {\r\n        return this._hitNormalWorld;\r\n    }\r\n\r\n    /**\r\n     * Gets the hit point in the world\r\n     */\r\n    get hitPointWorld(): Vector3 {\r\n        return this._hitPointWorld;\r\n    }\r\n\r\n    /**\r\n     * Gets the ray \"start point\" of the ray in the world\r\n     */\r\n    get rayFromWorld(): Vector3 {\r\n        return this._rayFromWorld;\r\n    }\r\n\r\n    /**\r\n     * Gets the ray \"end point\" of the ray in the world\r\n     */\r\n    get rayToWorld(): Vector3 {\r\n        return this._rayToWorld;\r\n    }\r\n\r\n    /*\r\n     * The index of the original triangle which was hit. Will be -1 if contact point is not on a mesh shape\r\n     */\r\n    get triangleIndex(): number {\r\n        return this._triangleIndex;\r\n    }\r\n\r\n    /**\r\n     * Sets the hit data (normal & point in world space)\r\n     * @param hitNormalWorld defines the normal in world space\r\n     * @param hitPointWorld defines the point in world space\r\n     */\r\n    public setHitData(hitNormalWorld: IXYZ, hitPointWorld: IXYZ, triangleIndex?: number) {\r\n        this._hasHit = true;\r\n        this._hitNormalWorld.set(hitNormalWorld.x, hitNormalWorld.y, hitNormalWorld.z);\r\n        this._hitPointWorld.set(hitPointWorld.x, hitPointWorld.y, hitPointWorld.z);\r\n        this._triangleIndex = triangleIndex ?? -1;\r\n    }\r\n\r\n    /**\r\n     * Sets the distance from the start point to the hit point\r\n     * @param distance\r\n     */\r\n    public setHitDistance(distance: number) {\r\n        this._hitDistance = distance;\r\n    }\r\n\r\n    /**\r\n     * Calculates the distance manually\r\n     */\r\n    public calculateHitDistance() {\r\n        this._hitDistance = Vector3.Distance(this._rayFromWorld, this._hitPointWorld);\r\n    }\r\n\r\n    /**\r\n     * Resets all the values to default\r\n     * @param from The from point on world space\r\n     * @param to The to point on world space\r\n     */\r\n    public reset(from: Vector3 = Vector3.Zero(), to: Vector3 = Vector3.Zero()) {\r\n        this._rayFromWorld.copyFrom(from);\r\n        this._rayToWorld.copyFrom(to);\r\n\r\n        this._hasHit = false;\r\n        this._hitDistance = 0;\r\n\r\n        this._hitNormalWorld.setAll(0);\r\n        this._hitPointWorld.setAll(0);\r\n        this._triangleIndex = -1;\r\n\r\n        this.body = undefined;\r\n        this.bodyIndex = undefined;\r\n    }\r\n}\r\n\r\n/**\r\n * Interface for the size containing width and height\r\n */\r\ninterface IXYZ {\r\n    /**\r\n     * X\r\n     */\r\n    x: number;\r\n\r\n    /**\r\n     * Y\r\n     */\r\n    y: number;\r\n\r\n    /**\r\n     * Z\r\n     */\r\n    z: number;\r\n}\r\n"],"mappings":"AAAA,SAASA,OAAO,QAAQ,yBAAuB;AAc/C;;;;AAIA,OAAM,MAAOC,oBAAoB;EAAjCC,YAAA;IACY,KAAAC,OAAO,GAAY,KAAK;IAExB,KAAAC,YAAY,GAAW,CAAC;IACxB,KAAAC,eAAe,GAAYL,OAAO,CAACM,IAAI,EAAE;IACzC,KAAAC,cAAc,GAAYP,OAAO,CAACM,IAAI,EAAE;IACxC,KAAAE,aAAa,GAAYR,OAAO,CAACM,IAAI,EAAE;IACvC,KAAAG,WAAW,GAAYT,OAAO,CAACM,IAAI,EAAE;IACrC,KAAAI,cAAc,GAAW,CAAC,CAAC;EA0GvC;EA/FI;;;EAGA,IAAIC,MAAMA,CAAA;IACN,OAAO,IAAI,CAACR,OAAO;EACvB;EAEA;;;EAGA,IAAIS,WAAWA,CAAA;IACX,OAAO,IAAI,CAACR,YAAY;EAC5B;EAEA;;;EAGA,IAAIS,cAAcA,CAAA;IACd,OAAO,IAAI,CAACR,eAAe;EAC/B;EAEA;;;EAGA,IAAIS,aAAaA,CAAA;IACb,OAAO,IAAI,CAACP,cAAc;EAC9B;EAEA;;;EAGA,IAAIQ,YAAYA,CAAA;IACZ,OAAO,IAAI,CAACP,aAAa;EAC7B;EAEA;;;EAGA,IAAIQ,UAAUA,CAAA;IACV,OAAO,IAAI,CAACP,WAAW;EAC3B;EAEA;;;EAGA,IAAIQ,aAAaA,CAAA;IACb,OAAO,IAAI,CAACP,cAAc;EAC9B;EAEA;;;;;EAKOQ,UAAUA,CAACL,cAAoB,EAAEC,aAAmB,EAAEG,aAAsB;IAC/E,IAAI,CAACd,OAAO,GAAG,IAAI;IACnB,IAAI,CAACE,eAAe,CAACc,GAAG,CAACN,cAAc,CAACO,CAAC,EAAEP,cAAc,CAACQ,CAAC,EAAER,cAAc,CAACS,CAAC,CAAC;IAC9E,IAAI,CAACf,cAAc,CAACY,GAAG,CAACL,aAAa,CAACM,CAAC,EAAEN,aAAa,CAACO,CAAC,EAAEP,aAAa,CAACQ,CAAC,CAAC;IAC1E,IAAI,CAACZ,cAAc,GAAGO,aAAa,aAAbA,aAAa,cAAbA,aAAa,GAAI,CAAC,CAAC;EAC7C;EAEA;;;;EAIOM,cAAcA,CAACC,QAAgB;IAClC,IAAI,CAACpB,YAAY,GAAGoB,QAAQ;EAChC;EAEA;;;EAGOC,oBAAoBA,CAAA;IACvB,IAAI,CAACrB,YAAY,GAAGJ,OAAO,CAAC0B,QAAQ,CAAC,IAAI,CAAClB,aAAa,EAAE,IAAI,CAACD,cAAc,CAAC;EACjF;EAEA;;;;;EAKOoB,KAAKA,CAACC,IAAA,GAAgB5B,OAAO,CAACM,IAAI,EAAE,EAAEuB,EAAA,GAAc7B,OAAO,CAACM,IAAI,EAAE;IACrE,IAAI,CAACE,aAAa,CAACsB,QAAQ,CAACF,IAAI,CAAC;IACjC,IAAI,CAACnB,WAAW,CAACqB,QAAQ,CAACD,EAAE,CAAC;IAE7B,IAAI,CAAC1B,OAAO,GAAG,KAAK;IACpB,IAAI,CAACC,YAAY,GAAG,CAAC;IAErB,IAAI,CAACC,eAAe,CAAC0B,MAAM,CAAC,CAAC,CAAC;IAC9B,IAAI,CAACxB,cAAc,CAACwB,MAAM,CAAC,CAAC,CAAC;IAC7B,IAAI,CAACrB,cAAc,GAAG,CAAC,CAAC;IAExB,IAAI,CAACsB,IAAI,GAAGC,SAAS;IACrB,IAAI,CAACC,SAAS,GAAGD,SAAS;EAC9B"},"metadata":{},"sourceType":"module","externalDependencies":[]}