{"ast":null,"code":"import { NodeGeometryBlock } from \"../../nodeGeometryBlock.js\";\nimport { RegisterClass } from \"../../../../Misc/typeStore.js\";\nimport { NodeGeometryBlockConnectionPointTypes } from \"../../Enums/nodeGeometryConnectionPointTypes.js\";\nimport { GeometryInputBlock } from \"../geometryInputBlock.js\";\nimport { Matrix } from \"../../../../Maths/math.vector.js\";\n/**\n * Block used to get a rotation matrix on Z Axis\n */\nexport class RotationZBlock extends NodeGeometryBlock {\n  /**\n   * Create a new RotationZBlock\n   * @param name defines the block name\n   */\n  constructor(name) {\n    super(name);\n    this.registerInput(\"angle\", NodeGeometryBlockConnectionPointTypes.Float, false, 0);\n    this.registerOutput(\"matrix\", NodeGeometryBlockConnectionPointTypes.Matrix);\n  }\n  /**\n   * Gets the current class name\n   * @returns the class name\n   */\n  getClassName() {\n    return \"RotationZBlock\";\n  }\n  /**\n   * Gets the angle input component\n   */\n  get angle() {\n    return this._inputs[0];\n  }\n  /**\n   * Gets the matrix output component\n   */\n  get matrix() {\n    return this._outputs[0];\n  }\n  autoConfigure() {\n    if (!this.angle.isConnected) {\n      const angleInput = new GeometryInputBlock(\"Angle\");\n      angleInput.value = 0;\n      angleInput.output.connectTo(this.angle);\n    }\n  }\n  _buildBlock(state) {\n    super._buildBlock(state);\n    this.matrix._storedFunction = state => {\n      return Matrix.RotationZ(this.angle.getConnectedValue(state));\n    };\n  }\n}\nRegisterClass(\"BABYLON.RotationZBlock\", RotationZBlock);","map":{"version":3,"names":["NodeGeometryBlock","RegisterClass","NodeGeometryBlockConnectionPointTypes","GeometryInputBlock","Matrix","RotationZBlock","constructor","name","registerInput","Float","registerOutput","getClassName","angle","_inputs","matrix","_outputs","autoConfigure","isConnected","angleInput","value","output","connectTo","_buildBlock","state","_storedFunction","RotationZ","getConnectedValue"],"sources":["../../../../../../../dev/core/src/Meshes/Node/Blocks/Matrices/rotationZBlock.ts"],"sourcesContent":["import { NodeGeometryBlock } from \"../../nodeGeometryBlock\";\r\nimport type { NodeGeometryConnectionPoint } from \"../../nodeGeometryBlockConnectionPoint\";\r\nimport { RegisterClass } from \"../../../../Misc/typeStore\";\r\nimport { NodeGeometryBlockConnectionPointTypes } from \"../../Enums/nodeGeometryConnectionPointTypes\";\r\nimport type { NodeGeometryBuildState } from \"../../nodeGeometryBuildState\";\r\nimport { GeometryInputBlock } from \"../geometryInputBlock\";\r\nimport { Matrix } from \"../../../../Maths/math.vector\";\r\n\r\n/**\r\n * Block used to get a rotation matrix on Z Axis\r\n */\r\nexport class RotationZBlock extends NodeGeometryBlock {\r\n    /**\r\n     * Create a new RotationZBlock\r\n     * @param name defines the block name\r\n     */\r\n    public constructor(name: string) {\r\n        super(name);\r\n\r\n        this.registerInput(\"angle\", NodeGeometryBlockConnectionPointTypes.Float, false, 0);\r\n        this.registerOutput(\"matrix\", NodeGeometryBlockConnectionPointTypes.Matrix);\r\n    }\r\n\r\n    /**\r\n     * Gets the current class name\r\n     * @returns the class name\r\n     */\r\n    public getClassName() {\r\n        return \"RotationZBlock\";\r\n    }\r\n\r\n    /**\r\n     * Gets the angle input component\r\n     */\r\n    public get angle(): NodeGeometryConnectionPoint {\r\n        return this._inputs[0];\r\n    }\r\n\r\n    /**\r\n     * Gets the matrix output component\r\n     */\r\n    public get matrix(): NodeGeometryConnectionPoint {\r\n        return this._outputs[0];\r\n    }\r\n\r\n    public autoConfigure() {\r\n        if (!this.angle.isConnected) {\r\n            const angleInput = new GeometryInputBlock(\"Angle\");\r\n            angleInput.value = 0;\r\n            angleInput.output.connectTo(this.angle);\r\n        }\r\n    }\r\n\r\n    protected _buildBlock(state: NodeGeometryBuildState) {\r\n        super._buildBlock(state);\r\n\r\n        this.matrix._storedFunction = (state) => {\r\n            return Matrix.RotationZ(this.angle.getConnectedValue(state));\r\n        };\r\n    }\r\n}\r\n\r\nRegisterClass(\"BABYLON.RotationZBlock\", RotationZBlock);\r\n"],"mappings":"AAAA,SAASA,iBAAiB,QAAQ,4BAA0B;AAE5D,SAASC,aAAa,QAAQ,+BAA6B;AAC3D,SAASC,qCAAqC,QAAQ,iDAA+C;AAErG,SAASC,kBAAkB,QAAQ,0BAAwB;AAC3D,SAASC,MAAM,QAAQ,kCAAgC;AAEvD;;;AAGA,OAAM,MAAOC,cAAe,SAAQL,iBAAiB;EACjD;;;;EAIAM,YAAmBC,IAAY;IAC3B,KAAK,CAACA,IAAI,CAAC;IAEX,IAAI,CAACC,aAAa,CAAC,OAAO,EAAEN,qCAAqC,CAACO,KAAK,EAAE,KAAK,EAAE,CAAC,CAAC;IAClF,IAAI,CAACC,cAAc,CAAC,QAAQ,EAAER,qCAAqC,CAACE,MAAM,CAAC;EAC/E;EAEA;;;;EAIOO,YAAYA,CAAA;IACf,OAAO,gBAAgB;EAC3B;EAEA;;;EAGA,IAAWC,KAAKA,CAAA;IACZ,OAAO,IAAI,CAACC,OAAO,CAAC,CAAC,CAAC;EAC1B;EAEA;;;EAGA,IAAWC,MAAMA,CAAA;IACb,OAAO,IAAI,CAACC,QAAQ,CAAC,CAAC,CAAC;EAC3B;EAEOC,aAAaA,CAAA;IAChB,IAAI,CAAC,IAAI,CAACJ,KAAK,CAACK,WAAW,EAAE;MACzB,MAAMC,UAAU,GAAG,IAAIf,kBAAkB,CAAC,OAAO,CAAC;MAClDe,UAAU,CAACC,KAAK,GAAG,CAAC;MACpBD,UAAU,CAACE,MAAM,CAACC,SAAS,CAAC,IAAI,CAACT,KAAK,CAAC;;EAE/C;EAEUU,WAAWA,CAACC,KAA6B;IAC/C,KAAK,CAACD,WAAW,CAACC,KAAK,CAAC;IAExB,IAAI,CAACT,MAAM,CAACU,eAAe,GAAID,KAAK,IAAI;MACpC,OAAOnB,MAAM,CAACqB,SAAS,CAAC,IAAI,CAACb,KAAK,CAACc,iBAAiB,CAACH,KAAK,CAAC,CAAC;IAChE,CAAC;EACL;;AAGJtB,aAAa,CAAC,wBAAwB,EAAEI,cAAc,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}