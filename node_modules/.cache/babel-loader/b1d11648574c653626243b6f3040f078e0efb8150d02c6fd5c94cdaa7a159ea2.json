{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport * as WebGPUConstants from \"./webgpuConstants.js\";\nimport { WebGPUQuerySet } from \"./webgpuQuerySet.js\";\n/** @internal */\nexport class WebGPUOcclusionQuery {\n  get querySet() {\n    return this._querySet.querySet;\n  }\n  get hasQueries() {\n    return this._currentTotalIndices !== this._availableIndices.length;\n  }\n  canBeginQuery(index) {\n    if (this._frameQuerySetIsDirty === this._engine.frameId || this._queryFrameId[index] === this._engine.frameId) {\n      return false;\n    }\n    let canBegin = false;\n    const passIndex = this._engine._getCurrentRenderPassIndex();\n    switch (passIndex) {\n      case 0:\n        {\n          canBegin = this._engine._mainRenderPassWrapper.renderPassDescriptor.occlusionQuerySet !== undefined;\n          break;\n        }\n      case 1:\n        {\n          canBegin = this._engine._rttRenderPassWrapper.renderPassDescriptor.occlusionQuerySet !== undefined;\n          break;\n        }\n    }\n    if (canBegin) {\n      this._queryFrameId[index] = this._engine.frameId;\n    }\n    return canBegin;\n  }\n  constructor(engine, device, bufferManager, startCount = 50, incrementCount = 100) {\n    this._availableIndices = [];\n    this._frameQuerySetIsDirty = -1;\n    this._queryFrameId = [];\n    this._engine = engine;\n    this._device = device;\n    this._bufferManager = bufferManager;\n    this._frameLastBuffer = -1;\n    this._currentTotalIndices = 0;\n    this._countIncrement = incrementCount;\n    this._allocateNewIndices(startCount);\n  }\n  createQuery() {\n    if (this._availableIndices.length === 0) {\n      this._allocateNewIndices();\n    }\n    const index = this._availableIndices[this._availableIndices.length - 1];\n    this._availableIndices.length--;\n    return index;\n  }\n  deleteQuery(index) {\n    this._availableIndices[this._availableIndices.length] = index;\n  }\n  isQueryResultAvailable(index) {\n    this._retrieveQueryBuffer();\n    return !!this._lastBuffer && index < this._lastBuffer.length;\n  }\n  getQueryResult(index) {\n    var _a, _b;\n    return Number((_b = (_a = this._lastBuffer) === null || _a === void 0 ? void 0 : _a[index]) !== null && _b !== void 0 ? _b : -1);\n  }\n  _retrieveQueryBuffer() {\n    if (this._lastBuffer && this._frameLastBuffer === this._engine.frameId) {\n      return;\n    }\n    if (this._frameLastBuffer !== this._engine.frameId) {\n      this._frameLastBuffer = this._engine.frameId;\n      this._querySet.readValues(0, this._currentTotalIndices).then(arrayBuffer => {\n        this._lastBuffer = arrayBuffer;\n      });\n    }\n  }\n  _allocateNewIndices(numIndices) {\n    numIndices = numIndices !== null && numIndices !== void 0 ? numIndices : this._countIncrement;\n    this._delayQuerySetDispose();\n    for (let i = 0; i < numIndices; ++i) {\n      this._availableIndices.push(this._currentTotalIndices + i);\n    }\n    this._currentTotalIndices += numIndices;\n    this._querySet = new WebGPUQuerySet(this._currentTotalIndices, WebGPUConstants.QueryType.Occlusion, this._device, this._bufferManager, false, \"QuerySet_OcclusionQuery_count_\" + this._currentTotalIndices);\n    this._frameQuerySetIsDirty = this._engine.frameId;\n  }\n  _delayQuerySetDispose() {\n    const querySet = this._querySet;\n    if (querySet) {\n      // Wait a bit before disposing of the queryset, in case some queries are still running for it\n      setTimeout(() => querySet.dispose, 1000);\n    }\n  }\n  dispose() {\n    var _a;\n    (_a = this._querySet) === null || _a === void 0 ? void 0 : _a.dispose();\n    this._availableIndices.length = 0;\n  }\n}","map":{"version":3,"names":["WebGPUConstants","WebGPUQuerySet","WebGPUOcclusionQuery","querySet","_querySet","hasQueries","_currentTotalIndices","_availableIndices","length","canBeginQuery","index","_frameQuerySetIsDirty","_engine","frameId","_queryFrameId","canBegin","passIndex","_getCurrentRenderPassIndex","_mainRenderPassWrapper","renderPassDescriptor","occlusionQuerySet","undefined","_rttRenderPassWrapper","constructor","engine","device","bufferManager","startCount","incrementCount","_device","_bufferManager","_frameLastBuffer","_countIncrement","_allocateNewIndices","createQuery","deleteQuery","isQueryResultAvailable","_retrieveQueryBuffer","_lastBuffer","getQueryResult","Number","_b","_a","readValues","then","arrayBuffer","numIndices","_delayQuerySetDispose","i","push","QueryType","Occlusion","setTimeout","dispose"],"sources":["../../../../../dev/core/src/Engines/WebGPU/webgpuOcclusionQuery.ts"],"sourcesContent":["import type { Nullable } from \"../../types\";\r\nimport type { WebGPUEngine } from \"../webgpuEngine\";\r\nimport type { WebGPUBufferManager } from \"./webgpuBufferManager\";\r\nimport * as WebGPUConstants from \"./webgpuConstants\";\r\nimport { WebGPUQuerySet } from \"./webgpuQuerySet\";\r\n\r\n/** @internal */\r\nexport class WebGPUOcclusionQuery {\r\n    private _engine: WebGPUEngine;\r\n    private _device: GPUDevice;\r\n    private _bufferManager: WebGPUBufferManager;\r\n\r\n    private _currentTotalIndices: number;\r\n    private _countIncrement: number;\r\n    private _querySet: WebGPUQuerySet;\r\n    private _availableIndices: number[] = [];\r\n    private _lastBuffer: Nullable<BigUint64Array>;\r\n    private _frameLastBuffer: number;\r\n    private _frameQuerySetIsDirty = -1;\r\n    private _queryFrameId: number[] = [];\r\n\r\n    public get querySet(): GPUQuerySet {\r\n        return this._querySet.querySet;\r\n    }\r\n\r\n    public get hasQueries(): boolean {\r\n        return this._currentTotalIndices !== this._availableIndices.length;\r\n    }\r\n\r\n    public canBeginQuery(index: number): boolean {\r\n        if (this._frameQuerySetIsDirty === this._engine.frameId || this._queryFrameId[index] === this._engine.frameId) {\r\n            return false;\r\n        }\r\n\r\n        let canBegin = false;\r\n\r\n        const passIndex = this._engine._getCurrentRenderPassIndex();\r\n        switch (passIndex) {\r\n            case 0: {\r\n                canBegin = this._engine._mainRenderPassWrapper.renderPassDescriptor!.occlusionQuerySet !== undefined;\r\n                break;\r\n            }\r\n            case 1: {\r\n                canBegin = this._engine._rttRenderPassWrapper.renderPassDescriptor!.occlusionQuerySet !== undefined;\r\n                break;\r\n            }\r\n        }\r\n\r\n        if (canBegin) {\r\n            this._queryFrameId[index] = this._engine.frameId;\r\n        }\r\n\r\n        return canBegin;\r\n    }\r\n\r\n    constructor(engine: WebGPUEngine, device: GPUDevice, bufferManager: WebGPUBufferManager, startCount = 50, incrementCount = 100) {\r\n        this._engine = engine;\r\n        this._device = device;\r\n        this._bufferManager = bufferManager;\r\n\r\n        this._frameLastBuffer = -1;\r\n        this._currentTotalIndices = 0;\r\n        this._countIncrement = incrementCount;\r\n\r\n        this._allocateNewIndices(startCount);\r\n    }\r\n\r\n    public createQuery(): number {\r\n        if (this._availableIndices.length === 0) {\r\n            this._allocateNewIndices();\r\n        }\r\n\r\n        const index = this._availableIndices[this._availableIndices.length - 1];\r\n        this._availableIndices.length--;\r\n\r\n        return index;\r\n    }\r\n\r\n    public deleteQuery(index: number): void {\r\n        this._availableIndices[this._availableIndices.length] = index;\r\n    }\r\n\r\n    public isQueryResultAvailable(index: number): boolean {\r\n        this._retrieveQueryBuffer();\r\n\r\n        return !!this._lastBuffer && index < this._lastBuffer.length;\r\n    }\r\n\r\n    public getQueryResult(index: number): number {\r\n        return Number(this._lastBuffer?.[index] ?? -1);\r\n    }\r\n\r\n    private _retrieveQueryBuffer(): void {\r\n        if (this._lastBuffer && this._frameLastBuffer === this._engine.frameId) {\r\n            return;\r\n        }\r\n\r\n        if (this._frameLastBuffer !== this._engine.frameId) {\r\n            this._frameLastBuffer = this._engine.frameId;\r\n            this._querySet.readValues(0, this._currentTotalIndices).then((arrayBuffer) => {\r\n                this._lastBuffer = arrayBuffer;\r\n            });\r\n        }\r\n    }\r\n\r\n    private _allocateNewIndices(numIndices?: number): void {\r\n        numIndices = numIndices ?? this._countIncrement;\r\n\r\n        this._delayQuerySetDispose();\r\n\r\n        for (let i = 0; i < numIndices; ++i) {\r\n            this._availableIndices.push(this._currentTotalIndices + i);\r\n        }\r\n\r\n        this._currentTotalIndices += numIndices;\r\n        this._querySet = new WebGPUQuerySet(\r\n            this._currentTotalIndices,\r\n            WebGPUConstants.QueryType.Occlusion,\r\n            this._device,\r\n            this._bufferManager,\r\n            false,\r\n            \"QuerySet_OcclusionQuery_count_\" + this._currentTotalIndices\r\n        );\r\n\r\n        this._frameQuerySetIsDirty = this._engine.frameId;\r\n    }\r\n\r\n    private _delayQuerySetDispose(): void {\r\n        const querySet = this._querySet;\r\n        if (querySet) {\r\n            // Wait a bit before disposing of the queryset, in case some queries are still running for it\r\n            setTimeout(() => querySet.dispose, 1000);\r\n        }\r\n    }\r\n\r\n    public dispose(): void {\r\n        this._querySet?.dispose();\r\n        this._availableIndices.length = 0;\r\n    }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}