{"ast":null,"code":"import \"core-js/modules/es.typed-array.to-reversed.js\";\nimport \"core-js/modules/es.typed-array.to-sorted.js\";\nimport \"core-js/modules/es.typed-array.with.js\";\nimport { Decode } from \"./stringTools.js\";\n/**\n * Utility class for reading from a data buffer\n */\nexport class DataReader {\n  /**\n   * Constructor\n   * @param buffer The buffer to read\n   */\n  constructor(buffer) {\n    /**\n     * The current byte offset from the beginning of the data buffer.\n     */\n    this.byteOffset = 0;\n    this.buffer = buffer;\n  }\n  /**\n   * Loads the given byte length.\n   * @param byteLength The byte length to load\n   * @returns A promise that resolves when the load is complete\n   */\n  loadAsync(byteLength) {\n    return this.buffer.readAsync(this.byteOffset, byteLength).then(data => {\n      this._dataView = new DataView(data.buffer, data.byteOffset, data.byteLength);\n      this._dataByteOffset = 0;\n    });\n  }\n  /**\n   * Read a unsigned 32-bit integer from the currently loaded data range.\n   * @returns The 32-bit integer read\n   */\n  readUint32() {\n    const value = this._dataView.getUint32(this._dataByteOffset, true);\n    this._dataByteOffset += 4;\n    this.byteOffset += 4;\n    return value;\n  }\n  /**\n   * Read a byte array from the currently loaded data range.\n   * @param byteLength The byte length to read\n   * @returns The byte array read\n   */\n  readUint8Array(byteLength) {\n    const value = new Uint8Array(this._dataView.buffer, this._dataView.byteOffset + this._dataByteOffset, byteLength);\n    this._dataByteOffset += byteLength;\n    this.byteOffset += byteLength;\n    return value;\n  }\n  /**\n   * Read a string from the currently loaded data range.\n   * @param byteLength The byte length to read\n   * @returns The string read\n   */\n  readString(byteLength) {\n    return Decode(this.readUint8Array(byteLength));\n  }\n  /**\n   * Skips the given byte length the currently loaded data range.\n   * @param byteLength The byte length to skip\n   */\n  skipBytes(byteLength) {\n    this._dataByteOffset += byteLength;\n    this.byteOffset += byteLength;\n  }\n}","map":{"version":3,"names":["Decode","DataReader","constructor","buffer","byteOffset","loadAsync","byteLength","readAsync","then","data","_dataView","DataView","_dataByteOffset","readUint32","value","getUint32","readUint8Array","Uint8Array","readString","skipBytes"],"sources":["../../../../dev/core/src/Misc/dataReader.ts"],"sourcesContent":["import { Decode } from \"./stringTools\";\r\n\r\n/**\r\n * Interface for a data buffer\r\n */\r\nexport interface IDataBuffer {\r\n    /**\r\n     * Reads bytes from the data buffer.\r\n     * @param byteOffset The byte offset to read\r\n     * @param byteLength The byte length to read\r\n     * @returns A promise that resolves when the bytes are read\r\n     */\r\n    readAsync(byteOffset: number, byteLength: number): Promise<ArrayBufferView>;\r\n\r\n    /**\r\n     * The byte length of the buffer.\r\n     */\r\n    readonly byteLength: number;\r\n}\r\n\r\n/**\r\n * Utility class for reading from a data buffer\r\n */\r\nexport class DataReader {\r\n    /**\r\n     * The data buffer associated with this data reader.\r\n     */\r\n    public readonly buffer: IDataBuffer;\r\n\r\n    /**\r\n     * The current byte offset from the beginning of the data buffer.\r\n     */\r\n    public byteOffset = 0;\r\n\r\n    private _dataView: DataView;\r\n    private _dataByteOffset: number;\r\n\r\n    /**\r\n     * Constructor\r\n     * @param buffer The buffer to read\r\n     */\r\n    constructor(buffer: IDataBuffer) {\r\n        this.buffer = buffer;\r\n    }\r\n\r\n    /**\r\n     * Loads the given byte length.\r\n     * @param byteLength The byte length to load\r\n     * @returns A promise that resolves when the load is complete\r\n     */\r\n    public loadAsync(byteLength: number): Promise<void> {\r\n        return this.buffer.readAsync(this.byteOffset, byteLength).then((data) => {\r\n            this._dataView = new DataView(data.buffer, data.byteOffset, data.byteLength);\r\n            this._dataByteOffset = 0;\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Read a unsigned 32-bit integer from the currently loaded data range.\r\n     * @returns The 32-bit integer read\r\n     */\r\n    public readUint32(): number {\r\n        const value = this._dataView.getUint32(this._dataByteOffset, true);\r\n        this._dataByteOffset += 4;\r\n        this.byteOffset += 4;\r\n        return value;\r\n    }\r\n\r\n    /**\r\n     * Read a byte array from the currently loaded data range.\r\n     * @param byteLength The byte length to read\r\n     * @returns The byte array read\r\n     */\r\n    public readUint8Array(byteLength: number): Uint8Array {\r\n        const value = new Uint8Array(this._dataView.buffer, this._dataView.byteOffset + this._dataByteOffset, byteLength);\r\n        this._dataByteOffset += byteLength;\r\n        this.byteOffset += byteLength;\r\n        return value;\r\n    }\r\n\r\n    /**\r\n     * Read a string from the currently loaded data range.\r\n     * @param byteLength The byte length to read\r\n     * @returns The string read\r\n     */\r\n    public readString(byteLength: number): string {\r\n        return Decode(this.readUint8Array(byteLength));\r\n    }\r\n\r\n    /**\r\n     * Skips the given byte length the currently loaded data range.\r\n     * @param byteLength The byte length to skip\r\n     */\r\n    public skipBytes(byteLength: number): void {\r\n        this._dataByteOffset += byteLength;\r\n        this.byteOffset += byteLength;\r\n    }\r\n}\r\n"],"mappings":";;;AAAA,SAASA,MAAM,QAAQ,kBAAgB;AAoBvC;;;AAGA,OAAM,MAAOC,UAAU;EAcnB;;;;EAIAC,YAAYC,MAAmB;IAZ/B;;;IAGO,KAAAC,UAAU,GAAG,CAAC;IAUjB,IAAI,CAACD,MAAM,GAAGA,MAAM;EACxB;EAEA;;;;;EAKOE,SAASA,CAACC,UAAkB;IAC/B,OAAO,IAAI,CAACH,MAAM,CAACI,SAAS,CAAC,IAAI,CAACH,UAAU,EAAEE,UAAU,CAAC,CAACE,IAAI,CAAEC,IAAI,IAAI;MACpE,IAAI,CAACC,SAAS,GAAG,IAAIC,QAAQ,CAACF,IAAI,CAACN,MAAM,EAAEM,IAAI,CAACL,UAAU,EAAEK,IAAI,CAACH,UAAU,CAAC;MAC5E,IAAI,CAACM,eAAe,GAAG,CAAC;IAC5B,CAAC,CAAC;EACN;EAEA;;;;EAIOC,UAAUA,CAAA;IACb,MAAMC,KAAK,GAAG,IAAI,CAACJ,SAAS,CAACK,SAAS,CAAC,IAAI,CAACH,eAAe,EAAE,IAAI,CAAC;IAClE,IAAI,CAACA,eAAe,IAAI,CAAC;IACzB,IAAI,CAACR,UAAU,IAAI,CAAC;IACpB,OAAOU,KAAK;EAChB;EAEA;;;;;EAKOE,cAAcA,CAACV,UAAkB;IACpC,MAAMQ,KAAK,GAAG,IAAIG,UAAU,CAAC,IAAI,CAACP,SAAS,CAACP,MAAM,EAAE,IAAI,CAACO,SAAS,CAACN,UAAU,GAAG,IAAI,CAACQ,eAAe,EAAEN,UAAU,CAAC;IACjH,IAAI,CAACM,eAAe,IAAIN,UAAU;IAClC,IAAI,CAACF,UAAU,IAAIE,UAAU;IAC7B,OAAOQ,KAAK;EAChB;EAEA;;;;;EAKOI,UAAUA,CAACZ,UAAkB;IAChC,OAAON,MAAM,CAAC,IAAI,CAACgB,cAAc,CAACV,UAAU,CAAC,CAAC;EAClD;EAEA;;;;EAIOa,SAASA,CAACb,UAAkB;IAC/B,IAAI,CAACM,eAAe,IAAIN,UAAU;IAClC,IAAI,CAACF,UAAU,IAAIE,UAAU;EACjC"},"metadata":{},"sourceType":"module","externalDependencies":[]}