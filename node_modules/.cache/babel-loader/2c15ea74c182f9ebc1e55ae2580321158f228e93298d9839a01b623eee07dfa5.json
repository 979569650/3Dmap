{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { __decorate } from \"../../../../tslib.es6.js\";\nimport { NodeGeometryBlock } from \"../../nodeGeometryBlock.js\";\nimport { RegisterClass } from \"../../../../Misc/typeStore.js\";\nimport { NodeGeometryBlockConnectionPointTypes } from \"../../Enums/nodeGeometryConnectionPointTypes.js\";\nimport { VertexDataMaterialInfo } from \"../../../../Meshes/mesh.vertexData.js\";\nimport { PropertyTypeForEdition, editableInPropertyPage } from \"../../../../Decorators/nodeDecorator.js\";\n/**\n * Block used to affect a material ID to a geometry\n */\nexport class SetMaterialIDBlock extends NodeGeometryBlock {\n  /**\n   * Create a new SetMaterialIDBlock\n   * @param name defines the block name\n   */\n  constructor(name) {\n    super(name);\n    /**\n     * Gets or sets a boolean indicating that this block can evaluate context\n     * Build performance is improved when this value is set to false as the system will cache values instead of reevaluating everything per context change\n     */\n    this.evaluateContext = true;\n    this.registerInput(\"geometry\", NodeGeometryBlockConnectionPointTypes.Geometry);\n    this.registerInput(\"id\", NodeGeometryBlockConnectionPointTypes.Int, true, 0);\n    this.registerOutput(\"output\", NodeGeometryBlockConnectionPointTypes.Geometry);\n    this.id.acceptedConnectionPointTypes.push(NodeGeometryBlockConnectionPointTypes.Float);\n  }\n  /**\n   * Gets the current class name\n   * @returns the class name\n   */\n  getClassName() {\n    return \"SetMaterialIDBlock\";\n  }\n  /**\n   * Gets the geometry input component\n   */\n  get geometry() {\n    return this._inputs[0];\n  }\n  /**\n   * Gets the id input component\n   */\n  get id() {\n    return this._inputs[1];\n  }\n  /**\n   * Gets the geometry output component\n   */\n  get output() {\n    return this._outputs[0];\n  }\n  _buildBlock(state) {\n    if (!this.geometry.isConnected) {\n      this.output._storedFunction = null;\n      this.output._storedValue = null;\n      return;\n    }\n    const func = state => {\n      const vertexData = this.geometry.getConnectedValue(state);\n      if (!vertexData || !vertexData.indices || !vertexData.positions) {\n        return vertexData;\n      }\n      const materialInfo = new VertexDataMaterialInfo();\n      materialInfo.materialIndex = this.id.getConnectedValue(state) | 0;\n      materialInfo.indexStart = 0;\n      materialInfo.indexCount = vertexData.indices.length;\n      materialInfo.verticesStart = 0;\n      materialInfo.verticesCount = vertexData.positions.length / 3;\n      vertexData.materialInfos = [materialInfo];\n      return vertexData;\n    };\n    if (this.evaluateContext) {\n      this.output._storedFunction = func;\n    } else {\n      this.output._storedFunction = null;\n      this.output._storedValue = func(state);\n    }\n  }\n  _dumpPropertiesCode() {\n    const codeString = super._dumpPropertiesCode() + `${this._codeVariableName}.evaluateContext = ${this.evaluateContext ? \"true\" : \"false\"};\\n`;\n    return codeString;\n  }\n  /**\n   * Serializes this block in a JSON representation\n   * @returns the serialized block object\n   */\n  serialize() {\n    const serializationObject = super.serialize();\n    serializationObject.evaluateContext = this.evaluateContext;\n    return serializationObject;\n  }\n  _deserialize(serializationObject) {\n    super._deserialize(serializationObject);\n    if (serializationObject.evaluateContext !== undefined) {\n      this.evaluateContext = serializationObject.evaluateContext;\n    }\n  }\n}\n__decorate([editableInPropertyPage(\"Evaluate context\", PropertyTypeForEdition.Boolean, \"ADVANCED\", {\n  notifiers: {\n    rebuild: true\n  }\n})], SetMaterialIDBlock.prototype, \"evaluateContext\", void 0);\nRegisterClass(\"BABYLON.SetMaterialIDBlock\", SetMaterialIDBlock);","map":{"version":3,"names":["NodeGeometryBlock","RegisterClass","NodeGeometryBlockConnectionPointTypes","VertexDataMaterialInfo","PropertyTypeForEdition","editableInPropertyPage","SetMaterialIDBlock","constructor","name","evaluateContext","registerInput","Geometry","Int","registerOutput","id","acceptedConnectionPointTypes","push","Float","getClassName","geometry","_inputs","output","_outputs","_buildBlock","state","isConnected","_storedFunction","_storedValue","func","vertexData","getConnectedValue","indices","positions","materialInfo","materialIndex","indexStart","indexCount","length","verticesStart","verticesCount","materialInfos","_dumpPropertiesCode","codeString","_codeVariableName","serialize","serializationObject","_deserialize","undefined","__decorate","Boolean","notifiers","rebuild"],"sources":["../../../../../../../dev/core/src/Meshes/Node/Blocks/Set/setMaterialIDBlock.ts"],"sourcesContent":["import { NodeGeometryBlock } from \"../../nodeGeometryBlock\";\r\nimport type { NodeGeometryConnectionPoint } from \"../../nodeGeometryBlockConnectionPoint\";\r\nimport { RegisterClass } from \"../../../../Misc/typeStore\";\r\nimport { NodeGeometryBlockConnectionPointTypes } from \"../../Enums/nodeGeometryConnectionPointTypes\";\r\nimport { VertexDataMaterialInfo, type VertexData } from \"../../../../Meshes/mesh.vertexData\";\r\nimport { PropertyTypeForEdition, editableInPropertyPage } from \"../../../../Decorators/nodeDecorator\";\r\nimport type { NodeGeometryBuildState } from \"../../nodeGeometryBuildState\";\r\n\r\n/**\r\n * Block used to affect a material ID to a geometry\r\n */\r\nexport class SetMaterialIDBlock extends NodeGeometryBlock {\r\n    /**\r\n     * Gets or sets a boolean indicating that this block can evaluate context\r\n     * Build performance is improved when this value is set to false as the system will cache values instead of reevaluating everything per context change\r\n     */\r\n    @editableInPropertyPage(\"Evaluate context\", PropertyTypeForEdition.Boolean, \"ADVANCED\", { notifiers: { rebuild: true } })\r\n    public evaluateContext = true;\r\n\r\n    /**\r\n     * Create a new SetMaterialIDBlock\r\n     * @param name defines the block name\r\n     */\r\n    public constructor(name: string) {\r\n        super(name);\r\n\r\n        this.registerInput(\"geometry\", NodeGeometryBlockConnectionPointTypes.Geometry);\r\n        this.registerInput(\"id\", NodeGeometryBlockConnectionPointTypes.Int, true, 0);\r\n\r\n        this.registerOutput(\"output\", NodeGeometryBlockConnectionPointTypes.Geometry);\r\n        this.id.acceptedConnectionPointTypes.push(NodeGeometryBlockConnectionPointTypes.Float);\r\n    }\r\n\r\n    /**\r\n     * Gets the current class name\r\n     * @returns the class name\r\n     */\r\n    public getClassName() {\r\n        return \"SetMaterialIDBlock\";\r\n    }\r\n\r\n    /**\r\n     * Gets the geometry input component\r\n     */\r\n    public get geometry(): NodeGeometryConnectionPoint {\r\n        return this._inputs[0];\r\n    }\r\n\r\n    /**\r\n     * Gets the id input component\r\n     */\r\n    public get id(): NodeGeometryConnectionPoint {\r\n        return this._inputs[1];\r\n    }\r\n\r\n    /**\r\n     * Gets the geometry output component\r\n     */\r\n    public get output(): NodeGeometryConnectionPoint {\r\n        return this._outputs[0];\r\n    }\r\n\r\n    protected _buildBlock(state: NodeGeometryBuildState) {\r\n        if (!this.geometry.isConnected) {\r\n            this.output._storedFunction = null;\r\n            this.output._storedValue = null;\r\n            return;\r\n        }\r\n\r\n        const func = (state: NodeGeometryBuildState) => {\r\n            const vertexData = this.geometry.getConnectedValue(state) as VertexData;\r\n            if (!vertexData || !vertexData.indices || !vertexData.positions) {\r\n                return vertexData;\r\n            }\r\n\r\n            const materialInfo = new VertexDataMaterialInfo();\r\n            materialInfo.materialIndex = this.id.getConnectedValue(state) | 0;\r\n            materialInfo.indexStart = 0;\r\n            materialInfo.indexCount = vertexData.indices.length;\r\n            materialInfo.verticesStart = 0;\r\n            materialInfo.verticesCount = vertexData.positions.length / 3;\r\n\r\n            vertexData.materialInfos = [materialInfo];\r\n\r\n            return vertexData;\r\n        };\r\n\r\n        if (this.evaluateContext) {\r\n            this.output._storedFunction = func;\r\n        } else {\r\n            this.output._storedFunction = null;\r\n            this.output._storedValue = func(state);\r\n        }\r\n    }\r\n\r\n    protected _dumpPropertiesCode() {\r\n        const codeString = super._dumpPropertiesCode() + `${this._codeVariableName}.evaluateContext = ${this.evaluateContext ? \"true\" : \"false\"};\\n`;\r\n        return codeString;\r\n    }\r\n\r\n    /**\r\n     * Serializes this block in a JSON representation\r\n     * @returns the serialized block object\r\n     */\r\n    public serialize(): any {\r\n        const serializationObject = super.serialize();\r\n\r\n        serializationObject.evaluateContext = this.evaluateContext;\r\n\r\n        return serializationObject;\r\n    }\r\n\r\n    public _deserialize(serializationObject: any) {\r\n        super._deserialize(serializationObject);\r\n\r\n        if (serializationObject.evaluateContext !== undefined) {\r\n            this.evaluateContext = serializationObject.evaluateContext;\r\n        }\r\n    }\r\n}\r\n\r\nRegisterClass(\"BABYLON.SetMaterialIDBlock\", SetMaterialIDBlock);\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}