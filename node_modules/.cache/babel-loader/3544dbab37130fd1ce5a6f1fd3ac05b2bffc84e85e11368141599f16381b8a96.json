{"ast":null,"code":"import { Vector2, Vector3, Vector4 } from \"../../../Maths/math.vector.js\";\nimport { RegisterClass } from \"../../../Misc/typeStore.js\";\nimport { NodeGeometryBlockConnectionPointTypes } from \"../Enums/nodeGeometryConnectionPointTypes.js\";\nimport { NodeGeometryBlock } from \"../nodeGeometryBlock.js\";\n/**\n * Block used to create a Vector2/3/4 out of individual or partial inputs\n */\nexport class VectorConverterBlock extends NodeGeometryBlock {\n  /**\n   * Create a new VectorConverterBlock\n   * @param name defines the block name\n   */\n  constructor(name) {\n    super(name);\n    this.registerInput(\"xyzw \", NodeGeometryBlockConnectionPointTypes.Vector4, true);\n    this.registerInput(\"xyz \", NodeGeometryBlockConnectionPointTypes.Vector3, true);\n    this.registerInput(\"xy \", NodeGeometryBlockConnectionPointTypes.Vector2, true);\n    this.registerInput(\"zw \", NodeGeometryBlockConnectionPointTypes.Vector2, true);\n    this.registerInput(\"x \", NodeGeometryBlockConnectionPointTypes.Float, true);\n    this.registerInput(\"y \", NodeGeometryBlockConnectionPointTypes.Float, true);\n    this.registerInput(\"z \", NodeGeometryBlockConnectionPointTypes.Float, true);\n    this.registerInput(\"w \", NodeGeometryBlockConnectionPointTypes.Float, true);\n    this.registerOutput(\"xyzw\", NodeGeometryBlockConnectionPointTypes.Vector4);\n    this.registerOutput(\"xyz\", NodeGeometryBlockConnectionPointTypes.Vector3);\n    this.registerOutput(\"xy\", NodeGeometryBlockConnectionPointTypes.Vector2);\n    this.registerOutput(\"zw\", NodeGeometryBlockConnectionPointTypes.Vector2);\n    this.registerOutput(\"x\", NodeGeometryBlockConnectionPointTypes.Float);\n    this.registerOutput(\"y\", NodeGeometryBlockConnectionPointTypes.Float);\n    this.registerOutput(\"z\", NodeGeometryBlockConnectionPointTypes.Float);\n    this.registerOutput(\"w\", NodeGeometryBlockConnectionPointTypes.Float);\n  }\n  /**\n   * Gets the current class name\n   * @returns the class name\n   */\n  getClassName() {\n    return \"VectorConverterBlock\";\n  }\n  /**\n   * Gets the xyzw component (input)\n   */\n  get xyzwIn() {\n    return this._inputs[0];\n  }\n  /**\n   * Gets the xyz component (input)\n   */\n  get xyzIn() {\n    return this._inputs[1];\n  }\n  /**\n   * Gets the xy component (input)\n   */\n  get xyIn() {\n    return this._inputs[2];\n  }\n  /**\n   * Gets the zw component (input)\n   */\n  get zwIn() {\n    return this._inputs[3];\n  }\n  /**\n   * Gets the x component (input)\n   */\n  get xIn() {\n    return this._inputs[4];\n  }\n  /**\n   * Gets the y component (input)\n   */\n  get yIn() {\n    return this._inputs[5];\n  }\n  /**\n   * Gets the z component (input)\n   */\n  get zIn() {\n    return this._inputs[6];\n  }\n  /**\n   * Gets the w component (input)\n   */\n  get wIn() {\n    return this._inputs[7];\n  }\n  /**\n   * Gets the xyzw component (output)\n   */\n  get xyzwOut() {\n    return this._outputs[0];\n  }\n  /**\n   * Gets the xyz component (output)\n   */\n  get xyzOut() {\n    return this._outputs[1];\n  }\n  /**\n   * Gets the xy component (output)\n   */\n  get xyOut() {\n    return this._outputs[2];\n  }\n  /**\n   * Gets the zw component (output)\n   */\n  get zwOut() {\n    return this._outputs[3];\n  }\n  /**\n   * Gets the x component (output)\n   */\n  get xOut() {\n    return this._outputs[4];\n  }\n  /**\n   * Gets the y component (output)\n   */\n  get yOut() {\n    return this._outputs[5];\n  }\n  /**\n   * Gets the z component (output)\n   */\n  get zOut() {\n    return this._outputs[6];\n  }\n  /**\n   * Gets the w component (output)\n   */\n  get wOut() {\n    return this._outputs[7];\n  }\n  _inputRename(name) {\n    if (name === \"xyzw \") {\n      return \"xyzwIn\";\n    }\n    if (name === \"xyz \") {\n      return \"xyzIn\";\n    }\n    if (name === \"xy \") {\n      return \"xyIn\";\n    }\n    if (name === \"zw \") {\n      return \"zwIn\";\n    }\n    if (name === \"x \") {\n      return \"xIn\";\n    }\n    if (name === \"y \") {\n      return \"yIn\";\n    }\n    if (name === \"z \") {\n      return \"zIn\";\n    }\n    if (name === \"w \") {\n      return \"wIn\";\n    }\n    return name;\n  }\n  _outputRename(name) {\n    switch (name) {\n      case \"x\":\n        return \"xOut\";\n      case \"y\":\n        return \"yOut\";\n      case \"z\":\n        return \"zOut\";\n      case \"w\":\n        return \"wOut\";\n      case \"xy\":\n        return \"xyOut\";\n      case \"zw\":\n        return \"zwOut\";\n      case \"xyz\":\n        return \"xyzOut\";\n      case \"xyzw\":\n        return \"xyzwOut\";\n      default:\n        return name;\n    }\n  }\n  _buildBlock(state) {\n    super._buildBlock(state);\n    const xInput = this.xIn;\n    const yInput = this.yIn;\n    const zInput = this.zIn;\n    const wInput = this.wIn;\n    const xyInput = this.xyIn;\n    const zwInput = this.zwIn;\n    const xyzInput = this.xyzIn;\n    const xyzwInput = this.xyzwIn;\n    const xyzwOutput = this.xyzwOut;\n    const xyzOutput = this.xyzOut;\n    const xyOutput = this.xyOut;\n    const zwOutput = this.zwOut;\n    const xOutput = this.xOut;\n    const yOutput = this.yOut;\n    const zOutput = this.zOut;\n    const wOutput = this.wOut;\n    const getData = state => {\n      if (xyzwInput.isConnected) {\n        return xyzwInput.getConnectedValue(state);\n      }\n      let x = 0;\n      let y = 0;\n      let z = 0;\n      let w = 0;\n      if (xInput.isConnected) {\n        x = xInput.getConnectedValue(state);\n      }\n      if (yInput.isConnected) {\n        y = yInput.getConnectedValue(state);\n      }\n      if (zInput.isConnected) {\n        z = zInput.getConnectedValue(state);\n      }\n      if (wInput.isConnected) {\n        w = wInput.getConnectedValue(state);\n      }\n      if (xyInput.isConnected) {\n        const temp = xyInput.getConnectedValue(state);\n        if (temp) {\n          x = temp.x;\n          y = temp.y;\n        }\n      }\n      if (zwInput.isConnected) {\n        const temp = zwInput.getConnectedValue(state);\n        if (temp) {\n          z = temp.x;\n          w = temp.y;\n        }\n      }\n      if (xyzInput.isConnected) {\n        const temp = xyzInput.getConnectedValue(state);\n        if (temp) {\n          x = temp.x;\n          y = temp.y;\n          z = temp.z;\n        }\n      }\n      return new Vector4(x, y, z, w);\n    };\n    xyzwOutput._storedFunction = state => getData(state);\n    xyzOutput._storedFunction = state => {\n      const data = getData(state);\n      return new Vector3(data.x, data.y, data.z);\n    };\n    xyOutput._storedFunction = state => {\n      const data = getData(state);\n      return new Vector2(data.x, data.y);\n    };\n    zwOutput._storedFunction = state => {\n      const data = getData(state);\n      return new Vector2(data.z, data.w);\n    };\n    xOutput._storedFunction = state => getData(state).x;\n    yOutput._storedFunction = state => getData(state).y;\n    zOutput._storedFunction = state => getData(state).z;\n    wOutput._storedFunction = state => getData(state).w;\n  }\n}\nRegisterClass(\"BABYLON.VectorConverterBlock\", VectorConverterBlock);","map":{"version":3,"names":["Vector2","Vector3","Vector4","RegisterClass","NodeGeometryBlockConnectionPointTypes","NodeGeometryBlock","VectorConverterBlock","constructor","name","registerInput","Float","registerOutput","getClassName","xyzwIn","_inputs","xyzIn","xyIn","zwIn","xIn","yIn","zIn","wIn","xyzwOut","_outputs","xyzOut","xyOut","zwOut","xOut","yOut","zOut","wOut","_inputRename","_outputRename","_buildBlock","state","xInput","yInput","zInput","wInput","xyInput","zwInput","xyzInput","xyzwInput","xyzwOutput","xyzOutput","xyOutput","zwOutput","xOutput","yOutput","zOutput","wOutput","getData","isConnected","getConnectedValue","x","y","z","w","temp","_storedFunction","data"],"sources":["../../../../../../dev/core/src/Meshes/Node/Blocks/vectorConverterBlock.ts"],"sourcesContent":["import { Vector2, Vector3, Vector4 } from \"../../../Maths/math.vector\";\r\nimport { RegisterClass } from \"../../../Misc/typeStore\";\r\nimport { NodeGeometryBlockConnectionPointTypes } from \"../Enums/nodeGeometryConnectionPointTypes\";\r\nimport { NodeGeometryBlock } from \"../nodeGeometryBlock\";\r\nimport type { NodeGeometryConnectionPoint } from \"../nodeGeometryBlockConnectionPoint\";\r\nimport type { NodeGeometryBuildState } from \"../nodeGeometryBuildState\";\r\n\r\n/**\r\n * Block used to create a Vector2/3/4 out of individual or partial inputs\r\n */\r\nexport class VectorConverterBlock extends NodeGeometryBlock {\r\n    /**\r\n     * Create a new VectorConverterBlock\r\n     * @param name defines the block name\r\n     */\r\n    public constructor(name: string) {\r\n        super(name);\r\n\r\n        this.registerInput(\"xyzw \", NodeGeometryBlockConnectionPointTypes.Vector4, true);\r\n        this.registerInput(\"xyz \", NodeGeometryBlockConnectionPointTypes.Vector3, true);\r\n        this.registerInput(\"xy \", NodeGeometryBlockConnectionPointTypes.Vector2, true);\r\n        this.registerInput(\"zw \", NodeGeometryBlockConnectionPointTypes.Vector2, true);\r\n        this.registerInput(\"x \", NodeGeometryBlockConnectionPointTypes.Float, true);\r\n        this.registerInput(\"y \", NodeGeometryBlockConnectionPointTypes.Float, true);\r\n        this.registerInput(\"z \", NodeGeometryBlockConnectionPointTypes.Float, true);\r\n        this.registerInput(\"w \", NodeGeometryBlockConnectionPointTypes.Float, true);\r\n\r\n        this.registerOutput(\"xyzw\", NodeGeometryBlockConnectionPointTypes.Vector4);\r\n        this.registerOutput(\"xyz\", NodeGeometryBlockConnectionPointTypes.Vector3);\r\n        this.registerOutput(\"xy\", NodeGeometryBlockConnectionPointTypes.Vector2);\r\n        this.registerOutput(\"zw\", NodeGeometryBlockConnectionPointTypes.Vector2);\r\n        this.registerOutput(\"x\", NodeGeometryBlockConnectionPointTypes.Float);\r\n        this.registerOutput(\"y\", NodeGeometryBlockConnectionPointTypes.Float);\r\n        this.registerOutput(\"z\", NodeGeometryBlockConnectionPointTypes.Float);\r\n        this.registerOutput(\"w\", NodeGeometryBlockConnectionPointTypes.Float);\r\n    }\r\n\r\n    /**\r\n     * Gets the current class name\r\n     * @returns the class name\r\n     */\r\n    public getClassName() {\r\n        return \"VectorConverterBlock\";\r\n    }\r\n\r\n    /**\r\n     * Gets the xyzw component (input)\r\n     */\r\n    public get xyzwIn(): NodeGeometryConnectionPoint {\r\n        return this._inputs[0];\r\n    }\r\n\r\n    /**\r\n     * Gets the xyz component (input)\r\n     */\r\n    public get xyzIn(): NodeGeometryConnectionPoint {\r\n        return this._inputs[1];\r\n    }\r\n\r\n    /**\r\n     * Gets the xy component (input)\r\n     */\r\n    public get xyIn(): NodeGeometryConnectionPoint {\r\n        return this._inputs[2];\r\n    }\r\n\r\n    /**\r\n     * Gets the zw component (input)\r\n     */\r\n    public get zwIn(): NodeGeometryConnectionPoint {\r\n        return this._inputs[3];\r\n    }\r\n\r\n    /**\r\n     * Gets the x component (input)\r\n     */\r\n    public get xIn(): NodeGeometryConnectionPoint {\r\n        return this._inputs[4];\r\n    }\r\n\r\n    /**\r\n     * Gets the y component (input)\r\n     */\r\n    public get yIn(): NodeGeometryConnectionPoint {\r\n        return this._inputs[5];\r\n    }\r\n\r\n    /**\r\n     * Gets the z component (input)\r\n     */\r\n    public get zIn(): NodeGeometryConnectionPoint {\r\n        return this._inputs[6];\r\n    }\r\n\r\n    /**\r\n     * Gets the w component (input)\r\n     */\r\n    public get wIn(): NodeGeometryConnectionPoint {\r\n        return this._inputs[7];\r\n    }\r\n\r\n    /**\r\n     * Gets the xyzw component (output)\r\n     */\r\n    public get xyzwOut(): NodeGeometryConnectionPoint {\r\n        return this._outputs[0];\r\n    }\r\n\r\n    /**\r\n     * Gets the xyz component (output)\r\n     */\r\n    public get xyzOut(): NodeGeometryConnectionPoint {\r\n        return this._outputs[1];\r\n    }\r\n\r\n    /**\r\n     * Gets the xy component (output)\r\n     */\r\n    public get xyOut(): NodeGeometryConnectionPoint {\r\n        return this._outputs[2];\r\n    }\r\n\r\n    /**\r\n     * Gets the zw component (output)\r\n     */\r\n    public get zwOut(): NodeGeometryConnectionPoint {\r\n        return this._outputs[3];\r\n    }\r\n\r\n    /**\r\n     * Gets the x component (output)\r\n     */\r\n    public get xOut(): NodeGeometryConnectionPoint {\r\n        return this._outputs[4];\r\n    }\r\n\r\n    /**\r\n     * Gets the y component (output)\r\n     */\r\n    public get yOut(): NodeGeometryConnectionPoint {\r\n        return this._outputs[5];\r\n    }\r\n\r\n    /**\r\n     * Gets the z component (output)\r\n     */\r\n    public get zOut(): NodeGeometryConnectionPoint {\r\n        return this._outputs[6];\r\n    }\r\n\r\n    /**\r\n     * Gets the w component (output)\r\n     */\r\n    public get wOut(): NodeGeometryConnectionPoint {\r\n        return this._outputs[7];\r\n    }\r\n\r\n    protected _inputRename(name: string) {\r\n        if (name === \"xyzw \") {\r\n            return \"xyzwIn\";\r\n        }\r\n        if (name === \"xyz \") {\r\n            return \"xyzIn\";\r\n        }\r\n        if (name === \"xy \") {\r\n            return \"xyIn\";\r\n        }\r\n        if (name === \"zw \") {\r\n            return \"zwIn\";\r\n        }\r\n        if (name === \"x \") {\r\n            return \"xIn\";\r\n        }\r\n        if (name === \"y \") {\r\n            return \"yIn\";\r\n        }\r\n        if (name === \"z \") {\r\n            return \"zIn\";\r\n        }\r\n        if (name === \"w \") {\r\n            return \"wIn\";\r\n        }\r\n        return name;\r\n    }\r\n\r\n    protected _outputRename(name: string) {\r\n        switch (name) {\r\n            case \"x\":\r\n                return \"xOut\";\r\n            case \"y\":\r\n                return \"yOut\";\r\n            case \"z\":\r\n                return \"zOut\";\r\n            case \"w\":\r\n                return \"wOut\";\r\n            case \"xy\":\r\n                return \"xyOut\";\r\n            case \"zw\":\r\n                return \"zwOut\";\r\n            case \"xyz\":\r\n                return \"xyzOut\";\r\n            case \"xyzw\":\r\n                return \"xyzwOut\";\r\n            default:\r\n                return name;\r\n        }\r\n    }\r\n\r\n    protected _buildBlock(state: NodeGeometryBuildState) {\r\n        super._buildBlock(state);\r\n\r\n        const xInput = this.xIn;\r\n        const yInput = this.yIn;\r\n        const zInput = this.zIn;\r\n        const wInput = this.wIn;\r\n        const xyInput = this.xyIn;\r\n        const zwInput = this.zwIn;\r\n        const xyzInput = this.xyzIn;\r\n        const xyzwInput = this.xyzwIn;\r\n\r\n        const xyzwOutput = this.xyzwOut;\r\n        const xyzOutput = this.xyzOut;\r\n        const xyOutput = this.xyOut;\r\n        const zwOutput = this.zwOut;\r\n        const xOutput = this.xOut;\r\n        const yOutput = this.yOut;\r\n        const zOutput = this.zOut;\r\n        const wOutput = this.wOut;\r\n\r\n        const getData = (state: NodeGeometryBuildState): Vector4 => {\r\n            if (xyzwInput.isConnected) {\r\n                return xyzwInput.getConnectedValue(state);\r\n            }\r\n\r\n            let x: number = 0;\r\n            let y: number = 0;\r\n            let z: number = 0;\r\n            let w: number = 0;\r\n\r\n            if (xInput.isConnected) {\r\n                x = xInput.getConnectedValue(state);\r\n            }\r\n            if (yInput.isConnected) {\r\n                y = yInput.getConnectedValue(state);\r\n            }\r\n            if (zInput.isConnected) {\r\n                z = zInput.getConnectedValue(state);\r\n            }\r\n            if (wInput.isConnected) {\r\n                w = wInput.getConnectedValue(state);\r\n            }\r\n\r\n            if (xyInput.isConnected) {\r\n                const temp = xyInput.getConnectedValue(state);\r\n                if (temp) {\r\n                    x = temp.x;\r\n                    y = temp.y;\r\n                }\r\n            }\r\n            if (zwInput.isConnected) {\r\n                const temp = zwInput.getConnectedValue(state);\r\n                if (temp) {\r\n                    z = temp.x;\r\n                    w = temp.y;\r\n                }\r\n            }\r\n            if (xyzInput.isConnected) {\r\n                const temp = xyzInput.getConnectedValue(state);\r\n                if (temp) {\r\n                    x = temp.x;\r\n                    y = temp.y;\r\n                    z = temp.z;\r\n                }\r\n            }\r\n\r\n            return new Vector4(x, y, z, w);\r\n        };\r\n\r\n        xyzwOutput._storedFunction = (state) => getData(state);\r\n        xyzOutput._storedFunction = (state) => {\r\n            const data = getData(state);\r\n            return new Vector3(data.x, data.y, data.z);\r\n        };\r\n        xyOutput._storedFunction = (state) => {\r\n            const data = getData(state);\r\n            return new Vector2(data.x, data.y);\r\n        };\r\n        zwOutput._storedFunction = (state) => {\r\n            const data = getData(state);\r\n            return new Vector2(data.z, data.w);\r\n        };\r\n        xOutput._storedFunction = (state) => getData(state).x;\r\n        yOutput._storedFunction = (state) => getData(state).y;\r\n        zOutput._storedFunction = (state) => getData(state).z;\r\n        wOutput._storedFunction = (state) => getData(state).w;\r\n    }\r\n}\r\n\r\nRegisterClass(\"BABYLON.VectorConverterBlock\", VectorConverterBlock);\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}