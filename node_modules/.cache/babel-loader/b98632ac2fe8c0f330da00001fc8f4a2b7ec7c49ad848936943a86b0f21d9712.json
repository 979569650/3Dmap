{"ast":null,"code":"import { NodeGeometryBlock } from \"../nodeGeometryBlock.js\";\nimport { RegisterClass } from \"../../../Misc/typeStore.js\";\nimport { NodeGeometryBlockConnectionPointTypes } from \"../Enums/nodeGeometryConnectionPointTypes.js\";\n/**\n * Block used to get information about a geometry\n */\nexport class GeometryInfoBlock extends NodeGeometryBlock {\n  /**\n   * Create a new GeometryInfoBlock\n   * @param name defines the block name\n   */\n  constructor(name) {\n    super(name);\n    this.registerInput(\"geometry\", NodeGeometryBlockConnectionPointTypes.Geometry);\n    this.registerOutput(\"output\", NodeGeometryBlockConnectionPointTypes.Geometry);\n    this.registerOutput(\"id\", NodeGeometryBlockConnectionPointTypes.Int);\n    this.registerOutput(\"collectionId\", NodeGeometryBlockConnectionPointTypes.Int);\n    this.registerOutput(\"verticesCount\", NodeGeometryBlockConnectionPointTypes.Int);\n    this.registerOutput(\"facesCount\", NodeGeometryBlockConnectionPointTypes.Int);\n  }\n  /**\n   * Gets the current class name\n   * @returns the class name\n   */\n  getClassName() {\n    return \"GeometryInfoBlock\";\n  }\n  /**\n   * Gets the geometry input component\n   */\n  get geometry() {\n    return this._inputs[0];\n  }\n  /**\n   * Gets the geometry output component\n   */\n  get output() {\n    return this._outputs[0];\n  }\n  /**\n   * Gets the id output component\n   */\n  get id() {\n    return this._outputs[1];\n  }\n  /**\n   * Gets the collectionId output component\n   */\n  get collectionId() {\n    return this._outputs[2];\n  }\n  /**\n   * Gets the verticesCount output component\n   */\n  get verticesCount() {\n    return this._outputs[3];\n  }\n  /**\n   * Gets the facesCount output component\n   */\n  get facesCount() {\n    return this._outputs[4];\n  }\n  _buildBlock() {\n    if (!this.geometry.isConnected) {\n      this.id._storedValue = 0;\n      this.collectionId._storedValue = 0;\n      this.verticesCount._storedValue = 0;\n      this.facesCount._storedValue = 0;\n      this.output._storedValue = 0;\n      this.id._storedFunction = null;\n      this.collectionId._storedFunction = null;\n      this.verticesCount._storedFunction = null;\n      this.facesCount._storedFunction = null;\n      this.output._storedFunction = null;\n      return;\n    }\n    this.output._storedFunction = state => {\n      this._currentVertexData = this.geometry.getConnectedValue(state);\n      return this._currentVertexData;\n    };\n    this.id._storedFunction = state => {\n      this._currentVertexData = this._currentVertexData || this.geometry.getConnectedValue(state);\n      return this._currentVertexData.uniqueId;\n    };\n    this.collectionId._storedFunction = state => {\n      this._currentVertexData = this._currentVertexData || this.geometry.getConnectedValue(state);\n      return this._currentVertexData.metadata ? this._currentVertexData.metadata.collectionId : 0;\n    };\n    this.verticesCount._storedFunction = state => {\n      this._currentVertexData = this._currentVertexData || this.geometry.getConnectedValue(state);\n      return this._currentVertexData.positions ? this._currentVertexData.positions.length / 3 : 0;\n    };\n    this.facesCount._storedFunction = state => {\n      this._currentVertexData = this._currentVertexData || this.geometry.getConnectedValue(state);\n      return this._currentVertexData.indices ? this._currentVertexData.indices.length / 3 : 0;\n    };\n  }\n}\nRegisterClass(\"BABYLON.GeometryInfoBlock\", GeometryInfoBlock);","map":{"version":3,"names":["NodeGeometryBlock","RegisterClass","NodeGeometryBlockConnectionPointTypes","GeometryInfoBlock","constructor","name","registerInput","Geometry","registerOutput","Int","getClassName","geometry","_inputs","output","_outputs","id","collectionId","verticesCount","facesCount","_buildBlock","isConnected","_storedValue","_storedFunction","state","_currentVertexData","getConnectedValue","uniqueId","metadata","positions","length","indices"],"sources":["../../../../../../dev/core/src/Meshes/Node/Blocks/geometryInfoBlock.ts"],"sourcesContent":["import { NodeGeometryBlock } from \"../nodeGeometryBlock\";\r\nimport type { NodeGeometryConnectionPoint } from \"../nodeGeometryBlockConnectionPoint\";\r\nimport { RegisterClass } from \"../../../Misc/typeStore\";\r\nimport { NodeGeometryBlockConnectionPointTypes } from \"../Enums/nodeGeometryConnectionPointTypes\";\r\nimport type { VertexData } from \"../../mesh.vertexData\";\r\nimport type { NodeGeometryBuildState } from \"../nodeGeometryBuildState\";\r\n\r\n/**\r\n * Block used to get information about a geometry\r\n */\r\nexport class GeometryInfoBlock extends NodeGeometryBlock {\r\n    private _currentVertexData: VertexData;\r\n    /**\r\n     * Create a new GeometryInfoBlock\r\n     * @param name defines the block name\r\n     */\r\n    public constructor(name: string) {\r\n        super(name);\r\n\r\n        this.registerInput(\"geometry\", NodeGeometryBlockConnectionPointTypes.Geometry);\r\n\r\n        this.registerOutput(\"output\", NodeGeometryBlockConnectionPointTypes.Geometry);\r\n        this.registerOutput(\"id\", NodeGeometryBlockConnectionPointTypes.Int);\r\n        this.registerOutput(\"collectionId\", NodeGeometryBlockConnectionPointTypes.Int);\r\n        this.registerOutput(\"verticesCount\", NodeGeometryBlockConnectionPointTypes.Int);\r\n        this.registerOutput(\"facesCount\", NodeGeometryBlockConnectionPointTypes.Int);\r\n    }\r\n\r\n    /**\r\n     * Gets the current class name\r\n     * @returns the class name\r\n     */\r\n    public getClassName() {\r\n        return \"GeometryInfoBlock\";\r\n    }\r\n\r\n    /**\r\n     * Gets the geometry input component\r\n     */\r\n    public get geometry(): NodeGeometryConnectionPoint {\r\n        return this._inputs[0];\r\n    }\r\n\r\n    /**\r\n     * Gets the geometry output component\r\n     */\r\n    public get output(): NodeGeometryConnectionPoint {\r\n        return this._outputs[0];\r\n    }\r\n\r\n    /**\r\n     * Gets the id output component\r\n     */\r\n    public get id(): NodeGeometryConnectionPoint {\r\n        return this._outputs[1];\r\n    }\r\n\r\n    /**\r\n     * Gets the collectionId output component\r\n     */\r\n    public get collectionId(): NodeGeometryConnectionPoint {\r\n        return this._outputs[2];\r\n    }\r\n\r\n    /**\r\n     * Gets the verticesCount output component\r\n     */\r\n    public get verticesCount(): NodeGeometryConnectionPoint {\r\n        return this._outputs[3];\r\n    }\r\n\r\n    /**\r\n     * Gets the facesCount output component\r\n     */\r\n    public get facesCount(): NodeGeometryConnectionPoint {\r\n        return this._outputs[4];\r\n    }\r\n\r\n    protected _buildBlock() {\r\n        if (!this.geometry.isConnected) {\r\n            this.id._storedValue = 0;\r\n            this.collectionId._storedValue = 0;\r\n            this.verticesCount._storedValue = 0;\r\n            this.facesCount._storedValue = 0;\r\n            this.output._storedValue = 0;\r\n            this.id._storedFunction = null;\r\n            this.collectionId._storedFunction = null;\r\n            this.verticesCount._storedFunction = null;\r\n            this.facesCount._storedFunction = null;\r\n            this.output._storedFunction = null;\r\n            return;\r\n        }\r\n\r\n        this.output._storedFunction = (state: NodeGeometryBuildState) => {\r\n            this._currentVertexData = this.geometry.getConnectedValue(state) as VertexData;\r\n            return this._currentVertexData;\r\n        };\r\n        this.id._storedFunction = (state: NodeGeometryBuildState) => {\r\n            this._currentVertexData = this._currentVertexData || (this.geometry.getConnectedValue(state) as VertexData);\r\n            return this._currentVertexData.uniqueId;\r\n        };\r\n        this.collectionId._storedFunction = (state: NodeGeometryBuildState) => {\r\n            this._currentVertexData = this._currentVertexData || (this.geometry.getConnectedValue(state) as VertexData);\r\n            return this._currentVertexData.metadata ? this._currentVertexData.metadata.collectionId : 0;\r\n        };\r\n        this.verticesCount._storedFunction = (state: NodeGeometryBuildState) => {\r\n            this._currentVertexData = this._currentVertexData || (this.geometry.getConnectedValue(state) as VertexData);\r\n            return this._currentVertexData.positions ? this._currentVertexData.positions.length / 3 : 0;\r\n        };\r\n        this.facesCount._storedFunction = (state: NodeGeometryBuildState) => {\r\n            this._currentVertexData = this._currentVertexData || (this.geometry.getConnectedValue(state) as VertexData);\r\n            return this._currentVertexData.indices ? this._currentVertexData.indices.length / 3 : 0;\r\n        };\r\n    }\r\n}\r\n\r\nRegisterClass(\"BABYLON.GeometryInfoBlock\", GeometryInfoBlock);\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}