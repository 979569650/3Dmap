{"ast":null,"code":"import { Tools } from \"@babylonjs/core/Misc/tools.js\";\nimport { Matrix, TmpVectors, Vector3 } from \"@babylonjs/core/Maths/math.vector.js\";\nimport { VolumeBasedPanel } from \"./volumeBasedPanel.js\";\nimport { Container3D } from \"./container3D.js\";\nimport { Axis, Space } from \"@babylonjs/core/Maths/math.axis.js\";\n/**\n * Class used to create a container panel deployed on the surface of a sphere\n */\nexport class SpherePanel extends VolumeBasedPanel {\n  constructor() {\n    super(...arguments);\n    this._radius = 5.0;\n  }\n  /**\n   * Gets or sets the radius of the sphere where to project controls (5 by default)\n   */\n  get radius() {\n    return this._radius;\n  }\n  set radius(value) {\n    if (this._radius === value) {\n      return;\n    }\n    this._radius = value;\n    Tools.SetImmediate(() => {\n      this._arrangeChildren();\n    });\n  }\n  _mapGridNode(control, nodePosition) {\n    const mesh = control.mesh;\n    if (!mesh) {\n      return;\n    }\n    const newPos = this._sphericalMapping(nodePosition);\n    control.position = newPos;\n    switch (this.orientation) {\n      case Container3D.FACEORIGIN_ORIENTATION:\n        mesh.lookAt(new Vector3(2 * newPos.x, 2 * newPos.y, 2 * newPos.z));\n        break;\n      case Container3D.FACEORIGINREVERSED_ORIENTATION:\n        mesh.lookAt(new Vector3(-newPos.x, -newPos.y, -newPos.z));\n        break;\n      case Container3D.FACEFORWARD_ORIENTATION:\n        break;\n      case Container3D.FACEFORWARDREVERSED_ORIENTATION:\n        mesh.rotate(Axis.Y, Math.PI, Space.LOCAL);\n        break;\n    }\n  }\n  _sphericalMapping(source) {\n    const newPos = new Vector3(0, 0, this._radius);\n    const xAngle = source.y / this._radius;\n    const yAngle = -(source.x / this._radius);\n    Matrix.RotationYawPitchRollToRef(yAngle, xAngle, 0, TmpVectors.Matrix[0]);\n    return Vector3.TransformNormal(newPos, TmpVectors.Matrix[0]);\n  }\n}","map":{"version":3,"names":["Tools","Matrix","TmpVectors","Vector3","VolumeBasedPanel","Container3D","Axis","Space","SpherePanel","constructor","_radius","radius","value","SetImmediate","_arrangeChildren","_mapGridNode","control","nodePosition","mesh","newPos","_sphericalMapping","position","orientation","FACEORIGIN_ORIENTATION","lookAt","x","y","z","FACEORIGINREVERSED_ORIENTATION","FACEFORWARD_ORIENTATION","FACEFORWARDREVERSED_ORIENTATION","rotate","Y","Math","PI","LOCAL","source","xAngle","yAngle","RotationYawPitchRollToRef","TransformNormal"],"sources":["../../../../../dev/gui/src/3D/controls/spherePanel.ts"],"sourcesContent":["import { Tools } from \"core/Misc/tools\";\r\nimport { Matrix, TmpVectors, Vector3 } from \"core/Maths/math.vector\";\r\nimport type { float } from \"core/types\";\r\n\r\nimport { VolumeBasedPanel } from \"./volumeBasedPanel\";\r\nimport type { Control3D } from \"./control3D\";\r\nimport { Container3D } from \"./container3D\";\r\nimport { Axis, Space } from \"core/Maths/math.axis\";\r\n\r\n/**\r\n * Class used to create a container panel deployed on the surface of a sphere\r\n */\r\nexport class SpherePanel extends VolumeBasedPanel {\r\n    private _radius = 5.0;\r\n\r\n    /**\r\n     * Gets or sets the radius of the sphere where to project controls (5 by default)\r\n     */\r\n    public get radius(): float {\r\n        return this._radius;\r\n    }\r\n\r\n    public set radius(value: float) {\r\n        if (this._radius === value) {\r\n            return;\r\n        }\r\n\r\n        this._radius = value;\r\n\r\n        Tools.SetImmediate(() => {\r\n            this._arrangeChildren();\r\n        });\r\n    }\r\n\r\n    protected _mapGridNode(control: Control3D, nodePosition: Vector3) {\r\n        const mesh = control.mesh;\r\n\r\n        if (!mesh) {\r\n            return;\r\n        }\r\n\r\n        const newPos = this._sphericalMapping(nodePosition);\r\n        control.position = newPos;\r\n\r\n        switch (this.orientation) {\r\n            case Container3D.FACEORIGIN_ORIENTATION:\r\n                mesh.lookAt(new Vector3(2 * newPos.x, 2 * newPos.y, 2 * newPos.z));\r\n                break;\r\n            case Container3D.FACEORIGINREVERSED_ORIENTATION:\r\n                mesh.lookAt(new Vector3(-newPos.x, -newPos.y, -newPos.z));\r\n                break;\r\n            case Container3D.FACEFORWARD_ORIENTATION:\r\n                break;\r\n            case Container3D.FACEFORWARDREVERSED_ORIENTATION:\r\n                mesh.rotate(Axis.Y, Math.PI, Space.LOCAL);\r\n                break;\r\n        }\r\n    }\r\n\r\n    private _sphericalMapping(source: Vector3) {\r\n        const newPos = new Vector3(0, 0, this._radius);\r\n\r\n        const xAngle = source.y / this._radius;\r\n        const yAngle = -(source.x / this._radius);\r\n\r\n        Matrix.RotationYawPitchRollToRef(yAngle, xAngle, 0, TmpVectors.Matrix[0]);\r\n\r\n        return Vector3.TransformNormal(newPos, TmpVectors.Matrix[0]);\r\n    }\r\n}\r\n"],"mappings":"AAAA,SAASA,KAAK,QAAE;AAChB,SAASC,MAAM,EAAEC,UAAU,EAAEC,OAAO,QAAE;AAGtC,SAASC,gBAAgB,QAAQ,uBAAqB;AAEtD,SAASC,WAAW,QAAQ,kBAAgB;AAC5C,SAASC,IAAI,EAAEC,KAAK,QAAE;AAEtB;;;AAGA,OAAM,MAAOC,WAAY,SAAQJ,gBAAgB;EAAjDK,YAAA;;IACY,KAAAC,OAAO,GAAG,GAAG;EAwDzB;EAtDI;;;EAGA,IAAWC,MAAMA,CAAA;IACb,OAAO,IAAI,CAACD,OAAO;EACvB;EAEA,IAAWC,MAAMA,CAACC,KAAY;IAC1B,IAAI,IAAI,CAACF,OAAO,KAAKE,KAAK,EAAE;MACxB;;IAGJ,IAAI,CAACF,OAAO,GAAGE,KAAK;IAEpBZ,KAAK,CAACa,YAAY,CAAC,MAAK;MACpB,IAAI,CAACC,gBAAgB,EAAE;IAC3B,CAAC,CAAC;EACN;EAEUC,YAAYA,CAACC,OAAkB,EAAEC,YAAqB;IAC5D,MAAMC,IAAI,GAAGF,OAAO,CAACE,IAAI;IAEzB,IAAI,CAACA,IAAI,EAAE;MACP;;IAGJ,MAAMC,MAAM,GAAG,IAAI,CAACC,iBAAiB,CAACH,YAAY,CAAC;IACnDD,OAAO,CAACK,QAAQ,GAAGF,MAAM;IAEzB,QAAQ,IAAI,CAACG,WAAW;MACpB,KAAKjB,WAAW,CAACkB,sBAAsB;QACnCL,IAAI,CAACM,MAAM,CAAC,IAAIrB,OAAO,CAAC,CAAC,GAAGgB,MAAM,CAACM,CAAC,EAAE,CAAC,GAAGN,MAAM,CAACO,CAAC,EAAE,CAAC,GAAGP,MAAM,CAACQ,CAAC,CAAC,CAAC;QAClE;MACJ,KAAKtB,WAAW,CAACuB,8BAA8B;QAC3CV,IAAI,CAACM,MAAM,CAAC,IAAIrB,OAAO,CAAC,CAACgB,MAAM,CAACM,CAAC,EAAE,CAACN,MAAM,CAACO,CAAC,EAAE,CAACP,MAAM,CAACQ,CAAC,CAAC,CAAC;QACzD;MACJ,KAAKtB,WAAW,CAACwB,uBAAuB;QACpC;MACJ,KAAKxB,WAAW,CAACyB,+BAA+B;QAC5CZ,IAAI,CAACa,MAAM,CAACzB,IAAI,CAAC0B,CAAC,EAAEC,IAAI,CAACC,EAAE,EAAE3B,KAAK,CAAC4B,KAAK,CAAC;QACzC;;EAEZ;EAEQf,iBAAiBA,CAACgB,MAAe;IACrC,MAAMjB,MAAM,GAAG,IAAIhB,OAAO,CAAC,CAAC,EAAE,CAAC,EAAE,IAAI,CAACO,OAAO,CAAC;IAE9C,MAAM2B,MAAM,GAAGD,MAAM,CAACV,CAAC,GAAG,IAAI,CAAChB,OAAO;IACtC,MAAM4B,MAAM,GAAG,EAAEF,MAAM,CAACX,CAAC,GAAG,IAAI,CAACf,OAAO,CAAC;IAEzCT,MAAM,CAACsC,yBAAyB,CAACD,MAAM,EAAED,MAAM,EAAE,CAAC,EAAEnC,UAAU,CAACD,MAAM,CAAC,CAAC,CAAC,CAAC;IAEzE,OAAOE,OAAO,CAACqC,eAAe,CAACrB,MAAM,EAAEjB,UAAU,CAACD,MAAM,CAAC,CAAC,CAAC,CAAC;EAChE"},"metadata":{},"sourceType":"module","externalDependencies":[]}