{"ast":null,"code":"import { PerfCounter } from \"../Misc/perfCounter.js\";\n/**\n * This class can be used to get instrumentation data from a Babylon engine\n * @see https://doc.babylonjs.com/features/featuresDeepDive/scene/optimize_your_scene#engineinstrumentation\n */\nexport class EngineInstrumentation {\n  // Properties\n  /**\n   * Gets the perf counter used for GPU frame time\n   */\n  get gpuFrameTimeCounter() {\n    return this.engine.getGPUFrameTimeCounter();\n  }\n  /**\n   * Gets the GPU frame time capture status\n   */\n  get captureGPUFrameTime() {\n    return this._captureGPUFrameTime;\n  }\n  /**\n   * Enable or disable the GPU frame time capture\n   */\n  set captureGPUFrameTime(value) {\n    if (value === this._captureGPUFrameTime) {\n      return;\n    }\n    this._captureGPUFrameTime = value;\n    this.engine.captureGPUFrameTime(value);\n  }\n  /**\n   * Gets the perf counter used for shader compilation time\n   */\n  get shaderCompilationTimeCounter() {\n    return this._shaderCompilationTime;\n  }\n  /**\n   * Gets the shader compilation time capture status\n   */\n  get captureShaderCompilationTime() {\n    return this._captureShaderCompilationTime;\n  }\n  /**\n   * Enable or disable the shader compilation time capture\n   */\n  set captureShaderCompilationTime(value) {\n    if (value === this._captureShaderCompilationTime) {\n      return;\n    }\n    this._captureShaderCompilationTime = value;\n    if (value) {\n      this._onBeforeShaderCompilationObserver = this.engine.onBeforeShaderCompilationObservable.add(() => {\n        this._shaderCompilationTime.fetchNewFrame();\n        this._shaderCompilationTime.beginMonitoring();\n      });\n      this._onAfterShaderCompilationObserver = this.engine.onAfterShaderCompilationObservable.add(() => {\n        this._shaderCompilationTime.endMonitoring();\n      });\n    } else {\n      this.engine.onBeforeShaderCompilationObservable.remove(this._onBeforeShaderCompilationObserver);\n      this._onBeforeShaderCompilationObserver = null;\n      this.engine.onAfterShaderCompilationObservable.remove(this._onAfterShaderCompilationObserver);\n      this._onAfterShaderCompilationObserver = null;\n    }\n  }\n  /**\n   * Instantiates a new engine instrumentation.\n   * This class can be used to get instrumentation data from a Babylon engine\n   * @see https://doc.babylonjs.com/features/featuresDeepDive/scene/optimize_your_scene#engineinstrumentation\n   * @param engine Defines the engine to instrument\n   */\n  constructor(\n  /**\n   * Define the instrumented engine.\n   */\n  engine) {\n    this.engine = engine;\n    this._captureGPUFrameTime = false;\n    this._captureShaderCompilationTime = false;\n    this._shaderCompilationTime = new PerfCounter();\n    // Observers\n    this._onBeginFrameObserver = null;\n    this._onEndFrameObserver = null;\n    this._onBeforeShaderCompilationObserver = null;\n    this._onAfterShaderCompilationObserver = null;\n  }\n  /**\n   * Dispose and release associated resources.\n   */\n  dispose() {\n    this.engine.onBeginFrameObservable.remove(this._onBeginFrameObserver);\n    this._onBeginFrameObserver = null;\n    this.engine.onEndFrameObservable.remove(this._onEndFrameObserver);\n    this._onEndFrameObserver = null;\n    this.engine.onBeforeShaderCompilationObservable.remove(this._onBeforeShaderCompilationObserver);\n    this._onBeforeShaderCompilationObserver = null;\n    this.engine.onAfterShaderCompilationObservable.remove(this._onAfterShaderCompilationObserver);\n    this._onAfterShaderCompilationObserver = null;\n    this.engine = null;\n  }\n}","map":{"version":3,"names":["PerfCounter","EngineInstrumentation","gpuFrameTimeCounter","engine","getGPUFrameTimeCounter","captureGPUFrameTime","_captureGPUFrameTime","value","shaderCompilationTimeCounter","_shaderCompilationTime","captureShaderCompilationTime","_captureShaderCompilationTime","_onBeforeShaderCompilationObserver","onBeforeShaderCompilationObservable","add","fetchNewFrame","beginMonitoring","_onAfterShaderCompilationObserver","onAfterShaderCompilationObservable","endMonitoring","remove","constructor","_onBeginFrameObserver","_onEndFrameObserver","dispose","onBeginFrameObservable","onEndFrameObservable"],"sources":["../../../../dev/core/src/Instrumentation/engineInstrumentation.ts"],"sourcesContent":["import type { Observer } from \"../Misc/observable\";\r\nimport { PerfCounter } from \"../Misc/perfCounter\";\r\nimport type { Nullable } from \"../types\";\r\nimport type { IDisposable } from \"../scene\";\r\nimport type { Engine } from \"../Engines/engine\";\r\n/**\r\n * This class can be used to get instrumentation data from a Babylon engine\r\n * @see https://doc.babylonjs.com/features/featuresDeepDive/scene/optimize_your_scene#engineinstrumentation\r\n */\r\nexport class EngineInstrumentation implements IDisposable {\r\n    private _captureGPUFrameTime = false;\r\n\r\n    private _captureShaderCompilationTime = false;\r\n    private _shaderCompilationTime = new PerfCounter();\r\n\r\n    // Observers\r\n    private _onBeginFrameObserver: Nullable<Observer<Engine>> = null;\r\n    private _onEndFrameObserver: Nullable<Observer<Engine>> = null;\r\n    private _onBeforeShaderCompilationObserver: Nullable<Observer<Engine>> = null;\r\n    private _onAfterShaderCompilationObserver: Nullable<Observer<Engine>> = null;\r\n\r\n    // Properties\r\n    /**\r\n     * Gets the perf counter used for GPU frame time\r\n     */\r\n    public get gpuFrameTimeCounter(): PerfCounter {\r\n        return this.engine.getGPUFrameTimeCounter();\r\n    }\r\n\r\n    /**\r\n     * Gets the GPU frame time capture status\r\n     */\r\n    public get captureGPUFrameTime(): boolean {\r\n        return this._captureGPUFrameTime;\r\n    }\r\n\r\n    /**\r\n     * Enable or disable the GPU frame time capture\r\n     */\r\n    public set captureGPUFrameTime(value: boolean) {\r\n        if (value === this._captureGPUFrameTime) {\r\n            return;\r\n        }\r\n\r\n        this._captureGPUFrameTime = value;\r\n        this.engine.captureGPUFrameTime(value);\r\n    }\r\n\r\n    /**\r\n     * Gets the perf counter used for shader compilation time\r\n     */\r\n    public get shaderCompilationTimeCounter(): PerfCounter {\r\n        return this._shaderCompilationTime;\r\n    }\r\n\r\n    /**\r\n     * Gets the shader compilation time capture status\r\n     */\r\n    public get captureShaderCompilationTime(): boolean {\r\n        return this._captureShaderCompilationTime;\r\n    }\r\n\r\n    /**\r\n     * Enable or disable the shader compilation time capture\r\n     */\r\n    public set captureShaderCompilationTime(value: boolean) {\r\n        if (value === this._captureShaderCompilationTime) {\r\n            return;\r\n        }\r\n\r\n        this._captureShaderCompilationTime = value;\r\n\r\n        if (value) {\r\n            this._onBeforeShaderCompilationObserver = this.engine.onBeforeShaderCompilationObservable.add(() => {\r\n                this._shaderCompilationTime.fetchNewFrame();\r\n                this._shaderCompilationTime.beginMonitoring();\r\n            });\r\n\r\n            this._onAfterShaderCompilationObserver = this.engine.onAfterShaderCompilationObservable.add(() => {\r\n                this._shaderCompilationTime.endMonitoring();\r\n            });\r\n        } else {\r\n            this.engine.onBeforeShaderCompilationObservable.remove(this._onBeforeShaderCompilationObserver);\r\n            this._onBeforeShaderCompilationObserver = null;\r\n            this.engine.onAfterShaderCompilationObservable.remove(this._onAfterShaderCompilationObserver);\r\n            this._onAfterShaderCompilationObserver = null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Instantiates a new engine instrumentation.\r\n     * This class can be used to get instrumentation data from a Babylon engine\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/scene/optimize_your_scene#engineinstrumentation\r\n     * @param engine Defines the engine to instrument\r\n     */\r\n    public constructor(\r\n        /**\r\n         * Define the instrumented engine.\r\n         */\r\n        public engine: Engine\r\n    ) {}\r\n\r\n    /**\r\n     * Dispose and release associated resources.\r\n     */\r\n    public dispose() {\r\n        this.engine.onBeginFrameObservable.remove(this._onBeginFrameObserver);\r\n        this._onBeginFrameObserver = null;\r\n\r\n        this.engine.onEndFrameObservable.remove(this._onEndFrameObserver);\r\n        this._onEndFrameObserver = null;\r\n\r\n        this.engine.onBeforeShaderCompilationObservable.remove(this._onBeforeShaderCompilationObserver);\r\n        this._onBeforeShaderCompilationObserver = null;\r\n\r\n        this.engine.onAfterShaderCompilationObservable.remove(this._onAfterShaderCompilationObserver);\r\n        this._onAfterShaderCompilationObserver = null;\r\n\r\n        (<any>this.engine) = null;\r\n    }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}