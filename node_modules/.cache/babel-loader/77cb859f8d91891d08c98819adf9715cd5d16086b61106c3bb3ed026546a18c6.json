{"ast":null,"code":"import { Observable } from \"../Misc/observable.js\";\n/**\n * Represents a gamepad control stick position\n */\nexport class StickValues {\n  /**\n   * Initializes the gamepad x and y control stick values\n   * @param x The x component of the gamepad control stick value\n   * @param y The y component of the gamepad control stick value\n   */\n  constructor(\n  /**\n   * The x component of the control stick\n   */\n  x,\n  /**\n   * The y component of the control stick\n   */\n  y) {\n    this.x = x;\n    this.y = y;\n  }\n}\n/**\n * Represents a gamepad\n */\nexport class Gamepad {\n  /**\n   * Specifies if the gamepad has been connected\n   */\n  get isConnected() {\n    return this._isConnected;\n  }\n  /**\n   * Initializes the gamepad\n   * @param id The id of the gamepad\n   * @param index The index of the gamepad\n   * @param browserGamepad The browser gamepad\n   * @param leftStickX The x component of the left joystick\n   * @param leftStickY The y component of the left joystick\n   * @param rightStickX The x component of the right joystick\n   * @param rightStickY The y component of the right joystick\n   */\n  constructor(\n  /**\n   * The id of the gamepad\n   */\n  id,\n  /**\n   * The index of the gamepad\n   */\n  index,\n  /**\n   * The browser gamepad\n   */\n  browserGamepad, leftStickX = 0, leftStickY = 1, rightStickX = 2, rightStickY = 3) {\n    this.id = id;\n    this.index = index;\n    this.browserGamepad = browserGamepad;\n    this._leftStick = {\n      x: 0,\n      y: 0\n    };\n    this._rightStick = {\n      x: 0,\n      y: 0\n    };\n    /** @internal */\n    this._isConnected = true;\n    /**\n     * Specifies whether the left control stick should be Y-inverted\n     */\n    this._invertLeftStickY = false;\n    this.type = Gamepad.GAMEPAD;\n    this._leftStickAxisX = leftStickX;\n    this._leftStickAxisY = leftStickY;\n    this._rightStickAxisX = rightStickX;\n    this._rightStickAxisY = rightStickY;\n    if (this.browserGamepad.axes.length >= 2) {\n      this._leftStick = {\n        x: this.browserGamepad.axes[this._leftStickAxisX],\n        y: this.browserGamepad.axes[this._leftStickAxisY]\n      };\n    }\n    if (this.browserGamepad.axes.length >= 4) {\n      this._rightStick = {\n        x: this.browserGamepad.axes[this._rightStickAxisX],\n        y: this.browserGamepad.axes[this._rightStickAxisY]\n      };\n    }\n  }\n  /**\n   * Callback triggered when the left joystick has changed\n   * @param callback\n   */\n  onleftstickchanged(callback) {\n    this._onleftstickchanged = callback;\n  }\n  /**\n   * Callback triggered when the right joystick has changed\n   * @param callback\n   */\n  onrightstickchanged(callback) {\n    this._onrightstickchanged = callback;\n  }\n  /**\n   * Gets the left joystick\n   */\n  get leftStick() {\n    return this._leftStick;\n  }\n  /**\n   * Sets the left joystick values\n   */\n  set leftStick(newValues) {\n    if (this._onleftstickchanged && (this._leftStick.x !== newValues.x || this._leftStick.y !== newValues.y)) {\n      this._onleftstickchanged(newValues);\n    }\n    this._leftStick = newValues;\n  }\n  /**\n   * Gets the right joystick\n   */\n  get rightStick() {\n    return this._rightStick;\n  }\n  /**\n   * Sets the right joystick value\n   */\n  set rightStick(newValues) {\n    if (this._onrightstickchanged && (this._rightStick.x !== newValues.x || this._rightStick.y !== newValues.y)) {\n      this._onrightstickchanged(newValues);\n    }\n    this._rightStick = newValues;\n  }\n  /**\n   * Updates the gamepad joystick positions\n   */\n  update() {\n    if (this._leftStick) {\n      this.leftStick = {\n        x: this.browserGamepad.axes[this._leftStickAxisX],\n        y: this.browserGamepad.axes[this._leftStickAxisY]\n      };\n      if (this._invertLeftStickY) {\n        this.leftStick.y *= -1;\n      }\n    }\n    if (this._rightStick) {\n      this.rightStick = {\n        x: this.browserGamepad.axes[this._rightStickAxisX],\n        y: this.browserGamepad.axes[this._rightStickAxisY]\n      };\n    }\n  }\n  /**\n   * Disposes the gamepad\n   */\n  dispose() {}\n}\n/**\n * Represents a gamepad controller\n */\nGamepad.GAMEPAD = 0;\n/**\n * Represents a generic controller\n */\nGamepad.GENERIC = 1;\n/**\n * Represents an XBox controller\n */\nGamepad.XBOX = 2;\n/**\n * Represents a pose-enabled controller\n */\nGamepad.POSE_ENABLED = 3;\n/**\n * Represents an Dual Shock controller\n */\nGamepad.DUALSHOCK = 4;\n/**\n * Represents a generic gamepad\n */\nexport class GenericPad extends Gamepad {\n  /**\n   * Callback triggered when a button has been pressed\n   * @param callback Called when a button has been pressed\n   */\n  onbuttondown(callback) {\n    this._onbuttondown = callback;\n  }\n  /**\n   * Callback triggered when a button has been released\n   * @param callback Called when a button has been released\n   */\n  onbuttonup(callback) {\n    this._onbuttonup = callback;\n  }\n  /**\n   * Initializes the generic gamepad\n   * @param id The id of the generic gamepad\n   * @param index The index of the generic gamepad\n   * @param browserGamepad The browser gamepad\n   */\n  constructor(id, index, browserGamepad) {\n    super(id, index, browserGamepad);\n    /**\n     * Observable triggered when a button has been pressed\n     */\n    this.onButtonDownObservable = new Observable();\n    /**\n     * Observable triggered when a button has been released\n     */\n    this.onButtonUpObservable = new Observable();\n    this.type = Gamepad.GENERIC;\n    this._buttons = new Array(browserGamepad.buttons.length);\n  }\n  _setButtonValue(newValue, currentValue, buttonIndex) {\n    if (newValue !== currentValue) {\n      if (newValue === 1) {\n        if (this._onbuttondown) {\n          this._onbuttondown(buttonIndex);\n        }\n        this.onButtonDownObservable.notifyObservers(buttonIndex);\n      }\n      if (newValue === 0) {\n        if (this._onbuttonup) {\n          this._onbuttonup(buttonIndex);\n        }\n        this.onButtonUpObservable.notifyObservers(buttonIndex);\n      }\n    }\n    return newValue;\n  }\n  /**\n   * Updates the generic gamepad\n   */\n  update() {\n    super.update();\n    for (let index = 0; index < this._buttons.length; index++) {\n      this._buttons[index] = this._setButtonValue(this.browserGamepad.buttons[index].value, this._buttons[index], index);\n    }\n  }\n  /**\n   * Disposes the generic gamepad\n   */\n  dispose() {\n    super.dispose();\n    this.onButtonDownObservable.clear();\n    this.onButtonUpObservable.clear();\n  }\n}","map":{"version":3,"names":["Observable","StickValues","constructor","x","y","Gamepad","isConnected","_isConnected","id","index","browserGamepad","leftStickX","leftStickY","rightStickX","rightStickY","_leftStick","_rightStick","_invertLeftStickY","type","GAMEPAD","_leftStickAxisX","_leftStickAxisY","_rightStickAxisX","_rightStickAxisY","axes","length","onleftstickchanged","callback","_onleftstickchanged","onrightstickchanged","_onrightstickchanged","leftStick","newValues","rightStick","update","dispose","GENERIC","XBOX","POSE_ENABLED","DUALSHOCK","GenericPad","onbuttondown","_onbuttondown","onbuttonup","_onbuttonup","onButtonDownObservable","onButtonUpObservable","_buttons","Array","buttons","_setButtonValue","newValue","currentValue","buttonIndex","notifyObservers","value","clear"],"sources":["../../../../dev/core/src/Gamepads/gamepad.ts"],"sourcesContent":["import { Observable } from \"../Misc/observable\";\r\n\r\n/**\r\n * Represents a gamepad control stick position\r\n */\r\nexport class StickValues {\r\n    /**\r\n     * Initializes the gamepad x and y control stick values\r\n     * @param x The x component of the gamepad control stick value\r\n     * @param y The y component of the gamepad control stick value\r\n     */\r\n    constructor(\r\n        /**\r\n         * The x component of the control stick\r\n         */\r\n        public x: number,\r\n        /**\r\n         * The y component of the control stick\r\n         */\r\n        public y: number\r\n    ) {}\r\n}\r\n\r\n/**\r\n * An interface which manages callbacks for gamepad button changes\r\n */\r\nexport interface GamepadButtonChanges {\r\n    /**\r\n     * Called when a gamepad has been changed\r\n     */\r\n    changed: boolean;\r\n    /**\r\n     * Called when a gamepad press event has been triggered\r\n     */\r\n    pressChanged: boolean;\r\n    /**\r\n     * Called when a touch event has been triggered\r\n     */\r\n    touchChanged: boolean;\r\n    /**\r\n     * Called when a value has changed\r\n     */\r\n    valueChanged: boolean;\r\n}\r\n\r\n/**\r\n * Represents a gamepad\r\n */\r\nexport class Gamepad {\r\n    /**\r\n     * Specifies what type of gamepad this represents\r\n     */\r\n    public type: number;\r\n\r\n    private _leftStick: StickValues = { x: 0, y: 0 };\r\n    private _rightStick: StickValues = { x: 0, y: 0 };\r\n\r\n    /** @internal */\r\n    public _isConnected = true;\r\n\r\n    private _leftStickAxisX: number;\r\n    private _leftStickAxisY: number;\r\n    private _rightStickAxisX: number;\r\n    private _rightStickAxisY: number;\r\n\r\n    /**\r\n     * Triggered when the left control stick has been changed\r\n     */\r\n    private _onleftstickchanged: (values: StickValues) => void;\r\n\r\n    /**\r\n     * Triggered when the right control stick has been changed\r\n     */\r\n    private _onrightstickchanged: (values: StickValues) => void;\r\n\r\n    /**\r\n     * Represents a gamepad controller\r\n     */\r\n    public static GAMEPAD = 0;\r\n    /**\r\n     * Represents a generic controller\r\n     */\r\n    public static GENERIC = 1;\r\n    /**\r\n     * Represents an XBox controller\r\n     */\r\n    public static XBOX = 2;\r\n    /**\r\n     * Represents a pose-enabled controller\r\n     */\r\n    public static POSE_ENABLED = 3;\r\n    /**\r\n     * Represents an Dual Shock controller\r\n     */\r\n    public static DUALSHOCK = 4;\r\n\r\n    /**\r\n     * Specifies whether the left control stick should be Y-inverted\r\n     */\r\n    protected _invertLeftStickY: boolean = false;\r\n\r\n    /**\r\n     * Specifies if the gamepad has been connected\r\n     */\r\n    public get isConnected(): boolean {\r\n        return this._isConnected;\r\n    }\r\n\r\n    /**\r\n     * Initializes the gamepad\r\n     * @param id The id of the gamepad\r\n     * @param index The index of the gamepad\r\n     * @param browserGamepad The browser gamepad\r\n     * @param leftStickX The x component of the left joystick\r\n     * @param leftStickY The y component of the left joystick\r\n     * @param rightStickX The x component of the right joystick\r\n     * @param rightStickY The y component of the right joystick\r\n     */\r\n    constructor(\r\n        /**\r\n         * The id of the gamepad\r\n         */\r\n        public id: string,\r\n        /**\r\n         * The index of the gamepad\r\n         */\r\n        public index: number,\r\n        /**\r\n         * The browser gamepad\r\n         */\r\n        public browserGamepad: any,\r\n        leftStickX: number = 0,\r\n        leftStickY: number = 1,\r\n        rightStickX: number = 2,\r\n        rightStickY: number = 3\r\n    ) {\r\n        this.type = Gamepad.GAMEPAD;\r\n        this._leftStickAxisX = leftStickX;\r\n        this._leftStickAxisY = leftStickY;\r\n        this._rightStickAxisX = rightStickX;\r\n        this._rightStickAxisY = rightStickY;\r\n        if (this.browserGamepad.axes.length >= 2) {\r\n            this._leftStick = { x: this.browserGamepad.axes[this._leftStickAxisX], y: this.browserGamepad.axes[this._leftStickAxisY] };\r\n        }\r\n        if (this.browserGamepad.axes.length >= 4) {\r\n            this._rightStick = { x: this.browserGamepad.axes[this._rightStickAxisX], y: this.browserGamepad.axes[this._rightStickAxisY] };\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Callback triggered when the left joystick has changed\r\n     * @param callback\r\n     */\r\n    public onleftstickchanged(callback: (values: StickValues) => void) {\r\n        this._onleftstickchanged = callback;\r\n    }\r\n\r\n    /**\r\n     * Callback triggered when the right joystick has changed\r\n     * @param callback\r\n     */\r\n    public onrightstickchanged(callback: (values: StickValues) => void) {\r\n        this._onrightstickchanged = callback;\r\n    }\r\n\r\n    /**\r\n     * Gets the left joystick\r\n     */\r\n    public get leftStick(): StickValues {\r\n        return this._leftStick;\r\n    }\r\n    /**\r\n     * Sets the left joystick values\r\n     */\r\n    public set leftStick(newValues: StickValues) {\r\n        if (this._onleftstickchanged && (this._leftStick.x !== newValues.x || this._leftStick.y !== newValues.y)) {\r\n            this._onleftstickchanged(newValues);\r\n        }\r\n        this._leftStick = newValues;\r\n    }\r\n    /**\r\n     * Gets the right joystick\r\n     */\r\n    public get rightStick(): StickValues {\r\n        return this._rightStick;\r\n    }\r\n    /**\r\n     * Sets the right joystick value\r\n     */\r\n    public set rightStick(newValues: StickValues) {\r\n        if (this._onrightstickchanged && (this._rightStick.x !== newValues.x || this._rightStick.y !== newValues.y)) {\r\n            this._onrightstickchanged(newValues);\r\n        }\r\n        this._rightStick = newValues;\r\n    }\r\n\r\n    /**\r\n     * Updates the gamepad joystick positions\r\n     */\r\n\r\n    public update() {\r\n        if (this._leftStick) {\r\n            this.leftStick = { x: this.browserGamepad.axes[this._leftStickAxisX], y: this.browserGamepad.axes[this._leftStickAxisY] };\r\n            if (this._invertLeftStickY) {\r\n                this.leftStick.y *= -1;\r\n            }\r\n        }\r\n        if (this._rightStick) {\r\n            this.rightStick = { x: this.browserGamepad.axes[this._rightStickAxisX], y: this.browserGamepad.axes[this._rightStickAxisY] };\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Disposes the gamepad\r\n     */\r\n    public dispose() {}\r\n}\r\n\r\n/**\r\n * Represents a generic gamepad\r\n */\r\nexport class GenericPad extends Gamepad {\r\n    private _buttons: Array<number>;\r\n    private _onbuttondown: (buttonPressed: number) => void;\r\n    private _onbuttonup: (buttonReleased: number) => void;\r\n\r\n    /**\r\n     * Observable triggered when a button has been pressed\r\n     */\r\n    public onButtonDownObservable = new Observable<number>();\r\n    /**\r\n     * Observable triggered when a button has been released\r\n     */\r\n    public onButtonUpObservable = new Observable<number>();\r\n\r\n    /**\r\n     * Callback triggered when a button has been pressed\r\n     * @param callback Called when a button has been pressed\r\n     */\r\n    public onbuttondown(callback: (buttonPressed: number) => void) {\r\n        this._onbuttondown = callback;\r\n    }\r\n    /**\r\n     * Callback triggered when a button has been released\r\n     * @param callback Called when a button has been released\r\n     */\r\n    public onbuttonup(callback: (buttonReleased: number) => void) {\r\n        this._onbuttonup = callback;\r\n    }\r\n\r\n    /**\r\n     * Initializes the generic gamepad\r\n     * @param id The id of the generic gamepad\r\n     * @param index The index of the generic gamepad\r\n     * @param browserGamepad The browser gamepad\r\n     */\r\n    constructor(id: string, index: number, browserGamepad: any) {\r\n        super(id, index, browserGamepad);\r\n        this.type = Gamepad.GENERIC;\r\n        this._buttons = new Array(browserGamepad.buttons.length);\r\n    }\r\n\r\n    private _setButtonValue(newValue: number, currentValue: number, buttonIndex: number): number {\r\n        if (newValue !== currentValue) {\r\n            if (newValue === 1) {\r\n                if (this._onbuttondown) {\r\n                    this._onbuttondown(buttonIndex);\r\n                }\r\n\r\n                this.onButtonDownObservable.notifyObservers(buttonIndex);\r\n            }\r\n            if (newValue === 0) {\r\n                if (this._onbuttonup) {\r\n                    this._onbuttonup(buttonIndex);\r\n                }\r\n\r\n                this.onButtonUpObservable.notifyObservers(buttonIndex);\r\n            }\r\n        }\r\n        return newValue;\r\n    }\r\n\r\n    /**\r\n     * Updates the generic gamepad\r\n     */\r\n    public update() {\r\n        super.update();\r\n        for (let index = 0; index < this._buttons.length; index++) {\r\n            this._buttons[index] = this._setButtonValue(this.browserGamepad.buttons[index].value, this._buttons[index], index);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Disposes the generic gamepad\r\n     */\r\n    public dispose() {\r\n        super.dispose();\r\n        this.onButtonDownObservable.clear();\r\n        this.onButtonUpObservable.clear();\r\n    }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}