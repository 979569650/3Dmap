{"ast":null,"code":"import { Observable } from \"../Misc/observable.js\";\n/**\n * The engine store class is responsible to hold all the instances of Engine and Scene created\n * during the life time of the application.\n */\nexport class EngineStore {\n  /**\n   * Gets the latest created engine\n   */\n  static get LastCreatedEngine() {\n    if (this.Instances.length === 0) {\n      return null;\n    }\n    return this.Instances[this.Instances.length - 1];\n  }\n  /**\n   * Gets the latest created scene\n   */\n  static get LastCreatedScene() {\n    return this._LastCreatedScene;\n  }\n}\n/** Gets the list of created engines */\nEngineStore.Instances = new Array();\n/**\n * Notifies when an engine was disposed.\n * Mainly used for static/cache cleanup\n */\nEngineStore.OnEnginesDisposedObservable = new Observable();\n/** @internal */\nEngineStore._LastCreatedScene = null;\n/**\n * Gets or sets a global variable indicating if fallback texture must be used when a texture cannot be loaded\n * @ignorenaming\n */\nEngineStore.UseFallbackTexture = true;\n/**\n * Texture content used if a texture cannot loaded\n * @ignorenaming\n */\nEngineStore.FallbackTexture = \"\";","map":{"version":3,"names":["Observable","EngineStore","LastCreatedEngine","Instances","length","LastCreatedScene","_LastCreatedScene","Array","OnEnginesDisposedObservable","UseFallbackTexture","FallbackTexture"],"sources":["../../../../dev/core/src/Engines/engineStore.ts"],"sourcesContent":["import { Observable } from \"../Misc/observable\";\r\nimport type { Nullable } from \"../types\";\r\n\r\nimport type { Engine } from \"./engine\";\r\nimport type { Scene } from \"../scene\";\r\n\r\n/**\r\n * The engine store class is responsible to hold all the instances of Engine and Scene created\r\n * during the life time of the application.\r\n */\r\nexport class EngineStore {\r\n    /** Gets the list of created engines */\r\n    public static Instances = new Array<Engine>();\r\n\r\n    /**\r\n     * Notifies when an engine was disposed.\r\n     * Mainly used for static/cache cleanup\r\n     */\r\n    public static OnEnginesDisposedObservable = new Observable<Engine>();\r\n\r\n    /** @internal */\r\n    public static _LastCreatedScene: Nullable<Scene> = null;\r\n\r\n    /**\r\n     * Gets the latest created engine\r\n     */\r\n    public static get LastCreatedEngine(): Nullable<Engine> {\r\n        if (this.Instances.length === 0) {\r\n            return null;\r\n        }\r\n\r\n        return this.Instances[this.Instances.length - 1];\r\n    }\r\n\r\n    /**\r\n     * Gets the latest created scene\r\n     */\r\n    public static get LastCreatedScene(): Nullable<Scene> {\r\n        return this._LastCreatedScene;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a global variable indicating if fallback texture must be used when a texture cannot be loaded\r\n     * @ignorenaming\r\n     */\r\n    public static UseFallbackTexture = true;\r\n\r\n    /**\r\n     * Texture content used if a texture cannot loaded\r\n     * @ignorenaming\r\n     */\r\n    public static FallbackTexture = \"\";\r\n}\r\n"],"mappings":"AAAA,SAASA,UAAU,QAAQ,uBAAqB;AAMhD;;;;AAIA,OAAM,MAAOC,WAAW;EAapB;;;EAGO,WAAWC,iBAAiBA,CAAA;IAC/B,IAAI,IAAI,CAACC,SAAS,CAACC,MAAM,KAAK,CAAC,EAAE;MAC7B,OAAO,IAAI;;IAGf,OAAO,IAAI,CAACD,SAAS,CAAC,IAAI,CAACA,SAAS,CAACC,MAAM,GAAG,CAAC,CAAC;EACpD;EAEA;;;EAGO,WAAWC,gBAAgBA,CAAA;IAC9B,OAAO,IAAI,CAACC,iBAAiB;EACjC;;AA5BA;AACcL,WAAA,CAAAE,SAAS,GAAG,IAAII,KAAK,EAAU;AAE7C;;;;AAIcN,WAAA,CAAAO,2BAA2B,GAAG,IAAIR,UAAU,EAAU;AAEpE;AACcC,WAAA,CAAAK,iBAAiB,GAAoB,IAAI;AAoBvD;;;;AAIcL,WAAA,CAAAQ,kBAAkB,GAAG,IAAI;AAEvC;;;;AAIcR,WAAA,CAAAS,eAAe,GAAG,EAAE"},"metadata":{},"sourceType":"module","externalDependencies":[]}