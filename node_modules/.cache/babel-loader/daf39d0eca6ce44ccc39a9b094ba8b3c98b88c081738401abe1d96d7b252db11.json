{"ast":null,"code":"import { RichTypeNumber } from \"../../../flowGraphRichTypes.js\";\nimport { FlowGraphWithOnDoneExecutionBlock } from \"../../../flowGraphWithOnDoneExecutionBlock.js\";\nimport { RegisterClass } from \"../../../../Misc/typeStore.js\";\n/**\n * @experimental\n * A block that counts the number of times it has been called.\n */\nexport class FlowGraphCounterBlock extends FlowGraphWithOnDoneExecutionBlock {\n  constructor(config) {\n    super(config);\n    this.count = this._registerDataOutput(\"count\", RichTypeNumber);\n    this.reset = this._registerSignalInput(\"reset\");\n  }\n  _execute(context, callingSignal) {\n    var _a;\n    if (callingSignal === this.reset) {\n      context._setExecutionVariable(this, \"count\", 0);\n      this.count.setValue(0, context);\n      return;\n    }\n    const countValue = ((_a = context._getExecutionVariable(this, \"count\")) !== null && _a !== void 0 ? _a : 0) + 1;\n    context._setExecutionVariable(this, \"count\", countValue);\n    this.count.setValue(countValue, context);\n    this.onDone._activateSignal(context);\n  }\n  getClassName() {\n    return \"FGCounterBlock\";\n  }\n}\nRegisterClass(\"FGCounterBlock\", FlowGraphCounterBlock);","map":{"version":3,"names":["RichTypeNumber","FlowGraphWithOnDoneExecutionBlock","RegisterClass","FlowGraphCounterBlock","constructor","config","count","_registerDataOutput","reset","_registerSignalInput","_execute","context","callingSignal","_setExecutionVariable","setValue","countValue","_a","_getExecutionVariable","onDone","_activateSignal","getClassName"],"sources":["../../../../../../../dev/core/src/FlowGraph/Blocks/Execution/ControlFlow/flowGraphCounterBlock.ts"],"sourcesContent":["import type { FlowGraphContext } from \"../../../flowGraphContext\";\r\nimport type { FlowGraphDataConnection } from \"../../../flowGraphDataConnection\";\r\nimport { RichTypeNumber } from \"../../../flowGraphRichTypes\";\r\nimport type { FlowGraphSignalConnection } from \"../../../flowGraphSignalConnection\";\r\nimport { FlowGraphWithOnDoneExecutionBlock } from \"../../../flowGraphWithOnDoneExecutionBlock\";\r\nimport { RegisterClass } from \"../../../../Misc/typeStore\";\r\nimport type { IFlowGraphBlockConfiguration } from \"../../../flowGraphBlock\";\r\n/**\r\n * @experimental\r\n * A block that counts the number of times it has been called.\r\n */\r\nexport class FlowGraphCounterBlock extends FlowGraphWithOnDoneExecutionBlock {\r\n    /**\r\n     * Output connection: The number of times the block has been called.\r\n     */\r\n    public readonly count: FlowGraphDataConnection<number>;\r\n    /**\r\n     * Input connection: Resets the counter.\r\n     */\r\n    public readonly reset: FlowGraphSignalConnection;\r\n\r\n    constructor(config?: IFlowGraphBlockConfiguration) {\r\n        super(config);\r\n\r\n        this.count = this._registerDataOutput(\"count\", RichTypeNumber);\r\n        this.reset = this._registerSignalInput(\"reset\");\r\n    }\r\n\r\n    public _execute(context: FlowGraphContext, callingSignal: FlowGraphSignalConnection): void {\r\n        if (callingSignal === this.reset) {\r\n            context._setExecutionVariable(this, \"count\", 0);\r\n            this.count.setValue(0, context);\r\n            return;\r\n        }\r\n        const countValue = (context._getExecutionVariable(this, \"count\") ?? 0) + 1;\r\n\r\n        context._setExecutionVariable(this, \"count\", countValue);\r\n        this.count.setValue(countValue, context);\r\n        this.onDone._activateSignal(context);\r\n    }\r\n\r\n    public getClassName(): string {\r\n        return \"FGCounterBlock\";\r\n    }\r\n}\r\nRegisterClass(\"FGCounterBlock\", FlowGraphCounterBlock);\r\n"],"mappings":"AAEA,SAASA,cAAc,QAAQ,gCAA8B;AAE7D,SAASC,iCAAiC,QAAQ,+CAA6C;AAC/F,SAASC,aAAa,QAAQ,+BAA6B;AAE3D;;;;AAIA,OAAM,MAAOC,qBAAsB,SAAQF,iCAAiC;EAUxEG,YAAYC,MAAqC;IAC7C,KAAK,CAACA,MAAM,CAAC;IAEb,IAAI,CAACC,KAAK,GAAG,IAAI,CAACC,mBAAmB,CAAC,OAAO,EAAEP,cAAc,CAAC;IAC9D,IAAI,CAACQ,KAAK,GAAG,IAAI,CAACC,oBAAoB,CAAC,OAAO,CAAC;EACnD;EAEOC,QAAQA,CAACC,OAAyB,EAAEC,aAAwC;;IAC/E,IAAIA,aAAa,KAAK,IAAI,CAACJ,KAAK,EAAE;MAC9BG,OAAO,CAACE,qBAAqB,CAAC,IAAI,EAAE,OAAO,EAAE,CAAC,CAAC;MAC/C,IAAI,CAACP,KAAK,CAACQ,QAAQ,CAAC,CAAC,EAAEH,OAAO,CAAC;MAC/B;;IAEJ,MAAMI,UAAU,GAAG,CAAC,CAAAC,EAAA,GAAAL,OAAO,CAACM,qBAAqB,CAAC,IAAI,EAAE,OAAO,CAAC,cAAAD,EAAA,cAAAA,EAAA,GAAI,CAAC,IAAI,CAAC;IAE1EL,OAAO,CAACE,qBAAqB,CAAC,IAAI,EAAE,OAAO,EAAEE,UAAU,CAAC;IACxD,IAAI,CAACT,KAAK,CAACQ,QAAQ,CAACC,UAAU,EAAEJ,OAAO,CAAC;IACxC,IAAI,CAACO,MAAM,CAACC,eAAe,CAACR,OAAO,CAAC;EACxC;EAEOS,YAAYA,CAAA;IACf,OAAO,gBAAgB;EAC3B;;AAEJlB,aAAa,CAAC,gBAAgB,EAAEC,qBAAqB,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}