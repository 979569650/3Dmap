{"ast":null,"code":"import { FlowGraphConnection, FlowGraphConnectionType } from \"./flowGraphConnection.js\";\nimport { RegisterClass } from \"../Misc/typeStore.js\";\n/**\n * @experimental\n * Represents a connection point for a signal.\n * When an output point is activated, it will activate the connected input point.\n * When an input point is activated, it will execute the block it belongs to.\n */\nexport class FlowGraphSignalConnection extends FlowGraphConnection {\n  /**\n   * A signal input can be connected to more than one signal output,\n   * but a signal output can only connect to one signal input\n   */\n  _isSingularConnection() {\n    return this.connectionType === FlowGraphConnectionType.Output;\n  }\n  /**\n   * @internal\n   */\n  _activateSignal(context) {\n    var _a;\n    if (this.connectionType === FlowGraphConnectionType.Input) {\n      this._ownerBlock._execute(context, this);\n    } else {\n      (_a = this._connectedPoint[0]) === null || _a === void 0 ? void 0 : _a._activateSignal(context);\n    }\n  }\n}\nRegisterClass(\"FlowGraphSignalConnection\", FlowGraphSignalConnection);","map":{"version":3,"names":["FlowGraphConnection","FlowGraphConnectionType","RegisterClass","FlowGraphSignalConnection","_isSingularConnection","connectionType","Output","_activateSignal","context","Input","_ownerBlock","_execute","_a","_connectedPoint"],"sources":["../../../../dev/core/src/FlowGraph/flowGraphSignalConnection.ts"],"sourcesContent":["import type { FlowGraphExecutionBlock } from \"./flowGraphExecutionBlock\";\r\nimport { FlowGraphConnection, FlowGraphConnectionType } from \"./flowGraphConnection\";\r\nimport type { FlowGraphContext } from \"./flowGraphContext\";\r\nimport { RegisterClass } from \"../Misc/typeStore\";\r\n\r\n/**\r\n * @experimental\r\n * Represents a connection point for a signal.\r\n * When an output point is activated, it will activate the connected input point.\r\n * When an input point is activated, it will execute the block it belongs to.\r\n */\r\nexport class FlowGraphSignalConnection extends FlowGraphConnection<FlowGraphExecutionBlock, FlowGraphSignalConnection> {\r\n    /**\r\n     * A signal input can be connected to more than one signal output,\r\n     * but a signal output can only connect to one signal input\r\n     */\r\n    public _isSingularConnection(): boolean {\r\n        return this.connectionType === FlowGraphConnectionType.Output;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _activateSignal(context: FlowGraphContext): void {\r\n        if (this.connectionType === FlowGraphConnectionType.Input) {\r\n            this._ownerBlock._execute(context, this);\r\n        } else {\r\n            this._connectedPoint[0]?._activateSignal(context);\r\n        }\r\n    }\r\n}\r\n\r\nRegisterClass(\"FlowGraphSignalConnection\", FlowGraphSignalConnection);\r\n"],"mappings":"AACA,SAASA,mBAAmB,EAAEC,uBAAuB,QAAQ,0BAAwB;AAErF,SAASC,aAAa,QAAQ,sBAAoB;AAElD;;;;;;AAMA,OAAM,MAAOC,yBAA0B,SAAQH,mBAAuE;EAClH;;;;EAIOI,qBAAqBA,CAAA;IACxB,OAAO,IAAI,CAACC,cAAc,KAAKJ,uBAAuB,CAACK,MAAM;EACjE;EAEA;;;EAGOC,eAAeA,CAACC,OAAyB;;IAC5C,IAAI,IAAI,CAACH,cAAc,KAAKJ,uBAAuB,CAACQ,KAAK,EAAE;MACvD,IAAI,CAACC,WAAW,CAACC,QAAQ,CAACH,OAAO,EAAE,IAAI,CAAC;KAC3C,MAAM;MACH,CAAAI,EAAA,OAAI,CAACC,eAAe,CAAC,CAAC,CAAC,cAAAD,EAAA,uBAAAA,EAAA,CAAEL,eAAe,CAACC,OAAO,CAAC;;EAEzD;;AAGJN,aAAa,CAAC,2BAA2B,EAAEC,yBAAyB,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}