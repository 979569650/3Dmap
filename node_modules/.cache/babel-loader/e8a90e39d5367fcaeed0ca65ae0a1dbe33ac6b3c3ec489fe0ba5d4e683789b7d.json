{"ast":null,"code":"import { RegisterClass } from \"../../../../Misc/typeStore.js\";\nimport { NodeGeometryBlockConnectionPointTypes } from \"../../Enums/nodeGeometryConnectionPointTypes.js\";\nimport { NodeGeometryBlock } from \"../../nodeGeometryBlock.js\";\n/**\n * Defines a block used to receive a value from a teleport entry point\n */\nexport class TeleportOutBlock extends NodeGeometryBlock {\n  /**\n   * Create a new TeleportOutBlock\n   * @param name defines the block name\n   */\n  constructor(name) {\n    super(name);\n    /** @internal */\n    this._entryPoint = null;\n    /** @internal */\n    this._tempEntryPointUniqueId = null;\n    this._isTeleportOut = true;\n    this.registerOutput(\"output\", NodeGeometryBlockConnectionPointTypes.BasedOnInput);\n  }\n  /**\n   * Gets the entry point\n   */\n  get entryPoint() {\n    return this._entryPoint;\n  }\n  /**\n   * Gets the current class name\n   * @returns the class name\n   */\n  getClassName() {\n    return \"TeleportOutBlock\";\n  }\n  /**\n   * Gets the output component\n   */\n  get output() {\n    return this._outputs[0];\n  }\n  /** Detach from entry point */\n  detach() {\n    if (!this._entryPoint) {\n      return;\n    }\n    this._entryPoint.detachFromEndpoint(this);\n  }\n  _buildBlock() {\n    // Do nothing\n    // All work done by the emitter\n  }\n  _customBuildStep(state) {\n    if (this.entryPoint) {\n      this.entryPoint.build(state);\n    }\n  }\n  _dumpCode(uniqueNames, alreadyDumped) {\n    let codeString = \"\";\n    if (this.entryPoint) {\n      if (alreadyDumped.indexOf(this.entryPoint) === -1) {\n        codeString += this.entryPoint._dumpCode(uniqueNames, alreadyDumped);\n      }\n    }\n    return codeString + super._dumpCode(uniqueNames, alreadyDumped);\n  }\n  _dumpCodeForOutputConnections(alreadyDumped) {\n    let codeString = super._dumpCodeForOutputConnections(alreadyDumped);\n    if (this.entryPoint) {\n      codeString += this.entryPoint._dumpCodeForOutputConnections(alreadyDumped);\n    }\n    return codeString;\n  }\n  /**\n   * Clone the current block to a new identical block\n   * @returns a copy of the current block\n   */\n  clone() {\n    const clone = super.clone();\n    if (this.entryPoint) {\n      this.entryPoint.attachToEndpoint(clone);\n    }\n    return clone;\n  }\n  _dumpPropertiesCode() {\n    let codeString = super._dumpPropertiesCode();\n    if (this.entryPoint) {\n      codeString += `${this.entryPoint._codeVariableName}.attachToEndpoint(${this._codeVariableName});\\n`;\n    }\n    return codeString;\n  }\n  /**\n   * Serializes this block in a JSON representation\n   * @returns the serialized block object\n   */\n  serialize() {\n    var _a, _b;\n    const serializationObject = super.serialize();\n    serializationObject.entryPoint = (_b = (_a = this.entryPoint) === null || _a === void 0 ? void 0 : _a.uniqueId) !== null && _b !== void 0 ? _b : \"\";\n    return serializationObject;\n  }\n  _deserialize(serializationObject) {\n    super._deserialize(serializationObject);\n    this._tempEntryPointUniqueId = serializationObject.entryPoint;\n  }\n}\nRegisterClass(\"BABYLON.TeleportOutBlock\", TeleportOutBlock);","map":{"version":3,"names":["RegisterClass","NodeGeometryBlockConnectionPointTypes","NodeGeometryBlock","TeleportOutBlock","constructor","name","_entryPoint","_tempEntryPointUniqueId","_isTeleportOut","registerOutput","BasedOnInput","entryPoint","getClassName","output","_outputs","detach","detachFromEndpoint","_buildBlock","_customBuildStep","state","build","_dumpCode","uniqueNames","alreadyDumped","codeString","indexOf","_dumpCodeForOutputConnections","clone","attachToEndpoint","_dumpPropertiesCode","_codeVariableName","serialize","serializationObject","_b","_a","uniqueId","_deserialize"],"sources":["../../../../../../../dev/core/src/Meshes/Node/Blocks/Teleport/teleportOutBlock.ts"],"sourcesContent":["import type { Nullable } from \"../../../../types\";\r\nimport { RegisterClass } from \"../../../../Misc/typeStore\";\r\nimport { NodeGeometryBlockConnectionPointTypes } from \"../../Enums/nodeGeometryConnectionPointTypes\";\r\nimport { NodeGeometryBlock } from \"../../nodeGeometryBlock\";\r\nimport type { NodeGeometryConnectionPoint } from \"../../nodeGeometryBlockConnectionPoint\";\r\nimport type { TeleportInBlock } from \"./teleportInBlock\";\r\nimport type { NodeGeometryBuildState } from \"../../nodeGeometryBuildState\";\r\n\r\n/**\r\n * Defines a block used to receive a value from a teleport entry point\r\n */\r\nexport class TeleportOutBlock extends NodeGeometryBlock {\r\n    /** @internal */\r\n    public _entryPoint: Nullable<TeleportInBlock> = null;\r\n    /** @internal */\r\n    public _tempEntryPointUniqueId: Nullable<number> = null;\r\n\r\n    /**\r\n     * Create a new TeleportOutBlock\r\n     * @param name defines the block name\r\n     */\r\n    public constructor(name: string) {\r\n        super(name);\r\n\r\n        this._isTeleportOut = true;\r\n\r\n        this.registerOutput(\"output\", NodeGeometryBlockConnectionPointTypes.BasedOnInput);\r\n    }\r\n\r\n    /**\r\n     * Gets the entry point\r\n     */\r\n    public get entryPoint() {\r\n        return this._entryPoint;\r\n    }\r\n\r\n    /**\r\n     * Gets the current class name\r\n     * @returns the class name\r\n     */\r\n    public getClassName() {\r\n        return \"TeleportOutBlock\";\r\n    }\r\n\r\n    /**\r\n     * Gets the output component\r\n     */\r\n    public get output(): NodeGeometryConnectionPoint {\r\n        return this._outputs[0];\r\n    }\r\n\r\n    /** Detach from entry point */\r\n    public detach() {\r\n        if (!this._entryPoint) {\r\n            return;\r\n        }\r\n        this._entryPoint.detachFromEndpoint(this);\r\n    }\r\n\r\n    protected _buildBlock() {\r\n        // Do nothing\r\n        // All work done by the emitter\r\n    }\r\n\r\n    protected _customBuildStep(state: NodeGeometryBuildState): void {\r\n        if (this.entryPoint) {\r\n            this.entryPoint.build(state);\r\n        }\r\n    }\r\n\r\n    public _dumpCode(uniqueNames: string[], alreadyDumped: NodeGeometryBlock[]) {\r\n        let codeString: string = \"\";\r\n        if (this.entryPoint) {\r\n            if (alreadyDumped.indexOf(this.entryPoint) === -1) {\r\n                codeString += this.entryPoint._dumpCode(uniqueNames, alreadyDumped);\r\n            }\r\n        }\r\n\r\n        return codeString + super._dumpCode(uniqueNames, alreadyDumped);\r\n    }\r\n\r\n    public _dumpCodeForOutputConnections(alreadyDumped: NodeGeometryBlock[]) {\r\n        let codeString = super._dumpCodeForOutputConnections(alreadyDumped);\r\n\r\n        if (this.entryPoint) {\r\n            codeString += this.entryPoint._dumpCodeForOutputConnections(alreadyDumped);\r\n        }\r\n\r\n        return codeString;\r\n    }\r\n\r\n    /**\r\n     * Clone the current block to a new identical block\r\n     * @returns a copy of the current block\r\n     */\r\n    public clone() {\r\n        const clone = super.clone();\r\n\r\n        if (this.entryPoint) {\r\n            this.entryPoint.attachToEndpoint(clone as TeleportOutBlock);\r\n        }\r\n\r\n        return clone;\r\n    }\r\n\r\n    protected _dumpPropertiesCode() {\r\n        let codeString = super._dumpPropertiesCode();\r\n        if (this.entryPoint) {\r\n            codeString += `${this.entryPoint._codeVariableName}.attachToEndpoint(${this._codeVariableName});\\n`;\r\n        }\r\n        return codeString;\r\n    }\r\n\r\n    /**\r\n     * Serializes this block in a JSON representation\r\n     * @returns the serialized block object\r\n     */\r\n    public serialize(): any {\r\n        const serializationObject = super.serialize();\r\n\r\n        serializationObject.entryPoint = this.entryPoint?.uniqueId ?? \"\";\r\n\r\n        return serializationObject;\r\n    }\r\n\r\n    public _deserialize(serializationObject: any) {\r\n        super._deserialize(serializationObject);\r\n\r\n        this._tempEntryPointUniqueId = serializationObject.entryPoint;\r\n    }\r\n}\r\n\r\nRegisterClass(\"BABYLON.TeleportOutBlock\", TeleportOutBlock);\r\n"],"mappings":"AACA,SAASA,aAAa,QAAQ,+BAA6B;AAC3D,SAASC,qCAAqC,QAAQ,iDAA+C;AACrG,SAASC,iBAAiB,QAAQ,4BAA0B;AAK5D;;;AAGA,OAAM,MAAOC,gBAAiB,SAAQD,iBAAiB;EAMnD;;;;EAIAE,YAAmBC,IAAY;IAC3B,KAAK,CAACA,IAAI,CAAC;IAVf;IACO,KAAAC,WAAW,GAA8B,IAAI;IACpD;IACO,KAAAC,uBAAuB,GAAqB,IAAI;IASnD,IAAI,CAACC,cAAc,GAAG,IAAI;IAE1B,IAAI,CAACC,cAAc,CAAC,QAAQ,EAAER,qCAAqC,CAACS,YAAY,CAAC;EACrF;EAEA;;;EAGA,IAAWC,UAAUA,CAAA;IACjB,OAAO,IAAI,CAACL,WAAW;EAC3B;EAEA;;;;EAIOM,YAAYA,CAAA;IACf,OAAO,kBAAkB;EAC7B;EAEA;;;EAGA,IAAWC,MAAMA,CAAA;IACb,OAAO,IAAI,CAACC,QAAQ,CAAC,CAAC,CAAC;EAC3B;EAEA;EACOC,MAAMA,CAAA;IACT,IAAI,CAAC,IAAI,CAACT,WAAW,EAAE;MACnB;;IAEJ,IAAI,CAACA,WAAW,CAACU,kBAAkB,CAAC,IAAI,CAAC;EAC7C;EAEUC,WAAWA,CAAA;IACjB;IACA;EAAA;EAGMC,gBAAgBA,CAACC,KAA6B;IACpD,IAAI,IAAI,CAACR,UAAU,EAAE;MACjB,IAAI,CAACA,UAAU,CAACS,KAAK,CAACD,KAAK,CAAC;;EAEpC;EAEOE,SAASA,CAACC,WAAqB,EAAEC,aAAkC;IACtE,IAAIC,UAAU,GAAW,EAAE;IAC3B,IAAI,IAAI,CAACb,UAAU,EAAE;MACjB,IAAIY,aAAa,CAACE,OAAO,CAAC,IAAI,CAACd,UAAU,CAAC,KAAK,CAAC,CAAC,EAAE;QAC/Ca,UAAU,IAAI,IAAI,CAACb,UAAU,CAACU,SAAS,CAACC,WAAW,EAAEC,aAAa,CAAC;;;IAI3E,OAAOC,UAAU,GAAG,KAAK,CAACH,SAAS,CAACC,WAAW,EAAEC,aAAa,CAAC;EACnE;EAEOG,6BAA6BA,CAACH,aAAkC;IACnE,IAAIC,UAAU,GAAG,KAAK,CAACE,6BAA6B,CAACH,aAAa,CAAC;IAEnE,IAAI,IAAI,CAACZ,UAAU,EAAE;MACjBa,UAAU,IAAI,IAAI,CAACb,UAAU,CAACe,6BAA6B,CAACH,aAAa,CAAC;;IAG9E,OAAOC,UAAU;EACrB;EAEA;;;;EAIOG,KAAKA,CAAA;IACR,MAAMA,KAAK,GAAG,KAAK,CAACA,KAAK,EAAE;IAE3B,IAAI,IAAI,CAAChB,UAAU,EAAE;MACjB,IAAI,CAACA,UAAU,CAACiB,gBAAgB,CAACD,KAAyB,CAAC;;IAG/D,OAAOA,KAAK;EAChB;EAEUE,mBAAmBA,CAAA;IACzB,IAAIL,UAAU,GAAG,KAAK,CAACK,mBAAmB,EAAE;IAC5C,IAAI,IAAI,CAAClB,UAAU,EAAE;MACjBa,UAAU,IAAI,GAAG,IAAI,CAACb,UAAU,CAACmB,iBAAiB,qBAAqB,IAAI,CAACA,iBAAiB,MAAM;;IAEvG,OAAON,UAAU;EACrB;EAEA;;;;EAIOO,SAASA,CAAA;;IACZ,MAAMC,mBAAmB,GAAG,KAAK,CAACD,SAAS,EAAE;IAE7CC,mBAAmB,CAACrB,UAAU,GAAG,CAAAsB,EAAA,IAAAC,EAAA,OAAI,CAACvB,UAAU,cAAAuB,EAAA,uBAAAA,EAAA,CAAEC,QAAQ,cAAAF,EAAA,cAAAA,EAAA,GAAI,EAAE;IAEhE,OAAOD,mBAAmB;EAC9B;EAEOI,YAAYA,CAACJ,mBAAwB;IACxC,KAAK,CAACI,YAAY,CAACJ,mBAAmB,CAAC;IAEvC,IAAI,CAACzB,uBAAuB,GAAGyB,mBAAmB,CAACrB,UAAU;EACjE;;AAGJX,aAAa,CAAC,0BAA0B,EAAEG,gBAAgB,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}