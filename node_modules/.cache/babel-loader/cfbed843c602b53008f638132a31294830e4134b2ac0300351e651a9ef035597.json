{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\n/** @internal */\nexport class WebGPUSnapshotRendering {\n  constructor(engine, renderingMode, bundleList, bundleListRenderTarget) {\n    this._record = false;\n    this._play = false;\n    this._mainPassBundleList = [];\n    this._enabled = false;\n    this._engine = engine;\n    this._mode = renderingMode;\n    this._bundleList = bundleList;\n    this._bundleListRenderTarget = bundleListRenderTarget;\n  }\n  get enabled() {\n    return this._enabled;\n  }\n  get play() {\n    return this._play;\n  }\n  get record() {\n    return this._record;\n  }\n  set enabled(activate) {\n    this._mainPassBundleList.length = 0;\n    this._record = this._enabled = activate;\n    this._play = false;\n    if (activate) {\n      this._modeSaved = this._mode;\n      this._mode = 0; // need to reset to standard for the recording pass to avoid some code being bypassed\n    }\n  }\n\n  get mode() {\n    return this._mode;\n  }\n  set mode(mode) {\n    if (this._record) {\n      this._modeSaved = mode;\n    } else {\n      this._mode = mode;\n    }\n  }\n  endMainRenderPass() {\n    if (this._record) {\n      this._mainPassBundleList.push(this._bundleList.clone());\n    }\n  }\n  endRenderTargetPass(currentRenderPass, gpuWrapper) {\n    var _a, _b, _c, _d;\n    if (this._play) {\n      (_b = (_a = gpuWrapper._bundleLists) === null || _a === void 0 ? void 0 : _a[gpuWrapper._currentLayer]) === null || _b === void 0 ? void 0 : _b.run(currentRenderPass);\n      if (this._mode === 1) {\n        this._engine._reportDrawCall((_d = (_c = gpuWrapper._bundleLists) === null || _c === void 0 ? void 0 : _c[gpuWrapper._currentLayer]) === null || _d === void 0 ? void 0 : _d.numDrawCalls);\n      }\n    } else if (this._record) {\n      if (!gpuWrapper._bundleLists) {\n        gpuWrapper._bundleLists = [];\n      }\n      gpuWrapper._bundleLists[gpuWrapper._currentLayer] = this._bundleListRenderTarget.clone();\n      gpuWrapper._bundleLists[gpuWrapper._currentLayer].run(currentRenderPass);\n      this._bundleListRenderTarget.reset();\n    } else {\n      return false;\n    }\n    return true;\n  }\n  endFrame(mainRenderPass) {\n    if (this._record) {\n      this._mainPassBundleList.push(this._bundleList.clone());\n      this._record = false;\n      this._play = true;\n      this._mode = this._modeSaved;\n    }\n    if (mainRenderPass !== null && this._play) {\n      for (let i = 0; i < this._mainPassBundleList.length; ++i) {\n        this._mainPassBundleList[i].run(mainRenderPass);\n        if (this._mode === 1) {\n          this._engine._reportDrawCall(this._mainPassBundleList[i].numDrawCalls);\n        }\n      }\n    }\n  }\n  reset() {\n    this.enabled = false;\n    this.enabled = true;\n  }\n}","map":{"version":3,"names":["WebGPUSnapshotRendering","constructor","engine","renderingMode","bundleList","bundleListRenderTarget","_record","_play","_mainPassBundleList","_enabled","_engine","_mode","_bundleList","_bundleListRenderTarget","enabled","play","record","activate","length","_modeSaved","mode","endMainRenderPass","push","clone","endRenderTargetPass","currentRenderPass","gpuWrapper","_b","_a","_bundleLists","_currentLayer","run","_reportDrawCall","_d","_c","numDrawCalls","reset","endFrame","mainRenderPass","i"],"sources":["../../../../../dev/core/src/Engines/WebGPU/webgpuSnapshotRendering.ts"],"sourcesContent":["import type { Nullable } from \"../../types\";\r\nimport { Constants } from \"../constants\";\r\nimport type { WebGPUEngine } from \"../webgpuEngine\";\r\nimport type { WebGPUBundleList } from \"./webgpuBundleList\";\r\nimport type { WebGPUHardwareTexture } from \"./webgpuHardwareTexture\";\r\n\r\n/** @internal */\r\nexport class WebGPUSnapshotRendering {\r\n    private _engine: WebGPUEngine;\r\n\r\n    private _record = false;\r\n    private _play = false;\r\n    private _mainPassBundleList: WebGPUBundleList[] = [];\r\n    private _modeSaved: number;\r\n    private _bundleList: WebGPUBundleList;\r\n    private _bundleListRenderTarget: WebGPUBundleList;\r\n\r\n    private _enabled = false;\r\n    private _mode: number;\r\n\r\n    constructor(engine: WebGPUEngine, renderingMode: number, bundleList: WebGPUBundleList, bundleListRenderTarget: WebGPUBundleList) {\r\n        this._engine = engine;\r\n        this._mode = renderingMode;\r\n        this._bundleList = bundleList;\r\n        this._bundleListRenderTarget = bundleListRenderTarget;\r\n    }\r\n\r\n    public get enabled(): boolean {\r\n        return this._enabled;\r\n    }\r\n\r\n    public get play() {\r\n        return this._play;\r\n    }\r\n\r\n    public get record() {\r\n        return this._record;\r\n    }\r\n\r\n    public set enabled(activate: boolean) {\r\n        this._mainPassBundleList.length = 0;\r\n        this._record = this._enabled = activate;\r\n        this._play = false;\r\n        if (activate) {\r\n            this._modeSaved = this._mode;\r\n            this._mode = Constants.SNAPSHOTRENDERING_STANDARD; // need to reset to standard for the recording pass to avoid some code being bypassed\r\n        }\r\n    }\r\n\r\n    public get mode(): number {\r\n        return this._mode;\r\n    }\r\n\r\n    public set mode(mode: number) {\r\n        if (this._record) {\r\n            this._modeSaved = mode;\r\n        } else {\r\n            this._mode = mode;\r\n        }\r\n    }\r\n\r\n    public endMainRenderPass(): void {\r\n        if (this._record) {\r\n            this._mainPassBundleList.push(this._bundleList.clone());\r\n        }\r\n    }\r\n\r\n    public endRenderTargetPass(currentRenderPass: GPURenderPassEncoder, gpuWrapper: WebGPUHardwareTexture): boolean {\r\n        if (this._play) {\r\n            gpuWrapper._bundleLists?.[gpuWrapper._currentLayer]?.run(currentRenderPass);\r\n            if (this._mode === Constants.SNAPSHOTRENDERING_FAST) {\r\n                this._engine._reportDrawCall(gpuWrapper._bundleLists?.[gpuWrapper._currentLayer]?.numDrawCalls);\r\n            }\r\n        } else if (this._record) {\r\n            if (!gpuWrapper._bundleLists) {\r\n                gpuWrapper._bundleLists = [];\r\n            }\r\n            gpuWrapper._bundleLists[gpuWrapper._currentLayer] = this._bundleListRenderTarget.clone();\r\n            gpuWrapper._bundleLists[gpuWrapper._currentLayer].run(currentRenderPass);\r\n            this._bundleListRenderTarget.reset();\r\n        } else {\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    public endFrame(mainRenderPass: Nullable<GPURenderPassEncoder>): void {\r\n        if (this._record) {\r\n            this._mainPassBundleList.push(this._bundleList.clone());\r\n            this._record = false;\r\n            this._play = true;\r\n            this._mode = this._modeSaved;\r\n        }\r\n\r\n        if (mainRenderPass !== null && this._play) {\r\n            for (let i = 0; i < this._mainPassBundleList.length; ++i) {\r\n                this._mainPassBundleList[i].run(mainRenderPass);\r\n                if (this._mode === Constants.SNAPSHOTRENDERING_FAST) {\r\n                    this._engine._reportDrawCall(this._mainPassBundleList[i].numDrawCalls);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    public reset(): void {\r\n        this.enabled = false;\r\n        this.enabled = true;\r\n    }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}