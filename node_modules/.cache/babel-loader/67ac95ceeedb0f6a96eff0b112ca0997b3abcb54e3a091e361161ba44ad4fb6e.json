{"ast":null,"code":"import \"core-js/modules/es.typed-array.to-reversed.js\";\nimport \"core-js/modules/es.typed-array.to-sorted.js\";\nimport \"core-js/modules/es.typed-array.with.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport { Color4, Color3 } from \"../Maths/math.js\";\nimport { Vector2, Vector3, Vector4, TmpVectors, Matrix } from \"../Maths/math.vector.js\";\nimport { Logger } from \"../Misc/logger.js\";\nimport { VertexBuffer } from \"../Buffers/buffer.js\";\nimport { VertexData } from \"../Meshes/mesh.vertexData.js\";\nimport { Mesh } from \"../Meshes/mesh.js\";\nimport { EngineStore } from \"../Engines/engineStore.js\";\nimport { CloudPoint, PointsGroup } from \"./cloudPoint.js\";\nimport { Ray } from \"../Culling/ray.js\";\nimport { StandardMaterial } from \"../Materials/standardMaterial.js\";\nimport { BaseTexture } from \"./../Materials/Textures/baseTexture.js\";\nimport { Scalar } from \"../Maths/math.scalar.js\";\n/** Defines the 4 color options */\nexport var PointColor;\n(function (PointColor) {\n  /** color value */\n  PointColor[PointColor[\"Color\"] = 2] = \"Color\";\n  /** uv value */\n  PointColor[PointColor[\"UV\"] = 1] = \"UV\";\n  /** random value */\n  PointColor[PointColor[\"Random\"] = 0] = \"Random\";\n  /** stated value */\n  PointColor[PointColor[\"Stated\"] = 3] = \"Stated\";\n})(PointColor || (PointColor = {}));\n/**\n * The PointCloudSystem (PCS) is a single updatable mesh. The points corresponding to the vertices of this big mesh.\n * As it is just a mesh, the PointCloudSystem has all the same properties as any other BJS mesh : not more, not less. It can be scaled, rotated, translated, enlighted, textured, moved, etc.\n\n * The PointCloudSystem is also a particle system, with each point being a particle. It provides some methods to manage the particles.\n * However it is behavior agnostic. This means it has no emitter, no particle physics, no particle recycler. You have to implement your own behavior.\n *\n * Full documentation here : TO BE ENTERED\n */\nexport class PointsCloudSystem {\n  /**\n   * Gets the particle positions computed by the Point Cloud System\n   */\n  get positions() {\n    return this._positions32;\n  }\n  /**\n   * Gets the particle colors computed by the Point Cloud System\n   */\n  get colors() {\n    return this._colors32;\n  }\n  /**\n   * Gets the particle uvs computed by the Point Cloud System\n   */\n  get uvs() {\n    return this._uvs32;\n  }\n  /**\n   * Creates a PCS (Points Cloud System) object\n   * @param name (String) is the PCS name, this will be the underlying mesh name\n   * @param pointSize (number) is the size for each point. Has no effect on a WebGPU engine.\n   * @param scene (Scene) is the scene in which the PCS is added\n   * @param options defines the options of the PCS e.g.\n   * * updatable (optional boolean, default true) : if the PCS must be updatable or immutable\n   * @param options.updatable\n   */\n  constructor(name, pointSize, scene, options) {\n    /**\n     *  The PCS array of cloud point objects. Just access each particle as with any classic array.\n     *  Example : var p = SPS.particles[i];\n     */\n    this.particles = new Array();\n    /**\n     * The PCS total number of particles. Read only. Use PCS.counter instead if you need to set your own value.\n     */\n    this.nbParticles = 0;\n    /**\n     * This a counter for your own usage. It's not set by any SPS functions.\n     */\n    this.counter = 0;\n    /**\n     * This empty object is intended to store some PCS specific or temporary values in order to lower the Garbage Collector activity.\n     * Please read :\n     */\n    this.vars = {};\n    this._promises = [];\n    this._positions = new Array();\n    this._indices = new Array();\n    this._normals = new Array();\n    this._colors = new Array();\n    this._uvs = new Array();\n    this._updatable = true;\n    this._isVisibilityBoxLocked = false;\n    this._alwaysVisible = false;\n    this._groups = new Array(); //start indices for each group of particles\n    this._groupCounter = 0;\n    this._computeParticleColor = true;\n    this._computeParticleTexture = true;\n    this._computeParticleRotation = true;\n    this._computeBoundingBox = false;\n    this._isReady = false;\n    this.name = name;\n    this._size = pointSize;\n    this._scene = scene || EngineStore.LastCreatedScene;\n    if (options && options.updatable !== undefined) {\n      this._updatable = options.updatable;\n    } else {\n      this._updatable = true;\n    }\n  }\n  /**\n   * Builds the PCS underlying mesh. Returns a standard Mesh.\n   * If no points were added to the PCS, the returned mesh is just a single point.\n   * @param material The material to use to render the mesh. If not provided, will create a default one\n   * @returns a promise for the created mesh\n   */\n  buildMeshAsync(material) {\n    return Promise.all(this._promises).then(() => {\n      this._isReady = true;\n      return this._buildMesh(material);\n    });\n  }\n  /**\n   * @internal\n   */\n  _buildMesh(material) {\n    if (this.nbParticles === 0) {\n      this.addPoints(1);\n    }\n    this._positions32 = new Float32Array(this._positions);\n    this._uvs32 = new Float32Array(this._uvs);\n    this._colors32 = new Float32Array(this._colors);\n    const vertexData = new VertexData();\n    vertexData.set(this._positions32, VertexBuffer.PositionKind);\n    if (this._uvs32.length > 0) {\n      vertexData.set(this._uvs32, VertexBuffer.UVKind);\n    }\n    let ec = 0; //emissive color value 0 for UVs, 1 for color\n    if (this._colors32.length > 0) {\n      ec = 1;\n      vertexData.set(this._colors32, VertexBuffer.ColorKind);\n    }\n    const mesh = new Mesh(this.name, this._scene);\n    vertexData.applyToMesh(mesh, this._updatable);\n    this.mesh = mesh;\n    // free memory\n    this._positions = null;\n    this._uvs = null;\n    this._colors = null;\n    if (!this._updatable) {\n      this.particles.length = 0;\n    }\n    let mat = material;\n    if (!mat) {\n      mat = new StandardMaterial(\"point cloud material\", this._scene);\n      mat.emissiveColor = new Color3(ec, ec, ec);\n      mat.disableLighting = true;\n      mat.pointsCloud = true;\n      mat.pointSize = this._size;\n    }\n    mesh.material = mat;\n    return new Promise(resolve => resolve(mesh));\n  }\n  // adds a new particle object in the particles array\n  _addParticle(idx, group, groupId, idxInGroup) {\n    const cp = new CloudPoint(idx, group, groupId, idxInGroup, this);\n    this.particles.push(cp);\n    return cp;\n  }\n  _randomUnitVector(particle) {\n    particle.position = new Vector3(Math.random(), Math.random(), Math.random());\n    particle.color = new Color4(1, 1, 1, 1);\n  }\n  _getColorIndicesForCoord(pointsGroup, x, y, width) {\n    const imageData = pointsGroup._groupImageData;\n    const color = y * (width * 4) + x * 4;\n    const colorIndices = [color, color + 1, color + 2, color + 3];\n    const redIndex = colorIndices[0];\n    const greenIndex = colorIndices[1];\n    const blueIndex = colorIndices[2];\n    const alphaIndex = colorIndices[3];\n    const redForCoord = imageData[redIndex];\n    const greenForCoord = imageData[greenIndex];\n    const blueForCoord = imageData[blueIndex];\n    const alphaForCoord = imageData[alphaIndex];\n    return new Color4(redForCoord / 255, greenForCoord / 255, blueForCoord / 255, alphaForCoord);\n  }\n  _setPointsColorOrUV(mesh, pointsGroup, isVolume, colorFromTexture, hasTexture, color, range, uvSetIndex) {\n    uvSetIndex = uvSetIndex !== null && uvSetIndex !== void 0 ? uvSetIndex : 0;\n    if (isVolume) {\n      mesh.updateFacetData();\n    }\n    const boundInfo = mesh.getBoundingInfo();\n    const diameter = 2 * boundInfo.boundingSphere.radius;\n    let meshPos = mesh.getVerticesData(VertexBuffer.PositionKind);\n    const meshInd = mesh.getIndices();\n    const meshUV = mesh.getVerticesData(VertexBuffer.UVKind + (uvSetIndex ? uvSetIndex + 1 : \"\"));\n    const meshCol = mesh.getVerticesData(VertexBuffer.ColorKind);\n    const place = Vector3.Zero();\n    mesh.computeWorldMatrix();\n    const meshMatrix = mesh.getWorldMatrix();\n    if (!meshMatrix.isIdentity()) {\n      meshPos = meshPos.slice(0);\n      for (let p = 0; p < meshPos.length / 3; p++) {\n        Vector3.TransformCoordinatesFromFloatsToRef(meshPos[3 * p], meshPos[3 * p + 1], meshPos[3 * p + 2], meshMatrix, place);\n        meshPos[3 * p] = place.x;\n        meshPos[3 * p + 1] = place.y;\n        meshPos[3 * p + 2] = place.z;\n      }\n    }\n    let idxPoints = 0;\n    let id0 = 0;\n    let id1 = 0;\n    let id2 = 0;\n    let v0X = 0;\n    let v0Y = 0;\n    let v0Z = 0;\n    let v1X = 0;\n    let v1Y = 0;\n    let v1Z = 0;\n    let v2X = 0;\n    let v2Y = 0;\n    let v2Z = 0;\n    const vertex0 = Vector3.Zero();\n    const vertex1 = Vector3.Zero();\n    const vertex2 = Vector3.Zero();\n    const vec0 = Vector3.Zero();\n    const vec1 = Vector3.Zero();\n    let uv0X = 0;\n    let uv0Y = 0;\n    let uv1X = 0;\n    let uv1Y = 0;\n    let uv2X = 0;\n    let uv2Y = 0;\n    const uv0 = Vector2.Zero();\n    const uv1 = Vector2.Zero();\n    const uv2 = Vector2.Zero();\n    const uvec0 = Vector2.Zero();\n    const uvec1 = Vector2.Zero();\n    let col0X = 0;\n    let col0Y = 0;\n    let col0Z = 0;\n    let col0A = 0;\n    let col1X = 0;\n    let col1Y = 0;\n    let col1Z = 0;\n    let col1A = 0;\n    let col2X = 0;\n    let col2Y = 0;\n    let col2Z = 0;\n    let col2A = 0;\n    const col0 = Vector4.Zero();\n    const col1 = Vector4.Zero();\n    const col2 = Vector4.Zero();\n    const colvec0 = Vector4.Zero();\n    const colvec1 = Vector4.Zero();\n    let lamda = 0;\n    let mu = 0;\n    range = range ? range : 0;\n    let facetPoint;\n    let uvPoint;\n    let colPoint = new Vector4(0, 0, 0, 0);\n    let norm = Vector3.Zero();\n    let tang = Vector3.Zero();\n    let biNorm = Vector3.Zero();\n    let angle = 0;\n    let facetPlaneVec = Vector3.Zero();\n    let gap = 0;\n    let distance = 0;\n    const ray = new Ray(Vector3.Zero(), new Vector3(1, 0, 0));\n    let pickInfo;\n    let direction = Vector3.Zero();\n    for (let index = 0; index < meshInd.length / 3; index++) {\n      id0 = meshInd[3 * index];\n      id1 = meshInd[3 * index + 1];\n      id2 = meshInd[3 * index + 2];\n      v0X = meshPos[3 * id0];\n      v0Y = meshPos[3 * id0 + 1];\n      v0Z = meshPos[3 * id0 + 2];\n      v1X = meshPos[3 * id1];\n      v1Y = meshPos[3 * id1 + 1];\n      v1Z = meshPos[3 * id1 + 2];\n      v2X = meshPos[3 * id2];\n      v2Y = meshPos[3 * id2 + 1];\n      v2Z = meshPos[3 * id2 + 2];\n      vertex0.set(v0X, v0Y, v0Z);\n      vertex1.set(v1X, v1Y, v1Z);\n      vertex2.set(v2X, v2Y, v2Z);\n      vertex1.subtractToRef(vertex0, vec0);\n      vertex2.subtractToRef(vertex1, vec1);\n      if (meshUV) {\n        uv0X = meshUV[2 * id0];\n        uv0Y = meshUV[2 * id0 + 1];\n        uv1X = meshUV[2 * id1];\n        uv1Y = meshUV[2 * id1 + 1];\n        uv2X = meshUV[2 * id2];\n        uv2Y = meshUV[2 * id2 + 1];\n        uv0.set(uv0X, uv0Y);\n        uv1.set(uv1X, uv1Y);\n        uv2.set(uv2X, uv2Y);\n        uv1.subtractToRef(uv0, uvec0);\n        uv2.subtractToRef(uv1, uvec1);\n      }\n      if (meshCol && colorFromTexture) {\n        col0X = meshCol[4 * id0];\n        col0Y = meshCol[4 * id0 + 1];\n        col0Z = meshCol[4 * id0 + 2];\n        col0A = meshCol[4 * id0 + 3];\n        col1X = meshCol[4 * id1];\n        col1Y = meshCol[4 * id1 + 1];\n        col1Z = meshCol[4 * id1 + 2];\n        col1A = meshCol[4 * id1 + 3];\n        col2X = meshCol[4 * id2];\n        col2Y = meshCol[4 * id2 + 1];\n        col2Z = meshCol[4 * id2 + 2];\n        col2A = meshCol[4 * id2 + 3];\n        col0.set(col0X, col0Y, col0Z, col0A);\n        col1.set(col1X, col1Y, col1Z, col1A);\n        col2.set(col2X, col2Y, col2Z, col2A);\n        col1.subtractToRef(col0, colvec0);\n        col2.subtractToRef(col1, colvec1);\n      }\n      let width;\n      let height;\n      let deltaS;\n      let deltaV;\n      let h;\n      let s;\n      let v;\n      let hsvCol;\n      const statedColor = new Color3(0, 0, 0);\n      const colPoint3 = new Color3(0, 0, 0);\n      let pointColors;\n      let particle;\n      for (let i = 0; i < pointsGroup._groupDensity[index]; i++) {\n        idxPoints = this.particles.length;\n        this._addParticle(idxPoints, pointsGroup, this._groupCounter, index + i);\n        particle = this.particles[idxPoints];\n        //form a point inside the facet v0, v1, v2;\n        lamda = Scalar.RandomRange(0, 1);\n        mu = Scalar.RandomRange(0, 1);\n        facetPoint = vertex0.add(vec0.scale(lamda)).add(vec1.scale(lamda * mu));\n        if (isVolume) {\n          norm = mesh.getFacetNormal(index).normalize().scale(-1);\n          tang = vec0.clone().normalize();\n          biNorm = Vector3.Cross(norm, tang);\n          angle = Scalar.RandomRange(0, 2 * Math.PI);\n          facetPlaneVec = tang.scale(Math.cos(angle)).add(biNorm.scale(Math.sin(angle)));\n          angle = Scalar.RandomRange(0.1, Math.PI / 2);\n          direction = facetPlaneVec.scale(Math.cos(angle)).add(norm.scale(Math.sin(angle)));\n          ray.origin = facetPoint.add(direction.scale(0.00001));\n          ray.direction = direction;\n          ray.length = diameter;\n          pickInfo = ray.intersectsMesh(mesh);\n          if (pickInfo.hit) {\n            distance = pickInfo.pickedPoint.subtract(facetPoint).length();\n            gap = Scalar.RandomRange(0, 1) * distance;\n            facetPoint.addInPlace(direction.scale(gap));\n          }\n        }\n        particle.position = facetPoint.clone();\n        this._positions.push(particle.position.x, particle.position.y, particle.position.z);\n        if (colorFromTexture !== undefined) {\n          if (meshUV) {\n            uvPoint = uv0.add(uvec0.scale(lamda)).add(uvec1.scale(lamda * mu));\n            if (colorFromTexture) {\n              //Set particle color to texture color\n              if (hasTexture && pointsGroup._groupImageData !== null) {\n                width = pointsGroup._groupImgWidth;\n                height = pointsGroup._groupImgHeight;\n                pointColors = this._getColorIndicesForCoord(pointsGroup, Math.round(uvPoint.x * width), Math.round(uvPoint.y * height), width);\n                particle.color = pointColors;\n                this._colors.push(pointColors.r, pointColors.g, pointColors.b, pointColors.a);\n              } else {\n                if (meshCol) {\n                  //failure in texture and colors available\n                  colPoint = col0.add(colvec0.scale(lamda)).add(colvec1.scale(lamda * mu));\n                  particle.color = new Color4(colPoint.x, colPoint.y, colPoint.z, colPoint.w);\n                  this._colors.push(colPoint.x, colPoint.y, colPoint.z, colPoint.w);\n                } else {\n                  colPoint = col0.set(Math.random(), Math.random(), Math.random(), 1);\n                  particle.color = new Color4(colPoint.x, colPoint.y, colPoint.z, colPoint.w);\n                  this._colors.push(colPoint.x, colPoint.y, colPoint.z, colPoint.w);\n                }\n              }\n            } else {\n              //Set particle uv based on a mesh uv\n              particle.uv = uvPoint.clone();\n              this._uvs.push(particle.uv.x, particle.uv.y);\n            }\n          }\n        } else {\n          if (color) {\n            statedColor.set(color.r, color.g, color.b);\n            deltaS = Scalar.RandomRange(-range, range);\n            deltaV = Scalar.RandomRange(-range, range);\n            hsvCol = statedColor.toHSV();\n            h = hsvCol.r;\n            s = hsvCol.g + deltaS;\n            v = hsvCol.b + deltaV;\n            if (s < 0) {\n              s = 0;\n            }\n            if (s > 1) {\n              s = 1;\n            }\n            if (v < 0) {\n              v = 0;\n            }\n            if (v > 1) {\n              v = 1;\n            }\n            Color3.HSVtoRGBToRef(h, s, v, colPoint3);\n            colPoint.set(colPoint3.r, colPoint3.g, colPoint3.b, 1);\n          } else {\n            colPoint = col0.set(Math.random(), Math.random(), Math.random(), 1);\n          }\n          particle.color = new Color4(colPoint.x, colPoint.y, colPoint.z, colPoint.w);\n          this._colors.push(colPoint.x, colPoint.y, colPoint.z, colPoint.w);\n        }\n      }\n    }\n  }\n  // stores mesh texture in dynamic texture for color pixel retrieval\n  // when pointColor type is color for surface points\n  _colorFromTexture(mesh, pointsGroup, isVolume) {\n    if (mesh.material === null) {\n      Logger.Warn(mesh.name + \"has no material.\");\n      pointsGroup._groupImageData = null;\n      this._setPointsColorOrUV(mesh, pointsGroup, isVolume, true, false);\n      return;\n    }\n    const mat = mesh.material;\n    const textureList = mat.getActiveTextures();\n    if (textureList.length === 0) {\n      Logger.Warn(mesh.name + \"has no usable texture.\");\n      pointsGroup._groupImageData = null;\n      this._setPointsColorOrUV(mesh, pointsGroup, isVolume, true, false);\n      return;\n    }\n    const clone = mesh.clone();\n    clone.setEnabled(false);\n    this._promises.push(new Promise(resolve => {\n      BaseTexture.WhenAllReady(textureList, () => {\n        let n = pointsGroup._textureNb;\n        if (n < 0) {\n          n = 0;\n        }\n        if (n > textureList.length - 1) {\n          n = textureList.length - 1;\n        }\n        const finalize = () => {\n          pointsGroup._groupImgWidth = textureList[n].getSize().width;\n          pointsGroup._groupImgHeight = textureList[n].getSize().height;\n          this._setPointsColorOrUV(clone, pointsGroup, isVolume, true, true, undefined, undefined, textureList[n].coordinatesIndex);\n          clone.dispose();\n          resolve();\n        };\n        pointsGroup._groupImageData = null;\n        const dataPromise = textureList[n].readPixels();\n        if (!dataPromise) {\n          finalize();\n        } else {\n          dataPromise.then(data => {\n            pointsGroup._groupImageData = data;\n            finalize();\n          });\n        }\n      });\n    }));\n  }\n  // calculates the point density per facet of a mesh for surface points\n  _calculateDensity(nbPoints, positions, indices) {\n    let density = new Array();\n    let id0;\n    let id1;\n    let id2;\n    let v0X;\n    let v0Y;\n    let v0Z;\n    let v1X;\n    let v1Y;\n    let v1Z;\n    let v2X;\n    let v2Y;\n    let v2Z;\n    const vertex0 = Vector3.Zero();\n    const vertex1 = Vector3.Zero();\n    const vertex2 = Vector3.Zero();\n    const vec0 = Vector3.Zero();\n    const vec1 = Vector3.Zero();\n    const vec2 = Vector3.Zero();\n    let a; //length of side of triangle\n    let b; //length of side of triangle\n    let c; //length of side of triangle\n    let p; //perimeter of triangle\n    let area;\n    const areas = new Array();\n    let surfaceArea = 0;\n    const nbFacets = indices.length / 3;\n    //surface area\n    for (let index = 0; index < nbFacets; index++) {\n      id0 = indices[3 * index];\n      id1 = indices[3 * index + 1];\n      id2 = indices[3 * index + 2];\n      v0X = positions[3 * id0];\n      v0Y = positions[3 * id0 + 1];\n      v0Z = positions[3 * id0 + 2];\n      v1X = positions[3 * id1];\n      v1Y = positions[3 * id1 + 1];\n      v1Z = positions[3 * id1 + 2];\n      v2X = positions[3 * id2];\n      v2Y = positions[3 * id2 + 1];\n      v2Z = positions[3 * id2 + 2];\n      vertex0.set(v0X, v0Y, v0Z);\n      vertex1.set(v1X, v1Y, v1Z);\n      vertex2.set(v2X, v2Y, v2Z);\n      vertex1.subtractToRef(vertex0, vec0);\n      vertex2.subtractToRef(vertex1, vec1);\n      vertex2.subtractToRef(vertex0, vec2);\n      a = vec0.length();\n      b = vec1.length();\n      c = vec2.length();\n      p = (a + b + c) / 2;\n      area = Math.sqrt(p * (p - a) * (p - b) * (p - c));\n      surfaceArea += area;\n      areas[index] = area;\n    }\n    let pointCount = 0;\n    for (let index = 0; index < nbFacets; index++) {\n      density[index] = Math.floor(nbPoints * areas[index] / surfaceArea);\n      pointCount += density[index];\n    }\n    const diff = nbPoints - pointCount;\n    const pointsPerFacet = Math.floor(diff / nbFacets);\n    const extraPoints = diff % nbFacets;\n    if (pointsPerFacet > 0) {\n      density = density.map(x => x + pointsPerFacet);\n    }\n    for (let index = 0; index < extraPoints; index++) {\n      density[index] += 1;\n    }\n    return density;\n  }\n  /**\n   * Adds points to the PCS in random positions within a unit sphere\n   * @param nb (positive integer) the number of particles to be created from this model\n   * @param pointFunction is an optional javascript function to be called for each particle on PCS creation\n   * @returns the number of groups in the system\n   */\n  addPoints(nb, pointFunction = this._randomUnitVector) {\n    const pointsGroup = new PointsGroup(this._groupCounter, pointFunction);\n    let cp;\n    // particles\n    let idx = this.nbParticles;\n    for (let i = 0; i < nb; i++) {\n      cp = this._addParticle(idx, pointsGroup, this._groupCounter, i);\n      if (pointsGroup && pointsGroup._positionFunction) {\n        pointsGroup._positionFunction(cp, idx, i);\n      }\n      this._positions.push(cp.position.x, cp.position.y, cp.position.z);\n      if (cp.color) {\n        this._colors.push(cp.color.r, cp.color.g, cp.color.b, cp.color.a);\n      }\n      if (cp.uv) {\n        this._uvs.push(cp.uv.x, cp.uv.y);\n      }\n      idx++;\n    }\n    this.nbParticles += nb;\n    this._groupCounter++;\n    return this._groupCounter;\n  }\n  /**\n   * Adds points to the PCS from the surface of the model shape\n   * @param mesh is any Mesh object that will be used as a surface model for the points\n   * @param nb (positive integer) the number of particles to be created from this model\n   * @param colorWith determines whether a point is colored using color (default), uv, random, stated or none (invisible)\n   * @param color (color4) to be used when colorWith is stated or color (number) when used to specify texture position\n   * @param range (number from 0 to 1) to determine the variation in shape and tone for a stated color\n   * @returns the number of groups in the system\n   */\n  addSurfacePoints(mesh, nb, colorWith, color, range) {\n    let colored = colorWith ? colorWith : PointColor.Random;\n    if (isNaN(colored) || colored < 0 || colored > 3) {\n      colored = PointColor.Random;\n    }\n    const meshPos = mesh.getVerticesData(VertexBuffer.PositionKind);\n    const meshInd = mesh.getIndices();\n    this._groups.push(this._groupCounter);\n    const pointsGroup = new PointsGroup(this._groupCounter, null);\n    pointsGroup._groupDensity = this._calculateDensity(nb, meshPos, meshInd);\n    if (colored === PointColor.Color) {\n      pointsGroup._textureNb = color ? color : 0;\n    } else {\n      color = color ? color : new Color4(1, 1, 1, 1);\n    }\n    switch (colored) {\n      case PointColor.Color:\n        this._colorFromTexture(mesh, pointsGroup, false);\n        break;\n      case PointColor.UV:\n        this._setPointsColorOrUV(mesh, pointsGroup, false, false, false);\n        break;\n      case PointColor.Random:\n        this._setPointsColorOrUV(mesh, pointsGroup, false);\n        break;\n      case PointColor.Stated:\n        this._setPointsColorOrUV(mesh, pointsGroup, false, undefined, undefined, color, range);\n        break;\n    }\n    this.nbParticles += nb;\n    this._groupCounter++;\n    return this._groupCounter - 1;\n  }\n  /**\n   * Adds points to the PCS inside the model shape\n   * @param mesh is any Mesh object that will be used as a surface model for the points\n   * @param nb (positive integer) the number of particles to be created from this model\n   * @param colorWith determines whether a point is colored using color (default), uv, random, stated or none (invisible)\n   * @param color (color4) to be used when colorWith is stated or color (number) when used to specify texture position\n   * @param range (number from 0 to 1) to determine the variation in shape and tone for a stated color\n   * @returns the number of groups in the system\n   */\n  addVolumePoints(mesh, nb, colorWith, color, range) {\n    let colored = colorWith ? colorWith : PointColor.Random;\n    if (isNaN(colored) || colored < 0 || colored > 3) {\n      colored = PointColor.Random;\n    }\n    const meshPos = mesh.getVerticesData(VertexBuffer.PositionKind);\n    const meshInd = mesh.getIndices();\n    this._groups.push(this._groupCounter);\n    const pointsGroup = new PointsGroup(this._groupCounter, null);\n    pointsGroup._groupDensity = this._calculateDensity(nb, meshPos, meshInd);\n    if (colored === PointColor.Color) {\n      pointsGroup._textureNb = color ? color : 0;\n    } else {\n      color = color ? color : new Color4(1, 1, 1, 1);\n    }\n    switch (colored) {\n      case PointColor.Color:\n        this._colorFromTexture(mesh, pointsGroup, true);\n        break;\n      case PointColor.UV:\n        this._setPointsColorOrUV(mesh, pointsGroup, true, false, false);\n        break;\n      case PointColor.Random:\n        this._setPointsColorOrUV(mesh, pointsGroup, true);\n        break;\n      case PointColor.Stated:\n        this._setPointsColorOrUV(mesh, pointsGroup, true, undefined, undefined, color, range);\n        break;\n    }\n    this.nbParticles += nb;\n    this._groupCounter++;\n    return this._groupCounter - 1;\n  }\n  /**\n   *  Sets all the particles : this method actually really updates the mesh according to the particle positions, rotations, colors, textures, etc.\n   *  This method calls `updateParticle()` for each particle of the SPS.\n   *  For an animated SPS, it is usually called within the render loop.\n   * @param start The particle index in the particle array where to start to compute the particle property values _(default 0)_\n   * @param end The particle index in the particle array where to stop to compute the particle property values _(default nbParticle - 1)_\n   * @param update If the mesh must be finally updated on this call after all the particle computations _(default true)_\n   * @returns the PCS.\n   */\n  setParticles(start = 0, end = this.nbParticles - 1, update = true) {\n    var _a, _b;\n    if (!this._updatable || !this._isReady) {\n      return this;\n    }\n    // custom beforeUpdate\n    this.beforeUpdateParticles(start, end, update);\n    const rotMatrix = TmpVectors.Matrix[0];\n    const mesh = this.mesh;\n    const colors32 = this._colors32;\n    const positions32 = this._positions32;\n    const uvs32 = this._uvs32;\n    const tempVectors = TmpVectors.Vector3;\n    const camAxisX = tempVectors[5].copyFromFloats(1.0, 0.0, 0.0);\n    const camAxisY = tempVectors[6].copyFromFloats(0.0, 1.0, 0.0);\n    const camAxisZ = tempVectors[7].copyFromFloats(0.0, 0.0, 1.0);\n    const minimum = tempVectors[8].setAll(Number.MAX_VALUE);\n    const maximum = tempVectors[9].setAll(-Number.MAX_VALUE);\n    Matrix.IdentityToRef(rotMatrix);\n    let idx = 0; // current index of the particle\n    if ((_a = this.mesh) === null || _a === void 0 ? void 0 : _a.isFacetDataEnabled) {\n      this._computeBoundingBox = true;\n    }\n    end = end >= this.nbParticles ? this.nbParticles - 1 : end;\n    if (this._computeBoundingBox) {\n      if (start != 0 || end != this.nbParticles - 1) {\n        // only some particles are updated, then use the current existing BBox basis. Note : it can only increase.\n        const boundingInfo = (_b = this.mesh) === null || _b === void 0 ? void 0 : _b.getBoundingInfo();\n        if (boundingInfo) {\n          minimum.copyFrom(boundingInfo.minimum);\n          maximum.copyFrom(boundingInfo.maximum);\n        }\n      }\n    }\n    idx = 0; // particle index\n    let pindex = 0; //index in positions array\n    let cindex = 0; //index in color array\n    let uindex = 0; //index in uv array\n    // particle loop\n    for (let p = start; p <= end; p++) {\n      const particle = this.particles[p];\n      idx = particle.idx;\n      pindex = 3 * idx;\n      cindex = 4 * idx;\n      uindex = 2 * idx;\n      // call to custom user function to update the particle properties\n      this.updateParticle(particle);\n      const particleRotationMatrix = particle._rotationMatrix;\n      const particlePosition = particle.position;\n      const particleGlobalPosition = particle._globalPosition;\n      if (this._computeParticleRotation) {\n        particle.getRotationMatrix(rotMatrix);\n      }\n      const particleHasParent = particle.parentId !== null;\n      if (particleHasParent) {\n        const parent = this.particles[particle.parentId];\n        const parentRotationMatrix = parent._rotationMatrix;\n        const parentGlobalPosition = parent._globalPosition;\n        const rotatedY = particlePosition.x * parentRotationMatrix[1] + particlePosition.y * parentRotationMatrix[4] + particlePosition.z * parentRotationMatrix[7];\n        const rotatedX = particlePosition.x * parentRotationMatrix[0] + particlePosition.y * parentRotationMatrix[3] + particlePosition.z * parentRotationMatrix[6];\n        const rotatedZ = particlePosition.x * parentRotationMatrix[2] + particlePosition.y * parentRotationMatrix[5] + particlePosition.z * parentRotationMatrix[8];\n        particleGlobalPosition.x = parentGlobalPosition.x + rotatedX;\n        particleGlobalPosition.y = parentGlobalPosition.y + rotatedY;\n        particleGlobalPosition.z = parentGlobalPosition.z + rotatedZ;\n        if (this._computeParticleRotation) {\n          const rotMatrixValues = rotMatrix.m;\n          particleRotationMatrix[0] = rotMatrixValues[0] * parentRotationMatrix[0] + rotMatrixValues[1] * parentRotationMatrix[3] + rotMatrixValues[2] * parentRotationMatrix[6];\n          particleRotationMatrix[1] = rotMatrixValues[0] * parentRotationMatrix[1] + rotMatrixValues[1] * parentRotationMatrix[4] + rotMatrixValues[2] * parentRotationMatrix[7];\n          particleRotationMatrix[2] = rotMatrixValues[0] * parentRotationMatrix[2] + rotMatrixValues[1] * parentRotationMatrix[5] + rotMatrixValues[2] * parentRotationMatrix[8];\n          particleRotationMatrix[3] = rotMatrixValues[4] * parentRotationMatrix[0] + rotMatrixValues[5] * parentRotationMatrix[3] + rotMatrixValues[6] * parentRotationMatrix[6];\n          particleRotationMatrix[4] = rotMatrixValues[4] * parentRotationMatrix[1] + rotMatrixValues[5] * parentRotationMatrix[4] + rotMatrixValues[6] * parentRotationMatrix[7];\n          particleRotationMatrix[5] = rotMatrixValues[4] * parentRotationMatrix[2] + rotMatrixValues[5] * parentRotationMatrix[5] + rotMatrixValues[6] * parentRotationMatrix[8];\n          particleRotationMatrix[6] = rotMatrixValues[8] * parentRotationMatrix[0] + rotMatrixValues[9] * parentRotationMatrix[3] + rotMatrixValues[10] * parentRotationMatrix[6];\n          particleRotationMatrix[7] = rotMatrixValues[8] * parentRotationMatrix[1] + rotMatrixValues[9] * parentRotationMatrix[4] + rotMatrixValues[10] * parentRotationMatrix[7];\n          particleRotationMatrix[8] = rotMatrixValues[8] * parentRotationMatrix[2] + rotMatrixValues[9] * parentRotationMatrix[5] + rotMatrixValues[10] * parentRotationMatrix[8];\n        }\n      } else {\n        particleGlobalPosition.x = 0;\n        particleGlobalPosition.y = 0;\n        particleGlobalPosition.z = 0;\n        if (this._computeParticleRotation) {\n          const rotMatrixValues = rotMatrix.m;\n          particleRotationMatrix[0] = rotMatrixValues[0];\n          particleRotationMatrix[1] = rotMatrixValues[1];\n          particleRotationMatrix[2] = rotMatrixValues[2];\n          particleRotationMatrix[3] = rotMatrixValues[4];\n          particleRotationMatrix[4] = rotMatrixValues[5];\n          particleRotationMatrix[5] = rotMatrixValues[6];\n          particleRotationMatrix[6] = rotMatrixValues[8];\n          particleRotationMatrix[7] = rotMatrixValues[9];\n          particleRotationMatrix[8] = rotMatrixValues[10];\n        }\n      }\n      const pivotBackTranslation = tempVectors[11];\n      if (particle.translateFromPivot) {\n        pivotBackTranslation.setAll(0.0);\n      } else {\n        pivotBackTranslation.copyFrom(particle.pivot);\n      }\n      // positions\n      const tmpVertex = tempVectors[0];\n      tmpVertex.copyFrom(particle.position);\n      const vertexX = tmpVertex.x - particle.pivot.x;\n      const vertexY = tmpVertex.y - particle.pivot.y;\n      const vertexZ = tmpVertex.z - particle.pivot.z;\n      let rotatedX = vertexX * particleRotationMatrix[0] + vertexY * particleRotationMatrix[3] + vertexZ * particleRotationMatrix[6];\n      let rotatedY = vertexX * particleRotationMatrix[1] + vertexY * particleRotationMatrix[4] + vertexZ * particleRotationMatrix[7];\n      let rotatedZ = vertexX * particleRotationMatrix[2] + vertexY * particleRotationMatrix[5] + vertexZ * particleRotationMatrix[8];\n      rotatedX += pivotBackTranslation.x;\n      rotatedY += pivotBackTranslation.y;\n      rotatedZ += pivotBackTranslation.z;\n      const px = positions32[pindex] = particleGlobalPosition.x + camAxisX.x * rotatedX + camAxisY.x * rotatedY + camAxisZ.x * rotatedZ;\n      const py = positions32[pindex + 1] = particleGlobalPosition.y + camAxisX.y * rotatedX + camAxisY.y * rotatedY + camAxisZ.y * rotatedZ;\n      const pz = positions32[pindex + 2] = particleGlobalPosition.z + camAxisX.z * rotatedX + camAxisY.z * rotatedY + camAxisZ.z * rotatedZ;\n      if (this._computeBoundingBox) {\n        minimum.minimizeInPlaceFromFloats(px, py, pz);\n        maximum.maximizeInPlaceFromFloats(px, py, pz);\n      }\n      if (this._computeParticleColor && particle.color) {\n        const color = particle.color;\n        const colors32 = this._colors32;\n        colors32[cindex] = color.r;\n        colors32[cindex + 1] = color.g;\n        colors32[cindex + 2] = color.b;\n        colors32[cindex + 3] = color.a;\n      }\n      if (this._computeParticleTexture && particle.uv) {\n        const uv = particle.uv;\n        const uvs32 = this._uvs32;\n        uvs32[uindex] = uv.x;\n        uvs32[uindex + 1] = uv.y;\n      }\n    }\n    // if the VBO must be updated\n    if (mesh) {\n      if (update) {\n        if (this._computeParticleColor) {\n          mesh.updateVerticesData(VertexBuffer.ColorKind, colors32, false, false);\n        }\n        if (this._computeParticleTexture) {\n          mesh.updateVerticesData(VertexBuffer.UVKind, uvs32, false, false);\n        }\n        mesh.updateVerticesData(VertexBuffer.PositionKind, positions32, false, false);\n      }\n      if (this._computeBoundingBox) {\n        if (mesh.hasBoundingInfo) {\n          mesh.getBoundingInfo().reConstruct(minimum, maximum, mesh._worldMatrix);\n        } else {\n          mesh.buildBoundingInfo(minimum, maximum, mesh._worldMatrix);\n        }\n      }\n    }\n    this.afterUpdateParticles(start, end, update);\n    return this;\n  }\n  /**\n   * Disposes the PCS.\n   */\n  dispose() {\n    var _a;\n    (_a = this.mesh) === null || _a === void 0 ? void 0 : _a.dispose();\n    this.vars = null;\n    // drop references to internal big arrays for the GC\n    this._positions = null;\n    this._indices = null;\n    this._normals = null;\n    this._uvs = null;\n    this._colors = null;\n    this._indices32 = null;\n    this._positions32 = null;\n    this._uvs32 = null;\n    this._colors32 = null;\n  }\n  /**\n   * Visibility helper : Recomputes the visible size according to the mesh bounding box\n   * doc :\n   * @returns the PCS.\n   */\n  refreshVisibleSize() {\n    var _a;\n    if (!this._isVisibilityBoxLocked) {\n      (_a = this.mesh) === null || _a === void 0 ? void 0 : _a.refreshBoundingInfo();\n    }\n    return this;\n  }\n  /**\n   * Visibility helper : Sets the size of a visibility box, this sets the underlying mesh bounding box.\n   * @param size the size (float) of the visibility box\n   * note : this doesn't lock the PCS mesh bounding box.\n   * doc :\n   */\n  setVisibilityBox(size) {\n    if (!this.mesh) {\n      return;\n    }\n    const vis = size / 2;\n    this.mesh.buildBoundingInfo(new Vector3(-vis, -vis, -vis), new Vector3(vis, vis, vis));\n  }\n  /**\n   * Gets whether the PCS is always visible or not\n   * doc :\n   */\n  get isAlwaysVisible() {\n    return this._alwaysVisible;\n  }\n  /**\n   * Sets the PCS as always visible or not\n   * doc :\n   */\n  set isAlwaysVisible(val) {\n    if (!this.mesh) {\n      return;\n    }\n    this._alwaysVisible = val;\n    this.mesh.alwaysSelectAsActiveMesh = val;\n  }\n  /**\n   * Tells to `setParticles()` to compute the particle rotations or not\n   * Default value : false. The PCS is faster when it's set to false\n   * Note : particle rotations are only applied to parent particles\n   * Note : the particle rotations aren't stored values, so setting `computeParticleRotation` to false will prevents the particle to rotate\n   */\n  set computeParticleRotation(val) {\n    this._computeParticleRotation = val;\n  }\n  /**\n   * Tells to `setParticles()` to compute the particle colors or not.\n   * Default value : true. The PCS is faster when it's set to false.\n   * Note : the particle colors are stored values, so setting `computeParticleColor` to false will keep yet the last colors set.\n   */\n  set computeParticleColor(val) {\n    this._computeParticleColor = val;\n  }\n  set computeParticleTexture(val) {\n    this._computeParticleTexture = val;\n  }\n  /**\n   * Gets if `setParticles()` computes the particle colors or not.\n   * Default value : false. The PCS is faster when it's set to false.\n   * Note : the particle colors are stored values, so setting `computeParticleColor` to false will keep yet the last colors set.\n   */\n  get computeParticleColor() {\n    return this._computeParticleColor;\n  }\n  /**\n   * Gets if `setParticles()` computes the particle textures or not.\n   * Default value : false. The PCS is faster when it's set to false.\n   * Note : the particle textures are stored values, so setting `computeParticleTexture` to false will keep yet the last colors set.\n   */\n  get computeParticleTexture() {\n    return this._computeParticleTexture;\n  }\n  /**\n   * Tells to `setParticles()` to compute or not the mesh bounding box when computing the particle positions.\n   */\n  set computeBoundingBox(val) {\n    this._computeBoundingBox = val;\n  }\n  /**\n   * Gets if `setParticles()` computes or not the mesh bounding box when computing the particle positions.\n   */\n  get computeBoundingBox() {\n    return this._computeBoundingBox;\n  }\n  // =======================================================================\n  // Particle behavior logic\n  // these following methods may be overwritten by users to fit their needs\n  /**\n   * This function does nothing. It may be overwritten to set all the particle first values.\n   * The PCS doesn't call this function, you may have to call it by your own.\n   * doc :\n   */\n  initParticles() {}\n  /**\n   * This function does nothing. It may be overwritten to recycle a particle\n   * The PCS doesn't call this function, you can to call it\n   * doc :\n   * @param particle The particle to recycle\n   * @returns the recycled particle\n   */\n  recycleParticle(particle) {\n    return particle;\n  }\n  /**\n   * Updates a particle : this function should  be overwritten by the user.\n   * It is called on each particle by `setParticles()`. This is the place to code each particle behavior.\n   * doc :\n   * @example : just set a particle position or velocity and recycle conditions\n   * @param particle The particle to update\n   * @returns the updated particle\n   */\n  updateParticle(particle) {\n    return particle;\n  }\n  /**\n   * This will be called before any other treatment by `setParticles()` and will be passed three parameters.\n   * This does nothing and may be overwritten by the user.\n   * @param start the particle index in the particle array where to start to iterate, same than the value passed to setParticle()\n   * @param stop the particle index in the particle array where to stop to iterate, same than the value passed to setParticle()\n   * @param update the boolean update value actually passed to setParticles()\n   */\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  beforeUpdateParticles(start, stop, update) {}\n  /**\n   * This will be called  by `setParticles()` after all the other treatments and just before the actual mesh update.\n   * This will be passed three parameters.\n   * This does nothing and may be overwritten by the user.\n   * @param start the particle index in the particle array where to start to iterate, same than the value passed to setParticle()\n   * @param stop the particle index in the particle array where to stop to iterate, same than the value passed to setParticle()\n   * @param update the boolean update value actually passed to setParticles()\n   */\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  afterUpdateParticles(start, stop, update) {}\n}","map":{"version":3,"names":["Color4","Color3","Vector2","Vector3","Vector4","TmpVectors","Matrix","Logger","VertexBuffer","VertexData","Mesh","EngineStore","CloudPoint","PointsGroup","Ray","StandardMaterial","BaseTexture","Scalar","PointColor","PointsCloudSystem","positions","_positions32","colors","_colors32","uvs","_uvs32","constructor","name","pointSize","scene","options","particles","Array","nbParticles","counter","vars","_promises","_positions","_indices","_normals","_colors","_uvs","_updatable","_isVisibilityBoxLocked","_alwaysVisible","_groups","_groupCounter","_computeParticleColor","_computeParticleTexture","_computeParticleRotation","_computeBoundingBox","_isReady","_size","_scene","LastCreatedScene","updatable","undefined","buildMeshAsync","material","Promise","all","then","_buildMesh","addPoints","Float32Array","vertexData","set","PositionKind","length","UVKind","ec","ColorKind","mesh","applyToMesh","mat","emissiveColor","disableLighting","pointsCloud","resolve","_addParticle","idx","group","groupId","idxInGroup","cp","push","_randomUnitVector","particle","position","Math","random","color","_getColorIndicesForCoord","pointsGroup","x","y","width","imageData","_groupImageData","colorIndices","redIndex","greenIndex","blueIndex","alphaIndex","redForCoord","greenForCoord","blueForCoord","alphaForCoord","_setPointsColorOrUV","isVolume","colorFromTexture","hasTexture","range","uvSetIndex","updateFacetData","boundInfo","getBoundingInfo","diameter","boundingSphere","radius","meshPos","getVerticesData","meshInd","getIndices","meshUV","meshCol","place","Zero","computeWorldMatrix","meshMatrix","getWorldMatrix","isIdentity","slice","p","TransformCoordinatesFromFloatsToRef","z","idxPoints","id0","id1","id2","v0X","v0Y","v0Z","v1X","v1Y","v1Z","v2X","v2Y","v2Z","vertex0","vertex1","vertex2","vec0","vec1","uv0X","uv0Y","uv1X","uv1Y","uv2X","uv2Y","uv0","uv1","uv2","uvec0","uvec1","col0X","col0Y","col0Z","col0A","col1X","col1Y","col1Z","col1A","col2X","col2Y","col2Z","col2A","col0","col1","col2","colvec0","colvec1","lamda","mu","facetPoint","uvPoint","colPoint","norm","tang","biNorm","angle","facetPlaneVec","gap","distance","ray","pickInfo","direction","index","subtractToRef","height","deltaS","deltaV","h","s","v","hsvCol","statedColor","colPoint3","pointColors","i","_groupDensity","RandomRange","add","scale","getFacetNormal","normalize","clone","Cross","PI","cos","sin","origin","intersectsMesh","hit","pickedPoint","subtract","addInPlace","_groupImgWidth","_groupImgHeight","round","r","g","b","a","w","uv","toHSV","HSVtoRGBToRef","_colorFromTexture","Warn","textureList","getActiveTextures","setEnabled","WhenAllReady","n","_textureNb","finalize","getSize","coordinatesIndex","dispose","dataPromise","readPixels","data","_calculateDensity","nbPoints","indices","density","vec2","c","area","areas","surfaceArea","nbFacets","sqrt","pointCount","floor","diff","pointsPerFacet","extraPoints","map","nb","pointFunction","_positionFunction","addSurfacePoints","colorWith","colored","Random","isNaN","Color","UV","Stated","addVolumePoints","setParticles","start","end","update","beforeUpdateParticles","rotMatrix","colors32","positions32","uvs32","tempVectors","camAxisX","copyFromFloats","camAxisY","camAxisZ","minimum","setAll","Number","MAX_VALUE","maximum","IdentityToRef","_a","isFacetDataEnabled","boundingInfo","_b","copyFrom","pindex","cindex","uindex","updateParticle","particleRotationMatrix","_rotationMatrix","particlePosition","particleGlobalPosition","_globalPosition","getRotationMatrix","particleHasParent","parentId","parent","parentRotationMatrix","parentGlobalPosition","rotatedY","rotatedX","rotatedZ","rotMatrixValues","m","pivotBackTranslation","translateFromPivot","pivot","tmpVertex","vertexX","vertexY","vertexZ","px","py","pz","minimizeInPlaceFromFloats","maximizeInPlaceFromFloats","updateVerticesData","hasBoundingInfo","reConstruct","_worldMatrix","buildBoundingInfo","afterUpdateParticles","_indices32","refreshVisibleSize","refreshBoundingInfo","setVisibilityBox","size","vis","isAlwaysVisible","val","alwaysSelectAsActiveMesh","computeParticleRotation","computeParticleColor","computeParticleTexture","computeBoundingBox","initParticles","recycleParticle","stop"],"sources":["../../../../dev/core/src/Particles/pointsCloudSystem.ts"],"sourcesContent":["import type { IndicesArray, FloatArray } from \"../types\";\r\nimport { Color4, Color3 } from \"../Maths/math\";\r\nimport { Vector2, Vector3, Vector4, TmpVectors, Matrix } from \"../Maths/math.vector\";\r\nimport { Logger } from \"../Misc/logger\";\r\nimport { VertexBuffer } from \"../Buffers/buffer\";\r\nimport { VertexData } from \"../Meshes/mesh.vertexData\";\r\nimport { Mesh } from \"../Meshes/mesh\";\r\nimport { EngineStore } from \"../Engines/engineStore\";\r\nimport type { Scene, IDisposable } from \"../scene\";\r\nimport { CloudPoint, PointsGroup } from \"./cloudPoint\";\r\nimport { Ray } from \"../Culling/ray\";\r\nimport type { PickingInfo } from \"../Collisions/pickingInfo\";\r\nimport { StandardMaterial } from \"../Materials/standardMaterial\";\r\nimport { BaseTexture } from \"./../Materials/Textures/baseTexture\";\r\nimport { Scalar } from \"../Maths/math.scalar\";\r\nimport type { Material } from \"../Materials/material\";\r\n\r\n/** Defines the 4 color options */\r\nexport enum PointColor {\r\n    /** color value */\r\n    Color = 2,\r\n    /** uv value */\r\n    UV = 1,\r\n    /** random value */\r\n    Random = 0,\r\n    /** stated value */\r\n    Stated = 3,\r\n}\r\n\r\n/**\r\n * The PointCloudSystem (PCS) is a single updatable mesh. The points corresponding to the vertices of this big mesh.\r\n * As it is just a mesh, the PointCloudSystem has all the same properties as any other BJS mesh : not more, not less. It can be scaled, rotated, translated, enlighted, textured, moved, etc.\r\n\r\n * The PointCloudSystem is also a particle system, with each point being a particle. It provides some methods to manage the particles.\r\n * However it is behavior agnostic. This means it has no emitter, no particle physics, no particle recycler. You have to implement your own behavior.\r\n *\r\n * Full documentation here : TO BE ENTERED\r\n */\r\nexport class PointsCloudSystem implements IDisposable {\r\n    /**\r\n     *  The PCS array of cloud point objects. Just access each particle as with any classic array.\r\n     *  Example : var p = SPS.particles[i];\r\n     */\r\n    public particles: CloudPoint[] = new Array<CloudPoint>();\r\n    /**\r\n     * The PCS total number of particles. Read only. Use PCS.counter instead if you need to set your own value.\r\n     */\r\n    public nbParticles: number = 0;\r\n    /**\r\n     * This a counter for your own usage. It's not set by any SPS functions.\r\n     */\r\n    public counter: number = 0;\r\n    /**\r\n     * The PCS name. This name is also given to the underlying mesh.\r\n     */\r\n    public name: string;\r\n    /**\r\n     * The PCS mesh. It's a standard BJS Mesh, so all the methods from the Mesh class are available.\r\n     */\r\n    public mesh?: Mesh;\r\n    /**\r\n     * This empty object is intended to store some PCS specific or temporary values in order to lower the Garbage Collector activity.\r\n     * Please read :\r\n     */\r\n    public vars: any = {};\r\n    /**\r\n     * @internal\r\n     */\r\n    public _size: number; //size of each point particle\r\n\r\n    private _scene: Scene;\r\n    private _promises: Array<Promise<any>> = [];\r\n    private _positions: number[] = new Array<number>();\r\n    private _indices: number[] = new Array<number>();\r\n    private _normals: number[] = new Array<number>();\r\n    private _colors: number[] = new Array<number>();\r\n    private _uvs: number[] = new Array<number>();\r\n    private _indices32: IndicesArray; // used as depth sorted array if depth sort enabled, else used as typed indices\r\n    private _positions32: Float32Array; // updated positions for the VBO\r\n    private _colors32: Float32Array;\r\n    private _uvs32: Float32Array;\r\n    private _updatable: boolean = true;\r\n    private _isVisibilityBoxLocked = false;\r\n    private _alwaysVisible: boolean = false;\r\n    private _groups: number[] = new Array<number>(); //start indices for each group of particles\r\n    private _groupCounter: number = 0;\r\n    private _computeParticleColor: boolean = true;\r\n    private _computeParticleTexture: boolean = true;\r\n    private _computeParticleRotation: boolean = true;\r\n    private _computeBoundingBox: boolean = false;\r\n    private _isReady: boolean = false;\r\n\r\n    /**\r\n     * Gets the particle positions computed by the Point Cloud System\r\n     */\r\n    public get positions() {\r\n        return this._positions32;\r\n    }\r\n\r\n    /**\r\n     * Gets the particle colors computed by the Point Cloud System\r\n     */\r\n    public get colors() {\r\n        return this._colors32;\r\n    }\r\n\r\n    /**\r\n     * Gets the particle uvs computed by the Point Cloud System\r\n     */\r\n    public get uvs() {\r\n        return this._uvs32;\r\n    }\r\n\r\n    /**\r\n     * Creates a PCS (Points Cloud System) object\r\n     * @param name (String) is the PCS name, this will be the underlying mesh name\r\n     * @param pointSize (number) is the size for each point. Has no effect on a WebGPU engine.\r\n     * @param scene (Scene) is the scene in which the PCS is added\r\n     * @param options defines the options of the PCS e.g.\r\n     * * updatable (optional boolean, default true) : if the PCS must be updatable or immutable\r\n     * @param options.updatable\r\n     */\r\n    constructor(name: string, pointSize: number, scene: Scene, options?: { updatable?: boolean }) {\r\n        this.name = name;\r\n        this._size = pointSize;\r\n        this._scene = scene || EngineStore.LastCreatedScene;\r\n        if (options && options.updatable !== undefined) {\r\n            this._updatable = options.updatable;\r\n        } else {\r\n            this._updatable = true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Builds the PCS underlying mesh. Returns a standard Mesh.\r\n     * If no points were added to the PCS, the returned mesh is just a single point.\r\n     * @param material The material to use to render the mesh. If not provided, will create a default one\r\n     * @returns a promise for the created mesh\r\n     */\r\n    public buildMeshAsync(material?: Material): Promise<Mesh> {\r\n        return Promise.all(this._promises).then(() => {\r\n            this._isReady = true;\r\n            return this._buildMesh(material);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    private _buildMesh(material?: Material): Promise<Mesh> {\r\n        if (this.nbParticles === 0) {\r\n            this.addPoints(1);\r\n        }\r\n\r\n        this._positions32 = new Float32Array(this._positions);\r\n        this._uvs32 = new Float32Array(this._uvs);\r\n        this._colors32 = new Float32Array(this._colors);\r\n\r\n        const vertexData = new VertexData();\r\n        vertexData.set(this._positions32, VertexBuffer.PositionKind);\r\n\r\n        if (this._uvs32.length > 0) {\r\n            vertexData.set(this._uvs32, VertexBuffer.UVKind);\r\n        }\r\n        let ec = 0; //emissive color value 0 for UVs, 1 for color\r\n        if (this._colors32.length > 0) {\r\n            ec = 1;\r\n            vertexData.set(this._colors32, VertexBuffer.ColorKind);\r\n        }\r\n        const mesh = new Mesh(this.name, this._scene);\r\n        vertexData.applyToMesh(mesh, this._updatable);\r\n        this.mesh = mesh;\r\n\r\n        // free memory\r\n        (<any>this._positions) = null;\r\n        (<any>this._uvs) = null;\r\n        (<any>this._colors) = null;\r\n\r\n        if (!this._updatable) {\r\n            this.particles.length = 0;\r\n        }\r\n\r\n        let mat = material;\r\n\r\n        if (!mat) {\r\n            mat = new StandardMaterial(\"point cloud material\", this._scene);\r\n            (<StandardMaterial>mat).emissiveColor = new Color3(ec, ec, ec);\r\n            (<StandardMaterial>mat).disableLighting = true;\r\n            (<StandardMaterial>mat).pointsCloud = true;\r\n            (<StandardMaterial>mat).pointSize = this._size;\r\n        }\r\n        mesh.material = mat;\r\n\r\n        return new Promise((resolve) => resolve(mesh));\r\n    }\r\n\r\n    // adds a new particle object in the particles array\r\n    private _addParticle(idx: number, group: PointsGroup, groupId: number, idxInGroup: number): CloudPoint {\r\n        const cp = new CloudPoint(idx, group, groupId, idxInGroup, this);\r\n        this.particles.push(cp);\r\n        return cp;\r\n    }\r\n\r\n    private _randomUnitVector(particle: CloudPoint): void {\r\n        particle.position = new Vector3(Math.random(), Math.random(), Math.random());\r\n        particle.color = new Color4(1, 1, 1, 1);\r\n    }\r\n\r\n    private _getColorIndicesForCoord(pointsGroup: PointsGroup, x: number, y: number, width: number): Color4 {\r\n        const imageData = <Uint8Array>pointsGroup._groupImageData;\r\n        const color = y * (width * 4) + x * 4;\r\n        const colorIndices = [color, color + 1, color + 2, color + 3];\r\n        const redIndex = colorIndices[0];\r\n        const greenIndex = colorIndices[1];\r\n        const blueIndex = colorIndices[2];\r\n        const alphaIndex = colorIndices[3];\r\n        const redForCoord = imageData[redIndex];\r\n        const greenForCoord = imageData[greenIndex];\r\n        const blueForCoord = imageData[blueIndex];\r\n        const alphaForCoord = imageData[alphaIndex];\r\n        return new Color4(redForCoord / 255, greenForCoord / 255, blueForCoord / 255, alphaForCoord);\r\n    }\r\n\r\n    private _setPointsColorOrUV(\r\n        mesh: Mesh,\r\n        pointsGroup: PointsGroup,\r\n        isVolume: boolean,\r\n        colorFromTexture?: boolean,\r\n        hasTexture?: boolean,\r\n        color?: Color4,\r\n        range?: number,\r\n        uvSetIndex?: number\r\n    ): void {\r\n        uvSetIndex = uvSetIndex ?? 0;\r\n\r\n        if (isVolume) {\r\n            mesh.updateFacetData();\r\n        }\r\n\r\n        const boundInfo = mesh.getBoundingInfo();\r\n        const diameter = 2 * boundInfo.boundingSphere.radius;\r\n\r\n        let meshPos = <FloatArray>mesh.getVerticesData(VertexBuffer.PositionKind);\r\n        const meshInd = <IndicesArray>mesh.getIndices();\r\n        const meshUV = <FloatArray>mesh.getVerticesData(VertexBuffer.UVKind + (uvSetIndex ? uvSetIndex + 1 : \"\"));\r\n        const meshCol = <FloatArray>mesh.getVerticesData(VertexBuffer.ColorKind);\r\n\r\n        const place = Vector3.Zero();\r\n        mesh.computeWorldMatrix();\r\n        const meshMatrix: Matrix = mesh.getWorldMatrix();\r\n        if (!meshMatrix.isIdentity()) {\r\n            meshPos = meshPos.slice(0);\r\n            for (let p = 0; p < meshPos.length / 3; p++) {\r\n                Vector3.TransformCoordinatesFromFloatsToRef(meshPos[3 * p], meshPos[3 * p + 1], meshPos[3 * p + 2], meshMatrix, place);\r\n                meshPos[3 * p] = place.x;\r\n                meshPos[3 * p + 1] = place.y;\r\n                meshPos[3 * p + 2] = place.z;\r\n            }\r\n        }\r\n\r\n        let idxPoints: number = 0;\r\n\r\n        let id0: number = 0;\r\n        let id1: number = 0;\r\n        let id2: number = 0;\r\n        let v0X: number = 0;\r\n        let v0Y: number = 0;\r\n        let v0Z: number = 0;\r\n        let v1X: number = 0;\r\n        let v1Y: number = 0;\r\n        let v1Z: number = 0;\r\n        let v2X: number = 0;\r\n        let v2Y: number = 0;\r\n        let v2Z: number = 0;\r\n        const vertex0 = Vector3.Zero();\r\n        const vertex1 = Vector3.Zero();\r\n        const vertex2 = Vector3.Zero();\r\n        const vec0 = Vector3.Zero();\r\n        const vec1 = Vector3.Zero();\r\n\r\n        let uv0X: number = 0;\r\n        let uv0Y: number = 0;\r\n        let uv1X: number = 0;\r\n        let uv1Y: number = 0;\r\n        let uv2X: number = 0;\r\n        let uv2Y: number = 0;\r\n        const uv0 = Vector2.Zero();\r\n        const uv1 = Vector2.Zero();\r\n        const uv2 = Vector2.Zero();\r\n        const uvec0 = Vector2.Zero();\r\n        const uvec1 = Vector2.Zero();\r\n\r\n        let col0X: number = 0;\r\n        let col0Y: number = 0;\r\n        let col0Z: number = 0;\r\n        let col0A: number = 0;\r\n        let col1X: number = 0;\r\n        let col1Y: number = 0;\r\n        let col1Z: number = 0;\r\n        let col1A: number = 0;\r\n        let col2X: number = 0;\r\n        let col2Y: number = 0;\r\n        let col2Z: number = 0;\r\n        let col2A: number = 0;\r\n        const col0 = Vector4.Zero();\r\n        const col1 = Vector4.Zero();\r\n        const col2 = Vector4.Zero();\r\n        const colvec0 = Vector4.Zero();\r\n        const colvec1 = Vector4.Zero();\r\n\r\n        let lamda: number = 0;\r\n        let mu: number = 0;\r\n        range = range ? range : 0;\r\n\r\n        let facetPoint: Vector3;\r\n        let uvPoint: Vector2;\r\n        let colPoint: Vector4 = new Vector4(0, 0, 0, 0);\r\n\r\n        let norm = Vector3.Zero();\r\n        let tang = Vector3.Zero();\r\n        let biNorm = Vector3.Zero();\r\n        let angle = 0;\r\n        let facetPlaneVec = Vector3.Zero();\r\n\r\n        let gap = 0;\r\n        let distance = 0;\r\n        const ray = new Ray(Vector3.Zero(), new Vector3(1, 0, 0));\r\n        let pickInfo: PickingInfo;\r\n        let direction = Vector3.Zero();\r\n\r\n        for (let index = 0; index < meshInd.length / 3; index++) {\r\n            id0 = meshInd[3 * index];\r\n            id1 = meshInd[3 * index + 1];\r\n            id2 = meshInd[3 * index + 2];\r\n            v0X = meshPos[3 * id0];\r\n            v0Y = meshPos[3 * id0 + 1];\r\n            v0Z = meshPos[3 * id0 + 2];\r\n            v1X = meshPos[3 * id1];\r\n            v1Y = meshPos[3 * id1 + 1];\r\n            v1Z = meshPos[3 * id1 + 2];\r\n            v2X = meshPos[3 * id2];\r\n            v2Y = meshPos[3 * id2 + 1];\r\n            v2Z = meshPos[3 * id2 + 2];\r\n            vertex0.set(v0X, v0Y, v0Z);\r\n            vertex1.set(v1X, v1Y, v1Z);\r\n            vertex2.set(v2X, v2Y, v2Z);\r\n            vertex1.subtractToRef(vertex0, vec0);\r\n            vertex2.subtractToRef(vertex1, vec1);\r\n\r\n            if (meshUV) {\r\n                uv0X = meshUV[2 * id0];\r\n                uv0Y = meshUV[2 * id0 + 1];\r\n                uv1X = meshUV[2 * id1];\r\n                uv1Y = meshUV[2 * id1 + 1];\r\n                uv2X = meshUV[2 * id2];\r\n                uv2Y = meshUV[2 * id2 + 1];\r\n                uv0.set(uv0X, uv0Y);\r\n                uv1.set(uv1X, uv1Y);\r\n                uv2.set(uv2X, uv2Y);\r\n                uv1.subtractToRef(uv0, uvec0);\r\n                uv2.subtractToRef(uv1, uvec1);\r\n            }\r\n\r\n            if (meshCol && colorFromTexture) {\r\n                col0X = meshCol[4 * id0];\r\n                col0Y = meshCol[4 * id0 + 1];\r\n                col0Z = meshCol[4 * id0 + 2];\r\n                col0A = meshCol[4 * id0 + 3];\r\n                col1X = meshCol[4 * id1];\r\n                col1Y = meshCol[4 * id1 + 1];\r\n                col1Z = meshCol[4 * id1 + 2];\r\n                col1A = meshCol[4 * id1 + 3];\r\n                col2X = meshCol[4 * id2];\r\n                col2Y = meshCol[4 * id2 + 1];\r\n                col2Z = meshCol[4 * id2 + 2];\r\n                col2A = meshCol[4 * id2 + 3];\r\n                col0.set(col0X, col0Y, col0Z, col0A);\r\n                col1.set(col1X, col1Y, col1Z, col1A);\r\n                col2.set(col2X, col2Y, col2Z, col2A);\r\n                col1.subtractToRef(col0, colvec0);\r\n                col2.subtractToRef(col1, colvec1);\r\n            }\r\n\r\n            let width: number;\r\n            let height: number;\r\n            let deltaS: number;\r\n            let deltaV: number;\r\n            let h: number;\r\n            let s: number;\r\n            let v: number;\r\n            let hsvCol: Color3;\r\n            const statedColor: Color3 = new Color3(0, 0, 0);\r\n            const colPoint3: Color3 = new Color3(0, 0, 0);\r\n            let pointColors: Color4;\r\n            let particle: CloudPoint;\r\n\r\n            for (let i = 0; i < pointsGroup._groupDensity[index]; i++) {\r\n                idxPoints = this.particles.length;\r\n                this._addParticle(idxPoints, pointsGroup, this._groupCounter, index + i);\r\n                particle = this.particles[idxPoints];\r\n                //form a point inside the facet v0, v1, v2;\r\n                lamda = Scalar.RandomRange(0, 1);\r\n                mu = Scalar.RandomRange(0, 1);\r\n                facetPoint = vertex0.add(vec0.scale(lamda)).add(vec1.scale(lamda * mu));\r\n                if (isVolume) {\r\n                    norm = mesh.getFacetNormal(index).normalize().scale(-1);\r\n                    tang = vec0.clone().normalize();\r\n                    biNorm = Vector3.Cross(norm, tang);\r\n                    angle = Scalar.RandomRange(0, 2 * Math.PI);\r\n                    facetPlaneVec = tang.scale(Math.cos(angle)).add(biNorm.scale(Math.sin(angle)));\r\n                    angle = Scalar.RandomRange(0.1, Math.PI / 2);\r\n                    direction = facetPlaneVec.scale(Math.cos(angle)).add(norm.scale(Math.sin(angle)));\r\n\r\n                    ray.origin = facetPoint.add(direction.scale(0.00001));\r\n                    ray.direction = direction;\r\n                    ray.length = diameter;\r\n                    pickInfo = ray.intersectsMesh(mesh);\r\n                    if (pickInfo.hit) {\r\n                        distance = pickInfo.pickedPoint!.subtract(facetPoint).length();\r\n                        gap = Scalar.RandomRange(0, 1) * distance;\r\n                        facetPoint.addInPlace(direction.scale(gap));\r\n                    }\r\n                }\r\n                particle.position = facetPoint.clone();\r\n                this._positions.push(particle.position.x, particle.position.y, particle.position.z);\r\n                if (colorFromTexture !== undefined) {\r\n                    if (meshUV) {\r\n                        uvPoint = uv0.add(uvec0.scale(lamda)).add(uvec1.scale(lamda * mu));\r\n                        if (colorFromTexture) {\r\n                            //Set particle color to texture color\r\n                            if (hasTexture && pointsGroup._groupImageData !== null) {\r\n                                width = pointsGroup._groupImgWidth;\r\n                                height = pointsGroup._groupImgHeight;\r\n                                pointColors = this._getColorIndicesForCoord(pointsGroup, Math.round(uvPoint.x * width), Math.round(uvPoint.y * height), width);\r\n                                particle.color = pointColors;\r\n                                this._colors.push(pointColors.r, pointColors.g, pointColors.b, pointColors.a);\r\n                            } else {\r\n                                if (meshCol) {\r\n                                    //failure in texture and colors available\r\n                                    colPoint = col0.add(colvec0.scale(lamda)).add(colvec1.scale(lamda * mu));\r\n                                    particle.color = new Color4(colPoint.x, colPoint.y, colPoint.z, colPoint.w);\r\n                                    this._colors.push(colPoint.x, colPoint.y, colPoint.z, colPoint.w);\r\n                                } else {\r\n                                    colPoint = col0.set(Math.random(), Math.random(), Math.random(), 1);\r\n                                    particle.color = new Color4(colPoint.x, colPoint.y, colPoint.z, colPoint.w);\r\n                                    this._colors.push(colPoint.x, colPoint.y, colPoint.z, colPoint.w);\r\n                                }\r\n                            }\r\n                        } else {\r\n                            //Set particle uv based on a mesh uv\r\n                            particle.uv = uvPoint.clone();\r\n                            this._uvs.push(particle.uv.x, particle.uv.y);\r\n                        }\r\n                    }\r\n                } else {\r\n                    if (color) {\r\n                        statedColor.set(color.r, color.g, color.b);\r\n                        deltaS = Scalar.RandomRange(-range, range);\r\n                        deltaV = Scalar.RandomRange(-range, range);\r\n                        hsvCol = statedColor.toHSV();\r\n                        h = hsvCol.r;\r\n                        s = hsvCol.g + deltaS;\r\n                        v = hsvCol.b + deltaV;\r\n                        if (s < 0) {\r\n                            s = 0;\r\n                        }\r\n                        if (s > 1) {\r\n                            s = 1;\r\n                        }\r\n                        if (v < 0) {\r\n                            v = 0;\r\n                        }\r\n                        if (v > 1) {\r\n                            v = 1;\r\n                        }\r\n                        Color3.HSVtoRGBToRef(h, s, v, colPoint3);\r\n                        colPoint.set(colPoint3.r, colPoint3.g, colPoint3.b, 1);\r\n                    } else {\r\n                        colPoint = col0.set(Math.random(), Math.random(), Math.random(), 1);\r\n                    }\r\n                    particle.color = new Color4(colPoint.x, colPoint.y, colPoint.z, colPoint.w);\r\n                    this._colors.push(colPoint.x, colPoint.y, colPoint.z, colPoint.w);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    // stores mesh texture in dynamic texture for color pixel retrieval\r\n    // when pointColor type is color for surface points\r\n    private _colorFromTexture(mesh: Mesh, pointsGroup: PointsGroup, isVolume: boolean): void {\r\n        if (mesh.material === null) {\r\n            Logger.Warn(mesh.name + \"has no material.\");\r\n            pointsGroup._groupImageData = null;\r\n            this._setPointsColorOrUV(mesh, pointsGroup, isVolume, true, false);\r\n            return;\r\n        }\r\n\r\n        const mat = mesh.material;\r\n        const textureList: BaseTexture[] = mat.getActiveTextures();\r\n        if (textureList.length === 0) {\r\n            Logger.Warn(mesh.name + \"has no usable texture.\");\r\n            pointsGroup._groupImageData = null;\r\n            this._setPointsColorOrUV(mesh, pointsGroup, isVolume, true, false);\r\n            return;\r\n        }\r\n\r\n        const clone = <Mesh>mesh.clone();\r\n        clone.setEnabled(false);\r\n        this._promises.push(\r\n            new Promise((resolve: (_: void) => void) => {\r\n                BaseTexture.WhenAllReady(textureList, () => {\r\n                    let n = pointsGroup._textureNb;\r\n                    if (n < 0) {\r\n                        n = 0;\r\n                    }\r\n                    if (n > textureList.length - 1) {\r\n                        n = textureList.length - 1;\r\n                    }\r\n                    const finalize = () => {\r\n                        pointsGroup._groupImgWidth = textureList[n].getSize().width;\r\n                        pointsGroup._groupImgHeight = textureList[n].getSize().height;\r\n                        this._setPointsColorOrUV(clone, pointsGroup, isVolume, true, true, undefined, undefined, textureList[n].coordinatesIndex);\r\n                        clone.dispose();\r\n                        resolve();\r\n                    };\r\n                    pointsGroup._groupImageData = null;\r\n                    const dataPromise = textureList[n].readPixels();\r\n                    if (!dataPromise) {\r\n                        finalize();\r\n                    } else {\r\n                        dataPromise.then((data) => {\r\n                            pointsGroup._groupImageData = data;\r\n                            finalize();\r\n                        });\r\n                    }\r\n                });\r\n            })\r\n        );\r\n    }\r\n\r\n    // calculates the point density per facet of a mesh for surface points\r\n    private _calculateDensity(nbPoints: number, positions: FloatArray, indices: IndicesArray): number[] {\r\n        let density: number[] = new Array<number>();\r\n        let id0: number;\r\n        let id1: number;\r\n        let id2: number;\r\n        let v0X: number;\r\n        let v0Y: number;\r\n        let v0Z: number;\r\n        let v1X: number;\r\n        let v1Y: number;\r\n        let v1Z: number;\r\n        let v2X: number;\r\n        let v2Y: number;\r\n        let v2Z: number;\r\n        const vertex0 = Vector3.Zero();\r\n        const vertex1 = Vector3.Zero();\r\n        const vertex2 = Vector3.Zero();\r\n        const vec0 = Vector3.Zero();\r\n        const vec1 = Vector3.Zero();\r\n        const vec2 = Vector3.Zero();\r\n\r\n        let a: number; //length of side of triangle\r\n        let b: number; //length of side of triangle\r\n        let c: number; //length of side of triangle\r\n        let p: number; //perimeter of triangle\r\n        let area: number;\r\n        const areas: number[] = new Array<number>();\r\n        let surfaceArea: number = 0;\r\n\r\n        const nbFacets = indices.length / 3;\r\n\r\n        //surface area\r\n        for (let index = 0; index < nbFacets; index++) {\r\n            id0 = indices[3 * index];\r\n            id1 = indices[3 * index + 1];\r\n            id2 = indices[3 * index + 2];\r\n            v0X = positions[3 * id0];\r\n            v0Y = positions[3 * id0 + 1];\r\n            v0Z = positions[3 * id0 + 2];\r\n            v1X = positions[3 * id1];\r\n            v1Y = positions[3 * id1 + 1];\r\n            v1Z = positions[3 * id1 + 2];\r\n            v2X = positions[3 * id2];\r\n            v2Y = positions[3 * id2 + 1];\r\n            v2Z = positions[3 * id2 + 2];\r\n            vertex0.set(v0X, v0Y, v0Z);\r\n            vertex1.set(v1X, v1Y, v1Z);\r\n            vertex2.set(v2X, v2Y, v2Z);\r\n            vertex1.subtractToRef(vertex0, vec0);\r\n            vertex2.subtractToRef(vertex1, vec1);\r\n            vertex2.subtractToRef(vertex0, vec2);\r\n            a = vec0.length();\r\n            b = vec1.length();\r\n            c = vec2.length();\r\n            p = (a + b + c) / 2;\r\n            area = Math.sqrt(p * (p - a) * (p - b) * (p - c));\r\n            surfaceArea += area;\r\n            areas[index] = area;\r\n        }\r\n        let pointCount: number = 0;\r\n        for (let index = 0; index < nbFacets; index++) {\r\n            density[index] = Math.floor((nbPoints * areas[index]) / surfaceArea);\r\n            pointCount += density[index];\r\n        }\r\n\r\n        const diff: number = nbPoints - pointCount;\r\n        const pointsPerFacet: number = Math.floor(diff / nbFacets);\r\n        const extraPoints: number = diff % nbFacets;\r\n\r\n        if (pointsPerFacet > 0) {\r\n            density = density.map((x) => x + pointsPerFacet);\r\n        }\r\n\r\n        for (let index = 0; index < extraPoints; index++) {\r\n            density[index] += 1;\r\n        }\r\n\r\n        return density;\r\n    }\r\n\r\n    /**\r\n     * Adds points to the PCS in random positions within a unit sphere\r\n     * @param nb (positive integer) the number of particles to be created from this model\r\n     * @param pointFunction is an optional javascript function to be called for each particle on PCS creation\r\n     * @returns the number of groups in the system\r\n     */\r\n    public addPoints(nb: number, pointFunction: any = this._randomUnitVector): number {\r\n        const pointsGroup = new PointsGroup(this._groupCounter, pointFunction);\r\n        let cp: CloudPoint;\r\n\r\n        // particles\r\n        let idx = this.nbParticles;\r\n        for (let i = 0; i < nb; i++) {\r\n            cp = this._addParticle(idx, pointsGroup, this._groupCounter, i);\r\n            if (pointsGroup && pointsGroup._positionFunction) {\r\n                pointsGroup._positionFunction(cp, idx, i);\r\n            }\r\n            this._positions.push(cp.position.x, cp.position.y, cp.position.z);\r\n            if (cp.color) {\r\n                this._colors.push(cp.color.r, cp.color.g, cp.color.b, cp.color.a);\r\n            }\r\n            if (cp.uv) {\r\n                this._uvs.push(cp.uv.x, cp.uv.y);\r\n            }\r\n            idx++;\r\n        }\r\n        this.nbParticles += nb;\r\n        this._groupCounter++;\r\n        return this._groupCounter;\r\n    }\r\n\r\n    /**\r\n     * Adds points to the PCS from the surface of the model shape\r\n     * @param mesh is any Mesh object that will be used as a surface model for the points\r\n     * @param nb (positive integer) the number of particles to be created from this model\r\n     * @param colorWith determines whether a point is colored using color (default), uv, random, stated or none (invisible)\r\n     * @param color (color4) to be used when colorWith is stated or color (number) when used to specify texture position\r\n     * @param range (number from 0 to 1) to determine the variation in shape and tone for a stated color\r\n     * @returns the number of groups in the system\r\n     */\r\n    public addSurfacePoints(mesh: Mesh, nb: number, colorWith?: number, color?: Color4 | number, range?: number): number {\r\n        let colored = colorWith ? colorWith : PointColor.Random;\r\n        if (isNaN(colored) || colored < 0 || colored > 3) {\r\n            colored = PointColor.Random;\r\n        }\r\n\r\n        const meshPos = <FloatArray>mesh.getVerticesData(VertexBuffer.PositionKind);\r\n        const meshInd = <IndicesArray>mesh.getIndices();\r\n\r\n        this._groups.push(this._groupCounter);\r\n        const pointsGroup = new PointsGroup(this._groupCounter, null);\r\n\r\n        pointsGroup._groupDensity = this._calculateDensity(nb, meshPos, meshInd);\r\n        if (colored === PointColor.Color) {\r\n            pointsGroup._textureNb = <number>color ? <number>color : 0;\r\n        } else {\r\n            color = <Color4>color ? <Color4>color : new Color4(1, 1, 1, 1);\r\n        }\r\n        switch (colored) {\r\n            case PointColor.Color:\r\n                this._colorFromTexture(mesh, pointsGroup, false);\r\n                break;\r\n            case PointColor.UV:\r\n                this._setPointsColorOrUV(mesh, pointsGroup, false, false, false);\r\n                break;\r\n            case PointColor.Random:\r\n                this._setPointsColorOrUV(mesh, pointsGroup, false);\r\n                break;\r\n            case PointColor.Stated:\r\n                this._setPointsColorOrUV(mesh, pointsGroup, false, undefined, undefined, <Color4>color, range);\r\n                break;\r\n        }\r\n        this.nbParticles += nb;\r\n        this._groupCounter++;\r\n        return this._groupCounter - 1;\r\n    }\r\n\r\n    /**\r\n     * Adds points to the PCS inside the model shape\r\n     * @param mesh is any Mesh object that will be used as a surface model for the points\r\n     * @param nb (positive integer) the number of particles to be created from this model\r\n     * @param colorWith determines whether a point is colored using color (default), uv, random, stated or none (invisible)\r\n     * @param color (color4) to be used when colorWith is stated or color (number) when used to specify texture position\r\n     * @param range (number from 0 to 1) to determine the variation in shape and tone for a stated color\r\n     * @returns the number of groups in the system\r\n     */\r\n    public addVolumePoints(mesh: Mesh, nb: number, colorWith?: number, color?: Color4 | number, range?: number): number {\r\n        let colored = colorWith ? colorWith : PointColor.Random;\r\n        if (isNaN(colored) || colored < 0 || colored > 3) {\r\n            colored = PointColor.Random;\r\n        }\r\n\r\n        const meshPos = <FloatArray>mesh.getVerticesData(VertexBuffer.PositionKind);\r\n        const meshInd = <IndicesArray>mesh.getIndices();\r\n\r\n        this._groups.push(this._groupCounter);\r\n        const pointsGroup = new PointsGroup(this._groupCounter, null);\r\n\r\n        pointsGroup._groupDensity = this._calculateDensity(nb, meshPos, meshInd);\r\n        if (colored === PointColor.Color) {\r\n            pointsGroup._textureNb = <number>color ? <number>color : 0;\r\n        } else {\r\n            color = <Color4>color ? <Color4>color : new Color4(1, 1, 1, 1);\r\n        }\r\n        switch (colored) {\r\n            case PointColor.Color:\r\n                this._colorFromTexture(mesh, pointsGroup, true);\r\n                break;\r\n            case PointColor.UV:\r\n                this._setPointsColorOrUV(mesh, pointsGroup, true, false, false);\r\n                break;\r\n            case PointColor.Random:\r\n                this._setPointsColorOrUV(mesh, pointsGroup, true);\r\n                break;\r\n            case PointColor.Stated:\r\n                this._setPointsColorOrUV(mesh, pointsGroup, true, undefined, undefined, <Color4>color, range);\r\n                break;\r\n        }\r\n        this.nbParticles += nb;\r\n        this._groupCounter++;\r\n        return this._groupCounter - 1;\r\n    }\r\n\r\n    /**\r\n     *  Sets all the particles : this method actually really updates the mesh according to the particle positions, rotations, colors, textures, etc.\r\n     *  This method calls `updateParticle()` for each particle of the SPS.\r\n     *  For an animated SPS, it is usually called within the render loop.\r\n     * @param start The particle index in the particle array where to start to compute the particle property values _(default 0)_\r\n     * @param end The particle index in the particle array where to stop to compute the particle property values _(default nbParticle - 1)_\r\n     * @param update If the mesh must be finally updated on this call after all the particle computations _(default true)_\r\n     * @returns the PCS.\r\n     */\r\n    public setParticles(start: number = 0, end: number = this.nbParticles - 1, update: boolean = true): PointsCloudSystem {\r\n        if (!this._updatable || !this._isReady) {\r\n            return this;\r\n        }\r\n\r\n        // custom beforeUpdate\r\n        this.beforeUpdateParticles(start, end, update);\r\n\r\n        const rotMatrix = TmpVectors.Matrix[0];\r\n        const mesh = this.mesh;\r\n        const colors32 = this._colors32;\r\n        const positions32 = this._positions32;\r\n        const uvs32 = this._uvs32;\r\n\r\n        const tempVectors = TmpVectors.Vector3;\r\n        const camAxisX = tempVectors[5].copyFromFloats(1.0, 0.0, 0.0);\r\n        const camAxisY = tempVectors[6].copyFromFloats(0.0, 1.0, 0.0);\r\n        const camAxisZ = tempVectors[7].copyFromFloats(0.0, 0.0, 1.0);\r\n        const minimum = tempVectors[8].setAll(Number.MAX_VALUE);\r\n        const maximum = tempVectors[9].setAll(-Number.MAX_VALUE);\r\n\r\n        Matrix.IdentityToRef(rotMatrix);\r\n        let idx = 0; // current index of the particle\r\n\r\n        if (this.mesh?.isFacetDataEnabled) {\r\n            this._computeBoundingBox = true;\r\n        }\r\n\r\n        end = end >= this.nbParticles ? this.nbParticles - 1 : end;\r\n        if (this._computeBoundingBox) {\r\n            if (start != 0 || end != this.nbParticles - 1) {\r\n                // only some particles are updated, then use the current existing BBox basis. Note : it can only increase.\r\n                const boundingInfo = this.mesh?.getBoundingInfo();\r\n                if (boundingInfo) {\r\n                    minimum.copyFrom(boundingInfo.minimum);\r\n                    maximum.copyFrom(boundingInfo.maximum);\r\n                }\r\n            }\r\n        }\r\n\r\n        idx = 0; // particle index\r\n        let pindex = 0; //index in positions array\r\n        let cindex = 0; //index in color array\r\n        let uindex = 0; //index in uv array\r\n\r\n        // particle loop\r\n        for (let p = start; p <= end; p++) {\r\n            const particle = this.particles[p];\r\n            idx = particle.idx;\r\n            pindex = 3 * idx;\r\n            cindex = 4 * idx;\r\n            uindex = 2 * idx;\r\n\r\n            // call to custom user function to update the particle properties\r\n            this.updateParticle(particle);\r\n\r\n            const particleRotationMatrix = particle._rotationMatrix;\r\n            const particlePosition = particle.position;\r\n            const particleGlobalPosition = particle._globalPosition;\r\n\r\n            if (this._computeParticleRotation) {\r\n                particle.getRotationMatrix(rotMatrix);\r\n            }\r\n\r\n            const particleHasParent = particle.parentId !== null;\r\n            if (particleHasParent) {\r\n                const parent = this.particles[particle.parentId!];\r\n                const parentRotationMatrix = parent._rotationMatrix;\r\n                const parentGlobalPosition = parent._globalPosition;\r\n\r\n                const rotatedY = particlePosition.x * parentRotationMatrix[1] + particlePosition.y * parentRotationMatrix[4] + particlePosition.z * parentRotationMatrix[7];\r\n                const rotatedX = particlePosition.x * parentRotationMatrix[0] + particlePosition.y * parentRotationMatrix[3] + particlePosition.z * parentRotationMatrix[6];\r\n                const rotatedZ = particlePosition.x * parentRotationMatrix[2] + particlePosition.y * parentRotationMatrix[5] + particlePosition.z * parentRotationMatrix[8];\r\n\r\n                particleGlobalPosition.x = parentGlobalPosition.x + rotatedX;\r\n                particleGlobalPosition.y = parentGlobalPosition.y + rotatedY;\r\n                particleGlobalPosition.z = parentGlobalPosition.z + rotatedZ;\r\n\r\n                if (this._computeParticleRotation) {\r\n                    const rotMatrixValues = rotMatrix.m;\r\n                    particleRotationMatrix[0] =\r\n                        rotMatrixValues[0] * parentRotationMatrix[0] + rotMatrixValues[1] * parentRotationMatrix[3] + rotMatrixValues[2] * parentRotationMatrix[6];\r\n                    particleRotationMatrix[1] =\r\n                        rotMatrixValues[0] * parentRotationMatrix[1] + rotMatrixValues[1] * parentRotationMatrix[4] + rotMatrixValues[2] * parentRotationMatrix[7];\r\n                    particleRotationMatrix[2] =\r\n                        rotMatrixValues[0] * parentRotationMatrix[2] + rotMatrixValues[1] * parentRotationMatrix[5] + rotMatrixValues[2] * parentRotationMatrix[8];\r\n                    particleRotationMatrix[3] =\r\n                        rotMatrixValues[4] * parentRotationMatrix[0] + rotMatrixValues[5] * parentRotationMatrix[3] + rotMatrixValues[6] * parentRotationMatrix[6];\r\n                    particleRotationMatrix[4] =\r\n                        rotMatrixValues[4] * parentRotationMatrix[1] + rotMatrixValues[5] * parentRotationMatrix[4] + rotMatrixValues[6] * parentRotationMatrix[7];\r\n                    particleRotationMatrix[5] =\r\n                        rotMatrixValues[4] * parentRotationMatrix[2] + rotMatrixValues[5] * parentRotationMatrix[5] + rotMatrixValues[6] * parentRotationMatrix[8];\r\n                    particleRotationMatrix[6] =\r\n                        rotMatrixValues[8] * parentRotationMatrix[0] + rotMatrixValues[9] * parentRotationMatrix[3] + rotMatrixValues[10] * parentRotationMatrix[6];\r\n                    particleRotationMatrix[7] =\r\n                        rotMatrixValues[8] * parentRotationMatrix[1] + rotMatrixValues[9] * parentRotationMatrix[4] + rotMatrixValues[10] * parentRotationMatrix[7];\r\n                    particleRotationMatrix[8] =\r\n                        rotMatrixValues[8] * parentRotationMatrix[2] + rotMatrixValues[9] * parentRotationMatrix[5] + rotMatrixValues[10] * parentRotationMatrix[8];\r\n                }\r\n            } else {\r\n                particleGlobalPosition.x = 0;\r\n                particleGlobalPosition.y = 0;\r\n                particleGlobalPosition.z = 0;\r\n\r\n                if (this._computeParticleRotation) {\r\n                    const rotMatrixValues = rotMatrix.m;\r\n                    particleRotationMatrix[0] = rotMatrixValues[0];\r\n                    particleRotationMatrix[1] = rotMatrixValues[1];\r\n                    particleRotationMatrix[2] = rotMatrixValues[2];\r\n                    particleRotationMatrix[3] = rotMatrixValues[4];\r\n                    particleRotationMatrix[4] = rotMatrixValues[5];\r\n                    particleRotationMatrix[5] = rotMatrixValues[6];\r\n                    particleRotationMatrix[6] = rotMatrixValues[8];\r\n                    particleRotationMatrix[7] = rotMatrixValues[9];\r\n                    particleRotationMatrix[8] = rotMatrixValues[10];\r\n                }\r\n            }\r\n\r\n            const pivotBackTranslation = tempVectors[11];\r\n            if (particle.translateFromPivot) {\r\n                pivotBackTranslation.setAll(0.0);\r\n            } else {\r\n                pivotBackTranslation.copyFrom(particle.pivot);\r\n            }\r\n\r\n            // positions\r\n            const tmpVertex = tempVectors[0];\r\n            tmpVertex.copyFrom(particle.position);\r\n            const vertexX = tmpVertex.x - particle.pivot.x;\r\n            const vertexY = tmpVertex.y - particle.pivot.y;\r\n            const vertexZ = tmpVertex.z - particle.pivot.z;\r\n\r\n            let rotatedX = vertexX * particleRotationMatrix[0] + vertexY * particleRotationMatrix[3] + vertexZ * particleRotationMatrix[6];\r\n            let rotatedY = vertexX * particleRotationMatrix[1] + vertexY * particleRotationMatrix[4] + vertexZ * particleRotationMatrix[7];\r\n            let rotatedZ = vertexX * particleRotationMatrix[2] + vertexY * particleRotationMatrix[5] + vertexZ * particleRotationMatrix[8];\r\n\r\n            rotatedX += pivotBackTranslation.x;\r\n            rotatedY += pivotBackTranslation.y;\r\n            rotatedZ += pivotBackTranslation.z;\r\n\r\n            const px = (positions32[pindex] = particleGlobalPosition.x + camAxisX.x * rotatedX + camAxisY.x * rotatedY + camAxisZ.x * rotatedZ);\r\n            const py = (positions32[pindex + 1] = particleGlobalPosition.y + camAxisX.y * rotatedX + camAxisY.y * rotatedY + camAxisZ.y * rotatedZ);\r\n            const pz = (positions32[pindex + 2] = particleGlobalPosition.z + camAxisX.z * rotatedX + camAxisY.z * rotatedY + camAxisZ.z * rotatedZ);\r\n\r\n            if (this._computeBoundingBox) {\r\n                minimum.minimizeInPlaceFromFloats(px, py, pz);\r\n                maximum.maximizeInPlaceFromFloats(px, py, pz);\r\n            }\r\n\r\n            if (this._computeParticleColor && particle.color) {\r\n                const color = particle.color;\r\n                const colors32 = this._colors32;\r\n                colors32[cindex] = color.r;\r\n                colors32[cindex + 1] = color.g;\r\n                colors32[cindex + 2] = color.b;\r\n                colors32[cindex + 3] = color.a;\r\n            }\r\n            if (this._computeParticleTexture && particle.uv) {\r\n                const uv = particle.uv;\r\n                const uvs32 = this._uvs32;\r\n                uvs32[uindex] = uv.x;\r\n                uvs32[uindex + 1] = uv.y;\r\n            }\r\n        }\r\n\r\n        // if the VBO must be updated\r\n        if (mesh) {\r\n            if (update) {\r\n                if (this._computeParticleColor) {\r\n                    mesh.updateVerticesData(VertexBuffer.ColorKind, colors32, false, false);\r\n                }\r\n                if (this._computeParticleTexture) {\r\n                    mesh.updateVerticesData(VertexBuffer.UVKind, uvs32, false, false);\r\n                }\r\n                mesh.updateVerticesData(VertexBuffer.PositionKind, positions32, false, false);\r\n            }\r\n\r\n            if (this._computeBoundingBox) {\r\n                if (mesh.hasBoundingInfo) {\r\n                    mesh.getBoundingInfo().reConstruct(minimum, maximum, mesh._worldMatrix);\r\n                } else {\r\n                    mesh.buildBoundingInfo(minimum, maximum, mesh._worldMatrix);\r\n                }\r\n            }\r\n        }\r\n        this.afterUpdateParticles(start, end, update);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Disposes the PCS.\r\n     */\r\n    public dispose(): void {\r\n        this.mesh?.dispose();\r\n        this.vars = null;\r\n        // drop references to internal big arrays for the GC\r\n        (<any>this._positions) = null;\r\n        (<any>this._indices) = null;\r\n        (<any>this._normals) = null;\r\n        (<any>this._uvs) = null;\r\n        (<any>this._colors) = null;\r\n        (<any>this._indices32) = null;\r\n        (<any>this._positions32) = null;\r\n        (<any>this._uvs32) = null;\r\n        (<any>this._colors32) = null;\r\n    }\r\n\r\n    /**\r\n     * Visibility helper : Recomputes the visible size according to the mesh bounding box\r\n     * doc :\r\n     * @returns the PCS.\r\n     */\r\n    public refreshVisibleSize(): PointsCloudSystem {\r\n        if (!this._isVisibilityBoxLocked) {\r\n            this.mesh?.refreshBoundingInfo();\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Visibility helper : Sets the size of a visibility box, this sets the underlying mesh bounding box.\r\n     * @param size the size (float) of the visibility box\r\n     * note : this doesn't lock the PCS mesh bounding box.\r\n     * doc :\r\n     */\r\n    public setVisibilityBox(size: number): void {\r\n        if (!this.mesh) {\r\n            return;\r\n        }\r\n\r\n        const vis = size / 2;\r\n        this.mesh.buildBoundingInfo(new Vector3(-vis, -vis, -vis), new Vector3(vis, vis, vis));\r\n    }\r\n\r\n    /**\r\n     * Gets whether the PCS is always visible or not\r\n     * doc :\r\n     */\r\n    public get isAlwaysVisible(): boolean {\r\n        return this._alwaysVisible;\r\n    }\r\n\r\n    /**\r\n     * Sets the PCS as always visible or not\r\n     * doc :\r\n     */\r\n    public set isAlwaysVisible(val: boolean) {\r\n        if (!this.mesh) {\r\n            return;\r\n        }\r\n\r\n        this._alwaysVisible = val;\r\n        this.mesh.alwaysSelectAsActiveMesh = val;\r\n    }\r\n\r\n    /**\r\n     * Tells to `setParticles()` to compute the particle rotations or not\r\n     * Default value : false. The PCS is faster when it's set to false\r\n     * Note : particle rotations are only applied to parent particles\r\n     * Note : the particle rotations aren't stored values, so setting `computeParticleRotation` to false will prevents the particle to rotate\r\n     */\r\n    public set computeParticleRotation(val: boolean) {\r\n        this._computeParticleRotation = val;\r\n    }\r\n\r\n    /**\r\n     * Tells to `setParticles()` to compute the particle colors or not.\r\n     * Default value : true. The PCS is faster when it's set to false.\r\n     * Note : the particle colors are stored values, so setting `computeParticleColor` to false will keep yet the last colors set.\r\n     */\r\n    public set computeParticleColor(val: boolean) {\r\n        this._computeParticleColor = val;\r\n    }\r\n\r\n    public set computeParticleTexture(val: boolean) {\r\n        this._computeParticleTexture = val;\r\n    }\r\n    /**\r\n     * Gets if `setParticles()` computes the particle colors or not.\r\n     * Default value : false. The PCS is faster when it's set to false.\r\n     * Note : the particle colors are stored values, so setting `computeParticleColor` to false will keep yet the last colors set.\r\n     */\r\n    public get computeParticleColor(): boolean {\r\n        return this._computeParticleColor;\r\n    }\r\n    /**\r\n     * Gets if `setParticles()` computes the particle textures or not.\r\n     * Default value : false. The PCS is faster when it's set to false.\r\n     * Note : the particle textures are stored values, so setting `computeParticleTexture` to false will keep yet the last colors set.\r\n     */\r\n    public get computeParticleTexture(): boolean {\r\n        return this._computeParticleTexture;\r\n    }\r\n    /**\r\n     * Tells to `setParticles()` to compute or not the mesh bounding box when computing the particle positions.\r\n     */\r\n    public set computeBoundingBox(val: boolean) {\r\n        this._computeBoundingBox = val;\r\n    }\r\n    /**\r\n     * Gets if `setParticles()` computes or not the mesh bounding box when computing the particle positions.\r\n     */\r\n    public get computeBoundingBox(): boolean {\r\n        return this._computeBoundingBox;\r\n    }\r\n\r\n    // =======================================================================\r\n    // Particle behavior logic\r\n    // these following methods may be overwritten by users to fit their needs\r\n\r\n    /**\r\n     * This function does nothing. It may be overwritten to set all the particle first values.\r\n     * The PCS doesn't call this function, you may have to call it by your own.\r\n     * doc :\r\n     */\r\n    public initParticles(): void {}\r\n\r\n    /**\r\n     * This function does nothing. It may be overwritten to recycle a particle\r\n     * The PCS doesn't call this function, you can to call it\r\n     * doc :\r\n     * @param particle The particle to recycle\r\n     * @returns the recycled particle\r\n     */\r\n    public recycleParticle(particle: CloudPoint): CloudPoint {\r\n        return particle;\r\n    }\r\n\r\n    /**\r\n     * Updates a particle : this function should  be overwritten by the user.\r\n     * It is called on each particle by `setParticles()`. This is the place to code each particle behavior.\r\n     * doc :\r\n     * @example : just set a particle position or velocity and recycle conditions\r\n     * @param particle The particle to update\r\n     * @returns the updated particle\r\n     */\r\n    public updateParticle(particle: CloudPoint): CloudPoint {\r\n        return particle;\r\n    }\r\n\r\n    /**\r\n     * This will be called before any other treatment by `setParticles()` and will be passed three parameters.\r\n     * This does nothing and may be overwritten by the user.\r\n     * @param start the particle index in the particle array where to start to iterate, same than the value passed to setParticle()\r\n     * @param stop the particle index in the particle array where to stop to iterate, same than the value passed to setParticle()\r\n     * @param update the boolean update value actually passed to setParticles()\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    public beforeUpdateParticles(start?: number, stop?: number, update?: boolean): void {}\r\n    /**\r\n     * This will be called  by `setParticles()` after all the other treatments and just before the actual mesh update.\r\n     * This will be passed three parameters.\r\n     * This does nothing and may be overwritten by the user.\r\n     * @param start the particle index in the particle array where to start to iterate, same than the value passed to setParticle()\r\n     * @param stop the particle index in the particle array where to stop to iterate, same than the value passed to setParticle()\r\n     * @param update the boolean update value actually passed to setParticles()\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    public afterUpdateParticles(start?: number, stop?: number, update?: boolean): void {}\r\n}\r\n"],"mappings":";;;;AACA,SAASA,MAAM,EAAEC,MAAM,QAAQ,kBAAgB;AAC/C,SAASC,OAAO,EAAEC,OAAO,EAAEC,OAAO,EAAEC,UAAU,EAAEC,MAAM,QAAQ,yBAAuB;AACrF,SAASC,MAAM,QAAQ,mBAAiB;AACxC,SAASC,YAAY,QAAQ,sBAAoB;AACjD,SAASC,UAAU,QAAQ,8BAA4B;AACvD,SAASC,IAAI,QAAQ,mBAAiB;AACtC,SAASC,WAAW,QAAQ,2BAAyB;AAErD,SAASC,UAAU,EAAEC,WAAW,QAAQ,iBAAe;AACvD,SAASC,GAAG,QAAQ,mBAAiB;AAErC,SAASC,gBAAgB,QAAQ,kCAAgC;AACjE,SAASC,WAAW,QAAQ,wCAAsC;AAClE,SAASC,MAAM,QAAQ,yBAAuB;AAG9C;AACA,WAAYC,UASX;AATD,WAAYA,UAAU;EAClB;EACAA,UAAA,CAAAA,UAAA,wBAAS;EACT;EACAA,UAAA,CAAAA,UAAA,kBAAM;EACN;EACAA,UAAA,CAAAA,UAAA,0BAAU;EACV;EACAA,UAAA,CAAAA,UAAA,0BAAU;AACd,CAAC,EATWA,UAAU,KAAVA,UAAU;AAWtB;;;;;;;;;AASA,OAAM,MAAOC,iBAAiB;EAsD1B;;;EAGA,IAAWC,SAASA,CAAA;IAChB,OAAO,IAAI,CAACC,YAAY;EAC5B;EAEA;;;EAGA,IAAWC,MAAMA,CAAA;IACb,OAAO,IAAI,CAACC,SAAS;EACzB;EAEA;;;EAGA,IAAWC,GAAGA,CAAA;IACV,OAAO,IAAI,CAACC,MAAM;EACtB;EAEA;;;;;;;;;EASAC,YAAYC,IAAY,EAAEC,SAAiB,EAAEC,KAAY,EAAEC,OAAiC;IAnF5F;;;;IAIO,KAAAC,SAAS,GAAiB,IAAIC,KAAK,EAAc;IACxD;;;IAGO,KAAAC,WAAW,GAAW,CAAC;IAC9B;;;IAGO,KAAAC,OAAO,GAAW,CAAC;IAS1B;;;;IAIO,KAAAC,IAAI,GAAQ,EAAE;IAOb,KAAAC,SAAS,GAAwB,EAAE;IACnC,KAAAC,UAAU,GAAa,IAAIL,KAAK,EAAU;IAC1C,KAAAM,QAAQ,GAAa,IAAIN,KAAK,EAAU;IACxC,KAAAO,QAAQ,GAAa,IAAIP,KAAK,EAAU;IACxC,KAAAQ,OAAO,GAAa,IAAIR,KAAK,EAAU;IACvC,KAAAS,IAAI,GAAa,IAAIT,KAAK,EAAU;IAKpC,KAAAU,UAAU,GAAY,IAAI;IAC1B,KAAAC,sBAAsB,GAAG,KAAK;IAC9B,KAAAC,cAAc,GAAY,KAAK;IAC/B,KAAAC,OAAO,GAAa,IAAIb,KAAK,EAAU,CAAC,CAAC;IACzC,KAAAc,aAAa,GAAW,CAAC;IACzB,KAAAC,qBAAqB,GAAY,IAAI;IACrC,KAAAC,uBAAuB,GAAY,IAAI;IACvC,KAAAC,wBAAwB,GAAY,IAAI;IACxC,KAAAC,mBAAmB,GAAY,KAAK;IACpC,KAAAC,QAAQ,GAAY,KAAK;IAiC7B,IAAI,CAACxB,IAAI,GAAGA,IAAI;IAChB,IAAI,CAACyB,KAAK,GAAGxB,SAAS;IACtB,IAAI,CAACyB,MAAM,GAAGxB,KAAK,IAAIlB,WAAW,CAAC2C,gBAAgB;IACnD,IAAIxB,OAAO,IAAIA,OAAO,CAACyB,SAAS,KAAKC,SAAS,EAAE;MAC5C,IAAI,CAACd,UAAU,GAAGZ,OAAO,CAACyB,SAAS;KACtC,MAAM;MACH,IAAI,CAACb,UAAU,GAAG,IAAI;;EAE9B;EAEA;;;;;;EAMOe,cAAcA,CAACC,QAAmB;IACrC,OAAOC,OAAO,CAACC,GAAG,CAAC,IAAI,CAACxB,SAAS,CAAC,CAACyB,IAAI,CAAC,MAAK;MACzC,IAAI,CAACV,QAAQ,GAAG,IAAI;MACpB,OAAO,IAAI,CAACW,UAAU,CAACJ,QAAQ,CAAC;IACpC,CAAC,CAAC;EACN;EAEA;;;EAGQI,UAAUA,CAACJ,QAAmB;IAClC,IAAI,IAAI,CAACzB,WAAW,KAAK,CAAC,EAAE;MACxB,IAAI,CAAC8B,SAAS,CAAC,CAAC,CAAC;;IAGrB,IAAI,CAAC1C,YAAY,GAAG,IAAI2C,YAAY,CAAC,IAAI,CAAC3B,UAAU,CAAC;IACrD,IAAI,CAACZ,MAAM,GAAG,IAAIuC,YAAY,CAAC,IAAI,CAACvB,IAAI,CAAC;IACzC,IAAI,CAAClB,SAAS,GAAG,IAAIyC,YAAY,CAAC,IAAI,CAACxB,OAAO,CAAC;IAE/C,MAAMyB,UAAU,GAAG,IAAIxD,UAAU,EAAE;IACnCwD,UAAU,CAACC,GAAG,CAAC,IAAI,CAAC7C,YAAY,EAAEb,YAAY,CAAC2D,YAAY,CAAC;IAE5D,IAAI,IAAI,CAAC1C,MAAM,CAAC2C,MAAM,GAAG,CAAC,EAAE;MACxBH,UAAU,CAACC,GAAG,CAAC,IAAI,CAACzC,MAAM,EAAEjB,YAAY,CAAC6D,MAAM,CAAC;;IAEpD,IAAIC,EAAE,GAAG,CAAC,CAAC,CAAC;IACZ,IAAI,IAAI,CAAC/C,SAAS,CAAC6C,MAAM,GAAG,CAAC,EAAE;MAC3BE,EAAE,GAAG,CAAC;MACNL,UAAU,CAACC,GAAG,CAAC,IAAI,CAAC3C,SAAS,EAAEf,YAAY,CAAC+D,SAAS,CAAC;;IAE1D,MAAMC,IAAI,GAAG,IAAI9D,IAAI,CAAC,IAAI,CAACiB,IAAI,EAAE,IAAI,CAAC0B,MAAM,CAAC;IAC7CY,UAAU,CAACQ,WAAW,CAACD,IAAI,EAAE,IAAI,CAAC9B,UAAU,CAAC;IAC7C,IAAI,CAAC8B,IAAI,GAAGA,IAAI;IAEhB;IACM,IAAI,CAACnC,UAAW,GAAG,IAAI;IACvB,IAAI,CAACI,IAAK,GAAG,IAAI;IACjB,IAAI,CAACD,OAAQ,GAAG,IAAI;IAE1B,IAAI,CAAC,IAAI,CAACE,UAAU,EAAE;MAClB,IAAI,CAACX,SAAS,CAACqC,MAAM,GAAG,CAAC;;IAG7B,IAAIM,GAAG,GAAGhB,QAAQ;IAElB,IAAI,CAACgB,GAAG,EAAE;MACNA,GAAG,GAAG,IAAI3D,gBAAgB,CAAC,sBAAsB,EAAE,IAAI,CAACsC,MAAM,CAAC;MAC5CqB,GAAI,CAACC,aAAa,GAAG,IAAI1E,MAAM,CAACqE,EAAE,EAAEA,EAAE,EAAEA,EAAE,CAAC;MAC3CI,GAAI,CAACE,eAAe,GAAG,IAAI;MAC3BF,GAAI,CAACG,WAAW,GAAG,IAAI;MACvBH,GAAI,CAAC9C,SAAS,GAAG,IAAI,CAACwB,KAAK;;IAElDoB,IAAI,CAACd,QAAQ,GAAGgB,GAAG;IAEnB,OAAO,IAAIf,OAAO,CAAEmB,OAAO,IAAKA,OAAO,CAACN,IAAI,CAAC,CAAC;EAClD;EAEA;EACQO,YAAYA,CAACC,GAAW,EAAEC,KAAkB,EAAEC,OAAe,EAAEC,UAAkB;IACrF,MAAMC,EAAE,GAAG,IAAIxE,UAAU,CAACoE,GAAG,EAAEC,KAAK,EAAEC,OAAO,EAAEC,UAAU,EAAE,IAAI,CAAC;IAChE,IAAI,CAACpD,SAAS,CAACsD,IAAI,CAACD,EAAE,CAAC;IACvB,OAAOA,EAAE;EACb;EAEQE,iBAAiBA,CAACC,QAAoB;IAC1CA,QAAQ,CAACC,QAAQ,GAAG,IAAIrF,OAAO,CAACsF,IAAI,CAACC,MAAM,EAAE,EAAED,IAAI,CAACC,MAAM,EAAE,EAAED,IAAI,CAACC,MAAM,EAAE,CAAC;IAC5EH,QAAQ,CAACI,KAAK,GAAG,IAAI3F,MAAM,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;EAC3C;EAEQ4F,wBAAwBA,CAACC,WAAwB,EAAEC,CAAS,EAAEC,CAAS,EAAEC,KAAa;IAC1F,MAAMC,SAAS,GAAeJ,WAAW,CAACK,eAAe;IACzD,MAAMP,KAAK,GAAGI,CAAC,IAAIC,KAAK,GAAG,CAAC,CAAC,GAAGF,CAAC,GAAG,CAAC;IACrC,MAAMK,YAAY,GAAG,CAACR,KAAK,EAAEA,KAAK,GAAG,CAAC,EAAEA,KAAK,GAAG,CAAC,EAAEA,KAAK,GAAG,CAAC,CAAC;IAC7D,MAAMS,QAAQ,GAAGD,YAAY,CAAC,CAAC,CAAC;IAChC,MAAME,UAAU,GAAGF,YAAY,CAAC,CAAC,CAAC;IAClC,MAAMG,SAAS,GAAGH,YAAY,CAAC,CAAC,CAAC;IACjC,MAAMI,UAAU,GAAGJ,YAAY,CAAC,CAAC,CAAC;IAClC,MAAMK,WAAW,GAAGP,SAAS,CAACG,QAAQ,CAAC;IACvC,MAAMK,aAAa,GAAGR,SAAS,CAACI,UAAU,CAAC;IAC3C,MAAMK,YAAY,GAAGT,SAAS,CAACK,SAAS,CAAC;IACzC,MAAMK,aAAa,GAAGV,SAAS,CAACM,UAAU,CAAC;IAC3C,OAAO,IAAIvG,MAAM,CAACwG,WAAW,GAAG,GAAG,EAAEC,aAAa,GAAG,GAAG,EAAEC,YAAY,GAAG,GAAG,EAAEC,aAAa,CAAC;EAChG;EAEQC,mBAAmBA,CACvBpC,IAAU,EACVqB,WAAwB,EACxBgB,QAAiB,EACjBC,gBAA0B,EAC1BC,UAAoB,EACpBpB,KAAc,EACdqB,KAAc,EACdC,UAAmB;IAEnBA,UAAU,GAAGA,UAAU,aAAVA,UAAU,cAAVA,UAAU,GAAI,CAAC;IAE5B,IAAIJ,QAAQ,EAAE;MACVrC,IAAI,CAAC0C,eAAe,EAAE;;IAG1B,MAAMC,SAAS,GAAG3C,IAAI,CAAC4C,eAAe,EAAE;IACxC,MAAMC,QAAQ,GAAG,CAAC,GAAGF,SAAS,CAACG,cAAc,CAACC,MAAM;IAEpD,IAAIC,OAAO,GAAehD,IAAI,CAACiD,eAAe,CAACjH,YAAY,CAAC2D,YAAY,CAAC;IACzE,MAAMuD,OAAO,GAAiBlD,IAAI,CAACmD,UAAU,EAAE;IAC/C,MAAMC,MAAM,GAAepD,IAAI,CAACiD,eAAe,CAACjH,YAAY,CAAC6D,MAAM,IAAI4C,UAAU,GAAGA,UAAU,GAAG,CAAC,GAAG,EAAE,CAAC,CAAC;IACzG,MAAMY,OAAO,GAAerD,IAAI,CAACiD,eAAe,CAACjH,YAAY,CAAC+D,SAAS,CAAC;IAExE,MAAMuD,KAAK,GAAG3H,OAAO,CAAC4H,IAAI,EAAE;IAC5BvD,IAAI,CAACwD,kBAAkB,EAAE;IACzB,MAAMC,UAAU,GAAWzD,IAAI,CAAC0D,cAAc,EAAE;IAChD,IAAI,CAACD,UAAU,CAACE,UAAU,EAAE,EAAE;MAC1BX,OAAO,GAAGA,OAAO,CAACY,KAAK,CAAC,CAAC,CAAC;MAC1B,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGb,OAAO,CAACpD,MAAM,GAAG,CAAC,EAAEiE,CAAC,EAAE,EAAE;QACzClI,OAAO,CAACmI,mCAAmC,CAACd,OAAO,CAAC,CAAC,GAAGa,CAAC,CAAC,EAAEb,OAAO,CAAC,CAAC,GAAGa,CAAC,GAAG,CAAC,CAAC,EAAEb,OAAO,CAAC,CAAC,GAAGa,CAAC,GAAG,CAAC,CAAC,EAAEJ,UAAU,EAAEH,KAAK,CAAC;QACtHN,OAAO,CAAC,CAAC,GAAGa,CAAC,CAAC,GAAGP,KAAK,CAAChC,CAAC;QACxB0B,OAAO,CAAC,CAAC,GAAGa,CAAC,GAAG,CAAC,CAAC,GAAGP,KAAK,CAAC/B,CAAC;QAC5ByB,OAAO,CAAC,CAAC,GAAGa,CAAC,GAAG,CAAC,CAAC,GAAGP,KAAK,CAACS,CAAC;;;IAIpC,IAAIC,SAAS,GAAW,CAAC;IAEzB,IAAIC,GAAG,GAAW,CAAC;IACnB,IAAIC,GAAG,GAAW,CAAC;IACnB,IAAIC,GAAG,GAAW,CAAC;IACnB,IAAIC,GAAG,GAAW,CAAC;IACnB,IAAIC,GAAG,GAAW,CAAC;IACnB,IAAIC,GAAG,GAAW,CAAC;IACnB,IAAIC,GAAG,GAAW,CAAC;IACnB,IAAIC,GAAG,GAAW,CAAC;IACnB,IAAIC,GAAG,GAAW,CAAC;IACnB,IAAIC,GAAG,GAAW,CAAC;IACnB,IAAIC,GAAG,GAAW,CAAC;IACnB,IAAIC,GAAG,GAAW,CAAC;IACnB,MAAMC,OAAO,GAAGlJ,OAAO,CAAC4H,IAAI,EAAE;IAC9B,MAAMuB,OAAO,GAAGnJ,OAAO,CAAC4H,IAAI,EAAE;IAC9B,MAAMwB,OAAO,GAAGpJ,OAAO,CAAC4H,IAAI,EAAE;IAC9B,MAAMyB,IAAI,GAAGrJ,OAAO,CAAC4H,IAAI,EAAE;IAC3B,MAAM0B,IAAI,GAAGtJ,OAAO,CAAC4H,IAAI,EAAE;IAE3B,IAAI2B,IAAI,GAAW,CAAC;IACpB,IAAIC,IAAI,GAAW,CAAC;IACpB,IAAIC,IAAI,GAAW,CAAC;IACpB,IAAIC,IAAI,GAAW,CAAC;IACpB,IAAIC,IAAI,GAAW,CAAC;IACpB,IAAIC,IAAI,GAAW,CAAC;IACpB,MAAMC,GAAG,GAAG9J,OAAO,CAAC6H,IAAI,EAAE;IAC1B,MAAMkC,GAAG,GAAG/J,OAAO,CAAC6H,IAAI,EAAE;IAC1B,MAAMmC,GAAG,GAAGhK,OAAO,CAAC6H,IAAI,EAAE;IAC1B,MAAMoC,KAAK,GAAGjK,OAAO,CAAC6H,IAAI,EAAE;IAC5B,MAAMqC,KAAK,GAAGlK,OAAO,CAAC6H,IAAI,EAAE;IAE5B,IAAIsC,KAAK,GAAW,CAAC;IACrB,IAAIC,KAAK,GAAW,CAAC;IACrB,IAAIC,KAAK,GAAW,CAAC;IACrB,IAAIC,KAAK,GAAW,CAAC;IACrB,IAAIC,KAAK,GAAW,CAAC;IACrB,IAAIC,KAAK,GAAW,CAAC;IACrB,IAAIC,KAAK,GAAW,CAAC;IACrB,IAAIC,KAAK,GAAW,CAAC;IACrB,IAAIC,KAAK,GAAW,CAAC;IACrB,IAAIC,KAAK,GAAW,CAAC;IACrB,IAAIC,KAAK,GAAW,CAAC;IACrB,IAAIC,KAAK,GAAW,CAAC;IACrB,MAAMC,IAAI,GAAG7K,OAAO,CAAC2H,IAAI,EAAE;IAC3B,MAAMmD,IAAI,GAAG9K,OAAO,CAAC2H,IAAI,EAAE;IAC3B,MAAMoD,IAAI,GAAG/K,OAAO,CAAC2H,IAAI,EAAE;IAC3B,MAAMqD,OAAO,GAAGhL,OAAO,CAAC2H,IAAI,EAAE;IAC9B,MAAMsD,OAAO,GAAGjL,OAAO,CAAC2H,IAAI,EAAE;IAE9B,IAAIuD,KAAK,GAAW,CAAC;IACrB,IAAIC,EAAE,GAAW,CAAC;IAClBvE,KAAK,GAAGA,KAAK,GAAGA,KAAK,GAAG,CAAC;IAEzB,IAAIwE,UAAmB;IACvB,IAAIC,OAAgB;IACpB,IAAIC,QAAQ,GAAY,IAAItL,OAAO,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;IAE/C,IAAIuL,IAAI,GAAGxL,OAAO,CAAC4H,IAAI,EAAE;IACzB,IAAI6D,IAAI,GAAGzL,OAAO,CAAC4H,IAAI,EAAE;IACzB,IAAI8D,MAAM,GAAG1L,OAAO,CAAC4H,IAAI,EAAE;IAC3B,IAAI+D,KAAK,GAAG,CAAC;IACb,IAAIC,aAAa,GAAG5L,OAAO,CAAC4H,IAAI,EAAE;IAElC,IAAIiE,GAAG,GAAG,CAAC;IACX,IAAIC,QAAQ,GAAG,CAAC;IAChB,MAAMC,GAAG,GAAG,IAAIpL,GAAG,CAACX,OAAO,CAAC4H,IAAI,EAAE,EAAE,IAAI5H,OAAO,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;IACzD,IAAIgM,QAAqB;IACzB,IAAIC,SAAS,GAAGjM,OAAO,CAAC4H,IAAI,EAAE;IAE9B,KAAK,IAAIsE,KAAK,GAAG,CAAC,EAAEA,KAAK,GAAG3E,OAAO,CAACtD,MAAM,GAAG,CAAC,EAAEiI,KAAK,EAAE,EAAE;MACrD5D,GAAG,GAAGf,OAAO,CAAC,CAAC,GAAG2E,KAAK,CAAC;MACxB3D,GAAG,GAAGhB,OAAO,CAAC,CAAC,GAAG2E,KAAK,GAAG,CAAC,CAAC;MAC5B1D,GAAG,GAAGjB,OAAO,CAAC,CAAC,GAAG2E,KAAK,GAAG,CAAC,CAAC;MAC5BzD,GAAG,GAAGpB,OAAO,CAAC,CAAC,GAAGiB,GAAG,CAAC;MACtBI,GAAG,GAAGrB,OAAO,CAAC,CAAC,GAAGiB,GAAG,GAAG,CAAC,CAAC;MAC1BK,GAAG,GAAGtB,OAAO,CAAC,CAAC,GAAGiB,GAAG,GAAG,CAAC,CAAC;MAC1BM,GAAG,GAAGvB,OAAO,CAAC,CAAC,GAAGkB,GAAG,CAAC;MACtBM,GAAG,GAAGxB,OAAO,CAAC,CAAC,GAAGkB,GAAG,GAAG,CAAC,CAAC;MAC1BO,GAAG,GAAGzB,OAAO,CAAC,CAAC,GAAGkB,GAAG,GAAG,CAAC,CAAC;MAC1BQ,GAAG,GAAG1B,OAAO,CAAC,CAAC,GAAGmB,GAAG,CAAC;MACtBQ,GAAG,GAAG3B,OAAO,CAAC,CAAC,GAAGmB,GAAG,GAAG,CAAC,CAAC;MAC1BS,GAAG,GAAG5B,OAAO,CAAC,CAAC,GAAGmB,GAAG,GAAG,CAAC,CAAC;MAC1BU,OAAO,CAACnF,GAAG,CAAC0E,GAAG,EAAEC,GAAG,EAAEC,GAAG,CAAC;MAC1BQ,OAAO,CAACpF,GAAG,CAAC6E,GAAG,EAAEC,GAAG,EAAEC,GAAG,CAAC;MAC1BM,OAAO,CAACrF,GAAG,CAACgF,GAAG,EAAEC,GAAG,EAAEC,GAAG,CAAC;MAC1BE,OAAO,CAACgD,aAAa,CAACjD,OAAO,EAAEG,IAAI,CAAC;MACpCD,OAAO,CAAC+C,aAAa,CAAChD,OAAO,EAAEG,IAAI,CAAC;MAEpC,IAAI7B,MAAM,EAAE;QACR8B,IAAI,GAAG9B,MAAM,CAAC,CAAC,GAAGa,GAAG,CAAC;QACtBkB,IAAI,GAAG/B,MAAM,CAAC,CAAC,GAAGa,GAAG,GAAG,CAAC,CAAC;QAC1BmB,IAAI,GAAGhC,MAAM,CAAC,CAAC,GAAGc,GAAG,CAAC;QACtBmB,IAAI,GAAGjC,MAAM,CAAC,CAAC,GAAGc,GAAG,GAAG,CAAC,CAAC;QAC1BoB,IAAI,GAAGlC,MAAM,CAAC,CAAC,GAAGe,GAAG,CAAC;QACtBoB,IAAI,GAAGnC,MAAM,CAAC,CAAC,GAAGe,GAAG,GAAG,CAAC,CAAC;QAC1BqB,GAAG,CAAC9F,GAAG,CAACwF,IAAI,EAAEC,IAAI,CAAC;QACnBM,GAAG,CAAC/F,GAAG,CAAC0F,IAAI,EAAEC,IAAI,CAAC;QACnBK,GAAG,CAAChG,GAAG,CAAC4F,IAAI,EAAEC,IAAI,CAAC;QACnBE,GAAG,CAACqC,aAAa,CAACtC,GAAG,EAAEG,KAAK,CAAC;QAC7BD,GAAG,CAACoC,aAAa,CAACrC,GAAG,EAAEG,KAAK,CAAC;;MAGjC,IAAIvC,OAAO,IAAIf,gBAAgB,EAAE;QAC7BuD,KAAK,GAAGxC,OAAO,CAAC,CAAC,GAAGY,GAAG,CAAC;QACxB6B,KAAK,GAAGzC,OAAO,CAAC,CAAC,GAAGY,GAAG,GAAG,CAAC,CAAC;QAC5B8B,KAAK,GAAG1C,OAAO,CAAC,CAAC,GAAGY,GAAG,GAAG,CAAC,CAAC;QAC5B+B,KAAK,GAAG3C,OAAO,CAAC,CAAC,GAAGY,GAAG,GAAG,CAAC,CAAC;QAC5BgC,KAAK,GAAG5C,OAAO,CAAC,CAAC,GAAGa,GAAG,CAAC;QACxBgC,KAAK,GAAG7C,OAAO,CAAC,CAAC,GAAGa,GAAG,GAAG,CAAC,CAAC;QAC5BiC,KAAK,GAAG9C,OAAO,CAAC,CAAC,GAAGa,GAAG,GAAG,CAAC,CAAC;QAC5BkC,KAAK,GAAG/C,OAAO,CAAC,CAAC,GAAGa,GAAG,GAAG,CAAC,CAAC;QAC5BmC,KAAK,GAAGhD,OAAO,CAAC,CAAC,GAAGc,GAAG,CAAC;QACxBmC,KAAK,GAAGjD,OAAO,CAAC,CAAC,GAAGc,GAAG,GAAG,CAAC,CAAC;QAC5BoC,KAAK,GAAGlD,OAAO,CAAC,CAAC,GAAGc,GAAG,GAAG,CAAC,CAAC;QAC5BqC,KAAK,GAAGnD,OAAO,CAAC,CAAC,GAAGc,GAAG,GAAG,CAAC,CAAC;QAC5BsC,IAAI,CAAC/G,GAAG,CAACmG,KAAK,EAAEC,KAAK,EAAEC,KAAK,EAAEC,KAAK,CAAC;QACpCU,IAAI,CAAChH,GAAG,CAACuG,KAAK,EAAEC,KAAK,EAAEC,KAAK,EAAEC,KAAK,CAAC;QACpCO,IAAI,CAACjH,GAAG,CAAC2G,KAAK,EAAEC,KAAK,EAAEC,KAAK,EAAEC,KAAK,CAAC;QACpCE,IAAI,CAACoB,aAAa,CAACrB,IAAI,EAAEG,OAAO,CAAC;QACjCD,IAAI,CAACmB,aAAa,CAACpB,IAAI,EAAEG,OAAO,CAAC;;MAGrC,IAAIrF,KAAa;MACjB,IAAIuG,MAAc;MAClB,IAAIC,MAAc;MAClB,IAAIC,MAAc;MAClB,IAAIC,CAAS;MACb,IAAIC,CAAS;MACb,IAAIC,CAAS;MACb,IAAIC,MAAc;MAClB,MAAMC,WAAW,GAAW,IAAI7M,MAAM,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;MAC/C,MAAM8M,SAAS,GAAW,IAAI9M,MAAM,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;MAC7C,IAAI+M,WAAmB;MACvB,IAAIzH,QAAoB;MAExB,KAAK,IAAI0H,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGpH,WAAW,CAACqH,aAAa,CAACb,KAAK,CAAC,EAAEY,CAAC,EAAE,EAAE;QACvDzE,SAAS,GAAG,IAAI,CAACzG,SAAS,CAACqC,MAAM;QACjC,IAAI,CAACW,YAAY,CAACyD,SAAS,EAAE3C,WAAW,EAAE,IAAI,CAAC/C,aAAa,EAAEuJ,KAAK,GAAGY,CAAC,CAAC;QACxE1H,QAAQ,GAAG,IAAI,CAACxD,SAAS,CAACyG,SAAS,CAAC;QACpC;QACA8C,KAAK,GAAGrK,MAAM,CAACkM,WAAW,CAAC,CAAC,EAAE,CAAC,CAAC;QAChC5B,EAAE,GAAGtK,MAAM,CAACkM,WAAW,CAAC,CAAC,EAAE,CAAC,CAAC;QAC7B3B,UAAU,GAAGnC,OAAO,CAAC+D,GAAG,CAAC5D,IAAI,CAAC6D,KAAK,CAAC/B,KAAK,CAAC,CAAC,CAAC8B,GAAG,CAAC3D,IAAI,CAAC4D,KAAK,CAAC/B,KAAK,GAAGC,EAAE,CAAC,CAAC;QACvE,IAAI1E,QAAQ,EAAE;UACV8E,IAAI,GAAGnH,IAAI,CAAC8I,cAAc,CAACjB,KAAK,CAAC,CAACkB,SAAS,EAAE,CAACF,KAAK,CAAC,CAAC,CAAC,CAAC;UACvDzB,IAAI,GAAGpC,IAAI,CAACgE,KAAK,EAAE,CAACD,SAAS,EAAE;UAC/B1B,MAAM,GAAG1L,OAAO,CAACsN,KAAK,CAAC9B,IAAI,EAAEC,IAAI,CAAC;UAClCE,KAAK,GAAG7K,MAAM,CAACkM,WAAW,CAAC,CAAC,EAAE,CAAC,GAAG1H,IAAI,CAACiI,EAAE,CAAC;UAC1C3B,aAAa,GAAGH,IAAI,CAACyB,KAAK,CAAC5H,IAAI,CAACkI,GAAG,CAAC7B,KAAK,CAAC,CAAC,CAACsB,GAAG,CAACvB,MAAM,CAACwB,KAAK,CAAC5H,IAAI,CAACmI,GAAG,CAAC9B,KAAK,CAAC,CAAC,CAAC;UAC9EA,KAAK,GAAG7K,MAAM,CAACkM,WAAW,CAAC,GAAG,EAAE1H,IAAI,CAACiI,EAAE,GAAG,CAAC,CAAC;UAC5CtB,SAAS,GAAGL,aAAa,CAACsB,KAAK,CAAC5H,IAAI,CAACkI,GAAG,CAAC7B,KAAK,CAAC,CAAC,CAACsB,GAAG,CAACzB,IAAI,CAAC0B,KAAK,CAAC5H,IAAI,CAACmI,GAAG,CAAC9B,KAAK,CAAC,CAAC,CAAC;UAEjFI,GAAG,CAAC2B,MAAM,GAAGrC,UAAU,CAAC4B,GAAG,CAAChB,SAAS,CAACiB,KAAK,CAAC,OAAO,CAAC,CAAC;UACrDnB,GAAG,CAACE,SAAS,GAAGA,SAAS;UACzBF,GAAG,CAAC9H,MAAM,GAAGiD,QAAQ;UACrB8E,QAAQ,GAAGD,GAAG,CAAC4B,cAAc,CAACtJ,IAAI,CAAC;UACnC,IAAI2H,QAAQ,CAAC4B,GAAG,EAAE;YACd9B,QAAQ,GAAGE,QAAQ,CAAC6B,WAAY,CAACC,QAAQ,CAACzC,UAAU,CAAC,CAACpH,MAAM,EAAE;YAC9D4H,GAAG,GAAG/K,MAAM,CAACkM,WAAW,CAAC,CAAC,EAAE,CAAC,CAAC,GAAGlB,QAAQ;YACzCT,UAAU,CAAC0C,UAAU,CAAC9B,SAAS,CAACiB,KAAK,CAACrB,GAAG,CAAC,CAAC;;;QAGnDzG,QAAQ,CAACC,QAAQ,GAAGgG,UAAU,CAACgC,KAAK,EAAE;QACtC,IAAI,CAACnL,UAAU,CAACgD,IAAI,CAACE,QAAQ,CAACC,QAAQ,CAACM,CAAC,EAAEP,QAAQ,CAACC,QAAQ,CAACO,CAAC,EAAER,QAAQ,CAACC,QAAQ,CAAC+C,CAAC,CAAC;QACnF,IAAIzB,gBAAgB,KAAKtD,SAAS,EAAE;UAChC,IAAIoE,MAAM,EAAE;YACR6D,OAAO,GAAGzB,GAAG,CAACoD,GAAG,CAACjD,KAAK,CAACkD,KAAK,CAAC/B,KAAK,CAAC,CAAC,CAAC8B,GAAG,CAAChD,KAAK,CAACiD,KAAK,CAAC/B,KAAK,GAAGC,EAAE,CAAC,CAAC;YAClE,IAAIzE,gBAAgB,EAAE;cAClB;cACA,IAAIC,UAAU,IAAIlB,WAAW,CAACK,eAAe,KAAK,IAAI,EAAE;gBACpDF,KAAK,GAAGH,WAAW,CAACsI,cAAc;gBAClC5B,MAAM,GAAG1G,WAAW,CAACuI,eAAe;gBACpCpB,WAAW,GAAG,IAAI,CAACpH,wBAAwB,CAACC,WAAW,EAAEJ,IAAI,CAAC4I,KAAK,CAAC5C,OAAO,CAAC3F,CAAC,GAAGE,KAAK,CAAC,EAAEP,IAAI,CAAC4I,KAAK,CAAC5C,OAAO,CAAC1F,CAAC,GAAGwG,MAAM,CAAC,EAAEvG,KAAK,CAAC;gBAC9HT,QAAQ,CAACI,KAAK,GAAGqH,WAAW;gBAC5B,IAAI,CAACxK,OAAO,CAAC6C,IAAI,CAAC2H,WAAW,CAACsB,CAAC,EAAEtB,WAAW,CAACuB,CAAC,EAAEvB,WAAW,CAACwB,CAAC,EAAExB,WAAW,CAACyB,CAAC,CAAC;eAChF,MAAM;gBACH,IAAI5G,OAAO,EAAE;kBACT;kBACA6D,QAAQ,GAAGT,IAAI,CAACmC,GAAG,CAAChC,OAAO,CAACiC,KAAK,CAAC/B,KAAK,CAAC,CAAC,CAAC8B,GAAG,CAAC/B,OAAO,CAACgC,KAAK,CAAC/B,KAAK,GAAGC,EAAE,CAAC,CAAC;kBACxEhG,QAAQ,CAACI,KAAK,GAAG,IAAI3F,MAAM,CAAC0L,QAAQ,CAAC5F,CAAC,EAAE4F,QAAQ,CAAC3F,CAAC,EAAE2F,QAAQ,CAACnD,CAAC,EAAEmD,QAAQ,CAACgD,CAAC,CAAC;kBAC3E,IAAI,CAAClM,OAAO,CAAC6C,IAAI,CAACqG,QAAQ,CAAC5F,CAAC,EAAE4F,QAAQ,CAAC3F,CAAC,EAAE2F,QAAQ,CAACnD,CAAC,EAAEmD,QAAQ,CAACgD,CAAC,CAAC;iBACpE,MAAM;kBACHhD,QAAQ,GAAGT,IAAI,CAAC/G,GAAG,CAACuB,IAAI,CAACC,MAAM,EAAE,EAAED,IAAI,CAACC,MAAM,EAAE,EAAED,IAAI,CAACC,MAAM,EAAE,EAAE,CAAC,CAAC;kBACnEH,QAAQ,CAACI,KAAK,GAAG,IAAI3F,MAAM,CAAC0L,QAAQ,CAAC5F,CAAC,EAAE4F,QAAQ,CAAC3F,CAAC,EAAE2F,QAAQ,CAACnD,CAAC,EAAEmD,QAAQ,CAACgD,CAAC,CAAC;kBAC3E,IAAI,CAAClM,OAAO,CAAC6C,IAAI,CAACqG,QAAQ,CAAC5F,CAAC,EAAE4F,QAAQ,CAAC3F,CAAC,EAAE2F,QAAQ,CAACnD,CAAC,EAAEmD,QAAQ,CAACgD,CAAC,CAAC;;;aAG5E,MAAM;cACH;cACAnJ,QAAQ,CAACoJ,EAAE,GAAGlD,OAAO,CAAC+B,KAAK,EAAE;cAC7B,IAAI,CAAC/K,IAAI,CAAC4C,IAAI,CAACE,QAAQ,CAACoJ,EAAE,CAAC7I,CAAC,EAAEP,QAAQ,CAACoJ,EAAE,CAAC5I,CAAC,CAAC;;;SAGvD,MAAM;UACH,IAAIJ,KAAK,EAAE;YACPmH,WAAW,CAAC5I,GAAG,CAACyB,KAAK,CAAC2I,CAAC,EAAE3I,KAAK,CAAC4I,CAAC,EAAE5I,KAAK,CAAC6I,CAAC,CAAC;YAC1ChC,MAAM,GAAGvL,MAAM,CAACkM,WAAW,CAAC,CAACnG,KAAK,EAAEA,KAAK,CAAC;YAC1CyF,MAAM,GAAGxL,MAAM,CAACkM,WAAW,CAAC,CAACnG,KAAK,EAAEA,KAAK,CAAC;YAC1C6F,MAAM,GAAGC,WAAW,CAAC8B,KAAK,EAAE;YAC5BlC,CAAC,GAAGG,MAAM,CAACyB,CAAC;YACZ3B,CAAC,GAAGE,MAAM,CAAC0B,CAAC,GAAG/B,MAAM;YACrBI,CAAC,GAAGC,MAAM,CAAC2B,CAAC,GAAG/B,MAAM;YACrB,IAAIE,CAAC,GAAG,CAAC,EAAE;cACPA,CAAC,GAAG,CAAC;;YAET,IAAIA,CAAC,GAAG,CAAC,EAAE;cACPA,CAAC,GAAG,CAAC;;YAET,IAAIC,CAAC,GAAG,CAAC,EAAE;cACPA,CAAC,GAAG,CAAC;;YAET,IAAIA,CAAC,GAAG,CAAC,EAAE;cACPA,CAAC,GAAG,CAAC;;YAET3M,MAAM,CAAC4O,aAAa,CAACnC,CAAC,EAAEC,CAAC,EAAEC,CAAC,EAAEG,SAAS,CAAC;YACxCrB,QAAQ,CAACxH,GAAG,CAAC6I,SAAS,CAACuB,CAAC,EAAEvB,SAAS,CAACwB,CAAC,EAAExB,SAAS,CAACyB,CAAC,EAAE,CAAC,CAAC;WACzD,MAAM;YACH9C,QAAQ,GAAGT,IAAI,CAAC/G,GAAG,CAACuB,IAAI,CAACC,MAAM,EAAE,EAAED,IAAI,CAACC,MAAM,EAAE,EAAED,IAAI,CAACC,MAAM,EAAE,EAAE,CAAC,CAAC;;UAEvEH,QAAQ,CAACI,KAAK,GAAG,IAAI3F,MAAM,CAAC0L,QAAQ,CAAC5F,CAAC,EAAE4F,QAAQ,CAAC3F,CAAC,EAAE2F,QAAQ,CAACnD,CAAC,EAAEmD,QAAQ,CAACgD,CAAC,CAAC;UAC3E,IAAI,CAAClM,OAAO,CAAC6C,IAAI,CAACqG,QAAQ,CAAC5F,CAAC,EAAE4F,QAAQ,CAAC3F,CAAC,EAAE2F,QAAQ,CAACnD,CAAC,EAAEmD,QAAQ,CAACgD,CAAC,CAAC;;;;EAIjF;EAEA;EACA;EACQI,iBAAiBA,CAACtK,IAAU,EAAEqB,WAAwB,EAAEgB,QAAiB;IAC7E,IAAIrC,IAAI,CAACd,QAAQ,KAAK,IAAI,EAAE;MACxBnD,MAAM,CAACwO,IAAI,CAACvK,IAAI,CAAC7C,IAAI,GAAG,kBAAkB,CAAC;MAC3CkE,WAAW,CAACK,eAAe,GAAG,IAAI;MAClC,IAAI,CAACU,mBAAmB,CAACpC,IAAI,EAAEqB,WAAW,EAAEgB,QAAQ,EAAE,IAAI,EAAE,KAAK,CAAC;MAClE;;IAGJ,MAAMnC,GAAG,GAAGF,IAAI,CAACd,QAAQ;IACzB,MAAMsL,WAAW,GAAkBtK,GAAG,CAACuK,iBAAiB,EAAE;IAC1D,IAAID,WAAW,CAAC5K,MAAM,KAAK,CAAC,EAAE;MAC1B7D,MAAM,CAACwO,IAAI,CAACvK,IAAI,CAAC7C,IAAI,GAAG,wBAAwB,CAAC;MACjDkE,WAAW,CAACK,eAAe,GAAG,IAAI;MAClC,IAAI,CAACU,mBAAmB,CAACpC,IAAI,EAAEqB,WAAW,EAAEgB,QAAQ,EAAE,IAAI,EAAE,KAAK,CAAC;MAClE;;IAGJ,MAAM2G,KAAK,GAAShJ,IAAI,CAACgJ,KAAK,EAAE;IAChCA,KAAK,CAAC0B,UAAU,CAAC,KAAK,CAAC;IACvB,IAAI,CAAC9M,SAAS,CAACiD,IAAI,CACf,IAAI1B,OAAO,CAAEmB,OAA0B,IAAI;MACvC9D,WAAW,CAACmO,YAAY,CAACH,WAAW,EAAE,MAAK;QACvC,IAAII,CAAC,GAAGvJ,WAAW,CAACwJ,UAAU;QAC9B,IAAID,CAAC,GAAG,CAAC,EAAE;UACPA,CAAC,GAAG,CAAC;;QAET,IAAIA,CAAC,GAAGJ,WAAW,CAAC5K,MAAM,GAAG,CAAC,EAAE;UAC5BgL,CAAC,GAAGJ,WAAW,CAAC5K,MAAM,GAAG,CAAC;;QAE9B,MAAMkL,QAAQ,GAAGA,CAAA,KAAK;UAClBzJ,WAAW,CAACsI,cAAc,GAAGa,WAAW,CAACI,CAAC,CAAC,CAACG,OAAO,EAAE,CAACvJ,KAAK;UAC3DH,WAAW,CAACuI,eAAe,GAAGY,WAAW,CAACI,CAAC,CAAC,CAACG,OAAO,EAAE,CAAChD,MAAM;UAC7D,IAAI,CAAC3F,mBAAmB,CAAC4G,KAAK,EAAE3H,WAAW,EAAEgB,QAAQ,EAAE,IAAI,EAAE,IAAI,EAAErD,SAAS,EAAEA,SAAS,EAAEwL,WAAW,CAACI,CAAC,CAAC,CAACI,gBAAgB,CAAC;UACzHhC,KAAK,CAACiC,OAAO,EAAE;UACf3K,OAAO,EAAE;QACb,CAAC;QACDe,WAAW,CAACK,eAAe,GAAG,IAAI;QAClC,MAAMwJ,WAAW,GAAGV,WAAW,CAACI,CAAC,CAAC,CAACO,UAAU,EAAE;QAC/C,IAAI,CAACD,WAAW,EAAE;UACdJ,QAAQ,EAAE;SACb,MAAM;UACHI,WAAW,CAAC7L,IAAI,CAAE+L,IAAI,IAAI;YACtB/J,WAAW,CAACK,eAAe,GAAG0J,IAAI;YAClCN,QAAQ,EAAE;UACd,CAAC,CAAC;;MAEV,CAAC,CAAC;IACN,CAAC,CAAC,CACL;EACL;EAEA;EACQO,iBAAiBA,CAACC,QAAgB,EAAE1O,SAAqB,EAAE2O,OAAqB;IACpF,IAAIC,OAAO,GAAa,IAAIhO,KAAK,EAAU;IAC3C,IAAIyG,GAAW;IACf,IAAIC,GAAW;IACf,IAAIC,GAAW;IACf,IAAIC,GAAW;IACf,IAAIC,GAAW;IACf,IAAIC,GAAW;IACf,IAAIC,GAAW;IACf,IAAIC,GAAW;IACf,IAAIC,GAAW;IACf,IAAIC,GAAW;IACf,IAAIC,GAAW;IACf,IAAIC,GAAW;IACf,MAAMC,OAAO,GAAGlJ,OAAO,CAAC4H,IAAI,EAAE;IAC9B,MAAMuB,OAAO,GAAGnJ,OAAO,CAAC4H,IAAI,EAAE;IAC9B,MAAMwB,OAAO,GAAGpJ,OAAO,CAAC4H,IAAI,EAAE;IAC9B,MAAMyB,IAAI,GAAGrJ,OAAO,CAAC4H,IAAI,EAAE;IAC3B,MAAM0B,IAAI,GAAGtJ,OAAO,CAAC4H,IAAI,EAAE;IAC3B,MAAMkI,IAAI,GAAG9P,OAAO,CAAC4H,IAAI,EAAE;IAE3B,IAAI0G,CAAS,CAAC,CAAC;IACf,IAAID,CAAS,CAAC,CAAC;IACf,IAAI0B,CAAS,CAAC,CAAC;IACf,IAAI7H,CAAS,CAAC,CAAC;IACf,IAAI8H,IAAY;IAChB,MAAMC,KAAK,GAAa,IAAIpO,KAAK,EAAU;IAC3C,IAAIqO,WAAW,GAAW,CAAC;IAE3B,MAAMC,QAAQ,GAAGP,OAAO,CAAC3L,MAAM,GAAG,CAAC;IAEnC;IACA,KAAK,IAAIiI,KAAK,GAAG,CAAC,EAAEA,KAAK,GAAGiE,QAAQ,EAAEjE,KAAK,EAAE,EAAE;MAC3C5D,GAAG,GAAGsH,OAAO,CAAC,CAAC,GAAG1D,KAAK,CAAC;MACxB3D,GAAG,GAAGqH,OAAO,CAAC,CAAC,GAAG1D,KAAK,GAAG,CAAC,CAAC;MAC5B1D,GAAG,GAAGoH,OAAO,CAAC,CAAC,GAAG1D,KAAK,GAAG,CAAC,CAAC;MAC5BzD,GAAG,GAAGxH,SAAS,CAAC,CAAC,GAAGqH,GAAG,CAAC;MACxBI,GAAG,GAAGzH,SAAS,CAAC,CAAC,GAAGqH,GAAG,GAAG,CAAC,CAAC;MAC5BK,GAAG,GAAG1H,SAAS,CAAC,CAAC,GAAGqH,GAAG,GAAG,CAAC,CAAC;MAC5BM,GAAG,GAAG3H,SAAS,CAAC,CAAC,GAAGsH,GAAG,CAAC;MACxBM,GAAG,GAAG5H,SAAS,CAAC,CAAC,GAAGsH,GAAG,GAAG,CAAC,CAAC;MAC5BO,GAAG,GAAG7H,SAAS,CAAC,CAAC,GAAGsH,GAAG,GAAG,CAAC,CAAC;MAC5BQ,GAAG,GAAG9H,SAAS,CAAC,CAAC,GAAGuH,GAAG,CAAC;MACxBQ,GAAG,GAAG/H,SAAS,CAAC,CAAC,GAAGuH,GAAG,GAAG,CAAC,CAAC;MAC5BS,GAAG,GAAGhI,SAAS,CAAC,CAAC,GAAGuH,GAAG,GAAG,CAAC,CAAC;MAC5BU,OAAO,CAACnF,GAAG,CAAC0E,GAAG,EAAEC,GAAG,EAAEC,GAAG,CAAC;MAC1BQ,OAAO,CAACpF,GAAG,CAAC6E,GAAG,EAAEC,GAAG,EAAEC,GAAG,CAAC;MAC1BM,OAAO,CAACrF,GAAG,CAACgF,GAAG,EAAEC,GAAG,EAAEC,GAAG,CAAC;MAC1BE,OAAO,CAACgD,aAAa,CAACjD,OAAO,EAAEG,IAAI,CAAC;MACpCD,OAAO,CAAC+C,aAAa,CAAChD,OAAO,EAAEG,IAAI,CAAC;MACpCF,OAAO,CAAC+C,aAAa,CAACjD,OAAO,EAAE4G,IAAI,CAAC;MACpCxB,CAAC,GAAGjF,IAAI,CAACpF,MAAM,EAAE;MACjBoK,CAAC,GAAG/E,IAAI,CAACrF,MAAM,EAAE;MACjB8L,CAAC,GAAGD,IAAI,CAAC7L,MAAM,EAAE;MACjBiE,CAAC,GAAG,CAACoG,CAAC,GAAGD,CAAC,GAAG0B,CAAC,IAAI,CAAC;MACnBC,IAAI,GAAG1K,IAAI,CAAC8K,IAAI,CAAClI,CAAC,IAAIA,CAAC,GAAGoG,CAAC,CAAC,IAAIpG,CAAC,GAAGmG,CAAC,CAAC,IAAInG,CAAC,GAAG6H,CAAC,CAAC,CAAC;MACjDG,WAAW,IAAIF,IAAI;MACnBC,KAAK,CAAC/D,KAAK,CAAC,GAAG8D,IAAI;;IAEvB,IAAIK,UAAU,GAAW,CAAC;IAC1B,KAAK,IAAInE,KAAK,GAAG,CAAC,EAAEA,KAAK,GAAGiE,QAAQ,EAAEjE,KAAK,EAAE,EAAE;MAC3C2D,OAAO,CAAC3D,KAAK,CAAC,GAAG5G,IAAI,CAACgL,KAAK,CAAEX,QAAQ,GAAGM,KAAK,CAAC/D,KAAK,CAAC,GAAIgE,WAAW,CAAC;MACpEG,UAAU,IAAIR,OAAO,CAAC3D,KAAK,CAAC;;IAGhC,MAAMqE,IAAI,GAAWZ,QAAQ,GAAGU,UAAU;IAC1C,MAAMG,cAAc,GAAWlL,IAAI,CAACgL,KAAK,CAACC,IAAI,GAAGJ,QAAQ,CAAC;IAC1D,MAAMM,WAAW,GAAWF,IAAI,GAAGJ,QAAQ;IAE3C,IAAIK,cAAc,GAAG,CAAC,EAAE;MACpBX,OAAO,GAAGA,OAAO,CAACa,GAAG,CAAE/K,CAAC,IAAKA,CAAC,GAAG6K,cAAc,CAAC;;IAGpD,KAAK,IAAItE,KAAK,GAAG,CAAC,EAAEA,KAAK,GAAGuE,WAAW,EAAEvE,KAAK,EAAE,EAAE;MAC9C2D,OAAO,CAAC3D,KAAK,CAAC,IAAI,CAAC;;IAGvB,OAAO2D,OAAO;EAClB;EAEA;;;;;;EAMOjM,SAASA,CAAC+M,EAAU,EAAEC,aAAA,GAAqB,IAAI,CAACzL,iBAAiB;IACpE,MAAMO,WAAW,GAAG,IAAIhF,WAAW,CAAC,IAAI,CAACiC,aAAa,EAAEiO,aAAa,CAAC;IACtE,IAAI3L,EAAc;IAElB;IACA,IAAIJ,GAAG,GAAG,IAAI,CAAC/C,WAAW;IAC1B,KAAK,IAAIgL,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG6D,EAAE,EAAE7D,CAAC,EAAE,EAAE;MACzB7H,EAAE,GAAG,IAAI,CAACL,YAAY,CAACC,GAAG,EAAEa,WAAW,EAAE,IAAI,CAAC/C,aAAa,EAAEmK,CAAC,CAAC;MAC/D,IAAIpH,WAAW,IAAIA,WAAW,CAACmL,iBAAiB,EAAE;QAC9CnL,WAAW,CAACmL,iBAAiB,CAAC5L,EAAE,EAAEJ,GAAG,EAAEiI,CAAC,CAAC;;MAE7C,IAAI,CAAC5K,UAAU,CAACgD,IAAI,CAACD,EAAE,CAACI,QAAQ,CAACM,CAAC,EAAEV,EAAE,CAACI,QAAQ,CAACO,CAAC,EAAEX,EAAE,CAACI,QAAQ,CAAC+C,CAAC,CAAC;MACjE,IAAInD,EAAE,CAACO,KAAK,EAAE;QACV,IAAI,CAACnD,OAAO,CAAC6C,IAAI,CAACD,EAAE,CAACO,KAAK,CAAC2I,CAAC,EAAElJ,EAAE,CAACO,KAAK,CAAC4I,CAAC,EAAEnJ,EAAE,CAACO,KAAK,CAAC6I,CAAC,EAAEpJ,EAAE,CAACO,KAAK,CAAC8I,CAAC,CAAC;;MAErE,IAAIrJ,EAAE,CAACuJ,EAAE,EAAE;QACP,IAAI,CAAClM,IAAI,CAAC4C,IAAI,CAACD,EAAE,CAACuJ,EAAE,CAAC7I,CAAC,EAAEV,EAAE,CAACuJ,EAAE,CAAC5I,CAAC,CAAC;;MAEpCf,GAAG,EAAE;;IAET,IAAI,CAAC/C,WAAW,IAAI6O,EAAE;IACtB,IAAI,CAAChO,aAAa,EAAE;IACpB,OAAO,IAAI,CAACA,aAAa;EAC7B;EAEA;;;;;;;;;EASOmO,gBAAgBA,CAACzM,IAAU,EAAEsM,EAAU,EAAEI,SAAkB,EAAEvL,KAAuB,EAAEqB,KAAc;IACvG,IAAImK,OAAO,GAAGD,SAAS,GAAGA,SAAS,GAAGhQ,UAAU,CAACkQ,MAAM;IACvD,IAAIC,KAAK,CAACF,OAAO,CAAC,IAAIA,OAAO,GAAG,CAAC,IAAIA,OAAO,GAAG,CAAC,EAAE;MAC9CA,OAAO,GAAGjQ,UAAU,CAACkQ,MAAM;;IAG/B,MAAM5J,OAAO,GAAehD,IAAI,CAACiD,eAAe,CAACjH,YAAY,CAAC2D,YAAY,CAAC;IAC3E,MAAMuD,OAAO,GAAiBlD,IAAI,CAACmD,UAAU,EAAE;IAE/C,IAAI,CAAC9E,OAAO,CAACwC,IAAI,CAAC,IAAI,CAACvC,aAAa,CAAC;IACrC,MAAM+C,WAAW,GAAG,IAAIhF,WAAW,CAAC,IAAI,CAACiC,aAAa,EAAE,IAAI,CAAC;IAE7D+C,WAAW,CAACqH,aAAa,GAAG,IAAI,CAAC2C,iBAAiB,CAACiB,EAAE,EAAEtJ,OAAO,EAAEE,OAAO,CAAC;IACxE,IAAIyJ,OAAO,KAAKjQ,UAAU,CAACoQ,KAAK,EAAE;MAC9BzL,WAAW,CAACwJ,UAAU,GAAW1J,KAAK,GAAWA,KAAK,GAAG,CAAC;KAC7D,MAAM;MACHA,KAAK,GAAWA,KAAK,GAAWA,KAAK,GAAG,IAAI3F,MAAM,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;;IAElE,QAAQmR,OAAO;MACX,KAAKjQ,UAAU,CAACoQ,KAAK;QACjB,IAAI,CAACxC,iBAAiB,CAACtK,IAAI,EAAEqB,WAAW,EAAE,KAAK,CAAC;QAChD;MACJ,KAAK3E,UAAU,CAACqQ,EAAE;QACd,IAAI,CAAC3K,mBAAmB,CAACpC,IAAI,EAAEqB,WAAW,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,CAAC;QAChE;MACJ,KAAK3E,UAAU,CAACkQ,MAAM;QAClB,IAAI,CAACxK,mBAAmB,CAACpC,IAAI,EAAEqB,WAAW,EAAE,KAAK,CAAC;QAClD;MACJ,KAAK3E,UAAU,CAACsQ,MAAM;QAClB,IAAI,CAAC5K,mBAAmB,CAACpC,IAAI,EAAEqB,WAAW,EAAE,KAAK,EAAErC,SAAS,EAAEA,SAAS,EAAUmC,KAAK,EAAEqB,KAAK,CAAC;QAC9F;;IAER,IAAI,CAAC/E,WAAW,IAAI6O,EAAE;IACtB,IAAI,CAAChO,aAAa,EAAE;IACpB,OAAO,IAAI,CAACA,aAAa,GAAG,CAAC;EACjC;EAEA;;;;;;;;;EASO2O,eAAeA,CAACjN,IAAU,EAAEsM,EAAU,EAAEI,SAAkB,EAAEvL,KAAuB,EAAEqB,KAAc;IACtG,IAAImK,OAAO,GAAGD,SAAS,GAAGA,SAAS,GAAGhQ,UAAU,CAACkQ,MAAM;IACvD,IAAIC,KAAK,CAACF,OAAO,CAAC,IAAIA,OAAO,GAAG,CAAC,IAAIA,OAAO,GAAG,CAAC,EAAE;MAC9CA,OAAO,GAAGjQ,UAAU,CAACkQ,MAAM;;IAG/B,MAAM5J,OAAO,GAAehD,IAAI,CAACiD,eAAe,CAACjH,YAAY,CAAC2D,YAAY,CAAC;IAC3E,MAAMuD,OAAO,GAAiBlD,IAAI,CAACmD,UAAU,EAAE;IAE/C,IAAI,CAAC9E,OAAO,CAACwC,IAAI,CAAC,IAAI,CAACvC,aAAa,CAAC;IACrC,MAAM+C,WAAW,GAAG,IAAIhF,WAAW,CAAC,IAAI,CAACiC,aAAa,EAAE,IAAI,CAAC;IAE7D+C,WAAW,CAACqH,aAAa,GAAG,IAAI,CAAC2C,iBAAiB,CAACiB,EAAE,EAAEtJ,OAAO,EAAEE,OAAO,CAAC;IACxE,IAAIyJ,OAAO,KAAKjQ,UAAU,CAACoQ,KAAK,EAAE;MAC9BzL,WAAW,CAACwJ,UAAU,GAAW1J,KAAK,GAAWA,KAAK,GAAG,CAAC;KAC7D,MAAM;MACHA,KAAK,GAAWA,KAAK,GAAWA,KAAK,GAAG,IAAI3F,MAAM,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;;IAElE,QAAQmR,OAAO;MACX,KAAKjQ,UAAU,CAACoQ,KAAK;QACjB,IAAI,CAACxC,iBAAiB,CAACtK,IAAI,EAAEqB,WAAW,EAAE,IAAI,CAAC;QAC/C;MACJ,KAAK3E,UAAU,CAACqQ,EAAE;QACd,IAAI,CAAC3K,mBAAmB,CAACpC,IAAI,EAAEqB,WAAW,EAAE,IAAI,EAAE,KAAK,EAAE,KAAK,CAAC;QAC/D;MACJ,KAAK3E,UAAU,CAACkQ,MAAM;QAClB,IAAI,CAACxK,mBAAmB,CAACpC,IAAI,EAAEqB,WAAW,EAAE,IAAI,CAAC;QACjD;MACJ,KAAK3E,UAAU,CAACsQ,MAAM;QAClB,IAAI,CAAC5K,mBAAmB,CAACpC,IAAI,EAAEqB,WAAW,EAAE,IAAI,EAAErC,SAAS,EAAEA,SAAS,EAAUmC,KAAK,EAAEqB,KAAK,CAAC;QAC7F;;IAER,IAAI,CAAC/E,WAAW,IAAI6O,EAAE;IACtB,IAAI,CAAChO,aAAa,EAAE;IACpB,OAAO,IAAI,CAACA,aAAa,GAAG,CAAC;EACjC;EAEA;;;;;;;;;EASO4O,YAAYA,CAACC,KAAA,GAAgB,CAAC,EAAEC,GAAA,GAAc,IAAI,CAAC3P,WAAW,GAAG,CAAC,EAAE4P,MAAA,GAAkB,IAAI;;IAC7F,IAAI,CAAC,IAAI,CAACnP,UAAU,IAAI,CAAC,IAAI,CAACS,QAAQ,EAAE;MACpC,OAAO,IAAI;;IAGf;IACA,IAAI,CAAC2O,qBAAqB,CAACH,KAAK,EAAEC,GAAG,EAAEC,MAAM,CAAC;IAE9C,MAAME,SAAS,GAAG1R,UAAU,CAACC,MAAM,CAAC,CAAC,CAAC;IACtC,MAAMkE,IAAI,GAAG,IAAI,CAACA,IAAI;IACtB,MAAMwN,QAAQ,GAAG,IAAI,CAACzQ,SAAS;IAC/B,MAAM0Q,WAAW,GAAG,IAAI,CAAC5Q,YAAY;IACrC,MAAM6Q,KAAK,GAAG,IAAI,CAACzQ,MAAM;IAEzB,MAAM0Q,WAAW,GAAG9R,UAAU,CAACF,OAAO;IACtC,MAAMiS,QAAQ,GAAGD,WAAW,CAAC,CAAC,CAAC,CAACE,cAAc,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC;IAC7D,MAAMC,QAAQ,GAAGH,WAAW,CAAC,CAAC,CAAC,CAACE,cAAc,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC;IAC7D,MAAME,QAAQ,GAAGJ,WAAW,CAAC,CAAC,CAAC,CAACE,cAAc,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC;IAC7D,MAAMG,OAAO,GAAGL,WAAW,CAAC,CAAC,CAAC,CAACM,MAAM,CAACC,MAAM,CAACC,SAAS,CAAC;IACvD,MAAMC,OAAO,GAAGT,WAAW,CAAC,CAAC,CAAC,CAACM,MAAM,CAAC,CAACC,MAAM,CAACC,SAAS,CAAC;IAExDrS,MAAM,CAACuS,aAAa,CAACd,SAAS,CAAC;IAC/B,IAAI/M,GAAG,GAAG,CAAC,CAAC,CAAC;IAEb,IAAI,CAAA8N,EAAA,OAAI,CAACtO,IAAI,cAAAsO,EAAA,uBAAAA,EAAA,CAAEC,kBAAkB,EAAE;MAC/B,IAAI,CAAC7P,mBAAmB,GAAG,IAAI;;IAGnC0O,GAAG,GAAGA,GAAG,IAAI,IAAI,CAAC3P,WAAW,GAAG,IAAI,CAACA,WAAW,GAAG,CAAC,GAAG2P,GAAG;IAC1D,IAAI,IAAI,CAAC1O,mBAAmB,EAAE;MAC1B,IAAIyO,KAAK,IAAI,CAAC,IAAIC,GAAG,IAAI,IAAI,CAAC3P,WAAW,GAAG,CAAC,EAAE;QAC3C;QACA,MAAM+Q,YAAY,GAAG,CAAAC,EAAA,OAAI,CAACzO,IAAI,cAAAyO,EAAA,uBAAAA,EAAA,CAAE7L,eAAe,EAAE;QACjD,IAAI4L,YAAY,EAAE;UACdR,OAAO,CAACU,QAAQ,CAACF,YAAY,CAACR,OAAO,CAAC;UACtCI,OAAO,CAACM,QAAQ,CAACF,YAAY,CAACJ,OAAO,CAAC;;;;IAKlD5N,GAAG,GAAG,CAAC,CAAC,CAAC;IACT,IAAImO,MAAM,GAAG,CAAC,CAAC,CAAC;IAChB,IAAIC,MAAM,GAAG,CAAC,CAAC,CAAC;IAChB,IAAIC,MAAM,GAAG,CAAC,CAAC,CAAC;IAEhB;IACA,KAAK,IAAIhL,CAAC,GAAGsJ,KAAK,EAAEtJ,CAAC,IAAIuJ,GAAG,EAAEvJ,CAAC,EAAE,EAAE;MAC/B,MAAM9C,QAAQ,GAAG,IAAI,CAACxD,SAAS,CAACsG,CAAC,CAAC;MAClCrD,GAAG,GAAGO,QAAQ,CAACP,GAAG;MAClBmO,MAAM,GAAG,CAAC,GAAGnO,GAAG;MAChBoO,MAAM,GAAG,CAAC,GAAGpO,GAAG;MAChBqO,MAAM,GAAG,CAAC,GAAGrO,GAAG;MAEhB;MACA,IAAI,CAACsO,cAAc,CAAC/N,QAAQ,CAAC;MAE7B,MAAMgO,sBAAsB,GAAGhO,QAAQ,CAACiO,eAAe;MACvD,MAAMC,gBAAgB,GAAGlO,QAAQ,CAACC,QAAQ;MAC1C,MAAMkO,sBAAsB,GAAGnO,QAAQ,CAACoO,eAAe;MAEvD,IAAI,IAAI,CAAC1Q,wBAAwB,EAAE;QAC/BsC,QAAQ,CAACqO,iBAAiB,CAAC7B,SAAS,CAAC;;MAGzC,MAAM8B,iBAAiB,GAAGtO,QAAQ,CAACuO,QAAQ,KAAK,IAAI;MACpD,IAAID,iBAAiB,EAAE;QACnB,MAAME,MAAM,GAAG,IAAI,CAAChS,SAAS,CAACwD,QAAQ,CAACuO,QAAS,CAAC;QACjD,MAAME,oBAAoB,GAAGD,MAAM,CAACP,eAAe;QACnD,MAAMS,oBAAoB,GAAGF,MAAM,CAACJ,eAAe;QAEnD,MAAMO,QAAQ,GAAGT,gBAAgB,CAAC3N,CAAC,GAAGkO,oBAAoB,CAAC,CAAC,CAAC,GAAGP,gBAAgB,CAAC1N,CAAC,GAAGiO,oBAAoB,CAAC,CAAC,CAAC,GAAGP,gBAAgB,CAAClL,CAAC,GAAGyL,oBAAoB,CAAC,CAAC,CAAC;QAC3J,MAAMG,QAAQ,GAAGV,gBAAgB,CAAC3N,CAAC,GAAGkO,oBAAoB,CAAC,CAAC,CAAC,GAAGP,gBAAgB,CAAC1N,CAAC,GAAGiO,oBAAoB,CAAC,CAAC,CAAC,GAAGP,gBAAgB,CAAClL,CAAC,GAAGyL,oBAAoB,CAAC,CAAC,CAAC;QAC3J,MAAMI,QAAQ,GAAGX,gBAAgB,CAAC3N,CAAC,GAAGkO,oBAAoB,CAAC,CAAC,CAAC,GAAGP,gBAAgB,CAAC1N,CAAC,GAAGiO,oBAAoB,CAAC,CAAC,CAAC,GAAGP,gBAAgB,CAAClL,CAAC,GAAGyL,oBAAoB,CAAC,CAAC,CAAC;QAE3JN,sBAAsB,CAAC5N,CAAC,GAAGmO,oBAAoB,CAACnO,CAAC,GAAGqO,QAAQ;QAC5DT,sBAAsB,CAAC3N,CAAC,GAAGkO,oBAAoB,CAAClO,CAAC,GAAGmO,QAAQ;QAC5DR,sBAAsB,CAACnL,CAAC,GAAG0L,oBAAoB,CAAC1L,CAAC,GAAG6L,QAAQ;QAE5D,IAAI,IAAI,CAACnR,wBAAwB,EAAE;UAC/B,MAAMoR,eAAe,GAAGtC,SAAS,CAACuC,CAAC;UACnCf,sBAAsB,CAAC,CAAC,CAAC,GACrBc,eAAe,CAAC,CAAC,CAAC,GAAGL,oBAAoB,CAAC,CAAC,CAAC,GAAGK,eAAe,CAAC,CAAC,CAAC,GAAGL,oBAAoB,CAAC,CAAC,CAAC,GAAGK,eAAe,CAAC,CAAC,CAAC,GAAGL,oBAAoB,CAAC,CAAC,CAAC;UAC9IT,sBAAsB,CAAC,CAAC,CAAC,GACrBc,eAAe,CAAC,CAAC,CAAC,GAAGL,oBAAoB,CAAC,CAAC,CAAC,GAAGK,eAAe,CAAC,CAAC,CAAC,GAAGL,oBAAoB,CAAC,CAAC,CAAC,GAAGK,eAAe,CAAC,CAAC,CAAC,GAAGL,oBAAoB,CAAC,CAAC,CAAC;UAC9IT,sBAAsB,CAAC,CAAC,CAAC,GACrBc,eAAe,CAAC,CAAC,CAAC,GAAGL,oBAAoB,CAAC,CAAC,CAAC,GAAGK,eAAe,CAAC,CAAC,CAAC,GAAGL,oBAAoB,CAAC,CAAC,CAAC,GAAGK,eAAe,CAAC,CAAC,CAAC,GAAGL,oBAAoB,CAAC,CAAC,CAAC;UAC9IT,sBAAsB,CAAC,CAAC,CAAC,GACrBc,eAAe,CAAC,CAAC,CAAC,GAAGL,oBAAoB,CAAC,CAAC,CAAC,GAAGK,eAAe,CAAC,CAAC,CAAC,GAAGL,oBAAoB,CAAC,CAAC,CAAC,GAAGK,eAAe,CAAC,CAAC,CAAC,GAAGL,oBAAoB,CAAC,CAAC,CAAC;UAC9IT,sBAAsB,CAAC,CAAC,CAAC,GACrBc,eAAe,CAAC,CAAC,CAAC,GAAGL,oBAAoB,CAAC,CAAC,CAAC,GAAGK,eAAe,CAAC,CAAC,CAAC,GAAGL,oBAAoB,CAAC,CAAC,CAAC,GAAGK,eAAe,CAAC,CAAC,CAAC,GAAGL,oBAAoB,CAAC,CAAC,CAAC;UAC9IT,sBAAsB,CAAC,CAAC,CAAC,GACrBc,eAAe,CAAC,CAAC,CAAC,GAAGL,oBAAoB,CAAC,CAAC,CAAC,GAAGK,eAAe,CAAC,CAAC,CAAC,GAAGL,oBAAoB,CAAC,CAAC,CAAC,GAAGK,eAAe,CAAC,CAAC,CAAC,GAAGL,oBAAoB,CAAC,CAAC,CAAC;UAC9IT,sBAAsB,CAAC,CAAC,CAAC,GACrBc,eAAe,CAAC,CAAC,CAAC,GAAGL,oBAAoB,CAAC,CAAC,CAAC,GAAGK,eAAe,CAAC,CAAC,CAAC,GAAGL,oBAAoB,CAAC,CAAC,CAAC,GAAGK,eAAe,CAAC,EAAE,CAAC,GAAGL,oBAAoB,CAAC,CAAC,CAAC;UAC/IT,sBAAsB,CAAC,CAAC,CAAC,GACrBc,eAAe,CAAC,CAAC,CAAC,GAAGL,oBAAoB,CAAC,CAAC,CAAC,GAAGK,eAAe,CAAC,CAAC,CAAC,GAAGL,oBAAoB,CAAC,CAAC,CAAC,GAAGK,eAAe,CAAC,EAAE,CAAC,GAAGL,oBAAoB,CAAC,CAAC,CAAC;UAC/IT,sBAAsB,CAAC,CAAC,CAAC,GACrBc,eAAe,CAAC,CAAC,CAAC,GAAGL,oBAAoB,CAAC,CAAC,CAAC,GAAGK,eAAe,CAAC,CAAC,CAAC,GAAGL,oBAAoB,CAAC,CAAC,CAAC,GAAGK,eAAe,CAAC,EAAE,CAAC,GAAGL,oBAAoB,CAAC,CAAC,CAAC;;OAEtJ,MAAM;QACHN,sBAAsB,CAAC5N,CAAC,GAAG,CAAC;QAC5B4N,sBAAsB,CAAC3N,CAAC,GAAG,CAAC;QAC5B2N,sBAAsB,CAACnL,CAAC,GAAG,CAAC;QAE5B,IAAI,IAAI,CAACtF,wBAAwB,EAAE;UAC/B,MAAMoR,eAAe,GAAGtC,SAAS,CAACuC,CAAC;UACnCf,sBAAsB,CAAC,CAAC,CAAC,GAAGc,eAAe,CAAC,CAAC,CAAC;UAC9Cd,sBAAsB,CAAC,CAAC,CAAC,GAAGc,eAAe,CAAC,CAAC,CAAC;UAC9Cd,sBAAsB,CAAC,CAAC,CAAC,GAAGc,eAAe,CAAC,CAAC,CAAC;UAC9Cd,sBAAsB,CAAC,CAAC,CAAC,GAAGc,eAAe,CAAC,CAAC,CAAC;UAC9Cd,sBAAsB,CAAC,CAAC,CAAC,GAAGc,eAAe,CAAC,CAAC,CAAC;UAC9Cd,sBAAsB,CAAC,CAAC,CAAC,GAAGc,eAAe,CAAC,CAAC,CAAC;UAC9Cd,sBAAsB,CAAC,CAAC,CAAC,GAAGc,eAAe,CAAC,CAAC,CAAC;UAC9Cd,sBAAsB,CAAC,CAAC,CAAC,GAAGc,eAAe,CAAC,CAAC,CAAC;UAC9Cd,sBAAsB,CAAC,CAAC,CAAC,GAAGc,eAAe,CAAC,EAAE,CAAC;;;MAIvD,MAAME,oBAAoB,GAAGpC,WAAW,CAAC,EAAE,CAAC;MAC5C,IAAI5M,QAAQ,CAACiP,kBAAkB,EAAE;QAC7BD,oBAAoB,CAAC9B,MAAM,CAAC,GAAG,CAAC;OACnC,MAAM;QACH8B,oBAAoB,CAACrB,QAAQ,CAAC3N,QAAQ,CAACkP,KAAK,CAAC;;MAGjD;MACA,MAAMC,SAAS,GAAGvC,WAAW,CAAC,CAAC,CAAC;MAChCuC,SAAS,CAACxB,QAAQ,CAAC3N,QAAQ,CAACC,QAAQ,CAAC;MACrC,MAAMmP,OAAO,GAAGD,SAAS,CAAC5O,CAAC,GAAGP,QAAQ,CAACkP,KAAK,CAAC3O,CAAC;MAC9C,MAAM8O,OAAO,GAAGF,SAAS,CAAC3O,CAAC,GAAGR,QAAQ,CAACkP,KAAK,CAAC1O,CAAC;MAC9C,MAAM8O,OAAO,GAAGH,SAAS,CAACnM,CAAC,GAAGhD,QAAQ,CAACkP,KAAK,CAAClM,CAAC;MAE9C,IAAI4L,QAAQ,GAAGQ,OAAO,GAAGpB,sBAAsB,CAAC,CAAC,CAAC,GAAGqB,OAAO,GAAGrB,sBAAsB,CAAC,CAAC,CAAC,GAAGsB,OAAO,GAAGtB,sBAAsB,CAAC,CAAC,CAAC;MAC9H,IAAIW,QAAQ,GAAGS,OAAO,GAAGpB,sBAAsB,CAAC,CAAC,CAAC,GAAGqB,OAAO,GAAGrB,sBAAsB,CAAC,CAAC,CAAC,GAAGsB,OAAO,GAAGtB,sBAAsB,CAAC,CAAC,CAAC;MAC9H,IAAIa,QAAQ,GAAGO,OAAO,GAAGpB,sBAAsB,CAAC,CAAC,CAAC,GAAGqB,OAAO,GAAGrB,sBAAsB,CAAC,CAAC,CAAC,GAAGsB,OAAO,GAAGtB,sBAAsB,CAAC,CAAC,CAAC;MAE9HY,QAAQ,IAAII,oBAAoB,CAACzO,CAAC;MAClCoO,QAAQ,IAAIK,oBAAoB,CAACxO,CAAC;MAClCqO,QAAQ,IAAIG,oBAAoB,CAAChM,CAAC;MAElC,MAAMuM,EAAE,GAAI7C,WAAW,CAACkB,MAAM,CAAC,GAAGO,sBAAsB,CAAC5N,CAAC,GAAGsM,QAAQ,CAACtM,CAAC,GAAGqO,QAAQ,GAAG7B,QAAQ,CAACxM,CAAC,GAAGoO,QAAQ,GAAG3B,QAAQ,CAACzM,CAAC,GAAGsO,QAAS;MACnI,MAAMW,EAAE,GAAI9C,WAAW,CAACkB,MAAM,GAAG,CAAC,CAAC,GAAGO,sBAAsB,CAAC3N,CAAC,GAAGqM,QAAQ,CAACrM,CAAC,GAAGoO,QAAQ,GAAG7B,QAAQ,CAACvM,CAAC,GAAGmO,QAAQ,GAAG3B,QAAQ,CAACxM,CAAC,GAAGqO,QAAS;MACvI,MAAMY,EAAE,GAAI/C,WAAW,CAACkB,MAAM,GAAG,CAAC,CAAC,GAAGO,sBAAsB,CAACnL,CAAC,GAAG6J,QAAQ,CAAC7J,CAAC,GAAG4L,QAAQ,GAAG7B,QAAQ,CAAC/J,CAAC,GAAG2L,QAAQ,GAAG3B,QAAQ,CAAChK,CAAC,GAAG6L,QAAS;MAEvI,IAAI,IAAI,CAAClR,mBAAmB,EAAE;QAC1BsP,OAAO,CAACyC,yBAAyB,CAACH,EAAE,EAAEC,EAAE,EAAEC,EAAE,CAAC;QAC7CpC,OAAO,CAACsC,yBAAyB,CAACJ,EAAE,EAAEC,EAAE,EAAEC,EAAE,CAAC;;MAGjD,IAAI,IAAI,CAACjS,qBAAqB,IAAIwC,QAAQ,CAACI,KAAK,EAAE;QAC9C,MAAMA,KAAK,GAAGJ,QAAQ,CAACI,KAAK;QAC5B,MAAMqM,QAAQ,GAAG,IAAI,CAACzQ,SAAS;QAC/ByQ,QAAQ,CAACoB,MAAM,CAAC,GAAGzN,KAAK,CAAC2I,CAAC;QAC1B0D,QAAQ,CAACoB,MAAM,GAAG,CAAC,CAAC,GAAGzN,KAAK,CAAC4I,CAAC;QAC9ByD,QAAQ,CAACoB,MAAM,GAAG,CAAC,CAAC,GAAGzN,KAAK,CAAC6I,CAAC;QAC9BwD,QAAQ,CAACoB,MAAM,GAAG,CAAC,CAAC,GAAGzN,KAAK,CAAC8I,CAAC;;MAElC,IAAI,IAAI,CAACzL,uBAAuB,IAAIuC,QAAQ,CAACoJ,EAAE,EAAE;QAC7C,MAAMA,EAAE,GAAGpJ,QAAQ,CAACoJ,EAAE;QACtB,MAAMuD,KAAK,GAAG,IAAI,CAACzQ,MAAM;QACzByQ,KAAK,CAACmB,MAAM,CAAC,GAAG1E,EAAE,CAAC7I,CAAC;QACpBoM,KAAK,CAACmB,MAAM,GAAG,CAAC,CAAC,GAAG1E,EAAE,CAAC5I,CAAC;;;IAIhC;IACA,IAAIvB,IAAI,EAAE;MACN,IAAIqN,MAAM,EAAE;QACR,IAAI,IAAI,CAAC9O,qBAAqB,EAAE;UAC5ByB,IAAI,CAAC2Q,kBAAkB,CAAC3U,YAAY,CAAC+D,SAAS,EAAEyN,QAAQ,EAAE,KAAK,EAAE,KAAK,CAAC;;QAE3E,IAAI,IAAI,CAAChP,uBAAuB,EAAE;UAC9BwB,IAAI,CAAC2Q,kBAAkB,CAAC3U,YAAY,CAAC6D,MAAM,EAAE6N,KAAK,EAAE,KAAK,EAAE,KAAK,CAAC;;QAErE1N,IAAI,CAAC2Q,kBAAkB,CAAC3U,YAAY,CAAC2D,YAAY,EAAE8N,WAAW,EAAE,KAAK,EAAE,KAAK,CAAC;;MAGjF,IAAI,IAAI,CAAC/O,mBAAmB,EAAE;QAC1B,IAAIsB,IAAI,CAAC4Q,eAAe,EAAE;UACtB5Q,IAAI,CAAC4C,eAAe,EAAE,CAACiO,WAAW,CAAC7C,OAAO,EAAEI,OAAO,EAAEpO,IAAI,CAAC8Q,YAAY,CAAC;SAC1E,MAAM;UACH9Q,IAAI,CAAC+Q,iBAAiB,CAAC/C,OAAO,EAAEI,OAAO,EAAEpO,IAAI,CAAC8Q,YAAY,CAAC;;;;IAIvE,IAAI,CAACE,oBAAoB,CAAC7D,KAAK,EAAEC,GAAG,EAAEC,MAAM,CAAC;IAC7C,OAAO,IAAI;EACf;EAEA;;;EAGOpC,OAAOA,CAAA;;IACV,CAAAqD,EAAA,OAAI,CAACtO,IAAI,cAAAsO,EAAA,uBAAAA,EAAA,CAAErD,OAAO,EAAE;IACpB,IAAI,CAACtN,IAAI,GAAG,IAAI;IAChB;IACM,IAAI,CAACE,UAAW,GAAG,IAAI;IACvB,IAAI,CAACC,QAAS,GAAG,IAAI;IACrB,IAAI,CAACC,QAAS,GAAG,IAAI;IACrB,IAAI,CAACE,IAAK,GAAG,IAAI;IACjB,IAAI,CAACD,OAAQ,GAAG,IAAI;IACpB,IAAI,CAACiT,UAAW,GAAG,IAAI;IACvB,IAAI,CAACpU,YAAa,GAAG,IAAI;IACzB,IAAI,CAACI,MAAO,GAAG,IAAI;IACnB,IAAI,CAACF,SAAU,GAAG,IAAI;EAChC;EAEA;;;;;EAKOmU,kBAAkBA,CAAA;;IACrB,IAAI,CAAC,IAAI,CAAC/S,sBAAsB,EAAE;MAC9B,CAAAmQ,EAAA,OAAI,CAACtO,IAAI,cAAAsO,EAAA,uBAAAA,EAAA,CAAE6C,mBAAmB,EAAE;;IAEpC,OAAO,IAAI;EACf;EAEA;;;;;;EAMOC,gBAAgBA,CAACC,IAAY;IAChC,IAAI,CAAC,IAAI,CAACrR,IAAI,EAAE;MACZ;;IAGJ,MAAMsR,GAAG,GAAGD,IAAI,GAAG,CAAC;IACpB,IAAI,CAACrR,IAAI,CAAC+Q,iBAAiB,CAAC,IAAIpV,OAAO,CAAC,CAAC2V,GAAG,EAAE,CAACA,GAAG,EAAE,CAACA,GAAG,CAAC,EAAE,IAAI3V,OAAO,CAAC2V,GAAG,EAAEA,GAAG,EAAEA,GAAG,CAAC,CAAC;EAC1F;EAEA;;;;EAIA,IAAWC,eAAeA,CAAA;IACtB,OAAO,IAAI,CAACnT,cAAc;EAC9B;EAEA;;;;EAIA,IAAWmT,eAAeA,CAACC,GAAY;IACnC,IAAI,CAAC,IAAI,CAACxR,IAAI,EAAE;MACZ;;IAGJ,IAAI,CAAC5B,cAAc,GAAGoT,GAAG;IACzB,IAAI,CAACxR,IAAI,CAACyR,wBAAwB,GAAGD,GAAG;EAC5C;EAEA;;;;;;EAMA,IAAWE,uBAAuBA,CAACF,GAAY;IAC3C,IAAI,CAAC/S,wBAAwB,GAAG+S,GAAG;EACvC;EAEA;;;;;EAKA,IAAWG,oBAAoBA,CAACH,GAAY;IACxC,IAAI,CAACjT,qBAAqB,GAAGiT,GAAG;EACpC;EAEA,IAAWI,sBAAsBA,CAACJ,GAAY;IAC1C,IAAI,CAAChT,uBAAuB,GAAGgT,GAAG;EACtC;EACA;;;;;EAKA,IAAWG,oBAAoBA,CAAA;IAC3B,OAAO,IAAI,CAACpT,qBAAqB;EACrC;EACA;;;;;EAKA,IAAWqT,sBAAsBA,CAAA;IAC7B,OAAO,IAAI,CAACpT,uBAAuB;EACvC;EACA;;;EAGA,IAAWqT,kBAAkBA,CAACL,GAAY;IACtC,IAAI,CAAC9S,mBAAmB,GAAG8S,GAAG;EAClC;EACA;;;EAGA,IAAWK,kBAAkBA,CAAA;IACzB,OAAO,IAAI,CAACnT,mBAAmB;EACnC;EAEA;EACA;EACA;EAEA;;;;;EAKOoT,aAAaA,CAAA,GAAU;EAE9B;;;;;;;EAOOC,eAAeA,CAAChR,QAAoB;IACvC,OAAOA,QAAQ;EACnB;EAEA;;;;;;;;EAQO+N,cAAcA,CAAC/N,QAAoB;IACtC,OAAOA,QAAQ;EACnB;EAEA;;;;;;;EAOA;EACOuM,qBAAqBA,CAACH,KAAc,EAAE6E,IAAa,EAAE3E,MAAgB,GAAS;EACrF;;;;;;;;EAQA;EACO2D,oBAAoBA,CAAC7D,KAAc,EAAE6E,IAAa,EAAE3E,MAAgB,GAAS"},"metadata":{},"sourceType":"module","externalDependencies":[]}