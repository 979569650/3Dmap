{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { NodeMaterialBlock } from \"../../nodeMaterialBlock.js\";\nimport { NodeMaterialBlockConnectionPointTypes } from \"../../Enums/nodeMaterialBlockConnectionPointTypes.js\";\nimport { NodeMaterialSystemValues } from \"../../Enums/nodeMaterialSystemValues.js\";\nimport { NodeMaterialBlockTargets } from \"../../Enums/nodeMaterialBlockTargets.js\";\nimport { MaterialHelper } from \"../../../materialHelper.js\";\nimport { InputBlock } from \"../Input/inputBlock.js\";\nimport { RegisterClass } from \"../../../../Misc/typeStore.js\";\nimport \"../../../../Shaders/ShadersInclude/bonesDeclaration.js\";\nimport \"../../../../Shaders/ShadersInclude/bonesVertex.js\";\n/**\n * Block used to add support for vertex skinning (bones)\n */\nexport class BonesBlock extends NodeMaterialBlock {\n  /**\n   * Creates a new BonesBlock\n   * @param name defines the block name\n   */\n  constructor(name) {\n    super(name, NodeMaterialBlockTargets.Vertex);\n    this.registerInput(\"matricesIndices\", NodeMaterialBlockConnectionPointTypes.Vector4);\n    this.registerInput(\"matricesWeights\", NodeMaterialBlockConnectionPointTypes.Vector4);\n    this.registerInput(\"matricesIndicesExtra\", NodeMaterialBlockConnectionPointTypes.Vector4, true);\n    this.registerInput(\"matricesWeightsExtra\", NodeMaterialBlockConnectionPointTypes.Vector4, true);\n    this.registerInput(\"world\", NodeMaterialBlockConnectionPointTypes.Matrix);\n    this.registerOutput(\"output\", NodeMaterialBlockConnectionPointTypes.Matrix);\n  }\n  /**\n   * Initialize the block and prepare the context for build\n   * @param state defines the state that will be used for the build\n   */\n  initialize(state) {\n    state._excludeVariableName(\"boneSampler\");\n    state._excludeVariableName(\"boneTextureWidth\");\n    state._excludeVariableName(\"mBones\");\n    state._excludeVariableName(\"BonesPerMesh\");\n  }\n  /**\n   * Gets the current class name\n   * @returns the class name\n   */\n  getClassName() {\n    return \"BonesBlock\";\n  }\n  /**\n   * Gets the matrix indices input component\n   */\n  get matricesIndices() {\n    return this._inputs[0];\n  }\n  /**\n   * Gets the matrix weights input component\n   */\n  get matricesWeights() {\n    return this._inputs[1];\n  }\n  /**\n   * Gets the extra matrix indices input component\n   */\n  get matricesIndicesExtra() {\n    return this._inputs[2];\n  }\n  /**\n   * Gets the extra matrix weights input component\n   */\n  get matricesWeightsExtra() {\n    return this._inputs[3];\n  }\n  /**\n   * Gets the world input component\n   */\n  get world() {\n    return this._inputs[4];\n  }\n  /**\n   * Gets the output component\n   */\n  get output() {\n    return this._outputs[0];\n  }\n  autoConfigure(material, additionalFilteringInfo = () => true) {\n    if (!this.matricesIndices.isConnected) {\n      let matricesIndicesInput = material.getInputBlockByPredicate(b => b.isAttribute && b.name === \"matricesIndices\" && additionalFilteringInfo(b));\n      if (!matricesIndicesInput) {\n        matricesIndicesInput = new InputBlock(\"matricesIndices\");\n        matricesIndicesInput.setAsAttribute(\"matricesIndices\");\n      }\n      matricesIndicesInput.output.connectTo(this.matricesIndices);\n    }\n    if (!this.matricesWeights.isConnected) {\n      let matricesWeightsInput = material.getInputBlockByPredicate(b => b.isAttribute && b.name === \"matricesWeights\" && additionalFilteringInfo(b));\n      if (!matricesWeightsInput) {\n        matricesWeightsInput = new InputBlock(\"matricesWeights\");\n        matricesWeightsInput.setAsAttribute(\"matricesWeights\");\n      }\n      matricesWeightsInput.output.connectTo(this.matricesWeights);\n    }\n    if (!this.world.isConnected) {\n      let worldInput = material.getInputBlockByPredicate(b => b.systemValue === NodeMaterialSystemValues.World && additionalFilteringInfo(b));\n      if (!worldInput) {\n        worldInput = new InputBlock(\"world\");\n        worldInput.setAsSystemValue(NodeMaterialSystemValues.World);\n      }\n      worldInput.output.connectTo(this.world);\n    }\n  }\n  provideFallbacks(mesh, fallbacks) {\n    if (mesh && mesh.useBones && mesh.computeBonesUsingShaders && mesh.skeleton) {\n      fallbacks.addCPUSkinningFallback(0, mesh);\n    }\n  }\n  bind(effect, nodeMaterial, mesh) {\n    MaterialHelper.BindBonesParameters(mesh, effect);\n  }\n  prepareDefines(mesh, nodeMaterial, defines) {\n    if (!defines._areAttributesDirty) {\n      return;\n    }\n    MaterialHelper.PrepareDefinesForBones(mesh, defines);\n  }\n  _buildBlock(state) {\n    super._buildBlock(state);\n    // Register for compilation fallbacks\n    state.sharedData.blocksWithFallbacks.push(this);\n    // Register for binding\n    state.sharedData.forcedBindableBlocks.push(this);\n    // Register for defines\n    state.sharedData.blocksWithDefines.push(this);\n    // Register internal uniforms and samplers\n    state.uniforms.push(\"boneTextureWidth\");\n    state.uniforms.push(\"mBones\");\n    state.samplers.push(\"boneSampler\");\n    // Emit code\n    const comments = `//${this.name}`;\n    state._emitFunctionFromInclude(\"bonesDeclaration\", comments, {\n      removeAttributes: true,\n      removeUniforms: false,\n      removeVaryings: true,\n      removeIfDef: false\n    });\n    const influenceVariablename = state._getFreeVariableName(\"influence\");\n    state.compilationString += state._emitCodeFromInclude(\"bonesVertex\", comments, {\n      replaceStrings: [{\n        search: /finalWorld=finalWorld\\*influence;/,\n        replace: \"\"\n      }, {\n        search: /influence/gm,\n        replace: influenceVariablename\n      }]\n    });\n    const output = this._outputs[0];\n    const worldInput = this.world;\n    state.compilationString += `#if NUM_BONE_INFLUENCERS>0\\n`;\n    state.compilationString += this._declareOutput(output, state) + ` = ${worldInput.associatedVariableName} * ${influenceVariablename};\\n`;\n    state.compilationString += `#else\\n`;\n    state.compilationString += this._declareOutput(output, state) + ` = ${worldInput.associatedVariableName};\\n`;\n    state.compilationString += `#endif\\n`;\n    return this;\n  }\n}\nRegisterClass(\"BABYLON.BonesBlock\", BonesBlock);","map":{"version":3,"names":["NodeMaterialBlock","NodeMaterialBlockConnectionPointTypes","NodeMaterialSystemValues","NodeMaterialBlockTargets","MaterialHelper","InputBlock","RegisterClass","BonesBlock","constructor","name","Vertex","registerInput","Vector4","Matrix","registerOutput","initialize","state","_excludeVariableName","getClassName","matricesIndices","_inputs","matricesWeights","matricesIndicesExtra","matricesWeightsExtra","world","output","_outputs","autoConfigure","material","additionalFilteringInfo","isConnected","matricesIndicesInput","getInputBlockByPredicate","b","isAttribute","setAsAttribute","connectTo","matricesWeightsInput","worldInput","systemValue","World","setAsSystemValue","provideFallbacks","mesh","fallbacks","useBones","computeBonesUsingShaders","skeleton","addCPUSkinningFallback","bind","effect","nodeMaterial","BindBonesParameters","prepareDefines","defines","_areAttributesDirty","PrepareDefinesForBones","_buildBlock","sharedData","blocksWithFallbacks","push","forcedBindableBlocks","blocksWithDefines","uniforms","samplers","comments","_emitFunctionFromInclude","removeAttributes","removeUniforms","removeVaryings","removeIfDef","influenceVariablename","_getFreeVariableName","compilationString","_emitCodeFromInclude","replaceStrings","search","replace","_declareOutput","associatedVariableName"],"sources":["../../../../../../../dev/core/src/Materials/Node/Blocks/Vertex/bonesBlock.ts"],"sourcesContent":["import { NodeMaterialBlock } from \"../../nodeMaterialBlock\";\r\nimport { NodeMaterialBlockConnectionPointTypes } from \"../../Enums/nodeMaterialBlockConnectionPointTypes\";\r\nimport type { NodeMaterialBuildState } from \"../../nodeMaterialBuildState\";\r\nimport { NodeMaterialSystemValues } from \"../../Enums/nodeMaterialSystemValues\";\r\nimport { NodeMaterialBlockTargets } from \"../../Enums/nodeMaterialBlockTargets\";\r\nimport type { AbstractMesh } from \"../../../../Meshes/abstractMesh\";\r\nimport type { Mesh } from \"../../../../Meshes/mesh\";\r\nimport type { Effect } from \"../../../effect\";\r\nimport { MaterialHelper } from \"../../../materialHelper\";\r\nimport type { NodeMaterialConnectionPoint } from \"../../nodeMaterialBlockConnectionPoint\";\r\nimport type { NodeMaterial, NodeMaterialDefines } from \"../../nodeMaterial\";\r\nimport { InputBlock } from \"../Input/inputBlock\";\r\nimport { RegisterClass } from \"../../../../Misc/typeStore\";\r\n\r\nimport \"../../../../Shaders/ShadersInclude/bonesDeclaration\";\r\nimport \"../../../../Shaders/ShadersInclude/bonesVertex\";\r\nimport type { EffectFallbacks } from \"../../../effectFallbacks\";\r\n\r\n/**\r\n * Block used to add support for vertex skinning (bones)\r\n */\r\nexport class BonesBlock extends NodeMaterialBlock {\r\n    /**\r\n     * Creates a new BonesBlock\r\n     * @param name defines the block name\r\n     */\r\n    public constructor(name: string) {\r\n        super(name, NodeMaterialBlockTargets.Vertex);\r\n\r\n        this.registerInput(\"matricesIndices\", NodeMaterialBlockConnectionPointTypes.Vector4);\r\n        this.registerInput(\"matricesWeights\", NodeMaterialBlockConnectionPointTypes.Vector4);\r\n        this.registerInput(\"matricesIndicesExtra\", NodeMaterialBlockConnectionPointTypes.Vector4, true);\r\n        this.registerInput(\"matricesWeightsExtra\", NodeMaterialBlockConnectionPointTypes.Vector4, true);\r\n        this.registerInput(\"world\", NodeMaterialBlockConnectionPointTypes.Matrix);\r\n\r\n        this.registerOutput(\"output\", NodeMaterialBlockConnectionPointTypes.Matrix);\r\n    }\r\n\r\n    /**\r\n     * Initialize the block and prepare the context for build\r\n     * @param state defines the state that will be used for the build\r\n     */\r\n    public initialize(state: NodeMaterialBuildState) {\r\n        state._excludeVariableName(\"boneSampler\");\r\n        state._excludeVariableName(\"boneTextureWidth\");\r\n        state._excludeVariableName(\"mBones\");\r\n        state._excludeVariableName(\"BonesPerMesh\");\r\n    }\r\n\r\n    /**\r\n     * Gets the current class name\r\n     * @returns the class name\r\n     */\r\n    public getClassName() {\r\n        return \"BonesBlock\";\r\n    }\r\n\r\n    /**\r\n     * Gets the matrix indices input component\r\n     */\r\n    public get matricesIndices(): NodeMaterialConnectionPoint {\r\n        return this._inputs[0];\r\n    }\r\n\r\n    /**\r\n     * Gets the matrix weights input component\r\n     */\r\n    public get matricesWeights(): NodeMaterialConnectionPoint {\r\n        return this._inputs[1];\r\n    }\r\n\r\n    /**\r\n     * Gets the extra matrix indices input component\r\n     */\r\n    public get matricesIndicesExtra(): NodeMaterialConnectionPoint {\r\n        return this._inputs[2];\r\n    }\r\n\r\n    /**\r\n     * Gets the extra matrix weights input component\r\n     */\r\n    public get matricesWeightsExtra(): NodeMaterialConnectionPoint {\r\n        return this._inputs[3];\r\n    }\r\n\r\n    /**\r\n     * Gets the world input component\r\n     */\r\n    public get world(): NodeMaterialConnectionPoint {\r\n        return this._inputs[4];\r\n    }\r\n\r\n    /**\r\n     * Gets the output component\r\n     */\r\n    public get output(): NodeMaterialConnectionPoint {\r\n        return this._outputs[0];\r\n    }\r\n\r\n    public autoConfigure(material: NodeMaterial, additionalFilteringInfo: (node: NodeMaterialBlock) => boolean = () => true) {\r\n        if (!this.matricesIndices.isConnected) {\r\n            let matricesIndicesInput = material.getInputBlockByPredicate((b) => b.isAttribute && b.name === \"matricesIndices\" && additionalFilteringInfo(b));\r\n\r\n            if (!matricesIndicesInput) {\r\n                matricesIndicesInput = new InputBlock(\"matricesIndices\");\r\n                matricesIndicesInput.setAsAttribute(\"matricesIndices\");\r\n            }\r\n            matricesIndicesInput.output.connectTo(this.matricesIndices);\r\n        }\r\n        if (!this.matricesWeights.isConnected) {\r\n            let matricesWeightsInput = material.getInputBlockByPredicate((b) => b.isAttribute && b.name === \"matricesWeights\" && additionalFilteringInfo(b));\r\n\r\n            if (!matricesWeightsInput) {\r\n                matricesWeightsInput = new InputBlock(\"matricesWeights\");\r\n                matricesWeightsInput.setAsAttribute(\"matricesWeights\");\r\n            }\r\n            matricesWeightsInput.output.connectTo(this.matricesWeights);\r\n        }\r\n        if (!this.world.isConnected) {\r\n            let worldInput = material.getInputBlockByPredicate((b) => b.systemValue === NodeMaterialSystemValues.World && additionalFilteringInfo(b));\r\n\r\n            if (!worldInput) {\r\n                worldInput = new InputBlock(\"world\");\r\n                worldInput.setAsSystemValue(NodeMaterialSystemValues.World);\r\n            }\r\n            worldInput.output.connectTo(this.world);\r\n        }\r\n    }\r\n\r\n    public provideFallbacks(mesh: AbstractMesh, fallbacks: EffectFallbacks) {\r\n        if (mesh && mesh.useBones && mesh.computeBonesUsingShaders && mesh.skeleton) {\r\n            fallbacks.addCPUSkinningFallback(0, mesh);\r\n        }\r\n    }\r\n\r\n    public bind(effect: Effect, nodeMaterial: NodeMaterial, mesh?: Mesh) {\r\n        MaterialHelper.BindBonesParameters(mesh, effect);\r\n    }\r\n\r\n    public prepareDefines(mesh: AbstractMesh, nodeMaterial: NodeMaterial, defines: NodeMaterialDefines) {\r\n        if (!defines._areAttributesDirty) {\r\n            return;\r\n        }\r\n        MaterialHelper.PrepareDefinesForBones(mesh, defines);\r\n    }\r\n\r\n    protected _buildBlock(state: NodeMaterialBuildState) {\r\n        super._buildBlock(state);\r\n\r\n        // Register for compilation fallbacks\r\n        state.sharedData.blocksWithFallbacks.push(this);\r\n\r\n        // Register for binding\r\n        state.sharedData.forcedBindableBlocks.push(this);\r\n\r\n        // Register for defines\r\n        state.sharedData.blocksWithDefines.push(this);\r\n\r\n        // Register internal uniforms and samplers\r\n        state.uniforms.push(\"boneTextureWidth\");\r\n        state.uniforms.push(\"mBones\");\r\n\r\n        state.samplers.push(\"boneSampler\");\r\n\r\n        // Emit code\r\n        const comments = `//${this.name}`;\r\n        state._emitFunctionFromInclude(\"bonesDeclaration\", comments, {\r\n            removeAttributes: true,\r\n            removeUniforms: false,\r\n            removeVaryings: true,\r\n            removeIfDef: false,\r\n        });\r\n\r\n        const influenceVariablename = state._getFreeVariableName(\"influence\");\r\n\r\n        state.compilationString += state._emitCodeFromInclude(\"bonesVertex\", comments, {\r\n            replaceStrings: [\r\n                {\r\n                    search: /finalWorld=finalWorld\\*influence;/,\r\n                    replace: \"\",\r\n                },\r\n                {\r\n                    search: /influence/gm,\r\n                    replace: influenceVariablename,\r\n                },\r\n            ],\r\n        });\r\n\r\n        const output = this._outputs[0];\r\n        const worldInput = this.world;\r\n\r\n        state.compilationString += `#if NUM_BONE_INFLUENCERS>0\\n`;\r\n        state.compilationString += this._declareOutput(output, state) + ` = ${worldInput.associatedVariableName} * ${influenceVariablename};\\n`;\r\n        state.compilationString += `#else\\n`;\r\n        state.compilationString += this._declareOutput(output, state) + ` = ${worldInput.associatedVariableName};\\n`;\r\n        state.compilationString += `#endif\\n`;\r\n\r\n        return this;\r\n    }\r\n}\r\n\r\nRegisterClass(\"BABYLON.BonesBlock\", BonesBlock);\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}