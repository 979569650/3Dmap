{"ast":null,"code":"import { RichTypeMatrix, RichTypeNumber, RichTypeVector3 } from \"../../../flowGraphRichTypes.js\";\nimport { FlowGraphBinaryOperationBlock } from \"../flowGraphBinaryOperationBlock.js\";\nimport { Quaternion, Vector3 } from \"../../../../Maths/math.vector.js\";\nimport { FlowGraphUnaryOperationBlock } from \"../flowGraphUnaryOperationBlock.js\";\nimport { FlowGraphBlock } from \"../../../flowGraphBlock.js\";\nimport { RegisterClass } from \"../../../../Misc/typeStore.js\";\nconst ADDNAME = \"FGAddVector3Block\";\n/**\n * Add two vectors together.\n * @experimental\n */\nexport class FlowGraphAddVector3Block extends FlowGraphBinaryOperationBlock {\n  constructor(config) {\n    super(RichTypeVector3, RichTypeVector3, RichTypeVector3, (left, right) => left.add(right), ADDNAME, config);\n  }\n}\nRegisterClass(ADDNAME, FlowGraphAddVector3Block);\nconst SUBNAME = \"FGSubtractVector3Block\";\n/**\n * Subtract two vectors.\n * @experimental\n */\nexport class FlowGraphSubtractVector3Block extends FlowGraphBinaryOperationBlock {\n  constructor(config) {\n    super(RichTypeVector3, RichTypeVector3, RichTypeVector3, (left, right) => left.subtract(right), SUBNAME, config);\n  }\n}\nRegisterClass(SUBNAME, FlowGraphSubtractVector3Block);\nconst MULNAME = \"FGMultiplyVector3Block\";\n/**\n * Multiply two vectors together.\n * @experimental\n */\nexport class FlowGraphMultiplyVector3Block extends FlowGraphBinaryOperationBlock {\n  constructor(config) {\n    super(RichTypeVector3, RichTypeVector3, RichTypeVector3, (left, right) => left.multiply(right), MULNAME, config);\n  }\n}\nRegisterClass(MULNAME, FlowGraphMultiplyVector3Block);\nconst DIVNAME = \"FGDivideVector3Block\";\n/**\n * Divide two vectors.\n * @experimental\n */\nexport class FlowGraphDivideVector3Block extends FlowGraphBinaryOperationBlock {\n  constructor(config) {\n    super(RichTypeVector3, RichTypeVector3, RichTypeVector3, (left, right) => left.divide(right), DIVNAME, config);\n  }\n}\nRegisterClass(DIVNAME, FlowGraphDivideVector3Block);\nconst SCALNAME = \"FGScaleVector3Block\";\n/**\n * Scale a vector by a number.\n * @experimental\n */\nexport class FlowGraphScaleVector3Block extends FlowGraphBinaryOperationBlock {\n  constructor(config) {\n    super(RichTypeVector3, RichTypeNumber, RichTypeVector3, (left, right) => left.scale(right), SCALNAME, config);\n  }\n}\nRegisterClass(SCALNAME, FlowGraphScaleVector3Block);\nconst LENNAME = \"FGLengthVector3Block\";\n/**\n * Get the length of a vector.\n * @experimental\n */\nexport class FlowGraphLengthVector3Block extends FlowGraphUnaryOperationBlock {\n  constructor(config) {\n    super(RichTypeVector3, RichTypeNumber, value => value.length(), LENNAME, config);\n  }\n}\nRegisterClass(LENNAME, FlowGraphLengthVector3Block);\nconst NORMNAME = \"FGNormalizeVector3Block\";\n/**\n * Normalize a vector.\n * @experimental\n */\nexport class FlowGraphNormalizeVector3Block extends FlowGraphUnaryOperationBlock {\n  constructor(config) {\n    super(RichTypeVector3, RichTypeVector3, value => value.normalizeToNew(), NORMNAME, config);\n  }\n}\nRegisterClass(NORMNAME, FlowGraphNormalizeVector3Block);\nconst DOTNAME = \"FGDotVector3Block\";\n/**\n * Get the dot product of two vectors.\n * @experimental\n */\nexport class FlowGraphDotVector3Block extends FlowGraphBinaryOperationBlock {\n  constructor(config) {\n    super(RichTypeVector3, RichTypeVector3, RichTypeNumber, (left, right) => Vector3.Dot(left, right), DOTNAME, config);\n  }\n}\nRegisterClass(DOTNAME, FlowGraphDotVector3Block);\nconst CROSSNAME = \"FGCrossVector3Block\";\n/**\n * Get the cross product of two vectors.\n * @experimental\n */\nexport class FlowGraphCrossVector3Block extends FlowGraphBinaryOperationBlock {\n  constructor(config) {\n    super(RichTypeVector3, RichTypeVector3, RichTypeVector3, (left, right) => Vector3.Cross(left, right), CROSSNAME, config);\n  }\n}\nRegisterClass(CROSSNAME, FlowGraphCrossVector3Block);\nconst CREATENAME = \"FGCreateVector3Block\";\n/**\n * Create a vector from its components.\n * @experimental\n */\nexport class FlowGraphCreateVector3Block extends FlowGraphBlock {\n  constructor(config) {\n    super(config);\n    this._cachedVector = Vector3.Zero();\n    this.x = this._registerDataInput(\"x\", RichTypeNumber);\n    this.y = this._registerDataInput(\"y\", RichTypeNumber);\n    this.z = this._registerDataInput(\"y\", RichTypeNumber);\n    this.vector = this._registerDataOutput(\"vector\", RichTypeVector3);\n  }\n  _updateOutputs(_context) {\n    this._cachedVector.x = this.x.getValue(_context);\n    this._cachedVector.y = this.y.getValue(_context);\n    this._cachedVector.z = this.z.getValue(_context);\n    this.vector.setValue(this._cachedVector, _context);\n  }\n  getClassName() {\n    return CREATENAME;\n  }\n}\nRegisterClass(CREATENAME, FlowGraphCreateVector3Block);\nconst SPLITNAME = \"FGSplitVector3Block\";\n/**\n * Split a vector into its components.\n * @experimental\n */\nexport class FlowGraphSplitVector3Block extends FlowGraphBlock {\n  constructor(config) {\n    super(config);\n    this.vector = this._registerDataInput(\"vector\", RichTypeVector3);\n    this.x = this._registerDataOutput(\"x\", RichTypeNumber);\n    this.y = this._registerDataOutput(\"y\", RichTypeNumber);\n    this.z = this._registerDataOutput(\"z\", RichTypeNumber);\n  }\n  _updateOutputs(_context) {\n    const vector = this.vector.getValue(_context);\n    this.x.setValue(vector.x, _context);\n    this.y.setValue(vector.y, _context);\n    this.z.setValue(vector.z, _context);\n  }\n  getClassName() {\n    return SPLITNAME;\n  }\n}\nRegisterClass(SPLITNAME, FlowGraphSplitVector3Block);\nconst ROTATENAME = \"FGRotateVector3Block\";\n/**\n * Rotates a vector by a given angle.\n */\nexport class FlowGraphRotate3dVector3Block extends FlowGraphBlock {\n  constructor(config) {\n    super(config);\n    this._cachedQuaternion = new Quaternion();\n    this.input = this._registerDataInput(\"input\", RichTypeVector3);\n    this.angle = this._registerDataInput(\"angle\", RichTypeNumber);\n    this.output = this._registerDataOutput(\"output\", RichTypeVector3);\n  }\n  _updateOutputs(_context) {\n    const rot = Quaternion.RotationAxisToRef(this.axis.getValue(_context), this.angle.getValue(_context), this._cachedQuaternion);\n    const input = this.input.getValue(_context);\n    const output = this.output.getValue(_context);\n    input.applyRotationQuaternionToRef(rot, output);\n  }\n  getClassName() {\n    return ROTATENAME;\n  }\n}\nRegisterClass(ROTATENAME, FlowGraphRotate3dVector3Block);\nconst TRANSFORMNAME = \"FGTransformVector3Block\";\n/**\n * Transforms a vector by a given matrix.\n * @experimental\n */\nexport class FlowGraphTransformVector3Block extends FlowGraphBinaryOperationBlock {\n  constructor(config) {\n    super(RichTypeMatrix, RichTypeVector3, RichTypeVector3, (left, right) => Vector3.TransformCoordinatesToRef(right, left, this._cachedResult), TRANSFORMNAME, config);\n    this._cachedResult = Vector3.Zero();\n  }\n}\nRegisterClass(TRANSFORMNAME, FlowGraphTransformVector3Block);","map":{"version":3,"names":["RichTypeMatrix","RichTypeNumber","RichTypeVector3","FlowGraphBinaryOperationBlock","Quaternion","Vector3","FlowGraphUnaryOperationBlock","FlowGraphBlock","RegisterClass","ADDNAME","FlowGraphAddVector3Block","constructor","config","left","right","add","SUBNAME","FlowGraphSubtractVector3Block","subtract","MULNAME","FlowGraphMultiplyVector3Block","multiply","DIVNAME","FlowGraphDivideVector3Block","divide","SCALNAME","FlowGraphScaleVector3Block","scale","LENNAME","FlowGraphLengthVector3Block","value","length","NORMNAME","FlowGraphNormalizeVector3Block","normalizeToNew","DOTNAME","FlowGraphDotVector3Block","Dot","CROSSNAME","FlowGraphCrossVector3Block","Cross","CREATENAME","FlowGraphCreateVector3Block","_cachedVector","Zero","x","_registerDataInput","y","z","vector","_registerDataOutput","_updateOutputs","_context","getValue","setValue","getClassName","SPLITNAME","FlowGraphSplitVector3Block","ROTATENAME","FlowGraphRotate3dVector3Block","_cachedQuaternion","input","angle","output","rot","RotationAxisToRef","axis","applyRotationQuaternionToRef","TRANSFORMNAME","FlowGraphTransformVector3Block","TransformCoordinatesToRef","_cachedResult"],"sources":["../../../../../../../dev/core/src/FlowGraph/Blocks/Data/Math/flowGraphVector3MathBlocks.ts"],"sourcesContent":["import { RichTypeMatrix, RichTypeNumber, RichTypeVector3 } from \"core/FlowGraph/flowGraphRichTypes\";\r\nimport { FlowGraphBinaryOperationBlock } from \"../flowGraphBinaryOperationBlock\";\r\nimport type { Matrix } from \"../../../../Maths/math.vector\";\r\nimport { Quaternion, Vector3 } from \"../../../../Maths/math.vector\";\r\nimport { FlowGraphUnaryOperationBlock } from \"../flowGraphUnaryOperationBlock\";\r\nimport type { IFlowGraphBlockConfiguration } from \"../../../flowGraphBlock\";\r\nimport { FlowGraphBlock } from \"../../../flowGraphBlock\";\r\nimport { RegisterClass } from \"../../../../Misc/typeStore\";\r\nimport type { FlowGraphContext } from \"../../../flowGraphContext\";\r\nimport type { FlowGraphDataConnection } from \"../../../flowGraphDataConnection\";\r\n\r\nconst ADDNAME = \"FGAddVector3Block\";\r\n/**\r\n * Add two vectors together.\r\n * @experimental\r\n */\r\nexport class FlowGraphAddVector3Block extends FlowGraphBinaryOperationBlock<Vector3, Vector3, Vector3> {\r\n    constructor(config?: IFlowGraphBlockConfiguration) {\r\n        super(RichTypeVector3, RichTypeVector3, RichTypeVector3, (left, right) => left.add(right), ADDNAME, config);\r\n    }\r\n}\r\nRegisterClass(ADDNAME, FlowGraphAddVector3Block);\r\n\r\nconst SUBNAME = \"FGSubtractVector3Block\";\r\n/**\r\n * Subtract two vectors.\r\n * @experimental\r\n */\r\nexport class FlowGraphSubtractVector3Block extends FlowGraphBinaryOperationBlock<Vector3, Vector3, Vector3> {\r\n    constructor(config: IFlowGraphBlockConfiguration) {\r\n        super(RichTypeVector3, RichTypeVector3, RichTypeVector3, (left, right) => left.subtract(right), SUBNAME, config);\r\n    }\r\n}\r\nRegisterClass(SUBNAME, FlowGraphSubtractVector3Block);\r\n\r\nconst MULNAME = \"FGMultiplyVector3Block\";\r\n/**\r\n * Multiply two vectors together.\r\n * @experimental\r\n */\r\nexport class FlowGraphMultiplyVector3Block extends FlowGraphBinaryOperationBlock<Vector3, Vector3, Vector3> {\r\n    constructor(config: IFlowGraphBlockConfiguration) {\r\n        super(RichTypeVector3, RichTypeVector3, RichTypeVector3, (left, right) => left.multiply(right), MULNAME, config);\r\n    }\r\n}\r\nRegisterClass(MULNAME, FlowGraphMultiplyVector3Block);\r\n\r\nconst DIVNAME = \"FGDivideVector3Block\";\r\n/**\r\n * Divide two vectors.\r\n * @experimental\r\n */\r\nexport class FlowGraphDivideVector3Block extends FlowGraphBinaryOperationBlock<Vector3, Vector3, Vector3> {\r\n    constructor(config?: IFlowGraphBlockConfiguration) {\r\n        super(RichTypeVector3, RichTypeVector3, RichTypeVector3, (left, right) => left.divide(right), DIVNAME, config);\r\n    }\r\n}\r\nRegisterClass(DIVNAME, FlowGraphDivideVector3Block);\r\n\r\nconst SCALNAME = \"FGScaleVector3Block\";\r\n/**\r\n * Scale a vector by a number.\r\n * @experimental\r\n */\r\nexport class FlowGraphScaleVector3Block extends FlowGraphBinaryOperationBlock<Vector3, number, Vector3> {\r\n    constructor(config?: IFlowGraphBlockConfiguration) {\r\n        super(RichTypeVector3, RichTypeNumber, RichTypeVector3, (left, right) => left.scale(right), SCALNAME, config);\r\n    }\r\n}\r\nRegisterClass(SCALNAME, FlowGraphScaleVector3Block);\r\n\r\nconst LENNAME = \"FGLengthVector3Block\";\r\n/**\r\n * Get the length of a vector.\r\n * @experimental\r\n */\r\nexport class FlowGraphLengthVector3Block extends FlowGraphUnaryOperationBlock<Vector3, number> {\r\n    constructor(config?: IFlowGraphBlockConfiguration) {\r\n        super(RichTypeVector3, RichTypeNumber, (value) => value.length(), LENNAME, config);\r\n    }\r\n}\r\nRegisterClass(LENNAME, FlowGraphLengthVector3Block);\r\n\r\nconst NORMNAME = \"FGNormalizeVector3Block\";\r\n/**\r\n * Normalize a vector.\r\n * @experimental\r\n */\r\nexport class FlowGraphNormalizeVector3Block extends FlowGraphUnaryOperationBlock<Vector3, Vector3> {\r\n    constructor(config?: IFlowGraphBlockConfiguration) {\r\n        super(RichTypeVector3, RichTypeVector3, (value) => value.normalizeToNew(), NORMNAME, config);\r\n    }\r\n}\r\nRegisterClass(NORMNAME, FlowGraphNormalizeVector3Block);\r\n\r\nconst DOTNAME = \"FGDotVector3Block\";\r\n/**\r\n * Get the dot product of two vectors.\r\n * @experimental\r\n */\r\nexport class FlowGraphDotVector3Block extends FlowGraphBinaryOperationBlock<Vector3, Vector3, number> {\r\n    constructor(config?: IFlowGraphBlockConfiguration) {\r\n        super(RichTypeVector3, RichTypeVector3, RichTypeNumber, (left, right) => Vector3.Dot(left, right), DOTNAME, config);\r\n    }\r\n}\r\nRegisterClass(DOTNAME, FlowGraphDotVector3Block);\r\n\r\nconst CROSSNAME = \"FGCrossVector3Block\";\r\n/**\r\n * Get the cross product of two vectors.\r\n * @experimental\r\n */\r\nexport class FlowGraphCrossVector3Block extends FlowGraphBinaryOperationBlock<Vector3, Vector3, Vector3> {\r\n    constructor(config?: IFlowGraphBlockConfiguration) {\r\n        super(RichTypeVector3, RichTypeVector3, RichTypeVector3, (left, right) => Vector3.Cross(left, right), CROSSNAME, config);\r\n    }\r\n}\r\nRegisterClass(CROSSNAME, FlowGraphCrossVector3Block);\r\n\r\nconst CREATENAME = \"FGCreateVector3Block\";\r\n/**\r\n * Create a vector from its components.\r\n * @experimental\r\n */\r\nexport class FlowGraphCreateVector3Block extends FlowGraphBlock {\r\n    /**\r\n     * Input connection: The x component of the vector.\r\n     */\r\n    public readonly x: FlowGraphDataConnection<number>;\r\n    /**\r\n     * Input connection: The y component of the vector.\r\n     */\r\n    public readonly y: FlowGraphDataConnection<number>;\r\n    /**\r\n     * Input connection: The z component of the vector.\r\n     */\r\n    public readonly z: FlowGraphDataConnection<number>;\r\n    /**\r\n     * Output connection: The created vector.\r\n     */\r\n    public readonly vector: FlowGraphDataConnection<Vector3>;\r\n\r\n    private _cachedVector: Vector3 = Vector3.Zero();\r\n\r\n    constructor(config?: IFlowGraphBlockConfiguration) {\r\n        super(config);\r\n\r\n        this.x = this._registerDataInput(\"x\", RichTypeNumber);\r\n        this.y = this._registerDataInput(\"y\", RichTypeNumber);\r\n        this.z = this._registerDataInput(\"y\", RichTypeNumber);\r\n        this.vector = this._registerDataOutput(\"vector\", RichTypeVector3);\r\n    }\r\n\r\n    public _updateOutputs(_context: FlowGraphContext): void {\r\n        this._cachedVector.x = this.x.getValue(_context);\r\n        this._cachedVector.y = this.y.getValue(_context);\r\n        this._cachedVector.z = this.z.getValue(_context);\r\n        this.vector.setValue(this._cachedVector, _context);\r\n    }\r\n\r\n    public getClassName(): string {\r\n        return CREATENAME;\r\n    }\r\n}\r\nRegisterClass(CREATENAME, FlowGraphCreateVector3Block);\r\n\r\nconst SPLITNAME = \"FGSplitVector3Block\";\r\n/**\r\n * Split a vector into its components.\r\n * @experimental\r\n */\r\nexport class FlowGraphSplitVector3Block extends FlowGraphBlock {\r\n    /**\r\n     * Input connection: The vector to split.\r\n     */\r\n    public readonly vector: FlowGraphDataConnection<Vector3>;\r\n    /**\r\n     * Output connection: The x component of the vector.\r\n     */\r\n    public readonly x: FlowGraphDataConnection<number>;\r\n    /**\r\n     * Output connection: The y component of the vector.\r\n     */\r\n    public readonly y: FlowGraphDataConnection<number>;\r\n    /**\r\n     * Input connection: The z component of the vector.\r\n     */\r\n    public readonly z: FlowGraphDataConnection<number>;\r\n\r\n    constructor(config?: IFlowGraphBlockConfiguration) {\r\n        super(config);\r\n\r\n        this.vector = this._registerDataInput(\"vector\", RichTypeVector3);\r\n        this.x = this._registerDataOutput(\"x\", RichTypeNumber);\r\n        this.y = this._registerDataOutput(\"y\", RichTypeNumber);\r\n        this.z = this._registerDataOutput(\"z\", RichTypeNumber);\r\n    }\r\n\r\n    public _updateOutputs(_context: FlowGraphContext): void {\r\n        const vector = this.vector.getValue(_context);\r\n        this.x.setValue(vector.x, _context);\r\n        this.y.setValue(vector.y, _context);\r\n        this.z.setValue(vector.z, _context);\r\n    }\r\n\r\n    public getClassName(): string {\r\n        return SPLITNAME;\r\n    }\r\n}\r\nRegisterClass(SPLITNAME, FlowGraphSplitVector3Block);\r\n\r\nconst ROTATENAME = \"FGRotateVector3Block\";\r\n/**\r\n * Rotates a vector by a given angle.\r\n */\r\nexport class FlowGraphRotate3dVector3Block extends FlowGraphBlock {\r\n    /**\r\n     * Input connection: The vector to rotate.\r\n     */\r\n    public readonly input: FlowGraphDataConnection<Vector3>;\r\n    /**\r\n     * Input connection: The axis to rotate around.\r\n     */\r\n    public readonly axis: FlowGraphDataConnection<Vector3>;\r\n    /**\r\n     * Input connection: The angle to rotate by.\r\n     */\r\n    public readonly angle: FlowGraphDataConnection<number>;\r\n    /**\r\n     * Output connection: The rotated vector.\r\n     */\r\n    public readonly output: FlowGraphDataConnection<Vector3>;\r\n\r\n    private _cachedQuaternion = new Quaternion();\r\n\r\n    constructor(config?: IFlowGraphBlockConfiguration) {\r\n        super(config);\r\n        this.input = this._registerDataInput(\"input\", RichTypeVector3);\r\n        this.angle = this._registerDataInput(\"angle\", RichTypeNumber);\r\n        this.output = this._registerDataOutput(\"output\", RichTypeVector3);\r\n    }\r\n\r\n    public _updateOutputs(_context: FlowGraphContext): void {\r\n        const rot = Quaternion.RotationAxisToRef(this.axis.getValue(_context), this.angle.getValue(_context), this._cachedQuaternion);\r\n        const input = this.input.getValue(_context);\r\n        const output = this.output.getValue(_context);\r\n        input.applyRotationQuaternionToRef(rot, output);\r\n    }\r\n\r\n    public getClassName(): string {\r\n        return ROTATENAME;\r\n    }\r\n}\r\nRegisterClass(ROTATENAME, FlowGraphRotate3dVector3Block);\r\n\r\nconst TRANSFORMNAME = \"FGTransformVector3Block\";\r\n/**\r\n * Transforms a vector by a given matrix.\r\n * @experimental\r\n */\r\nexport class FlowGraphTransformVector3Block extends FlowGraphBinaryOperationBlock<Matrix, Vector3, Vector3> {\r\n    private _cachedResult: Vector3 = Vector3.Zero();\r\n    constructor(config?: IFlowGraphBlockConfiguration) {\r\n        super(RichTypeMatrix, RichTypeVector3, RichTypeVector3, (left, right) => Vector3.TransformCoordinatesToRef(right, left, this._cachedResult), TRANSFORMNAME, config);\r\n    }\r\n}\r\nRegisterClass(TRANSFORMNAME, FlowGraphTransformVector3Block);\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}