{"ast":null,"code":"/**\n * @internal\n **/\nexport class DepthCullingState {\n  /**\n   * Initializes the state.\n   * @param reset\n   */\n  constructor(reset = true) {\n    this._isDepthTestDirty = false;\n    this._isDepthMaskDirty = false;\n    this._isDepthFuncDirty = false;\n    this._isCullFaceDirty = false;\n    this._isCullDirty = false;\n    this._isZOffsetDirty = false;\n    this._isFrontFaceDirty = false;\n    if (reset) {\n      this.reset();\n    }\n  }\n  get isDirty() {\n    return this._isDepthFuncDirty || this._isDepthTestDirty || this._isDepthMaskDirty || this._isCullFaceDirty || this._isCullDirty || this._isZOffsetDirty || this._isFrontFaceDirty;\n  }\n  get zOffset() {\n    return this._zOffset;\n  }\n  set zOffset(value) {\n    if (this._zOffset === value) {\n      return;\n    }\n    this._zOffset = value;\n    this._isZOffsetDirty = true;\n  }\n  get zOffsetUnits() {\n    return this._zOffsetUnits;\n  }\n  set zOffsetUnits(value) {\n    if (this._zOffsetUnits === value) {\n      return;\n    }\n    this._zOffsetUnits = value;\n    this._isZOffsetDirty = true;\n  }\n  get cullFace() {\n    return this._cullFace;\n  }\n  set cullFace(value) {\n    if (this._cullFace === value) {\n      return;\n    }\n    this._cullFace = value;\n    this._isCullFaceDirty = true;\n  }\n  get cull() {\n    return this._cull;\n  }\n  set cull(value) {\n    if (this._cull === value) {\n      return;\n    }\n    this._cull = value;\n    this._isCullDirty = true;\n  }\n  get depthFunc() {\n    return this._depthFunc;\n  }\n  set depthFunc(value) {\n    if (this._depthFunc === value) {\n      return;\n    }\n    this._depthFunc = value;\n    this._isDepthFuncDirty = true;\n  }\n  get depthMask() {\n    return this._depthMask;\n  }\n  set depthMask(value) {\n    if (this._depthMask === value) {\n      return;\n    }\n    this._depthMask = value;\n    this._isDepthMaskDirty = true;\n  }\n  get depthTest() {\n    return this._depthTest;\n  }\n  set depthTest(value) {\n    if (this._depthTest === value) {\n      return;\n    }\n    this._depthTest = value;\n    this._isDepthTestDirty = true;\n  }\n  get frontFace() {\n    return this._frontFace;\n  }\n  set frontFace(value) {\n    if (this._frontFace === value) {\n      return;\n    }\n    this._frontFace = value;\n    this._isFrontFaceDirty = true;\n  }\n  reset() {\n    this._depthMask = true;\n    this._depthTest = true;\n    this._depthFunc = null;\n    this._cullFace = null;\n    this._cull = null;\n    this._zOffset = 0;\n    this._zOffsetUnits = 0;\n    this._frontFace = null;\n    this._isDepthTestDirty = true;\n    this._isDepthMaskDirty = true;\n    this._isDepthFuncDirty = false;\n    this._isCullFaceDirty = false;\n    this._isCullDirty = false;\n    this._isZOffsetDirty = true;\n    this._isFrontFaceDirty = false;\n  }\n  apply(gl) {\n    if (!this.isDirty) {\n      return;\n    }\n    // Cull\n    if (this._isCullDirty) {\n      if (this.cull) {\n        gl.enable(gl.CULL_FACE);\n      } else {\n        gl.disable(gl.CULL_FACE);\n      }\n      this._isCullDirty = false;\n    }\n    // Cull face\n    if (this._isCullFaceDirty) {\n      gl.cullFace(this.cullFace);\n      this._isCullFaceDirty = false;\n    }\n    // Depth mask\n    if (this._isDepthMaskDirty) {\n      gl.depthMask(this.depthMask);\n      this._isDepthMaskDirty = false;\n    }\n    // Depth test\n    if (this._isDepthTestDirty) {\n      if (this.depthTest) {\n        gl.enable(gl.DEPTH_TEST);\n      } else {\n        gl.disable(gl.DEPTH_TEST);\n      }\n      this._isDepthTestDirty = false;\n    }\n    // Depth func\n    if (this._isDepthFuncDirty) {\n      gl.depthFunc(this.depthFunc);\n      this._isDepthFuncDirty = false;\n    }\n    // zOffset\n    if (this._isZOffsetDirty) {\n      if (this.zOffset || this.zOffsetUnits) {\n        gl.enable(gl.POLYGON_OFFSET_FILL);\n        gl.polygonOffset(this.zOffset, this.zOffsetUnits);\n      } else {\n        gl.disable(gl.POLYGON_OFFSET_FILL);\n      }\n      this._isZOffsetDirty = false;\n    }\n    // Front face\n    if (this._isFrontFaceDirty) {\n      gl.frontFace(this.frontFace);\n      this._isFrontFaceDirty = false;\n    }\n  }\n}","map":{"version":3,"names":["DepthCullingState","constructor","reset","_isDepthTestDirty","_isDepthMaskDirty","_isDepthFuncDirty","_isCullFaceDirty","_isCullDirty","_isZOffsetDirty","_isFrontFaceDirty","isDirty","zOffset","_zOffset","value","zOffsetUnits","_zOffsetUnits","cullFace","_cullFace","cull","_cull","depthFunc","_depthFunc","depthMask","_depthMask","depthTest","_depthTest","frontFace","_frontFace","apply","gl","enable","CULL_FACE","disable","DEPTH_TEST","POLYGON_OFFSET_FILL","polygonOffset"],"sources":["../../../../dev/core/src/States/depthCullingState.ts"],"sourcesContent":["import type { Nullable } from \"../types\";\r\n\r\n/**\r\n * @internal\r\n **/\r\nexport class DepthCullingState {\r\n    protected _isDepthTestDirty = false;\r\n    protected _isDepthMaskDirty = false;\r\n    protected _isDepthFuncDirty = false;\r\n    protected _isCullFaceDirty = false;\r\n    protected _isCullDirty = false;\r\n    protected _isZOffsetDirty = false;\r\n    protected _isFrontFaceDirty = false;\r\n\r\n    protected _depthTest: boolean;\r\n    protected _depthMask: boolean;\r\n    protected _depthFunc: Nullable<number>;\r\n    protected _cull: Nullable<boolean>;\r\n    protected _cullFace: Nullable<number>;\r\n    protected _zOffset: number;\r\n    protected _zOffsetUnits: number;\r\n    protected _frontFace: Nullable<number>;\r\n\r\n    /**\r\n     * Initializes the state.\r\n     * @param reset\r\n     */\r\n    public constructor(reset = true) {\r\n        if (reset) {\r\n            this.reset();\r\n        }\r\n    }\r\n\r\n    public get isDirty(): boolean {\r\n        return (\r\n            this._isDepthFuncDirty ||\r\n            this._isDepthTestDirty ||\r\n            this._isDepthMaskDirty ||\r\n            this._isCullFaceDirty ||\r\n            this._isCullDirty ||\r\n            this._isZOffsetDirty ||\r\n            this._isFrontFaceDirty\r\n        );\r\n    }\r\n\r\n    public get zOffset(): number {\r\n        return this._zOffset;\r\n    }\r\n\r\n    public set zOffset(value: number) {\r\n        if (this._zOffset === value) {\r\n            return;\r\n        }\r\n\r\n        this._zOffset = value;\r\n        this._isZOffsetDirty = true;\r\n    }\r\n\r\n    public get zOffsetUnits(): number {\r\n        return this._zOffsetUnits;\r\n    }\r\n\r\n    public set zOffsetUnits(value: number) {\r\n        if (this._zOffsetUnits === value) {\r\n            return;\r\n        }\r\n\r\n        this._zOffsetUnits = value;\r\n        this._isZOffsetDirty = true;\r\n    }\r\n\r\n    public get cullFace(): Nullable<number> {\r\n        return this._cullFace;\r\n    }\r\n\r\n    public set cullFace(value: Nullable<number>) {\r\n        if (this._cullFace === value) {\r\n            return;\r\n        }\r\n\r\n        this._cullFace = value;\r\n        this._isCullFaceDirty = true;\r\n    }\r\n\r\n    public get cull(): Nullable<boolean> {\r\n        return this._cull;\r\n    }\r\n\r\n    public set cull(value: Nullable<boolean>) {\r\n        if (this._cull === value) {\r\n            return;\r\n        }\r\n\r\n        this._cull = value;\r\n        this._isCullDirty = true;\r\n    }\r\n\r\n    public get depthFunc(): Nullable<number> {\r\n        return this._depthFunc;\r\n    }\r\n\r\n    public set depthFunc(value: Nullable<number>) {\r\n        if (this._depthFunc === value) {\r\n            return;\r\n        }\r\n\r\n        this._depthFunc = value;\r\n        this._isDepthFuncDirty = true;\r\n    }\r\n\r\n    public get depthMask(): boolean {\r\n        return this._depthMask;\r\n    }\r\n\r\n    public set depthMask(value: boolean) {\r\n        if (this._depthMask === value) {\r\n            return;\r\n        }\r\n\r\n        this._depthMask = value;\r\n        this._isDepthMaskDirty = true;\r\n    }\r\n\r\n    public get depthTest(): boolean {\r\n        return this._depthTest;\r\n    }\r\n\r\n    public set depthTest(value: boolean) {\r\n        if (this._depthTest === value) {\r\n            return;\r\n        }\r\n\r\n        this._depthTest = value;\r\n        this._isDepthTestDirty = true;\r\n    }\r\n\r\n    public get frontFace(): Nullable<number> {\r\n        return this._frontFace;\r\n    }\r\n\r\n    public set frontFace(value: Nullable<number>) {\r\n        if (this._frontFace === value) {\r\n            return;\r\n        }\r\n\r\n        this._frontFace = value;\r\n        this._isFrontFaceDirty = true;\r\n    }\r\n\r\n    public reset() {\r\n        this._depthMask = true;\r\n        this._depthTest = true;\r\n        this._depthFunc = null;\r\n        this._cullFace = null;\r\n        this._cull = null;\r\n        this._zOffset = 0;\r\n        this._zOffsetUnits = 0;\r\n        this._frontFace = null;\r\n\r\n        this._isDepthTestDirty = true;\r\n        this._isDepthMaskDirty = true;\r\n        this._isDepthFuncDirty = false;\r\n        this._isCullFaceDirty = false;\r\n        this._isCullDirty = false;\r\n        this._isZOffsetDirty = true;\r\n        this._isFrontFaceDirty = false;\r\n    }\r\n\r\n    public apply(gl: WebGLRenderingContext) {\r\n        if (!this.isDirty) {\r\n            return;\r\n        }\r\n\r\n        // Cull\r\n        if (this._isCullDirty) {\r\n            if (this.cull) {\r\n                gl.enable(gl.CULL_FACE);\r\n            } else {\r\n                gl.disable(gl.CULL_FACE);\r\n            }\r\n\r\n            this._isCullDirty = false;\r\n        }\r\n\r\n        // Cull face\r\n        if (this._isCullFaceDirty) {\r\n            gl.cullFace(<number>this.cullFace);\r\n            this._isCullFaceDirty = false;\r\n        }\r\n\r\n        // Depth mask\r\n        if (this._isDepthMaskDirty) {\r\n            gl.depthMask(this.depthMask);\r\n            this._isDepthMaskDirty = false;\r\n        }\r\n\r\n        // Depth test\r\n        if (this._isDepthTestDirty) {\r\n            if (this.depthTest) {\r\n                gl.enable(gl.DEPTH_TEST);\r\n            } else {\r\n                gl.disable(gl.DEPTH_TEST);\r\n            }\r\n            this._isDepthTestDirty = false;\r\n        }\r\n\r\n        // Depth func\r\n        if (this._isDepthFuncDirty) {\r\n            gl.depthFunc(<number>this.depthFunc);\r\n            this._isDepthFuncDirty = false;\r\n        }\r\n\r\n        // zOffset\r\n        if (this._isZOffsetDirty) {\r\n            if (this.zOffset || this.zOffsetUnits) {\r\n                gl.enable(gl.POLYGON_OFFSET_FILL);\r\n                gl.polygonOffset(this.zOffset, this.zOffsetUnits);\r\n            } else {\r\n                gl.disable(gl.POLYGON_OFFSET_FILL);\r\n            }\r\n\r\n            this._isZOffsetDirty = false;\r\n        }\r\n\r\n        // Front face\r\n        if (this._isFrontFaceDirty) {\r\n            gl.frontFace(<number>this.frontFace);\r\n            this._isFrontFaceDirty = false;\r\n        }\r\n    }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}