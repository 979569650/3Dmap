{"ast":null,"code":"import { Matrix } from \"../Maths/math.vector.js\";\nimport { ShaderMaterial } from \"../Materials/shaderMaterial.js\";\nimport { RenderTargetTexture } from \"../Materials/Textures/renderTargetTexture.js\";\nimport { Color4 } from \"../Maths/math.color.js\";\nimport \"../Shaders/meshUVSpaceRenderer.vertex.js\";\nimport \"../Shaders/meshUVSpaceRenderer.fragment.js\";\n/**\n * Class used to render in the mesh UV space\n * @since 5.49.1\n */\nexport class MeshUVSpaceRenderer {\n  static _GetShader(scene) {\n    if (!scene._meshUVSpaceRendererShader) {\n      const shader = new ShaderMaterial(\"meshUVSpaceRendererShader\", scene, {\n        vertex: \"meshUVSpaceRenderer\",\n        fragment: \"meshUVSpaceRenderer\"\n      }, {\n        attributes: [\"position\", \"normal\", \"uv\"],\n        uniforms: [\"world\", \"projMatrix\"],\n        samplers: [\"textureSampler\"],\n        needAlphaBlending: true\n      });\n      shader.backFaceCulling = false;\n      shader.alphaMode = 2;\n      scene.onDisposeObservable.add(() => {\n        var _a;\n        (_a = scene._meshUVSpaceRendererShader) === null || _a === void 0 ? void 0 : _a.dispose();\n        scene._meshUVSpaceRendererShader = null;\n      });\n      scene._meshUVSpaceRendererShader = shader;\n    }\n    return scene._meshUVSpaceRendererShader;\n  }\n  static _IsRenderTargetTexture(texture) {\n    return texture.renderList !== undefined;\n  }\n  /**\n   * Creates a new MeshUVSpaceRenderer\n   * @param mesh The mesh used for the source UV space\n   * @param scene The scene the mesh belongs to\n   * @param options The options to use when creating the texture\n   */\n  constructor(mesh, scene, options) {\n    this._textureCreatedInternally = false;\n    /**\n     * Clear color of the texture\n     */\n    this.clearColor = new Color4(0, 0, 0, 0);\n    this._mesh = mesh;\n    this._scene = scene;\n    this._options = Object.assign({\n      width: 1024,\n      height: 1024,\n      textureType: 0,\n      generateMipMaps: true,\n      optimizeUVAllocation: true\n    }, options);\n  }\n  /**\n   * Checks if the texture is ready to be used\n   * @returns true if the texture is ready to be used\n   */\n  isReady() {\n    if (!this.texture) {\n      this._createDiffuseRTT();\n    }\n    return MeshUVSpaceRenderer._IsRenderTargetTexture(this.texture) ? this.texture.isReadyForRendering() : this.texture.isReady();\n  }\n  /**\n   * Projects and renders a texture in the mesh UV space\n   * @param texture The texture\n   * @param position The position of the center of projection (world space coordinates)\n   * @param normal The direction of the projection (world space coordinates)\n   * @param size The size of the projection\n   * @param angle The rotation angle around the direction of the projection\n   */\n  renderTexture(texture, position, normal, size, angle = 0) {\n    if (!this.texture) {\n      this._createDiffuseRTT();\n    }\n    if (MeshUVSpaceRenderer._IsRenderTargetTexture(this.texture)) {\n      const matrix = this._createProjectionMatrix(position, normal, size, angle);\n      const shader = MeshUVSpaceRenderer._GetShader(this._scene);\n      shader.setTexture(\"textureSampler\", texture);\n      shader.setMatrix(\"projMatrix\", matrix);\n      this.texture.render();\n    }\n  }\n  /**\n   * Clears the texture map\n   */\n  clear() {\n    if (MeshUVSpaceRenderer._IsRenderTargetTexture(this.texture) && this.texture.renderTarget) {\n      const engine = this._scene.getEngine();\n      engine.bindFramebuffer(this.texture.renderTarget);\n      engine.clear(this.clearColor, true, true, true);\n      engine.unBindFramebuffer(this.texture.renderTarget);\n    }\n  }\n  /**\n   * Disposes of the ressources\n   */\n  dispose() {\n    if (this._textureCreatedInternally) {\n      this.texture.dispose();\n      this._textureCreatedInternally = false;\n    }\n  }\n  _createDiffuseRTT() {\n    this._textureCreatedInternally = true;\n    const texture = this._createRenderTargetTexture(this._options.width, this._options.height);\n    texture.setMaterialForRendering(this._mesh, MeshUVSpaceRenderer._GetShader(this._scene));\n    this.texture = texture;\n  }\n  _createRenderTargetTexture(width, height) {\n    const rtt = new RenderTargetTexture(this._mesh.name + \"_uvspaceTexture\", {\n      width,\n      height\n    }, this._scene, this._options.generateMipMaps, true, this._options.textureType, false, this._options.generateMipMaps ? 3 : 2, false, false, false, 5);\n    rtt.renderParticles = false;\n    rtt.optimizeUVAllocation = !!this._options.optimizeUVAllocation;\n    rtt.onClearObservable.addOnce(() => {\n      this._scene.getEngine().clear(this.clearColor, true, true, true);\n      rtt.onClearObservable.add(() => {}); // this disables clearing the texture for the next frames\n    });\n\n    rtt.renderList = [this._mesh];\n    return rtt;\n  }\n  _createProjectionMatrix(position, normal, size, angle = 0) {\n    const yaw = -Math.atan2(normal.z, normal.x) - Math.PI / 2;\n    const len = Math.sqrt(normal.x * normal.x + normal.z * normal.z);\n    const pitch = Math.atan2(normal.y, len);\n    const p = position.add(normal.scale(size.z * 0.5));\n    const projWorldMatrix = Matrix.RotationYawPitchRoll(yaw, pitch, angle).multiply(Matrix.Translation(p.x, p.y, p.z));\n    const inverseProjWorldMatrix = Matrix.Invert(projWorldMatrix);\n    const projMatrix = Matrix.FromArray([2 / size.x, 0, 0, 0, 0, 2 / size.y, 0, 0, 0, 0, 1 / size.z, 0, 0, 0, 0, 1]);\n    const screenMatrix = Matrix.FromArray([0.5, 0, 0, 0, 0, 0.5, 0, 0, 0, 0, 1, 0, 0.5, 0.5, 0.0, 1]);\n    return inverseProjWorldMatrix.multiply(projMatrix).multiply(screenMatrix);\n  }\n}","map":{"version":3,"names":["Matrix","ShaderMaterial","RenderTargetTexture","Color4","MeshUVSpaceRenderer","_GetShader","scene","_meshUVSpaceRendererShader","shader","vertex","fragment","attributes","uniforms","samplers","needAlphaBlending","backFaceCulling","alphaMode","onDisposeObservable","add","_a","dispose","_IsRenderTargetTexture","texture","renderList","undefined","constructor","mesh","options","_textureCreatedInternally","clearColor","_mesh","_scene","_options","Object","assign","width","height","textureType","generateMipMaps","optimizeUVAllocation","isReady","_createDiffuseRTT","isReadyForRendering","renderTexture","position","normal","size","angle","matrix","_createProjectionMatrix","setTexture","setMatrix","render","clear","renderTarget","engine","getEngine","bindFramebuffer","unBindFramebuffer","_createRenderTargetTexture","setMaterialForRendering","rtt","name","renderParticles","onClearObservable","addOnce","yaw","Math","atan2","z","x","PI","len","sqrt","pitch","y","p","scale","projWorldMatrix","RotationYawPitchRoll","multiply","Translation","inverseProjWorldMatrix","Invert","projMatrix","FromArray","screenMatrix"],"sources":["../../../../dev/core/src/Meshes/meshUVSpaceRenderer.ts"],"sourcesContent":["import type { Texture } from \"core/Materials/Textures/texture\";\r\nimport type { Vector3 } from \"core/Maths/math.vector\";\r\nimport type { Scene } from \"core/scene\";\r\nimport type { AbstractMesh } from \"./abstractMesh\";\r\nimport type { ThinTexture } from \"core/Materials/Textures/thinTexture\";\r\nimport type { BaseTexture } from \"core/Materials/Textures/baseTexture\";\r\nimport type { Nullable } from \"core/types\";\r\nimport { Matrix } from \"core/Maths/math.vector\";\r\nimport { Constants } from \"core/Engines/constants\";\r\nimport { ShaderMaterial } from \"core/Materials/shaderMaterial\";\r\nimport { RenderTargetTexture } from \"core/Materials/Textures/renderTargetTexture\";\r\nimport { Color4 } from \"core/Maths/math.color\";\r\n\r\nimport \"../Shaders/meshUVSpaceRenderer.vertex\";\r\nimport \"../Shaders/meshUVSpaceRenderer.fragment\";\r\n\r\ndeclare module \"../scene\" {\r\n    export interface Scene {\r\n        /** @internal */\r\n        _meshUVSpaceRendererShader: Nullable<ShaderMaterial>;\r\n    }\r\n}\r\n\r\n/**\r\n * Options for the MeshUVSpaceRenderer\r\n * @since 5.49.1\r\n */\r\nexport interface IMeshUVSpaceRendererOptions {\r\n    /**\r\n     * Width of the texture. Default: 1024\r\n     */\r\n    width?: number;\r\n    /**\r\n     * Height of the texture. Default: 1024\r\n     */\r\n    height?: number;\r\n    /**\r\n     * Type of the texture. Default: Constants.TEXTURETYPE_UNSIGNED_BYTE\r\n     */\r\n    textureType?: number;\r\n    /**\r\n     * Generate mip maps. Default: true\r\n     */\r\n    generateMipMaps?: boolean;\r\n    /**\r\n     * Optimize UV allocation. Default: true\r\n     * If you plan to use the texture as a decal map and rotate / offset the texture, you should set this to false\r\n     */\r\n    optimizeUVAllocation?: boolean;\r\n}\r\n\r\n/**\r\n * Class used to render in the mesh UV space\r\n * @since 5.49.1\r\n */\r\nexport class MeshUVSpaceRenderer {\r\n    private _mesh: AbstractMesh;\r\n    private _scene: Scene;\r\n    private _options: Required<IMeshUVSpaceRendererOptions>;\r\n    private _textureCreatedInternally = false;\r\n\r\n    private static _GetShader(scene: Scene): ShaderMaterial {\r\n        if (!scene._meshUVSpaceRendererShader) {\r\n            const shader = new ShaderMaterial(\r\n                \"meshUVSpaceRendererShader\",\r\n                scene,\r\n                {\r\n                    vertex: \"meshUVSpaceRenderer\",\r\n                    fragment: \"meshUVSpaceRenderer\",\r\n                },\r\n                {\r\n                    attributes: [\"position\", \"normal\", \"uv\"],\r\n                    uniforms: [\"world\", \"projMatrix\"],\r\n                    samplers: [\"textureSampler\"],\r\n                    needAlphaBlending: true,\r\n                }\r\n            );\r\n            shader.backFaceCulling = false;\r\n            shader.alphaMode = Constants.ALPHA_COMBINE;\r\n\r\n            scene.onDisposeObservable.add(() => {\r\n                scene._meshUVSpaceRendererShader?.dispose();\r\n                scene._meshUVSpaceRendererShader = null;\r\n            });\r\n\r\n            scene._meshUVSpaceRendererShader = shader;\r\n        }\r\n\r\n        return scene._meshUVSpaceRendererShader;\r\n    }\r\n\r\n    private static _IsRenderTargetTexture(texture: ThinTexture | RenderTargetTexture): texture is RenderTargetTexture {\r\n        return (texture as RenderTargetTexture).renderList !== undefined;\r\n    }\r\n\r\n    /**\r\n     * Clear color of the texture\r\n     */\r\n    public clearColor = new Color4(0, 0, 0, 0);\r\n\r\n    /**\r\n     * Target texture used for rendering\r\n     * If you don't set the property, a RenderTargetTexture will be created internally given the options provided to the constructor.\r\n     * If you provide a RenderTargetTexture, it will be used directly.\r\n     */\r\n    public texture: Texture;\r\n\r\n    /**\r\n     * Creates a new MeshUVSpaceRenderer\r\n     * @param mesh The mesh used for the source UV space\r\n     * @param scene The scene the mesh belongs to\r\n     * @param options The options to use when creating the texture\r\n     */\r\n    constructor(mesh: AbstractMesh, scene: Scene, options?: IMeshUVSpaceRendererOptions) {\r\n        this._mesh = mesh;\r\n        this._scene = scene;\r\n        this._options = {\r\n            width: 1024,\r\n            height: 1024,\r\n            textureType: Constants.TEXTURETYPE_UNSIGNED_BYTE,\r\n            generateMipMaps: true,\r\n            optimizeUVAllocation: true,\r\n            ...options,\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Checks if the texture is ready to be used\r\n     * @returns true if the texture is ready to be used\r\n     */\r\n    public isReady(): boolean {\r\n        if (!this.texture) {\r\n            this._createDiffuseRTT();\r\n        }\r\n\r\n        return MeshUVSpaceRenderer._IsRenderTargetTexture(this.texture) ? this.texture.isReadyForRendering() : this.texture.isReady();\r\n    }\r\n\r\n    /**\r\n     * Projects and renders a texture in the mesh UV space\r\n     * @param texture The texture\r\n     * @param position The position of the center of projection (world space coordinates)\r\n     * @param normal The direction of the projection (world space coordinates)\r\n     * @param size The size of the projection\r\n     * @param angle The rotation angle around the direction of the projection\r\n     */\r\n    public renderTexture(texture: BaseTexture, position: Vector3, normal: Vector3, size: Vector3, angle = 0): void {\r\n        if (!this.texture) {\r\n            this._createDiffuseRTT();\r\n        }\r\n\r\n        if (MeshUVSpaceRenderer._IsRenderTargetTexture(this.texture)) {\r\n            const matrix = this._createProjectionMatrix(position, normal, size, angle);\r\n            const shader = MeshUVSpaceRenderer._GetShader(this._scene);\r\n\r\n            shader.setTexture(\"textureSampler\", texture);\r\n            shader.setMatrix(\"projMatrix\", matrix);\r\n\r\n            this.texture.render();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Clears the texture map\r\n     */\r\n    public clear(): void {\r\n        if (MeshUVSpaceRenderer._IsRenderTargetTexture(this.texture) && this.texture.renderTarget) {\r\n            const engine = this._scene.getEngine();\r\n\r\n            engine.bindFramebuffer(this.texture.renderTarget);\r\n            engine.clear(this.clearColor, true, true, true);\r\n            engine.unBindFramebuffer(this.texture.renderTarget);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Disposes of the ressources\r\n     */\r\n    public dispose() {\r\n        if (this._textureCreatedInternally) {\r\n            this.texture.dispose();\r\n            this._textureCreatedInternally = false;\r\n        }\r\n    }\r\n\r\n    private _createDiffuseRTT(): void {\r\n        this._textureCreatedInternally = true;\r\n\r\n        const texture = this._createRenderTargetTexture(this._options.width, this._options.height);\r\n\r\n        texture.setMaterialForRendering(this._mesh, MeshUVSpaceRenderer._GetShader(this._scene));\r\n\r\n        this.texture = texture;\r\n    }\r\n\r\n    private _createRenderTargetTexture(width: number, height: number): RenderTargetTexture {\r\n        const rtt = new RenderTargetTexture(\r\n            this._mesh.name + \"_uvspaceTexture\",\r\n            { width, height },\r\n            this._scene,\r\n            this._options.generateMipMaps,\r\n            true,\r\n            this._options.textureType,\r\n            false,\r\n            this._options.generateMipMaps ? Constants.TEXTURE_TRILINEAR_SAMPLINGMODE : Constants.TEXTURE_BILINEAR_SAMPLINGMODE,\r\n            false,\r\n            false,\r\n            false,\r\n            Constants.TEXTUREFORMAT_RGBA\r\n        );\r\n\r\n        rtt.renderParticles = false;\r\n        rtt.optimizeUVAllocation = !!this._options.optimizeUVAllocation;\r\n\r\n        rtt.onClearObservable.addOnce(() => {\r\n            this._scene.getEngine().clear(this.clearColor, true, true, true);\r\n            rtt.onClearObservable.add(() => {}); // this disables clearing the texture for the next frames\r\n        });\r\n\r\n        rtt.renderList = [this._mesh];\r\n\r\n        return rtt;\r\n    }\r\n\r\n    private _createProjectionMatrix(position: Vector3, normal: Vector3, size: Vector3, angle = 0): Matrix {\r\n        const yaw = -Math.atan2(normal.z, normal.x) - Math.PI / 2;\r\n        const len = Math.sqrt(normal.x * normal.x + normal.z * normal.z);\r\n        const pitch = Math.atan2(normal.y, len);\r\n\r\n        const p = position.add(normal.scale(size.z * 0.5));\r\n\r\n        const projWorldMatrix = Matrix.RotationYawPitchRoll(yaw, pitch, angle).multiply(Matrix.Translation(p.x, p.y, p.z));\r\n        const inverseProjWorldMatrix = Matrix.Invert(projWorldMatrix);\r\n\r\n        const projMatrix = Matrix.FromArray([2 / size.x, 0, 0, 0, 0, 2 / size.y, 0, 0, 0, 0, 1 / size.z, 0, 0, 0, 0, 1]);\r\n\r\n        const screenMatrix = Matrix.FromArray([0.5, 0, 0, 0, 0, 0.5, 0, 0, 0, 0, 1, 0, 0.5, 0.5, 0.0, 1]);\r\n\r\n        return inverseProjWorldMatrix.multiply(projMatrix).multiply(screenMatrix);\r\n    }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}