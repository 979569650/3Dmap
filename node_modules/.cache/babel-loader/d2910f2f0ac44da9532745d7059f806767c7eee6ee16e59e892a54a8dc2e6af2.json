{"ast":null,"code":"import { RichTypeNumber, RichTypeVector4 } from \"../../../flowGraphRichTypes.js\";\nimport { FlowGraphBinaryOperationBlock } from \"../flowGraphBinaryOperationBlock.js\";\nimport { Vector4 } from \"../../../../Maths/math.vector.js\";\nimport { FlowGraphUnaryOperationBlock } from \"../flowGraphUnaryOperationBlock.js\";\nimport { FlowGraphBlock } from \"../../../flowGraphBlock.js\";\nimport { RegisterClass } from \"../../../../Misc/typeStore.js\";\nconst ADDNAME = \"FGAddVector4Block\";\n/**\n * Add two vectors together.\n * @experimental\n */\nexport class FlowGraphAddVector4Block extends FlowGraphBinaryOperationBlock {\n  constructor(config) {\n    super(RichTypeVector4, RichTypeVector4, RichTypeVector4, (left, right) => left.add(right), ADDNAME, config);\n  }\n}\nRegisterClass(ADDNAME, FlowGraphAddVector4Block);\nconst SUBNAME = \"FGSubtractVector4Block\";\n/**\n * Subtract two vectors.\n * @experimental\n */\nexport class FlowGraphSubtractVector4Block extends FlowGraphBinaryOperationBlock {\n  constructor(config) {\n    super(RichTypeVector4, RichTypeVector4, RichTypeVector4, (left, right) => left.subtract(right), SUBNAME, config);\n  }\n}\nRegisterClass(SUBNAME, FlowGraphSubtractVector4Block);\nconst MULNAME = \"FGMultiplyVector4Block\";\n/**\n * Multiply two vectors together.\n * @experimental\n */\nexport class FlowGraphMultiplyVector4Block extends FlowGraphBinaryOperationBlock {\n  constructor(config) {\n    super(RichTypeVector4, RichTypeVector4, RichTypeVector4, (left, right) => left.multiply(right), MULNAME, config);\n  }\n}\nRegisterClass(MULNAME, FlowGraphMultiplyVector4Block);\nconst DIVNAME = \"FGDivideVector4Block\";\n/**\n * Divide two vectors.\n * @experimental\n */\nexport class FlowGraphDivideVector4Block extends FlowGraphBinaryOperationBlock {\n  constructor(config) {\n    super(RichTypeVector4, RichTypeVector4, RichTypeVector4, (left, right) => left.divide(right), DIVNAME, config);\n  }\n}\nRegisterClass(DIVNAME, FlowGraphDivideVector4Block);\nconst SCALNAME = \"FGScaleVector4Block\";\n/**\n * Scale a vector by a number.\n * @experimental\n */\nexport class FlowGraphScaleVector4Block extends FlowGraphBinaryOperationBlock {\n  constructor(config) {\n    super(RichTypeVector4, RichTypeNumber, RichTypeVector4, (left, right) => left.scale(right), SCALNAME, config);\n  }\n}\nRegisterClass(SCALNAME, FlowGraphScaleVector4Block);\nconst LENGTHNAME = \"FGLengthVector4Block\";\n/**\n * Get the length of a vector.\n * @experimental\n */\nexport class FlowGraphLengthVector4Block extends FlowGraphUnaryOperationBlock {\n  constructor(config) {\n    super(RichTypeVector4, RichTypeNumber, value => value.length(), LENGTHNAME, config);\n  }\n}\nRegisterClass(LENGTHNAME, FlowGraphLengthVector4Block);\nconst NORMALIZENAME = \"FGNormalizeVector4Block\";\n/**\n * Normalize a vector.\n * @experimental\n */\nexport class FlowGraphNormalizeVector4Block extends FlowGraphUnaryOperationBlock {\n  constructor(config) {\n    super(RichTypeVector4, RichTypeVector4, value => {\n      const clone = value.clone();\n      clone.normalize();\n      return clone;\n    }, NORMALIZENAME, config);\n  }\n  getClassName() {\n    return NORMALIZENAME;\n  }\n}\nRegisterClass(NORMALIZENAME, FlowGraphNormalizeVector4Block);\nconst CREATENAME = \"FGCreateVector4Block\";\n/**\n * Create a vector from its components.\n * @experimental\n */\nexport class FlowGraphCreateVector4Block extends FlowGraphBlock {\n  constructor(config) {\n    super(config);\n    this._cachedVector = Vector4.Zero();\n    this.x = this._registerDataInput(\"x\", RichTypeNumber);\n    this.y = this._registerDataInput(\"y\", RichTypeNumber);\n    this.z = this._registerDataInput(\"y\", RichTypeNumber);\n    this.w = this._registerDataInput(\"w\", RichTypeNumber);\n    this.vector = this._registerDataOutput(\"vector\", RichTypeVector4);\n  }\n  _updateOutputs(_context) {\n    this._cachedVector.x = this.x.getValue(_context);\n    this._cachedVector.y = this.y.getValue(_context);\n    this._cachedVector.z = this.z.getValue(_context);\n    this._cachedVector.w = this.w.getValue(_context);\n    this.vector.setValue(this._cachedVector, _context);\n  }\n  getClassName() {\n    return CREATENAME;\n  }\n}\nRegisterClass(CREATENAME, FlowGraphCreateVector4Block);\nconst SPLITNAME = \"FGSplitVector4Block\";\n/**\n * Split a vector into its components.\n * @experimental\n */\nexport class FlowGraphSplitVector4Block extends FlowGraphBlock {\n  constructor(config) {\n    super(config);\n    this.vector = this._registerDataInput(\"vector\", RichTypeVector4);\n    this.x = this._registerDataOutput(\"x\", RichTypeNumber);\n    this.y = this._registerDataOutput(\"y\", RichTypeNumber);\n    this.z = this._registerDataOutput(\"z\", RichTypeNumber);\n    this.w = this._registerDataOutput(\"w\", RichTypeNumber);\n  }\n  _updateOutputs(_context) {\n    const vector = this.vector.getValue(_context);\n    this.x.setValue(vector.x, _context);\n    this.y.setValue(vector.y, _context);\n    this.z.setValue(vector.z, _context);\n    this.w.setValue(vector.w, _context);\n  }\n  getClassName() {\n    return SPLITNAME;\n  }\n}\nRegisterClass(SPLITNAME, FlowGraphSplitVector4Block);","map":{"version":3,"names":["RichTypeNumber","RichTypeVector4","FlowGraphBinaryOperationBlock","Vector4","FlowGraphUnaryOperationBlock","FlowGraphBlock","RegisterClass","ADDNAME","FlowGraphAddVector4Block","constructor","config","left","right","add","SUBNAME","FlowGraphSubtractVector4Block","subtract","MULNAME","FlowGraphMultiplyVector4Block","multiply","DIVNAME","FlowGraphDivideVector4Block","divide","SCALNAME","FlowGraphScaleVector4Block","scale","LENGTHNAME","FlowGraphLengthVector4Block","value","length","NORMALIZENAME","FlowGraphNormalizeVector4Block","clone","normalize","getClassName","CREATENAME","FlowGraphCreateVector4Block","_cachedVector","Zero","x","_registerDataInput","y","z","w","vector","_registerDataOutput","_updateOutputs","_context","getValue","setValue","SPLITNAME","FlowGraphSplitVector4Block"],"sources":["../../../../../../../dev/core/src/FlowGraph/Blocks/Data/Math/flowGraphVector4MathBlocks.ts"],"sourcesContent":["import { RichTypeNumber, RichTypeVector4 } from \"core/FlowGraph/flowGraphRichTypes\";\r\nimport { FlowGraphBinaryOperationBlock } from \"../flowGraphBinaryOperationBlock\";\r\nimport { Vector4 } from \"../../../../Maths/math.vector\";\r\nimport { FlowGraphUnaryOperationBlock } from \"../flowGraphUnaryOperationBlock\";\r\nimport type { IFlowGraphBlockConfiguration } from \"../../../flowGraphBlock\";\r\nimport { FlowGraphBlock } from \"../../../flowGraphBlock\";\r\nimport { RegisterClass } from \"../../../../Misc/typeStore\";\r\nimport type { FlowGraphContext } from \"../../../flowGraphContext\";\r\nimport type { FlowGraphDataConnection } from \"../../../flowGraphDataConnection\";\r\n\r\nconst ADDNAME = \"FGAddVector4Block\";\r\n/**\r\n * Add two vectors together.\r\n * @experimental\r\n */\r\nexport class FlowGraphAddVector4Block extends FlowGraphBinaryOperationBlock<Vector4, Vector4, Vector4> {\r\n    constructor(config?: IFlowGraphBlockConfiguration) {\r\n        super(RichTypeVector4, RichTypeVector4, RichTypeVector4, (left, right) => left.add(right), ADDNAME, config);\r\n    }\r\n}\r\nRegisterClass(ADDNAME, FlowGraphAddVector4Block);\r\n\r\nconst SUBNAME = \"FGSubtractVector4Block\";\r\n/**\r\n * Subtract two vectors.\r\n * @experimental\r\n */\r\nexport class FlowGraphSubtractVector4Block extends FlowGraphBinaryOperationBlock<Vector4, Vector4, Vector4> {\r\n    constructor(config?: IFlowGraphBlockConfiguration) {\r\n        super(RichTypeVector4, RichTypeVector4, RichTypeVector4, (left, right) => left.subtract(right), SUBNAME, config);\r\n    }\r\n}\r\nRegisterClass(SUBNAME, FlowGraphSubtractVector4Block);\r\n\r\nconst MULNAME = \"FGMultiplyVector4Block\";\r\n/**\r\n * Multiply two vectors together.\r\n * @experimental\r\n */\r\nexport class FlowGraphMultiplyVector4Block extends FlowGraphBinaryOperationBlock<Vector4, Vector4, Vector4> {\r\n    constructor(config?: IFlowGraphBlockConfiguration) {\r\n        super(RichTypeVector4, RichTypeVector4, RichTypeVector4, (left, right) => left.multiply(right), MULNAME, config);\r\n    }\r\n}\r\nRegisterClass(MULNAME, FlowGraphMultiplyVector4Block);\r\n\r\nconst DIVNAME = \"FGDivideVector4Block\";\r\n/**\r\n * Divide two vectors.\r\n * @experimental\r\n */\r\nexport class FlowGraphDivideVector4Block extends FlowGraphBinaryOperationBlock<Vector4, Vector4, Vector4> {\r\n    constructor(config?: IFlowGraphBlockConfiguration) {\r\n        super(RichTypeVector4, RichTypeVector4, RichTypeVector4, (left, right) => left.divide(right), DIVNAME, config);\r\n    }\r\n}\r\nRegisterClass(DIVNAME, FlowGraphDivideVector4Block);\r\n\r\nconst SCALNAME = \"FGScaleVector4Block\";\r\n/**\r\n * Scale a vector by a number.\r\n * @experimental\r\n */\r\nexport class FlowGraphScaleVector4Block extends FlowGraphBinaryOperationBlock<Vector4, number, Vector4> {\r\n    constructor(config?: IFlowGraphBlockConfiguration) {\r\n        super(RichTypeVector4, RichTypeNumber, RichTypeVector4, (left, right) => left.scale(right), SCALNAME, config);\r\n    }\r\n}\r\nRegisterClass(SCALNAME, FlowGraphScaleVector4Block);\r\n\r\nconst LENGTHNAME = \"FGLengthVector4Block\";\r\n/**\r\n * Get the length of a vector.\r\n * @experimental\r\n */\r\nexport class FlowGraphLengthVector4Block extends FlowGraphUnaryOperationBlock<Vector4, number> {\r\n    constructor(config?: IFlowGraphBlockConfiguration) {\r\n        super(RichTypeVector4, RichTypeNumber, (value) => value.length(), LENGTHNAME, config);\r\n    }\r\n}\r\nRegisterClass(LENGTHNAME, FlowGraphLengthVector4Block);\r\n\r\nconst NORMALIZENAME = \"FGNormalizeVector4Block\";\r\n/**\r\n * Normalize a vector.\r\n * @experimental\r\n */\r\nexport class FlowGraphNormalizeVector4Block extends FlowGraphUnaryOperationBlock<Vector4, Vector4> {\r\n    constructor(config?: IFlowGraphBlockConfiguration) {\r\n        super(\r\n            RichTypeVector4,\r\n            RichTypeVector4,\r\n            (value: Vector4) => {\r\n                const clone = value.clone();\r\n                clone.normalize();\r\n                return clone;\r\n            },\r\n            NORMALIZENAME,\r\n            config\r\n        );\r\n    }\r\n\r\n    public getClassName(): string {\r\n        return NORMALIZENAME;\r\n    }\r\n}\r\nRegisterClass(NORMALIZENAME, FlowGraphNormalizeVector4Block);\r\n\r\nconst CREATENAME = \"FGCreateVector4Block\";\r\n/**\r\n * Create a vector from its components.\r\n * @experimental\r\n */\r\nexport class FlowGraphCreateVector4Block extends FlowGraphBlock {\r\n    /**\r\n     * Input connection: The x component of the vector.\r\n     */\r\n    public readonly x: FlowGraphDataConnection<number>;\r\n    /**\r\n     * Input connection: The y component of the vector.\r\n     */\r\n    public readonly y: FlowGraphDataConnection<number>;\r\n    /**\r\n     * Input connection: The z component of the vector.\r\n     */\r\n    public readonly z: FlowGraphDataConnection<number>;\r\n    /**\r\n     * Input connection: The w component of the vector.\r\n     */\r\n    public readonly w: FlowGraphDataConnection<number>;\r\n    /**\r\n     * Output connection: The created vector.\r\n     */\r\n    public readonly vector: FlowGraphDataConnection<Vector4>;\r\n\r\n    private _cachedVector: Vector4 = Vector4.Zero();\r\n\r\n    constructor(config?: IFlowGraphBlockConfiguration) {\r\n        super(config);\r\n\r\n        this.x = this._registerDataInput(\"x\", RichTypeNumber);\r\n        this.y = this._registerDataInput(\"y\", RichTypeNumber);\r\n        this.z = this._registerDataInput(\"y\", RichTypeNumber);\r\n        this.w = this._registerDataInput(\"w\", RichTypeNumber);\r\n        this.vector = this._registerDataOutput(\"vector\", RichTypeVector4);\r\n    }\r\n\r\n    public _updateOutputs(_context: FlowGraphContext): void {\r\n        this._cachedVector.x = this.x.getValue(_context);\r\n        this._cachedVector.y = this.y.getValue(_context);\r\n        this._cachedVector.z = this.z.getValue(_context);\r\n        this._cachedVector.w = this.w.getValue(_context);\r\n        this.vector.setValue(this._cachedVector, _context);\r\n    }\r\n\r\n    public getClassName(): string {\r\n        return CREATENAME;\r\n    }\r\n}\r\nRegisterClass(CREATENAME, FlowGraphCreateVector4Block);\r\n\r\nconst SPLITNAME = \"FGSplitVector4Block\";\r\n/**\r\n * Split a vector into its components.\r\n * @experimental\r\n */\r\nexport class FlowGraphSplitVector4Block extends FlowGraphBlock {\r\n    /**\r\n     * Input connection: The vector to split.\r\n     */\r\n    public readonly vector: FlowGraphDataConnection<Vector4>;\r\n    /**\r\n     * Output connection: The x component of the vector.\r\n     */\r\n    public readonly x: FlowGraphDataConnection<number>;\r\n    /**\r\n     * Output connection: The y component of the vector.\r\n     */\r\n    public readonly y: FlowGraphDataConnection<number>;\r\n    /**\r\n     * Input connection: The z component of the vector.\r\n     */\r\n    public readonly z: FlowGraphDataConnection<number>;\r\n    /**\r\n     * Input connection: The w component of the vector.\r\n     */\r\n    public readonly w: FlowGraphDataConnection<number>;\r\n\r\n    constructor(config?: IFlowGraphBlockConfiguration) {\r\n        super(config);\r\n\r\n        this.vector = this._registerDataInput(\"vector\", RichTypeVector4);\r\n        this.x = this._registerDataOutput(\"x\", RichTypeNumber);\r\n        this.y = this._registerDataOutput(\"y\", RichTypeNumber);\r\n        this.z = this._registerDataOutput(\"z\", RichTypeNumber);\r\n        this.w = this._registerDataOutput(\"w\", RichTypeNumber);\r\n    }\r\n\r\n    public _updateOutputs(_context: FlowGraphContext): void {\r\n        const vector = this.vector.getValue(_context);\r\n        this.x.setValue(vector.x, _context);\r\n        this.y.setValue(vector.y, _context);\r\n        this.z.setValue(vector.z, _context);\r\n        this.w.setValue(vector.w, _context);\r\n    }\r\n\r\n    public getClassName(): string {\r\n        return SPLITNAME;\r\n    }\r\n}\r\nRegisterClass(SPLITNAME, FlowGraphSplitVector4Block);\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}