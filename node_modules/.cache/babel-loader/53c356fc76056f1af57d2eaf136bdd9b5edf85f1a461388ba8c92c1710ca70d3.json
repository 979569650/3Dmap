{"ast":null,"code":"import { RichTypeNumber, RichTypeVector2 } from \"../../../flowGraphRichTypes.js\";\nimport { Vector2 } from \"../../../../Maths/math.vector.js\";\nimport { FlowGraphBinaryOperationBlock } from \"../flowGraphBinaryOperationBlock.js\";\nimport { FlowGraphUnaryOperationBlock } from \"../flowGraphUnaryOperationBlock.js\";\nimport { FlowGraphBlock } from \"../../../flowGraphBlock.js\";\nimport { RegisterClass } from \"../../../../Misc/typeStore.js\";\nconst ADDNAME = \"FGAddVector2Block\";\n/**\n * Adds two vectors together.\n * @experimental\n */\nexport class FlowGraphAddVector2Block extends FlowGraphBinaryOperationBlock {\n  constructor(config) {\n    super(RichTypeVector2, RichTypeVector2, RichTypeVector2, (left, right) => left.add(right), ADDNAME, config);\n  }\n}\nRegisterClass(ADDNAME, FlowGraphAddVector2Block);\nconst SUBNAME = \"FGSubtractVector2Block\";\n/**\n * Subtracts two vectors.\n * @experimental\n */\nexport class FlowGraphSubtractVector2Block extends FlowGraphBinaryOperationBlock {\n  constructor(config) {\n    super(RichTypeVector2, RichTypeVector2, RichTypeVector2, (left, right) => left.subtract(right), SUBNAME, config);\n  }\n}\nRegisterClass(SUBNAME, FlowGraphSubtractVector2Block);\nconst MULNAME = \"FGMultiplyVector2Block\";\n/**\n * Multiplies two vectors together.\n * @experimental\n */\nexport class FlowGraphMultiplyVector2Block extends FlowGraphBinaryOperationBlock {\n  constructor(config) {\n    super(RichTypeVector2, RichTypeVector2, RichTypeVector2, (left, right) => left.multiply(right), MULNAME, config);\n  }\n}\nRegisterClass(MULNAME, FlowGraphMultiplyVector2Block);\nconst DIVNAME = \"FGDivideVector2Block\";\n/**\n * Divides two vectors.\n * @experimental\n */\nexport class FlowGraphDivideVector2Block extends FlowGraphBinaryOperationBlock {\n  constructor(config) {\n    super(RichTypeVector2, RichTypeVector2, RichTypeVector2, (left, right) => left.divide(right), DIVNAME, config);\n  }\n}\nRegisterClass(DIVNAME, FlowGraphDivideVector2Block);\nconst SCALENAME = \"FGScaleVector2Block\";\n/**\n * Scales a vector by a given factor.\n * @experimental\n */\nexport class FlowGraphScaleVector2Block extends FlowGraphBinaryOperationBlock {\n  constructor(config) {\n    super(RichTypeVector2, RichTypeNumber, RichTypeVector2, (left, right) => left.scale(right), SCALENAME, config);\n  }\n}\nRegisterClass(SCALENAME, FlowGraphScaleVector2Block);\nconst LENNAME = \"FGLengthVector2Block\";\n/**\n * Gets the length of a vector.\n * @experimental\n */\nexport class FlowGraphLengthVector2Block extends FlowGraphUnaryOperationBlock {\n  constructor(config) {\n    super(RichTypeVector2, RichTypeNumber, value => value.length(), LENNAME, config);\n  }\n}\nRegisterClass(LENNAME, FlowGraphLengthVector2Block);\nconst NORMALIZENAME = \"FGNormalizeVector2Block\";\n/**\n * Normalizes a vector.\n * @experimental\n */\nexport class FlowGraphNormalizeVector2Block extends FlowGraphUnaryOperationBlock {\n  constructor(config) {\n    super(RichTypeVector2, RichTypeVector2, value => {\n      const copy = value.clone();\n      copy.normalize();\n      return copy;\n    }, NORMALIZENAME, config);\n  }\n}\nRegisterClass(NORMALIZENAME, FlowGraphNormalizeVector2Block);\nconst CREATENAME = \"FGCreateVector2Block\";\n/**\n * Creates a vector from two components.\n */\nexport class FlowGraphCreateVector2Block extends FlowGraphBlock {\n  constructor(config) {\n    super(config);\n    this._cachedVector = Vector2.Zero();\n    this.x = this._registerDataInput(\"x\", RichTypeNumber);\n    this.y = this._registerDataInput(\"y\", RichTypeNumber);\n    this.vector = this._registerDataOutput(\"vector\", RichTypeVector2);\n  }\n  _updateOutputs(_context) {\n    this._cachedVector.x = this.x.getValue(_context);\n    this._cachedVector.y = this.y.getValue(_context);\n    this.vector.setValue(this._cachedVector, _context);\n  }\n}\nRegisterClass(CREATENAME, FlowGraphCreateVector2Block);\nconst SPLITNAME = \"FGSplitVector2Block\";\n/**\n * Split a vector into its components.\n */\nexport class FlowGraphSplitVector2Block extends FlowGraphBlock {\n  constructor(config) {\n    super(config);\n    this.vector = this._registerDataInput(\"vector\", RichTypeVector2);\n    this.x = this._registerDataOutput(\"x\", RichTypeNumber);\n    this.y = this._registerDataOutput(\"y\", RichTypeNumber);\n  }\n  _updateOutputs(_context) {\n    const vector = this.vector.getValue(_context);\n    this.x.setValue(vector.x, _context);\n    this.y.setValue(vector.y, _context);\n  }\n}\nRegisterClass(SPLITNAME, FlowGraphSplitVector2Block);\nconst ROTATENAME = \"FGRotate2dVector2Block\";\n/**\n * Rotates a vector by a given angle.\n */\nexport class FlowGraphRotate2dVector2Block extends FlowGraphBlock {\n  constructor(config) {\n    super(config);\n    this._cachedVector = Vector2.Zero();\n    this.input = this._registerDataInput(\"input\", RichTypeVector2);\n    this.angle = this._registerDataInput(\"angle\", RichTypeNumber);\n    this.output = this._registerDataOutput(\"output\", RichTypeVector2);\n  }\n  _updateOutputs(_context) {\n    const input = this.input.getValue(_context);\n    const angle = this.angle.getValue(_context);\n    this._cachedVector.x = input.x * Math.cos(angle) - input.y * Math.sin(angle);\n    this._cachedVector.y = input.x * Math.sin(angle) + input.y * Math.cos(angle);\n    this.output.setValue(this._cachedVector, _context);\n  }\n}\nRegisterClass(ROTATENAME, FlowGraphRotate2dVector2Block);","map":{"version":3,"names":["RichTypeNumber","RichTypeVector2","Vector2","FlowGraphBinaryOperationBlock","FlowGraphUnaryOperationBlock","FlowGraphBlock","RegisterClass","ADDNAME","FlowGraphAddVector2Block","constructor","config","left","right","add","SUBNAME","FlowGraphSubtractVector2Block","subtract","MULNAME","FlowGraphMultiplyVector2Block","multiply","DIVNAME","FlowGraphDivideVector2Block","divide","SCALENAME","FlowGraphScaleVector2Block","scale","LENNAME","FlowGraphLengthVector2Block","value","length","NORMALIZENAME","FlowGraphNormalizeVector2Block","copy","clone","normalize","CREATENAME","FlowGraphCreateVector2Block","_cachedVector","Zero","x","_registerDataInput","y","vector","_registerDataOutput","_updateOutputs","_context","getValue","setValue","SPLITNAME","FlowGraphSplitVector2Block","ROTATENAME","FlowGraphRotate2dVector2Block","input","angle","output","Math","cos","sin"],"sources":["../../../../../../../dev/core/src/FlowGraph/Blocks/Data/Math/flowGraphVector2MathBlocks.ts"],"sourcesContent":["import { RichTypeNumber, RichTypeVector2 } from \"core/FlowGraph/flowGraphRichTypes\";\r\nimport { Vector2 } from \"../../../../Maths/math.vector\";\r\nimport { FlowGraphBinaryOperationBlock } from \"../flowGraphBinaryOperationBlock\";\r\nimport { FlowGraphUnaryOperationBlock } from \"../flowGraphUnaryOperationBlock\";\r\nimport type { IFlowGraphBlockConfiguration } from \"../../../flowGraphBlock\";\r\nimport { FlowGraphBlock } from \"../../../flowGraphBlock\";\r\nimport { RegisterClass } from \"../../../../Misc/typeStore\";\r\nimport type { FlowGraphDataConnection } from \"../../../flowGraphDataConnection\";\r\nimport type { FlowGraphContext } from \"../../../flowGraphContext\";\r\n\r\nconst ADDNAME = \"FGAddVector2Block\";\r\n/**\r\n * Adds two vectors together.\r\n * @experimental\r\n */\r\nexport class FlowGraphAddVector2Block extends FlowGraphBinaryOperationBlock<Vector2, Vector2, Vector2> {\r\n    constructor(config: IFlowGraphBlockConfiguration) {\r\n        super(RichTypeVector2, RichTypeVector2, RichTypeVector2, (left, right) => left.add(right), ADDNAME, config);\r\n    }\r\n}\r\nRegisterClass(ADDNAME, FlowGraphAddVector2Block);\r\n\r\nconst SUBNAME = \"FGSubtractVector2Block\";\r\n/**\r\n * Subtracts two vectors.\r\n * @experimental\r\n */\r\nexport class FlowGraphSubtractVector2Block extends FlowGraphBinaryOperationBlock<Vector2, Vector2, Vector2> {\r\n    constructor(config: IFlowGraphBlockConfiguration) {\r\n        super(RichTypeVector2, RichTypeVector2, RichTypeVector2, (left, right) => left.subtract(right), SUBNAME, config);\r\n    }\r\n}\r\nRegisterClass(SUBNAME, FlowGraphSubtractVector2Block);\r\n\r\nconst MULNAME = \"FGMultiplyVector2Block\";\r\n/**\r\n * Multiplies two vectors together.\r\n * @experimental\r\n */\r\nexport class FlowGraphMultiplyVector2Block extends FlowGraphBinaryOperationBlock<Vector2, Vector2, Vector2> {\r\n    constructor(config: IFlowGraphBlockConfiguration) {\r\n        super(RichTypeVector2, RichTypeVector2, RichTypeVector2, (left, right) => left.multiply(right), MULNAME, config);\r\n    }\r\n}\r\nRegisterClass(MULNAME, FlowGraphMultiplyVector2Block);\r\n\r\nconst DIVNAME = \"FGDivideVector2Block\";\r\n/**\r\n * Divides two vectors.\r\n * @experimental\r\n */\r\nexport class FlowGraphDivideVector2Block extends FlowGraphBinaryOperationBlock<Vector2, Vector2, Vector2> {\r\n    constructor(config: IFlowGraphBlockConfiguration) {\r\n        super(RichTypeVector2, RichTypeVector2, RichTypeVector2, (left, right) => left.divide(right), DIVNAME, config);\r\n    }\r\n}\r\nRegisterClass(DIVNAME, FlowGraphDivideVector2Block);\r\n\r\nconst SCALENAME = \"FGScaleVector2Block\";\r\n/**\r\n * Scales a vector by a given factor.\r\n * @experimental\r\n */\r\nexport class FlowGraphScaleVector2Block extends FlowGraphBinaryOperationBlock<Vector2, number, Vector2> {\r\n    constructor(config?: IFlowGraphBlockConfiguration) {\r\n        super(RichTypeVector2, RichTypeNumber, RichTypeVector2, (left, right) => left.scale(right), SCALENAME, config);\r\n    }\r\n}\r\nRegisterClass(SCALENAME, FlowGraphScaleVector2Block);\r\n\r\nconst LENNAME = \"FGLengthVector2Block\";\r\n/**\r\n * Gets the length of a vector.\r\n * @experimental\r\n */\r\nexport class FlowGraphLengthVector2Block extends FlowGraphUnaryOperationBlock<Vector2, number> {\r\n    constructor(config: IFlowGraphBlockConfiguration) {\r\n        super(RichTypeVector2, RichTypeNumber, (value) => value.length(), LENNAME, config);\r\n    }\r\n}\r\nRegisterClass(LENNAME, FlowGraphLengthVector2Block);\r\n\r\nconst NORMALIZENAME = \"FGNormalizeVector2Block\";\r\n/**\r\n * Normalizes a vector.\r\n * @experimental\r\n */\r\nexport class FlowGraphNormalizeVector2Block extends FlowGraphUnaryOperationBlock<Vector2, Vector2> {\r\n    constructor(config: IFlowGraphBlockConfiguration) {\r\n        super(\r\n            RichTypeVector2,\r\n            RichTypeVector2,\r\n            (value: Vector2) => {\r\n                const copy: Vector2 = value.clone();\r\n                copy.normalize();\r\n                return copy;\r\n            },\r\n            NORMALIZENAME,\r\n            config\r\n        );\r\n    }\r\n}\r\nRegisterClass(NORMALIZENAME, FlowGraphNormalizeVector2Block);\r\n\r\nconst CREATENAME = \"FGCreateVector2Block\";\r\n/**\r\n * Creates a vector from two components.\r\n */\r\nexport class FlowGraphCreateVector2Block extends FlowGraphBlock {\r\n    /**\r\n     * Input connection: The x component of the vector.\r\n     */\r\n    public readonly x: FlowGraphDataConnection<number>;\r\n    /**\r\n     * Input connection: The y component of the vector.\r\n     */\r\n    public readonly y: FlowGraphDataConnection<number>;\r\n    /**\r\n     * Output connection: The created vector.\r\n     */\r\n    public readonly vector: FlowGraphDataConnection<Vector2>;\r\n\r\n    private _cachedVector: Vector2 = Vector2.Zero();\r\n\r\n    constructor(config?: IFlowGraphBlockConfiguration) {\r\n        super(config);\r\n\r\n        this.x = this._registerDataInput(\"x\", RichTypeNumber);\r\n        this.y = this._registerDataInput(\"y\", RichTypeNumber);\r\n        this.vector = this._registerDataOutput(\"vector\", RichTypeVector2);\r\n    }\r\n\r\n    public _updateOutputs(_context: FlowGraphContext): void {\r\n        this._cachedVector.x = this.x.getValue(_context);\r\n        this._cachedVector.y = this.y.getValue(_context);\r\n        this.vector.setValue(this._cachedVector, _context);\r\n    }\r\n}\r\nRegisterClass(CREATENAME, FlowGraphCreateVector2Block);\r\n\r\nconst SPLITNAME = \"FGSplitVector2Block\";\r\n/**\r\n * Split a vector into its components.\r\n */\r\nexport class FlowGraphSplitVector2Block extends FlowGraphBlock {\r\n    /**\r\n     * Input connection: The vector to split.\r\n     */\r\n    public readonly vector: FlowGraphDataConnection<Vector2>;\r\n    /**\r\n     * Output connection: The x component of the vector.\r\n     */\r\n    public readonly x: FlowGraphDataConnection<number>;\r\n    /**\r\n     * Output connection: The y component of the vector.\r\n     */\r\n    public readonly y: FlowGraphDataConnection<number>;\r\n\r\n    constructor(config?: IFlowGraphBlockConfiguration) {\r\n        super(config);\r\n\r\n        this.vector = this._registerDataInput(\"vector\", RichTypeVector2);\r\n        this.x = this._registerDataOutput(\"x\", RichTypeNumber);\r\n        this.y = this._registerDataOutput(\"y\", RichTypeNumber);\r\n    }\r\n\r\n    public _updateOutputs(_context: FlowGraphContext): void {\r\n        const vector = this.vector.getValue(_context);\r\n        this.x.setValue(vector.x, _context);\r\n        this.y.setValue(vector.y, _context);\r\n    }\r\n}\r\nRegisterClass(SPLITNAME, FlowGraphSplitVector2Block);\r\n\r\nconst ROTATENAME = \"FGRotate2dVector2Block\";\r\n/**\r\n * Rotates a vector by a given angle.\r\n */\r\nexport class FlowGraphRotate2dVector2Block extends FlowGraphBlock {\r\n    /**\r\n     * Input connection: The vector to rotate.\r\n     */\r\n    public readonly input: FlowGraphDataConnection<Vector2>;\r\n    /**\r\n     * Input connection: The angle to rotate by.\r\n     */\r\n    public readonly angle: FlowGraphDataConnection<number>;\r\n    /**\r\n     * Output connection: The rotated vector.\r\n     */\r\n    public readonly output: FlowGraphDataConnection<Vector2>;\r\n\r\n    private _cachedVector: Vector2 = Vector2.Zero();\r\n\r\n    constructor(config?: IFlowGraphBlockConfiguration) {\r\n        super(config);\r\n        this.input = this._registerDataInput(\"input\", RichTypeVector2);\r\n        this.angle = this._registerDataInput(\"angle\", RichTypeNumber);\r\n        this.output = this._registerDataOutput(\"output\", RichTypeVector2);\r\n    }\r\n\r\n    public _updateOutputs(_context: FlowGraphContext): void {\r\n        const input = this.input.getValue(_context);\r\n        const angle = this.angle.getValue(_context);\r\n        this._cachedVector.x = input.x * Math.cos(angle) - input.y * Math.sin(angle);\r\n        this._cachedVector.y = input.x * Math.sin(angle) + input.y * Math.cos(angle);\r\n        this.output.setValue(this._cachedVector, _context);\r\n    }\r\n}\r\nRegisterClass(ROTATENAME, FlowGraphRotate2dVector2Block);\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}