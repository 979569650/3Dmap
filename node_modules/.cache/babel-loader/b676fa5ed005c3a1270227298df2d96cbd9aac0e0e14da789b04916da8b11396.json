{"ast":null,"code":"/**\n * Class used to store configuration data associated with pointer picking\n */\nexport class PointerPickingConfiguration {\n  constructor() {\n    /**\n     * Gets or sets a predicate used to select candidate meshes for a pointer down event\n     */\n    this.pointerDownFastCheck = false;\n    /**\n     * Gets or sets a predicate used to select candidate meshes for a pointer up event\n     */\n    this.pointerUpFastCheck = false;\n    /**\n     * Gets or sets a predicate used to select candidate meshes for a pointer move event\n     */\n    this.pointerMoveFastCheck = false;\n    /**\n     * Gets or sets a boolean indicating if the user want to entirely skip the picking phase when a pointer move event occurs.\n     */\n    this.skipPointerMovePicking = false;\n    /**\n     * Gets or sets a boolean indicating if the user want to entirely skip the picking phase when a pointer down event occurs.\n     */\n    this.skipPointerDownPicking = false;\n    /**\n     * Gets or sets a boolean indicating if the user want to entirely skip the picking phase when a pointer up event occurs.  Off by default.\n     */\n    this.skipPointerUpPicking = false;\n  }\n}","map":{"version":3,"names":["PointerPickingConfiguration","constructor","pointerDownFastCheck","pointerUpFastCheck","pointerMoveFastCheck","skipPointerMovePicking","skipPointerDownPicking","skipPointerUpPicking"],"sources":["../../../../dev/core/src/Inputs/pointerPickingConfiguration.ts"],"sourcesContent":["import type { AbstractMesh } from \"../Meshes/abstractMesh\";\r\n\r\n/**\r\n * Class used to store configuration data associated with pointer picking\r\n */\r\nexport class PointerPickingConfiguration {\r\n    /**\r\n     * Gets or sets a predicate used to select candidate meshes for a pointer down event\r\n     */\r\n    public pointerDownPredicate: (Mesh: AbstractMesh) => boolean;\r\n    /**\r\n     * Gets or sets a predicate used to select candidate meshes for a pointer up event\r\n     */\r\n    public pointerUpPredicate: (Mesh: AbstractMesh) => boolean;\r\n\r\n    /**\r\n     * Gets or sets a predicate used to select candidate meshes for a pointer move event\r\n     */\r\n    public pointerMovePredicate: (Mesh: AbstractMesh) => boolean;\r\n\r\n    /**\r\n     * Gets or sets a predicate used to select candidate meshes for a pointer down event\r\n     */\r\n    public pointerDownFastCheck = false;\r\n    /**\r\n     * Gets or sets a predicate used to select candidate meshes for a pointer up event\r\n     */\r\n    public pointerUpFastCheck = false;\r\n\r\n    /**\r\n     * Gets or sets a predicate used to select candidate meshes for a pointer move event\r\n     */\r\n    public pointerMoveFastCheck = false;\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if the user want to entirely skip the picking phase when a pointer move event occurs.\r\n     */\r\n    public skipPointerMovePicking = false;\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if the user want to entirely skip the picking phase when a pointer down event occurs.\r\n     */\r\n    public skipPointerDownPicking = false;\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if the user want to entirely skip the picking phase when a pointer up event occurs.  Off by default.\r\n     */\r\n    public skipPointerUpPicking = false;\r\n}\r\n"],"mappings":"AAEA;;;AAGA,OAAM,MAAOA,2BAA2B;EAAxCC,YAAA;IAeI;;;IAGO,KAAAC,oBAAoB,GAAG,KAAK;IACnC;;;IAGO,KAAAC,kBAAkB,GAAG,KAAK;IAEjC;;;IAGO,KAAAC,oBAAoB,GAAG,KAAK;IAEnC;;;IAGO,KAAAC,sBAAsB,GAAG,KAAK;IAErC;;;IAGO,KAAAC,sBAAsB,GAAG,KAAK;IAErC;;;IAGO,KAAAC,oBAAoB,GAAG,KAAK;EACvC"},"metadata":{},"sourceType":"module","externalDependencies":[]}