{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { __decorate } from \"../../../tslib.es6.js\";\nimport { NodeGeometryBlock } from \"../nodeGeometryBlock.js\";\nimport { RegisterClass } from \"../../../Misc/typeStore.js\";\nimport { NodeGeometryBlockConnectionPointTypes } from \"../Enums/nodeGeometryConnectionPointTypes.js\";\nimport { PropertyTypeForEdition, editableInPropertyPage } from \"../../../Decorators/nodeDecorator.js\";\n/**\n * Block used to merge several geometries\n */\nexport class MergeGeometryBlock extends NodeGeometryBlock {\n  /**\n   * Create a new MergeGeometryBlock\n   * @param name defines the block name\n   */\n  constructor(name) {\n    super(name);\n    /**\n     * Gets or sets a boolean indicating that this block can evaluate context\n     * Build performance is improved when this value is set to false as the system will cache values instead of reevaluating everything per context change\n     */\n    this.evaluateContext = false;\n    this.registerInput(\"geometry0\", NodeGeometryBlockConnectionPointTypes.Geometry);\n    this.registerInput(\"geometry1\", NodeGeometryBlockConnectionPointTypes.Geometry, true);\n    this.registerInput(\"geometry2\", NodeGeometryBlockConnectionPointTypes.Geometry, true);\n    this.registerInput(\"geometry3\", NodeGeometryBlockConnectionPointTypes.Geometry, true);\n    this.registerInput(\"geometry4\", NodeGeometryBlockConnectionPointTypes.Geometry, true);\n    this.registerOutput(\"output\", NodeGeometryBlockConnectionPointTypes.Geometry);\n  }\n  /**\n   * Gets the current class name\n   * @returns the class name\n   */\n  getClassName() {\n    return \"MergeGeometryBlock\";\n  }\n  /**\n   * Gets the geometry0 input component\n   */\n  get geometry0() {\n    return this._inputs[0];\n  }\n  /**\n   * Gets the geometry1 input component\n   */\n  get geometry1() {\n    return this._inputs[1];\n  }\n  /**\n   * Gets the geometry2 input component\n   */\n  get geometry2() {\n    return this._inputs[2];\n  }\n  /**\n   * Gets the geometry3 input component\n   */\n  get geometry3() {\n    return this._inputs[3];\n  }\n  /**\n   * Gets the geometry4 input component\n   */\n  get geometry4() {\n    return this._inputs[4];\n  }\n  /**\n   * Gets the geometry output component\n   */\n  get output() {\n    return this._outputs[0];\n  }\n  _buildBlock(state) {\n    const func = state => {\n      let vertexData = this.geometry0.getConnectedValue(state);\n      const additionalVertexData = [];\n      if (this.geometry1.isConnected) {\n        additionalVertexData.push(this.geometry1.getConnectedValue(state));\n      }\n      if (this.geometry2.isConnected) {\n        additionalVertexData.push(this.geometry2.getConnectedValue(state));\n      }\n      if (this.geometry3.isConnected) {\n        additionalVertexData.push(this.geometry3.getConnectedValue(state));\n      }\n      if (this.geometry4.isConnected) {\n        additionalVertexData.push(this.geometry4.getConnectedValue(state));\n      }\n      if (additionalVertexData.length && vertexData) {\n        vertexData = vertexData.merge(additionalVertexData, true, false, true, true);\n      }\n      return vertexData;\n    };\n    if (this.evaluateContext) {\n      this.output._storedFunction = func;\n    } else {\n      this.output._storedFunction = null;\n      this.output._storedValue = func(state);\n    }\n  }\n  _dumpPropertiesCode() {\n    const codeString = super._dumpPropertiesCode() + `${this._codeVariableName}.evaluateContext = ${this.evaluateContext ? \"true\" : \"false\"};\\n`;\n    return codeString;\n  }\n  /**\n   * Serializes this block in a JSON representation\n   * @returns the serialized block object\n   */\n  serialize() {\n    const serializationObject = super.serialize();\n    serializationObject.evaluateContext = this.evaluateContext;\n    return serializationObject;\n  }\n  _deserialize(serializationObject) {\n    super._deserialize(serializationObject);\n    this.evaluateContext = serializationObject.evaluateContext;\n  }\n}\n__decorate([editableInPropertyPage(\"Evaluate context\", PropertyTypeForEdition.Boolean, \"ADVANCED\", {\n  notifiers: {\n    rebuild: true\n  }\n})], MergeGeometryBlock.prototype, \"evaluateContext\", void 0);\nRegisterClass(\"BABYLON.MergeGeometryBlock\", MergeGeometryBlock);","map":{"version":3,"names":["NodeGeometryBlock","RegisterClass","NodeGeometryBlockConnectionPointTypes","PropertyTypeForEdition","editableInPropertyPage","MergeGeometryBlock","constructor","name","evaluateContext","registerInput","Geometry","registerOutput","getClassName","geometry0","_inputs","geometry1","geometry2","geometry3","geometry4","output","_outputs","_buildBlock","state","func","vertexData","getConnectedValue","additionalVertexData","isConnected","push","length","merge","_storedFunction","_storedValue","_dumpPropertiesCode","codeString","_codeVariableName","serialize","serializationObject","_deserialize","__decorate","Boolean","notifiers","rebuild"],"sources":["../../../../../../dev/core/src/Meshes/Node/Blocks/mergeGeometryBlock.ts"],"sourcesContent":["import { NodeGeometryBlock } from \"../nodeGeometryBlock\";\r\nimport type { NodeGeometryConnectionPoint } from \"../nodeGeometryBlockConnectionPoint\";\r\nimport { RegisterClass } from \"../../../Misc/typeStore\";\r\nimport { NodeGeometryBlockConnectionPointTypes } from \"../Enums/nodeGeometryConnectionPointTypes\";\r\nimport type { VertexData } from \"../../../Meshes/mesh.vertexData\";\r\nimport type { NodeGeometryBuildState } from \"../nodeGeometryBuildState\";\r\nimport { PropertyTypeForEdition, editableInPropertyPage } from \"../../../Decorators/nodeDecorator\";\r\n\r\n/**\r\n * Block used to merge several geometries\r\n */\r\nexport class MergeGeometryBlock extends NodeGeometryBlock {\r\n    /**\r\n     * Gets or sets a boolean indicating that this block can evaluate context\r\n     * Build performance is improved when this value is set to false as the system will cache values instead of reevaluating everything per context change\r\n     */\r\n    @editableInPropertyPage(\"Evaluate context\", PropertyTypeForEdition.Boolean, \"ADVANCED\", { notifiers: { rebuild: true } })\r\n    public evaluateContext = false;\r\n\r\n    /**\r\n     * Create a new MergeGeometryBlock\r\n     * @param name defines the block name\r\n     */\r\n    public constructor(name: string) {\r\n        super(name);\r\n\r\n        this.registerInput(\"geometry0\", NodeGeometryBlockConnectionPointTypes.Geometry);\r\n        this.registerInput(\"geometry1\", NodeGeometryBlockConnectionPointTypes.Geometry, true);\r\n        this.registerInput(\"geometry2\", NodeGeometryBlockConnectionPointTypes.Geometry, true);\r\n        this.registerInput(\"geometry3\", NodeGeometryBlockConnectionPointTypes.Geometry, true);\r\n        this.registerInput(\"geometry4\", NodeGeometryBlockConnectionPointTypes.Geometry, true);\r\n\r\n        this.registerOutput(\"output\", NodeGeometryBlockConnectionPointTypes.Geometry);\r\n    }\r\n\r\n    /**\r\n     * Gets the current class name\r\n     * @returns the class name\r\n     */\r\n    public getClassName() {\r\n        return \"MergeGeometryBlock\";\r\n    }\r\n\r\n    /**\r\n     * Gets the geometry0 input component\r\n     */\r\n    public get geometry0(): NodeGeometryConnectionPoint {\r\n        return this._inputs[0];\r\n    }\r\n\r\n    /**\r\n     * Gets the geometry1 input component\r\n     */\r\n    public get geometry1(): NodeGeometryConnectionPoint {\r\n        return this._inputs[1];\r\n    }\r\n\r\n    /**\r\n     * Gets the geometry2 input component\r\n     */\r\n    public get geometry2(): NodeGeometryConnectionPoint {\r\n        return this._inputs[2];\r\n    }\r\n\r\n    /**\r\n     * Gets the geometry3 input component\r\n     */\r\n    public get geometry3(): NodeGeometryConnectionPoint {\r\n        return this._inputs[3];\r\n    }\r\n\r\n    /**\r\n     * Gets the geometry4 input component\r\n     */\r\n    public get geometry4(): NodeGeometryConnectionPoint {\r\n        return this._inputs[4];\r\n    }\r\n\r\n    /**\r\n     * Gets the geometry output component\r\n     */\r\n    public get output(): NodeGeometryConnectionPoint {\r\n        return this._outputs[0];\r\n    }\r\n\r\n    protected _buildBlock(state: NodeGeometryBuildState) {\r\n        const func = (state: NodeGeometryBuildState) => {\r\n            let vertexData = this.geometry0.getConnectedValue(state) as VertexData;\r\n            const additionalVertexData: VertexData[] = [];\r\n\r\n            if (this.geometry1.isConnected) {\r\n                additionalVertexData.push(this.geometry1.getConnectedValue(state));\r\n            }\r\n            if (this.geometry2.isConnected) {\r\n                additionalVertexData.push(this.geometry2.getConnectedValue(state));\r\n            }\r\n            if (this.geometry3.isConnected) {\r\n                additionalVertexData.push(this.geometry3.getConnectedValue(state));\r\n            }\r\n            if (this.geometry4.isConnected) {\r\n                additionalVertexData.push(this.geometry4.getConnectedValue(state));\r\n            }\r\n\r\n            if (additionalVertexData.length && vertexData) {\r\n                vertexData = vertexData.merge(additionalVertexData, true, false, true, true);\r\n            }\r\n            return vertexData;\r\n        };\r\n\r\n        if (this.evaluateContext) {\r\n            this.output._storedFunction = func;\r\n        } else {\r\n            this.output._storedFunction = null;\r\n            this.output._storedValue = func(state);\r\n        }\r\n    }\r\n\r\n    protected _dumpPropertiesCode() {\r\n        const codeString = super._dumpPropertiesCode() + `${this._codeVariableName}.evaluateContext = ${this.evaluateContext ? \"true\" : \"false\"};\\n`;\r\n        return codeString;\r\n    }\r\n\r\n    /**\r\n     * Serializes this block in a JSON representation\r\n     * @returns the serialized block object\r\n     */\r\n    public serialize(): any {\r\n        const serializationObject = super.serialize();\r\n\r\n        serializationObject.evaluateContext = this.evaluateContext;\r\n\r\n        return serializationObject;\r\n    }\r\n\r\n    public _deserialize(serializationObject: any) {\r\n        super._deserialize(serializationObject);\r\n\r\n        this.evaluateContext = serializationObject.evaluateContext;\r\n    }\r\n}\r\n\r\nRegisterClass(\"BABYLON.MergeGeometryBlock\", MergeGeometryBlock);\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}