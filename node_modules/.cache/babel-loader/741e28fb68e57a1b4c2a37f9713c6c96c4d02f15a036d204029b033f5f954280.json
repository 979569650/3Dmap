{"ast":null,"code":"import { __decorate } from \"@babylonjs/core/tslib.es6.js\";\nimport { Rectangle } from \"../rectangle.js\";\nimport { Grid } from \"../grid.js\";\nimport { Control } from \"../control.js\";\nimport { _ScrollViewerWindow } from \"./scrollViewerWindow.js\";\nimport { ScrollBar } from \"../sliders/scrollBar.js\";\nimport { ImageScrollBar } from \"../sliders/imageScrollBar.js\";\nimport { RegisterClass } from \"@babylonjs/core/Misc/typeStore.js\";\nimport { serialize } from \"@babylonjs/core/Misc/decorators.js\";\n/**\n * Class used to hold a viewer window and sliders in a grid\n */\nexport class ScrollViewer extends Rectangle {\n  /**\n   * Gets the horizontal scrollbar\n   */\n  get horizontalBar() {\n    return this._horizontalBar;\n  }\n  /**\n   * Gets the vertical scrollbar\n   */\n  get verticalBar() {\n    return this._verticalBar;\n  }\n  /**\n   * Adds a new control to the current container\n   * @param control defines the control to add\n   * @returns the current container\n   */\n  addControl(control) {\n    if (!control) {\n      return this;\n    }\n    this._window.addControl(control);\n    return this;\n  }\n  /**\n   * Removes a control from the current container\n   * @param control defines the control to remove\n   * @returns the current container\n   */\n  removeControl(control) {\n    this._window.removeControl(control);\n    return this;\n  }\n  /** Gets the list of children */\n  get children() {\n    return this._window.children;\n  }\n  _flagDescendantsAsMatrixDirty() {\n    for (const child of this._children) {\n      child._markMatrixAsDirty();\n    }\n  }\n  /**\n   * Freezes or unfreezes the controls in the window.\n   * When controls are frozen, the scroll viewer can render a lot more quickly but updates to positions/sizes of controls\n   * are not taken into account. If you want to change positions/sizes, unfreeze, perform the changes then freeze again\n   */\n  get freezeControls() {\n    return this._window.freezeControls;\n  }\n  set freezeControls(value) {\n    this._window.freezeControls = value;\n  }\n  /** Gets the bucket width */\n  get bucketWidth() {\n    return this._window.bucketWidth;\n  }\n  /** Gets the bucket height */\n  get bucketHeight() {\n    return this._window.bucketHeight;\n  }\n  /**\n   * Sets the bucket sizes.\n   * When freezeControls is true, setting a non-zero bucket size will improve performances by updating only\n   * controls that are visible. The bucket sizes is used to subdivide (internally) the window area to smaller areas into which\n   * controls are dispatched. So, the size should be roughly equals to the mean size of all the controls of\n   * the window. To disable the usage of buckets, sets either width or height (or both) to 0.\n   * Please note that using this option will raise the memory usage (the higher the bucket sizes, the less memory\n   * used), that's why it is not enabled by default.\n   * @param width width of the bucket\n   * @param height height of the bucket\n   */\n  setBucketSizes(width, height) {\n    this._window.setBucketSizes(width, height);\n  }\n  /**\n   * Forces the horizontal scroll bar to be displayed\n   */\n  get forceHorizontalBar() {\n    return this._forceHorizontalBar;\n  }\n  set forceHorizontalBar(value) {\n    this._grid.setRowDefinition(1, value ? this._barSize : 0, true);\n    this._horizontalBar.isVisible = value;\n    this._forceHorizontalBar = value;\n  }\n  /**\n   * Forces the vertical scroll bar to be displayed\n   */\n  get forceVerticalBar() {\n    return this._forceVerticalBar;\n  }\n  set forceVerticalBar(value) {\n    this._grid.setColumnDefinition(1, value ? this._barSize : 0, true);\n    this._verticalBar.isVisible = value;\n    this._forceVerticalBar = value;\n  }\n  /**\n   * Creates a new ScrollViewer\n   * @param name of ScrollViewer\n   * @param isImageBased\n   */\n  constructor(name, isImageBased) {\n    super(name);\n    this._barSize = 20;\n    this._pointerIsOver = false;\n    this._wheelPrecision = 0.05;\n    this._thumbLength = 0.5;\n    this._thumbHeight = 1;\n    this._barImageHeight = 1;\n    this._horizontalBarImageHeight = 1;\n    this._verticalBarImageHeight = 1;\n    this._oldWindowContentsWidth = 0;\n    this._oldWindowContentsHeight = 0;\n    this._forceHorizontalBar = false;\n    this._forceVerticalBar = false;\n    this._useImageBar = isImageBased ? isImageBased : false;\n    this.onDirtyObservable.add(() => {\n      this._horizontalBarSpace.color = this.color;\n      this._verticalBarSpace.color = this.color;\n      this._dragSpace.color = this.color;\n    });\n    this.onPointerEnterObservable.add(() => {\n      this._pointerIsOver = true;\n    });\n    this.onPointerOutObservable.add(() => {\n      this._pointerIsOver = false;\n    });\n    this._grid = new Grid();\n    if (this._useImageBar) {\n      this._horizontalBar = new ImageScrollBar();\n      this._verticalBar = new ImageScrollBar();\n    } else {\n      this._horizontalBar = new ScrollBar();\n      this._verticalBar = new ScrollBar();\n    }\n    this._window = new _ScrollViewerWindow(\"scrollViewer_window\");\n    this._window.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\n    this._window.verticalAlignment = Control.VERTICAL_ALIGNMENT_TOP;\n    this._grid.addColumnDefinition(1);\n    this._grid.addColumnDefinition(0, true);\n    this._grid.addRowDefinition(1);\n    this._grid.addRowDefinition(0, true);\n    super.addControl(this._grid);\n    this._grid.addControl(this._window, 0, 0);\n    this._verticalBarSpace = new Rectangle();\n    this._verticalBarSpace.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\n    this._verticalBarSpace.verticalAlignment = Control.VERTICAL_ALIGNMENT_TOP;\n    this._verticalBarSpace.thickness = 1;\n    this._grid.addControl(this._verticalBarSpace, 0, 1);\n    this._addBar(this._verticalBar, this._verticalBarSpace, true, Math.PI);\n    this._horizontalBarSpace = new Rectangle();\n    this._horizontalBarSpace.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\n    this._horizontalBarSpace.verticalAlignment = Control.VERTICAL_ALIGNMENT_TOP;\n    this._horizontalBarSpace.thickness = 1;\n    this._grid.addControl(this._horizontalBarSpace, 1, 0);\n    this._addBar(this._horizontalBar, this._horizontalBarSpace, false, 0);\n    this._dragSpace = new Rectangle();\n    this._dragSpace.thickness = 1;\n    this._grid.addControl(this._dragSpace, 1, 1);\n    // Colors\n    if (!this._useImageBar) {\n      this.barColor = \"grey\";\n      this.barBackground = \"transparent\";\n    }\n  }\n  /** Reset the scroll viewer window to initial size */\n  resetWindow() {\n    this._window.width = \"100%\";\n    this._window.height = \"100%\";\n  }\n  _getTypeName() {\n    return \"ScrollViewer\";\n  }\n  _buildClientSizes() {\n    const ratio = this.host.idealRatio;\n    this._window.parentClientWidth = this._currentMeasure.width - (this._verticalBar.isVisible || this.forceVerticalBar ? this._barSize * ratio : 0) - 2 * this.thickness;\n    this._window.parentClientHeight = this._currentMeasure.height - (this._horizontalBar.isVisible || this.forceHorizontalBar ? this._barSize * ratio : 0) - 2 * this.thickness;\n    this._clientWidth = this._window.parentClientWidth;\n    this._clientHeight = this._window.parentClientHeight;\n  }\n  _additionalProcessing(parentMeasure, context) {\n    super._additionalProcessing(parentMeasure, context);\n    this._buildClientSizes();\n  }\n  _postMeasure() {\n    super._postMeasure();\n    this._updateScroller();\n    this._setWindowPosition(false);\n  }\n  /**\n   * Gets or sets the mouse wheel precision\n   * from 0 to 1 with a default value of 0.05\n   * */\n  get wheelPrecision() {\n    return this._wheelPrecision;\n  }\n  set wheelPrecision(value) {\n    if (this._wheelPrecision === value) {\n      return;\n    }\n    if (value < 0) {\n      value = 0;\n    }\n    if (value > 1) {\n      value = 1;\n    }\n    this._wheelPrecision = value;\n  }\n  /** Gets or sets the scroll bar container background color */\n  get scrollBackground() {\n    return this._horizontalBarSpace.background;\n  }\n  set scrollBackground(color) {\n    if (this._horizontalBarSpace.background === color) {\n      return;\n    }\n    this._horizontalBarSpace.background = color;\n    this._verticalBarSpace.background = color;\n  }\n  /** Gets or sets the bar color */\n  get barColor() {\n    return this._barColor;\n  }\n  set barColor(color) {\n    if (this._barColor === color) {\n      return;\n    }\n    this._barColor = color;\n    this._horizontalBar.color = color;\n    this._verticalBar.color = color;\n  }\n  /** Gets or sets the bar image */\n  get thumbImage() {\n    return this._barImage;\n  }\n  set thumbImage(value) {\n    if (this._barImage === value) {\n      return;\n    }\n    this._barImage = value;\n    const hb = this._horizontalBar;\n    const vb = this._verticalBar;\n    hb.thumbImage = value;\n    vb.thumbImage = value;\n  }\n  /** Gets or sets the horizontal bar image */\n  get horizontalThumbImage() {\n    return this._horizontalBarImage;\n  }\n  set horizontalThumbImage(value) {\n    if (this._horizontalBarImage === value) {\n      return;\n    }\n    this._horizontalBarImage = value;\n    const hb = this._horizontalBar;\n    hb.thumbImage = value;\n  }\n  /** Gets or sets the vertical bar image */\n  get verticalThumbImage() {\n    return this._verticalBarImage;\n  }\n  set verticalThumbImage(value) {\n    if (this._verticalBarImage === value) {\n      return;\n    }\n    this._verticalBarImage = value;\n    const vb = this._verticalBar;\n    vb.thumbImage = value;\n  }\n  /** Gets or sets the size of the bar */\n  get barSize() {\n    return this._barSize;\n  }\n  set barSize(value) {\n    if (this._barSize === value) {\n      return;\n    }\n    this._barSize = value;\n    this._markAsDirty();\n    if (this._horizontalBar.isVisible) {\n      this._grid.setRowDefinition(1, this._barSize, true);\n    }\n    if (this._verticalBar.isVisible) {\n      this._grid.setColumnDefinition(1, this._barSize, true);\n    }\n  }\n  /** Gets or sets the length of the thumb */\n  get thumbLength() {\n    return this._thumbLength;\n  }\n  set thumbLength(value) {\n    if (this._thumbLength === value) {\n      return;\n    }\n    if (value <= 0) {\n      value = 0.1;\n    }\n    if (value > 1) {\n      value = 1;\n    }\n    this._thumbLength = value;\n    const hb = this._horizontalBar;\n    const vb = this._verticalBar;\n    hb.thumbLength = value;\n    vb.thumbLength = value;\n    this._markAsDirty();\n  }\n  /** Gets or sets the height of the thumb */\n  get thumbHeight() {\n    return this._thumbHeight;\n  }\n  set thumbHeight(value) {\n    if (this._thumbHeight === value) {\n      return;\n    }\n    if (value <= 0) {\n      value = 0.1;\n    }\n    if (value > 1) {\n      value = 1;\n    }\n    this._thumbHeight = value;\n    const hb = this._horizontalBar;\n    const vb = this._verticalBar;\n    hb.thumbHeight = value;\n    vb.thumbHeight = value;\n    this._markAsDirty();\n  }\n  /** Gets or sets the height of the bar image */\n  get barImageHeight() {\n    return this._barImageHeight;\n  }\n  set barImageHeight(value) {\n    if (this._barImageHeight === value) {\n      return;\n    }\n    if (value <= 0) {\n      value = 0.1;\n    }\n    if (value > 1) {\n      value = 1;\n    }\n    this._barImageHeight = value;\n    const hb = this._horizontalBar;\n    const vb = this._verticalBar;\n    hb.barImageHeight = value;\n    vb.barImageHeight = value;\n    this._markAsDirty();\n  }\n  /** Gets or sets the height of the horizontal bar image */\n  get horizontalBarImageHeight() {\n    return this._horizontalBarImageHeight;\n  }\n  set horizontalBarImageHeight(value) {\n    if (this._horizontalBarImageHeight === value) {\n      return;\n    }\n    if (value <= 0) {\n      value = 0.1;\n    }\n    if (value > 1) {\n      value = 1;\n    }\n    this._horizontalBarImageHeight = value;\n    const hb = this._horizontalBar;\n    hb.barImageHeight = value;\n    this._markAsDirty();\n  }\n  /** Gets or sets the height of the vertical bar image */\n  get verticalBarImageHeight() {\n    return this._verticalBarImageHeight;\n  }\n  set verticalBarImageHeight(value) {\n    if (this._verticalBarImageHeight === value) {\n      return;\n    }\n    if (value <= 0) {\n      value = 0.1;\n    }\n    if (value > 1) {\n      value = 1;\n    }\n    this._verticalBarImageHeight = value;\n    const vb = this._verticalBar;\n    vb.barImageHeight = value;\n    this._markAsDirty();\n  }\n  /** Gets or sets the bar background */\n  get barBackground() {\n    return this._barBackground;\n  }\n  set barBackground(color) {\n    if (this._barBackground === color) {\n      return;\n    }\n    this._barBackground = color;\n    const hb = this._horizontalBar;\n    const vb = this._verticalBar;\n    hb.background = color;\n    vb.background = color;\n    this._dragSpace.background = color;\n  }\n  /** Gets or sets the bar background image */\n  get barImage() {\n    return this._barBackgroundImage;\n  }\n  set barImage(value) {\n    this._barBackgroundImage = value;\n    const hb = this._horizontalBar;\n    const vb = this._verticalBar;\n    hb.backgroundImage = value;\n    vb.backgroundImage = value;\n  }\n  /** Gets or sets the horizontal bar background image */\n  get horizontalBarImage() {\n    return this._horizontalBarBackgroundImage;\n  }\n  set horizontalBarImage(value) {\n    this._horizontalBarBackgroundImage = value;\n    const hb = this._horizontalBar;\n    hb.backgroundImage = value;\n  }\n  /** Gets or sets the vertical bar background image */\n  get verticalBarImage() {\n    return this._verticalBarBackgroundImage;\n  }\n  set verticalBarImage(value) {\n    this._verticalBarBackgroundImage = value;\n    const vb = this._verticalBar;\n    vb.backgroundImage = value;\n  }\n  _setWindowPosition(force = true) {\n    const ratio = this.host.idealRatio;\n    const windowContentsWidth = this._window._currentMeasure.width;\n    const windowContentsHeight = this._window._currentMeasure.height;\n    if (!force && this._oldWindowContentsWidth === windowContentsWidth && this._oldWindowContentsHeight === windowContentsHeight) {\n      return;\n    }\n    this._oldWindowContentsWidth = windowContentsWidth;\n    this._oldWindowContentsHeight = windowContentsHeight;\n    const _endLeft = this._clientWidth - windowContentsWidth;\n    const _endTop = this._clientHeight - windowContentsHeight;\n    const newLeft = this._horizontalBar.value / ratio * _endLeft + \"px\";\n    const newTop = this._verticalBar.value / ratio * _endTop + \"px\";\n    if (newLeft !== this._window.left) {\n      this._window.left = newLeft;\n      if (!this.freezeControls) {\n        this._rebuildLayout = true;\n      }\n    }\n    if (newTop !== this._window.top) {\n      this._window.top = newTop;\n      if (!this.freezeControls) {\n        this._rebuildLayout = true;\n      }\n    }\n  }\n  /** @internal */\n  _updateScroller() {\n    const windowContentsWidth = this._window._currentMeasure.width;\n    const windowContentsHeight = this._window._currentMeasure.height;\n    if (this._horizontalBar.isVisible && windowContentsWidth <= this._clientWidth && !this.forceHorizontalBar) {\n      this._grid.setRowDefinition(1, 0, true);\n      this._horizontalBar.isVisible = false;\n      this._horizontalBar.value = 0;\n      this._rebuildLayout = true;\n    } else if (!this._horizontalBar.isVisible && (windowContentsWidth > this._clientWidth || this.forceHorizontalBar)) {\n      this._grid.setRowDefinition(1, this._barSize, true);\n      this._horizontalBar.isVisible = true;\n      this._rebuildLayout = true;\n    }\n    if (this._verticalBar.isVisible && windowContentsHeight <= this._clientHeight && !this.forceVerticalBar) {\n      this._grid.setColumnDefinition(1, 0, true);\n      this._verticalBar.isVisible = false;\n      this._verticalBar.value = 0;\n      this._rebuildLayout = true;\n    } else if (!this._verticalBar.isVisible && (windowContentsHeight > this._clientHeight || this.forceVerticalBar)) {\n      this._grid.setColumnDefinition(1, this._barSize, true);\n      this._verticalBar.isVisible = true;\n      this._rebuildLayout = true;\n    }\n    this._buildClientSizes();\n    const ratio = this.host.idealRatio;\n    this._horizontalBar.thumbWidth = this._thumbLength * 0.9 * (this._clientWidth / ratio) + \"px\";\n    this._verticalBar.thumbWidth = this._thumbLength * 0.9 * (this._clientHeight / ratio) + \"px\";\n  }\n  _link(host) {\n    super._link(host);\n    this._attachWheel();\n  }\n  /**\n   * @internal\n   */\n  _addBar(barControl, barContainer, isVertical, rotation) {\n    barControl.paddingLeft = 0;\n    barControl.width = \"100%\";\n    barControl.height = \"100%\";\n    barControl.barOffset = 0;\n    barControl.value = 0;\n    barControl.maximum = 1;\n    barControl.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_CENTER;\n    barControl.verticalAlignment = Control.VERTICAL_ALIGNMENT_CENTER;\n    barControl.isVertical = isVertical;\n    barControl.rotation = rotation;\n    barControl.isVisible = false;\n    barContainer.addControl(barControl);\n    barControl.onValueChangedObservable.add(() => {\n      this._setWindowPosition();\n    });\n  }\n  /** @internal */\n  _attachWheel() {\n    if (!this._host || this._onWheelObserver) {\n      return;\n    }\n    this._onWheelObserver = this.onWheelObservable.add(pi => {\n      if (!this._pointerIsOver || this.isReadOnly) {\n        return;\n      }\n      if (this._verticalBar.isVisible == true) {\n        if (pi.y < 0 && this._verticalBar.value > 0) {\n          this._verticalBar.value -= this._wheelPrecision;\n        } else if (pi.y > 0 && this._verticalBar.value < this._verticalBar.maximum) {\n          this._verticalBar.value += this._wheelPrecision;\n        }\n      }\n      if (this._horizontalBar.isVisible == true) {\n        if (pi.x < 0 && this._horizontalBar.value < this._horizontalBar.maximum) {\n          this._horizontalBar.value += this._wheelPrecision;\n        } else if (pi.x > 0 && this._horizontalBar.value > 0) {\n          this._horizontalBar.value -= this._wheelPrecision;\n        }\n      }\n    });\n  }\n  _renderHighlightSpecific(context) {\n    if (!this.isHighlighted) {\n      return;\n    }\n    super._renderHighlightSpecific(context);\n    this._grid._renderHighlightSpecific(context);\n    context.restore();\n  }\n  /** Releases associated resources */\n  dispose() {\n    this.onWheelObservable.remove(this._onWheelObserver);\n    this._onWheelObserver = null;\n    super.dispose();\n  }\n}\n__decorate([serialize()], ScrollViewer.prototype, \"wheelPrecision\", null);\n__decorate([serialize()], ScrollViewer.prototype, \"scrollBackground\", null);\n__decorate([serialize()], ScrollViewer.prototype, \"barColor\", null);\n__decorate([serialize()], ScrollViewer.prototype, \"barSize\", null);\n__decorate([serialize()], ScrollViewer.prototype, \"barBackground\", null);\nRegisterClass(\"BABYLON.GUI.ScrollViewer\", ScrollViewer);","map":{"version":3,"names":["Rectangle","Grid","Control","_ScrollViewerWindow","ScrollBar","ImageScrollBar","RegisterClass","serialize","ScrollViewer","horizontalBar","_horizontalBar","verticalBar","_verticalBar","addControl","control","_window","removeControl","children","_flagDescendantsAsMatrixDirty","child","_children","_markMatrixAsDirty","freezeControls","value","bucketWidth","bucketHeight","setBucketSizes","width","height","forceHorizontalBar","_forceHorizontalBar","_grid","setRowDefinition","_barSize","isVisible","forceVerticalBar","_forceVerticalBar","setColumnDefinition","constructor","name","isImageBased","_pointerIsOver","_wheelPrecision","_thumbLength","_thumbHeight","_barImageHeight","_horizontalBarImageHeight","_verticalBarImageHeight","_oldWindowContentsWidth","_oldWindowContentsHeight","_useImageBar","onDirtyObservable","add","_horizontalBarSpace","color","_verticalBarSpace","_dragSpace","onPointerEnterObservable","onPointerOutObservable","horizontalAlignment","HORIZONTAL_ALIGNMENT_LEFT","verticalAlignment","VERTICAL_ALIGNMENT_TOP","addColumnDefinition","addRowDefinition","thickness","_addBar","Math","PI","barColor","barBackground","resetWindow","_getTypeName","_buildClientSizes","ratio","host","idealRatio","parentClientWidth","_currentMeasure","parentClientHeight","_clientWidth","_clientHeight","_additionalProcessing","parentMeasure","context","_postMeasure","_updateScroller","_setWindowPosition","wheelPrecision","scrollBackground","background","_barColor","thumbImage","_barImage","hb","vb","horizontalThumbImage","_horizontalBarImage","verticalThumbImage","_verticalBarImage","barSize","_markAsDirty","thumbLength","thumbHeight","barImageHeight","horizontalBarImageHeight","verticalBarImageHeight","_barBackground","barImage","_barBackgroundImage","backgroundImage","horizontalBarImage","_horizontalBarBackgroundImage","verticalBarImage","_verticalBarBackgroundImage","force","windowContentsWidth","windowContentsHeight","_endLeft","_endTop","newLeft","newTop","left","_rebuildLayout","top","thumbWidth","_link","_attachWheel","barControl","barContainer","isVertical","rotation","paddingLeft","barOffset","maximum","HORIZONTAL_ALIGNMENT_CENTER","VERTICAL_ALIGNMENT_CENTER","onValueChangedObservable","_host","_onWheelObserver","onWheelObservable","pi","isReadOnly","y","x","_renderHighlightSpecific","isHighlighted","restore","dispose","remove","__decorate"],"sources":["../../../../../../dev/gui/src/2D/controls/scrollViewers/scrollViewer.ts"],"sourcesContent":["import type { Nullable } from \"core/types\";\r\nimport type { Observer } from \"core/Misc/observable\";\r\nimport type { Vector2 } from \"core/Maths/math\";\r\nimport { Rectangle } from \"../rectangle\";\r\nimport { Grid } from \"../grid\";\r\nimport type { Image } from \"../image\";\r\nimport { Control } from \"../control\";\r\nimport type { Container } from \"../container\";\r\nimport type { Measure } from \"../../measure\";\r\nimport type { AdvancedDynamicTexture } from \"../../advancedDynamicTexture\";\r\nimport { _ScrollViewerWindow } from \"./scrollViewerWindow\";\r\nimport { ScrollBar } from \"../sliders/scrollBar\";\r\nimport { ImageScrollBar } from \"../sliders/imageScrollBar\";\r\nimport { RegisterClass } from \"core/Misc/typeStore\";\r\nimport type { ICanvasRenderingContext } from \"core/Engines/ICanvas\";\r\nimport { serialize } from \"core/Misc/decorators\";\r\n\r\n/**\r\n * Class used to hold a viewer window and sliders in a grid\r\n */\r\nexport class ScrollViewer extends Rectangle {\r\n    private _grid: Grid;\r\n    private _horizontalBarSpace: Rectangle;\r\n    private _verticalBarSpace: Rectangle;\r\n    private _dragSpace: Rectangle;\r\n    private _horizontalBar: ScrollBar | ImageScrollBar;\r\n    private _verticalBar: ScrollBar | ImageScrollBar;\r\n    private _barColor: string;\r\n    private _barBackground: string;\r\n    private _barImage: Image;\r\n    private _horizontalBarImage: Image;\r\n    private _verticalBarImage: Image;\r\n    private _barBackgroundImage: Image;\r\n    private _horizontalBarBackgroundImage: Image;\r\n    private _verticalBarBackgroundImage: Image;\r\n    private _barSize: number = 20;\r\n    private _window: _ScrollViewerWindow;\r\n    private _pointerIsOver: Boolean = false;\r\n    private _wheelPrecision: number = 0.05;\r\n    private _onWheelObserver: Nullable<Observer<Vector2>>;\r\n    private _clientWidth: number;\r\n    private _clientHeight: number;\r\n    private _useImageBar: Boolean;\r\n    private _thumbLength: number = 0.5;\r\n    private _thumbHeight: number = 1;\r\n    private _barImageHeight: number = 1;\r\n    private _horizontalBarImageHeight: number = 1;\r\n    private _verticalBarImageHeight: number = 1;\r\n    private _oldWindowContentsWidth: number = 0;\r\n    private _oldWindowContentsHeight: number = 0;\r\n\r\n    /**\r\n     * Gets the horizontal scrollbar\r\n     */\r\n    public get horizontalBar(): ScrollBar | ImageScrollBar {\r\n        return this._horizontalBar;\r\n    }\r\n\r\n    /**\r\n     * Gets the vertical scrollbar\r\n     */\r\n    public get verticalBar(): ScrollBar | ImageScrollBar {\r\n        return this._verticalBar;\r\n    }\r\n\r\n    /**\r\n     * Adds a new control to the current container\r\n     * @param control defines the control to add\r\n     * @returns the current container\r\n     */\r\n    public addControl(control: Nullable<Control>): Container {\r\n        if (!control) {\r\n            return this;\r\n        }\r\n\r\n        this._window.addControl(control);\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Removes a control from the current container\r\n     * @param control defines the control to remove\r\n     * @returns the current container\r\n     */\r\n    public removeControl(control: Control): Container {\r\n        this._window.removeControl(control);\r\n        return this;\r\n    }\r\n\r\n    /** Gets the list of children */\r\n    public get children(): Control[] {\r\n        return this._window.children;\r\n    }\r\n\r\n    public _flagDescendantsAsMatrixDirty(): void {\r\n        for (const child of this._children) {\r\n            child._markMatrixAsDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Freezes or unfreezes the controls in the window.\r\n     * When controls are frozen, the scroll viewer can render a lot more quickly but updates to positions/sizes of controls\r\n     * are not taken into account. If you want to change positions/sizes, unfreeze, perform the changes then freeze again\r\n     */\r\n    public get freezeControls(): boolean {\r\n        return this._window.freezeControls;\r\n    }\r\n\r\n    public set freezeControls(value: boolean) {\r\n        this._window.freezeControls = value;\r\n    }\r\n\r\n    /** Gets the bucket width */\r\n    public get bucketWidth(): number {\r\n        return this._window.bucketWidth;\r\n    }\r\n\r\n    /** Gets the bucket height */\r\n    public get bucketHeight(): number {\r\n        return this._window.bucketHeight;\r\n    }\r\n\r\n    /**\r\n     * Sets the bucket sizes.\r\n     * When freezeControls is true, setting a non-zero bucket size will improve performances by updating only\r\n     * controls that are visible. The bucket sizes is used to subdivide (internally) the window area to smaller areas into which\r\n     * controls are dispatched. So, the size should be roughly equals to the mean size of all the controls of\r\n     * the window. To disable the usage of buckets, sets either width or height (or both) to 0.\r\n     * Please note that using this option will raise the memory usage (the higher the bucket sizes, the less memory\r\n     * used), that's why it is not enabled by default.\r\n     * @param width width of the bucket\r\n     * @param height height of the bucket\r\n     */\r\n    public setBucketSizes(width: number, height: number): void {\r\n        this._window.setBucketSizes(width, height);\r\n    }\r\n\r\n    private _forceHorizontalBar: boolean = false;\r\n    private _forceVerticalBar: boolean = false;\r\n\r\n    /**\r\n     * Forces the horizontal scroll bar to be displayed\r\n     */\r\n    public get forceHorizontalBar(): boolean {\r\n        return this._forceHorizontalBar;\r\n    }\r\n\r\n    public set forceHorizontalBar(value: boolean) {\r\n        this._grid.setRowDefinition(1, value ? this._barSize : 0, true);\r\n        this._horizontalBar.isVisible = value;\r\n        this._forceHorizontalBar = value;\r\n    }\r\n\r\n    /**\r\n     * Forces the vertical scroll bar to be displayed\r\n     */\r\n    public get forceVerticalBar(): boolean {\r\n        return this._forceVerticalBar;\r\n    }\r\n\r\n    public set forceVerticalBar(value: boolean) {\r\n        this._grid.setColumnDefinition(1, value ? this._barSize : 0, true);\r\n        this._verticalBar.isVisible = value;\r\n        this._forceVerticalBar = value;\r\n    }\r\n\r\n    /**\r\n     * Creates a new ScrollViewer\r\n     * @param name of ScrollViewer\r\n     * @param isImageBased\r\n     */\r\n    constructor(name?: string, isImageBased?: boolean) {\r\n        super(name);\r\n\r\n        this._useImageBar = isImageBased ? isImageBased : false;\r\n\r\n        this.onDirtyObservable.add(() => {\r\n            this._horizontalBarSpace.color = this.color;\r\n            this._verticalBarSpace.color = this.color;\r\n            this._dragSpace.color = this.color;\r\n        });\r\n\r\n        this.onPointerEnterObservable.add(() => {\r\n            this._pointerIsOver = true;\r\n        });\r\n\r\n        this.onPointerOutObservable.add(() => {\r\n            this._pointerIsOver = false;\r\n        });\r\n\r\n        this._grid = new Grid();\r\n        if (this._useImageBar) {\r\n            this._horizontalBar = new ImageScrollBar();\r\n            this._verticalBar = new ImageScrollBar();\r\n        } else {\r\n            this._horizontalBar = new ScrollBar();\r\n            this._verticalBar = new ScrollBar();\r\n        }\r\n\r\n        this._window = new _ScrollViewerWindow(\"scrollViewer_window\");\r\n        this._window.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        this._window.verticalAlignment = Control.VERTICAL_ALIGNMENT_TOP;\r\n\r\n        this._grid.addColumnDefinition(1);\r\n        this._grid.addColumnDefinition(0, true);\r\n        this._grid.addRowDefinition(1);\r\n        this._grid.addRowDefinition(0, true);\r\n\r\n        super.addControl(this._grid);\r\n        this._grid.addControl(this._window, 0, 0);\r\n\r\n        this._verticalBarSpace = new Rectangle();\r\n        this._verticalBarSpace.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        this._verticalBarSpace.verticalAlignment = Control.VERTICAL_ALIGNMENT_TOP;\r\n        this._verticalBarSpace.thickness = 1;\r\n        this._grid.addControl(this._verticalBarSpace, 0, 1);\r\n        this._addBar(this._verticalBar, this._verticalBarSpace, true, Math.PI);\r\n\r\n        this._horizontalBarSpace = new Rectangle();\r\n        this._horizontalBarSpace.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        this._horizontalBarSpace.verticalAlignment = Control.VERTICAL_ALIGNMENT_TOP;\r\n        this._horizontalBarSpace.thickness = 1;\r\n        this._grid.addControl(this._horizontalBarSpace, 1, 0);\r\n        this._addBar(this._horizontalBar, this._horizontalBarSpace, false, 0);\r\n\r\n        this._dragSpace = new Rectangle();\r\n        this._dragSpace.thickness = 1;\r\n        this._grid.addControl(this._dragSpace, 1, 1);\r\n\r\n        // Colors\r\n        if (!this._useImageBar) {\r\n            this.barColor = \"grey\";\r\n            this.barBackground = \"transparent\";\r\n        }\r\n    }\r\n\r\n    /** Reset the scroll viewer window to initial size */\r\n    public resetWindow() {\r\n        this._window.width = \"100%\";\r\n        this._window.height = \"100%\";\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"ScrollViewer\";\r\n    }\r\n\r\n    private _buildClientSizes() {\r\n        const ratio = this.host.idealRatio;\r\n\r\n        this._window.parentClientWidth = this._currentMeasure.width - (this._verticalBar.isVisible || this.forceVerticalBar ? this._barSize * ratio : 0) - 2 * this.thickness;\r\n        this._window.parentClientHeight = this._currentMeasure.height - (this._horizontalBar.isVisible || this.forceHorizontalBar ? this._barSize * ratio : 0) - 2 * this.thickness;\r\n\r\n        this._clientWidth = this._window.parentClientWidth;\r\n        this._clientHeight = this._window.parentClientHeight;\r\n    }\r\n\r\n    protected _additionalProcessing(parentMeasure: Measure, context: ICanvasRenderingContext): void {\r\n        super._additionalProcessing(parentMeasure, context);\r\n\r\n        this._buildClientSizes();\r\n    }\r\n\r\n    protected _postMeasure(): void {\r\n        super._postMeasure();\r\n\r\n        this._updateScroller();\r\n\r\n        this._setWindowPosition(false);\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the mouse wheel precision\r\n     * from 0 to 1 with a default value of 0.05\r\n     * */\r\n    @serialize()\r\n    public get wheelPrecision(): number {\r\n        return this._wheelPrecision;\r\n    }\r\n\r\n    public set wheelPrecision(value: number) {\r\n        if (this._wheelPrecision === value) {\r\n            return;\r\n        }\r\n\r\n        if (value < 0) {\r\n            value = 0;\r\n        }\r\n\r\n        if (value > 1) {\r\n            value = 1;\r\n        }\r\n\r\n        this._wheelPrecision = value;\r\n    }\r\n\r\n    /** Gets or sets the scroll bar container background color */\r\n    @serialize()\r\n    public get scrollBackground(): string {\r\n        return this._horizontalBarSpace.background;\r\n    }\r\n\r\n    public set scrollBackground(color: string) {\r\n        if (this._horizontalBarSpace.background === color) {\r\n            return;\r\n        }\r\n        this._horizontalBarSpace.background = color;\r\n        this._verticalBarSpace.background = color;\r\n    }\r\n\r\n    /** Gets or sets the bar color */\r\n    @serialize()\r\n    public get barColor(): string {\r\n        return this._barColor;\r\n    }\r\n\r\n    public set barColor(color: string) {\r\n        if (this._barColor === color) {\r\n            return;\r\n        }\r\n\r\n        this._barColor = color;\r\n        this._horizontalBar.color = color;\r\n        this._verticalBar.color = color;\r\n    }\r\n\r\n    /** Gets or sets the bar image */\r\n    public get thumbImage(): Image {\r\n        return this._barImage;\r\n    }\r\n\r\n    public set thumbImage(value: Image) {\r\n        if (this._barImage === value) {\r\n            return;\r\n        }\r\n\r\n        this._barImage = value;\r\n        const hb = <ImageScrollBar>this._horizontalBar;\r\n        const vb = <ImageScrollBar>this._verticalBar;\r\n        hb.thumbImage = value;\r\n        vb.thumbImage = value;\r\n    }\r\n\r\n    /** Gets or sets the horizontal bar image */\r\n    public get horizontalThumbImage(): Image {\r\n        return this._horizontalBarImage;\r\n    }\r\n\r\n    public set horizontalThumbImage(value: Image) {\r\n        if (this._horizontalBarImage === value) {\r\n            return;\r\n        }\r\n\r\n        this._horizontalBarImage = value;\r\n        const hb = <ImageScrollBar>this._horizontalBar;\r\n        hb.thumbImage = value;\r\n    }\r\n\r\n    /** Gets or sets the vertical bar image */\r\n    public get verticalThumbImage(): Image {\r\n        return this._verticalBarImage;\r\n    }\r\n\r\n    public set verticalThumbImage(value: Image) {\r\n        if (this._verticalBarImage === value) {\r\n            return;\r\n        }\r\n\r\n        this._verticalBarImage = value;\r\n        const vb = <ImageScrollBar>this._verticalBar;\r\n        vb.thumbImage = value;\r\n    }\r\n\r\n    /** Gets or sets the size of the bar */\r\n    @serialize()\r\n    public get barSize(): number {\r\n        return this._barSize;\r\n    }\r\n\r\n    public set barSize(value: number) {\r\n        if (this._barSize === value) {\r\n            return;\r\n        }\r\n\r\n        this._barSize = value;\r\n        this._markAsDirty();\r\n\r\n        if (this._horizontalBar.isVisible) {\r\n            this._grid.setRowDefinition(1, this._barSize, true);\r\n        }\r\n        if (this._verticalBar.isVisible) {\r\n            this._grid.setColumnDefinition(1, this._barSize, true);\r\n        }\r\n    }\r\n\r\n    /** Gets or sets the length of the thumb */\r\n    public get thumbLength(): number {\r\n        return this._thumbLength;\r\n    }\r\n\r\n    public set thumbLength(value: number) {\r\n        if (this._thumbLength === value) {\r\n            return;\r\n        }\r\n        if (value <= 0) {\r\n            value = 0.1;\r\n        }\r\n        if (value > 1) {\r\n            value = 1;\r\n        }\r\n        this._thumbLength = value;\r\n        const hb = <ImageScrollBar>this._horizontalBar;\r\n        const vb = <ImageScrollBar>this._verticalBar;\r\n        hb.thumbLength = value;\r\n        vb.thumbLength = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the height of the thumb */\r\n    public get thumbHeight(): number {\r\n        return this._thumbHeight;\r\n    }\r\n\r\n    public set thumbHeight(value: number) {\r\n        if (this._thumbHeight === value) {\r\n            return;\r\n        }\r\n        if (value <= 0) {\r\n            value = 0.1;\r\n        }\r\n        if (value > 1) {\r\n            value = 1;\r\n        }\r\n        this._thumbHeight = value;\r\n        const hb = <ImageScrollBar>this._horizontalBar;\r\n        const vb = <ImageScrollBar>this._verticalBar;\r\n        hb.thumbHeight = value;\r\n        vb.thumbHeight = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the height of the bar image */\r\n    public get barImageHeight(): number {\r\n        return this._barImageHeight;\r\n    }\r\n\r\n    public set barImageHeight(value: number) {\r\n        if (this._barImageHeight === value) {\r\n            return;\r\n        }\r\n        if (value <= 0) {\r\n            value = 0.1;\r\n        }\r\n        if (value > 1) {\r\n            value = 1;\r\n        }\r\n        this._barImageHeight = value;\r\n        const hb = <ImageScrollBar>this._horizontalBar;\r\n        const vb = <ImageScrollBar>this._verticalBar;\r\n        hb.barImageHeight = value;\r\n        vb.barImageHeight = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the height of the horizontal bar image */\r\n    public get horizontalBarImageHeight(): number {\r\n        return this._horizontalBarImageHeight;\r\n    }\r\n\r\n    public set horizontalBarImageHeight(value: number) {\r\n        if (this._horizontalBarImageHeight === value) {\r\n            return;\r\n        }\r\n        if (value <= 0) {\r\n            value = 0.1;\r\n        }\r\n        if (value > 1) {\r\n            value = 1;\r\n        }\r\n        this._horizontalBarImageHeight = value;\r\n        const hb = <ImageScrollBar>this._horizontalBar;\r\n        hb.barImageHeight = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the height of the vertical bar image */\r\n    public get verticalBarImageHeight(): number {\r\n        return this._verticalBarImageHeight;\r\n    }\r\n\r\n    public set verticalBarImageHeight(value: number) {\r\n        if (this._verticalBarImageHeight === value) {\r\n            return;\r\n        }\r\n        if (value <= 0) {\r\n            value = 0.1;\r\n        }\r\n        if (value > 1) {\r\n            value = 1;\r\n        }\r\n        this._verticalBarImageHeight = value;\r\n        const vb = <ImageScrollBar>this._verticalBar;\r\n        vb.barImageHeight = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the bar background */\r\n    @serialize()\r\n    public get barBackground(): string {\r\n        return this._barBackground;\r\n    }\r\n\r\n    public set barBackground(color: string) {\r\n        if (this._barBackground === color) {\r\n            return;\r\n        }\r\n\r\n        this._barBackground = color;\r\n        const hb = <ScrollBar>this._horizontalBar;\r\n        const vb = <ScrollBar>this._verticalBar;\r\n        hb.background = color;\r\n        vb.background = color;\r\n        this._dragSpace.background = color;\r\n    }\r\n\r\n    /** Gets or sets the bar background image */\r\n    public get barImage(): Image {\r\n        return this._barBackgroundImage;\r\n    }\r\n\r\n    public set barImage(value: Image) {\r\n        this._barBackgroundImage = value;\r\n        const hb = <ImageScrollBar>this._horizontalBar;\r\n        const vb = <ImageScrollBar>this._verticalBar;\r\n        hb.backgroundImage = value;\r\n        vb.backgroundImage = value;\r\n    }\r\n\r\n    /** Gets or sets the horizontal bar background image */\r\n    public get horizontalBarImage(): Image {\r\n        return this._horizontalBarBackgroundImage;\r\n    }\r\n\r\n    public set horizontalBarImage(value: Image) {\r\n        this._horizontalBarBackgroundImage = value;\r\n        const hb = <ImageScrollBar>this._horizontalBar;\r\n        hb.backgroundImage = value;\r\n    }\r\n\r\n    /** Gets or sets the vertical bar background image */\r\n    public get verticalBarImage(): Image {\r\n        return this._verticalBarBackgroundImage;\r\n    }\r\n\r\n    public set verticalBarImage(value: Image) {\r\n        this._verticalBarBackgroundImage = value;\r\n        const vb = <ImageScrollBar>this._verticalBar;\r\n        vb.backgroundImage = value;\r\n    }\r\n\r\n    private _setWindowPosition(force = true): void {\r\n        const ratio = this.host.idealRatio;\r\n        const windowContentsWidth = this._window._currentMeasure.width;\r\n        const windowContentsHeight = this._window._currentMeasure.height;\r\n\r\n        if (!force && this._oldWindowContentsWidth === windowContentsWidth && this._oldWindowContentsHeight === windowContentsHeight) {\r\n            return;\r\n        }\r\n\r\n        this._oldWindowContentsWidth = windowContentsWidth;\r\n        this._oldWindowContentsHeight = windowContentsHeight;\r\n\r\n        const _endLeft = this._clientWidth - windowContentsWidth;\r\n        const _endTop = this._clientHeight - windowContentsHeight;\r\n\r\n        const newLeft = (this._horizontalBar.value / ratio) * _endLeft + \"px\";\r\n        const newTop = (this._verticalBar.value / ratio) * _endTop + \"px\";\r\n\r\n        if (newLeft !== this._window.left) {\r\n            this._window.left = newLeft;\r\n            if (!this.freezeControls) {\r\n                this._rebuildLayout = true;\r\n            }\r\n        }\r\n\r\n        if (newTop !== this._window.top) {\r\n            this._window.top = newTop;\r\n            if (!this.freezeControls) {\r\n                this._rebuildLayout = true;\r\n            }\r\n        }\r\n    }\r\n\r\n    /** @internal */\r\n    private _updateScroller(): void {\r\n        const windowContentsWidth = this._window._currentMeasure.width;\r\n        const windowContentsHeight = this._window._currentMeasure.height;\r\n\r\n        if (this._horizontalBar.isVisible && windowContentsWidth <= this._clientWidth && !this.forceHorizontalBar) {\r\n            this._grid.setRowDefinition(1, 0, true);\r\n            this._horizontalBar.isVisible = false;\r\n            this._horizontalBar.value = 0;\r\n            this._rebuildLayout = true;\r\n        } else if (!this._horizontalBar.isVisible && (windowContentsWidth > this._clientWidth || this.forceHorizontalBar)) {\r\n            this._grid.setRowDefinition(1, this._barSize, true);\r\n            this._horizontalBar.isVisible = true;\r\n            this._rebuildLayout = true;\r\n        }\r\n\r\n        if (this._verticalBar.isVisible && windowContentsHeight <= this._clientHeight && !this.forceVerticalBar) {\r\n            this._grid.setColumnDefinition(1, 0, true);\r\n            this._verticalBar.isVisible = false;\r\n            this._verticalBar.value = 0;\r\n            this._rebuildLayout = true;\r\n        } else if (!this._verticalBar.isVisible && (windowContentsHeight > this._clientHeight || this.forceVerticalBar)) {\r\n            this._grid.setColumnDefinition(1, this._barSize, true);\r\n            this._verticalBar.isVisible = true;\r\n            this._rebuildLayout = true;\r\n        }\r\n\r\n        this._buildClientSizes();\r\n\r\n        const ratio = this.host.idealRatio;\r\n\r\n        this._horizontalBar.thumbWidth = this._thumbLength * 0.9 * (this._clientWidth / ratio) + \"px\";\r\n        this._verticalBar.thumbWidth = this._thumbLength * 0.9 * (this._clientHeight / ratio) + \"px\";\r\n    }\r\n\r\n    public _link(host: AdvancedDynamicTexture): void {\r\n        super._link(host);\r\n\r\n        this._attachWheel();\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    private _addBar(barControl: ScrollBar | ImageScrollBar, barContainer: Rectangle, isVertical: boolean, rotation: number) {\r\n        barControl.paddingLeft = 0;\r\n        barControl.width = \"100%\";\r\n        barControl.height = \"100%\";\r\n        barControl.barOffset = 0;\r\n        barControl.value = 0;\r\n        barControl.maximum = 1;\r\n        barControl.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_CENTER;\r\n        barControl.verticalAlignment = Control.VERTICAL_ALIGNMENT_CENTER;\r\n        barControl.isVertical = isVertical;\r\n        barControl.rotation = rotation;\r\n        barControl.isVisible = false;\r\n\r\n        barContainer.addControl(barControl);\r\n\r\n        barControl.onValueChangedObservable.add(() => {\r\n            this._setWindowPosition();\r\n        });\r\n    }\r\n\r\n    /** @internal */\r\n    private _attachWheel() {\r\n        if (!this._host || this._onWheelObserver) {\r\n            return;\r\n        }\r\n\r\n        this._onWheelObserver = this.onWheelObservable.add((pi) => {\r\n            if (!this._pointerIsOver || this.isReadOnly) {\r\n                return;\r\n            }\r\n            if (this._verticalBar.isVisible == true) {\r\n                if (pi.y < 0 && this._verticalBar.value > 0) {\r\n                    this._verticalBar.value -= this._wheelPrecision;\r\n                } else if (pi.y > 0 && this._verticalBar.value < this._verticalBar.maximum) {\r\n                    this._verticalBar.value += this._wheelPrecision;\r\n                }\r\n            }\r\n            if (this._horizontalBar.isVisible == true) {\r\n                if (pi.x < 0 && this._horizontalBar.value < this._horizontalBar.maximum) {\r\n                    this._horizontalBar.value += this._wheelPrecision;\r\n                } else if (pi.x > 0 && this._horizontalBar.value > 0) {\r\n                    this._horizontalBar.value -= this._wheelPrecision;\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    public _renderHighlightSpecific(context: ICanvasRenderingContext): void {\r\n        if (!this.isHighlighted) {\r\n            return;\r\n        }\r\n\r\n        super._renderHighlightSpecific(context);\r\n\r\n        this._grid._renderHighlightSpecific(context);\r\n\r\n        context.restore();\r\n    }\r\n\r\n    /** Releases associated resources */\r\n    public dispose() {\r\n        this.onWheelObservable.remove(this._onWheelObserver);\r\n        this._onWheelObserver = null;\r\n        super.dispose();\r\n    }\r\n}\r\nRegisterClass(\"BABYLON.GUI.ScrollViewer\", ScrollViewer);\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}