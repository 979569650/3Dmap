{"ast":null,"code":"import { Observable } from \"@babylonjs/core/Misc/observable.js\";\nimport { ValueAndUnit } from \"./valueAndUnit.js\";\n/**\n * Define a style used by control to automatically setup properties based on a template.\n * Only support font related properties so far\n */\nexport class Style {\n  /**\n   * Creates a new style object\n   * @param host defines the AdvancedDynamicTexture which hosts this style\n   */\n  constructor(host) {\n    this._fontFamily = \"Arial\";\n    this._fontStyle = \"\";\n    this._fontWeight = \"\";\n    /** @internal */\n    this._fontSize = new ValueAndUnit(18, ValueAndUnit.UNITMODE_PIXEL, false);\n    /**\n     * Observable raised when the style values are changed\n     */\n    this.onChangedObservable = new Observable();\n    this._host = host;\n  }\n  /**\n   * Gets or sets the font size\n   */\n  get fontSize() {\n    return this._fontSize.toString(this._host);\n  }\n  set fontSize(value) {\n    if (this._fontSize.toString(this._host) === value) {\n      return;\n    }\n    if (this._fontSize.fromString(value)) {\n      this.onChangedObservable.notifyObservers(this);\n    }\n  }\n  /**\n   * Gets or sets the font family\n   */\n  get fontFamily() {\n    return this._fontFamily;\n  }\n  set fontFamily(value) {\n    if (this._fontFamily === value) {\n      return;\n    }\n    this._fontFamily = value;\n    this.onChangedObservable.notifyObservers(this);\n  }\n  /**\n   * Gets or sets the font style\n   */\n  get fontStyle() {\n    return this._fontStyle;\n  }\n  set fontStyle(value) {\n    if (this._fontStyle === value) {\n      return;\n    }\n    this._fontStyle = value;\n    this.onChangedObservable.notifyObservers(this);\n  }\n  /** Gets or sets font weight */\n  get fontWeight() {\n    return this._fontWeight;\n  }\n  set fontWeight(value) {\n    if (this._fontWeight === value) {\n      return;\n    }\n    this._fontWeight = value;\n    this.onChangedObservable.notifyObservers(this);\n  }\n  /** Dispose all associated resources */\n  dispose() {\n    this.onChangedObservable.clear();\n  }\n}","map":{"version":3,"names":["Observable","ValueAndUnit","Style","constructor","host","_fontFamily","_fontStyle","_fontWeight","_fontSize","UNITMODE_PIXEL","onChangedObservable","_host","fontSize","toString","value","fromString","notifyObservers","fontFamily","fontStyle","fontWeight","dispose","clear"],"sources":["../../../../dev/gui/src/2D/style.ts"],"sourcesContent":["import { Observable } from \"core/Misc/observable\";\r\nimport type { IDisposable } from \"core/scene\";\r\nimport type { AdvancedDynamicTexture } from \"./advancedDynamicTexture\";\r\nimport { ValueAndUnit } from \"./valueAndUnit\";\r\n\r\n/**\r\n * Define a style used by control to automatically setup properties based on a template.\r\n * Only support font related properties so far\r\n */\r\nexport class Style implements IDisposable {\r\n    private _fontFamily = \"Arial\";\r\n    private _fontStyle = \"\";\r\n    private _fontWeight = \"\";\r\n    /** @internal */\r\n    public _host: AdvancedDynamicTexture;\r\n    /** @internal */\r\n    public _fontSize = new ValueAndUnit(18, ValueAndUnit.UNITMODE_PIXEL, false);\r\n\r\n    /**\r\n     * Observable raised when the style values are changed\r\n     */\r\n    public onChangedObservable = new Observable<Style>();\r\n\r\n    /**\r\n     * Creates a new style object\r\n     * @param host defines the AdvancedDynamicTexture which hosts this style\r\n     */\r\n    public constructor(host: AdvancedDynamicTexture) {\r\n        this._host = host;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the font size\r\n     */\r\n    public get fontSize(): string | number {\r\n        return this._fontSize.toString(this._host);\r\n    }\r\n\r\n    public set fontSize(value: string | number) {\r\n        if (this._fontSize.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._fontSize.fromString(value)) {\r\n            this.onChangedObservable.notifyObservers(this);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the font family\r\n     */\r\n    public get fontFamily(): string {\r\n        return this._fontFamily;\r\n    }\r\n\r\n    public set fontFamily(value: string) {\r\n        if (this._fontFamily === value) {\r\n            return;\r\n        }\r\n\r\n        this._fontFamily = value;\r\n        this.onChangedObservable.notifyObservers(this);\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the font style\r\n     */\r\n    public get fontStyle(): string {\r\n        return this._fontStyle;\r\n    }\r\n\r\n    public set fontStyle(value: string) {\r\n        if (this._fontStyle === value) {\r\n            return;\r\n        }\r\n\r\n        this._fontStyle = value;\r\n        this.onChangedObservable.notifyObservers(this);\r\n    }\r\n\r\n    /** Gets or sets font weight */\r\n    public get fontWeight(): string {\r\n        return this._fontWeight;\r\n    }\r\n\r\n    public set fontWeight(value: string) {\r\n        if (this._fontWeight === value) {\r\n            return;\r\n        }\r\n\r\n        this._fontWeight = value;\r\n        this.onChangedObservable.notifyObservers(this);\r\n    }\r\n\r\n    /** Dispose all associated resources */\r\n    public dispose() {\r\n        this.onChangedObservable.clear();\r\n    }\r\n}\r\n"],"mappings":"AAAA,SAASA,UAAU,QAAE;AAGrB,SAASC,YAAY,QAAQ,mBAAiB;AAE9C;;;;AAIA,OAAM,MAAOC,KAAK;EAcd;;;;EAIAC,YAAmBC,IAA4B;IAjBvC,KAAAC,WAAW,GAAG,OAAO;IACrB,KAAAC,UAAU,GAAG,EAAE;IACf,KAAAC,WAAW,GAAG,EAAE;IAGxB;IACO,KAAAC,SAAS,GAAG,IAAIP,YAAY,CAAC,EAAE,EAAEA,YAAY,CAACQ,cAAc,EAAE,KAAK,CAAC;IAE3E;;;IAGO,KAAAC,mBAAmB,GAAG,IAAIV,UAAU,EAAS;IAOhD,IAAI,CAACW,KAAK,GAAGP,IAAI;EACrB;EAEA;;;EAGA,IAAWQ,QAAQA,CAAA;IACf,OAAO,IAAI,CAACJ,SAAS,CAACK,QAAQ,CAAC,IAAI,CAACF,KAAK,CAAC;EAC9C;EAEA,IAAWC,QAAQA,CAACE,KAAsB;IACtC,IAAI,IAAI,CAACN,SAAS,CAACK,QAAQ,CAAC,IAAI,CAACF,KAAK,CAAC,KAAKG,KAAK,EAAE;MAC/C;;IAGJ,IAAI,IAAI,CAACN,SAAS,CAACO,UAAU,CAACD,KAAK,CAAC,EAAE;MAClC,IAAI,CAACJ,mBAAmB,CAACM,eAAe,CAAC,IAAI,CAAC;;EAEtD;EAEA;;;EAGA,IAAWC,UAAUA,CAAA;IACjB,OAAO,IAAI,CAACZ,WAAW;EAC3B;EAEA,IAAWY,UAAUA,CAACH,KAAa;IAC/B,IAAI,IAAI,CAACT,WAAW,KAAKS,KAAK,EAAE;MAC5B;;IAGJ,IAAI,CAACT,WAAW,GAAGS,KAAK;IACxB,IAAI,CAACJ,mBAAmB,CAACM,eAAe,CAAC,IAAI,CAAC;EAClD;EAEA;;;EAGA,IAAWE,SAASA,CAAA;IAChB,OAAO,IAAI,CAACZ,UAAU;EAC1B;EAEA,IAAWY,SAASA,CAACJ,KAAa;IAC9B,IAAI,IAAI,CAACR,UAAU,KAAKQ,KAAK,EAAE;MAC3B;;IAGJ,IAAI,CAACR,UAAU,GAAGQ,KAAK;IACvB,IAAI,CAACJ,mBAAmB,CAACM,eAAe,CAAC,IAAI,CAAC;EAClD;EAEA;EACA,IAAWG,UAAUA,CAAA;IACjB,OAAO,IAAI,CAACZ,WAAW;EAC3B;EAEA,IAAWY,UAAUA,CAACL,KAAa;IAC/B,IAAI,IAAI,CAACP,WAAW,KAAKO,KAAK,EAAE;MAC5B;;IAGJ,IAAI,CAACP,WAAW,GAAGO,KAAK;IACxB,IAAI,CAACJ,mBAAmB,CAACM,eAAe,CAAC,IAAI,CAAC;EAClD;EAEA;EACOI,OAAOA,CAAA;IACV,IAAI,CAACV,mBAAmB,CAACW,KAAK,EAAE;EACpC"},"metadata":{},"sourceType":"module","externalDependencies":[]}