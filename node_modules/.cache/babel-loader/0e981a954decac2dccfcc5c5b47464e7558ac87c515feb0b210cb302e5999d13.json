{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { NodeMaterialBlock } from \"../../nodeMaterialBlock.js\";\nimport { NodeMaterialBlockTargets } from \"../../Enums/nodeMaterialBlockTargets.js\";\nimport { NodeMaterialBlockConnectionPointTypes } from \"../../Enums/nodeMaterialBlockConnectionPointTypes.js\";\nimport { NodeMaterialSystemValues } from \"../../Enums/nodeMaterialSystemValues.js\";\nimport { InputBlock } from \"../Input/inputBlock.js\";\nimport { RegisterClass } from \"../../../../Misc/typeStore.js\";\n/**\n * Block used to add support for instances\n * @see https://doc.babylonjs.com/features/featuresDeepDive/mesh/copies/instances\n */\nexport class InstancesBlock extends NodeMaterialBlock {\n  /**\n   * Creates a new InstancesBlock\n   * @param name defines the block name\n   */\n  constructor(name) {\n    super(name, NodeMaterialBlockTargets.Vertex);\n    this.registerInput(\"world0\", NodeMaterialBlockConnectionPointTypes.Vector4);\n    this.registerInput(\"world1\", NodeMaterialBlockConnectionPointTypes.Vector4);\n    this.registerInput(\"world2\", NodeMaterialBlockConnectionPointTypes.Vector4);\n    this.registerInput(\"world3\", NodeMaterialBlockConnectionPointTypes.Vector4);\n    this.registerInput(\"world\", NodeMaterialBlockConnectionPointTypes.Matrix, true);\n    this.registerOutput(\"output\", NodeMaterialBlockConnectionPointTypes.Matrix);\n    this.registerOutput(\"instanceID\", NodeMaterialBlockConnectionPointTypes.Float);\n  }\n  /**\n   * Gets the current class name\n   * @returns the class name\n   */\n  getClassName() {\n    return \"InstancesBlock\";\n  }\n  /**\n   * Gets the first world row input component\n   */\n  get world0() {\n    return this._inputs[0];\n  }\n  /**\n   * Gets the second world row input component\n   */\n  get world1() {\n    return this._inputs[1];\n  }\n  /**\n   * Gets the third world row input component\n   */\n  get world2() {\n    return this._inputs[2];\n  }\n  /**\n   * Gets the forth world row input component\n   */\n  get world3() {\n    return this._inputs[3];\n  }\n  /**\n   * Gets the world input component\n   */\n  get world() {\n    return this._inputs[4];\n  }\n  /**\n   * Gets the output component\n   */\n  get output() {\n    return this._outputs[0];\n  }\n  /**\n   * Gets the instanceID component\n   */\n  get instanceID() {\n    return this._outputs[1];\n  }\n  autoConfigure(material, additionalFilteringInfo = () => true) {\n    if (!this.world0.connectedPoint) {\n      let world0Input = material.getInputBlockByPredicate(b => b.isAttribute && b.name === \"world0\" && additionalFilteringInfo(b));\n      if (!world0Input) {\n        world0Input = new InputBlock(\"world0\");\n        world0Input.setAsAttribute(\"world0\");\n      }\n      world0Input.output.connectTo(this.world0);\n    }\n    if (!this.world1.connectedPoint) {\n      let world1Input = material.getInputBlockByPredicate(b => b.isAttribute && b.name === \"world1\" && additionalFilteringInfo(b));\n      if (!world1Input) {\n        world1Input = new InputBlock(\"world1\");\n        world1Input.setAsAttribute(\"world1\");\n      }\n      world1Input.output.connectTo(this.world1);\n    }\n    if (!this.world2.connectedPoint) {\n      let world2Input = material.getInputBlockByPredicate(b => b.isAttribute && b.name === \"world2\" && additionalFilteringInfo(b));\n      if (!world2Input) {\n        world2Input = new InputBlock(\"world2\");\n        world2Input.setAsAttribute(\"world2\");\n      }\n      world2Input.output.connectTo(this.world2);\n    }\n    if (!this.world3.connectedPoint) {\n      let world3Input = material.getInputBlockByPredicate(b => b.isAttribute && b.name === \"world3\" && additionalFilteringInfo(b));\n      if (!world3Input) {\n        world3Input = new InputBlock(\"world3\");\n        world3Input.setAsAttribute(\"world3\");\n      }\n      world3Input.output.connectTo(this.world3);\n    }\n    if (!this.world.connectedPoint) {\n      let worldInput = material.getInputBlockByPredicate(b => b.isAttribute && b.name === \"world\" && additionalFilteringInfo(b));\n      if (!worldInput) {\n        worldInput = new InputBlock(\"world\");\n        worldInput.setAsSystemValue(NodeMaterialSystemValues.World);\n      }\n      worldInput.output.connectTo(this.world);\n    }\n    this.world.define = \"!INSTANCES || THIN_INSTANCES\";\n  }\n  prepareDefines(mesh, nodeMaterial, defines, useInstances = false, subMesh) {\n    let changed = false;\n    if (defines[\"INSTANCES\"] !== useInstances) {\n      defines.setValue(\"INSTANCES\", useInstances);\n      changed = true;\n    }\n    if (subMesh && defines[\"THIN_INSTANCES\"] !== !!(subMesh === null || subMesh === void 0 ? void 0 : subMesh.getRenderingMesh().hasThinInstances)) {\n      defines.setValue(\"THIN_INSTANCES\", !!(subMesh === null || subMesh === void 0 ? void 0 : subMesh.getRenderingMesh().hasThinInstances));\n      changed = true;\n    }\n    if (changed) {\n      defines.markAsUnprocessed();\n    }\n  }\n  _buildBlock(state) {\n    super._buildBlock(state);\n    const engine = state.sharedData.scene.getEngine();\n    // Register for defines\n    state.sharedData.blocksWithDefines.push(this);\n    // Emit code\n    const output = this._outputs[0];\n    const instanceID = this._outputs[1];\n    const world0 = this.world0;\n    const world1 = this.world1;\n    const world2 = this.world2;\n    const world3 = this.world3;\n    state.compilationString += `#ifdef INSTANCES\\n`;\n    state.compilationString += this._declareOutput(output, state) + ` = mat4(${world0.associatedVariableName}, ${world1.associatedVariableName}, ${world2.associatedVariableName}, ${world3.associatedVariableName});\\n`;\n    state.compilationString += `#ifdef THIN_INSTANCES\\n`;\n    state.compilationString += `${output.associatedVariableName} = ${this.world.associatedVariableName} * ${output.associatedVariableName};\\n`;\n    state.compilationString += `#endif\\n`;\n    if (engine._caps.canUseGLInstanceID) {\n      state.compilationString += this._declareOutput(instanceID, state) + ` = float(gl_InstanceID);\\n`;\n    } else {\n      state.compilationString += this._declareOutput(instanceID, state) + ` = 0.0;\\n`;\n    }\n    state.compilationString += `#else\\n`;\n    state.compilationString += this._declareOutput(output, state) + ` = ${this.world.associatedVariableName};\\n`;\n    state.compilationString += this._declareOutput(instanceID, state) + ` = 0.0;\\n`;\n    state.compilationString += `#endif\\n`;\n    return this;\n  }\n}\nRegisterClass(\"BABYLON.InstancesBlock\", InstancesBlock);","map":{"version":3,"names":["NodeMaterialBlock","NodeMaterialBlockTargets","NodeMaterialBlockConnectionPointTypes","NodeMaterialSystemValues","InputBlock","RegisterClass","InstancesBlock","constructor","name","Vertex","registerInput","Vector4","Matrix","registerOutput","Float","getClassName","world0","_inputs","world1","world2","world3","world","output","_outputs","instanceID","autoConfigure","material","additionalFilteringInfo","connectedPoint","world0Input","getInputBlockByPredicate","b","isAttribute","setAsAttribute","connectTo","world1Input","world2Input","world3Input","worldInput","setAsSystemValue","World","define","prepareDefines","mesh","nodeMaterial","defines","useInstances","subMesh","changed","setValue","getRenderingMesh","hasThinInstances","markAsUnprocessed","_buildBlock","state","engine","sharedData","scene","getEngine","blocksWithDefines","push","compilationString","_declareOutput","associatedVariableName","_caps","canUseGLInstanceID"],"sources":["../../../../../../../dev/core/src/Materials/Node/Blocks/Vertex/instancesBlock.ts"],"sourcesContent":["import { NodeMaterialBlock } from \"../../nodeMaterialBlock\";\r\nimport { NodeMaterialBlockTargets } from \"../../Enums/nodeMaterialBlockTargets\";\r\nimport { NodeMaterialBlockConnectionPointTypes } from \"../../Enums/nodeMaterialBlockConnectionPointTypes\";\r\nimport type { NodeMaterialConnectionPoint } from \"../../nodeMaterialBlockConnectionPoint\";\r\nimport type { NodeMaterialBuildState } from \"../../nodeMaterialBuildState\";\r\nimport type { AbstractMesh } from \"../../../../Meshes/abstractMesh\";\r\nimport type { NodeMaterial, NodeMaterialDefines } from \"../../nodeMaterial\";\r\nimport { NodeMaterialSystemValues } from \"../../Enums/nodeMaterialSystemValues\";\r\nimport { InputBlock } from \"../Input/inputBlock\";\r\nimport { RegisterClass } from \"../../../../Misc/typeStore\";\r\nimport type { SubMesh } from \"../../../../Meshes/subMesh\";\r\n\r\n/**\r\n * Block used to add support for instances\r\n * @see https://doc.babylonjs.com/features/featuresDeepDive/mesh/copies/instances\r\n */\r\nexport class InstancesBlock extends NodeMaterialBlock {\r\n    /**\r\n     * Creates a new InstancesBlock\r\n     * @param name defines the block name\r\n     */\r\n    public constructor(name: string) {\r\n        super(name, NodeMaterialBlockTargets.Vertex);\r\n\r\n        this.registerInput(\"world0\", NodeMaterialBlockConnectionPointTypes.Vector4);\r\n        this.registerInput(\"world1\", NodeMaterialBlockConnectionPointTypes.Vector4);\r\n        this.registerInput(\"world2\", NodeMaterialBlockConnectionPointTypes.Vector4);\r\n        this.registerInput(\"world3\", NodeMaterialBlockConnectionPointTypes.Vector4);\r\n        this.registerInput(\"world\", NodeMaterialBlockConnectionPointTypes.Matrix, true);\r\n\r\n        this.registerOutput(\"output\", NodeMaterialBlockConnectionPointTypes.Matrix);\r\n        this.registerOutput(\"instanceID\", NodeMaterialBlockConnectionPointTypes.Float);\r\n    }\r\n\r\n    /**\r\n     * Gets the current class name\r\n     * @returns the class name\r\n     */\r\n    public getClassName() {\r\n        return \"InstancesBlock\";\r\n    }\r\n\r\n    /**\r\n     * Gets the first world row input component\r\n     */\r\n    public get world0(): NodeMaterialConnectionPoint {\r\n        return this._inputs[0];\r\n    }\r\n\r\n    /**\r\n     * Gets the second world row input component\r\n     */\r\n    public get world1(): NodeMaterialConnectionPoint {\r\n        return this._inputs[1];\r\n    }\r\n\r\n    /**\r\n     * Gets the third world row input component\r\n     */\r\n    public get world2(): NodeMaterialConnectionPoint {\r\n        return this._inputs[2];\r\n    }\r\n\r\n    /**\r\n     * Gets the forth world row input component\r\n     */\r\n    public get world3(): NodeMaterialConnectionPoint {\r\n        return this._inputs[3];\r\n    }\r\n\r\n    /**\r\n     * Gets the world input component\r\n     */\r\n    public get world(): NodeMaterialConnectionPoint {\r\n        return this._inputs[4];\r\n    }\r\n\r\n    /**\r\n     * Gets the output component\r\n     */\r\n    public get output(): NodeMaterialConnectionPoint {\r\n        return this._outputs[0];\r\n    }\r\n\r\n    /**\r\n     * Gets the instanceID component\r\n     */\r\n    public get instanceID(): NodeMaterialConnectionPoint {\r\n        return this._outputs[1];\r\n    }\r\n\r\n    public autoConfigure(material: NodeMaterial, additionalFilteringInfo: (node: NodeMaterialBlock) => boolean = () => true) {\r\n        if (!this.world0.connectedPoint) {\r\n            let world0Input = material.getInputBlockByPredicate((b) => b.isAttribute && b.name === \"world0\" && additionalFilteringInfo(b));\r\n\r\n            if (!world0Input) {\r\n                world0Input = new InputBlock(\"world0\");\r\n                world0Input.setAsAttribute(\"world0\");\r\n            }\r\n            world0Input.output.connectTo(this.world0);\r\n        }\r\n        if (!this.world1.connectedPoint) {\r\n            let world1Input = material.getInputBlockByPredicate((b) => b.isAttribute && b.name === \"world1\" && additionalFilteringInfo(b));\r\n\r\n            if (!world1Input) {\r\n                world1Input = new InputBlock(\"world1\");\r\n                world1Input.setAsAttribute(\"world1\");\r\n            }\r\n            world1Input.output.connectTo(this.world1);\r\n        }\r\n        if (!this.world2.connectedPoint) {\r\n            let world2Input = material.getInputBlockByPredicate((b) => b.isAttribute && b.name === \"world2\" && additionalFilteringInfo(b));\r\n\r\n            if (!world2Input) {\r\n                world2Input = new InputBlock(\"world2\");\r\n                world2Input.setAsAttribute(\"world2\");\r\n            }\r\n            world2Input.output.connectTo(this.world2);\r\n        }\r\n        if (!this.world3.connectedPoint) {\r\n            let world3Input = material.getInputBlockByPredicate((b) => b.isAttribute && b.name === \"world3\" && additionalFilteringInfo(b));\r\n\r\n            if (!world3Input) {\r\n                world3Input = new InputBlock(\"world3\");\r\n                world3Input.setAsAttribute(\"world3\");\r\n            }\r\n            world3Input.output.connectTo(this.world3);\r\n        }\r\n        if (!this.world.connectedPoint) {\r\n            let worldInput = material.getInputBlockByPredicate((b) => b.isAttribute && b.name === \"world\" && additionalFilteringInfo(b));\r\n\r\n            if (!worldInput) {\r\n                worldInput = new InputBlock(\"world\");\r\n                worldInput.setAsSystemValue(NodeMaterialSystemValues.World);\r\n            }\r\n            worldInput.output.connectTo(this.world);\r\n        }\r\n\r\n        this.world.define = \"!INSTANCES || THIN_INSTANCES\";\r\n    }\r\n\r\n    public prepareDefines(mesh: AbstractMesh, nodeMaterial: NodeMaterial, defines: NodeMaterialDefines, useInstances: boolean = false, subMesh?: SubMesh) {\r\n        let changed = false;\r\n        if (defines[\"INSTANCES\"] !== useInstances) {\r\n            defines.setValue(\"INSTANCES\", useInstances);\r\n            changed = true;\r\n        }\r\n\r\n        if (subMesh && defines[\"THIN_INSTANCES\"] !== !!subMesh?.getRenderingMesh().hasThinInstances) {\r\n            defines.setValue(\"THIN_INSTANCES\", !!subMesh?.getRenderingMesh().hasThinInstances);\r\n            changed = true;\r\n        }\r\n\r\n        if (changed) {\r\n            defines.markAsUnprocessed();\r\n        }\r\n    }\r\n\r\n    protected _buildBlock(state: NodeMaterialBuildState) {\r\n        super._buildBlock(state);\r\n\r\n        const engine = state.sharedData.scene.getEngine();\r\n\r\n        // Register for defines\r\n        state.sharedData.blocksWithDefines.push(this);\r\n\r\n        // Emit code\r\n        const output = this._outputs[0];\r\n        const instanceID = this._outputs[1];\r\n        const world0 = this.world0;\r\n        const world1 = this.world1;\r\n        const world2 = this.world2;\r\n        const world3 = this.world3;\r\n\r\n        state.compilationString += `#ifdef INSTANCES\\n`;\r\n        state.compilationString +=\r\n            this._declareOutput(output, state) +\r\n            ` = mat4(${world0.associatedVariableName}, ${world1.associatedVariableName}, ${world2.associatedVariableName}, ${world3.associatedVariableName});\\n`;\r\n        state.compilationString += `#ifdef THIN_INSTANCES\\n`;\r\n        state.compilationString += `${output.associatedVariableName} = ${this.world.associatedVariableName} * ${output.associatedVariableName};\\n`;\r\n        state.compilationString += `#endif\\n`;\r\n        if (engine._caps.canUseGLInstanceID) {\r\n            state.compilationString += this._declareOutput(instanceID, state) + ` = float(gl_InstanceID);\\n`;\r\n        } else {\r\n            state.compilationString += this._declareOutput(instanceID, state) + ` = 0.0;\\n`;\r\n        }\r\n        state.compilationString += `#else\\n`;\r\n        state.compilationString += this._declareOutput(output, state) + ` = ${this.world.associatedVariableName};\\n`;\r\n        state.compilationString += this._declareOutput(instanceID, state) + ` = 0.0;\\n`;\r\n        state.compilationString += `#endif\\n`;\r\n        return this;\r\n    }\r\n}\r\n\r\nRegisterClass(\"BABYLON.InstancesBlock\", InstancesBlock);\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}