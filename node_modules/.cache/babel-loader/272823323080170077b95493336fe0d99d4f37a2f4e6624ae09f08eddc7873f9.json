{"ast":null,"code":"import { RichTypeNumber } from \"../../../flowGraphRichTypes.js\";\nimport { FlowGraphWithOnDoneExecutionBlock } from \"../../../flowGraphWithOnDoneExecutionBlock.js\";\nimport { RegisterClass } from \"../../../../Misc/typeStore.js\";\n/**\n * A block that executes a branch a set number of times.\n * @experimental\n */\nexport class FlowGraphDoNBlock extends FlowGraphWithOnDoneExecutionBlock {\n  constructor(config) {\n    super(config);\n    this.reset = this._registerSignalInput(\"reset\");\n    this.maxNumberOfExecutions = this._registerDataInput(\"numberOfExecutions\", RichTypeNumber);\n    this.currentCount = this._registerDataOutput(\"currentCount\", RichTypeNumber);\n  }\n  _execute(context, callingSignal) {\n    if (callingSignal === this.reset) {\n      this.currentCount.setValue(0, context);\n    } else {\n      const currentCountValue = this.currentCount.getValue(context);\n      if (currentCountValue < this.maxNumberOfExecutions.getValue(context)) {\n        this.currentCount.setValue(currentCountValue + 1, context);\n        this.onDone._activateSignal(context);\n      }\n    }\n  }\n  getClassName() {\n    return \"FGDoNBlock\";\n  }\n}\nRegisterClass(\"FGDoNBlock\", FlowGraphDoNBlock);","map":{"version":3,"names":["RichTypeNumber","FlowGraphWithOnDoneExecutionBlock","RegisterClass","FlowGraphDoNBlock","constructor","config","reset","_registerSignalInput","maxNumberOfExecutions","_registerDataInput","currentCount","_registerDataOutput","_execute","context","callingSignal","setValue","currentCountValue","getValue","onDone","_activateSignal","getClassName"],"sources":["../../../../../../../dev/core/src/FlowGraph/Blocks/Execution/ControlFlow/flowGraphDoNBlock.ts"],"sourcesContent":["import type { FlowGraphContext } from \"../../../flowGraphContext\";\r\nimport type { FlowGraphDataConnection } from \"../../../flowGraphDataConnection\";\r\nimport { RichTypeNumber } from \"../../../flowGraphRichTypes\";\r\nimport type { FlowGraphSignalConnection } from \"../../../flowGraphSignalConnection\";\r\nimport { FlowGraphWithOnDoneExecutionBlock } from \"../../../flowGraphWithOnDoneExecutionBlock\";\r\nimport { RegisterClass } from \"../../../../Misc/typeStore\";\r\nimport type { IFlowGraphBlockConfiguration } from \"../../../flowGraphBlock\";\r\n\r\n/**\r\n * A block that executes a branch a set number of times.\r\n * @experimental\r\n */\r\nexport class FlowGraphDoNBlock extends FlowGraphWithOnDoneExecutionBlock {\r\n    /**\r\n     * Input connection: Resets the counter\r\n     */\r\n    public readonly reset: FlowGraphSignalConnection;\r\n    /**\r\n     * Input connection: The maximum number of times the block can be executed.\r\n     */\r\n    public readonly maxNumberOfExecutions: FlowGraphDataConnection<number>;\r\n    /**\r\n     * Output connection: The number of times the block has been executed.\r\n     */\r\n    public readonly currentCount: FlowGraphDataConnection<number>;\r\n\r\n    constructor(config?: IFlowGraphBlockConfiguration) {\r\n        super(config);\r\n        this.reset = this._registerSignalInput(\"reset\");\r\n        this.maxNumberOfExecutions = this._registerDataInput(\"numberOfExecutions\", RichTypeNumber);\r\n        this.currentCount = this._registerDataOutput(\"currentCount\", RichTypeNumber);\r\n    }\r\n\r\n    public _execute(context: FlowGraphContext, callingSignal: FlowGraphSignalConnection): void {\r\n        if (callingSignal === this.reset) {\r\n            this.currentCount.setValue(0, context);\r\n        } else {\r\n            const currentCountValue = this.currentCount.getValue(context);\r\n            if (currentCountValue < this.maxNumberOfExecutions.getValue(context)) {\r\n                this.currentCount.setValue(currentCountValue + 1, context);\r\n                this.onDone._activateSignal(context);\r\n            }\r\n        }\r\n    }\r\n\r\n    public getClassName(): string {\r\n        return \"FGDoNBlock\";\r\n    }\r\n}\r\nRegisterClass(\"FGDoNBlock\", FlowGraphDoNBlock);\r\n"],"mappings":"AAEA,SAASA,cAAc,QAAQ,gCAA8B;AAE7D,SAASC,iCAAiC,QAAQ,+CAA6C;AAC/F,SAASC,aAAa,QAAQ,+BAA6B;AAG3D;;;;AAIA,OAAM,MAAOC,iBAAkB,SAAQF,iCAAiC;EAcpEG,YAAYC,MAAqC;IAC7C,KAAK,CAACA,MAAM,CAAC;IACb,IAAI,CAACC,KAAK,GAAG,IAAI,CAACC,oBAAoB,CAAC,OAAO,CAAC;IAC/C,IAAI,CAACC,qBAAqB,GAAG,IAAI,CAACC,kBAAkB,CAAC,oBAAoB,EAAET,cAAc,CAAC;IAC1F,IAAI,CAACU,YAAY,GAAG,IAAI,CAACC,mBAAmB,CAAC,cAAc,EAAEX,cAAc,CAAC;EAChF;EAEOY,QAAQA,CAACC,OAAyB,EAAEC,aAAwC;IAC/E,IAAIA,aAAa,KAAK,IAAI,CAACR,KAAK,EAAE;MAC9B,IAAI,CAACI,YAAY,CAACK,QAAQ,CAAC,CAAC,EAAEF,OAAO,CAAC;KACzC,MAAM;MACH,MAAMG,iBAAiB,GAAG,IAAI,CAACN,YAAY,CAACO,QAAQ,CAACJ,OAAO,CAAC;MAC7D,IAAIG,iBAAiB,GAAG,IAAI,CAACR,qBAAqB,CAACS,QAAQ,CAACJ,OAAO,CAAC,EAAE;QAClE,IAAI,CAACH,YAAY,CAACK,QAAQ,CAACC,iBAAiB,GAAG,CAAC,EAAEH,OAAO,CAAC;QAC1D,IAAI,CAACK,MAAM,CAACC,eAAe,CAACN,OAAO,CAAC;;;EAGhD;EAEOO,YAAYA,CAAA;IACf,OAAO,YAAY;EACvB;;AAEJlB,aAAa,CAAC,YAAY,EAAEC,iBAAiB,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}