{"ast":null,"code":"import * as WebGPUConstants from \"./webgpuConstants.js\";\nimport { PerfCounter } from \"../../Misc/perfCounter.js\";\nimport { WebGPUQuerySet } from \"./webgpuQuerySet.js\";\n/** @internal */\nexport class WebGPUTimestampQuery {\n  get gpuFrameTimeCounter() {\n    return this._gpuFrameTimeCounter;\n  }\n  constructor(device, bufferManager) {\n    this._enabled = false;\n    this._gpuFrameTimeCounter = new PerfCounter();\n    this._measureDurationState = 0;\n    this._device = device;\n    this._bufferManager = bufferManager;\n  }\n  get enable() {\n    return this._enabled;\n  }\n  set enable(value) {\n    if (this._enabled === value) {\n      return;\n    }\n    this._enabled = value;\n    this._measureDurationState = 0;\n    if (value) {\n      this._measureDuration = new WebGPUDurationMeasure(this._device, this._bufferManager);\n    } else {\n      this._measureDuration.dispose();\n    }\n  }\n  startFrame(commandEncoder) {\n    if (this._enabled && this._measureDurationState === 0) {\n      this._measureDuration.start(commandEncoder);\n      this._measureDurationState = 1;\n    }\n  }\n  endFrame(commandEncoder) {\n    if (this._measureDurationState === 1) {\n      this._measureDurationState = 2;\n      this._measureDuration.stop(commandEncoder).then(duration => {\n        if (duration !== null && duration >= 0) {\n          this._gpuFrameTimeCounter.fetchNewFrame();\n          this._gpuFrameTimeCounter.addCount(duration, true);\n        }\n        this._measureDurationState = 0;\n      });\n    }\n  }\n}\n/** @internal */\nexport class WebGPUDurationMeasure {\n  constructor(device, bufferManager) {\n    this._querySet = new WebGPUQuerySet(2, WebGPUConstants.QueryType.Timestamp, device, bufferManager);\n  }\n  start(encoder) {\n    encoder.writeTimestamp(this._querySet.querySet, 0);\n  }\n  async stop(encoder) {\n    encoder.writeTimestamp(this._querySet.querySet, 1);\n    return this._querySet.readTwoValuesAndSubtract(0);\n  }\n  dispose() {\n    this._querySet.dispose();\n  }\n}","map":{"version":3,"names":["WebGPUConstants","PerfCounter","WebGPUQuerySet","WebGPUTimestampQuery","gpuFrameTimeCounter","_gpuFrameTimeCounter","constructor","device","bufferManager","_enabled","_measureDurationState","_device","_bufferManager","enable","value","_measureDuration","WebGPUDurationMeasure","dispose","startFrame","commandEncoder","start","endFrame","stop","then","duration","fetchNewFrame","addCount","_querySet","QueryType","Timestamp","encoder","writeTimestamp","querySet","readTwoValuesAndSubtract"],"sources":["../../../../../dev/core/src/Engines/WebGPU/webgpuTimestampQuery.ts"],"sourcesContent":["import type { WebGPUBufferManager } from \"./webgpuBufferManager\";\r\nimport * as WebGPUConstants from \"./webgpuConstants\";\r\nimport { PerfCounter } from \"../../Misc/perfCounter\";\r\nimport { WebGPUQuerySet } from \"./webgpuQuerySet\";\r\n\r\n/** @internal */\r\nexport class WebGPUTimestampQuery {\r\n    private _device: GPUDevice;\r\n    private _bufferManager: WebGPUBufferManager;\r\n\r\n    private _enabled = false;\r\n    private _gpuFrameTimeCounter: PerfCounter = new PerfCounter();\r\n    private _measureDuration: WebGPUDurationMeasure;\r\n    private _measureDurationState = 0;\r\n\r\n    public get gpuFrameTimeCounter() {\r\n        return this._gpuFrameTimeCounter;\r\n    }\r\n\r\n    constructor(device: GPUDevice, bufferManager: WebGPUBufferManager) {\r\n        this._device = device;\r\n        this._bufferManager = bufferManager;\r\n    }\r\n\r\n    public get enable(): boolean {\r\n        return this._enabled;\r\n    }\r\n\r\n    public set enable(value: boolean) {\r\n        if (this._enabled === value) {\r\n            return;\r\n        }\r\n\r\n        this._enabled = value;\r\n        this._measureDurationState = 0;\r\n        if (value) {\r\n            this._measureDuration = new WebGPUDurationMeasure(this._device, this._bufferManager);\r\n        } else {\r\n            this._measureDuration.dispose();\r\n        }\r\n    }\r\n\r\n    public startFrame(commandEncoder: GPUCommandEncoder): void {\r\n        if (this._enabled && this._measureDurationState === 0) {\r\n            this._measureDuration.start(commandEncoder);\r\n            this._measureDurationState = 1;\r\n        }\r\n    }\r\n\r\n    public endFrame(commandEncoder: GPUCommandEncoder): void {\r\n        if (this._measureDurationState === 1) {\r\n            this._measureDurationState = 2;\r\n            this._measureDuration.stop(commandEncoder).then((duration) => {\r\n                if (duration !== null && duration >= 0) {\r\n                    this._gpuFrameTimeCounter.fetchNewFrame();\r\n                    this._gpuFrameTimeCounter.addCount(duration, true);\r\n                }\r\n                this._measureDurationState = 0;\r\n            });\r\n        }\r\n    }\r\n}\r\n\r\n/** @internal */\r\nexport class WebGPUDurationMeasure {\r\n    private _querySet: WebGPUQuerySet;\r\n\r\n    constructor(device: GPUDevice, bufferManager: WebGPUBufferManager) {\r\n        this._querySet = new WebGPUQuerySet(2, WebGPUConstants.QueryType.Timestamp, device, bufferManager);\r\n    }\r\n\r\n    public start(encoder: GPUCommandEncoder): void {\r\n        encoder.writeTimestamp(this._querySet.querySet, 0);\r\n    }\r\n\r\n    public async stop(encoder: GPUCommandEncoder): Promise<number | null> {\r\n        encoder.writeTimestamp(this._querySet.querySet, 1);\r\n\r\n        return this._querySet.readTwoValuesAndSubtract(0);\r\n    }\r\n\r\n    public dispose() {\r\n        this._querySet.dispose();\r\n    }\r\n}\r\n"],"mappings":"AACA,OAAO,KAAKA,eAAe,MAAM,sBAAoB;AACrD,SAASC,WAAW,QAAQ,2BAAyB;AACrD,SAASC,cAAc,QAAQ,qBAAmB;AAElD;AACA,OAAM,MAAOC,oBAAoB;EAS7B,IAAWC,mBAAmBA,CAAA;IAC1B,OAAO,IAAI,CAACC,oBAAoB;EACpC;EAEAC,YAAYC,MAAiB,EAAEC,aAAkC;IATzD,KAAAC,QAAQ,GAAG,KAAK;IAChB,KAAAJ,oBAAoB,GAAgB,IAAIJ,WAAW,EAAE;IAErD,KAAAS,qBAAqB,GAAG,CAAC;IAO7B,IAAI,CAACC,OAAO,GAAGJ,MAAM;IACrB,IAAI,CAACK,cAAc,GAAGJ,aAAa;EACvC;EAEA,IAAWK,MAAMA,CAAA;IACb,OAAO,IAAI,CAACJ,QAAQ;EACxB;EAEA,IAAWI,MAAMA,CAACC,KAAc;IAC5B,IAAI,IAAI,CAACL,QAAQ,KAAKK,KAAK,EAAE;MACzB;;IAGJ,IAAI,CAACL,QAAQ,GAAGK,KAAK;IACrB,IAAI,CAACJ,qBAAqB,GAAG,CAAC;IAC9B,IAAII,KAAK,EAAE;MACP,IAAI,CAACC,gBAAgB,GAAG,IAAIC,qBAAqB,CAAC,IAAI,CAACL,OAAO,EAAE,IAAI,CAACC,cAAc,CAAC;KACvF,MAAM;MACH,IAAI,CAACG,gBAAgB,CAACE,OAAO,EAAE;;EAEvC;EAEOC,UAAUA,CAACC,cAAiC;IAC/C,IAAI,IAAI,CAACV,QAAQ,IAAI,IAAI,CAACC,qBAAqB,KAAK,CAAC,EAAE;MACnD,IAAI,CAACK,gBAAgB,CAACK,KAAK,CAACD,cAAc,CAAC;MAC3C,IAAI,CAACT,qBAAqB,GAAG,CAAC;;EAEtC;EAEOW,QAAQA,CAACF,cAAiC;IAC7C,IAAI,IAAI,CAACT,qBAAqB,KAAK,CAAC,EAAE;MAClC,IAAI,CAACA,qBAAqB,GAAG,CAAC;MAC9B,IAAI,CAACK,gBAAgB,CAACO,IAAI,CAACH,cAAc,CAAC,CAACI,IAAI,CAAEC,QAAQ,IAAI;QACzD,IAAIA,QAAQ,KAAK,IAAI,IAAIA,QAAQ,IAAI,CAAC,EAAE;UACpC,IAAI,CAACnB,oBAAoB,CAACoB,aAAa,EAAE;UACzC,IAAI,CAACpB,oBAAoB,CAACqB,QAAQ,CAACF,QAAQ,EAAE,IAAI,CAAC;;QAEtD,IAAI,CAACd,qBAAqB,GAAG,CAAC;MAClC,CAAC,CAAC;;EAEV;;AAGJ;AACA,OAAM,MAAOM,qBAAqB;EAG9BV,YAAYC,MAAiB,EAAEC,aAAkC;IAC7D,IAAI,CAACmB,SAAS,GAAG,IAAIzB,cAAc,CAAC,CAAC,EAAEF,eAAe,CAAC4B,SAAS,CAACC,SAAS,EAAEtB,MAAM,EAAEC,aAAa,CAAC;EACtG;EAEOY,KAAKA,CAACU,OAA0B;IACnCA,OAAO,CAACC,cAAc,CAAC,IAAI,CAACJ,SAAS,CAACK,QAAQ,EAAE,CAAC,CAAC;EACtD;EAEO,MAAMV,IAAIA,CAACQ,OAA0B;IACxCA,OAAO,CAACC,cAAc,CAAC,IAAI,CAACJ,SAAS,CAACK,QAAQ,EAAE,CAAC,CAAC;IAElD,OAAO,IAAI,CAACL,SAAS,CAACM,wBAAwB,CAAC,CAAC,CAAC;EACrD;EAEOhB,OAAOA,CAAA;IACV,IAAI,CAACU,SAAS,CAACV,OAAO,EAAE;EAC5B"},"metadata":{},"sourceType":"module","externalDependencies":[]}