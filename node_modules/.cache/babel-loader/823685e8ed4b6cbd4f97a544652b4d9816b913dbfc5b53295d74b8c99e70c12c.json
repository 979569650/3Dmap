{"ast":null,"code":"import { __decorate } from \"@babylonjs/core/tslib.es6.js\";\nimport { Vector3, Matrix } from \"@babylonjs/core/Maths/math.vector.js\";\nimport { Tools } from \"@babylonjs/core/Misc/tools.js\";\nimport { Control } from \"./control.js\";\nimport { ValueAndUnit } from \"../valueAndUnit.js\";\nimport { RegisterClass } from \"@babylonjs/core/Misc/typeStore.js\";\nimport { serialize } from \"@babylonjs/core/Misc/decorators.js\";\n/** Class used to render 2D lines */\nexport class Line extends Control {\n  /** Gets or sets the dash pattern */\n  get dash() {\n    return this._dash;\n  }\n  set dash(value) {\n    if (this._dash === value) {\n      return;\n    }\n    this._dash = value;\n    this._markAsDirty();\n  }\n  /** Gets or sets the control connected with the line end */\n  get connectedControl() {\n    return this._connectedControl;\n  }\n  set connectedControl(value) {\n    if (this._connectedControl === value) {\n      return;\n    }\n    if (this._connectedControlDirtyObserver && this._connectedControl) {\n      this._connectedControl.onDirtyObservable.remove(this._connectedControlDirtyObserver);\n      this._connectedControlDirtyObserver = null;\n    }\n    if (value) {\n      this._connectedControlDirtyObserver = value.onDirtyObservable.add(() => this._markAsDirty());\n    }\n    this._connectedControl = value;\n    this._markAsDirty();\n  }\n  /** Gets or sets start coordinates on X axis */\n  get x1() {\n    return this._x1.toString(this._host);\n  }\n  set x1(value) {\n    if (this._x1.toString(this._host) === value) {\n      return;\n    }\n    if (this._x1.fromString(value)) {\n      this._markAsDirty();\n    }\n  }\n  /** Gets or sets start coordinates on Y axis */\n  get y1() {\n    return this._y1.toString(this._host);\n  }\n  set y1(value) {\n    if (this._y1.toString(this._host) === value) {\n      return;\n    }\n    if (this._y1.fromString(value)) {\n      this._markAsDirty();\n    }\n  }\n  /** Gets or sets end coordinates on X axis */\n  get x2() {\n    return this._x2.toString(this._host);\n  }\n  set x2(value) {\n    if (this._x2.toString(this._host) === value) {\n      return;\n    }\n    if (this._x2.fromString(value)) {\n      this._markAsDirty();\n    }\n  }\n  /** Gets or sets end coordinates on Y axis */\n  get y2() {\n    return this._y2.toString(this._host);\n  }\n  set y2(value) {\n    if (this._y2.toString(this._host) === value) {\n      return;\n    }\n    if (this._y2.fromString(value)) {\n      this._markAsDirty();\n    }\n  }\n  /** Gets or sets line width */\n  get lineWidth() {\n    return this._lineWidth;\n  }\n  set lineWidth(value) {\n    if (this._lineWidth === value) {\n      return;\n    }\n    this._lineWidth = value;\n    this._markAsDirty();\n  }\n  /** Gets or sets horizontal alignment */\n  set horizontalAlignment(value) {\n    return;\n  }\n  /** Gets or sets vertical alignment */\n  set verticalAlignment(value) {\n    return;\n  }\n  /** @internal */\n  get _effectiveX2() {\n    return (this._connectedControl ? this._connectedControl.centerX : 0) + this._x2.getValue(this._host);\n  }\n  /** @internal */\n  get _effectiveY2() {\n    return (this._connectedControl ? this._connectedControl.centerY : 0) + this._y2.getValue(this._host);\n  }\n  /**\n   * Creates a new Line\n   * @param name defines the control name\n   */\n  constructor(name) {\n    super(name);\n    this.name = name;\n    this._lineWidth = 1;\n    /** @internal */\n    this._x1 = new ValueAndUnit(0);\n    /** @internal */\n    this._y1 = new ValueAndUnit(0);\n    /** @internal */\n    this._x2 = new ValueAndUnit(0);\n    /** @internal */\n    this._y2 = new ValueAndUnit(0);\n    this._dash = new Array();\n    this._automaticSize = true;\n    this.isHitTestVisible = false;\n    this._horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\n    this._verticalAlignment = Control.VERTICAL_ALIGNMENT_TOP;\n  }\n  _getTypeName() {\n    return \"Line\";\n  }\n  _draw(context) {\n    context.save();\n    if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\n      context.shadowColor = this.shadowColor;\n      context.shadowBlur = this.shadowBlur;\n      context.shadowOffsetX = this.shadowOffsetX;\n      context.shadowOffsetY = this.shadowOffsetY;\n    }\n    this._applyStates(context);\n    context.strokeStyle = this._getColor(context);\n    context.lineWidth = this._lineWidth;\n    context.setLineDash(this._dash);\n    context.beginPath();\n    context.moveTo(this._cachedParentMeasure.left + this._x1.getValue(this._host), this._cachedParentMeasure.top + this._y1.getValue(this._host));\n    context.lineTo(this._cachedParentMeasure.left + this._effectiveX2, this._cachedParentMeasure.top + this._effectiveY2);\n    context.stroke();\n    context.restore();\n  }\n  _measure() {\n    // Width / Height\n    this._currentMeasure.width = Math.abs(this._x1.getValue(this._host) - this._effectiveX2) + this._lineWidth;\n    this._currentMeasure.height = Math.abs(this._y1.getValue(this._host) - this._effectiveY2) + this._lineWidth;\n  }\n  _computeAlignment(parentMeasure) {\n    this._currentMeasure.left = parentMeasure.left + Math.min(this._x1.getValue(this._host), this._effectiveX2) - this._lineWidth / 2;\n    this._currentMeasure.top = parentMeasure.top + Math.min(this._y1.getValue(this._host), this._effectiveY2) - this._lineWidth / 2;\n  }\n  /**\n   * Move one end of the line given 3D cartesian coordinates.\n   * @param position Targeted world position\n   * @param scene Scene\n   * @param end (opt) Set to true to assign x2 and y2 coordinates of the line. Default assign to x1 and y1.\n   */\n  moveToVector3(position, scene, end = false) {\n    if (!this._host || this.parent !== this._host._rootContainer) {\n      Tools.Error(\"Cannot move a control to a vector3 if the control is not at root level\");\n      return;\n    }\n    const globalViewport = this._host._getGlobalViewport();\n    const projectedPosition = Vector3.Project(position, Matrix.IdentityReadOnly, scene.getTransformMatrix(), globalViewport);\n    this._moveToProjectedPosition(projectedPosition, end);\n    if (projectedPosition.z < 0 || projectedPosition.z > 1) {\n      this.notRenderable = true;\n      return;\n    }\n    this.notRenderable = false;\n  }\n  /**\n   * Move one end of the line to a position in screen absolute space.\n   * @param projectedPosition Position in screen absolute space (X, Y)\n   * @param end (opt) Set to true to assign x2 and y2 coordinates of the line. Default assign to x1 and y1.\n   */\n  _moveToProjectedPosition(projectedPosition, end = false) {\n    const x = projectedPosition.x + this._linkOffsetX.getValue(this._host) + \"px\";\n    const y = projectedPosition.y + this._linkOffsetY.getValue(this._host) + \"px\";\n    if (end) {\n      this.x2 = x;\n      this.y2 = y;\n      this._x2.ignoreAdaptiveScaling = true;\n      this._y2.ignoreAdaptiveScaling = true;\n    } else {\n      this.x1 = x;\n      this.y1 = y;\n      this._x1.ignoreAdaptiveScaling = true;\n      this._y1.ignoreAdaptiveScaling = true;\n    }\n  }\n}\n__decorate([serialize()], Line.prototype, \"dash\", null);\n__decorate([serialize()], Line.prototype, \"x1\", null);\n__decorate([serialize()], Line.prototype, \"y1\", null);\n__decorate([serialize()], Line.prototype, \"x2\", null);\n__decorate([serialize()], Line.prototype, \"y2\", null);\n__decorate([serialize()], Line.prototype, \"lineWidth\", null);\nRegisterClass(\"BABYLON.GUI.Line\", Line);","map":{"version":3,"names":["Vector3","Matrix","Tools","Control","ValueAndUnit","RegisterClass","serialize","Line","dash","_dash","value","_markAsDirty","connectedControl","_connectedControl","_connectedControlDirtyObserver","onDirtyObservable","remove","add","x1","_x1","toString","_host","fromString","y1","_y1","x2","_x2","y2","_y2","lineWidth","_lineWidth","horizontalAlignment","verticalAlignment","_effectiveX2","centerX","getValue","_effectiveY2","centerY","constructor","name","Array","_automaticSize","isHitTestVisible","_horizontalAlignment","HORIZONTAL_ALIGNMENT_LEFT","_verticalAlignment","VERTICAL_ALIGNMENT_TOP","_getTypeName","_draw","context","save","shadowBlur","shadowOffsetX","shadowOffsetY","shadowColor","_applyStates","strokeStyle","_getColor","setLineDash","beginPath","moveTo","_cachedParentMeasure","left","top","lineTo","stroke","restore","_measure","_currentMeasure","width","Math","abs","height","_computeAlignment","parentMeasure","min","moveToVector3","position","scene","end","parent","_rootContainer","Error","globalViewport","_getGlobalViewport","projectedPosition","Project","IdentityReadOnly","getTransformMatrix","_moveToProjectedPosition","z","notRenderable","x","_linkOffsetX","y","_linkOffsetY","ignoreAdaptiveScaling","__decorate"],"sources":["../../../../../dev/gui/src/2D/controls/line.ts"],"sourcesContent":["import type { Nullable } from \"core/types\";\r\nimport type { Observer } from \"core/Misc/observable\";\r\nimport { Vector3, Matrix } from \"core/Maths/math.vector\";\r\nimport { Tools } from \"core/Misc/tools\";\r\nimport type { Scene } from \"core/scene\";\r\n\r\nimport { Control } from \"./control\";\r\nimport { ValueAndUnit } from \"../valueAndUnit\";\r\nimport type { Measure } from \"../measure\";\r\nimport { RegisterClass } from \"core/Misc/typeStore\";\r\nimport { serialize } from \"core/Misc/decorators\";\r\nimport type { ICanvasRenderingContext } from \"core/Engines/ICanvas\";\r\n\r\n/** Class used to render 2D lines */\r\nexport class Line extends Control {\r\n    private _lineWidth = 1;\r\n    /** @internal */\r\n    public _x1 = new ValueAndUnit(0);\r\n    /** @internal */\r\n    public _y1 = new ValueAndUnit(0);\r\n    /** @internal */\r\n    public _x2 = new ValueAndUnit(0);\r\n    /** @internal */\r\n    public _y2 = new ValueAndUnit(0);\r\n    private _dash = new Array<number>();\r\n    private _connectedControl: Control;\r\n    private _connectedControlDirtyObserver: Nullable<Observer<Control>>;\r\n\r\n    /** Gets or sets the dash pattern */\r\n    @serialize()\r\n    public get dash(): Array<number> {\r\n        return this._dash;\r\n    }\r\n\r\n    public set dash(value: Array<number>) {\r\n        if (this._dash === value) {\r\n            return;\r\n        }\r\n\r\n        this._dash = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the control connected with the line end */\r\n    public get connectedControl(): Control {\r\n        return this._connectedControl;\r\n    }\r\n\r\n    public set connectedControl(value: Control) {\r\n        if (this._connectedControl === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._connectedControlDirtyObserver && this._connectedControl) {\r\n            this._connectedControl.onDirtyObservable.remove(this._connectedControlDirtyObserver);\r\n            this._connectedControlDirtyObserver = null;\r\n        }\r\n\r\n        if (value) {\r\n            this._connectedControlDirtyObserver = value.onDirtyObservable.add(() => this._markAsDirty());\r\n        }\r\n\r\n        this._connectedControl = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets start coordinates on X axis */\r\n    @serialize()\r\n    public get x1(): string | number {\r\n        return this._x1.toString(this._host);\r\n    }\r\n\r\n    public set x1(value: string | number) {\r\n        if (this._x1.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._x1.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets start coordinates on Y axis */\r\n    @serialize()\r\n    public get y1(): string | number {\r\n        return this._y1.toString(this._host);\r\n    }\r\n\r\n    public set y1(value: string | number) {\r\n        if (this._y1.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._y1.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets end coordinates on X axis */\r\n    @serialize()\r\n    public get x2(): string | number {\r\n        return this._x2.toString(this._host);\r\n    }\r\n\r\n    public set x2(value: string | number) {\r\n        if (this._x2.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._x2.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets end coordinates on Y axis */\r\n    @serialize()\r\n    public get y2(): string | number {\r\n        return this._y2.toString(this._host);\r\n    }\r\n\r\n    public set y2(value: string | number) {\r\n        if (this._y2.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._y2.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets line width */\r\n    @serialize()\r\n    public get lineWidth(): number {\r\n        return this._lineWidth;\r\n    }\r\n\r\n    public set lineWidth(value: number) {\r\n        if (this._lineWidth === value) {\r\n            return;\r\n        }\r\n\r\n        this._lineWidth = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets horizontal alignment */\r\n    public set horizontalAlignment(value: number) {\r\n        return;\r\n    }\r\n\r\n    /** Gets or sets vertical alignment */\r\n    public set verticalAlignment(value: number) {\r\n        return;\r\n    }\r\n\r\n    /** @internal */\r\n    public get _effectiveX2(): number {\r\n        return (this._connectedControl ? this._connectedControl.centerX : 0) + this._x2.getValue(this._host);\r\n    }\r\n\r\n    /** @internal */\r\n    public get _effectiveY2(): number {\r\n        return (this._connectedControl ? this._connectedControl.centerY : 0) + this._y2.getValue(this._host);\r\n    }\r\n\r\n    /**\r\n     * Creates a new Line\r\n     * @param name defines the control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n\r\n        this._automaticSize = true;\r\n\r\n        this.isHitTestVisible = false;\r\n        this._horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        this._verticalAlignment = Control.VERTICAL_ALIGNMENT_TOP;\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Line\";\r\n    }\r\n\r\n    public _draw(context: ICanvasRenderingContext): void {\r\n        context.save();\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            context.shadowColor = this.shadowColor;\r\n            context.shadowBlur = this.shadowBlur;\r\n            context.shadowOffsetX = this.shadowOffsetX;\r\n            context.shadowOffsetY = this.shadowOffsetY;\r\n        }\r\n\r\n        this._applyStates(context);\r\n        context.strokeStyle = this._getColor(context);\r\n        context.lineWidth = this._lineWidth;\r\n        context.setLineDash(this._dash);\r\n\r\n        context.beginPath();\r\n        context.moveTo(this._cachedParentMeasure.left + this._x1.getValue(this._host), this._cachedParentMeasure.top + this._y1.getValue(this._host));\r\n\r\n        context.lineTo(this._cachedParentMeasure.left + this._effectiveX2, this._cachedParentMeasure.top + this._effectiveY2);\r\n        context.stroke();\r\n\r\n        context.restore();\r\n    }\r\n\r\n    public _measure(): void {\r\n        // Width / Height\r\n        this._currentMeasure.width = Math.abs(this._x1.getValue(this._host) - this._effectiveX2) + this._lineWidth;\r\n        this._currentMeasure.height = Math.abs(this._y1.getValue(this._host) - this._effectiveY2) + this._lineWidth;\r\n    }\r\n\r\n    protected _computeAlignment(parentMeasure: Measure): void {\r\n        this._currentMeasure.left = parentMeasure.left + Math.min(this._x1.getValue(this._host), this._effectiveX2) - this._lineWidth / 2;\r\n        this._currentMeasure.top = parentMeasure.top + Math.min(this._y1.getValue(this._host), this._effectiveY2) - this._lineWidth / 2;\r\n    }\r\n\r\n    /**\r\n     * Move one end of the line given 3D cartesian coordinates.\r\n     * @param position Targeted world position\r\n     * @param scene Scene\r\n     * @param end (opt) Set to true to assign x2 and y2 coordinates of the line. Default assign to x1 and y1.\r\n     */\r\n    public moveToVector3(position: Vector3, scene: Scene, end: boolean = false): void {\r\n        if (!this._host || this.parent !== this._host._rootContainer) {\r\n            Tools.Error(\"Cannot move a control to a vector3 if the control is not at root level\");\r\n            return;\r\n        }\r\n\r\n        const globalViewport = this._host._getGlobalViewport();\r\n        const projectedPosition = Vector3.Project(position, Matrix.IdentityReadOnly, scene.getTransformMatrix(), globalViewport);\r\n\r\n        this._moveToProjectedPosition(projectedPosition, end);\r\n\r\n        if (projectedPosition.z < 0 || projectedPosition.z > 1) {\r\n            this.notRenderable = true;\r\n            return;\r\n        }\r\n        this.notRenderable = false;\r\n    }\r\n\r\n    /**\r\n     * Move one end of the line to a position in screen absolute space.\r\n     * @param projectedPosition Position in screen absolute space (X, Y)\r\n     * @param end (opt) Set to true to assign x2 and y2 coordinates of the line. Default assign to x1 and y1.\r\n     */\r\n    public _moveToProjectedPosition(projectedPosition: Vector3, end: boolean = false): void {\r\n        const x: string = projectedPosition.x + this._linkOffsetX.getValue(this._host) + \"px\";\r\n        const y: string = projectedPosition.y + this._linkOffsetY.getValue(this._host) + \"px\";\r\n\r\n        if (end) {\r\n            this.x2 = x;\r\n            this.y2 = y;\r\n            this._x2.ignoreAdaptiveScaling = true;\r\n            this._y2.ignoreAdaptiveScaling = true;\r\n        } else {\r\n            this.x1 = x;\r\n            this.y1 = y;\r\n            this._x1.ignoreAdaptiveScaling = true;\r\n            this._y1.ignoreAdaptiveScaling = true;\r\n        }\r\n    }\r\n}\r\nRegisterClass(\"BABYLON.GUI.Line\", Line);\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}