{"ast":null,"code":"import { __decorate } from \"../../../../tslib.es6.js\";\nimport { NodeGeometryBlockConnectionPointTypes } from \"../../Enums/nodeGeometryConnectionPointTypes.js\";\nimport { NodeGeometryBlock } from \"../../nodeGeometryBlock.js\";\nimport { GeometryInputBlock } from \"../geometryInputBlock.js\";\nimport { RegisterClass } from \"../../../../Misc/typeStore.js\";\nimport { CreateTorusVertexData } from \"../../../Builders/torusBuilder.js\";\nimport { PropertyTypeForEdition, editableInPropertyPage } from \"../../../../Decorators/nodeDecorator.js\";\n/**\n * Defines a block used to generate torus geometry data\n */\nexport class TorusBlock extends NodeGeometryBlock {\n  /**\n   * Create a new TorusBlock\n   * @param name defines the block name\n   */\n  constructor(name) {\n    super(name);\n    /**\n     * Gets or sets a boolean indicating that this block can evaluate context\n     * Build performance is improved when this value is set to false as the system will cache values instead of reevaluating everything per context change\n     */\n    this.evaluateContext = false;\n    this.registerInput(\"diameter\", NodeGeometryBlockConnectionPointTypes.Float, true, 1);\n    this.registerInput(\"thickness\", NodeGeometryBlockConnectionPointTypes.Float, true, 0.5);\n    this.registerInput(\"tessellation\", NodeGeometryBlockConnectionPointTypes.Int, true, 16);\n    this.registerOutput(\"geometry\", NodeGeometryBlockConnectionPointTypes.Geometry);\n  }\n  /**\n   * Gets the current class name\n   * @returns the class name\n   */\n  getClassName() {\n    return \"TorusBlock\";\n  }\n  /**\n   * Gets the diameter input component\n   */\n  get diameter() {\n    return this._inputs[0];\n  }\n  /**\n   * Gets the thickness input component\n   */\n  get thickness() {\n    return this._inputs[1];\n  }\n  /**\n   * Gets the tessellation input component\n   */\n  get tessellation() {\n    return this._inputs[2];\n  }\n  /**\n   * Gets the geometry output component\n   */\n  get geometry() {\n    return this._outputs[0];\n  }\n  autoConfigure() {\n    if (!this.diameter.isConnected) {\n      const diameterInput = new GeometryInputBlock(\"Diameter\");\n      diameterInput.value = 1;\n      diameterInput.output.connectTo(this.diameter);\n    }\n  }\n  _buildBlock(state) {\n    const options = {};\n    const func = state => {\n      options.thickness = this.thickness.getConnectedValue(state);\n      options.diameter = this.diameter.getConnectedValue(state);\n      options.tessellation = this.tessellation.getConnectedValue(state);\n      // Append vertex data from the plane builder\n      return CreateTorusVertexData(options);\n    };\n    if (this.evaluateContext) {\n      this.geometry._storedFunction = func;\n    } else {\n      this.geometry._storedFunction = () => {\n        return func(state).clone();\n      };\n    }\n  }\n  _dumpPropertiesCode() {\n    const codeString = super._dumpPropertiesCode() + `${this._codeVariableName}.evaluateContext = ${this.evaluateContext ? \"true\" : \"false\"};\\n`;\n    return codeString;\n  }\n  /**\n   * Serializes this block in a JSON representation\n   * @returns the serialized block object\n   */\n  serialize() {\n    const serializationObject = super.serialize();\n    serializationObject.evaluateContext = this.evaluateContext;\n    return serializationObject;\n  }\n  _deserialize(serializationObject) {\n    super._deserialize(serializationObject);\n    this.evaluateContext = serializationObject.evaluateContext;\n  }\n}\n__decorate([editableInPropertyPage(\"Evaluate context\", PropertyTypeForEdition.Boolean, \"ADVANCED\", {\n  notifiers: {\n    rebuild: true\n  }\n})], TorusBlock.prototype, \"evaluateContext\", void 0);\nRegisterClass(\"BABYLON.TorusBlock\", TorusBlock);","map":{"version":3,"names":["NodeGeometryBlockConnectionPointTypes","NodeGeometryBlock","GeometryInputBlock","RegisterClass","CreateTorusVertexData","PropertyTypeForEdition","editableInPropertyPage","TorusBlock","constructor","name","evaluateContext","registerInput","Float","Int","registerOutput","Geometry","getClassName","diameter","_inputs","thickness","tessellation","geometry","_outputs","autoConfigure","isConnected","diameterInput","value","output","connectTo","_buildBlock","state","options","func","getConnectedValue","_storedFunction","clone","_dumpPropertiesCode","codeString","_codeVariableName","serialize","serializationObject","_deserialize","__decorate","Boolean","notifiers","rebuild"],"sources":["../../../../../../../dev/core/src/Meshes/Node/Blocks/Sources/torusBlock.ts"],"sourcesContent":["import { NodeGeometryBlockConnectionPointTypes } from \"../../Enums/nodeGeometryConnectionPointTypes\";\r\nimport { NodeGeometryBlock } from \"../../nodeGeometryBlock\";\r\nimport type { NodeGeometryConnectionPoint } from \"../../nodeGeometryBlockConnectionPoint\";\r\nimport type { NodeGeometryBuildState } from \"../../nodeGeometryBuildState\";\r\nimport { GeometryInputBlock } from \"../geometryInputBlock\";\r\nimport { RegisterClass } from \"../../../../Misc/typeStore\";\r\nimport type { Vector4 } from \"../../../../Maths/math.vector\";\r\nimport { CreateTorusVertexData } from \"core/Meshes/Builders/torusBuilder\";\r\nimport { PropertyTypeForEdition, editableInPropertyPage } from \"../../../../Decorators/nodeDecorator\";\r\n\r\n/**\r\n * Defines a block used to generate torus geometry data\r\n */\r\nexport class TorusBlock extends NodeGeometryBlock {\r\n    /**\r\n     * Gets or sets a boolean indicating that this block can evaluate context\r\n     * Build performance is improved when this value is set to false as the system will cache values instead of reevaluating everything per context change\r\n     */\r\n    @editableInPropertyPage(\"Evaluate context\", PropertyTypeForEdition.Boolean, \"ADVANCED\", { notifiers: { rebuild: true } })\r\n    public evaluateContext = false;\r\n\r\n    /**\r\n     * Create a new TorusBlock\r\n     * @param name defines the block name\r\n     */\r\n    public constructor(name: string) {\r\n        super(name);\r\n\r\n        this.registerInput(\"diameter\", NodeGeometryBlockConnectionPointTypes.Float, true, 1);\r\n        this.registerInput(\"thickness\", NodeGeometryBlockConnectionPointTypes.Float, true, 0.5);\r\n        this.registerInput(\"tessellation\", NodeGeometryBlockConnectionPointTypes.Int, true, 16);\r\n\r\n        this.registerOutput(\"geometry\", NodeGeometryBlockConnectionPointTypes.Geometry);\r\n    }\r\n\r\n    /**\r\n     * Gets the current class name\r\n     * @returns the class name\r\n     */\r\n    public getClassName() {\r\n        return \"TorusBlock\";\r\n    }\r\n\r\n    /**\r\n     * Gets the diameter input component\r\n     */\r\n    public get diameter(): NodeGeometryConnectionPoint {\r\n        return this._inputs[0];\r\n    }\r\n\r\n    /**\r\n     * Gets the thickness input component\r\n     */\r\n    public get thickness(): NodeGeometryConnectionPoint {\r\n        return this._inputs[1];\r\n    }\r\n\r\n    /**\r\n     * Gets the tessellation input component\r\n     */\r\n    public get tessellation(): NodeGeometryConnectionPoint {\r\n        return this._inputs[2];\r\n    }\r\n\r\n    /**\r\n     * Gets the geometry output component\r\n     */\r\n    public get geometry(): NodeGeometryConnectionPoint {\r\n        return this._outputs[0];\r\n    }\r\n\r\n    public autoConfigure() {\r\n        if (!this.diameter.isConnected) {\r\n            const diameterInput = new GeometryInputBlock(\"Diameter\");\r\n            diameterInput.value = 1;\r\n            diameterInput.output.connectTo(this.diameter);\r\n        }\r\n    }\r\n\r\n    protected _buildBlock(state: NodeGeometryBuildState) {\r\n        const options: {\r\n            diameter?: number;\r\n            thickness?: number;\r\n            tessellation?: number;\r\n            sideOrientation?: number;\r\n            frontUVs?: Vector4;\r\n            backUVs?: Vector4;\r\n        } = {};\r\n        const func = (state: NodeGeometryBuildState) => {\r\n            options.thickness = this.thickness.getConnectedValue(state);\r\n            options.diameter = this.diameter.getConnectedValue(state);\r\n            options.tessellation = this.tessellation.getConnectedValue(state);\r\n\r\n            // Append vertex data from the plane builder\r\n            return CreateTorusVertexData(options);\r\n        };\r\n\r\n        if (this.evaluateContext) {\r\n            this.geometry._storedFunction = func;\r\n        } else {\r\n            this.geometry._storedFunction = () => {\r\n                return func(state).clone();\r\n            };\r\n        }\r\n    }\r\n\r\n    protected _dumpPropertiesCode() {\r\n        const codeString = super._dumpPropertiesCode() + `${this._codeVariableName}.evaluateContext = ${this.evaluateContext ? \"true\" : \"false\"};\\n`;\r\n        return codeString;\r\n    }\r\n\r\n    /**\r\n     * Serializes this block in a JSON representation\r\n     * @returns the serialized block object\r\n     */\r\n    public serialize(): any {\r\n        const serializationObject = super.serialize();\r\n\r\n        serializationObject.evaluateContext = this.evaluateContext;\r\n\r\n        return serializationObject;\r\n    }\r\n\r\n    public _deserialize(serializationObject: any) {\r\n        super._deserialize(serializationObject);\r\n\r\n        this.evaluateContext = serializationObject.evaluateContext;\r\n    }\r\n}\r\n\r\nRegisterClass(\"BABYLON.TorusBlock\", TorusBlock);\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}