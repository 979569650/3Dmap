{"ast":null,"code":"import { Observable } from \"../Misc/observable.js\";\n/**\n * This class centralizes the handling of events in the flow graph.\n * If a block fires an event, it will be handled by this class.\n * It will also notify any blocks that are listening to that event.\n * @experimental\n */\nexport class FlowGraphEventCoordinator {\n  constructor() {\n    this._customEventsMap = new Map();\n  }\n  /**\n   * Get an observable that will be notified when the event with the given id is fired.\n   * @param id the id of the event\n   * @returns the observable for the event\n   */\n  getCustomEventObservable(id) {\n    let observable = this._customEventsMap.get(id);\n    if (!observable) {\n      observable = new Observable();\n      this._customEventsMap.set(id, observable);\n    }\n    return observable;\n  }\n  /**\n   * Notifies the observable for the given event id with the given data.\n   * @param id the id of the event\n   * @param data the data to send with the event\n   */\n  notifyCustomEvent(id, data) {\n    const observable = this._customEventsMap.get(id);\n    if (observable) {\n      observable.notifyObservers(data);\n    }\n  }\n}","map":{"version":3,"names":["Observable","FlowGraphEventCoordinator","constructor","_customEventsMap","Map","getCustomEventObservable","id","observable","get","set","notifyCustomEvent","data","notifyObservers"],"sources":["../../../../dev/core/src/FlowGraph/flowGraphEventCoordinator.ts"],"sourcesContent":["import { Observable } from \"../Misc/observable\";\r\nimport type { FlowGraphCustomEvent } from \"./flowGraphCustomEvent\";\r\n\r\n/**\r\n * This class centralizes the handling of events in the flow graph.\r\n * If a block fires an event, it will be handled by this class.\r\n * It will also notify any blocks that are listening to that event.\r\n * @experimental\r\n */\r\nexport class FlowGraphEventCoordinator {\r\n    private _customEventsMap: Map<string, Observable<FlowGraphCustomEvent>> = new Map();\r\n\r\n    /**\r\n     * Get an observable that will be notified when the event with the given id is fired.\r\n     * @param id the id of the event\r\n     * @returns the observable for the event\r\n     */\r\n    getCustomEventObservable(id: string): Observable<FlowGraphCustomEvent> {\r\n        let observable = this._customEventsMap.get(id);\r\n        if (!observable) {\r\n            observable = new Observable<FlowGraphCustomEvent>();\r\n            this._customEventsMap.set(id, observable);\r\n        }\r\n        return observable;\r\n    }\r\n\r\n    /**\r\n     * Notifies the observable for the given event id with the given data.\r\n     * @param id the id of the event\r\n     * @param data the data to send with the event\r\n     */\r\n    notifyCustomEvent(id: string, data: any) {\r\n        const observable = this._customEventsMap.get(id);\r\n        if (observable) {\r\n            observable.notifyObservers(data);\r\n        }\r\n    }\r\n}\r\n"],"mappings":"AAAA,SAASA,UAAU,QAAQ,uBAAqB;AAGhD;;;;;;AAMA,OAAM,MAAOC,yBAAyB;EAAtCC,YAAA;IACY,KAAAC,gBAAgB,GAAkD,IAAIC,GAAG,EAAE;EA2BvF;EAzBI;;;;;EAKAC,wBAAwBA,CAACC,EAAU;IAC/B,IAAIC,UAAU,GAAG,IAAI,CAACJ,gBAAgB,CAACK,GAAG,CAACF,EAAE,CAAC;IAC9C,IAAI,CAACC,UAAU,EAAE;MACbA,UAAU,GAAG,IAAIP,UAAU,EAAwB;MACnD,IAAI,CAACG,gBAAgB,CAACM,GAAG,CAACH,EAAE,EAAEC,UAAU,CAAC;;IAE7C,OAAOA,UAAU;EACrB;EAEA;;;;;EAKAG,iBAAiBA,CAACJ,EAAU,EAAEK,IAAS;IACnC,MAAMJ,UAAU,GAAG,IAAI,CAACJ,gBAAgB,CAACK,GAAG,CAACF,EAAE,CAAC;IAChD,IAAIC,UAAU,EAAE;MACZA,UAAU,CAACK,eAAe,CAACD,IAAI,CAAC;;EAExC"},"metadata":{},"sourceType":"module","externalDependencies":[]}