{"ast":null,"code":"import { Button3D } from \"./button3D.js\";\nimport { Vector3 } from \"@babylonjs/core/Maths/math.vector.js\";\nimport { StandardMaterial } from \"@babylonjs/core/Materials/standardMaterial.js\";\nimport { Mesh } from \"@babylonjs/core/Meshes/mesh.js\";\nimport { CreatePlane } from \"@babylonjs/core/Meshes/Builders/planeBuilder.js\";\nimport { CreateBox } from \"@babylonjs/core/Meshes/Builders/boxBuilder.js\";\nimport { FadeInOutBehavior } from \"@babylonjs/core/Behaviors/Meshes/fadeInOutBehavior.js\";\nimport { FluentMaterial } from \"../materials/fluent/fluentMaterial.js\";\nimport { StackPanel } from \"../../2D/controls/stackPanel.js\";\nimport { Image } from \"../../2D/controls/image.js\";\nimport { TextBlock } from \"../../2D/controls/textBlock.js\";\nimport { AdvancedDynamicTexture } from \"../../2D/advancedDynamicTexture.js\";\nimport { Color3 } from \"@babylonjs/core/Maths/math.color.js\";\nimport { IsDocumentAvailable } from \"@babylonjs/core/Misc/domManagement.js\";\n/**\n * Class used to create a holographic button in 3D\n */\nexport class HolographicButton extends Button3D {\n  _disposeTooltip() {\n    this._tooltipFade = null;\n    if (this._tooltipTextBlock) {\n      this._tooltipTextBlock.dispose();\n    }\n    if (this._tooltipTexture) {\n      this._tooltipTexture.dispose();\n    }\n    if (this._tooltipMesh) {\n      this._tooltipMesh.dispose();\n    }\n    this.onPointerEnterObservable.remove(this._tooltipHoverObserver);\n    this.onPointerOutObservable.remove(this._tooltipOutObserver);\n  }\n  /**\n   * Rendering ground id of all the mesh in the button\n   */\n  set renderingGroupId(id) {\n    this._backPlate.renderingGroupId = id;\n    this._textPlate.renderingGroupId = id;\n    this._frontPlate.renderingGroupId = id;\n    if (this._tooltipMesh) {\n      this._tooltipMesh.renderingGroupId = id;\n    }\n  }\n  get renderingGroupId() {\n    return this._backPlate.renderingGroupId;\n  }\n  /**\n   * Text to be displayed on the tooltip shown when hovering on the button. When set to null tooltip is disabled. (Default: null)\n   */\n  set tooltipText(text) {\n    if (!text) {\n      this._disposeTooltip();\n      return;\n    }\n    if (!this._tooltipFade) {\n      const rightHandedScene = this._backPlate._scene.useRightHandedSystem;\n      // Create tooltip with mesh and text\n      this._tooltipMesh = CreatePlane(\"\", {\n        size: 1\n      }, this._backPlate._scene);\n      const tooltipBackground = CreatePlane(\"\", {\n        size: 1,\n        sideOrientation: Mesh.DOUBLESIDE\n      }, this._backPlate._scene);\n      const mat = new StandardMaterial(\"\", this._backPlate._scene);\n      mat.diffuseColor = Color3.FromHexString(\"#212121\");\n      tooltipBackground.material = mat;\n      tooltipBackground.isPickable = false;\n      this._tooltipMesh.addChild(tooltipBackground);\n      tooltipBackground.position = Vector3.Forward(rightHandedScene).scale(0.05);\n      this._tooltipMesh.scaling.y = 1 / 3;\n      this._tooltipMesh.position = Vector3.Up().scale(0.7).add(Vector3.Forward(rightHandedScene).scale(-0.15));\n      this._tooltipMesh.isPickable = false;\n      this._tooltipMesh.parent = this._backPlate;\n      // Create text texture for the tooltip\n      this._tooltipTexture = AdvancedDynamicTexture.CreateForMesh(this._tooltipMesh);\n      this._tooltipTextBlock = new TextBlock();\n      this._tooltipTextBlock.scaleY = 3;\n      this._tooltipTextBlock.color = \"white\";\n      this._tooltipTextBlock.fontSize = 130;\n      this._tooltipTexture.addControl(this._tooltipTextBlock);\n      // Add hover action to tooltip\n      this._tooltipFade = new FadeInOutBehavior();\n      this._tooltipFade.delay = 500;\n      this._tooltipMesh.addBehavior(this._tooltipFade);\n      this._tooltipHoverObserver = this.onPointerEnterObservable.add(() => {\n        if (this._tooltipFade) {\n          this._tooltipFade.fadeIn(true);\n        }\n      });\n      this._tooltipOutObserver = this.onPointerOutObservable.add(() => {\n        if (this._tooltipFade) {\n          this._tooltipFade.fadeIn(false);\n        }\n      });\n    }\n    if (this._tooltipTextBlock) {\n      this._tooltipTextBlock.text = text;\n    }\n  }\n  get tooltipText() {\n    if (this._tooltipTextBlock) {\n      return this._tooltipTextBlock.text;\n    }\n    return null;\n  }\n  /**\n   * Gets or sets text for the button\n   */\n  get text() {\n    return this._text;\n  }\n  set text(value) {\n    if (this._text === value) {\n      return;\n    }\n    this._text = value;\n    this._rebuildContent();\n  }\n  /**\n   * Gets or sets the image url for the button\n   */\n  get imageUrl() {\n    return this._imageUrl;\n  }\n  set imageUrl(value) {\n    if (this._imageUrl === value) {\n      return;\n    }\n    this._imageUrl = value;\n    this._rebuildContent();\n  }\n  /**\n   * Gets the back material used by this button\n   */\n  get backMaterial() {\n    return this._backMaterial;\n  }\n  /**\n   * Gets the front material used by this button\n   */\n  get frontMaterial() {\n    return this._frontMaterial;\n  }\n  /**\n   * Gets the plate material used by this button\n   */\n  get plateMaterial() {\n    return this._plateMaterial;\n  }\n  /**\n   * Gets a boolean indicating if this button shares its material with other HolographicButtons\n   */\n  get shareMaterials() {\n    return this._shareMaterials;\n  }\n  /**\n   * Creates a new button\n   * @param name defines the control name\n   * @param shareMaterials\n   */\n  constructor(name, shareMaterials = true) {\n    super(name);\n    this._shareMaterials = true;\n    this._shareMaterials = shareMaterials;\n    // Default animations\n    this.pointerEnterAnimation = () => {\n      if (!this.mesh) {\n        return;\n      }\n      this._frontPlate.setEnabled(true);\n    };\n    this.pointerOutAnimation = () => {\n      if (!this.mesh) {\n        return;\n      }\n      this._frontPlate.setEnabled(false);\n    };\n  }\n  _getTypeName() {\n    return \"HolographicButton\";\n  }\n  _rebuildContent() {\n    this._disposeFacadeTexture();\n    const panel = new StackPanel();\n    panel.isVertical = true;\n    if (IsDocumentAvailable() && !!document.createElement) {\n      if (this._imageUrl) {\n        const image = new Image();\n        image.source = this._imageUrl;\n        image.paddingTop = \"40px\";\n        image.height = \"180px\";\n        image.width = \"100px\";\n        image.paddingBottom = \"40px\";\n        panel.addControl(image);\n      }\n    }\n    if (this._text) {\n      const text = new TextBlock();\n      text.text = this._text;\n      text.color = \"white\";\n      text.height = \"30px\";\n      text.fontSize = 24;\n      panel.addControl(text);\n    }\n    if (this._frontPlate) {\n      this.content = panel;\n    }\n  }\n  // Mesh association\n  _createNode(scene) {\n    this._backPlate = CreateBox(this.name + \"BackMesh\", {\n      width: 1.0,\n      height: 1.0,\n      depth: 0.08\n    }, scene);\n    this._frontPlate = CreateBox(this.name + \"FrontMesh\", {\n      width: 1.0,\n      height: 1.0,\n      depth: 0.08\n    }, scene);\n    this._frontPlate.parent = this._backPlate;\n    this._frontPlate.position = Vector3.Forward(scene.useRightHandedSystem).scale(-0.08);\n    this._frontPlate.isPickable = false;\n    this._frontPlate.setEnabled(false);\n    this._textPlate = super._createNode(scene);\n    this._textPlate.parent = this._backPlate;\n    this._textPlate.position = Vector3.Forward(scene.useRightHandedSystem).scale(-0.08);\n    this._textPlate.isPickable = false;\n    return this._backPlate;\n  }\n  _applyFacade(facadeTexture) {\n    this._plateMaterial.emissiveTexture = facadeTexture;\n    this._plateMaterial.opacityTexture = facadeTexture;\n  }\n  _createBackMaterial(mesh) {\n    this._backMaterial = new FluentMaterial(this.name + \"Back Material\", mesh.getScene());\n    this._backMaterial.renderHoverLight = true;\n    this._pickedPointObserver = this._host.onPickedPointChangedObservable.add(pickedPoint => {\n      if (pickedPoint) {\n        this._backMaterial.hoverPosition = pickedPoint;\n        this._backMaterial.hoverColor.a = 1.0;\n      } else {\n        this._backMaterial.hoverColor.a = 0;\n      }\n    });\n  }\n  _createFrontMaterial(mesh) {\n    this._frontMaterial = new FluentMaterial(this.name + \"Front Material\", mesh.getScene());\n    this._frontMaterial.innerGlowColorIntensity = 0; // No inner glow\n    this._frontMaterial.alpha = 0.5; // Additive\n    this._frontMaterial.renderBorders = true;\n  }\n  _createPlateMaterial(mesh) {\n    this._plateMaterial = new StandardMaterial(this.name + \"Plate Material\", mesh.getScene());\n    this._plateMaterial.specularColor = Color3.Black();\n  }\n  _affectMaterial(mesh) {\n    // Back\n    if (this._shareMaterials) {\n      if (!this._host._sharedMaterials[\"backFluentMaterial\"]) {\n        this._createBackMaterial(mesh);\n        this._host._sharedMaterials[\"backFluentMaterial\"] = this._backMaterial;\n      } else {\n        this._backMaterial = this._host._sharedMaterials[\"backFluentMaterial\"];\n      }\n      // Front\n      if (!this._host._sharedMaterials[\"frontFluentMaterial\"]) {\n        this._createFrontMaterial(mesh);\n        this._host._sharedMaterials[\"frontFluentMaterial\"] = this._frontMaterial;\n      } else {\n        this._frontMaterial = this._host._sharedMaterials[\"frontFluentMaterial\"];\n      }\n    } else {\n      this._createBackMaterial(mesh);\n      this._createFrontMaterial(mesh);\n    }\n    this._createPlateMaterial(mesh);\n    this._backPlate.material = this._backMaterial;\n    this._frontPlate.material = this._frontMaterial;\n    this._textPlate.material = this._plateMaterial;\n    this._rebuildContent();\n  }\n  /**\n   * Releases all associated resources\n   */\n  dispose() {\n    super.dispose(); // will dispose main mesh ie. back plate\n    this._disposeTooltip();\n    if (!this.shareMaterials) {\n      this._backMaterial.dispose();\n      this._frontMaterial.dispose();\n      this._plateMaterial.dispose();\n      if (this._pickedPointObserver) {\n        this._host.onPickedPointChangedObservable.remove(this._pickedPointObserver);\n        this._pickedPointObserver = null;\n      }\n    }\n  }\n}","map":{"version":3,"names":["Button3D","Vector3","StandardMaterial","Mesh","CreatePlane","CreateBox","FadeInOutBehavior","FluentMaterial","StackPanel","Image","TextBlock","AdvancedDynamicTexture","Color3","IsDocumentAvailable","HolographicButton","_disposeTooltip","_tooltipFade","_tooltipTextBlock","dispose","_tooltipTexture","_tooltipMesh","onPointerEnterObservable","remove","_tooltipHoverObserver","onPointerOutObservable","_tooltipOutObserver","renderingGroupId","id","_backPlate","_textPlate","_frontPlate","tooltipText","text","rightHandedScene","_scene","useRightHandedSystem","size","tooltipBackground","sideOrientation","DOUBLESIDE","mat","diffuseColor","FromHexString","material","isPickable","addChild","position","Forward","scale","scaling","y","Up","add","parent","CreateForMesh","scaleY","color","fontSize","addControl","delay","addBehavior","fadeIn","_text","value","_rebuildContent","imageUrl","_imageUrl","backMaterial","_backMaterial","frontMaterial","_frontMaterial","plateMaterial","_plateMaterial","shareMaterials","_shareMaterials","constructor","name","pointerEnterAnimation","mesh","setEnabled","pointerOutAnimation","_getTypeName","_disposeFacadeTexture","panel","isVertical","document","createElement","image","source","paddingTop","height","width","paddingBottom","content","_createNode","scene","depth","_applyFacade","facadeTexture","emissiveTexture","opacityTexture","_createBackMaterial","getScene","renderHoverLight","_pickedPointObserver","_host","onPickedPointChangedObservable","pickedPoint","hoverPosition","hoverColor","a","_createFrontMaterial","innerGlowColorIntensity","alpha","renderBorders","_createPlateMaterial","specularColor","Black","_affectMaterial","_sharedMaterials"],"sources":["../../../../../dev/gui/src/3D/controls/holographicButton.ts"],"sourcesContent":["import { Button3D } from \"./button3D\";\r\n\r\nimport type { Nullable } from \"core/types\";\r\nimport type { Observer } from \"core/Misc/observable\";\r\nimport { Vector3 } from \"core/Maths/math.vector\";\r\nimport { StandardMaterial } from \"core/Materials/standardMaterial\";\r\nimport type { TransformNode } from \"core/Meshes/transformNode\";\r\nimport { Mesh } from \"core/Meshes/mesh\";\r\nimport { CreatePlane } from \"core/Meshes/Builders/planeBuilder\";\r\nimport { CreateBox } from \"core/Meshes/Builders/boxBuilder\";\r\nimport { FadeInOutBehavior } from \"core/Behaviors/Meshes/fadeInOutBehavior\";\r\nimport type { Scene } from \"core/scene\";\r\n\r\nimport { FluentMaterial } from \"../materials/fluent/fluentMaterial\";\r\nimport { StackPanel } from \"../../2D/controls/stackPanel\";\r\nimport { Image } from \"../../2D/controls/image\";\r\nimport { TextBlock } from \"../../2D/controls/textBlock\";\r\nimport { AdvancedDynamicTexture } from \"../../2D/advancedDynamicTexture\";\r\nimport type { Control3D } from \"./control3D\";\r\nimport { Color3 } from \"core/Maths/math.color\";\r\nimport { IsDocumentAvailable } from \"core/Misc/domManagement\";\r\n\r\n/**\r\n * Class used to create a holographic button in 3D\r\n */\r\nexport class HolographicButton extends Button3D {\r\n    private _backPlate: Mesh;\r\n    private _textPlate: Mesh;\r\n    private _frontPlate: Mesh;\r\n    private _text: string;\r\n    private _imageUrl: string;\r\n    private _shareMaterials = true;\r\n    private _frontMaterial: FluentMaterial;\r\n    private _backMaterial: FluentMaterial;\r\n    private _plateMaterial: StandardMaterial;\r\n    private _pickedPointObserver: Nullable<Observer<Nullable<Vector3>>>;\r\n\r\n    // Tooltip\r\n    private _tooltipFade: Nullable<FadeInOutBehavior>;\r\n    private _tooltipTextBlock: Nullable<TextBlock>;\r\n    private _tooltipTexture: Nullable<AdvancedDynamicTexture>;\r\n    private _tooltipMesh: Nullable<Mesh>;\r\n    private _tooltipHoverObserver: Nullable<Observer<Control3D>>;\r\n    private _tooltipOutObserver: Nullable<Observer<Control3D>>;\r\n\r\n    private _disposeTooltip() {\r\n        this._tooltipFade = null;\r\n        if (this._tooltipTextBlock) {\r\n            this._tooltipTextBlock.dispose();\r\n        }\r\n        if (this._tooltipTexture) {\r\n            this._tooltipTexture.dispose();\r\n        }\r\n        if (this._tooltipMesh) {\r\n            this._tooltipMesh.dispose();\r\n        }\r\n        this.onPointerEnterObservable.remove(this._tooltipHoverObserver);\r\n        this.onPointerOutObservable.remove(this._tooltipOutObserver);\r\n    }\r\n\r\n    /**\r\n     * Rendering ground id of all the mesh in the button\r\n     */\r\n    public set renderingGroupId(id: number) {\r\n        this._backPlate.renderingGroupId = id;\r\n        this._textPlate.renderingGroupId = id;\r\n        this._frontPlate.renderingGroupId = id;\r\n\r\n        if (this._tooltipMesh) {\r\n            this._tooltipMesh.renderingGroupId = id;\r\n        }\r\n    }\r\n    public get renderingGroupId(): number {\r\n        return this._backPlate.renderingGroupId;\r\n    }\r\n\r\n    /**\r\n     * Text to be displayed on the tooltip shown when hovering on the button. When set to null tooltip is disabled. (Default: null)\r\n     */\r\n    public set tooltipText(text: Nullable<string>) {\r\n        if (!text) {\r\n            this._disposeTooltip();\r\n            return;\r\n        }\r\n        if (!this._tooltipFade) {\r\n            const rightHandedScene = this._backPlate._scene.useRightHandedSystem;\r\n            // Create tooltip with mesh and text\r\n            this._tooltipMesh = CreatePlane(\"\", { size: 1 }, this._backPlate._scene);\r\n            const tooltipBackground = CreatePlane(\"\", { size: 1, sideOrientation: Mesh.DOUBLESIDE }, this._backPlate._scene);\r\n            const mat = new StandardMaterial(\"\", this._backPlate._scene);\r\n            mat.diffuseColor = Color3.FromHexString(\"#212121\");\r\n            tooltipBackground.material = mat;\r\n            tooltipBackground.isPickable = false;\r\n            this._tooltipMesh.addChild(tooltipBackground);\r\n            tooltipBackground.position = Vector3.Forward(rightHandedScene).scale(0.05);\r\n            this._tooltipMesh.scaling.y = 1 / 3;\r\n            this._tooltipMesh.position = Vector3.Up().scale(0.7).add(Vector3.Forward(rightHandedScene).scale(-0.15));\r\n            this._tooltipMesh.isPickable = false;\r\n            this._tooltipMesh.parent = this._backPlate;\r\n\r\n            // Create text texture for the tooltip\r\n            this._tooltipTexture = AdvancedDynamicTexture.CreateForMesh(this._tooltipMesh);\r\n            this._tooltipTextBlock = new TextBlock();\r\n            this._tooltipTextBlock.scaleY = 3;\r\n            this._tooltipTextBlock.color = \"white\";\r\n            this._tooltipTextBlock.fontSize = 130;\r\n            this._tooltipTexture.addControl(this._tooltipTextBlock);\r\n\r\n            // Add hover action to tooltip\r\n            this._tooltipFade = new FadeInOutBehavior();\r\n            this._tooltipFade.delay = 500;\r\n            this._tooltipMesh.addBehavior(this._tooltipFade);\r\n            this._tooltipHoverObserver = this.onPointerEnterObservable.add(() => {\r\n                if (this._tooltipFade) {\r\n                    this._tooltipFade.fadeIn(true);\r\n                }\r\n            });\r\n            this._tooltipOutObserver = this.onPointerOutObservable.add(() => {\r\n                if (this._tooltipFade) {\r\n                    this._tooltipFade.fadeIn(false);\r\n                }\r\n            });\r\n        }\r\n        if (this._tooltipTextBlock) {\r\n            this._tooltipTextBlock.text = text;\r\n        }\r\n    }\r\n\r\n    public get tooltipText() {\r\n        if (this._tooltipTextBlock) {\r\n            return this._tooltipTextBlock.text;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets text for the button\r\n     */\r\n    public get text(): string {\r\n        return this._text;\r\n    }\r\n\r\n    public set text(value: string) {\r\n        if (this._text === value) {\r\n            return;\r\n        }\r\n\r\n        this._text = value;\r\n        this._rebuildContent();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the image url for the button\r\n     */\r\n    public get imageUrl(): string {\r\n        return this._imageUrl;\r\n    }\r\n\r\n    public set imageUrl(value: string) {\r\n        if (this._imageUrl === value) {\r\n            return;\r\n        }\r\n\r\n        this._imageUrl = value;\r\n        this._rebuildContent();\r\n    }\r\n\r\n    /**\r\n     * Gets the back material used by this button\r\n     */\r\n    public get backMaterial(): FluentMaterial {\r\n        return this._backMaterial;\r\n    }\r\n\r\n    /**\r\n     * Gets the front material used by this button\r\n     */\r\n    public get frontMaterial(): FluentMaterial {\r\n        return this._frontMaterial;\r\n    }\r\n\r\n    /**\r\n     * Gets the plate material used by this button\r\n     */\r\n    public get plateMaterial(): StandardMaterial {\r\n        return this._plateMaterial;\r\n    }\r\n\r\n    /**\r\n     * Gets a boolean indicating if this button shares its material with other HolographicButtons\r\n     */\r\n    public get shareMaterials(): boolean {\r\n        return this._shareMaterials;\r\n    }\r\n\r\n    /**\r\n     * Creates a new button\r\n     * @param name defines the control name\r\n     * @param shareMaterials\r\n     */\r\n    constructor(name?: string, shareMaterials = true) {\r\n        super(name);\r\n\r\n        this._shareMaterials = shareMaterials;\r\n\r\n        // Default animations\r\n        this.pointerEnterAnimation = () => {\r\n            if (!this.mesh) {\r\n                return;\r\n            }\r\n            this._frontPlate.setEnabled(true);\r\n        };\r\n\r\n        this.pointerOutAnimation = () => {\r\n            if (!this.mesh) {\r\n                return;\r\n            }\r\n            this._frontPlate.setEnabled(false);\r\n        };\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"HolographicButton\";\r\n    }\r\n\r\n    private _rebuildContent(): void {\r\n        this._disposeFacadeTexture();\r\n\r\n        const panel = new StackPanel();\r\n        panel.isVertical = true;\r\n\r\n        if (IsDocumentAvailable() && !!document.createElement) {\r\n            if (this._imageUrl) {\r\n                const image = new Image();\r\n                image.source = this._imageUrl;\r\n                image.paddingTop = \"40px\";\r\n                image.height = \"180px\";\r\n                image.width = \"100px\";\r\n                image.paddingBottom = \"40px\";\r\n                panel.addControl(image);\r\n            }\r\n        }\r\n\r\n        if (this._text) {\r\n            const text = new TextBlock();\r\n            text.text = this._text;\r\n            text.color = \"white\";\r\n            text.height = \"30px\";\r\n            text.fontSize = 24;\r\n            panel.addControl(text);\r\n        }\r\n\r\n        if (this._frontPlate) {\r\n            this.content = panel;\r\n        }\r\n    }\r\n\r\n    // Mesh association\r\n    protected _createNode(scene: Scene): TransformNode {\r\n        this._backPlate = CreateBox(\r\n            this.name + \"BackMesh\",\r\n            {\r\n                width: 1.0,\r\n                height: 1.0,\r\n                depth: 0.08,\r\n            },\r\n            scene\r\n        );\r\n\r\n        this._frontPlate = CreateBox(\r\n            this.name + \"FrontMesh\",\r\n            {\r\n                width: 1.0,\r\n                height: 1.0,\r\n                depth: 0.08,\r\n            },\r\n            scene\r\n        );\r\n\r\n        this._frontPlate.parent = this._backPlate;\r\n        this._frontPlate.position = Vector3.Forward(scene.useRightHandedSystem).scale(-0.08);\r\n        this._frontPlate.isPickable = false;\r\n        this._frontPlate.setEnabled(false);\r\n\r\n        this._textPlate = <Mesh>super._createNode(scene);\r\n        this._textPlate.parent = this._backPlate;\r\n        this._textPlate.position = Vector3.Forward(scene.useRightHandedSystem).scale(-0.08);\r\n        this._textPlate.isPickable = false;\r\n\r\n        return this._backPlate;\r\n    }\r\n\r\n    protected _applyFacade(facadeTexture: AdvancedDynamicTexture) {\r\n        this._plateMaterial.emissiveTexture = facadeTexture;\r\n        this._plateMaterial.opacityTexture = facadeTexture;\r\n    }\r\n\r\n    private _createBackMaterial(mesh: Mesh) {\r\n        this._backMaterial = new FluentMaterial(this.name + \"Back Material\", mesh.getScene());\r\n        this._backMaterial.renderHoverLight = true;\r\n        this._pickedPointObserver = this._host.onPickedPointChangedObservable.add((pickedPoint) => {\r\n            if (pickedPoint) {\r\n                this._backMaterial.hoverPosition = pickedPoint;\r\n                this._backMaterial.hoverColor.a = 1.0;\r\n            } else {\r\n                this._backMaterial.hoverColor.a = 0;\r\n            }\r\n        });\r\n    }\r\n\r\n    private _createFrontMaterial(mesh: Mesh) {\r\n        this._frontMaterial = new FluentMaterial(this.name + \"Front Material\", mesh.getScene());\r\n        this._frontMaterial.innerGlowColorIntensity = 0; // No inner glow\r\n        this._frontMaterial.alpha = 0.5; // Additive\r\n        this._frontMaterial.renderBorders = true;\r\n    }\r\n\r\n    private _createPlateMaterial(mesh: Mesh) {\r\n        this._plateMaterial = new StandardMaterial(this.name + \"Plate Material\", mesh.getScene());\r\n        this._plateMaterial.specularColor = Color3.Black();\r\n    }\r\n\r\n    protected _affectMaterial(mesh: Mesh) {\r\n        // Back\r\n        if (this._shareMaterials) {\r\n            if (!this._host._sharedMaterials[\"backFluentMaterial\"]) {\r\n                this._createBackMaterial(mesh);\r\n                this._host._sharedMaterials[\"backFluentMaterial\"] = this._backMaterial;\r\n            } else {\r\n                this._backMaterial = this._host._sharedMaterials[\"backFluentMaterial\"] as FluentMaterial;\r\n            }\r\n\r\n            // Front\r\n            if (!this._host._sharedMaterials[\"frontFluentMaterial\"]) {\r\n                this._createFrontMaterial(mesh);\r\n                this._host._sharedMaterials[\"frontFluentMaterial\"] = this._frontMaterial;\r\n            } else {\r\n                this._frontMaterial = this._host._sharedMaterials[\"frontFluentMaterial\"] as FluentMaterial;\r\n            }\r\n        } else {\r\n            this._createBackMaterial(mesh);\r\n            this._createFrontMaterial(mesh);\r\n        }\r\n\r\n        this._createPlateMaterial(mesh);\r\n        this._backPlate.material = this._backMaterial;\r\n        this._frontPlate.material = this._frontMaterial;\r\n        this._textPlate.material = this._plateMaterial;\r\n\r\n        this._rebuildContent();\r\n    }\r\n\r\n    /**\r\n     * Releases all associated resources\r\n     */\r\n    public dispose() {\r\n        super.dispose(); // will dispose main mesh ie. back plate\r\n\r\n        this._disposeTooltip();\r\n\r\n        if (!this.shareMaterials) {\r\n            this._backMaterial.dispose();\r\n            this._frontMaterial.dispose();\r\n            this._plateMaterial.dispose();\r\n\r\n            if (this._pickedPointObserver) {\r\n                this._host.onPickedPointChangedObservable.remove(this._pickedPointObserver);\r\n                this._pickedPointObserver = null;\r\n            }\r\n        }\r\n    }\r\n}\r\n"],"mappings":"AAAA,SAASA,QAAQ,QAAQ,eAAa;AAItC,SAASC,OAAO,QAAE;AAClB,SAASC,gBAAgB,QAAE;AAE3B,SAASC,IAAI,QAAE;AACf,SAASC,WAAW,QAAE;AACtB,SAASC,SAAS,QAAE;AACpB,SAASC,iBAAiB,QAAE;AAG5B,SAASC,cAAc,QAAQ,uCAAqC;AACpE,SAASC,UAAU,QAAQ,iCAA+B;AAC1D,SAASC,KAAK,QAAQ,4BAA0B;AAChD,SAASC,SAAS,QAAQ,gCAA8B;AACxD,SAASC,sBAAsB,QAAQ,oCAAkC;AAEzE,SAASC,MAAM,QAAE;AACjB,SAASC,mBAAmB,QAAE;AAE9B;;;AAGA,OAAM,MAAOC,iBAAkB,SAAQd,QAAQ;EAoBnCe,eAAeA,CAAA;IACnB,IAAI,CAACC,YAAY,GAAG,IAAI;IACxB,IAAI,IAAI,CAACC,iBAAiB,EAAE;MACxB,IAAI,CAACA,iBAAiB,CAACC,OAAO,EAAE;;IAEpC,IAAI,IAAI,CAACC,eAAe,EAAE;MACtB,IAAI,CAACA,eAAe,CAACD,OAAO,EAAE;;IAElC,IAAI,IAAI,CAACE,YAAY,EAAE;MACnB,IAAI,CAACA,YAAY,CAACF,OAAO,EAAE;;IAE/B,IAAI,CAACG,wBAAwB,CAACC,MAAM,CAAC,IAAI,CAACC,qBAAqB,CAAC;IAChE,IAAI,CAACC,sBAAsB,CAACF,MAAM,CAAC,IAAI,CAACG,mBAAmB,CAAC;EAChE;EAEA;;;EAGA,IAAWC,gBAAgBA,CAACC,EAAU;IAClC,IAAI,CAACC,UAAU,CAACF,gBAAgB,GAAGC,EAAE;IACrC,IAAI,CAACE,UAAU,CAACH,gBAAgB,GAAGC,EAAE;IACrC,IAAI,CAACG,WAAW,CAACJ,gBAAgB,GAAGC,EAAE;IAEtC,IAAI,IAAI,CAACP,YAAY,EAAE;MACnB,IAAI,CAACA,YAAY,CAACM,gBAAgB,GAAGC,EAAE;;EAE/C;EACA,IAAWD,gBAAgBA,CAAA;IACvB,OAAO,IAAI,CAACE,UAAU,CAACF,gBAAgB;EAC3C;EAEA;;;EAGA,IAAWK,WAAWA,CAACC,IAAsB;IACzC,IAAI,CAACA,IAAI,EAAE;MACP,IAAI,CAACjB,eAAe,EAAE;MACtB;;IAEJ,IAAI,CAAC,IAAI,CAACC,YAAY,EAAE;MACpB,MAAMiB,gBAAgB,GAAG,IAAI,CAACL,UAAU,CAACM,MAAM,CAACC,oBAAoB;MACpE;MACA,IAAI,CAACf,YAAY,GAAGhB,WAAW,CAAC,EAAE,EAAE;QAAEgC,IAAI,EAAE;MAAC,CAAE,EAAE,IAAI,CAACR,UAAU,CAACM,MAAM,CAAC;MACxE,MAAMG,iBAAiB,GAAGjC,WAAW,CAAC,EAAE,EAAE;QAAEgC,IAAI,EAAE,CAAC;QAAEE,eAAe,EAAEnC,IAAI,CAACoC;MAAU,CAAE,EAAE,IAAI,CAACX,UAAU,CAACM,MAAM,CAAC;MAChH,MAAMM,GAAG,GAAG,IAAItC,gBAAgB,CAAC,EAAE,EAAE,IAAI,CAAC0B,UAAU,CAACM,MAAM,CAAC;MAC5DM,GAAG,CAACC,YAAY,GAAG7B,MAAM,CAAC8B,aAAa,CAAC,SAAS,CAAC;MAClDL,iBAAiB,CAACM,QAAQ,GAAGH,GAAG;MAChCH,iBAAiB,CAACO,UAAU,GAAG,KAAK;MACpC,IAAI,CAACxB,YAAY,CAACyB,QAAQ,CAACR,iBAAiB,CAAC;MAC7CA,iBAAiB,CAACS,QAAQ,GAAG7C,OAAO,CAAC8C,OAAO,CAACd,gBAAgB,CAAC,CAACe,KAAK,CAAC,IAAI,CAAC;MAC1E,IAAI,CAAC5B,YAAY,CAAC6B,OAAO,CAACC,CAAC,GAAG,CAAC,GAAG,CAAC;MACnC,IAAI,CAAC9B,YAAY,CAAC0B,QAAQ,GAAG7C,OAAO,CAACkD,EAAE,EAAE,CAACH,KAAK,CAAC,GAAG,CAAC,CAACI,GAAG,CAACnD,OAAO,CAAC8C,OAAO,CAACd,gBAAgB,CAAC,CAACe,KAAK,CAAC,CAAC,IAAI,CAAC,CAAC;MACxG,IAAI,CAAC5B,YAAY,CAACwB,UAAU,GAAG,KAAK;MACpC,IAAI,CAACxB,YAAY,CAACiC,MAAM,GAAG,IAAI,CAACzB,UAAU;MAE1C;MACA,IAAI,CAACT,eAAe,GAAGR,sBAAsB,CAAC2C,aAAa,CAAC,IAAI,CAAClC,YAAY,CAAC;MAC9E,IAAI,CAACH,iBAAiB,GAAG,IAAIP,SAAS,EAAE;MACxC,IAAI,CAACO,iBAAiB,CAACsC,MAAM,GAAG,CAAC;MACjC,IAAI,CAACtC,iBAAiB,CAACuC,KAAK,GAAG,OAAO;MACtC,IAAI,CAACvC,iBAAiB,CAACwC,QAAQ,GAAG,GAAG;MACrC,IAAI,CAACtC,eAAe,CAACuC,UAAU,CAAC,IAAI,CAACzC,iBAAiB,CAAC;MAEvD;MACA,IAAI,CAACD,YAAY,GAAG,IAAIV,iBAAiB,EAAE;MAC3C,IAAI,CAACU,YAAY,CAAC2C,KAAK,GAAG,GAAG;MAC7B,IAAI,CAACvC,YAAY,CAACwC,WAAW,CAAC,IAAI,CAAC5C,YAAY,CAAC;MAChD,IAAI,CAACO,qBAAqB,GAAG,IAAI,CAACF,wBAAwB,CAAC+B,GAAG,CAAC,MAAK;QAChE,IAAI,IAAI,CAACpC,YAAY,EAAE;UACnB,IAAI,CAACA,YAAY,CAAC6C,MAAM,CAAC,IAAI,CAAC;;MAEtC,CAAC,CAAC;MACF,IAAI,CAACpC,mBAAmB,GAAG,IAAI,CAACD,sBAAsB,CAAC4B,GAAG,CAAC,MAAK;QAC5D,IAAI,IAAI,CAACpC,YAAY,EAAE;UACnB,IAAI,CAACA,YAAY,CAAC6C,MAAM,CAAC,KAAK,CAAC;;MAEvC,CAAC,CAAC;;IAEN,IAAI,IAAI,CAAC5C,iBAAiB,EAAE;MACxB,IAAI,CAACA,iBAAiB,CAACe,IAAI,GAAGA,IAAI;;EAE1C;EAEA,IAAWD,WAAWA,CAAA;IAClB,IAAI,IAAI,CAACd,iBAAiB,EAAE;MACxB,OAAO,IAAI,CAACA,iBAAiB,CAACe,IAAI;;IAEtC,OAAO,IAAI;EACf;EAEA;;;EAGA,IAAWA,IAAIA,CAAA;IACX,OAAO,IAAI,CAAC8B,KAAK;EACrB;EAEA,IAAW9B,IAAIA,CAAC+B,KAAa;IACzB,IAAI,IAAI,CAACD,KAAK,KAAKC,KAAK,EAAE;MACtB;;IAGJ,IAAI,CAACD,KAAK,GAAGC,KAAK;IAClB,IAAI,CAACC,eAAe,EAAE;EAC1B;EAEA;;;EAGA,IAAWC,QAAQA,CAAA;IACf,OAAO,IAAI,CAACC,SAAS;EACzB;EAEA,IAAWD,QAAQA,CAACF,KAAa;IAC7B,IAAI,IAAI,CAACG,SAAS,KAAKH,KAAK,EAAE;MAC1B;;IAGJ,IAAI,CAACG,SAAS,GAAGH,KAAK;IACtB,IAAI,CAACC,eAAe,EAAE;EAC1B;EAEA;;;EAGA,IAAWG,YAAYA,CAAA;IACnB,OAAO,IAAI,CAACC,aAAa;EAC7B;EAEA;;;EAGA,IAAWC,aAAaA,CAAA;IACpB,OAAO,IAAI,CAACC,cAAc;EAC9B;EAEA;;;EAGA,IAAWC,aAAaA,CAAA;IACpB,OAAO,IAAI,CAACC,cAAc;EAC9B;EAEA;;;EAGA,IAAWC,cAAcA,CAAA;IACrB,OAAO,IAAI,CAACC,eAAe;EAC/B;EAEA;;;;;EAKAC,YAAYC,IAAa,EAAEH,cAAc,GAAG,IAAI;IAC5C,KAAK,CAACG,IAAI,CAAC;IA1KP,KAAAF,eAAe,GAAG,IAAI;IA4K1B,IAAI,CAACA,eAAe,GAAGD,cAAc;IAErC;IACA,IAAI,CAACI,qBAAqB,GAAG,MAAK;MAC9B,IAAI,CAAC,IAAI,CAACC,IAAI,EAAE;QACZ;;MAEJ,IAAI,CAAChD,WAAW,CAACiD,UAAU,CAAC,IAAI,CAAC;IACrC,CAAC;IAED,IAAI,CAACC,mBAAmB,GAAG,MAAK;MAC5B,IAAI,CAAC,IAAI,CAACF,IAAI,EAAE;QACZ;;MAEJ,IAAI,CAAChD,WAAW,CAACiD,UAAU,CAAC,KAAK,CAAC;IACtC,CAAC;EACL;EAEUE,YAAYA,CAAA;IAClB,OAAO,mBAAmB;EAC9B;EAEQjB,eAAeA,CAAA;IACnB,IAAI,CAACkB,qBAAqB,EAAE;IAE5B,MAAMC,KAAK,GAAG,IAAI3E,UAAU,EAAE;IAC9B2E,KAAK,CAACC,UAAU,GAAG,IAAI;IAEvB,IAAIvE,mBAAmB,EAAE,IAAI,CAAC,CAACwE,QAAQ,CAACC,aAAa,EAAE;MACnD,IAAI,IAAI,CAACpB,SAAS,EAAE;QAChB,MAAMqB,KAAK,GAAG,IAAI9E,KAAK,EAAE;QACzB8E,KAAK,CAACC,MAAM,GAAG,IAAI,CAACtB,SAAS;QAC7BqB,KAAK,CAACE,UAAU,GAAG,MAAM;QACzBF,KAAK,CAACG,MAAM,GAAG,OAAO;QACtBH,KAAK,CAACI,KAAK,GAAG,OAAO;QACrBJ,KAAK,CAACK,aAAa,GAAG,MAAM;QAC5BT,KAAK,CAACzB,UAAU,CAAC6B,KAAK,CAAC;;;IAI/B,IAAI,IAAI,CAACzB,KAAK,EAAE;MACZ,MAAM9B,IAAI,GAAG,IAAItB,SAAS,EAAE;MAC5BsB,IAAI,CAACA,IAAI,GAAG,IAAI,CAAC8B,KAAK;MACtB9B,IAAI,CAACwB,KAAK,GAAG,OAAO;MACpBxB,IAAI,CAAC0D,MAAM,GAAG,MAAM;MACpB1D,IAAI,CAACyB,QAAQ,GAAG,EAAE;MAClB0B,KAAK,CAACzB,UAAU,CAAC1B,IAAI,CAAC;;IAG1B,IAAI,IAAI,CAACF,WAAW,EAAE;MAClB,IAAI,CAAC+D,OAAO,GAAGV,KAAK;;EAE5B;EAEA;EACUW,WAAWA,CAACC,KAAY;IAC9B,IAAI,CAACnE,UAAU,GAAGvB,SAAS,CACvB,IAAI,CAACuE,IAAI,GAAG,UAAU,EACtB;MACIe,KAAK,EAAE,GAAG;MACVD,MAAM,EAAE,GAAG;MACXM,KAAK,EAAE;KACV,EACDD,KAAK,CACR;IAED,IAAI,CAACjE,WAAW,GAAGzB,SAAS,CACxB,IAAI,CAACuE,IAAI,GAAG,WAAW,EACvB;MACIe,KAAK,EAAE,GAAG;MACVD,MAAM,EAAE,GAAG;MACXM,KAAK,EAAE;KACV,EACDD,KAAK,CACR;IAED,IAAI,CAACjE,WAAW,CAACuB,MAAM,GAAG,IAAI,CAACzB,UAAU;IACzC,IAAI,CAACE,WAAW,CAACgB,QAAQ,GAAG7C,OAAO,CAAC8C,OAAO,CAACgD,KAAK,CAAC5D,oBAAoB,CAAC,CAACa,KAAK,CAAC,CAAC,IAAI,CAAC;IACpF,IAAI,CAAClB,WAAW,CAACc,UAAU,GAAG,KAAK;IACnC,IAAI,CAACd,WAAW,CAACiD,UAAU,CAAC,KAAK,CAAC;IAElC,IAAI,CAAClD,UAAU,GAAS,KAAK,CAACiE,WAAW,CAACC,KAAK,CAAC;IAChD,IAAI,CAAClE,UAAU,CAACwB,MAAM,GAAG,IAAI,CAACzB,UAAU;IACxC,IAAI,CAACC,UAAU,CAACiB,QAAQ,GAAG7C,OAAO,CAAC8C,OAAO,CAACgD,KAAK,CAAC5D,oBAAoB,CAAC,CAACa,KAAK,CAAC,CAAC,IAAI,CAAC;IACnF,IAAI,CAACnB,UAAU,CAACe,UAAU,GAAG,KAAK;IAElC,OAAO,IAAI,CAAChB,UAAU;EAC1B;EAEUqE,YAAYA,CAACC,aAAqC;IACxD,IAAI,CAAC1B,cAAc,CAAC2B,eAAe,GAAGD,aAAa;IACnD,IAAI,CAAC1B,cAAc,CAAC4B,cAAc,GAAGF,aAAa;EACtD;EAEQG,mBAAmBA,CAACvB,IAAU;IAClC,IAAI,CAACV,aAAa,GAAG,IAAI7D,cAAc,CAAC,IAAI,CAACqE,IAAI,GAAG,eAAe,EAAEE,IAAI,CAACwB,QAAQ,EAAE,CAAC;IACrF,IAAI,CAAClC,aAAa,CAACmC,gBAAgB,GAAG,IAAI;IAC1C,IAAI,CAACC,oBAAoB,GAAG,IAAI,CAACC,KAAK,CAACC,8BAA8B,CAACtD,GAAG,CAAEuD,WAAW,IAAI;MACtF,IAAIA,WAAW,EAAE;QACb,IAAI,CAACvC,aAAa,CAACwC,aAAa,GAAGD,WAAW;QAC9C,IAAI,CAACvC,aAAa,CAACyC,UAAU,CAACC,CAAC,GAAG,GAAG;OACxC,MAAM;QACH,IAAI,CAAC1C,aAAa,CAACyC,UAAU,CAACC,CAAC,GAAG,CAAC;;IAE3C,CAAC,CAAC;EACN;EAEQC,oBAAoBA,CAACjC,IAAU;IACnC,IAAI,CAACR,cAAc,GAAG,IAAI/D,cAAc,CAAC,IAAI,CAACqE,IAAI,GAAG,gBAAgB,EAAEE,IAAI,CAACwB,QAAQ,EAAE,CAAC;IACvF,IAAI,CAAChC,cAAc,CAAC0C,uBAAuB,GAAG,CAAC,CAAC,CAAC;IACjD,IAAI,CAAC1C,cAAc,CAAC2C,KAAK,GAAG,GAAG,CAAC,CAAC;IACjC,IAAI,CAAC3C,cAAc,CAAC4C,aAAa,GAAG,IAAI;EAC5C;EAEQC,oBAAoBA,CAACrC,IAAU;IACnC,IAAI,CAACN,cAAc,GAAG,IAAItE,gBAAgB,CAAC,IAAI,CAAC0E,IAAI,GAAG,gBAAgB,EAAEE,IAAI,CAACwB,QAAQ,EAAE,CAAC;IACzF,IAAI,CAAC9B,cAAc,CAAC4C,aAAa,GAAGxG,MAAM,CAACyG,KAAK,EAAE;EACtD;EAEUC,eAAeA,CAACxC,IAAU;IAChC;IACA,IAAI,IAAI,CAACJ,eAAe,EAAE;MACtB,IAAI,CAAC,IAAI,CAAC+B,KAAK,CAACc,gBAAgB,CAAC,oBAAoB,CAAC,EAAE;QACpD,IAAI,CAAClB,mBAAmB,CAACvB,IAAI,CAAC;QAC9B,IAAI,CAAC2B,KAAK,CAACc,gBAAgB,CAAC,oBAAoB,CAAC,GAAG,IAAI,CAACnD,aAAa;OACzE,MAAM;QACH,IAAI,CAACA,aAAa,GAAG,IAAI,CAACqC,KAAK,CAACc,gBAAgB,CAAC,oBAAoB,CAAmB;;MAG5F;MACA,IAAI,CAAC,IAAI,CAACd,KAAK,CAACc,gBAAgB,CAAC,qBAAqB,CAAC,EAAE;QACrD,IAAI,CAACR,oBAAoB,CAACjC,IAAI,CAAC;QAC/B,IAAI,CAAC2B,KAAK,CAACc,gBAAgB,CAAC,qBAAqB,CAAC,GAAG,IAAI,CAACjD,cAAc;OAC3E,MAAM;QACH,IAAI,CAACA,cAAc,GAAG,IAAI,CAACmC,KAAK,CAACc,gBAAgB,CAAC,qBAAqB,CAAmB;;KAEjG,MAAM;MACH,IAAI,CAAClB,mBAAmB,CAACvB,IAAI,CAAC;MAC9B,IAAI,CAACiC,oBAAoB,CAACjC,IAAI,CAAC;;IAGnC,IAAI,CAACqC,oBAAoB,CAACrC,IAAI,CAAC;IAC/B,IAAI,CAAClD,UAAU,CAACe,QAAQ,GAAG,IAAI,CAACyB,aAAa;IAC7C,IAAI,CAACtC,WAAW,CAACa,QAAQ,GAAG,IAAI,CAAC2B,cAAc;IAC/C,IAAI,CAACzC,UAAU,CAACc,QAAQ,GAAG,IAAI,CAAC6B,cAAc;IAE9C,IAAI,CAACR,eAAe,EAAE;EAC1B;EAEA;;;EAGO9C,OAAOA,CAAA;IACV,KAAK,CAACA,OAAO,EAAE,CAAC,CAAC;IAEjB,IAAI,CAACH,eAAe,EAAE;IAEtB,IAAI,CAAC,IAAI,CAAC0D,cAAc,EAAE;MACtB,IAAI,CAACL,aAAa,CAAClD,OAAO,EAAE;MAC5B,IAAI,CAACoD,cAAc,CAACpD,OAAO,EAAE;MAC7B,IAAI,CAACsD,cAAc,CAACtD,OAAO,EAAE;MAE7B,IAAI,IAAI,CAACsF,oBAAoB,EAAE;QAC3B,IAAI,CAACC,KAAK,CAACC,8BAA8B,CAACpF,MAAM,CAAC,IAAI,CAACkF,oBAAoB,CAAC;QAC3E,IAAI,CAACA,oBAAoB,GAAG,IAAI;;;EAG5C"},"metadata":{},"sourceType":"module","externalDependencies":[]}