{"ast":null,"code":"import { FlowGraphEventBlock } from \"../../flowGraphEventBlock.js\";\nimport { Tools } from \"../../../Misc/tools.js\";\nimport { RichTypeAny } from \"../../flowGraphRichTypes.js\";\nimport { RegisterClass } from \"../../../Misc/typeStore.js\";\n/**\n * @experimental\n * A block that receives a custom event. It saves the data sent in the eventData output.\n */\nexport class FlowGraphReceiveCustomEventBlock extends FlowGraphEventBlock {\n  constructor(config) {\n    super(config);\n    this.config = config;\n    this.eventData = this._registerDataOutput(\"eventData\", RichTypeAny);\n  }\n  _preparePendingTasks(context) {\n    const observable = context.configuration.eventCoordinator.getCustomEventObservable(this.config.eventId);\n    this._eventObserver = observable.add(eventData => {\n      this.eventData.setValue(eventData, context);\n      this._execute(context);\n    });\n  }\n  _cancelPendingTasks(context) {\n    const observable = context.configuration.eventCoordinator.getCustomEventObservable(this.config.eventId);\n    if (observable) {\n      observable.remove(this._eventObserver);\n    } else {\n      Tools.Warn(`FlowGraphReceiveCustomEventBlock: Missing observable for event ${this.config.eventId}`);\n    }\n  }\n  getClassName() {\n    return \"FGReceiveCustomEventBlock\";\n  }\n}\nRegisterClass(\"FGReceiveCustomEventBlock\", FlowGraphReceiveCustomEventBlock);","map":{"version":3,"names":["FlowGraphEventBlock","Tools","RichTypeAny","RegisterClass","FlowGraphReceiveCustomEventBlock","constructor","config","eventData","_registerDataOutput","_preparePendingTasks","context","observable","configuration","eventCoordinator","getCustomEventObservable","eventId","_eventObserver","add","setValue","_execute","_cancelPendingTasks","remove","Warn","getClassName"],"sources":["../../../../../../dev/core/src/FlowGraph/Blocks/Event/flowGraphReceiveCustomEventBlock.ts"],"sourcesContent":["import type { Observer } from \"../../../Misc/observable\";\r\nimport type { FlowGraphContext } from \"../../flowGraphContext\";\r\nimport { FlowGraphEventBlock } from \"../../flowGraphEventBlock\";\r\nimport type { FlowGraphCustomEvent } from \"../../flowGraphCustomEvent\";\r\nimport type { Nullable } from \"../../../types\";\r\nimport { Tools } from \"../../../Misc/tools\";\r\nimport type { FlowGraphDataConnection } from \"../../flowGraphDataConnection\";\r\nimport { RichTypeAny } from \"../../flowGraphRichTypes\";\r\nimport type { IFlowGraphBlockConfiguration } from \"../../flowGraphBlock\";\r\nimport { RegisterClass } from \"../../../Misc/typeStore\";\r\n/**\r\n * @experimental\r\n * Parameters used to create a FlowGraphReceiveCustomEventBlock.\r\n */\r\nexport interface IFlowGraphReceiveCustomEventBlockConfiguration extends IFlowGraphBlockConfiguration {\r\n    eventId: string;\r\n}\r\n\r\n/**\r\n * @experimental\r\n * A block that receives a custom event. It saves the data sent in the eventData output.\r\n */\r\nexport class FlowGraphReceiveCustomEventBlock extends FlowGraphEventBlock {\r\n    private _eventObserver: Nullable<Observer<FlowGraphCustomEvent>>;\r\n\r\n    /**\r\n     * Output connection: The data sent with the event.\r\n     */\r\n    public eventData: FlowGraphDataConnection<any>;\r\n\r\n    constructor(public config: IFlowGraphReceiveCustomEventBlockConfiguration) {\r\n        super(config);\r\n        this.eventData = this._registerDataOutput(\"eventData\", RichTypeAny);\r\n    }\r\n    public _preparePendingTasks(context: FlowGraphContext): void {\r\n        const observable = context.configuration.eventCoordinator.getCustomEventObservable(this.config.eventId);\r\n        this._eventObserver = observable.add((eventData) => {\r\n            this.eventData.setValue(eventData, context);\r\n            this._execute(context);\r\n        });\r\n    }\r\n    public _cancelPendingTasks(context: FlowGraphContext): void {\r\n        const observable = context.configuration.eventCoordinator.getCustomEventObservable(this.config.eventId);\r\n        if (observable) {\r\n            observable.remove(this._eventObserver);\r\n        } else {\r\n            Tools.Warn(`FlowGraphReceiveCustomEventBlock: Missing observable for event ${this.config.eventId}`);\r\n        }\r\n    }\r\n\r\n    public getClassName(): string {\r\n        return \"FGReceiveCustomEventBlock\";\r\n    }\r\n}\r\nRegisterClass(\"FGReceiveCustomEventBlock\", FlowGraphReceiveCustomEventBlock);\r\n"],"mappings":"AAEA,SAASA,mBAAmB,QAAQ,8BAA4B;AAGhE,SAASC,KAAK,QAAQ,wBAAsB;AAE5C,SAASC,WAAW,QAAQ,6BAA2B;AAEvD,SAASC,aAAa,QAAQ,4BAA0B;AASxD;;;;AAIA,OAAM,MAAOC,gCAAiC,SAAQJ,mBAAmB;EAQrEK,YAAmBC,MAAsD;IACrE,KAAK,CAACA,MAAM,CAAC;IADE,KAAAA,MAAM,GAANA,MAAM;IAErB,IAAI,CAACC,SAAS,GAAG,IAAI,CAACC,mBAAmB,CAAC,WAAW,EAAEN,WAAW,CAAC;EACvE;EACOO,oBAAoBA,CAACC,OAAyB;IACjD,MAAMC,UAAU,GAAGD,OAAO,CAACE,aAAa,CAACC,gBAAgB,CAACC,wBAAwB,CAAC,IAAI,CAACR,MAAM,CAACS,OAAO,CAAC;IACvG,IAAI,CAACC,cAAc,GAAGL,UAAU,CAACM,GAAG,CAAEV,SAAS,IAAI;MAC/C,IAAI,CAACA,SAAS,CAACW,QAAQ,CAACX,SAAS,EAAEG,OAAO,CAAC;MAC3C,IAAI,CAACS,QAAQ,CAACT,OAAO,CAAC;IAC1B,CAAC,CAAC;EACN;EACOU,mBAAmBA,CAACV,OAAyB;IAChD,MAAMC,UAAU,GAAGD,OAAO,CAACE,aAAa,CAACC,gBAAgB,CAACC,wBAAwB,CAAC,IAAI,CAACR,MAAM,CAACS,OAAO,CAAC;IACvG,IAAIJ,UAAU,EAAE;MACZA,UAAU,CAACU,MAAM,CAAC,IAAI,CAACL,cAAc,CAAC;KACzC,MAAM;MACHf,KAAK,CAACqB,IAAI,CAAC,kEAAkE,IAAI,CAAChB,MAAM,CAACS,OAAO,EAAE,CAAC;;EAE3G;EAEOQ,YAAYA,CAAA;IACf,OAAO,2BAA2B;EACtC;;AAEJpB,aAAa,CAAC,2BAA2B,EAAEC,gCAAgC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}