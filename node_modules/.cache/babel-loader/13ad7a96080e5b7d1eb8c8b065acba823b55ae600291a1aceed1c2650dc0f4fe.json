{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { Observable } from \"@babylonjs/core/Misc/observable.js\";\nimport { StackPanel } from \"./stackPanel.js\";\nimport { Button } from \"./button.js\";\nimport { RegisterClass } from \"@babylonjs/core/Misc/typeStore.js\";\nimport { InputTextArea } from \"./inputTextArea.js\";\n/**\n * Class used to store key control properties\n */\nexport class KeyPropertySet {}\n/**\n * Class used to create virtual keyboard\n */\nexport class VirtualKeyboard extends StackPanel {\n  constructor() {\n    super(...arguments);\n    /** Observable raised when a key is pressed */\n    this.onKeyPressObservable = new Observable();\n    /** Gets or sets default key button width */\n    this.defaultButtonWidth = \"40px\";\n    /** Gets or sets default key button height */\n    this.defaultButtonHeight = \"40px\";\n    /** Gets or sets default key button left padding */\n    this.defaultButtonPaddingLeft = \"2px\";\n    /** Gets or sets default key button right padding */\n    this.defaultButtonPaddingRight = \"2px\";\n    /** Gets or sets default key button top padding */\n    this.defaultButtonPaddingTop = \"2px\";\n    /** Gets or sets default key button bottom padding */\n    this.defaultButtonPaddingBottom = \"2px\";\n    /** Gets or sets default key button foreground color */\n    this.defaultButtonColor = \"#DDD\";\n    /** Gets or sets default key button background color */\n    this.defaultButtonBackground = \"#070707\";\n    /** Gets or sets shift button foreground color */\n    this.shiftButtonColor = \"#7799FF\";\n    /** Gets or sets shift button thickness*/\n    this.selectedShiftThickness = 1;\n    /** Gets shift key state */\n    this.shiftState = 0;\n    this._currentlyConnectedInputText = null;\n    this._connectedInputTexts = [];\n    this._onKeyPressObserver = null;\n  }\n  _getTypeName() {\n    return \"VirtualKeyboard\";\n  }\n  _createKey(key, propertySet) {\n    const button = Button.CreateSimpleButton(key, key);\n    button.width = propertySet && propertySet.width ? propertySet.width : this.defaultButtonWidth;\n    button.height = propertySet && propertySet.height ? propertySet.height : this.defaultButtonHeight;\n    button.color = propertySet && propertySet.color ? propertySet.color : this.defaultButtonColor;\n    button.background = propertySet && propertySet.background ? propertySet.background : this.defaultButtonBackground;\n    button.paddingLeft = propertySet && propertySet.paddingLeft ? propertySet.paddingLeft : this.defaultButtonPaddingLeft;\n    button.paddingRight = propertySet && propertySet.paddingRight ? propertySet.paddingRight : this.defaultButtonPaddingRight;\n    button.paddingTop = propertySet && propertySet.paddingTop ? propertySet.paddingTop : this.defaultButtonPaddingTop;\n    button.paddingBottom = propertySet && propertySet.paddingBottom ? propertySet.paddingBottom : this.defaultButtonPaddingBottom;\n    button.thickness = 0;\n    button.isFocusInvisible = true;\n    button.shadowColor = this.shadowColor;\n    button.shadowBlur = this.shadowBlur;\n    button.shadowOffsetX = this.shadowOffsetX;\n    button.shadowOffsetY = this.shadowOffsetY;\n    button.onPointerUpObservable.add(() => {\n      this.onKeyPressObservable.notifyObservers(key);\n    });\n    return button;\n  }\n  /**\n   * Adds a new row of keys\n   * @param keys defines the list of keys to add\n   * @param propertySets defines the associated property sets\n   */\n  addKeysRow(keys, propertySets) {\n    const panel = new StackPanel();\n    panel.isVertical = false;\n    panel.isFocusInvisible = true;\n    let maxKey = null;\n    for (let i = 0; i < keys.length; i++) {\n      let properties = null;\n      if (propertySets && propertySets.length === keys.length) {\n        properties = propertySets[i];\n      }\n      const key = this._createKey(keys[i], properties);\n      if (!maxKey || key.heightInPixels > maxKey.heightInPixels) {\n        maxKey = key;\n      }\n      panel.addControl(key);\n    }\n    panel.height = maxKey ? maxKey.height : this.defaultButtonHeight;\n    this.addControl(panel);\n  }\n  /**\n   * Set the shift key to a specific state\n   * @param shiftState defines the new shift state\n   */\n  applyShiftState(shiftState) {\n    if (!this.children) {\n      return;\n    }\n    for (let i = 0; i < this.children.length; i++) {\n      const row = this.children[i];\n      if (!row || !row.children) {\n        continue;\n      }\n      const rowContainer = row;\n      for (let j = 0; j < rowContainer.children.length; j++) {\n        const button = rowContainer.children[j];\n        if (!button || !button.children[0]) {\n          continue;\n        }\n        const button_tblock = button.children[0];\n        if (button_tblock.text === \"\\u21E7\") {\n          button.color = shiftState ? this.shiftButtonColor : this.defaultButtonColor;\n          button.thickness = shiftState > 1 ? this.selectedShiftThickness : 0;\n        }\n        button_tblock.text = shiftState > 0 ? button_tblock.text.toUpperCase() : button_tblock.text.toLowerCase();\n      }\n    }\n  }\n  /** Gets the input text control currently attached to the keyboard */\n  get connectedInputText() {\n    return this._currentlyConnectedInputText;\n  }\n  /**\n   * Connects the keyboard with an input text control\n   *\n   * @param input defines the target control\n   */\n  connect(input) {\n    const inputTextAlreadyConnected = this._connectedInputTexts.some(a => a.input === input);\n    if (inputTextAlreadyConnected) {\n      return;\n    }\n    if (this._onKeyPressObserver === null) {\n      this._onKeyPressObserver = this.onKeyPressObservable.add(key => {\n        if (!this._currentlyConnectedInputText) {\n          return;\n        }\n        this._currentlyConnectedInputText._host.focusedControl = this._currentlyConnectedInputText;\n        switch (key) {\n          case \"\\u21E7\":\n            this.shiftState++;\n            if (this.shiftState > 2) {\n              this.shiftState = 0;\n            }\n            this.applyShiftState(this.shiftState);\n            return;\n          case \"\\u2190\":\n            if (this._currentlyConnectedInputText instanceof InputTextArea) {\n              this._currentlyConnectedInputText.alternativeProcessKey(\"Backspace\");\n            } else {\n              this._currentlyConnectedInputText.processKey(8);\n            }\n            return;\n          case \"\\u21B5\":\n            if (this._currentlyConnectedInputText instanceof InputTextArea) {\n              this._currentlyConnectedInputText.alternativeProcessKey(\"Enter\");\n            } else {\n              this._currentlyConnectedInputText.processKey(13);\n            }\n            return;\n        }\n        if (this._currentlyConnectedInputText instanceof InputTextArea) {\n          this._currentlyConnectedInputText.alternativeProcessKey(\"\", this.shiftState ? key.toUpperCase() : key);\n        } else {\n          this._currentlyConnectedInputText.processKey(-1, this.shiftState ? key.toUpperCase() : key);\n        }\n        if (this.shiftState === 1) {\n          this.shiftState = 0;\n          this.applyShiftState(this.shiftState);\n        }\n      });\n    }\n    this.isVisible = false;\n    this._currentlyConnectedInputText = input;\n    input._connectedVirtualKeyboard = this;\n    // Events hooking\n    const onFocusObserver = input.onFocusObservable.add(() => {\n      this._currentlyConnectedInputText = input;\n      input._connectedVirtualKeyboard = this;\n      this.isVisible = true;\n    });\n    const onBlurObserver = input.onBlurObservable.add(() => {\n      input._connectedVirtualKeyboard = null;\n      this._currentlyConnectedInputText = null;\n      this.isVisible = false;\n    });\n    this._connectedInputTexts.push({\n      input,\n      onBlurObserver,\n      onFocusObserver\n    });\n  }\n  /**\n   * Disconnects the keyboard from connected InputText controls\n   *\n   * @param input optionally defines a target control, otherwise all are disconnected\n   */\n  disconnect(input) {\n    if (input) {\n      // .find not available on IE\n      const filtered = this._connectedInputTexts.filter(a => a.input === input);\n      if (filtered.length === 1) {\n        this._removeConnectedInputObservables(filtered[0]);\n        this._connectedInputTexts = this._connectedInputTexts.filter(a => a.input !== input);\n        if (this._currentlyConnectedInputText === input) {\n          this._currentlyConnectedInputText = null;\n        }\n      }\n    } else {\n      this._connectedInputTexts.forEach(connectedInputText => {\n        this._removeConnectedInputObservables(connectedInputText);\n      });\n      this._connectedInputTexts.length = 0;\n    }\n    if (this._connectedInputTexts.length === 0) {\n      this._currentlyConnectedInputText = null;\n      this.onKeyPressObservable.remove(this._onKeyPressObserver);\n      this._onKeyPressObserver = null;\n    }\n  }\n  _removeConnectedInputObservables(connectedInputText) {\n    connectedInputText.input._connectedVirtualKeyboard = null;\n    connectedInputText.input.onFocusObservable.remove(connectedInputText.onFocusObserver);\n    connectedInputText.input.onBlurObservable.remove(connectedInputText.onBlurObserver);\n  }\n  /**\n   * Release all resources\n   */\n  dispose() {\n    super.dispose();\n    this.disconnect();\n  }\n  // Statics\n  /**\n   * Creates a new keyboard using a default layout\n   *\n   * @param name defines control name\n   * @returns a new VirtualKeyboard\n   */\n  static CreateDefaultLayout(name) {\n    const returnValue = new VirtualKeyboard(name);\n    returnValue.addKeysRow([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"0\", \"\\u2190\"]);\n    returnValue.addKeysRow([\"q\", \"w\", \"e\", \"r\", \"t\", \"y\", \"u\", \"i\", \"o\", \"p\"]);\n    returnValue.addKeysRow([\"a\", \"s\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \";\", \"'\", \"\\u21B5\"]);\n    returnValue.addKeysRow([\"\\u21E7\", \"z\", \"x\", \"c\", \"v\", \"b\", \"n\", \"m\", \",\", \".\", \"/\"]);\n    returnValue.addKeysRow([\" \"], [{\n      width: \"200px\"\n    }]);\n    return returnValue;\n  }\n  /**\n   * @internal\n   */\n  _parseFromContent(serializedObject, host) {\n    super._parseFromContent(serializedObject, host);\n    for (const row of this.children) {\n      if (row.getClassName() === \"StackPanel\") {\n        const stackPanel = row;\n        for (const key of stackPanel.children) {\n          if (key.getClassName() === \"Button\" && key.name) {\n            key.onPointerUpObservable.add(() => {\n              this.onKeyPressObservable.notifyObservers(key.name);\n            });\n          }\n        }\n      }\n    }\n  }\n}\nRegisterClass(\"BABYLON.GUI.VirtualKeyboard\", VirtualKeyboard);","map":{"version":3,"names":["Observable","StackPanel","Button","RegisterClass","InputTextArea","KeyPropertySet","VirtualKeyboard","constructor","onKeyPressObservable","defaultButtonWidth","defaultButtonHeight","defaultButtonPaddingLeft","defaultButtonPaddingRight","defaultButtonPaddingTop","defaultButtonPaddingBottom","defaultButtonColor","defaultButtonBackground","shiftButtonColor","selectedShiftThickness","shiftState","_currentlyConnectedInputText","_connectedInputTexts","_onKeyPressObserver","_getTypeName","_createKey","key","propertySet","button","CreateSimpleButton","width","height","color","background","paddingLeft","paddingRight","paddingTop","paddingBottom","thickness","isFocusInvisible","shadowColor","shadowBlur","shadowOffsetX","shadowOffsetY","onPointerUpObservable","add","notifyObservers","addKeysRow","keys","propertySets","panel","isVertical","maxKey","i","length","properties","heightInPixels","addControl","applyShiftState","children","row","rowContainer","j","button_tblock","text","toUpperCase","toLowerCase","connectedInputText","connect","input","inputTextAlreadyConnected","some","a","_host","focusedControl","alternativeProcessKey","processKey","isVisible","_connectedVirtualKeyboard","onFocusObserver","onFocusObservable","onBlurObserver","onBlurObservable","push","disconnect","filtered","filter","_removeConnectedInputObservables","forEach","remove","dispose","CreateDefaultLayout","name","returnValue","_parseFromContent","serializedObject","host","getClassName","stackPanel"],"sources":["../../../../../dev/gui/src/2D/controls/virtualKeyboard.ts"],"sourcesContent":["import type { Nullable } from \"core/types\";\r\nimport type { Observer } from \"core/Misc/observable\";\r\nimport { Observable } from \"core/Misc/observable\";\r\n\r\nimport { StackPanel } from \"./stackPanel\";\r\nimport { Button } from \"./button\";\r\nimport type { Container } from \"./container\";\r\nimport type { TextBlock } from \"./textBlock\";\r\nimport type { InputText } from \"./inputText\";\r\nimport { RegisterClass } from \"core/Misc/typeStore\";\r\nimport type { AdvancedDynamicTexture } from \"../advancedDynamicTexture\";\r\nimport { InputTextArea } from \"./inputTextArea\";\r\n\r\n/**\r\n * Class used to store key control properties\r\n */\r\nexport class KeyPropertySet {\r\n    /** Width */\r\n    width?: string;\r\n    /** Height */\r\n    height?: string;\r\n    /** Left padding */\r\n    paddingLeft?: string;\r\n    /** Right padding */\r\n    paddingRight?: string;\r\n    /** Top padding */\r\n    paddingTop?: string;\r\n    /** Bottom padding */\r\n    paddingBottom?: string;\r\n    /** Foreground color */\r\n    color?: string;\r\n    /** Background color */\r\n    background?: string;\r\n}\r\n\r\ntype ConnectedInputText = {\r\n    input: InputText;\r\n    onFocusObserver: Nullable<Observer<InputText>>;\r\n    onBlurObserver: Nullable<Observer<InputText>>;\r\n};\r\n\r\n/**\r\n * Class used to create virtual keyboard\r\n */\r\nexport class VirtualKeyboard extends StackPanel {\r\n    /** Observable raised when a key is pressed */\r\n    public onKeyPressObservable = new Observable<string>();\r\n\r\n    /** Gets or sets default key button width */\r\n    public defaultButtonWidth = \"40px\";\r\n    /** Gets or sets default key button height */\r\n    public defaultButtonHeight = \"40px\";\r\n\r\n    /** Gets or sets default key button left padding */\r\n    public defaultButtonPaddingLeft = \"2px\";\r\n    /** Gets or sets default key button right padding */\r\n    public defaultButtonPaddingRight = \"2px\";\r\n    /** Gets or sets default key button top padding */\r\n    public defaultButtonPaddingTop = \"2px\";\r\n    /** Gets or sets default key button bottom padding */\r\n    public defaultButtonPaddingBottom = \"2px\";\r\n\r\n    /** Gets or sets default key button foreground color */\r\n    public defaultButtonColor = \"#DDD\";\r\n    /** Gets or sets default key button background color */\r\n    public defaultButtonBackground = \"#070707\";\r\n\r\n    /** Gets or sets shift button foreground color */\r\n    public shiftButtonColor = \"#7799FF\";\r\n    /** Gets or sets shift button thickness*/\r\n    public selectedShiftThickness = 1;\r\n\r\n    /** Gets shift key state */\r\n    public shiftState = 0;\r\n\r\n    protected _getTypeName(): string {\r\n        return \"VirtualKeyboard\";\r\n    }\r\n\r\n    private _createKey(key: string, propertySet: Nullable<KeyPropertySet>) {\r\n        const button = Button.CreateSimpleButton(key, key);\r\n\r\n        button.width = propertySet && propertySet.width ? propertySet.width : this.defaultButtonWidth;\r\n        button.height = propertySet && propertySet.height ? propertySet.height : this.defaultButtonHeight;\r\n        button.color = propertySet && propertySet.color ? propertySet.color : this.defaultButtonColor;\r\n        button.background = propertySet && propertySet.background ? propertySet.background : this.defaultButtonBackground;\r\n        button.paddingLeft = propertySet && propertySet.paddingLeft ? propertySet.paddingLeft : this.defaultButtonPaddingLeft;\r\n        button.paddingRight = propertySet && propertySet.paddingRight ? propertySet.paddingRight : this.defaultButtonPaddingRight;\r\n        button.paddingTop = propertySet && propertySet.paddingTop ? propertySet.paddingTop : this.defaultButtonPaddingTop;\r\n        button.paddingBottom = propertySet && propertySet.paddingBottom ? propertySet.paddingBottom : this.defaultButtonPaddingBottom;\r\n\r\n        button.thickness = 0;\r\n        button.isFocusInvisible = true;\r\n\r\n        button.shadowColor = this.shadowColor;\r\n        button.shadowBlur = this.shadowBlur;\r\n        button.shadowOffsetX = this.shadowOffsetX;\r\n        button.shadowOffsetY = this.shadowOffsetY;\r\n\r\n        button.onPointerUpObservable.add(() => {\r\n            this.onKeyPressObservable.notifyObservers(key);\r\n        });\r\n\r\n        return button;\r\n    }\r\n\r\n    /**\r\n     * Adds a new row of keys\r\n     * @param keys defines the list of keys to add\r\n     * @param propertySets defines the associated property sets\r\n     */\r\n    public addKeysRow(keys: Array<string>, propertySets?: Array<KeyPropertySet>): void {\r\n        const panel = new StackPanel();\r\n        panel.isVertical = false;\r\n        panel.isFocusInvisible = true;\r\n\r\n        let maxKey: Nullable<Button> = null;\r\n        for (let i = 0; i < keys.length; i++) {\r\n            let properties = null;\r\n\r\n            if (propertySets && propertySets.length === keys.length) {\r\n                properties = propertySets[i];\r\n            }\r\n\r\n            const key = this._createKey(keys[i], properties);\r\n            if (!maxKey || key.heightInPixels > maxKey.heightInPixels) {\r\n                maxKey = key;\r\n            }\r\n\r\n            panel.addControl(key);\r\n        }\r\n\r\n        panel.height = maxKey ? maxKey.height : this.defaultButtonHeight;\r\n\r\n        this.addControl(panel);\r\n    }\r\n\r\n    /**\r\n     * Set the shift key to a specific state\r\n     * @param shiftState defines the new shift state\r\n     */\r\n    public applyShiftState(shiftState: number): void {\r\n        if (!this.children) {\r\n            return;\r\n        }\r\n\r\n        for (let i = 0; i < this.children.length; i++) {\r\n            const row = this.children[i];\r\n            if (!row || !(<Container>row).children) {\r\n                continue;\r\n            }\r\n\r\n            const rowContainer = <Container>row;\r\n            for (let j = 0; j < rowContainer.children.length; j++) {\r\n                const button = rowContainer.children[j] as Button;\r\n\r\n                if (!button || !button.children[0]) {\r\n                    continue;\r\n                }\r\n\r\n                const button_tblock = button.children[0] as TextBlock;\r\n\r\n                if (button_tblock.text === \"\\u21E7\") {\r\n                    button.color = shiftState ? this.shiftButtonColor : this.defaultButtonColor;\r\n                    button.thickness = shiftState > 1 ? this.selectedShiftThickness : 0;\r\n                }\r\n\r\n                button_tblock.text = shiftState > 0 ? button_tblock.text.toUpperCase() : button_tblock.text.toLowerCase();\r\n            }\r\n        }\r\n    }\r\n\r\n    private _currentlyConnectedInputText: Nullable<InputText | InputTextArea> = null;\r\n    private _connectedInputTexts: ConnectedInputText[] = [];\r\n    private _onKeyPressObserver: Nullable<Observer<string>> = null;\r\n\r\n    /** Gets the input text control currently attached to the keyboard */\r\n    public get connectedInputText(): Nullable<InputText | InputTextArea> {\r\n        return this._currentlyConnectedInputText;\r\n    }\r\n\r\n    /**\r\n     * Connects the keyboard with an input text control\r\n     *\r\n     * @param input defines the target control\r\n     */\r\n    public connect(input: InputText): void {\r\n        const inputTextAlreadyConnected = this._connectedInputTexts.some((a) => a.input === input);\r\n        if (inputTextAlreadyConnected) {\r\n            return;\r\n        }\r\n\r\n        if (this._onKeyPressObserver === null) {\r\n            this._onKeyPressObserver = this.onKeyPressObservable.add((key) => {\r\n                if (!this._currentlyConnectedInputText) {\r\n                    return;\r\n                }\r\n\r\n                this._currentlyConnectedInputText._host.focusedControl = this._currentlyConnectedInputText;\r\n\r\n                switch (key) {\r\n                    case \"\\u21E7\":\r\n                        this.shiftState++;\r\n                        if (this.shiftState > 2) {\r\n                            this.shiftState = 0;\r\n                        }\r\n                        this.applyShiftState(this.shiftState);\r\n                        return;\r\n                    case \"\\u2190\":\r\n                        if (this._currentlyConnectedInputText instanceof InputTextArea) {\r\n                            this._currentlyConnectedInputText.alternativeProcessKey(\"Backspace\");\r\n                        } else {\r\n                            this._currentlyConnectedInputText.processKey(8);\r\n                        }\r\n                        return;\r\n                    case \"\\u21B5\":\r\n                        if (this._currentlyConnectedInputText instanceof InputTextArea) {\r\n                            this._currentlyConnectedInputText.alternativeProcessKey(\"Enter\");\r\n                        } else {\r\n                            this._currentlyConnectedInputText.processKey(13);\r\n                        }\r\n                        return;\r\n                }\r\n                if (this._currentlyConnectedInputText instanceof InputTextArea) {\r\n                    this._currentlyConnectedInputText.alternativeProcessKey(\"\", this.shiftState ? key.toUpperCase() : key);\r\n                } else {\r\n                    this._currentlyConnectedInputText.processKey(-1, this.shiftState ? key.toUpperCase() : key);\r\n                }\r\n\r\n                if (this.shiftState === 1) {\r\n                    this.shiftState = 0;\r\n                    this.applyShiftState(this.shiftState);\r\n                }\r\n            });\r\n        }\r\n\r\n        this.isVisible = false;\r\n        this._currentlyConnectedInputText = input;\r\n        input._connectedVirtualKeyboard = this;\r\n\r\n        // Events hooking\r\n        const onFocusObserver: Nullable<Observer<InputText>> = input.onFocusObservable.add(() => {\r\n            this._currentlyConnectedInputText = input;\r\n            input._connectedVirtualKeyboard = this;\r\n            this.isVisible = true;\r\n        });\r\n\r\n        const onBlurObserver: Nullable<Observer<InputText>> = input.onBlurObservable.add(() => {\r\n            input._connectedVirtualKeyboard = null;\r\n            this._currentlyConnectedInputText = null;\r\n            this.isVisible = false;\r\n        });\r\n\r\n        this._connectedInputTexts.push({\r\n            input,\r\n            onBlurObserver,\r\n            onFocusObserver,\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Disconnects the keyboard from connected InputText controls\r\n     *\r\n     * @param input optionally defines a target control, otherwise all are disconnected\r\n     */\r\n    public disconnect(input?: InputText): void {\r\n        if (input) {\r\n            // .find not available on IE\r\n            const filtered = this._connectedInputTexts.filter((a) => a.input === input);\r\n            if (filtered.length === 1) {\r\n                this._removeConnectedInputObservables(filtered[0]);\r\n\r\n                this._connectedInputTexts = this._connectedInputTexts.filter((a) => a.input !== input);\r\n                if (this._currentlyConnectedInputText === input) {\r\n                    this._currentlyConnectedInputText = null;\r\n                }\r\n            }\r\n        } else {\r\n            this._connectedInputTexts.forEach((connectedInputText: ConnectedInputText) => {\r\n                this._removeConnectedInputObservables(connectedInputText);\r\n            });\r\n            this._connectedInputTexts.length = 0;\r\n        }\r\n\r\n        if (this._connectedInputTexts.length === 0) {\r\n            this._currentlyConnectedInputText = null;\r\n            this.onKeyPressObservable.remove(this._onKeyPressObserver);\r\n            this._onKeyPressObserver = null;\r\n        }\r\n    }\r\n\r\n    private _removeConnectedInputObservables(connectedInputText: ConnectedInputText): void {\r\n        connectedInputText.input._connectedVirtualKeyboard = null;\r\n        connectedInputText.input.onFocusObservable.remove(connectedInputText.onFocusObserver);\r\n        connectedInputText.input.onBlurObservable.remove(connectedInputText.onBlurObserver);\r\n    }\r\n\r\n    /**\r\n     * Release all resources\r\n     */\r\n    public dispose(): void {\r\n        super.dispose();\r\n\r\n        this.disconnect();\r\n    }\r\n\r\n    // Statics\r\n\r\n    /**\r\n     * Creates a new keyboard using a default layout\r\n     *\r\n     * @param name defines control name\r\n     * @returns a new VirtualKeyboard\r\n     */\r\n    public static CreateDefaultLayout(name?: string): VirtualKeyboard {\r\n        const returnValue = new VirtualKeyboard(name);\r\n\r\n        returnValue.addKeysRow([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"0\", \"\\u2190\"]);\r\n        returnValue.addKeysRow([\"q\", \"w\", \"e\", \"r\", \"t\", \"y\", \"u\", \"i\", \"o\", \"p\"]);\r\n        returnValue.addKeysRow([\"a\", \"s\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \";\", \"'\", \"\\u21B5\"]);\r\n        returnValue.addKeysRow([\"\\u21E7\", \"z\", \"x\", \"c\", \"v\", \"b\", \"n\", \"m\", \",\", \".\", \"/\"]);\r\n        returnValue.addKeysRow([\" \"], [{ width: \"200px\" }]);\r\n\r\n        return returnValue;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _parseFromContent(serializedObject: any, host: AdvancedDynamicTexture) {\r\n        super._parseFromContent(serializedObject, host);\r\n        for (const row of this.children) {\r\n            if (row.getClassName() === \"StackPanel\") {\r\n                const stackPanel = row as StackPanel;\r\n                for (const key of stackPanel.children) {\r\n                    if (key.getClassName() === \"Button\" && key.name) {\r\n                        key.onPointerUpObservable.add(() => {\r\n                            this.onKeyPressObservable.notifyObservers(key.name as string);\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nRegisterClass(\"BABYLON.GUI.VirtualKeyboard\", VirtualKeyboard);\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}