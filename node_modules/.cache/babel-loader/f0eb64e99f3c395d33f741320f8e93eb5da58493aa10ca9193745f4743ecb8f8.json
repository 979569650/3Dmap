{"ast":null,"code":"import { Logger } from \"../Misc/logger.js\";\n/**\n * Wraps one or more Sound objects and selects one with random weight for playback.\n */\nexport class WeightedSound {\n  /**\n   * Creates a new WeightedSound from the list of sounds given.\n   * @param loop When true a Sound will be selected and played when the current playing Sound completes.\n   * @param sounds Array of Sounds that will be selected from.\n   * @param weights Array of number values for selection weights; length must equal sounds, values will be normalized to 1\n   */\n  constructor(loop, sounds, weights) {\n    /** When true a Sound will be selected and played when the current playing Sound completes. */\n    this.loop = false;\n    this._coneInnerAngle = 360;\n    this._coneOuterAngle = 360;\n    this._volume = 1;\n    /** A Sound is currently playing. */\n    this.isPlaying = false;\n    /** A Sound is currently paused. */\n    this.isPaused = false;\n    this._sounds = [];\n    this._weights = [];\n    if (sounds.length !== weights.length) {\n      throw new Error(\"Sounds length does not equal weights length\");\n    }\n    this.loop = loop;\n    this._weights = weights;\n    // Normalize the weights\n    let weightSum = 0;\n    for (const weight of weights) {\n      weightSum += weight;\n    }\n    const invWeightSum = weightSum > 0 ? 1 / weightSum : 0;\n    for (let i = 0; i < this._weights.length; i++) {\n      this._weights[i] *= invWeightSum;\n    }\n    this._sounds = sounds;\n    for (const sound of this._sounds) {\n      sound.onEndedObservable.add(() => {\n        this._onended();\n      });\n    }\n  }\n  /**\n   * The size of cone in degrees for a directional sound in which there will be no attenuation.\n   */\n  get directionalConeInnerAngle() {\n    return this._coneInnerAngle;\n  }\n  /**\n   * The size of cone in degrees for a directional sound in which there will be no attenuation.\n   */\n  set directionalConeInnerAngle(value) {\n    if (value !== this._coneInnerAngle) {\n      if (this._coneOuterAngle < value) {\n        Logger.Error(\"directionalConeInnerAngle: outer angle of the cone must be superior or equal to the inner angle.\");\n        return;\n      }\n      this._coneInnerAngle = value;\n      for (const sound of this._sounds) {\n        sound.directionalConeInnerAngle = value;\n      }\n    }\n  }\n  /**\n   * Size of cone in degrees for a directional sound outside of which there will be no sound.\n   * Listener angles between innerAngle and outerAngle will falloff linearly.\n   */\n  get directionalConeOuterAngle() {\n    return this._coneOuterAngle;\n  }\n  /**\n   * Size of cone in degrees for a directional sound outside of which there will be no sound.\n   * Listener angles between innerAngle and outerAngle will falloff linearly.\n   */\n  set directionalConeOuterAngle(value) {\n    if (value !== this._coneOuterAngle) {\n      if (value < this._coneInnerAngle) {\n        Logger.Error(\"directionalConeOuterAngle: outer angle of the cone must be superior or equal to the inner angle.\");\n        return;\n      }\n      this._coneOuterAngle = value;\n      for (const sound of this._sounds) {\n        sound.directionalConeOuterAngle = value;\n      }\n    }\n  }\n  /**\n   * Playback volume.\n   */\n  get volume() {\n    return this._volume;\n  }\n  /**\n   * Playback volume.\n   */\n  set volume(value) {\n    if (value !== this._volume) {\n      for (const sound of this._sounds) {\n        sound.setVolume(value);\n      }\n    }\n  }\n  _onended() {\n    if (this._currentIndex !== undefined) {\n      this._sounds[this._currentIndex].autoplay = false;\n    }\n    if (this.loop && this.isPlaying) {\n      this.play();\n    } else {\n      this.isPlaying = false;\n    }\n  }\n  /**\n   * Suspend playback\n   */\n  pause() {\n    this.isPaused = true;\n    if (this._currentIndex !== undefined) {\n      this._sounds[this._currentIndex].pause();\n    }\n  }\n  /**\n   * Stop playback\n   */\n  stop() {\n    this.isPlaying = false;\n    if (this._currentIndex !== undefined) {\n      this._sounds[this._currentIndex].stop();\n    }\n  }\n  /**\n   * Start playback.\n   * @param startOffset Position the clip head at a specific time in seconds.\n   */\n  play(startOffset) {\n    if (!this.isPaused) {\n      this.stop();\n      const randomValue = Math.random();\n      let total = 0;\n      for (let i = 0; i < this._weights.length; i++) {\n        total += this._weights[i];\n        if (randomValue <= total) {\n          this._currentIndex = i;\n          break;\n        }\n      }\n    }\n    const sound = this._sounds[this._currentIndex];\n    if (sound.isReady()) {\n      sound.play(0, this.isPaused ? undefined : startOffset);\n    } else {\n      sound.autoplay = true;\n    }\n    this.isPlaying = true;\n    this.isPaused = false;\n  }\n}","map":{"version":3,"names":["Logger","WeightedSound","constructor","loop","sounds","weights","_coneInnerAngle","_coneOuterAngle","_volume","isPlaying","isPaused","_sounds","_weights","length","Error","weightSum","weight","invWeightSum","i","sound","onEndedObservable","add","_onended","directionalConeInnerAngle","value","directionalConeOuterAngle","volume","setVolume","_currentIndex","undefined","autoplay","play","pause","stop","startOffset","randomValue","Math","random","total","isReady"],"sources":["../../../../dev/core/src/Audio/weightedsound.ts"],"sourcesContent":["import type { Sound } from \"../Audio/sound\";\r\nimport { Logger } from \"../Misc/logger\";\r\n\r\n/**\r\n * Wraps one or more Sound objects and selects one with random weight for playback.\r\n */\r\nexport class WeightedSound {\r\n    /** When true a Sound will be selected and played when the current playing Sound completes. */\r\n    public loop: boolean = false;\r\n    private _coneInnerAngle: number = 360;\r\n    private _coneOuterAngle: number = 360;\r\n    private _volume: number = 1;\r\n    /** A Sound is currently playing. */\r\n    public isPlaying: boolean = false;\r\n    /** A Sound is currently paused. */\r\n    public isPaused: boolean = false;\r\n\r\n    private _sounds: Sound[] = [];\r\n    private _weights: number[] = [];\r\n    private _currentIndex?: number;\r\n\r\n    /**\r\n     * Creates a new WeightedSound from the list of sounds given.\r\n     * @param loop When true a Sound will be selected and played when the current playing Sound completes.\r\n     * @param sounds Array of Sounds that will be selected from.\r\n     * @param weights Array of number values for selection weights; length must equal sounds, values will be normalized to 1\r\n     */\r\n    constructor(loop: boolean, sounds: Sound[], weights: number[]) {\r\n        if (sounds.length !== weights.length) {\r\n            throw new Error(\"Sounds length does not equal weights length\");\r\n        }\r\n\r\n        this.loop = loop;\r\n        this._weights = weights;\r\n        // Normalize the weights\r\n        let weightSum = 0;\r\n        for (const weight of weights) {\r\n            weightSum += weight;\r\n        }\r\n        const invWeightSum = weightSum > 0 ? 1 / weightSum : 0;\r\n        for (let i = 0; i < this._weights.length; i++) {\r\n            this._weights[i] *= invWeightSum;\r\n        }\r\n        this._sounds = sounds;\r\n        for (const sound of this._sounds) {\r\n            sound.onEndedObservable.add(() => {\r\n                this._onended();\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * The size of cone in degrees for a directional sound in which there will be no attenuation.\r\n     */\r\n    public get directionalConeInnerAngle(): number {\r\n        return this._coneInnerAngle;\r\n    }\r\n\r\n    /**\r\n     * The size of cone in degrees for a directional sound in which there will be no attenuation.\r\n     */\r\n    public set directionalConeInnerAngle(value: number) {\r\n        if (value !== this._coneInnerAngle) {\r\n            if (this._coneOuterAngle < value) {\r\n                Logger.Error(\"directionalConeInnerAngle: outer angle of the cone must be superior or equal to the inner angle.\");\r\n                return;\r\n            }\r\n\r\n            this._coneInnerAngle = value;\r\n            for (const sound of this._sounds) {\r\n                sound.directionalConeInnerAngle = value;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Size of cone in degrees for a directional sound outside of which there will be no sound.\r\n     * Listener angles between innerAngle and outerAngle will falloff linearly.\r\n     */\r\n    public get directionalConeOuterAngle(): number {\r\n        return this._coneOuterAngle;\r\n    }\r\n\r\n    /**\r\n     * Size of cone in degrees for a directional sound outside of which there will be no sound.\r\n     * Listener angles between innerAngle and outerAngle will falloff linearly.\r\n     */\r\n    public set directionalConeOuterAngle(value: number) {\r\n        if (value !== this._coneOuterAngle) {\r\n            if (value < this._coneInnerAngle) {\r\n                Logger.Error(\"directionalConeOuterAngle: outer angle of the cone must be superior or equal to the inner angle.\");\r\n                return;\r\n            }\r\n\r\n            this._coneOuterAngle = value;\r\n            for (const sound of this._sounds) {\r\n                sound.directionalConeOuterAngle = value;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Playback volume.\r\n     */\r\n    public get volume(): number {\r\n        return this._volume;\r\n    }\r\n\r\n    /**\r\n     * Playback volume.\r\n     */\r\n    public set volume(value: number) {\r\n        if (value !== this._volume) {\r\n            for (const sound of this._sounds) {\r\n                sound.setVolume(value);\r\n            }\r\n        }\r\n    }\r\n\r\n    private _onended() {\r\n        if (this._currentIndex !== undefined) {\r\n            this._sounds[this._currentIndex].autoplay = false;\r\n        }\r\n        if (this.loop && this.isPlaying) {\r\n            this.play();\r\n        } else {\r\n            this.isPlaying = false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Suspend playback\r\n     */\r\n    public pause() {\r\n        this.isPaused = true;\r\n        if (this._currentIndex !== undefined) {\r\n            this._sounds[this._currentIndex].pause();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Stop playback\r\n     */\r\n    public stop() {\r\n        this.isPlaying = false;\r\n        if (this._currentIndex !== undefined) {\r\n            this._sounds[this._currentIndex].stop();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Start playback.\r\n     * @param startOffset Position the clip head at a specific time in seconds.\r\n     */\r\n    public play(startOffset?: number) {\r\n        if (!this.isPaused) {\r\n            this.stop();\r\n            const randomValue = Math.random();\r\n            let total = 0;\r\n            for (let i = 0; i < this._weights.length; i++) {\r\n                total += this._weights[i];\r\n                if (randomValue <= total) {\r\n                    this._currentIndex = i;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        const sound = this._sounds[this._currentIndex!];\r\n        if (sound.isReady()) {\r\n            sound.play(0, this.isPaused ? undefined : startOffset);\r\n        } else {\r\n            sound.autoplay = true;\r\n        }\r\n        this.isPlaying = true;\r\n        this.isPaused = false;\r\n    }\r\n}\r\n"],"mappings":"AACA,SAASA,MAAM,QAAQ,mBAAiB;AAExC;;;AAGA,OAAM,MAAOC,aAAa;EAetB;;;;;;EAMAC,YAAYC,IAAa,EAAEC,MAAe,EAAEC,OAAiB;IApB7D;IACO,KAAAF,IAAI,GAAY,KAAK;IACpB,KAAAG,eAAe,GAAW,GAAG;IAC7B,KAAAC,eAAe,GAAW,GAAG;IAC7B,KAAAC,OAAO,GAAW,CAAC;IAC3B;IACO,KAAAC,SAAS,GAAY,KAAK;IACjC;IACO,KAAAC,QAAQ,GAAY,KAAK;IAExB,KAAAC,OAAO,GAAY,EAAE;IACrB,KAAAC,QAAQ,GAAa,EAAE;IAU3B,IAAIR,MAAM,CAACS,MAAM,KAAKR,OAAO,CAACQ,MAAM,EAAE;MAClC,MAAM,IAAIC,KAAK,CAAC,6CAA6C,CAAC;;IAGlE,IAAI,CAACX,IAAI,GAAGA,IAAI;IAChB,IAAI,CAACS,QAAQ,GAAGP,OAAO;IACvB;IACA,IAAIU,SAAS,GAAG,CAAC;IACjB,KAAK,MAAMC,MAAM,IAAIX,OAAO,EAAE;MAC1BU,SAAS,IAAIC,MAAM;;IAEvB,MAAMC,YAAY,GAAGF,SAAS,GAAG,CAAC,GAAG,CAAC,GAAGA,SAAS,GAAG,CAAC;IACtD,KAAK,IAAIG,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,IAAI,CAACN,QAAQ,CAACC,MAAM,EAAEK,CAAC,EAAE,EAAE;MAC3C,IAAI,CAACN,QAAQ,CAACM,CAAC,CAAC,IAAID,YAAY;;IAEpC,IAAI,CAACN,OAAO,GAAGP,MAAM;IACrB,KAAK,MAAMe,KAAK,IAAI,IAAI,CAACR,OAAO,EAAE;MAC9BQ,KAAK,CAACC,iBAAiB,CAACC,GAAG,CAAC,MAAK;QAC7B,IAAI,CAACC,QAAQ,EAAE;MACnB,CAAC,CAAC;;EAEV;EAEA;;;EAGA,IAAWC,yBAAyBA,CAAA;IAChC,OAAO,IAAI,CAACjB,eAAe;EAC/B;EAEA;;;EAGA,IAAWiB,yBAAyBA,CAACC,KAAa;IAC9C,IAAIA,KAAK,KAAK,IAAI,CAAClB,eAAe,EAAE;MAChC,IAAI,IAAI,CAACC,eAAe,GAAGiB,KAAK,EAAE;QAC9BxB,MAAM,CAACc,KAAK,CAAC,kGAAkG,CAAC;QAChH;;MAGJ,IAAI,CAACR,eAAe,GAAGkB,KAAK;MAC5B,KAAK,MAAML,KAAK,IAAI,IAAI,CAACR,OAAO,EAAE;QAC9BQ,KAAK,CAACI,yBAAyB,GAAGC,KAAK;;;EAGnD;EAEA;;;;EAIA,IAAWC,yBAAyBA,CAAA;IAChC,OAAO,IAAI,CAAClB,eAAe;EAC/B;EAEA;;;;EAIA,IAAWkB,yBAAyBA,CAACD,KAAa;IAC9C,IAAIA,KAAK,KAAK,IAAI,CAACjB,eAAe,EAAE;MAChC,IAAIiB,KAAK,GAAG,IAAI,CAAClB,eAAe,EAAE;QAC9BN,MAAM,CAACc,KAAK,CAAC,kGAAkG,CAAC;QAChH;;MAGJ,IAAI,CAACP,eAAe,GAAGiB,KAAK;MAC5B,KAAK,MAAML,KAAK,IAAI,IAAI,CAACR,OAAO,EAAE;QAC9BQ,KAAK,CAACM,yBAAyB,GAAGD,KAAK;;;EAGnD;EAEA;;;EAGA,IAAWE,MAAMA,CAAA;IACb,OAAO,IAAI,CAAClB,OAAO;EACvB;EAEA;;;EAGA,IAAWkB,MAAMA,CAACF,KAAa;IAC3B,IAAIA,KAAK,KAAK,IAAI,CAAChB,OAAO,EAAE;MACxB,KAAK,MAAMW,KAAK,IAAI,IAAI,CAACR,OAAO,EAAE;QAC9BQ,KAAK,CAACQ,SAAS,CAACH,KAAK,CAAC;;;EAGlC;EAEQF,QAAQA,CAAA;IACZ,IAAI,IAAI,CAACM,aAAa,KAAKC,SAAS,EAAE;MAClC,IAAI,CAAClB,OAAO,CAAC,IAAI,CAACiB,aAAa,CAAC,CAACE,QAAQ,GAAG,KAAK;;IAErD,IAAI,IAAI,CAAC3B,IAAI,IAAI,IAAI,CAACM,SAAS,EAAE;MAC7B,IAAI,CAACsB,IAAI,EAAE;KACd,MAAM;MACH,IAAI,CAACtB,SAAS,GAAG,KAAK;;EAE9B;EAEA;;;EAGOuB,KAAKA,CAAA;IACR,IAAI,CAACtB,QAAQ,GAAG,IAAI;IACpB,IAAI,IAAI,CAACkB,aAAa,KAAKC,SAAS,EAAE;MAClC,IAAI,CAAClB,OAAO,CAAC,IAAI,CAACiB,aAAa,CAAC,CAACI,KAAK,EAAE;;EAEhD;EAEA;;;EAGOC,IAAIA,CAAA;IACP,IAAI,CAACxB,SAAS,GAAG,KAAK;IACtB,IAAI,IAAI,CAACmB,aAAa,KAAKC,SAAS,EAAE;MAClC,IAAI,CAAClB,OAAO,CAAC,IAAI,CAACiB,aAAa,CAAC,CAACK,IAAI,EAAE;;EAE/C;EAEA;;;;EAIOF,IAAIA,CAACG,WAAoB;IAC5B,IAAI,CAAC,IAAI,CAACxB,QAAQ,EAAE;MAChB,IAAI,CAACuB,IAAI,EAAE;MACX,MAAME,WAAW,GAAGC,IAAI,CAACC,MAAM,EAAE;MACjC,IAAIC,KAAK,GAAG,CAAC;MACb,KAAK,IAAIpB,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,IAAI,CAACN,QAAQ,CAACC,MAAM,EAAEK,CAAC,EAAE,EAAE;QAC3CoB,KAAK,IAAI,IAAI,CAAC1B,QAAQ,CAACM,CAAC,CAAC;QACzB,IAAIiB,WAAW,IAAIG,KAAK,EAAE;UACtB,IAAI,CAACV,aAAa,GAAGV,CAAC;UACtB;;;;IAIZ,MAAMC,KAAK,GAAG,IAAI,CAACR,OAAO,CAAC,IAAI,CAACiB,aAAc,CAAC;IAC/C,IAAIT,KAAK,CAACoB,OAAO,EAAE,EAAE;MACjBpB,KAAK,CAACY,IAAI,CAAC,CAAC,EAAE,IAAI,CAACrB,QAAQ,GAAGmB,SAAS,GAAGK,WAAW,CAAC;KACzD,MAAM;MACHf,KAAK,CAACW,QAAQ,GAAG,IAAI;;IAEzB,IAAI,CAACrB,SAAS,GAAG,IAAI;IACrB,IAAI,CAACC,QAAQ,GAAG,KAAK;EACzB"},"metadata":{},"sourceType":"module","externalDependencies":[]}