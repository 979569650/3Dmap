{"ast":null,"code":"import { __decorate } from \"@babylonjs/core/tslib.es6.js\";\nimport { BaseSlider } from \"./baseSlider.js\";\nimport { Measure } from \"../../measure.js\";\nimport { Image } from \"../image.js\";\nimport { RegisterClass } from \"@babylonjs/core/Misc/typeStore.js\";\nimport { serialize } from \"@babylonjs/core/Misc/decorators.js\";\n/**\n * Class used to create slider controls based on images\n */\nexport class ImageBasedSlider extends BaseSlider {\n  get displayThumb() {\n    return this._displayThumb && this.thumbImage != null;\n  }\n  set displayThumb(value) {\n    if (this._displayThumb === value) {\n      return;\n    }\n    this._displayThumb = value;\n    this._markAsDirty();\n  }\n  /**\n   * Gets or sets the image used to render the background\n   */\n  get backgroundImage() {\n    return this._backgroundImage;\n  }\n  set backgroundImage(value) {\n    if (this._backgroundImage === value) {\n      return;\n    }\n    this._backgroundImage = value;\n    if (value && !value.isLoaded) {\n      value.onImageLoadedObservable.addOnce(() => this._markAsDirty());\n    }\n    this._markAsDirty();\n  }\n  /**\n   * Gets or sets the image used to render the value bar\n   */\n  get valueBarImage() {\n    return this._valueBarImage;\n  }\n  set valueBarImage(value) {\n    if (this._valueBarImage === value) {\n      return;\n    }\n    this._valueBarImage = value;\n    if (value && !value.isLoaded) {\n      value.onImageLoadedObservable.addOnce(() => this._markAsDirty());\n    }\n    this._markAsDirty();\n  }\n  /**\n   * Gets or sets the image used to render the thumb\n   */\n  get thumbImage() {\n    return this._thumbImage;\n  }\n  set thumbImage(value) {\n    if (this._thumbImage === value) {\n      return;\n    }\n    this._thumbImage = value;\n    if (value && !value.isLoaded) {\n      value.onImageLoadedObservable.addOnce(() => this._markAsDirty());\n    }\n    this._markAsDirty();\n  }\n  /**\n   * Creates a new ImageBasedSlider\n   * @param name defines the control name\n   */\n  constructor(name) {\n    super(name);\n    this.name = name;\n    this._tempMeasure = new Measure(0, 0, 0, 0);\n  }\n  _getTypeName() {\n    return \"ImageBasedSlider\";\n  }\n  _draw(context) {\n    context.save();\n    this._applyStates(context);\n    this._prepareRenderingData(\"rectangle\");\n    const thumbPosition = this._getThumbPosition();\n    const left = this._renderLeft;\n    const top = this._renderTop;\n    const width = this._renderWidth;\n    const height = this._renderHeight;\n    // Background\n    if (this._backgroundImage) {\n      this._tempMeasure.copyFromFloats(left, top, width, height);\n      if (this.isThumbClamped && this.displayThumb) {\n        if (this.isVertical) {\n          this._tempMeasure.height += this._effectiveThumbThickness;\n        } else {\n          this._tempMeasure.width += this._effectiveThumbThickness;\n        }\n      }\n      this._backgroundImage._currentMeasure.copyFrom(this._tempMeasure);\n      this._backgroundImage._draw(context);\n    }\n    // Bar\n    if (this._valueBarImage) {\n      if (this.isVertical) {\n        if (this.isThumbClamped && this.displayThumb) {\n          this._tempMeasure.copyFromFloats(left, top + thumbPosition, width, height - thumbPosition + this._effectiveThumbThickness);\n        } else {\n          this._tempMeasure.copyFromFloats(left, top + thumbPosition, width, height - thumbPosition);\n        }\n      } else {\n        if (this.isThumbClamped && this.displayThumb) {\n          this._tempMeasure.copyFromFloats(left, top, thumbPosition + this._effectiveThumbThickness / 2, height);\n        } else {\n          this._tempMeasure.copyFromFloats(left, top, thumbPosition, height);\n        }\n      }\n      this._valueBarImage._currentMeasure.copyFrom(this._tempMeasure);\n      this._valueBarImage._draw(context);\n    }\n    // Thumb\n    if (this.displayThumb) {\n      if (this.isVertical) {\n        this._tempMeasure.copyFromFloats(left - this._effectiveBarOffset, this._currentMeasure.top + thumbPosition, this._currentMeasure.width, this._effectiveThumbThickness);\n      } else {\n        this._tempMeasure.copyFromFloats(this._currentMeasure.left + thumbPosition, this._currentMeasure.top, this._effectiveThumbThickness, this._currentMeasure.height);\n      }\n      this._thumbImage._currentMeasure.copyFrom(this._tempMeasure);\n      this._thumbImage._draw(context);\n    }\n    context.restore();\n  }\n  /**\n   * Serializes the current control\n   * @param serializationObject defined the JSON serialized object\n   */\n  serialize(serializationObject) {\n    super.serialize(serializationObject);\n    const backgroundImage = {};\n    const thumbImage = {};\n    const valueBarImage = {};\n    this.backgroundImage.serialize(backgroundImage);\n    this.thumbImage.serialize(thumbImage);\n    this.valueBarImage.serialize(valueBarImage);\n    serializationObject.backgroundImage = backgroundImage;\n    serializationObject.thumbImage = thumbImage;\n    serializationObject.valueBarImage = valueBarImage;\n  }\n  /**\n   * @internal\n   */\n  _parseFromContent(serializedObject, host) {\n    super._parseFromContent(serializedObject, host);\n    this.backgroundImage = Image.Parse(serializedObject.backgroundImage, host);\n    this.thumbImage = Image.Parse(serializedObject.thumbImage, host);\n    this.valueBarImage = Image.Parse(serializedObject.valueBarImage, host);\n  }\n}\n__decorate([serialize()], ImageBasedSlider.prototype, \"displayThumb\", null);\nRegisterClass(\"BABYLON.GUI.ImageBasedSlider\", ImageBasedSlider);","map":{"version":3,"names":["BaseSlider","Measure","Image","RegisterClass","serialize","ImageBasedSlider","displayThumb","_displayThumb","thumbImage","value","_markAsDirty","backgroundImage","_backgroundImage","isLoaded","onImageLoadedObservable","addOnce","valueBarImage","_valueBarImage","_thumbImage","constructor","name","_tempMeasure","_getTypeName","_draw","context","save","_applyStates","_prepareRenderingData","thumbPosition","_getThumbPosition","left","_renderLeft","top","_renderTop","width","_renderWidth","height","_renderHeight","copyFromFloats","isThumbClamped","isVertical","_effectiveThumbThickness","_currentMeasure","copyFrom","_effectiveBarOffset","restore","serializationObject","_parseFromContent","serializedObject","host","Parse","__decorate"],"sources":["../../../../../../dev/gui/src/2D/controls/sliders/imageBasedSlider.ts"],"sourcesContent":["import { BaseSlider } from \"./baseSlider\";\r\nimport { Measure } from \"../../measure\";\r\nimport { Image } from \"../image\";\r\nimport { RegisterClass } from \"core/Misc/typeStore\";\r\nimport { serialize } from \"core/Misc/decorators\";\r\nimport type { ICanvasRenderingContext } from \"core/Engines/ICanvas\";\r\nimport type { AdvancedDynamicTexture } from \"../../advancedDynamicTexture\";\r\n\r\n/**\r\n * Class used to create slider controls based on images\r\n */\r\nexport class ImageBasedSlider extends BaseSlider {\r\n    private _backgroundImage: Image;\r\n    private _thumbImage: Image;\r\n    private _valueBarImage: Image;\r\n    private _tempMeasure = new Measure(0, 0, 0, 0);\r\n\r\n    @serialize()\r\n    public get displayThumb(): boolean {\r\n        return this._displayThumb && this.thumbImage != null;\r\n    }\r\n\r\n    public set displayThumb(value: boolean) {\r\n        if (this._displayThumb === value) {\r\n            return;\r\n        }\r\n\r\n        this._displayThumb = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the image used to render the background\r\n     */\r\n    public get backgroundImage(): Image {\r\n        return this._backgroundImage;\r\n    }\r\n\r\n    public set backgroundImage(value: Image) {\r\n        if (this._backgroundImage === value) {\r\n            return;\r\n        }\r\n\r\n        this._backgroundImage = value;\r\n\r\n        if (value && !value.isLoaded) {\r\n            value.onImageLoadedObservable.addOnce(() => this._markAsDirty());\r\n        }\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the image used to render the value bar\r\n     */\r\n    public get valueBarImage(): Image {\r\n        return this._valueBarImage;\r\n    }\r\n\r\n    public set valueBarImage(value: Image) {\r\n        if (this._valueBarImage === value) {\r\n            return;\r\n        }\r\n\r\n        this._valueBarImage = value;\r\n\r\n        if (value && !value.isLoaded) {\r\n            value.onImageLoadedObservable.addOnce(() => this._markAsDirty());\r\n        }\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the image used to render the thumb\r\n     */\r\n    public get thumbImage(): Image {\r\n        return this._thumbImage;\r\n    }\r\n\r\n    public set thumbImage(value: Image) {\r\n        if (this._thumbImage === value) {\r\n            return;\r\n        }\r\n\r\n        this._thumbImage = value;\r\n\r\n        if (value && !value.isLoaded) {\r\n            value.onImageLoadedObservable.addOnce(() => this._markAsDirty());\r\n        }\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Creates a new ImageBasedSlider\r\n     * @param name defines the control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"ImageBasedSlider\";\r\n    }\r\n\r\n    public _draw(context: ICanvasRenderingContext): void {\r\n        context.save();\r\n\r\n        this._applyStates(context);\r\n\r\n        this._prepareRenderingData(\"rectangle\");\r\n        const thumbPosition = this._getThumbPosition();\r\n        const left = this._renderLeft;\r\n        const top = this._renderTop;\r\n        const width = this._renderWidth;\r\n        const height = this._renderHeight;\r\n\r\n        // Background\r\n        if (this._backgroundImage) {\r\n            this._tempMeasure.copyFromFloats(left, top, width, height);\r\n            if (this.isThumbClamped && this.displayThumb) {\r\n                if (this.isVertical) {\r\n                    this._tempMeasure.height += this._effectiveThumbThickness;\r\n                } else {\r\n                    this._tempMeasure.width += this._effectiveThumbThickness;\r\n                }\r\n            }\r\n            this._backgroundImage._currentMeasure.copyFrom(this._tempMeasure);\r\n            this._backgroundImage._draw(context);\r\n        }\r\n\r\n        // Bar\r\n        if (this._valueBarImage) {\r\n            if (this.isVertical) {\r\n                if (this.isThumbClamped && this.displayThumb) {\r\n                    this._tempMeasure.copyFromFloats(left, top + thumbPosition, width, height - thumbPosition + this._effectiveThumbThickness);\r\n                } else {\r\n                    this._tempMeasure.copyFromFloats(left, top + thumbPosition, width, height - thumbPosition);\r\n                }\r\n            } else {\r\n                if (this.isThumbClamped && this.displayThumb) {\r\n                    this._tempMeasure.copyFromFloats(left, top, thumbPosition + this._effectiveThumbThickness / 2, height);\r\n                } else {\r\n                    this._tempMeasure.copyFromFloats(left, top, thumbPosition, height);\r\n                }\r\n            }\r\n            this._valueBarImage._currentMeasure.copyFrom(this._tempMeasure);\r\n            this._valueBarImage._draw(context);\r\n        }\r\n\r\n        // Thumb\r\n        if (this.displayThumb) {\r\n            if (this.isVertical) {\r\n                this._tempMeasure.copyFromFloats(\r\n                    left - this._effectiveBarOffset,\r\n                    this._currentMeasure.top + thumbPosition,\r\n                    this._currentMeasure.width,\r\n                    this._effectiveThumbThickness\r\n                );\r\n            } else {\r\n                this._tempMeasure.copyFromFloats(this._currentMeasure.left + thumbPosition, this._currentMeasure.top, this._effectiveThumbThickness, this._currentMeasure.height);\r\n            }\r\n\r\n            this._thumbImage._currentMeasure.copyFrom(this._tempMeasure);\r\n            this._thumbImage._draw(context);\r\n        }\r\n\r\n        context.restore();\r\n    }\r\n\r\n    /**\r\n     * Serializes the current control\r\n     * @param serializationObject defined the JSON serialized object\r\n     */\r\n    public serialize(serializationObject: any) {\r\n        super.serialize(serializationObject);\r\n        const backgroundImage = {};\r\n        const thumbImage = {};\r\n        const valueBarImage = {};\r\n        this.backgroundImage.serialize(backgroundImage);\r\n        this.thumbImage.serialize(thumbImage);\r\n        this.valueBarImage.serialize(valueBarImage);\r\n        serializationObject.backgroundImage = backgroundImage;\r\n        serializationObject.thumbImage = thumbImage;\r\n        serializationObject.valueBarImage = valueBarImage;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _parseFromContent(serializedObject: any, host: AdvancedDynamicTexture) {\r\n        super._parseFromContent(serializedObject, host);\r\n        this.backgroundImage = Image.Parse(serializedObject.backgroundImage, host) as Image;\r\n        this.thumbImage = Image.Parse(serializedObject.thumbImage, host) as Image;\r\n        this.valueBarImage = Image.Parse(serializedObject.valueBarImage, host) as Image;\r\n    }\r\n}\r\nRegisterClass(\"BABYLON.GUI.ImageBasedSlider\", ImageBasedSlider);\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}