{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { __decorate } from \"@babylonjs/core/tslib.es6.js\";\nimport { Color4 } from \"@babylonjs/core/Maths/math.color.js\";\nimport { Constants } from \"@babylonjs/core/Engines/constants.js\";\nimport { EffectFallbacks } from \"@babylonjs/core/Materials/effectFallbacks.js\";\nimport { MaterialDefines } from \"@babylonjs/core/Materials/materialDefines.js\";\nimport { MaterialHelper } from \"@babylonjs/core/Materials/materialHelper.js\";\nimport { PushMaterial } from \"@babylonjs/core/Materials/pushMaterial.js\";\nimport { RegisterClass } from \"@babylonjs/core/Misc/typeStore.js\";\nimport { SerializationHelper, serialize } from \"@babylonjs/core/Misc/decorators.js\";\nimport { VertexBuffer } from \"@babylonjs/core/Buffers/buffer.js\";\nimport \"./shaders/mrdlBackglow.fragment.js\";\nimport \"./shaders/mrdlBackglow.vertex.js\";\n/** @hidden */\nclass MRDLBackglowMaterialDefines extends MaterialDefines {\n  constructor() {\n    super();\n    this._needNormals = true;\n    this._needUVs = true;\n    this.rebuild();\n  }\n}\nexport class MRDLBackglowMaterial extends PushMaterial {\n  constructor(name, scene) {\n    super(name, scene);\n    /**\n     * Gets or sets the bevel radius on the backglow. If this value is changed, update the lineWidth to match.\n     */\n    this.bevelRadius = 0.16;\n    /**\n     * Gets or sets the line width of the backglow.\n     */\n    this.lineWidth = 0.16;\n    /**\n     * Gets or sets whether to use absolute sizes when calculating effects on the backglow.\n     * Since desktop and VR/AR have different relative sizes, it's usually best to keep this false.\n     */\n    this.absoluteSizes = false;\n    /**\n     * Gets or sets the tuning motion of the backglow.\n     */\n    this.tuningMotion = 0.0;\n    /**\n     * Gets or sets the motion of the backglow.\n     */\n    this.motion = 1.0;\n    /**\n     * Gets or sets the maximum intensity of the backglow.\n     */\n    this.maxIntensity = 0.7;\n    /**\n     * Gets or sets the fade-in exponent of the intensity of the backglow.\n     */\n    this.intensityFadeInExponent = 2.0;\n    /**\n     * Gets or sets the start of the outer fuzz effect on the backglow.\n     */\n    this.outerFuzzStart = 0.04;\n    /**\n     * Gets or sets the end of the outer fuzz effect on the backglow.\n     */\n    this.outerFuzzEnd = 0.04;\n    /**\n     * Gets or sets the color of the backglow.\n     */\n    this.color = new Color4(0.682353, 0.698039, 1, 1);\n    /**\n     * Gets or sets the inner color of the backglow.\n     */\n    this.innerColor = new Color4(0.356863, 0.392157, 0.796078, 1);\n    /**\n     * Gets or sets the blend exponent of the backglow.\n     */\n    this.blendExponent = 1.5;\n    /**\n     * Gets or sets the falloff of the backglow.\n     */\n    this.falloff = 2.0;\n    /**\n     * Gets or sets the bias of the backglow.\n     */\n    this.bias = 0.5;\n    this.alphaMode = Constants.ALPHA_ADD;\n    this.disableDepthWrite = true;\n    this.backFaceCulling = false;\n  }\n  needAlphaBlending() {\n    return true;\n  }\n  needAlphaTesting() {\n    return false;\n  }\n  getAlphaTestTexture() {\n    return null;\n  }\n  // Methods\n  isReadyForSubMesh(mesh, subMesh) {\n    if (this.isFrozen) {\n      if (subMesh.effect && subMesh.effect._wasPreviouslyReady) {\n        return true;\n      }\n    }\n    if (!subMesh.materialDefines) {\n      subMesh.materialDefines = new MRDLBackglowMaterialDefines();\n    }\n    const defines = subMesh.materialDefines;\n    const scene = this.getScene();\n    if (this._isReadyForSubMesh(subMesh)) {\n      return true;\n    }\n    const engine = scene.getEngine();\n    // Attribs\n    MaterialHelper.PrepareDefinesForAttributes(mesh, defines, false, false);\n    // Get correct effect\n    if (defines.isDirty) {\n      defines.markAsProcessed();\n      scene.resetCachedMaterial();\n      // Fallbacks\n      const fallbacks = new EffectFallbacks();\n      if (defines.FOG) {\n        fallbacks.addFallback(1, \"FOG\");\n      }\n      MaterialHelper.HandleFallbacksForShadows(defines, fallbacks);\n      defines.IMAGEPROCESSINGPOSTPROCESS = scene.imageProcessingConfiguration.applyByPostProcess;\n      //Attributes\n      const attribs = [VertexBuffer.PositionKind];\n      if (defines.NORMAL) {\n        attribs.push(VertexBuffer.NormalKind);\n      }\n      if (defines.UV1) {\n        attribs.push(VertexBuffer.UVKind);\n      }\n      if (defines.UV2) {\n        attribs.push(VertexBuffer.UV2Kind);\n      }\n      if (defines.VERTEXCOLOR) {\n        attribs.push(VertexBuffer.ColorKind);\n      }\n      if (defines.TANGENT) {\n        attribs.push(VertexBuffer.TangentKind);\n      }\n      MaterialHelper.PrepareAttributesForInstances(attribs, defines);\n      // Legacy browser patch\n      const shaderName = \"mrdlBackglow\";\n      const join = defines.toString();\n      const uniforms = [\"world\", \"worldView\", \"worldViewProjection\", \"view\", \"projection\", \"viewProjection\", \"cameraPosition\", \"_Bevel_Radius_\", \"_Line_Width_\", \"_Absolute_Sizes_\", \"_Tuning_Motion_\", \"_Motion_\", \"_Max_Intensity_\", \"_Intensity_Fade_In_Exponent_\", \"_Outer_Fuzz_Start_\", \"_Outer_Fuzz_End_\", \"_Color_\", \"_Inner_Color_\", \"_Blend_Exponent_\", \"_Falloff_\", \"_Bias_\"];\n      const samplers = [];\n      const uniformBuffers = new Array();\n      MaterialHelper.PrepareUniformsAndSamplersList({\n        uniformsNames: uniforms,\n        uniformBuffersNames: uniformBuffers,\n        samplers: samplers,\n        defines: defines,\n        maxSimultaneousLights: 4\n      });\n      subMesh.setEffect(scene.getEngine().createEffect(shaderName, {\n        attributes: attribs,\n        uniformsNames: uniforms,\n        uniformBuffersNames: uniformBuffers,\n        samplers: samplers,\n        defines: join,\n        fallbacks: fallbacks,\n        onCompiled: this.onCompiled,\n        onError: this.onError,\n        indexParameters: {\n          maxSimultaneousLights: 4\n        }\n      }, engine), defines);\n    }\n    if (!subMesh.effect || !subMesh.effect.isReady()) {\n      return false;\n    }\n    defines._renderId = scene.getRenderId();\n    subMesh.effect._wasPreviouslyReady = true;\n    return true;\n  }\n  bindForSubMesh(world, mesh, subMesh) {\n    const scene = this.getScene();\n    const defines = subMesh.materialDefines;\n    if (!defines) {\n      return;\n    }\n    const effect = subMesh.effect;\n    if (!effect) {\n      return;\n    }\n    this._activeEffect = effect;\n    // Matrices\n    this.bindOnlyWorldMatrix(world);\n    this._activeEffect.setMatrix(\"viewProjection\", scene.getTransformMatrix());\n    this._activeEffect.setVector3(\"cameraPosition\", scene.activeCamera.position);\n    // \"Rounded Rectangle\"\n    this._activeEffect.setFloat(\"_Bevel_Radius_\", this.bevelRadius);\n    this._activeEffect.setFloat(\"_Line_Width_\", this.lineWidth);\n    this._activeEffect.setFloat(\"_Absolute_Sizes_\", this.absoluteSizes ? 1.0 : 0.0);\n    // \"Animation\"\n    this._activeEffect.setFloat(\"_Tuning_Motion_\", this.tuningMotion);\n    this._activeEffect.setFloat(\"_Motion_\", this.motion);\n    this._activeEffect.setFloat(\"_Max_Intensity_\", this.maxIntensity);\n    this._activeEffect.setFloat(\"_Intensity_Fade_In_Exponent_\", this.intensityFadeInExponent);\n    this._activeEffect.setFloat(\"_Outer_Fuzz_Start_\", this.outerFuzzStart);\n    this._activeEffect.setFloat(\"_Outer_Fuzz_End_\", this.outerFuzzEnd);\n    // \"Color\"\n    this._activeEffect.setDirectColor4(\"_Color_\", this.color);\n    this._activeEffect.setDirectColor4(\"_Inner_Color_\", this.innerColor);\n    this._activeEffect.setFloat(\"_Blend_Exponent_\", this.blendExponent);\n    // \"Inner Transition\"\n    this._activeEffect.setFloat(\"_Falloff_\", this.falloff);\n    this._activeEffect.setFloat(\"_Bias_\", this.bias);\n    this._afterBind(mesh, this._activeEffect);\n  }\n  /**\n   * Get the list of animatables in the material.\n   * @returns the list of animatables object used in the material\n   */\n  getAnimatables() {\n    return [];\n  }\n  dispose(forceDisposeEffect) {\n    super.dispose(forceDisposeEffect);\n  }\n  clone(name) {\n    return SerializationHelper.Clone(() => new MRDLBackglowMaterial(name, this.getScene()), this);\n  }\n  serialize() {\n    const serializationObject = SerializationHelper.Serialize(this);\n    serializationObject.customType = \"BABYLON.MRDLBackglowMaterial\";\n    return serializationObject;\n  }\n  getClassName() {\n    return \"MRDLBackglowMaterial\";\n  }\n  // Statics\n  static Parse(source, scene, rootUrl) {\n    return SerializationHelper.Parse(() => new MRDLBackglowMaterial(source.name, scene), source, scene, rootUrl);\n  }\n}\n__decorate([serialize()], MRDLBackglowMaterial.prototype, \"bevelRadius\", void 0);\n__decorate([serialize()], MRDLBackglowMaterial.prototype, \"lineWidth\", void 0);\n__decorate([serialize()], MRDLBackglowMaterial.prototype, \"absoluteSizes\", void 0);\n__decorate([serialize()], MRDLBackglowMaterial.prototype, \"tuningMotion\", void 0);\n__decorate([serialize()], MRDLBackglowMaterial.prototype, \"motion\", void 0);\n__decorate([serialize()], MRDLBackglowMaterial.prototype, \"maxIntensity\", void 0);\n__decorate([serialize()], MRDLBackglowMaterial.prototype, \"intensityFadeInExponent\", void 0);\n__decorate([serialize()], MRDLBackglowMaterial.prototype, \"outerFuzzStart\", void 0);\n__decorate([serialize()], MRDLBackglowMaterial.prototype, \"outerFuzzEnd\", void 0);\n__decorate([serialize()], MRDLBackglowMaterial.prototype, \"color\", void 0);\n__decorate([serialize()], MRDLBackglowMaterial.prototype, \"innerColor\", void 0);\n__decorate([serialize()], MRDLBackglowMaterial.prototype, \"blendExponent\", void 0);\n__decorate([serialize()], MRDLBackglowMaterial.prototype, \"falloff\", void 0);\n__decorate([serialize()], MRDLBackglowMaterial.prototype, \"bias\", void 0);\nRegisterClass(\"BABYLON.GUI.MRDLBackglowMaterial\", MRDLBackglowMaterial);","map":{"version":3,"names":["Color4","Constants","EffectFallbacks","MaterialDefines","MaterialHelper","PushMaterial","RegisterClass","SerializationHelper","serialize","VertexBuffer","MRDLBackglowMaterialDefines","constructor","_needNormals","_needUVs","rebuild","MRDLBackglowMaterial","name","scene","bevelRadius","lineWidth","absoluteSizes","tuningMotion","motion","maxIntensity","intensityFadeInExponent","outerFuzzStart","outerFuzzEnd","color","innerColor","blendExponent","falloff","bias","alphaMode","ALPHA_ADD","disableDepthWrite","backFaceCulling","needAlphaBlending","needAlphaTesting","getAlphaTestTexture","isReadyForSubMesh","mesh","subMesh","isFrozen","effect","_wasPreviouslyReady","materialDefines","defines","getScene","_isReadyForSubMesh","engine","getEngine","PrepareDefinesForAttributes","isDirty","markAsProcessed","resetCachedMaterial","fallbacks","FOG","addFallback","HandleFallbacksForShadows","IMAGEPROCESSINGPOSTPROCESS","imageProcessingConfiguration","applyByPostProcess","attribs","PositionKind","NORMAL","push","NormalKind","UV1","UVKind","UV2","UV2Kind","VERTEXCOLOR","ColorKind","TANGENT","TangentKind","PrepareAttributesForInstances","shaderName","join","toString","uniforms","samplers","uniformBuffers","Array","PrepareUniformsAndSamplersList","uniformsNames","uniformBuffersNames","maxSimultaneousLights","setEffect","createEffect","attributes","onCompiled","onError","indexParameters","isReady","_renderId","getRenderId","bindForSubMesh","world","_activeEffect","bindOnlyWorldMatrix","setMatrix","getTransformMatrix","setVector3","activeCamera","position","setFloat","setDirectColor4","_afterBind","getAnimatables","dispose","forceDisposeEffect","clone","Clone","serializationObject","Serialize","customType","getClassName","Parse","source","rootUrl","__decorate"],"sources":["../../../../../../dev/gui/src/3D/materials/mrdl/mrdlBackglowMaterial.ts"],"sourcesContent":["import type { AbstractMesh } from \"core/Meshes/abstractMesh\";\r\nimport type { BaseTexture } from \"core/Materials/Textures/baseTexture\";\r\nimport type { IAnimatable } from \"core/Animations/animatable.interface\";\r\nimport type { IEffectCreationOptions } from \"core/Materials/effect\";\r\nimport type { Matrix } from \"core/Maths/math.vector\";\r\nimport type { Mesh } from \"core/Meshes/mesh\";\r\nimport type { Nullable } from \"core/types\";\r\nimport type { Scene } from \"core/scene\";\r\nimport type { SubMesh } from \"core/Meshes/subMesh\";\r\n\r\nimport { Color4 } from \"core/Maths/math.color\";\r\nimport { Constants } from \"core/Engines/constants\";\r\nimport { EffectFallbacks } from \"core/Materials/effectFallbacks\";\r\nimport { MaterialDefines } from \"core/Materials/materialDefines\";\r\nimport { MaterialHelper } from \"core/Materials/materialHelper\";\r\nimport { PushMaterial } from \"core/Materials/pushMaterial\";\r\nimport { RegisterClass } from \"core/Misc/typeStore\";\r\nimport { SerializationHelper, serialize } from \"core/Misc/decorators\";\r\nimport { VertexBuffer } from \"core/Buffers/buffer\";\r\n\r\nimport \"./shaders/mrdlBackglow.fragment\";\r\nimport \"./shaders/mrdlBackglow.vertex\";\r\n\r\n/** @hidden */\r\nclass MRDLBackglowMaterialDefines extends MaterialDefines {\r\n    constructor() {\r\n        super();\r\n        this._needNormals = true;\r\n        this._needUVs = true;\r\n        this.rebuild();\r\n    }\r\n}\r\n\r\nexport class MRDLBackglowMaterial extends PushMaterial {\r\n    /**\r\n     * Gets or sets the bevel radius on the backglow. If this value is changed, update the lineWidth to match.\r\n     */\r\n    @serialize()\r\n    public bevelRadius = 0.16;\r\n\r\n    /**\r\n     * Gets or sets the line width of the backglow.\r\n     */\r\n    @serialize()\r\n    public lineWidth = 0.16;\r\n\r\n    /**\r\n     * Gets or sets whether to use absolute sizes when calculating effects on the backglow.\r\n     * Since desktop and VR/AR have different relative sizes, it's usually best to keep this false.\r\n     */\r\n    @serialize()\r\n    public absoluteSizes = false;\r\n\r\n    /**\r\n     * Gets or sets the tuning motion of the backglow.\r\n     */\r\n    @serialize()\r\n    public tuningMotion = 0.0;\r\n\r\n    /**\r\n     * Gets or sets the motion of the backglow.\r\n     */\r\n    @serialize()\r\n    public motion = 1.0;\r\n\r\n    /**\r\n     * Gets or sets the maximum intensity of the backglow.\r\n     */\r\n    @serialize()\r\n    public maxIntensity = 0.7;\r\n\r\n    /**\r\n     * Gets or sets the fade-in exponent of the intensity of the backglow.\r\n     */\r\n    @serialize()\r\n    public intensityFadeInExponent = 2.0;\r\n\r\n    /**\r\n     * Gets or sets the start of the outer fuzz effect on the backglow.\r\n     */\r\n    @serialize()\r\n    public outerFuzzStart = 0.04;\r\n\r\n    /**\r\n     * Gets or sets the end of the outer fuzz effect on the backglow.\r\n     */\r\n    @serialize()\r\n    public outerFuzzEnd = 0.04;\r\n\r\n    /**\r\n     * Gets or sets the color of the backglow.\r\n     */\r\n    @serialize()\r\n    public color: Color4 = new Color4(0.682353, 0.698039, 1, 1);\r\n\r\n    /**\r\n     * Gets or sets the inner color of the backglow.\r\n     */\r\n    @serialize()\r\n    public innerColor: Color4 = new Color4(0.356863, 0.392157, 0.796078, 1);\r\n\r\n    /**\r\n     * Gets or sets the blend exponent of the backglow.\r\n     */\r\n    @serialize()\r\n    public blendExponent = 1.5;\r\n\r\n    /**\r\n     * Gets or sets the falloff of the backglow.\r\n     */\r\n    @serialize()\r\n    public falloff = 2.0;\r\n\r\n    /**\r\n     * Gets or sets the bias of the backglow.\r\n     */\r\n    @serialize()\r\n    public bias = 0.5;\r\n\r\n    constructor(name: string, scene: Scene) {\r\n        super(name, scene);\r\n        this.alphaMode = Constants.ALPHA_ADD;\r\n        this.disableDepthWrite = true;\r\n        this.backFaceCulling = false;\r\n    }\r\n\r\n    public needAlphaBlending(): boolean {\r\n        return true;\r\n    }\r\n\r\n    public needAlphaTesting(): boolean {\r\n        return false;\r\n    }\r\n\r\n    public getAlphaTestTexture(): Nullable<BaseTexture> {\r\n        return null;\r\n    }\r\n\r\n    // Methods\r\n    public isReadyForSubMesh(mesh: AbstractMesh, subMesh: SubMesh): boolean {\r\n        if (this.isFrozen) {\r\n            if (subMesh.effect && subMesh.effect._wasPreviouslyReady) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        if (!subMesh.materialDefines) {\r\n            subMesh.materialDefines = new MRDLBackglowMaterialDefines();\r\n        }\r\n\r\n        const defines = <MRDLBackglowMaterialDefines>subMesh.materialDefines;\r\n        const scene = this.getScene();\r\n\r\n        if (this._isReadyForSubMesh(subMesh)) {\r\n            return true;\r\n        }\r\n\r\n        const engine = scene.getEngine();\r\n\r\n        // Attribs\r\n        MaterialHelper.PrepareDefinesForAttributes(mesh, defines, false, false);\r\n\r\n        // Get correct effect\r\n        if (defines.isDirty) {\r\n            defines.markAsProcessed();\r\n\r\n            scene.resetCachedMaterial();\r\n\r\n            // Fallbacks\r\n            const fallbacks = new EffectFallbacks();\r\n            if (defines.FOG) {\r\n                fallbacks.addFallback(1, \"FOG\");\r\n            }\r\n\r\n            MaterialHelper.HandleFallbacksForShadows(defines, fallbacks);\r\n\r\n            defines.IMAGEPROCESSINGPOSTPROCESS = scene.imageProcessingConfiguration.applyByPostProcess;\r\n\r\n            //Attributes\r\n            const attribs = [VertexBuffer.PositionKind];\r\n\r\n            if (defines.NORMAL) {\r\n                attribs.push(VertexBuffer.NormalKind);\r\n            }\r\n\r\n            if (defines.UV1) {\r\n                attribs.push(VertexBuffer.UVKind);\r\n            }\r\n\r\n            if (defines.UV2) {\r\n                attribs.push(VertexBuffer.UV2Kind);\r\n            }\r\n\r\n            if (defines.VERTEXCOLOR) {\r\n                attribs.push(VertexBuffer.ColorKind);\r\n            }\r\n\r\n            if (defines.TANGENT) {\r\n                attribs.push(VertexBuffer.TangentKind);\r\n            }\r\n\r\n            MaterialHelper.PrepareAttributesForInstances(attribs, defines);\r\n\r\n            // Legacy browser patch\r\n            const shaderName = \"mrdlBackglow\";\r\n            const join = defines.toString();\r\n\r\n            const uniforms = [\r\n                \"world\",\r\n                \"worldView\",\r\n                \"worldViewProjection\",\r\n                \"view\",\r\n                \"projection\",\r\n                \"viewProjection\",\r\n                \"cameraPosition\",\r\n                \"_Bevel_Radius_\",\r\n                \"_Line_Width_\",\r\n                \"_Absolute_Sizes_\",\r\n                \"_Tuning_Motion_\",\r\n                \"_Motion_\",\r\n                \"_Max_Intensity_\",\r\n                \"_Intensity_Fade_In_Exponent_\",\r\n                \"_Outer_Fuzz_Start_\",\r\n                \"_Outer_Fuzz_End_\",\r\n                \"_Color_\",\r\n                \"_Inner_Color_\",\r\n                \"_Blend_Exponent_\",\r\n                \"_Falloff_\",\r\n                \"_Bias_\",\r\n            ];\r\n            const samplers: string[] = [];\r\n            const uniformBuffers = new Array<string>();\r\n\r\n            MaterialHelper.PrepareUniformsAndSamplersList(<IEffectCreationOptions>{\r\n                uniformsNames: uniforms,\r\n                uniformBuffersNames: uniformBuffers,\r\n                samplers: samplers,\r\n                defines: defines,\r\n                maxSimultaneousLights: 4,\r\n            });\r\n\r\n            subMesh.setEffect(\r\n                scene.getEngine().createEffect(\r\n                    shaderName,\r\n                    <IEffectCreationOptions>{\r\n                        attributes: attribs,\r\n                        uniformsNames: uniforms,\r\n                        uniformBuffersNames: uniformBuffers,\r\n                        samplers: samplers,\r\n                        defines: join,\r\n                        fallbacks: fallbacks,\r\n                        onCompiled: this.onCompiled,\r\n                        onError: this.onError,\r\n                        indexParameters: { maxSimultaneousLights: 4 },\r\n                    },\r\n                    engine\r\n                ),\r\n                defines\r\n            );\r\n        }\r\n        if (!subMesh.effect || !subMesh.effect.isReady()) {\r\n            return false;\r\n        }\r\n\r\n        defines._renderId = scene.getRenderId();\r\n        subMesh.effect._wasPreviouslyReady = true;\r\n\r\n        return true;\r\n    }\r\n\r\n    public bindForSubMesh(world: Matrix, mesh: Mesh, subMesh: SubMesh): void {\r\n        const scene = this.getScene();\r\n\r\n        const defines = <MRDLBackglowMaterialDefines>subMesh.materialDefines;\r\n        if (!defines) {\r\n            return;\r\n        }\r\n\r\n        const effect = subMesh.effect;\r\n        if (!effect) {\r\n            return;\r\n        }\r\n\r\n        this._activeEffect = effect;\r\n\r\n        // Matrices\r\n        this.bindOnlyWorldMatrix(world);\r\n        this._activeEffect.setMatrix(\"viewProjection\", scene.getTransformMatrix());\r\n        this._activeEffect.setVector3(\"cameraPosition\", scene.activeCamera!.position);\r\n\r\n        // \"Rounded Rectangle\"\r\n        this._activeEffect.setFloat(\"_Bevel_Radius_\", this.bevelRadius);\r\n        this._activeEffect.setFloat(\"_Line_Width_\", this.lineWidth);\r\n        this._activeEffect.setFloat(\"_Absolute_Sizes_\", this.absoluteSizes ? 1.0 : 0.0);\r\n\r\n        // \"Animation\"\r\n        this._activeEffect.setFloat(\"_Tuning_Motion_\", this.tuningMotion);\r\n        this._activeEffect.setFloat(\"_Motion_\", this.motion);\r\n        this._activeEffect.setFloat(\"_Max_Intensity_\", this.maxIntensity);\r\n        this._activeEffect.setFloat(\"_Intensity_Fade_In_Exponent_\", this.intensityFadeInExponent);\r\n        this._activeEffect.setFloat(\"_Outer_Fuzz_Start_\", this.outerFuzzStart);\r\n        this._activeEffect.setFloat(\"_Outer_Fuzz_End_\", this.outerFuzzEnd);\r\n\r\n        // \"Color\"\r\n        this._activeEffect.setDirectColor4(\"_Color_\", this.color);\r\n        this._activeEffect.setDirectColor4(\"_Inner_Color_\", this.innerColor);\r\n        this._activeEffect.setFloat(\"_Blend_Exponent_\", this.blendExponent);\r\n\r\n        // \"Inner Transition\"\r\n        this._activeEffect.setFloat(\"_Falloff_\", this.falloff);\r\n        this._activeEffect.setFloat(\"_Bias_\", this.bias);\r\n\r\n        this._afterBind(mesh, this._activeEffect);\r\n    }\r\n\r\n    /**\r\n     * Get the list of animatables in the material.\r\n     * @returns the list of animatables object used in the material\r\n     */\r\n    public getAnimatables(): IAnimatable[] {\r\n        return [];\r\n    }\r\n\r\n    public dispose(forceDisposeEffect?: boolean): void {\r\n        super.dispose(forceDisposeEffect);\r\n    }\r\n\r\n    public clone(name: string): MRDLBackglowMaterial {\r\n        return SerializationHelper.Clone(() => new MRDLBackglowMaterial(name, this.getScene()), this);\r\n    }\r\n\r\n    public serialize(): unknown {\r\n        const serializationObject = SerializationHelper.Serialize(this);\r\n        serializationObject.customType = \"BABYLON.MRDLBackglowMaterial\";\r\n        return serializationObject;\r\n    }\r\n\r\n    public getClassName(): string {\r\n        return \"MRDLBackglowMaterial\";\r\n    }\r\n\r\n    // Statics\r\n    public static Parse(source: any, scene: Scene, rootUrl: string): MRDLBackglowMaterial {\r\n        return SerializationHelper.Parse(() => new MRDLBackglowMaterial(source.name, scene), source, scene, rootUrl);\r\n    }\r\n}\r\n\r\nRegisterClass(\"BABYLON.GUI.MRDLBackglowMaterial\", MRDLBackglowMaterial);\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}