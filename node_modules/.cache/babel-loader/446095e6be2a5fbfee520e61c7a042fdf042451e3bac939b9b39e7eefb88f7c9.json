{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { InternalTexture, InternalTextureSource } from \"../../Materials/Textures/internalTexture.js\";\nimport { Logger } from \"../../Misc/logger.js\";\nimport { ThinEngine } from \"../thinEngine.js\";\nThinEngine.prototype.createRenderTargetCubeTexture = function (size, options) {\n  const rtWrapper = this._createHardwareRenderTargetWrapper(false, true, size);\n  const fullOptions = Object.assign({\n    generateMipMaps: true,\n    generateDepthBuffer: true,\n    generateStencilBuffer: false,\n    type: 0,\n    samplingMode: 3,\n    format: 5\n  }, options);\n  fullOptions.generateStencilBuffer = fullOptions.generateDepthBuffer && fullOptions.generateStencilBuffer;\n  if (fullOptions.type === 1 && !this._caps.textureFloatLinearFiltering) {\n    // if floating point linear (gl.FLOAT) then force to NEAREST_SAMPLINGMODE\n    fullOptions.samplingMode = 1;\n  } else if (fullOptions.type === 2 && !this._caps.textureHalfFloatLinearFiltering) {\n    // if floating point linear (HALF_FLOAT) then force to NEAREST_SAMPLINGMODE\n    fullOptions.samplingMode = 1;\n  }\n  const gl = this._gl;\n  const texture = new InternalTexture(this, InternalTextureSource.RenderTarget);\n  this._bindTextureDirectly(gl.TEXTURE_CUBE_MAP, texture, true);\n  const filters = this._getSamplingParameters(fullOptions.samplingMode, fullOptions.generateMipMaps);\n  if (fullOptions.type === 1 && !this._caps.textureFloat) {\n    fullOptions.type = 0;\n    Logger.Warn(\"Float textures are not supported. Cube render target forced to TEXTURETYPE_UNESIGNED_BYTE type\");\n  }\n  gl.texParameteri(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_MAG_FILTER, filters.mag);\n  gl.texParameteri(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_MIN_FILTER, filters.min);\n  gl.texParameteri(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n  gl.texParameteri(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n  for (let face = 0; face < 6; face++) {\n    gl.texImage2D(gl.TEXTURE_CUBE_MAP_POSITIVE_X + face, 0, this._getRGBABufferInternalSizedFormat(fullOptions.type, fullOptions.format), size, size, 0, this._getInternalFormat(fullOptions.format), this._getWebGLTextureType(fullOptions.type), null);\n  }\n  // Create the framebuffer\n  const framebuffer = gl.createFramebuffer();\n  this._bindUnboundFramebuffer(framebuffer);\n  rtWrapper._depthStencilBuffer = this._setupFramebufferDepthAttachments(fullOptions.generateStencilBuffer, fullOptions.generateDepthBuffer, size, size);\n  // MipMaps\n  if (fullOptions.generateMipMaps) {\n    gl.generateMipmap(gl.TEXTURE_CUBE_MAP);\n  }\n  // Unbind\n  this._bindTextureDirectly(gl.TEXTURE_CUBE_MAP, null);\n  this._bindUnboundFramebuffer(null);\n  rtWrapper._framebuffer = framebuffer;\n  rtWrapper._generateDepthBuffer = fullOptions.generateDepthBuffer;\n  rtWrapper._generateStencilBuffer = fullOptions.generateStencilBuffer;\n  texture.width = size;\n  texture.height = size;\n  texture.isReady = true;\n  texture.isCube = true;\n  texture.samples = 1;\n  texture.generateMipMaps = fullOptions.generateMipMaps;\n  texture.samplingMode = fullOptions.samplingMode;\n  texture.type = fullOptions.type;\n  texture.format = fullOptions.format;\n  this._internalTexturesCache.push(texture);\n  rtWrapper.setTextures(texture);\n  return rtWrapper;\n};","map":{"version":3,"names":["InternalTexture","InternalTextureSource","Logger","ThinEngine","prototype","createRenderTargetCubeTexture","size","options","rtWrapper","_createHardwareRenderTargetWrapper","fullOptions","Object","assign","generateMipMaps","generateDepthBuffer","generateStencilBuffer","type","samplingMode","format","_caps","textureFloatLinearFiltering","textureHalfFloatLinearFiltering","gl","_gl","texture","RenderTarget","_bindTextureDirectly","TEXTURE_CUBE_MAP","filters","_getSamplingParameters","textureFloat","Warn","texParameteri","TEXTURE_MAG_FILTER","mag","TEXTURE_MIN_FILTER","min","TEXTURE_WRAP_S","CLAMP_TO_EDGE","TEXTURE_WRAP_T","face","texImage2D","TEXTURE_CUBE_MAP_POSITIVE_X","_getRGBABufferInternalSizedFormat","_getInternalFormat","_getWebGLTextureType","framebuffer","createFramebuffer","_bindUnboundFramebuffer","_depthStencilBuffer","_setupFramebufferDepthAttachments","generateMipmap","_framebuffer","_generateDepthBuffer","_generateStencilBuffer","width","height","isReady","isCube","samples","_internalTexturesCache","push","setTextures"],"sources":["../../../../../dev/core/src/Engines/Extensions/engine.renderTargetCube.ts"],"sourcesContent":["import { InternalTexture, InternalTextureSource } from \"../../Materials/Textures/internalTexture\";\r\nimport { Logger } from \"../../Misc/logger\";\r\nimport { Constants } from \"../constants\";\r\nimport { ThinEngine } from \"../thinEngine\";\r\nimport type { RenderTargetWrapper } from \"../renderTargetWrapper\";\r\nimport type { WebGLRenderTargetWrapper } from \"../WebGL/webGLRenderTargetWrapper\";\r\nimport type { RenderTargetCreationOptions } from \"../../Materials/Textures/textureCreationOptions\";\r\n\r\ndeclare module \"../../Engines/thinEngine\" {\r\n    export interface ThinEngine {\r\n        /**\r\n         * Creates a new render target cube wrapper\r\n         * @param size defines the size of the texture\r\n         * @param options defines the options used to create the texture\r\n         * @returns a new render target cube wrapper\r\n         */\r\n        createRenderTargetCubeTexture(size: number, options?: RenderTargetCreationOptions): RenderTargetWrapper;\r\n    }\r\n}\r\n\r\nThinEngine.prototype.createRenderTargetCubeTexture = function (size: number, options?: RenderTargetCreationOptions): RenderTargetWrapper {\r\n    const rtWrapper = this._createHardwareRenderTargetWrapper(false, true, size) as WebGLRenderTargetWrapper;\r\n\r\n    const fullOptions = {\r\n        generateMipMaps: true,\r\n        generateDepthBuffer: true,\r\n        generateStencilBuffer: false,\r\n        type: Constants.TEXTURETYPE_UNSIGNED_INT,\r\n        samplingMode: Constants.TEXTURE_TRILINEAR_SAMPLINGMODE,\r\n        format: Constants.TEXTUREFORMAT_RGBA,\r\n        ...options,\r\n    };\r\n    fullOptions.generateStencilBuffer = fullOptions.generateDepthBuffer && fullOptions.generateStencilBuffer;\r\n\r\n    if (fullOptions.type === Constants.TEXTURETYPE_FLOAT && !this._caps.textureFloatLinearFiltering) {\r\n        // if floating point linear (gl.FLOAT) then force to NEAREST_SAMPLINGMODE\r\n        fullOptions.samplingMode = Constants.TEXTURE_NEAREST_SAMPLINGMODE;\r\n    } else if (fullOptions.type === Constants.TEXTURETYPE_HALF_FLOAT && !this._caps.textureHalfFloatLinearFiltering) {\r\n        // if floating point linear (HALF_FLOAT) then force to NEAREST_SAMPLINGMODE\r\n        fullOptions.samplingMode = Constants.TEXTURE_NEAREST_SAMPLINGMODE;\r\n    }\r\n    const gl = this._gl;\r\n\r\n    const texture = new InternalTexture(this, InternalTextureSource.RenderTarget);\r\n    this._bindTextureDirectly(gl.TEXTURE_CUBE_MAP, texture, true);\r\n\r\n    const filters = this._getSamplingParameters(fullOptions.samplingMode, fullOptions.generateMipMaps);\r\n\r\n    if (fullOptions.type === Constants.TEXTURETYPE_FLOAT && !this._caps.textureFloat) {\r\n        fullOptions.type = Constants.TEXTURETYPE_UNSIGNED_INT;\r\n        Logger.Warn(\"Float textures are not supported. Cube render target forced to TEXTURETYPE_UNESIGNED_BYTE type\");\r\n    }\r\n\r\n    gl.texParameteri(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_MAG_FILTER, filters.mag);\r\n    gl.texParameteri(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_MIN_FILTER, filters.min);\r\n    gl.texParameteri(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\r\n    gl.texParameteri(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\r\n\r\n    for (let face = 0; face < 6; face++) {\r\n        gl.texImage2D(\r\n            gl.TEXTURE_CUBE_MAP_POSITIVE_X + face,\r\n            0,\r\n            this._getRGBABufferInternalSizedFormat(fullOptions.type, fullOptions.format),\r\n            size,\r\n            size,\r\n            0,\r\n            this._getInternalFormat(fullOptions.format),\r\n            this._getWebGLTextureType(fullOptions.type),\r\n            null\r\n        );\r\n    }\r\n\r\n    // Create the framebuffer\r\n    const framebuffer = gl.createFramebuffer();\r\n    this._bindUnboundFramebuffer(framebuffer);\r\n\r\n    rtWrapper._depthStencilBuffer = this._setupFramebufferDepthAttachments(fullOptions.generateStencilBuffer, fullOptions.generateDepthBuffer, size, size);\r\n\r\n    // MipMaps\r\n    if (fullOptions.generateMipMaps) {\r\n        gl.generateMipmap(gl.TEXTURE_CUBE_MAP);\r\n    }\r\n\r\n    // Unbind\r\n    this._bindTextureDirectly(gl.TEXTURE_CUBE_MAP, null);\r\n    this._bindUnboundFramebuffer(null);\r\n\r\n    rtWrapper._framebuffer = framebuffer;\r\n    rtWrapper._generateDepthBuffer = fullOptions.generateDepthBuffer;\r\n    rtWrapper._generateStencilBuffer = fullOptions.generateStencilBuffer;\r\n\r\n    texture.width = size;\r\n    texture.height = size;\r\n    texture.isReady = true;\r\n    texture.isCube = true;\r\n    texture.samples = 1;\r\n    texture.generateMipMaps = fullOptions.generateMipMaps;\r\n    texture.samplingMode = fullOptions.samplingMode;\r\n    texture.type = fullOptions.type;\r\n    texture.format = fullOptions.format;\r\n\r\n    this._internalTexturesCache.push(texture);\r\n    rtWrapper.setTextures(texture);\r\n\r\n    return rtWrapper;\r\n};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}