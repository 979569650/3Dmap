{"ast":null,"code":"import { FlowGraphEventBlock } from \"../../flowGraphEventBlock.js\";\nimport { PointerEventTypes } from \"../../../Events/pointerEvents.js\";\nimport { RegisterClass } from \"../../../Misc/typeStore.js\";\n/**\n * @experimental\n * A block that activates when a mesh is picked.\n */\nexport class FlowGraphMeshPickEventBlock extends FlowGraphEventBlock {\n  constructor(config) {\n    super(config);\n    this.config = config;\n  }\n  configure() {\n    super.configure();\n    this._meshVariableName = this.config.meshVariableName;\n  }\n  /**\n   * @internal\n   */\n  _preparePendingTasks(context) {\n    let pickObserver = context._getExecutionVariable(this, \"meshPickObserver\");\n    if (!pickObserver) {\n      const mesh = context.getVariable(this._meshVariableName);\n      pickObserver = mesh.getScene().onPointerObservable.add(pointerInfo => {\n        var _a;\n        if (pointerInfo.type === PointerEventTypes.POINTERPICK && ((_a = pointerInfo.pickInfo) === null || _a === void 0 ? void 0 : _a.pickedMesh) === mesh) {\n          this._execute(context);\n        }\n      });\n      const disposeObserver = mesh.onDisposeObservable.add(() => this._onDispose);\n      context._setExecutionVariable(this, \"meshPickObserver\", pickObserver);\n      context._setExecutionVariable(this, \"meshDisposeObserver\", disposeObserver);\n    }\n  }\n  _onDispose(context) {\n    this._cancelPendingTasks(context);\n    context._removePendingBlock(this);\n  }\n  /**\n   * @internal\n   */\n  _cancelPendingTasks(context) {\n    const mesh = context.getVariable(this._meshVariableName);\n    const pickObserver = context._getExecutionVariable(this, \"meshPickObserver\");\n    const disposeObserver = context._getExecutionVariable(this, \"meshDisposeObserver\");\n    mesh.getScene().onPointerObservable.remove(pickObserver);\n    mesh.onDisposeObservable.remove(disposeObserver);\n    context._deleteExecutionVariable(this, \"meshPickObserver\");\n    context._deleteExecutionVariable(this, \"meshDisposeObserver\");\n  }\n  getClassName() {\n    return \"FGMeshPickEventBlock\";\n  }\n}\nRegisterClass(\"FGMeshPickEventBlock\", FlowGraphMeshPickEventBlock);","map":{"version":3,"names":["FlowGraphEventBlock","PointerEventTypes","RegisterClass","FlowGraphMeshPickEventBlock","constructor","config","configure","_meshVariableName","meshVariableName","_preparePendingTasks","context","pickObserver","_getExecutionVariable","mesh","getVariable","getScene","onPointerObservable","add","pointerInfo","type","POINTERPICK","_a","pickInfo","pickedMesh","_execute","disposeObserver","onDisposeObservable","_onDispose","_setExecutionVariable","_cancelPendingTasks","_removePendingBlock","remove","_deleteExecutionVariable","getClassName"],"sources":["../../../../../../dev/core/src/FlowGraph/Blocks/Event/flowGraphMeshPickEventBlock.ts"],"sourcesContent":["import type { AbstractMesh } from \"../../../Meshes/abstractMesh\";\r\nimport { FlowGraphEventBlock } from \"../../flowGraphEventBlock\";\r\nimport { PointerEventTypes } from \"../../../Events/pointerEvents\";\r\nimport type { FlowGraphContext } from \"core/FlowGraph/flowGraphContext\";\r\nimport type { IFlowGraphBlockConfiguration } from \"../../flowGraphBlock\";\r\nimport { RegisterClass } from \"../../../Misc/typeStore\";\r\n/**\r\n * @experimental\r\n */\r\nexport interface IFlowGraphMeshPickEventBlockConfiguration extends IFlowGraphBlockConfiguration {\r\n    meshVariableName: string;\r\n}\r\n/**\r\n * @experimental\r\n * A block that activates when a mesh is picked.\r\n */\r\nexport class FlowGraphMeshPickEventBlock extends FlowGraphEventBlock {\r\n    private _meshVariableName: string;\r\n\r\n    public constructor(public config: IFlowGraphMeshPickEventBlockConfiguration) {\r\n        super(config);\r\n    }\r\n\r\n    public configure() {\r\n        super.configure();\r\n        this._meshVariableName = this.config.meshVariableName;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _preparePendingTasks(context: FlowGraphContext): void {\r\n        let pickObserver = context._getExecutionVariable(this, \"meshPickObserver\");\r\n        if (!pickObserver) {\r\n            const mesh = context.getVariable(this._meshVariableName) as AbstractMesh;\r\n            pickObserver = mesh.getScene().onPointerObservable.add((pointerInfo) => {\r\n                if (pointerInfo.type === PointerEventTypes.POINTERPICK && pointerInfo.pickInfo?.pickedMesh === mesh) {\r\n                    this._execute(context);\r\n                }\r\n            });\r\n            const disposeObserver = mesh.onDisposeObservable.add(() => this._onDispose);\r\n            context._setExecutionVariable(this, \"meshPickObserver\", pickObserver);\r\n            context._setExecutionVariable(this, \"meshDisposeObserver\", disposeObserver);\r\n        }\r\n    }\r\n\r\n    public _onDispose(context: FlowGraphContext) {\r\n        this._cancelPendingTasks(context);\r\n        context._removePendingBlock(this);\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _cancelPendingTasks(context: FlowGraphContext): void {\r\n        const mesh = context.getVariable(this._meshVariableName) as AbstractMesh;\r\n        const pickObserver = context._getExecutionVariable(this, \"meshPickObserver\");\r\n        const disposeObserver = context._getExecutionVariable(this, \"meshDisposeObserver\");\r\n\r\n        mesh.getScene().onPointerObservable.remove(pickObserver);\r\n        mesh.onDisposeObservable.remove(disposeObserver);\r\n\r\n        context._deleteExecutionVariable(this, \"meshPickObserver\");\r\n        context._deleteExecutionVariable(this, \"meshDisposeObserver\");\r\n    }\r\n\r\n    public getClassName(): string {\r\n        return \"FGMeshPickEventBlock\";\r\n    }\r\n}\r\nRegisterClass(\"FGMeshPickEventBlock\", FlowGraphMeshPickEventBlock);\r\n"],"mappings":"AACA,SAASA,mBAAmB,QAAQ,8BAA4B;AAChE,SAASC,iBAAiB,QAAQ,kCAAgC;AAGlE,SAASC,aAAa,QAAQ,4BAA0B;AAOxD;;;;AAIA,OAAM,MAAOC,2BAA4B,SAAQH,mBAAmB;EAGhEI,YAA0BC,MAAiD;IACvE,KAAK,CAACA,MAAM,CAAC;IADS,KAAAA,MAAM,GAANA,MAAM;EAEhC;EAEOC,SAASA,CAAA;IACZ,KAAK,CAACA,SAAS,EAAE;IACjB,IAAI,CAACC,iBAAiB,GAAG,IAAI,CAACF,MAAM,CAACG,gBAAgB;EACzD;EAEA;;;EAGOC,oBAAoBA,CAACC,OAAyB;IACjD,IAAIC,YAAY,GAAGD,OAAO,CAACE,qBAAqB,CAAC,IAAI,EAAE,kBAAkB,CAAC;IAC1E,IAAI,CAACD,YAAY,EAAE;MACf,MAAME,IAAI,GAAGH,OAAO,CAACI,WAAW,CAAC,IAAI,CAACP,iBAAiB,CAAiB;MACxEI,YAAY,GAAGE,IAAI,CAACE,QAAQ,EAAE,CAACC,mBAAmB,CAACC,GAAG,CAAEC,WAAW,IAAI;;QACnE,IAAIA,WAAW,CAACC,IAAI,KAAKlB,iBAAiB,CAACmB,WAAW,IAAI,EAAAC,EAAA,GAAAH,WAAW,CAACI,QAAQ,cAAAD,EAAA,uBAAAA,EAAA,CAAEE,UAAU,MAAKV,IAAI,EAAE;UACjG,IAAI,CAACW,QAAQ,CAACd,OAAO,CAAC;;MAE9B,CAAC,CAAC;MACF,MAAMe,eAAe,GAAGZ,IAAI,CAACa,mBAAmB,CAACT,GAAG,CAAC,MAAM,IAAI,CAACU,UAAU,CAAC;MAC3EjB,OAAO,CAACkB,qBAAqB,CAAC,IAAI,EAAE,kBAAkB,EAAEjB,YAAY,CAAC;MACrED,OAAO,CAACkB,qBAAqB,CAAC,IAAI,EAAE,qBAAqB,EAAEH,eAAe,CAAC;;EAEnF;EAEOE,UAAUA,CAACjB,OAAyB;IACvC,IAAI,CAACmB,mBAAmB,CAACnB,OAAO,CAAC;IACjCA,OAAO,CAACoB,mBAAmB,CAAC,IAAI,CAAC;EACrC;EAEA;;;EAGOD,mBAAmBA,CAACnB,OAAyB;IAChD,MAAMG,IAAI,GAAGH,OAAO,CAACI,WAAW,CAAC,IAAI,CAACP,iBAAiB,CAAiB;IACxE,MAAMI,YAAY,GAAGD,OAAO,CAACE,qBAAqB,CAAC,IAAI,EAAE,kBAAkB,CAAC;IAC5E,MAAMa,eAAe,GAAGf,OAAO,CAACE,qBAAqB,CAAC,IAAI,EAAE,qBAAqB,CAAC;IAElFC,IAAI,CAACE,QAAQ,EAAE,CAACC,mBAAmB,CAACe,MAAM,CAACpB,YAAY,CAAC;IACxDE,IAAI,CAACa,mBAAmB,CAACK,MAAM,CAACN,eAAe,CAAC;IAEhDf,OAAO,CAACsB,wBAAwB,CAAC,IAAI,EAAE,kBAAkB,CAAC;IAC1DtB,OAAO,CAACsB,wBAAwB,CAAC,IAAI,EAAE,qBAAqB,CAAC;EACjE;EAEOC,YAAYA,CAAA;IACf,OAAO,sBAAsB;EACjC;;AAEJ/B,aAAa,CAAC,sBAAsB,EAAEC,2BAA2B,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}