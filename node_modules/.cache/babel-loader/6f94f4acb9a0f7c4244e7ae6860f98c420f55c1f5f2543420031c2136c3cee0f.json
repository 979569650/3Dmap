{"ast":null,"code":"import \"core-js/modules/es.typed-array.to-reversed.js\";\nimport \"core-js/modules/es.typed-array.to-sorted.js\";\nimport \"core-js/modules/es.typed-array.with.js\";\nimport { Texture } from \"../../../Materials/Textures/texture.js\";\nimport { PostProcess } from \"../../../PostProcesses/postProcess.js\";\nimport { PostProcessRenderPipeline } from \"../../../PostProcesses/RenderPipeline/postProcessRenderPipeline.js\";\nimport { PostProcessRenderEffect } from \"../../../PostProcesses/RenderPipeline/postProcessRenderEffect.js\";\nimport { RawTexture } from \"../../../Materials/Textures/rawTexture.js\";\nimport \"../../../PostProcesses/RenderPipeline/postProcessRenderPipelineManagerSceneComponent.js\";\nimport \"../../../Shaders/chromaticAberration.fragment.js\";\nimport \"../../../Shaders/lensHighlights.fragment.js\";\nimport \"../../../Shaders/depthOfField.fragment.js\";\nimport { Scalar } from \"../../../Maths/math.scalar.js\";\n/**\n * BABYLON.JS Chromatic Aberration GLSL Shader\n * Author: Olivier Guyot\n * Separates very slightly R, G and B colors on the edges of the screen\n * Inspired by Francois Tarlier & Martins Upitis\n */\nexport class LensRenderingPipeline extends PostProcessRenderPipeline {\n  /**\n   * @constructor\n   *\n   * Effect parameters are as follow:\n   * {\n   *      chromatic_aberration: number;       // from 0 to x (1 for realism)\n   *      edge_blur: number;                  // from 0 to x (1 for realism)\n   *      distortion: number;                 // from 0 to x (1 for realism), note that this will effect the pointer position precision\n   *      grain_amount: number;               // from 0 to 1\n   *      grain_texture: BABYLON.Texture;     // texture to use for grain effect; if unset, use random B&W noise\n   *      dof_focus_distance: number;         // depth-of-field: focus distance; unset to disable (disabled by default)\n   *      dof_aperture: number;               // depth-of-field: focus blur bias (default: 1)\n   *      dof_darken: number;                 // depth-of-field: darken that which is out of focus (from 0 to 1, disabled by default)\n   *      dof_pentagon: boolean;              // depth-of-field: makes a pentagon-like \"bokeh\" effect\n   *      dof_gain: number;                   // depth-of-field: highlights gain; unset to disable (disabled by default)\n   *      dof_threshold: number;              // depth-of-field: highlights threshold (default: 1)\n   *      blur_noise: boolean;                // add a little bit of noise to the blur (default: true)\n   * }\n   * Note: if an effect parameter is unset, effect is disabled\n   *\n   * @param name The rendering pipeline name\n   * @param parameters - An object containing all parameters (see above)\n   * @param scene The scene linked to this pipeline\n   * @param ratio The size of the postprocesses (0.5 means that your postprocess will have a width = canvas.width 0.5 and a height = canvas.height 0.5)\n   * @param cameras The array of cameras that the rendering pipeline will be attached to\n   */\n  constructor(name, parameters, scene, ratio = 1.0, cameras) {\n    super(scene.getEngine(), name);\n    // Lens effects can be of the following:\n    // - chromatic aberration (slight shift of RGB colors)\n    // - blur on the edge of the lens\n    // - lens distortion\n    // - depth-of-field blur & highlights enhancing\n    // - depth-of-field 'bokeh' effect (shapes appearing in blurred areas)\n    // - grain effect (noise or custom texture)\n    // Two additional texture samplers are needed:\n    // - depth map (for depth-of-field)\n    // - grain texture\n    /**\n     * @ignore\n     * The chromatic aberration PostProcess id in the pipeline\n     */\n    this.LensChromaticAberrationEffect = \"LensChromaticAberrationEffect\";\n    /**\n     * @ignore\n     * The highlights enhancing PostProcess id in the pipeline\n     */\n    this.HighlightsEnhancingEffect = \"HighlightsEnhancingEffect\";\n    /**\n     * @ignore\n     * The depth-of-field PostProcess id in the pipeline\n     */\n    this.LensDepthOfFieldEffect = \"LensDepthOfFieldEffect\";\n    this._pentagonBokehIsEnabled = false;\n    this._scene = scene;\n    // Fetch texture samplers\n    this._depthTexture = scene.enableDepthRenderer().getDepthMap(); // Force depth renderer \"on\"\n    if (parameters.grain_texture) {\n      this._grainTexture = parameters.grain_texture;\n    } else {\n      this._createGrainTexture();\n    }\n    // save parameters\n    this._edgeBlur = parameters.edge_blur ? parameters.edge_blur : 0;\n    this._grainAmount = parameters.grain_amount ? parameters.grain_amount : 0;\n    this._chromaticAberration = parameters.chromatic_aberration ? parameters.chromatic_aberration : 0;\n    this._distortion = parameters.distortion ? parameters.distortion : 0;\n    this._highlightsGain = parameters.dof_gain !== undefined ? parameters.dof_gain : -1;\n    this._highlightsThreshold = parameters.dof_threshold ? parameters.dof_threshold : 1;\n    this._dofDistance = parameters.dof_focus_distance !== undefined ? parameters.dof_focus_distance : -1;\n    this._dofAperture = parameters.dof_aperture ? parameters.dof_aperture : 1;\n    this._dofDarken = parameters.dof_darken ? parameters.dof_darken : 0;\n    this._dofPentagon = parameters.dof_pentagon !== undefined ? parameters.dof_pentagon : true;\n    this._blurNoise = parameters.blur_noise !== undefined ? parameters.blur_noise : true;\n    // Create effects\n    this._createChromaticAberrationPostProcess(ratio);\n    this._createHighlightsPostProcess(ratio);\n    this._createDepthOfFieldPostProcess(ratio / 4);\n    // Set up pipeline\n    this.addEffect(new PostProcessRenderEffect(scene.getEngine(), this.LensChromaticAberrationEffect, () => {\n      return this._chromaticAberrationPostProcess;\n    }, true));\n    this.addEffect(new PostProcessRenderEffect(scene.getEngine(), this.HighlightsEnhancingEffect, () => {\n      return this._highlightsPostProcess;\n    }, true));\n    this.addEffect(new PostProcessRenderEffect(scene.getEngine(), this.LensDepthOfFieldEffect, () => {\n      return this._depthOfFieldPostProcess;\n    }, true));\n    if (this._highlightsGain === -1) {\n      this._disableEffect(this.HighlightsEnhancingEffect, null);\n    }\n    // Finish\n    scene.postProcessRenderPipelineManager.addPipeline(this);\n    if (cameras) {\n      scene.postProcessRenderPipelineManager.attachCamerasToRenderPipeline(name, cameras);\n    }\n  }\n  /**\n   * Get the class name\n   * @returns \"LensRenderingPipeline\"\n   */\n  getClassName() {\n    return \"LensRenderingPipeline\";\n  }\n  // Properties\n  /**\n   * Gets associated scene\n   */\n  get scene() {\n    return this._scene;\n  }\n  /**\n   * Gets or sets the edge blur\n   */\n  get edgeBlur() {\n    return this._edgeBlur;\n  }\n  set edgeBlur(value) {\n    this.setEdgeBlur(value);\n  }\n  /**\n   * Gets or sets the grain amount\n   */\n  get grainAmount() {\n    return this._grainAmount;\n  }\n  set grainAmount(value) {\n    this.setGrainAmount(value);\n  }\n  /**\n   * Gets or sets the chromatic aberration amount\n   */\n  get chromaticAberration() {\n    return this._chromaticAberration;\n  }\n  set chromaticAberration(value) {\n    this.setChromaticAberration(value);\n  }\n  /**\n   * Gets or sets the depth of field aperture\n   */\n  get dofAperture() {\n    return this._dofAperture;\n  }\n  set dofAperture(value) {\n    this.setAperture(value);\n  }\n  /**\n   * Gets or sets the edge distortion\n   */\n  get edgeDistortion() {\n    return this._distortion;\n  }\n  set edgeDistortion(value) {\n    this.setEdgeDistortion(value);\n  }\n  /**\n   * Gets or sets the depth of field distortion\n   */\n  get dofDistortion() {\n    return this._dofDistance;\n  }\n  set dofDistortion(value) {\n    this.setFocusDistance(value);\n  }\n  /**\n   * Gets or sets the darken out of focus amount\n   */\n  get darkenOutOfFocus() {\n    return this._dofDarken;\n  }\n  set darkenOutOfFocus(value) {\n    this.setDarkenOutOfFocus(value);\n  }\n  /**\n   * Gets or sets a boolean indicating if blur noise is enabled\n   */\n  get blurNoise() {\n    return this._blurNoise;\n  }\n  set blurNoise(value) {\n    this._blurNoise = value;\n  }\n  /**\n   * Gets or sets a boolean indicating if pentagon bokeh is enabled\n   */\n  get pentagonBokeh() {\n    return this._pentagonBokehIsEnabled;\n  }\n  set pentagonBokeh(value) {\n    if (value) {\n      this.enablePentagonBokeh();\n    } else {\n      this.disablePentagonBokeh();\n    }\n  }\n  /**\n   * Gets or sets the highlight grain amount\n   */\n  get highlightsGain() {\n    return this._highlightsGain;\n  }\n  set highlightsGain(value) {\n    this.setHighlightsGain(value);\n  }\n  /**\n   * Gets or sets the highlight threshold\n   */\n  get highlightsThreshold() {\n    return this._highlightsThreshold;\n  }\n  set highlightsThreshold(value) {\n    this.setHighlightsThreshold(value);\n  }\n  // public methods (self explanatory)\n  /**\n   * Sets the amount of blur at the edges\n   * @param amount blur amount\n   */\n  setEdgeBlur(amount) {\n    this._edgeBlur = amount;\n  }\n  /**\n   * Sets edge blur to 0\n   */\n  disableEdgeBlur() {\n    this._edgeBlur = 0;\n  }\n  /**\n   * Sets the amount of grain\n   * @param amount Amount of grain\n   */\n  setGrainAmount(amount) {\n    this._grainAmount = amount;\n  }\n  /**\n   * Set grain amount to 0\n   */\n  disableGrain() {\n    this._grainAmount = 0;\n  }\n  /**\n   * Sets the chromatic aberration amount\n   * @param amount amount of chromatic aberration\n   */\n  setChromaticAberration(amount) {\n    this._chromaticAberration = amount;\n  }\n  /**\n   * Sets chromatic aberration amount to 0\n   */\n  disableChromaticAberration() {\n    this._chromaticAberration = 0;\n  }\n  /**\n   * Sets the EdgeDistortion amount\n   * @param amount amount of EdgeDistortion\n   */\n  setEdgeDistortion(amount) {\n    this._distortion = amount;\n  }\n  /**\n   * Sets edge distortion to 0\n   */\n  disableEdgeDistortion() {\n    this._distortion = 0;\n  }\n  /**\n   * Sets the FocusDistance amount\n   * @param amount amount of FocusDistance\n   */\n  setFocusDistance(amount) {\n    this._dofDistance = amount;\n  }\n  /**\n   * Disables depth of field\n   */\n  disableDepthOfField() {\n    this._dofDistance = -1;\n  }\n  /**\n   * Sets the Aperture amount\n   * @param amount amount of Aperture\n   */\n  setAperture(amount) {\n    this._dofAperture = amount;\n  }\n  /**\n   * Sets the DarkenOutOfFocus amount\n   * @param amount amount of DarkenOutOfFocus\n   */\n  setDarkenOutOfFocus(amount) {\n    this._dofDarken = amount;\n  }\n  /**\n   * Creates a pentagon bokeh effect\n   */\n  enablePentagonBokeh() {\n    this._highlightsPostProcess.updateEffect(\"#define PENTAGON\\n\");\n    this._pentagonBokehIsEnabled = true;\n  }\n  /**\n   * Disables the pentagon bokeh effect\n   */\n  disablePentagonBokeh() {\n    this._pentagonBokehIsEnabled = false;\n    this._highlightsPostProcess.updateEffect();\n  }\n  /**\n   * Enables noise blur\n   */\n  enableNoiseBlur() {\n    this._blurNoise = true;\n  }\n  /**\n   * Disables noise blur\n   */\n  disableNoiseBlur() {\n    this._blurNoise = false;\n  }\n  /**\n   * Sets the HighlightsGain amount\n   * @param amount amount of HighlightsGain\n   */\n  setHighlightsGain(amount) {\n    this._highlightsGain = amount;\n  }\n  /**\n   * Sets the HighlightsThreshold amount\n   * @param amount amount of HighlightsThreshold\n   */\n  setHighlightsThreshold(amount) {\n    if (this._highlightsGain === -1) {\n      this._highlightsGain = 1.0;\n    }\n    this._highlightsThreshold = amount;\n  }\n  /**\n   * Disables highlights\n   */\n  disableHighlights() {\n    this._highlightsGain = -1;\n  }\n  /**\n   * Removes the internal pipeline assets and detaches the pipeline from the scene cameras\n   * @param disableDepthRender If the scene's depth rendering should be disabled (default: false)\n   */\n  dispose(disableDepthRender = false) {\n    this._scene.postProcessRenderPipelineManager.detachCamerasFromRenderPipeline(this._name, this._scene.cameras);\n    this._chromaticAberrationPostProcess = null;\n    this._highlightsPostProcess = null;\n    this._depthOfFieldPostProcess = null;\n    this._grainTexture.dispose();\n    if (disableDepthRender) {\n      this._scene.disableDepthRenderer();\n    }\n  }\n  // colors shifting and distortion\n  _createChromaticAberrationPostProcess(ratio) {\n    this._chromaticAberrationPostProcess = new PostProcess(\"LensChromaticAberration\", \"chromaticAberration\", [\"chromatic_aberration\", \"screen_width\", \"screen_height\", \"direction\", \"radialIntensity\", \"centerPosition\"],\n    // uniforms\n    [],\n    // samplers\n    ratio, null, Texture.TRILINEAR_SAMPLINGMODE, this._scene.getEngine(), false);\n    this._chromaticAberrationPostProcess.onApply = effect => {\n      effect.setFloat(\"chromatic_aberration\", this._chromaticAberration);\n      effect.setFloat(\"screen_width\", this._scene.getEngine().getRenderWidth());\n      effect.setFloat(\"screen_height\", this._scene.getEngine().getRenderHeight());\n      effect.setFloat(\"radialIntensity\", 1);\n      effect.setFloat2(\"direction\", 17, 17);\n      effect.setFloat2(\"centerPosition\", 0.5, 0.5);\n    };\n  }\n  // highlights enhancing\n  _createHighlightsPostProcess(ratio) {\n    this._highlightsPostProcess = new PostProcess(\"LensHighlights\", \"lensHighlights\", [\"gain\", \"threshold\", \"screen_width\", \"screen_height\"],\n    // uniforms\n    [],\n    // samplers\n    ratio, null, Texture.TRILINEAR_SAMPLINGMODE, this._scene.getEngine(), false, this._dofPentagon ? \"#define PENTAGON\\n\" : \"\");\n    this._highlightsPostProcess.externalTextureSamplerBinding = true;\n    this._highlightsPostProcess.onApply = effect => {\n      effect.setFloat(\"gain\", this._highlightsGain);\n      effect.setFloat(\"threshold\", this._highlightsThreshold);\n      effect.setTextureFromPostProcess(\"textureSampler\", this._chromaticAberrationPostProcess);\n      effect.setFloat(\"screen_width\", this._scene.getEngine().getRenderWidth());\n      effect.setFloat(\"screen_height\", this._scene.getEngine().getRenderHeight());\n    };\n  }\n  // colors shifting and distortion\n  _createDepthOfFieldPostProcess(ratio) {\n    this._depthOfFieldPostProcess = new PostProcess(\"LensDepthOfField\", \"depthOfField\", [\"grain_amount\", \"blur_noise\", \"screen_width\", \"screen_height\", \"distortion\", \"dof_enabled\", \"screen_distance\", \"aperture\", \"darken\", \"edge_blur\", \"highlights\", \"near\", \"far\"], [\"depthSampler\", \"grainSampler\", \"highlightsSampler\"], ratio, null, Texture.TRILINEAR_SAMPLINGMODE, this._scene.getEngine(), false);\n    this._depthOfFieldPostProcess.externalTextureSamplerBinding = true;\n    this._depthOfFieldPostProcess.onApply = effect => {\n      effect.setTexture(\"depthSampler\", this._depthTexture);\n      effect.setTexture(\"grainSampler\", this._grainTexture);\n      effect.setTextureFromPostProcess(\"textureSampler\", this._highlightsPostProcess);\n      effect.setTextureFromPostProcess(\"highlightsSampler\", this._depthOfFieldPostProcess);\n      effect.setFloat(\"grain_amount\", this._grainAmount);\n      effect.setBool(\"blur_noise\", this._blurNoise);\n      effect.setFloat(\"screen_width\", this._scene.getEngine().getRenderWidth());\n      effect.setFloat(\"screen_height\", this._scene.getEngine().getRenderHeight());\n      effect.setFloat(\"distortion\", this._distortion);\n      effect.setBool(\"dof_enabled\", this._dofDistance !== -1);\n      effect.setFloat(\"screen_distance\", 1.0 / (0.1 - 1.0 / this._dofDistance));\n      effect.setFloat(\"aperture\", this._dofAperture);\n      effect.setFloat(\"darken\", this._dofDarken);\n      effect.setFloat(\"edge_blur\", this._edgeBlur);\n      effect.setBool(\"highlights\", this._highlightsGain !== -1);\n      if (this._scene.activeCamera) {\n        effect.setFloat(\"near\", this._scene.activeCamera.minZ);\n        effect.setFloat(\"far\", this._scene.activeCamera.maxZ);\n      }\n    };\n  }\n  // creates a black and white random noise texture, 512x512\n  _createGrainTexture() {\n    const size = 512;\n    const data = new Uint8Array(size * size * 4);\n    for (let index = 0; index < data.length;) {\n      const value = Math.floor(Scalar.RandomRange(0.42, 0.58) * 255);\n      data[index++] = value;\n      data[index++] = value;\n      data[index++] = value;\n      data[index++] = 255;\n    }\n    const texture = RawTexture.CreateRGBATexture(data, size, size, this._scene, false, false, 2);\n    texture.name = \"LensNoiseTexture\";\n    texture.wrapU = Texture.WRAP_ADDRESSMODE;\n    texture.wrapV = Texture.WRAP_ADDRESSMODE;\n    this._grainTexture = texture;\n  }\n}","map":{"version":3,"names":["Texture","PostProcess","PostProcessRenderPipeline","PostProcessRenderEffect","RawTexture","Scalar","LensRenderingPipeline","constructor","name","parameters","scene","ratio","cameras","getEngine","LensChromaticAberrationEffect","HighlightsEnhancingEffect","LensDepthOfFieldEffect","_pentagonBokehIsEnabled","_scene","_depthTexture","enableDepthRenderer","getDepthMap","grain_texture","_grainTexture","_createGrainTexture","_edgeBlur","edge_blur","_grainAmount","grain_amount","_chromaticAberration","chromatic_aberration","_distortion","distortion","_highlightsGain","dof_gain","undefined","_highlightsThreshold","dof_threshold","_dofDistance","dof_focus_distance","_dofAperture","dof_aperture","_dofDarken","dof_darken","_dofPentagon","dof_pentagon","_blurNoise","blur_noise","_createChromaticAberrationPostProcess","_createHighlightsPostProcess","_createDepthOfFieldPostProcess","addEffect","_chromaticAberrationPostProcess","_highlightsPostProcess","_depthOfFieldPostProcess","_disableEffect","postProcessRenderPipelineManager","addPipeline","attachCamerasToRenderPipeline","getClassName","edgeBlur","value","setEdgeBlur","grainAmount","setGrainAmount","chromaticAberration","setChromaticAberration","dofAperture","setAperture","edgeDistortion","setEdgeDistortion","dofDistortion","setFocusDistance","darkenOutOfFocus","setDarkenOutOfFocus","blurNoise","pentagonBokeh","enablePentagonBokeh","disablePentagonBokeh","highlightsGain","setHighlightsGain","highlightsThreshold","setHighlightsThreshold","amount","disableEdgeBlur","disableGrain","disableChromaticAberration","disableEdgeDistortion","disableDepthOfField","updateEffect","enableNoiseBlur","disableNoiseBlur","disableHighlights","dispose","disableDepthRender","detachCamerasFromRenderPipeline","_name","disableDepthRenderer","TRILINEAR_SAMPLINGMODE","onApply","effect","setFloat","getRenderWidth","getRenderHeight","setFloat2","externalTextureSamplerBinding","setTextureFromPostProcess","setTexture","setBool","activeCamera","minZ","maxZ","size","data","Uint8Array","index","length","Math","floor","RandomRange","texture","CreateRGBATexture","wrapU","WRAP_ADDRESSMODE","wrapV"],"sources":["../../../../../../dev/core/src/PostProcesses/RenderPipeline/Pipelines/lensRenderingPipeline.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/naming-convention */\r\nimport type { Camera } from \"../../../Cameras/camera\";\r\nimport type { Effect } from \"../../../Materials/effect\";\r\nimport { Texture } from \"../../../Materials/Textures/texture\";\r\nimport type { RenderTargetTexture } from \"../../../Materials/Textures/renderTargetTexture\";\r\nimport { PostProcess } from \"../../../PostProcesses/postProcess\";\r\nimport { PostProcessRenderPipeline } from \"../../../PostProcesses/RenderPipeline/postProcessRenderPipeline\";\r\nimport { PostProcessRenderEffect } from \"../../../PostProcesses/RenderPipeline/postProcessRenderEffect\";\r\nimport type { Scene } from \"../../../scene\";\r\nimport { RawTexture } from \"../../../Materials/Textures/rawTexture\";\r\nimport { Constants } from \"../../../Engines/constants\";\r\n\r\nimport \"../../../PostProcesses/RenderPipeline/postProcessRenderPipelineManagerSceneComponent\";\r\n\r\nimport \"../../../Shaders/chromaticAberration.fragment\";\r\nimport \"../../../Shaders/lensHighlights.fragment\";\r\nimport \"../../../Shaders/depthOfField.fragment\";\r\nimport { Scalar } from \"../../../Maths/math.scalar\";\r\n\r\n/**\r\n * BABYLON.JS Chromatic Aberration GLSL Shader\r\n * Author: Olivier Guyot\r\n * Separates very slightly R, G and B colors on the edges of the screen\r\n * Inspired by Francois Tarlier & Martins Upitis\r\n */\r\nexport class LensRenderingPipeline extends PostProcessRenderPipeline {\r\n    // Lens effects can be of the following:\r\n    // - chromatic aberration (slight shift of RGB colors)\r\n    // - blur on the edge of the lens\r\n    // - lens distortion\r\n    // - depth-of-field blur & highlights enhancing\r\n    // - depth-of-field 'bokeh' effect (shapes appearing in blurred areas)\r\n    // - grain effect (noise or custom texture)\r\n\r\n    // Two additional texture samplers are needed:\r\n    // - depth map (for depth-of-field)\r\n    // - grain texture\r\n\r\n    /**\r\n     * @ignore\r\n     * The chromatic aberration PostProcess id in the pipeline\r\n     */\r\n    public LensChromaticAberrationEffect: string = \"LensChromaticAberrationEffect\";\r\n    /**\r\n     * @ignore\r\n     * The highlights enhancing PostProcess id in the pipeline\r\n     */\r\n    public HighlightsEnhancingEffect: string = \"HighlightsEnhancingEffect\";\r\n    /**\r\n     * @ignore\r\n     * The depth-of-field PostProcess id in the pipeline\r\n     */\r\n    public LensDepthOfFieldEffect: string = \"LensDepthOfFieldEffect\";\r\n\r\n    private _scene: Scene;\r\n    private _depthTexture: RenderTargetTexture;\r\n    private _grainTexture: Texture;\r\n\r\n    private _chromaticAberrationPostProcess: PostProcess;\r\n    private _highlightsPostProcess: PostProcess;\r\n    private _depthOfFieldPostProcess: PostProcess;\r\n\r\n    private _edgeBlur: number;\r\n    private _grainAmount: number;\r\n    private _chromaticAberration: number;\r\n    private _distortion: number;\r\n    private _highlightsGain: number;\r\n    private _highlightsThreshold: number;\r\n    private _dofDistance: number;\r\n    private _dofAperture: number;\r\n    private _dofDarken: number;\r\n    private _dofPentagon: boolean;\r\n    private _blurNoise: boolean;\r\n\r\n    /**\r\n     * @constructor\r\n     *\r\n     * Effect parameters are as follow:\r\n     * {\r\n     *      chromatic_aberration: number;       // from 0 to x (1 for realism)\r\n     *      edge_blur: number;                  // from 0 to x (1 for realism)\r\n     *      distortion: number;                 // from 0 to x (1 for realism), note that this will effect the pointer position precision\r\n     *      grain_amount: number;               // from 0 to 1\r\n     *      grain_texture: BABYLON.Texture;     // texture to use for grain effect; if unset, use random B&W noise\r\n     *      dof_focus_distance: number;         // depth-of-field: focus distance; unset to disable (disabled by default)\r\n     *      dof_aperture: number;               // depth-of-field: focus blur bias (default: 1)\r\n     *      dof_darken: number;                 // depth-of-field: darken that which is out of focus (from 0 to 1, disabled by default)\r\n     *      dof_pentagon: boolean;              // depth-of-field: makes a pentagon-like \"bokeh\" effect\r\n     *      dof_gain: number;                   // depth-of-field: highlights gain; unset to disable (disabled by default)\r\n     *      dof_threshold: number;              // depth-of-field: highlights threshold (default: 1)\r\n     *      blur_noise: boolean;                // add a little bit of noise to the blur (default: true)\r\n     * }\r\n     * Note: if an effect parameter is unset, effect is disabled\r\n     *\r\n     * @param name The rendering pipeline name\r\n     * @param parameters - An object containing all parameters (see above)\r\n     * @param scene The scene linked to this pipeline\r\n     * @param ratio The size of the postprocesses (0.5 means that your postprocess will have a width = canvas.width 0.5 and a height = canvas.height 0.5)\r\n     * @param cameras The array of cameras that the rendering pipeline will be attached to\r\n     */\r\n    constructor(name: string, parameters: any, scene: Scene, ratio: number = 1.0, cameras?: Camera[]) {\r\n        super(scene.getEngine(), name);\r\n\r\n        this._scene = scene;\r\n\r\n        // Fetch texture samplers\r\n        this._depthTexture = scene.enableDepthRenderer().getDepthMap(); // Force depth renderer \"on\"\r\n        if (parameters.grain_texture) {\r\n            this._grainTexture = parameters.grain_texture;\r\n        } else {\r\n            this._createGrainTexture();\r\n        }\r\n\r\n        // save parameters\r\n        this._edgeBlur = parameters.edge_blur ? parameters.edge_blur : 0;\r\n        this._grainAmount = parameters.grain_amount ? parameters.grain_amount : 0;\r\n        this._chromaticAberration = parameters.chromatic_aberration ? parameters.chromatic_aberration : 0;\r\n        this._distortion = parameters.distortion ? parameters.distortion : 0;\r\n        this._highlightsGain = parameters.dof_gain !== undefined ? parameters.dof_gain : -1;\r\n        this._highlightsThreshold = parameters.dof_threshold ? parameters.dof_threshold : 1;\r\n        this._dofDistance = parameters.dof_focus_distance !== undefined ? parameters.dof_focus_distance : -1;\r\n        this._dofAperture = parameters.dof_aperture ? parameters.dof_aperture : 1;\r\n        this._dofDarken = parameters.dof_darken ? parameters.dof_darken : 0;\r\n        this._dofPentagon = parameters.dof_pentagon !== undefined ? parameters.dof_pentagon : true;\r\n        this._blurNoise = parameters.blur_noise !== undefined ? parameters.blur_noise : true;\r\n\r\n        // Create effects\r\n        this._createChromaticAberrationPostProcess(ratio);\r\n        this._createHighlightsPostProcess(ratio);\r\n        this._createDepthOfFieldPostProcess(ratio / 4);\r\n\r\n        // Set up pipeline\r\n        this.addEffect(\r\n            new PostProcessRenderEffect(\r\n                scene.getEngine(),\r\n                this.LensChromaticAberrationEffect,\r\n                () => {\r\n                    return this._chromaticAberrationPostProcess;\r\n                },\r\n                true\r\n            )\r\n        );\r\n        this.addEffect(\r\n            new PostProcessRenderEffect(\r\n                scene.getEngine(),\r\n                this.HighlightsEnhancingEffect,\r\n                () => {\r\n                    return this._highlightsPostProcess;\r\n                },\r\n                true\r\n            )\r\n        );\r\n        this.addEffect(\r\n            new PostProcessRenderEffect(\r\n                scene.getEngine(),\r\n                this.LensDepthOfFieldEffect,\r\n                () => {\r\n                    return this._depthOfFieldPostProcess;\r\n                },\r\n                true\r\n            )\r\n        );\r\n\r\n        if (this._highlightsGain === -1) {\r\n            this._disableEffect(this.HighlightsEnhancingEffect, null);\r\n        }\r\n\r\n        // Finish\r\n        scene.postProcessRenderPipelineManager.addPipeline(this);\r\n        if (cameras) {\r\n            scene.postProcessRenderPipelineManager.attachCamerasToRenderPipeline(name, cameras);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Get the class name\r\n     * @returns \"LensRenderingPipeline\"\r\n     */\r\n    public getClassName(): string {\r\n        return \"LensRenderingPipeline\";\r\n    }\r\n\r\n    // Properties\r\n\r\n    /**\r\n     * Gets associated scene\r\n     */\r\n    public get scene(): Scene {\r\n        return this._scene;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the edge blur\r\n     */\r\n    public get edgeBlur(): number {\r\n        return this._edgeBlur;\r\n    }\r\n\r\n    public set edgeBlur(value: number) {\r\n        this.setEdgeBlur(value);\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the grain amount\r\n     */\r\n    public get grainAmount(): number {\r\n        return this._grainAmount;\r\n    }\r\n\r\n    public set grainAmount(value: number) {\r\n        this.setGrainAmount(value);\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the chromatic aberration amount\r\n     */\r\n    public get chromaticAberration(): number {\r\n        return this._chromaticAberration;\r\n    }\r\n\r\n    public set chromaticAberration(value: number) {\r\n        this.setChromaticAberration(value);\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the depth of field aperture\r\n     */\r\n    public get dofAperture(): number {\r\n        return this._dofAperture;\r\n    }\r\n\r\n    public set dofAperture(value: number) {\r\n        this.setAperture(value);\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the edge distortion\r\n     */\r\n    public get edgeDistortion(): number {\r\n        return this._distortion;\r\n    }\r\n\r\n    public set edgeDistortion(value: number) {\r\n        this.setEdgeDistortion(value);\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the depth of field distortion\r\n     */\r\n    public get dofDistortion(): number {\r\n        return this._dofDistance;\r\n    }\r\n\r\n    public set dofDistortion(value: number) {\r\n        this.setFocusDistance(value);\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the darken out of focus amount\r\n     */\r\n    public get darkenOutOfFocus(): number {\r\n        return this._dofDarken;\r\n    }\r\n\r\n    public set darkenOutOfFocus(value: number) {\r\n        this.setDarkenOutOfFocus(value);\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if blur noise is enabled\r\n     */\r\n    public get blurNoise(): boolean {\r\n        return this._blurNoise;\r\n    }\r\n\r\n    public set blurNoise(value: boolean) {\r\n        this._blurNoise = value;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if pentagon bokeh is enabled\r\n     */\r\n    public get pentagonBokeh(): boolean {\r\n        return this._pentagonBokehIsEnabled;\r\n    }\r\n\r\n    public set pentagonBokeh(value: boolean) {\r\n        if (value) {\r\n            this.enablePentagonBokeh();\r\n        } else {\r\n            this.disablePentagonBokeh();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the highlight grain amount\r\n     */\r\n    public get highlightsGain(): number {\r\n        return this._highlightsGain;\r\n    }\r\n\r\n    public set highlightsGain(value: number) {\r\n        this.setHighlightsGain(value);\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the highlight threshold\r\n     */\r\n    public get highlightsThreshold(): number {\r\n        return this._highlightsThreshold;\r\n    }\r\n\r\n    public set highlightsThreshold(value: number) {\r\n        this.setHighlightsThreshold(value);\r\n    }\r\n\r\n    // public methods (self explanatory)\r\n    /**\r\n     * Sets the amount of blur at the edges\r\n     * @param amount blur amount\r\n     */\r\n    public setEdgeBlur(amount: number) {\r\n        this._edgeBlur = amount;\r\n    }\r\n    /**\r\n     * Sets edge blur to 0\r\n     */\r\n    public disableEdgeBlur() {\r\n        this._edgeBlur = 0;\r\n    }\r\n    /**\r\n     * Sets the amount of grain\r\n     * @param amount Amount of grain\r\n     */\r\n    public setGrainAmount(amount: number) {\r\n        this._grainAmount = amount;\r\n    }\r\n    /**\r\n     * Set grain amount to 0\r\n     */\r\n    public disableGrain() {\r\n        this._grainAmount = 0;\r\n    }\r\n    /**\r\n     * Sets the chromatic aberration amount\r\n     * @param amount amount of chromatic aberration\r\n     */\r\n    public setChromaticAberration(amount: number) {\r\n        this._chromaticAberration = amount;\r\n    }\r\n    /**\r\n     * Sets chromatic aberration amount to 0\r\n     */\r\n    public disableChromaticAberration() {\r\n        this._chromaticAberration = 0;\r\n    }\r\n    /**\r\n     * Sets the EdgeDistortion amount\r\n     * @param amount amount of EdgeDistortion\r\n     */\r\n    public setEdgeDistortion(amount: number) {\r\n        this._distortion = amount;\r\n    }\r\n    /**\r\n     * Sets edge distortion to 0\r\n     */\r\n    public disableEdgeDistortion() {\r\n        this._distortion = 0;\r\n    }\r\n    /**\r\n     * Sets the FocusDistance amount\r\n     * @param amount amount of FocusDistance\r\n     */\r\n    public setFocusDistance(amount: number) {\r\n        this._dofDistance = amount;\r\n    }\r\n    /**\r\n     * Disables depth of field\r\n     */\r\n    public disableDepthOfField() {\r\n        this._dofDistance = -1;\r\n    }\r\n    /**\r\n     * Sets the Aperture amount\r\n     * @param amount amount of Aperture\r\n     */\r\n    public setAperture(amount: number) {\r\n        this._dofAperture = amount;\r\n    }\r\n    /**\r\n     * Sets the DarkenOutOfFocus amount\r\n     * @param amount amount of DarkenOutOfFocus\r\n     */\r\n    public setDarkenOutOfFocus(amount: number) {\r\n        this._dofDarken = amount;\r\n    }\r\n\r\n    private _pentagonBokehIsEnabled = false;\r\n    /**\r\n     * Creates a pentagon bokeh effect\r\n     */\r\n    public enablePentagonBokeh() {\r\n        this._highlightsPostProcess.updateEffect(\"#define PENTAGON\\n\");\r\n        this._pentagonBokehIsEnabled = true;\r\n    }\r\n    /**\r\n     * Disables the pentagon bokeh effect\r\n     */\r\n    public disablePentagonBokeh() {\r\n        this._pentagonBokehIsEnabled = false;\r\n        this._highlightsPostProcess.updateEffect();\r\n    }\r\n    /**\r\n     * Enables noise blur\r\n     */\r\n    public enableNoiseBlur() {\r\n        this._blurNoise = true;\r\n    }\r\n    /**\r\n     * Disables noise blur\r\n     */\r\n    public disableNoiseBlur() {\r\n        this._blurNoise = false;\r\n    }\r\n    /**\r\n     * Sets the HighlightsGain amount\r\n     * @param amount amount of HighlightsGain\r\n     */\r\n    public setHighlightsGain(amount: number) {\r\n        this._highlightsGain = amount;\r\n    }\r\n    /**\r\n     * Sets the HighlightsThreshold amount\r\n     * @param amount amount of HighlightsThreshold\r\n     */\r\n    public setHighlightsThreshold(amount: number) {\r\n        if (this._highlightsGain === -1) {\r\n            this._highlightsGain = 1.0;\r\n        }\r\n        this._highlightsThreshold = amount;\r\n    }\r\n    /**\r\n     * Disables highlights\r\n     */\r\n    public disableHighlights() {\r\n        this._highlightsGain = -1;\r\n    }\r\n\r\n    /**\r\n     * Removes the internal pipeline assets and detaches the pipeline from the scene cameras\r\n     * @param disableDepthRender If the scene's depth rendering should be disabled (default: false)\r\n     */\r\n    public dispose(disableDepthRender: boolean = false): void {\r\n        this._scene.postProcessRenderPipelineManager.detachCamerasFromRenderPipeline(this._name, this._scene.cameras);\r\n\r\n        (<any>this._chromaticAberrationPostProcess) = null;\r\n        (<any>this._highlightsPostProcess) = null;\r\n        (<any>this._depthOfFieldPostProcess) = null;\r\n\r\n        this._grainTexture.dispose();\r\n\r\n        if (disableDepthRender) {\r\n            this._scene.disableDepthRenderer();\r\n        }\r\n    }\r\n\r\n    // colors shifting and distortion\r\n    private _createChromaticAberrationPostProcess(ratio: number): void {\r\n        this._chromaticAberrationPostProcess = new PostProcess(\r\n            \"LensChromaticAberration\",\r\n            \"chromaticAberration\",\r\n            [\"chromatic_aberration\", \"screen_width\", \"screen_height\", \"direction\", \"radialIntensity\", \"centerPosition\"], // uniforms\r\n            [], // samplers\r\n            ratio,\r\n            null,\r\n            Texture.TRILINEAR_SAMPLINGMODE,\r\n            this._scene.getEngine(),\r\n            false\r\n        );\r\n\r\n        this._chromaticAberrationPostProcess.onApply = (effect: Effect) => {\r\n            effect.setFloat(\"chromatic_aberration\", this._chromaticAberration);\r\n            effect.setFloat(\"screen_width\", this._scene.getEngine().getRenderWidth());\r\n            effect.setFloat(\"screen_height\", this._scene.getEngine().getRenderHeight());\r\n            effect.setFloat(\"radialIntensity\", 1);\r\n            effect.setFloat2(\"direction\", 17, 17);\r\n            effect.setFloat2(\"centerPosition\", 0.5, 0.5);\r\n        };\r\n    }\r\n\r\n    // highlights enhancing\r\n    private _createHighlightsPostProcess(ratio: number): void {\r\n        this._highlightsPostProcess = new PostProcess(\r\n            \"LensHighlights\",\r\n            \"lensHighlights\",\r\n            [\"gain\", \"threshold\", \"screen_width\", \"screen_height\"], // uniforms\r\n            [], // samplers\r\n            ratio,\r\n            null,\r\n            Texture.TRILINEAR_SAMPLINGMODE,\r\n            this._scene.getEngine(),\r\n            false,\r\n            this._dofPentagon ? \"#define PENTAGON\\n\" : \"\"\r\n        );\r\n\r\n        this._highlightsPostProcess.externalTextureSamplerBinding = true;\r\n        this._highlightsPostProcess.onApply = (effect: Effect) => {\r\n            effect.setFloat(\"gain\", this._highlightsGain);\r\n            effect.setFloat(\"threshold\", this._highlightsThreshold);\r\n            effect.setTextureFromPostProcess(\"textureSampler\", this._chromaticAberrationPostProcess);\r\n            effect.setFloat(\"screen_width\", this._scene.getEngine().getRenderWidth());\r\n            effect.setFloat(\"screen_height\", this._scene.getEngine().getRenderHeight());\r\n        };\r\n    }\r\n\r\n    // colors shifting and distortion\r\n    private _createDepthOfFieldPostProcess(ratio: number): void {\r\n        this._depthOfFieldPostProcess = new PostProcess(\r\n            \"LensDepthOfField\",\r\n            \"depthOfField\",\r\n            [\r\n                \"grain_amount\",\r\n                \"blur_noise\",\r\n                \"screen_width\",\r\n                \"screen_height\",\r\n                \"distortion\",\r\n                \"dof_enabled\",\r\n                \"screen_distance\",\r\n                \"aperture\",\r\n                \"darken\",\r\n                \"edge_blur\",\r\n                \"highlights\",\r\n                \"near\",\r\n                \"far\",\r\n            ],\r\n            [\"depthSampler\", \"grainSampler\", \"highlightsSampler\"],\r\n            ratio,\r\n            null,\r\n            Texture.TRILINEAR_SAMPLINGMODE,\r\n            this._scene.getEngine(),\r\n            false\r\n        );\r\n\r\n        this._depthOfFieldPostProcess.externalTextureSamplerBinding = true;\r\n        this._depthOfFieldPostProcess.onApply = (effect: Effect) => {\r\n            effect.setTexture(\"depthSampler\", this._depthTexture);\r\n            effect.setTexture(\"grainSampler\", this._grainTexture);\r\n            effect.setTextureFromPostProcess(\"textureSampler\", this._highlightsPostProcess);\r\n            effect.setTextureFromPostProcess(\"highlightsSampler\", this._depthOfFieldPostProcess);\r\n\r\n            effect.setFloat(\"grain_amount\", this._grainAmount);\r\n            effect.setBool(\"blur_noise\", this._blurNoise);\r\n\r\n            effect.setFloat(\"screen_width\", this._scene.getEngine().getRenderWidth());\r\n            effect.setFloat(\"screen_height\", this._scene.getEngine().getRenderHeight());\r\n\r\n            effect.setFloat(\"distortion\", this._distortion);\r\n\r\n            effect.setBool(\"dof_enabled\", this._dofDistance !== -1);\r\n            effect.setFloat(\"screen_distance\", 1.0 / (0.1 - 1.0 / this._dofDistance));\r\n            effect.setFloat(\"aperture\", this._dofAperture);\r\n            effect.setFloat(\"darken\", this._dofDarken);\r\n\r\n            effect.setFloat(\"edge_blur\", this._edgeBlur);\r\n\r\n            effect.setBool(\"highlights\", this._highlightsGain !== -1);\r\n\r\n            if (this._scene.activeCamera) {\r\n                effect.setFloat(\"near\", this._scene.activeCamera.minZ);\r\n                effect.setFloat(\"far\", this._scene.activeCamera.maxZ);\r\n            }\r\n        };\r\n    }\r\n\r\n    // creates a black and white random noise texture, 512x512\r\n    private _createGrainTexture(): void {\r\n        const size = 512;\r\n\r\n        const data = new Uint8Array(size * size * 4);\r\n        for (let index = 0; index < data.length; ) {\r\n            const value = Math.floor(Scalar.RandomRange(0.42, 0.58) * 255);\r\n            data[index++] = value;\r\n            data[index++] = value;\r\n            data[index++] = value;\r\n            data[index++] = 255;\r\n        }\r\n\r\n        const texture = RawTexture.CreateRGBATexture(data, size, size, this._scene, false, false, Constants.TEXTURE_BILINEAR_SAMPLINGMODE);\r\n        texture.name = \"LensNoiseTexture\";\r\n        texture.wrapU = Texture.WRAP_ADDRESSMODE;\r\n        texture.wrapV = Texture.WRAP_ADDRESSMODE;\r\n        this._grainTexture = texture;\r\n    }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}