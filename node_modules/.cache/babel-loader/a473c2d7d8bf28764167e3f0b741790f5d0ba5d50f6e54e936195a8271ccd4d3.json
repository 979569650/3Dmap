{"ast":null,"code":"import { Vector3 } from \"@babylonjs/core/Maths/math.vector.js\";\nimport { Epsilon } from \"@babylonjs/core/Maths/math.constants.js\";\nimport { ValueAndUnit } from \"./valueAndUnit.js\";\n/**\n * Class used to store a point for a MultiLine object.\n * The point can be pure 2D coordinates, a mesh or a control\n */\nexport class MultiLinePoint {\n  /**\n   * Creates a new MultiLinePoint\n   * @param multiLine defines the source MultiLine object\n   */\n  constructor(multiLine) {\n    this._multiLine = multiLine;\n    this._x = new ValueAndUnit(0);\n    this._y = new ValueAndUnit(0);\n    this._point = new Vector3(0, 0, 0);\n  }\n  /** Gets or sets x coordinate */\n  get x() {\n    return this._x.toString(this._multiLine._host);\n  }\n  set x(value) {\n    if (this._x.toString(this._multiLine._host) === value) {\n      return;\n    }\n    if (this._x.fromString(value)) {\n      this._multiLine._markAsDirty();\n    }\n  }\n  /** Gets or sets y coordinate */\n  get y() {\n    return this._y.toString(this._multiLine._host);\n  }\n  set y(value) {\n    if (this._y.toString(this._multiLine._host) === value) {\n      return;\n    }\n    if (this._y.fromString(value)) {\n      this._multiLine._markAsDirty();\n    }\n  }\n  /** Gets or sets the control associated with this point */\n  get control() {\n    return this._control;\n  }\n  set control(value) {\n    if (this._control === value) {\n      return;\n    }\n    if (this._control && this._controlObserver) {\n      this._control.onDirtyObservable.remove(this._controlObserver);\n      this._controlObserver = null;\n    }\n    this._control = value;\n    if (this._control) {\n      this._controlObserver = this._control.onDirtyObservable.add(this._multiLine.onPointUpdate);\n    }\n    this._multiLine._markAsDirty();\n  }\n  /** Gets or sets the mesh associated with this point */\n  get mesh() {\n    return this._mesh;\n  }\n  set mesh(value) {\n    if (this._mesh === value) {\n      return;\n    }\n    if (this._mesh && this._meshObserver) {\n      this._mesh.getScene().onAfterCameraRenderObservable.remove(this._meshObserver);\n    }\n    this._mesh = value;\n    if (this._mesh) {\n      this._meshObserver = this._mesh.getScene().onAfterCameraRenderObservable.add(this._multiLine.onPointUpdate);\n    }\n    this._multiLine._markAsDirty();\n  }\n  /** Resets links */\n  resetLinks() {\n    this.control = null;\n    this.mesh = null;\n  }\n  /**\n   * Gets a translation vector with Z component\n   * @returns the translation vector\n   */\n  translate() {\n    this._point = this._translatePoint();\n    return this._point;\n  }\n  _translatePoint() {\n    if (this._mesh != null) {\n      return this._multiLine._host.getProjectedPositionWithZ(this._mesh.getBoundingInfo().boundingSphere.center, this._mesh.getWorldMatrix());\n    } else if (this._control != null) {\n      return new Vector3(this._control.centerX, this._control.centerY, 1 - Epsilon);\n    } else {\n      const host = this._multiLine._host;\n      const xValue = this._x.getValueInPixel(host, Number(host._canvas.width));\n      const yValue = this._y.getValueInPixel(host, Number(host._canvas.height));\n      return new Vector3(xValue, yValue, 1 - Epsilon);\n    }\n  }\n  /** Release associated resources */\n  dispose() {\n    this.resetLinks();\n  }\n}","map":{"version":3,"names":["Vector3","Epsilon","ValueAndUnit","MultiLinePoint","constructor","multiLine","_multiLine","_x","_y","_point","x","toString","_host","value","fromString","_markAsDirty","y","control","_control","_controlObserver","onDirtyObservable","remove","add","onPointUpdate","mesh","_mesh","_meshObserver","getScene","onAfterCameraRenderObservable","resetLinks","translate","_translatePoint","getProjectedPositionWithZ","getBoundingInfo","boundingSphere","center","getWorldMatrix","centerX","centerY","host","xValue","getValueInPixel","Number","_canvas","width","yValue","height","dispose"],"sources":["../../../../dev/gui/src/2D/multiLinePoint.ts"],"sourcesContent":["import type { Nullable } from \"core/types\";\r\nimport type { Observer } from \"core/Misc/observable\";\r\nimport { Vector3 } from \"core/Maths/math.vector\";\r\nimport { Epsilon } from \"core/Maths/math.constants\";\r\nimport type { Camera } from \"core/Cameras/camera\";\r\nimport type { AbstractMesh } from \"core/Meshes/abstractMesh\";\r\n\r\nimport type { MultiLine } from \"./controls/multiLine\";\r\nimport { ValueAndUnit } from \"./valueAndUnit\";\r\nimport type { Control } from \"./controls/control\";\r\n\r\n/**\r\n * Class used to store a point for a MultiLine object.\r\n * The point can be pure 2D coordinates, a mesh or a control\r\n */\r\nexport class MultiLinePoint {\r\n    private _multiLine: MultiLine;\r\n\r\n    private _x: ValueAndUnit;\r\n    private _y: ValueAndUnit;\r\n    private _control: Nullable<Control>;\r\n    private _mesh: Nullable<AbstractMesh>;\r\n\r\n    private _controlObserver: Nullable<Observer<Control>>;\r\n    private _meshObserver: Nullable<Observer<Camera>>;\r\n\r\n    /** @internal */\r\n    public _point: Vector3;\r\n\r\n    /**\r\n     * Creates a new MultiLinePoint\r\n     * @param multiLine defines the source MultiLine object\r\n     */\r\n    constructor(multiLine: MultiLine) {\r\n        this._multiLine = multiLine;\r\n\r\n        this._x = new ValueAndUnit(0);\r\n        this._y = new ValueAndUnit(0);\r\n\r\n        this._point = new Vector3(0, 0, 0);\r\n    }\r\n\r\n    /** Gets or sets x coordinate */\r\n    public get x(): string | number {\r\n        return this._x.toString(this._multiLine._host);\r\n    }\r\n\r\n    public set x(value: string | number) {\r\n        if (this._x.toString(this._multiLine._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._x.fromString(value)) {\r\n            this._multiLine._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets y coordinate */\r\n    public get y(): string | number {\r\n        return this._y.toString(this._multiLine._host);\r\n    }\r\n\r\n    public set y(value: string | number) {\r\n        if (this._y.toString(this._multiLine._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._y.fromString(value)) {\r\n            this._multiLine._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets the control associated with this point */\r\n    public get control(): Nullable<Control> {\r\n        return this._control;\r\n    }\r\n\r\n    public set control(value: Nullable<Control>) {\r\n        if (this._control === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._control && this._controlObserver) {\r\n            this._control.onDirtyObservable.remove(this._controlObserver);\r\n\r\n            this._controlObserver = null;\r\n        }\r\n\r\n        this._control = value;\r\n\r\n        if (this._control) {\r\n            this._controlObserver = this._control.onDirtyObservable.add(this._multiLine.onPointUpdate);\r\n        }\r\n\r\n        this._multiLine._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the mesh associated with this point */\r\n    public get mesh(): Nullable<AbstractMesh> {\r\n        return this._mesh;\r\n    }\r\n\r\n    public set mesh(value: Nullable<AbstractMesh>) {\r\n        if (this._mesh === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._mesh && this._meshObserver) {\r\n            this._mesh.getScene().onAfterCameraRenderObservable.remove(this._meshObserver);\r\n        }\r\n\r\n        this._mesh = value;\r\n\r\n        if (this._mesh) {\r\n            this._meshObserver = this._mesh.getScene().onAfterCameraRenderObservable.add(this._multiLine.onPointUpdate);\r\n        }\r\n\r\n        this._multiLine._markAsDirty();\r\n    }\r\n\r\n    /** Resets links */\r\n    public resetLinks(): void {\r\n        this.control = null;\r\n        this.mesh = null;\r\n    }\r\n\r\n    /**\r\n     * Gets a translation vector with Z component\r\n     * @returns the translation vector\r\n     */\r\n    public translate(): Vector3 {\r\n        this._point = this._translatePoint();\r\n\r\n        return this._point;\r\n    }\r\n\r\n    private _translatePoint(): Vector3 {\r\n        if (this._mesh != null) {\r\n            return this._multiLine._host.getProjectedPositionWithZ(this._mesh.getBoundingInfo().boundingSphere.center, this._mesh.getWorldMatrix());\r\n        } else if (this._control != null) {\r\n            return new Vector3(this._control.centerX, this._control.centerY, 1 - Epsilon);\r\n        } else {\r\n            const host: any = this._multiLine._host as any;\r\n\r\n            const xValue: number = this._x.getValueInPixel(host, Number(host._canvas.width));\r\n            const yValue: number = this._y.getValueInPixel(host, Number(host._canvas.height));\r\n\r\n            return new Vector3(xValue, yValue, 1 - Epsilon);\r\n        }\r\n    }\r\n\r\n    /** Release associated resources */\r\n    public dispose(): void {\r\n        this.resetLinks();\r\n    }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}