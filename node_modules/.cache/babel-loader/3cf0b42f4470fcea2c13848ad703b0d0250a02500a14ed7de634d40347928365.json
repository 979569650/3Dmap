{"ast":null,"code":"import { __decorate } from \"@babylonjs/core/tslib.es6.js\";\nimport { BaseSlider } from \"./baseSlider.js\";\nimport { Measure } from \"../../measure.js\";\nimport { serialize } from \"@babylonjs/core/Misc/decorators.js\";\n/**\n * Class used to create slider controls\n */\nexport class ImageScrollBar extends BaseSlider {\n  /** Inverts the scrolling direction (default: false) */\n  get invertScrollDirection() {\n    return this._invertScrollDirection;\n  }\n  set invertScrollDirection(invert) {\n    this._invertScrollDirection = invert;\n  }\n  /**\n   * Gets or sets the image used to render the background for horizontal bar\n   */\n  get backgroundImage() {\n    return this._backgroundBaseImage;\n  }\n  set backgroundImage(value) {\n    if (this._backgroundBaseImage === value) {\n      return;\n    }\n    this._backgroundBaseImage = value;\n    if (this.isVertical && this.num90RotationInVerticalMode !== 0) {\n      if (!value.isLoaded) {\n        value.onImageLoadedObservable.addOnce(() => {\n          const rotatedValue = value._rotate90(this.num90RotationInVerticalMode, true);\n          this._backgroundImage = rotatedValue;\n          if (!rotatedValue.isLoaded) {\n            rotatedValue.onImageLoadedObservable.addOnce(() => {\n              this._markAsDirty();\n            });\n          }\n          this._markAsDirty();\n        });\n      } else {\n        this._backgroundImage = value._rotate90(this.num90RotationInVerticalMode, true);\n        this._markAsDirty();\n      }\n    } else {\n      this._backgroundImage = value;\n      if (value && !value.isLoaded) {\n        value.onImageLoadedObservable.addOnce(() => {\n          this._markAsDirty();\n        });\n      }\n      this._markAsDirty();\n    }\n  }\n  /**\n   * Gets or sets the image used to render the thumb\n   */\n  get thumbImage() {\n    return this._thumbBaseImage;\n  }\n  set thumbImage(value) {\n    if (this._thumbBaseImage === value) {\n      return;\n    }\n    this._thumbBaseImage = value;\n    if (this.isVertical && this.num90RotationInVerticalMode !== 0) {\n      if (!value.isLoaded) {\n        value.onImageLoadedObservable.addOnce(() => {\n          const rotatedValue = value._rotate90(-this.num90RotationInVerticalMode, true);\n          this._thumbImage = rotatedValue;\n          if (!rotatedValue.isLoaded) {\n            rotatedValue.onImageLoadedObservable.addOnce(() => {\n              this._markAsDirty();\n            });\n          }\n          this._markAsDirty();\n        });\n      } else {\n        this._thumbImage = value._rotate90(-this.num90RotationInVerticalMode, true);\n        this._markAsDirty();\n      }\n    } else {\n      this._thumbImage = value;\n      if (value && !value.isLoaded) {\n        value.onImageLoadedObservable.addOnce(() => {\n          this._markAsDirty();\n        });\n      }\n      this._markAsDirty();\n    }\n  }\n  /**\n   * Gets or sets the length of the thumb\n   */\n  get thumbLength() {\n    return this._thumbLength;\n  }\n  set thumbLength(value) {\n    if (this._thumbLength === value) {\n      return;\n    }\n    this._thumbLength = value;\n    this._markAsDirty();\n  }\n  /**\n   * Gets or sets the height of the thumb\n   */\n  get thumbHeight() {\n    return this._thumbHeight;\n  }\n  set thumbHeight(value) {\n    if (this._thumbLength === value) {\n      return;\n    }\n    this._thumbHeight = value;\n    this._markAsDirty();\n  }\n  /**\n   * Gets or sets the height of the bar image\n   */\n  get barImageHeight() {\n    return this._barImageHeight;\n  }\n  set barImageHeight(value) {\n    if (this._barImageHeight === value) {\n      return;\n    }\n    this._barImageHeight = value;\n    this._markAsDirty();\n  }\n  /**\n   * Creates a new ImageScrollBar\n   * @param name defines the control name\n   */\n  constructor(name) {\n    super(name);\n    this.name = name;\n    this._thumbLength = 0.5;\n    this._thumbHeight = 1;\n    this._barImageHeight = 1;\n    this._tempMeasure = new Measure(0, 0, 0, 0);\n    this._invertScrollDirection = false;\n    /** Number of 90Â° rotation to apply on the images when in vertical mode */\n    this.num90RotationInVerticalMode = 1;\n  }\n  _getTypeName() {\n    return \"ImageScrollBar\";\n  }\n  _getThumbThickness() {\n    let thumbThickness = 0;\n    if (this._thumbWidth.isPixel) {\n      thumbThickness = this._thumbWidth.getValue(this._host);\n    } else {\n      thumbThickness = this._backgroundBoxThickness * this._thumbWidth.getValue(this._host);\n    }\n    return thumbThickness;\n  }\n  _draw(context) {\n    context.save();\n    this._applyStates(context);\n    this._prepareRenderingData(\"rectangle\");\n    const thumbPosition = this._getThumbPosition();\n    const left = this._renderLeft;\n    const top = this._renderTop;\n    const width = this._renderWidth;\n    const height = this._renderHeight;\n    // Background\n    if (this._backgroundImage) {\n      this._tempMeasure.copyFromFloats(left, top, width, height);\n      if (this.isVertical) {\n        this._tempMeasure.copyFromFloats(left + width * (1 - this._barImageHeight) * 0.5, this._currentMeasure.top, width * this._barImageHeight, height);\n        this._tempMeasure.height += this._effectiveThumbThickness;\n        this._backgroundImage._currentMeasure.copyFrom(this._tempMeasure);\n      } else {\n        this._tempMeasure.copyFromFloats(this._currentMeasure.left, top + height * (1 - this._barImageHeight) * 0.5, width, height * this._barImageHeight);\n        this._tempMeasure.width += this._effectiveThumbThickness;\n        this._backgroundImage._currentMeasure.copyFrom(this._tempMeasure);\n      }\n      this._backgroundImage._draw(context);\n    }\n    // Thumb\n    if (this.isVertical) {\n      this._tempMeasure.copyFromFloats(left - this._effectiveBarOffset + this._currentMeasure.width * (1 - this._thumbHeight) * 0.5, this._currentMeasure.top + thumbPosition, this._currentMeasure.width * this._thumbHeight, this._effectiveThumbThickness);\n    } else {\n      this._tempMeasure.copyFromFloats(this._currentMeasure.left + thumbPosition, this._currentMeasure.top + this._currentMeasure.height * (1 - this._thumbHeight) * 0.5, this._effectiveThumbThickness, this._currentMeasure.height * this._thumbHeight);\n    }\n    if (this._thumbImage) {\n      this._thumbImage._currentMeasure.copyFrom(this._tempMeasure);\n      this._thumbImage._draw(context);\n    }\n    context.restore();\n  }\n  /**\n   * @internal\n   */\n  _updateValueFromPointer(x, y) {\n    if (this.rotation != 0) {\n      this._invertTransformMatrix.transformCoordinates(x, y, this._transformedPosition);\n      x = this._transformedPosition.x;\n      y = this._transformedPosition.y;\n    }\n    const sign = this._invertScrollDirection ? -1 : 1;\n    if (this._first) {\n      this._first = false;\n      this._originX = x;\n      this._originY = y;\n      // Check if move is required\n      if (x < this._tempMeasure.left || x > this._tempMeasure.left + this._tempMeasure.width || y < this._tempMeasure.top || y > this._tempMeasure.top + this._tempMeasure.height) {\n        if (this.isVertical) {\n          this.value = this.minimum + (1 - (y - this._currentMeasure.top) / this._currentMeasure.height) * (this.maximum - this.minimum);\n        } else {\n          this.value = this.minimum + (x - this._currentMeasure.left) / this._currentMeasure.width * (this.maximum - this.minimum);\n        }\n      }\n    }\n    // Delta mode\n    let delta = 0;\n    if (this.isVertical) {\n      delta = -((y - this._originY) / (this._currentMeasure.height - this._effectiveThumbThickness));\n    } else {\n      delta = (x - this._originX) / (this._currentMeasure.width - this._effectiveThumbThickness);\n    }\n    this.value += sign * delta * (this.maximum - this.minimum);\n    this._originX = x;\n    this._originY = y;\n  }\n  _onPointerDown(target, coordinates, pointerId, buttonIndex, pi) {\n    this._first = true;\n    return super._onPointerDown(target, coordinates, pointerId, buttonIndex, pi);\n  }\n}\n__decorate([serialize()], ImageScrollBar.prototype, \"num90RotationInVerticalMode\", void 0);\n__decorate([serialize()], ImageScrollBar.prototype, \"invertScrollDirection\", null);","map":{"version":3,"names":["BaseSlider","Measure","serialize","ImageScrollBar","invertScrollDirection","_invertScrollDirection","invert","backgroundImage","_backgroundBaseImage","value","isVertical","num90RotationInVerticalMode","isLoaded","onImageLoadedObservable","addOnce","rotatedValue","_rotate90","_backgroundImage","_markAsDirty","thumbImage","_thumbBaseImage","_thumbImage","thumbLength","_thumbLength","thumbHeight","_thumbHeight","barImageHeight","_barImageHeight","constructor","name","_tempMeasure","_getTypeName","_getThumbThickness","thumbThickness","_thumbWidth","isPixel","getValue","_host","_backgroundBoxThickness","_draw","context","save","_applyStates","_prepareRenderingData","thumbPosition","_getThumbPosition","left","_renderLeft","top","_renderTop","width","_renderWidth","height","_renderHeight","copyFromFloats","_currentMeasure","_effectiveThumbThickness","copyFrom","_effectiveBarOffset","restore","_updateValueFromPointer","x","y","rotation","_invertTransformMatrix","transformCoordinates","_transformedPosition","sign","_first","_originX","_originY","minimum","maximum","delta","_onPointerDown","target","coordinates","pointerId","buttonIndex","pi","__decorate"],"sources":["../../../../../../dev/gui/src/2D/controls/sliders/imageScrollBar.ts"],"sourcesContent":["import type { Vector2 } from \"core/Maths/math.vector\";\r\nimport { BaseSlider } from \"./baseSlider\";\r\nimport type { Control } from \"../control\";\r\nimport type { Image } from \"../image\";\r\nimport { Measure } from \"../../measure\";\r\nimport type { PointerInfoBase } from \"core/Events/pointerEvents\";\r\nimport { serialize } from \"core/Misc/decorators\";\r\nimport type { ICanvasRenderingContext } from \"core/Engines/ICanvas\";\r\n\r\n/**\r\n * Class used to create slider controls\r\n */\r\nexport class ImageScrollBar extends BaseSlider {\r\n    private _backgroundBaseImage: Image;\r\n    private _backgroundImage: Image;\r\n    private _thumbImage: Image;\r\n    private _thumbBaseImage: Image;\r\n    private _thumbLength: number = 0.5;\r\n    private _thumbHeight: number = 1;\r\n    private _barImageHeight: number = 1;\r\n    private _tempMeasure = new Measure(0, 0, 0, 0);\r\n    private _invertScrollDirection = false;\r\n\r\n    /** Number of 90Â° rotation to apply on the images when in vertical mode */\r\n    @serialize()\r\n    public num90RotationInVerticalMode = 1;\r\n\r\n    /** Inverts the scrolling direction (default: false) */\r\n    @serialize()\r\n    public get invertScrollDirection() {\r\n        return this._invertScrollDirection;\r\n    }\r\n\r\n    public set invertScrollDirection(invert: boolean) {\r\n        this._invertScrollDirection = invert;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the image used to render the background for horizontal bar\r\n     */\r\n    public get backgroundImage(): Image {\r\n        return this._backgroundBaseImage;\r\n    }\r\n\r\n    public set backgroundImage(value: Image) {\r\n        if (this._backgroundBaseImage === value) {\r\n            return;\r\n        }\r\n\r\n        this._backgroundBaseImage = value;\r\n\r\n        if (this.isVertical && this.num90RotationInVerticalMode !== 0) {\r\n            if (!value.isLoaded) {\r\n                value.onImageLoadedObservable.addOnce(() => {\r\n                    const rotatedValue = value._rotate90(this.num90RotationInVerticalMode, true);\r\n                    this._backgroundImage = rotatedValue;\r\n                    if (!rotatedValue.isLoaded) {\r\n                        rotatedValue.onImageLoadedObservable.addOnce(() => {\r\n                            this._markAsDirty();\r\n                        });\r\n                    }\r\n                    this._markAsDirty();\r\n                });\r\n            } else {\r\n                this._backgroundImage = value._rotate90(this.num90RotationInVerticalMode, true);\r\n                this._markAsDirty();\r\n            }\r\n        } else {\r\n            this._backgroundImage = value;\r\n            if (value && !value.isLoaded) {\r\n                value.onImageLoadedObservable.addOnce(() => {\r\n                    this._markAsDirty();\r\n                });\r\n            }\r\n\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the image used to render the thumb\r\n     */\r\n    public get thumbImage(): Image {\r\n        return this._thumbBaseImage;\r\n    }\r\n\r\n    public set thumbImage(value: Image) {\r\n        if (this._thumbBaseImage === value) {\r\n            return;\r\n        }\r\n\r\n        this._thumbBaseImage = value;\r\n\r\n        if (this.isVertical && this.num90RotationInVerticalMode !== 0) {\r\n            if (!value.isLoaded) {\r\n                value.onImageLoadedObservable.addOnce(() => {\r\n                    const rotatedValue = value._rotate90(-this.num90RotationInVerticalMode, true);\r\n                    this._thumbImage = rotatedValue;\r\n                    if (!rotatedValue.isLoaded) {\r\n                        rotatedValue.onImageLoadedObservable.addOnce(() => {\r\n                            this._markAsDirty();\r\n                        });\r\n                    }\r\n                    this._markAsDirty();\r\n                });\r\n            } else {\r\n                this._thumbImage = value._rotate90(-this.num90RotationInVerticalMode, true);\r\n                this._markAsDirty();\r\n            }\r\n        } else {\r\n            this._thumbImage = value;\r\n            if (value && !value.isLoaded) {\r\n                value.onImageLoadedObservable.addOnce(() => {\r\n                    this._markAsDirty();\r\n                });\r\n            }\r\n\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the length of the thumb\r\n     */\r\n    public get thumbLength(): number {\r\n        return this._thumbLength;\r\n    }\r\n\r\n    public set thumbLength(value: number) {\r\n        if (this._thumbLength === value) {\r\n            return;\r\n        }\r\n\r\n        this._thumbLength = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the height of the thumb\r\n     */\r\n    public get thumbHeight(): number {\r\n        return this._thumbHeight;\r\n    }\r\n\r\n    public set thumbHeight(value: number) {\r\n        if (this._thumbLength === value) {\r\n            return;\r\n        }\r\n\r\n        this._thumbHeight = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the height of the bar image\r\n     */\r\n    public get barImageHeight(): number {\r\n        return this._barImageHeight;\r\n    }\r\n\r\n    public set barImageHeight(value: number) {\r\n        if (this._barImageHeight === value) {\r\n            return;\r\n        }\r\n\r\n        this._barImageHeight = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Creates a new ImageScrollBar\r\n     * @param name defines the control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"ImageScrollBar\";\r\n    }\r\n\r\n    protected _getThumbThickness(): number {\r\n        let thumbThickness = 0;\r\n        if (this._thumbWidth.isPixel) {\r\n            thumbThickness = this._thumbWidth.getValue(this._host);\r\n        } else {\r\n            thumbThickness = this._backgroundBoxThickness * this._thumbWidth.getValue(this._host);\r\n        }\r\n        return thumbThickness;\r\n    }\r\n\r\n    public _draw(context: ICanvasRenderingContext): void {\r\n        context.save();\r\n\r\n        this._applyStates(context);\r\n\r\n        this._prepareRenderingData(\"rectangle\");\r\n        const thumbPosition = this._getThumbPosition();\r\n        const left = this._renderLeft;\r\n        const top = this._renderTop;\r\n        const width = this._renderWidth;\r\n        const height = this._renderHeight;\r\n\r\n        // Background\r\n        if (this._backgroundImage) {\r\n            this._tempMeasure.copyFromFloats(left, top, width, height);\r\n            if (this.isVertical) {\r\n                this._tempMeasure.copyFromFloats(left + width * (1 - this._barImageHeight) * 0.5, this._currentMeasure.top, width * this._barImageHeight, height);\r\n                this._tempMeasure.height += this._effectiveThumbThickness;\r\n                this._backgroundImage._currentMeasure.copyFrom(this._tempMeasure);\r\n            } else {\r\n                this._tempMeasure.copyFromFloats(this._currentMeasure.left, top + height * (1 - this._barImageHeight) * 0.5, width, height * this._barImageHeight);\r\n                this._tempMeasure.width += this._effectiveThumbThickness;\r\n                this._backgroundImage._currentMeasure.copyFrom(this._tempMeasure);\r\n            }\r\n            this._backgroundImage._draw(context);\r\n        }\r\n\r\n        // Thumb\r\n        if (this.isVertical) {\r\n            this._tempMeasure.copyFromFloats(\r\n                left - this._effectiveBarOffset + this._currentMeasure.width * (1 - this._thumbHeight) * 0.5,\r\n                this._currentMeasure.top + thumbPosition,\r\n                this._currentMeasure.width * this._thumbHeight,\r\n                this._effectiveThumbThickness\r\n            );\r\n        } else {\r\n            this._tempMeasure.copyFromFloats(\r\n                this._currentMeasure.left + thumbPosition,\r\n                this._currentMeasure.top + this._currentMeasure.height * (1 - this._thumbHeight) * 0.5,\r\n                this._effectiveThumbThickness,\r\n                this._currentMeasure.height * this._thumbHeight\r\n            );\r\n        }\r\n\r\n        if (this._thumbImage) {\r\n            this._thumbImage._currentMeasure.copyFrom(this._tempMeasure);\r\n            this._thumbImage._draw(context);\r\n        }\r\n\r\n        context.restore();\r\n    }\r\n\r\n    private _first: boolean;\r\n    private _originX: number;\r\n    private _originY: number;\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    protected _updateValueFromPointer(x: number, y: number): void {\r\n        if (this.rotation != 0) {\r\n            this._invertTransformMatrix.transformCoordinates(x, y, this._transformedPosition);\r\n            x = this._transformedPosition.x;\r\n            y = this._transformedPosition.y;\r\n        }\r\n\r\n        const sign = this._invertScrollDirection ? -1 : 1;\r\n\r\n        if (this._first) {\r\n            this._first = false;\r\n            this._originX = x;\r\n            this._originY = y;\r\n\r\n            // Check if move is required\r\n            if (\r\n                x < this._tempMeasure.left ||\r\n                x > this._tempMeasure.left + this._tempMeasure.width ||\r\n                y < this._tempMeasure.top ||\r\n                y > this._tempMeasure.top + this._tempMeasure.height\r\n            ) {\r\n                if (this.isVertical) {\r\n                    this.value = this.minimum + (1 - (y - this._currentMeasure.top) / this._currentMeasure.height) * (this.maximum - this.minimum);\r\n                } else {\r\n                    this.value = this.minimum + ((x - this._currentMeasure.left) / this._currentMeasure.width) * (this.maximum - this.minimum);\r\n                }\r\n            }\r\n        }\r\n\r\n        // Delta mode\r\n        let delta = 0;\r\n        if (this.isVertical) {\r\n            delta = -((y - this._originY) / (this._currentMeasure.height - this._effectiveThumbThickness));\r\n        } else {\r\n            delta = (x - this._originX) / (this._currentMeasure.width - this._effectiveThumbThickness);\r\n        }\r\n\r\n        this.value += sign * delta * (this.maximum - this.minimum);\r\n\r\n        this._originX = x;\r\n        this._originY = y;\r\n    }\r\n\r\n    public _onPointerDown(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number, pi: PointerInfoBase): boolean {\r\n        this._first = true;\r\n\r\n        return super._onPointerDown(target, coordinates, pointerId, buttonIndex, pi);\r\n    }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}