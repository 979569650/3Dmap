{"ast":null,"code":"import { Vector4 } from \"@babylonjs/core/Maths/math.vector.js\";\nimport { CreateBox } from \"@babylonjs/core/Meshes/Builders/boxBuilder.js\";\nimport { StandardMaterial } from \"@babylonjs/core/Materials/standardMaterial.js\";\nimport { AbstractButton3D } from \"./abstractButton3D.js\";\nimport { Color3 } from \"@babylonjs/core/Maths/math.color.js\";\n/**\n * Class used to create a button in 3D\n */\nexport class Button3D extends AbstractButton3D {\n  /**\n   * Creates a new button\n   * @param name defines the control name\n   */\n  constructor(name, options) {\n    super(name);\n    this._options = {\n      width: 1,\n      height: 1,\n      depth: 0.08,\n      ...options\n    };\n    // Default animations\n    this.pointerEnterAnimation = () => {\n      if (!this.mesh) {\n        return;\n      }\n      this._currentMaterial.emissiveColor = Color3.Red();\n    };\n    this.pointerOutAnimation = () => {\n      this._currentMaterial.emissiveColor = Color3.Black();\n    };\n    this.pointerDownAnimation = () => {\n      if (!this.mesh) {\n        return;\n      }\n      this.mesh.scaling.scaleInPlace(0.95);\n    };\n    this.pointerUpAnimation = () => {\n      if (!this.mesh) {\n        return;\n      }\n      this.mesh.scaling.scaleInPlace(1.0 / 0.95);\n    };\n  }\n  /**\n   * Apply the facade texture (created from the content property).\n   * @param facadeTexture defines the AdvancedDynamicTexture to use\n   */\n  _applyFacade(facadeTexture) {\n    this._currentMaterial.emissiveTexture = facadeTexture;\n  }\n  _getTypeName() {\n    return \"Button3D\";\n  }\n  // Mesh association\n  _createNode(scene) {\n    const faceUV = new Array(6);\n    for (let i = 0; i < 6; i++) {\n      faceUV[i] = new Vector4(0, 0, 0, 0);\n    }\n    if (scene.useRightHandedSystem) {\n      // Flip the u on the texture\n      faceUV[0].copyFromFloats(1, 0, 0, 1);\n    } else {\n      faceUV[1].copyFromFloats(0, 0, 1, 1);\n    }\n    const mesh = CreateBox(this.name + \"_rootMesh\", {\n      width: this._options.width,\n      height: this._options.height,\n      depth: this._options.depth,\n      faceUV: faceUV,\n      wrap: true\n    }, scene);\n    this._contentScaleRatioY = this._contentScaleRatio * this._options.width / this._options.height;\n    this._setFacadeTextureScaling();\n    return mesh;\n  }\n  _affectMaterial(mesh) {\n    const material = new StandardMaterial(this.name + \"Material\", mesh.getScene());\n    material.specularColor = Color3.Black();\n    mesh.material = material;\n    this._currentMaterial = material;\n    this._resetContent();\n  }\n  /**\n   * Releases all associated resources\n   */\n  dispose() {\n    super.dispose();\n    this._disposeFacadeTexture();\n    if (this._currentMaterial) {\n      this._currentMaterial.dispose();\n    }\n  }\n}","map":{"version":3,"names":["Vector4","CreateBox","StandardMaterial","AbstractButton3D","Color3","Button3D","constructor","name","options","_options","width","height","depth","pointerEnterAnimation","mesh","_currentMaterial","emissiveColor","Red","pointerOutAnimation","Black","pointerDownAnimation","scaling","scaleInPlace","pointerUpAnimation","_applyFacade","facadeTexture","emissiveTexture","_getTypeName","_createNode","scene","faceUV","Array","i","useRightHandedSystem","copyFromFloats","wrap","_contentScaleRatioY","_contentScaleRatio","_setFacadeTextureScaling","_affectMaterial","material","getScene","specularColor","_resetContent","dispose","_disposeFacadeTexture"],"sources":["../../../../../dev/gui/src/3D/controls/button3D.ts"],"sourcesContent":["import { Vector4 } from \"core/Maths/math.vector\";\r\nimport type { TransformNode } from \"core/Meshes/transformNode\";\r\nimport type { AbstractMesh } from \"core/Meshes/abstractMesh\";\r\nimport { CreateBox } from \"core/Meshes/Builders/boxBuilder\";\r\nimport type { Material } from \"core/Materials/material\";\r\nimport { StandardMaterial } from \"core/Materials/standardMaterial\";\r\nimport type { Scene } from \"core/scene\";\r\n\r\nimport { AbstractButton3D } from \"./abstractButton3D\";\r\nimport type { AdvancedDynamicTexture } from \"../../2D/advancedDynamicTexture\";\r\nimport { Color3 } from \"core/Maths/math.color\";\r\n\r\n/**\r\n * Options used to create a button in 3D\r\n */\r\nexport interface IButton3DCreationOptions {\r\n    /**\r\n     * Width of the button. Default: 1\r\n     */\r\n    width?: number;\r\n\r\n    /**\r\n     * Height of the button. Default: 1\r\n     */\r\n    height?: number;\r\n\r\n    /**\r\n     * Depth of the button. Default: 0.08\r\n     */\r\n    depth?: number;\r\n}\r\n\r\n/**\r\n * Class used to create a button in 3D\r\n */\r\nexport class Button3D extends AbstractButton3D {\r\n    /** @internal */\r\n    protected _currentMaterial: Material;\r\n\r\n    protected _options: IButton3DCreationOptions;\r\n    protected _height: number;\r\n    protected _depth: number;\r\n\r\n    /**\r\n     * Creates a new button\r\n     * @param name defines the control name\r\n     */\r\n    constructor(name?: string, options?: IButton3DCreationOptions) {\r\n        super(name);\r\n\r\n        this._options = {\r\n            width: 1,\r\n            height: 1,\r\n            depth: 0.08,\r\n            ...options,\r\n        };\r\n\r\n        // Default animations\r\n\r\n        this.pointerEnterAnimation = () => {\r\n            if (!this.mesh) {\r\n                return;\r\n            }\r\n            (<StandardMaterial>this._currentMaterial).emissiveColor = Color3.Red();\r\n        };\r\n\r\n        this.pointerOutAnimation = () => {\r\n            (<StandardMaterial>this._currentMaterial).emissiveColor = Color3.Black();\r\n        };\r\n\r\n        this.pointerDownAnimation = () => {\r\n            if (!this.mesh) {\r\n                return;\r\n            }\r\n\r\n            this.mesh.scaling.scaleInPlace(0.95);\r\n        };\r\n\r\n        this.pointerUpAnimation = () => {\r\n            if (!this.mesh) {\r\n                return;\r\n            }\r\n\r\n            this.mesh.scaling.scaleInPlace(1.0 / 0.95);\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Apply the facade texture (created from the content property).\r\n     * @param facadeTexture defines the AdvancedDynamicTexture to use\r\n     */\r\n    protected _applyFacade(facadeTexture: AdvancedDynamicTexture) {\r\n        (<any>this._currentMaterial).emissiveTexture = facadeTexture;\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Button3D\";\r\n    }\r\n\r\n    // Mesh association\r\n    protected _createNode(scene: Scene): TransformNode {\r\n        const faceUV = new Array(6);\r\n\r\n        for (let i = 0; i < 6; i++) {\r\n            faceUV[i] = new Vector4(0, 0, 0, 0);\r\n        }\r\n        if (scene.useRightHandedSystem) {\r\n            // Flip the u on the texture\r\n            faceUV[0].copyFromFloats(1, 0, 0, 1);\r\n        } else {\r\n            faceUV[1].copyFromFloats(0, 0, 1, 1);\r\n        }\r\n\r\n        const mesh = CreateBox(\r\n            this.name + \"_rootMesh\",\r\n            {\r\n                width: this._options.width,\r\n                height: this._options.height,\r\n                depth: this._options.depth,\r\n                faceUV: faceUV,\r\n                wrap: true,\r\n            },\r\n            scene\r\n        );\r\n\r\n        this._contentScaleRatioY = (this._contentScaleRatio * this._options.width!) / this._options.height!;\r\n        this._setFacadeTextureScaling();\r\n\r\n        return mesh;\r\n    }\r\n\r\n    protected _affectMaterial(mesh: AbstractMesh) {\r\n        const material = new StandardMaterial(this.name + \"Material\", mesh.getScene());\r\n        material.specularColor = Color3.Black();\r\n\r\n        mesh.material = material;\r\n        this._currentMaterial = material;\r\n\r\n        this._resetContent();\r\n    }\r\n\r\n    /**\r\n     * Releases all associated resources\r\n     */\r\n    public dispose() {\r\n        super.dispose();\r\n\r\n        this._disposeFacadeTexture();\r\n\r\n        if (this._currentMaterial) {\r\n            this._currentMaterial.dispose();\r\n        }\r\n    }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}