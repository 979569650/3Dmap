{"ast":null,"code":"import { Action } from \"./action.js\";\nimport { RegisterClass } from \"../Misc/typeStore.js\";\n/**\n * A Condition applied to an Action\n */\nexport class Condition {\n  /**\n   * Creates a new Condition\n   * @param actionManager the manager of the action the condition is applied to\n   */\n  constructor(actionManager) {\n    this._actionManager = actionManager;\n  }\n  /**\n   * Check if the current condition is valid\n   * @returns a boolean\n   */\n  isValid() {\n    return true;\n  }\n  /**\n   * @internal\n   */\n  _getProperty(propertyPath) {\n    return this._actionManager._getProperty(propertyPath);\n  }\n  /**\n   * @internal\n   */\n  _getEffectiveTarget(target, propertyPath) {\n    return this._actionManager._getEffectiveTarget(target, propertyPath);\n  }\n  /**\n   * Serialize placeholder for child classes\n   * @returns the serialized object\n   */\n  serialize() {}\n  /**\n   * @internal\n   */\n  _serialize(serializedCondition) {\n    return {\n      type: 2,\n      children: [],\n      name: serializedCondition.name,\n      properties: serializedCondition.properties\n    };\n  }\n}\n/**\n * Defines specific conditional operators as extensions of Condition\n */\nexport class ValueCondition extends Condition {\n  /**\n   * returns the number for IsEqual\n   */\n  static get IsEqual() {\n    return ValueCondition._IsEqual;\n  }\n  /**\n   * Returns the number for IsDifferent\n   */\n  static get IsDifferent() {\n    return ValueCondition._IsDifferent;\n  }\n  /**\n   * Returns the number for IsGreater\n   */\n  static get IsGreater() {\n    return ValueCondition._IsGreater;\n  }\n  /**\n   * Returns the number for IsLesser\n   */\n  static get IsLesser() {\n    return ValueCondition._IsLesser;\n  }\n  /**\n   * Creates a new ValueCondition\n   * @param actionManager manager for the action the condition applies to\n   * @param target for the action\n   * @param propertyPath path to specify the property of the target the conditional operator uses\n   * @param value the value compared by the conditional operator against the current value of the property\n   * @param operator the conditional operator, default ValueCondition.IsEqual\n   */\n  constructor(actionManager, target, /** path to specify the property of the target the conditional operator uses  */\n  propertyPath, /** the value compared by the conditional operator against the current value of the property */\n  value, /** the conditional operator, default ValueCondition.IsEqual */\n  operator = ValueCondition.IsEqual) {\n    super(actionManager);\n    this.propertyPath = propertyPath;\n    this.value = value;\n    this.operator = operator;\n    this._target = target;\n    this._effectiveTarget = this._getEffectiveTarget(target, this.propertyPath);\n    this._property = this._getProperty(this.propertyPath);\n  }\n  /**\n   * Compares the given value with the property value for the specified conditional operator\n   * @returns the result of the comparison\n   */\n  isValid() {\n    switch (this.operator) {\n      case ValueCondition.IsGreater:\n        return this._effectiveTarget[this._property] > this.value;\n      case ValueCondition.IsLesser:\n        return this._effectiveTarget[this._property] < this.value;\n      case ValueCondition.IsEqual:\n      case ValueCondition.IsDifferent:\n        {\n          let check;\n          if (this.value.equals) {\n            check = this.value.equals(this._effectiveTarget[this._property]);\n          } else {\n            check = this.value === this._effectiveTarget[this._property];\n          }\n          return this.operator === ValueCondition.IsEqual ? check : !check;\n        }\n    }\n    return false;\n  }\n  /**\n   * Serialize the ValueCondition into a JSON compatible object\n   * @returns serialization object\n   */\n  serialize() {\n    return this._serialize({\n      name: \"ValueCondition\",\n      properties: [Action._GetTargetProperty(this._target), {\n        name: \"propertyPath\",\n        value: this.propertyPath\n      }, {\n        name: \"value\",\n        value: Action._SerializeValueAsString(this.value)\n      }, {\n        name: \"operator\",\n        value: ValueCondition.GetOperatorName(this.operator)\n      }]\n    });\n  }\n  /**\n   * Gets the name of the conditional operator for the ValueCondition\n   * @param operator the conditional operator\n   * @returns the name\n   */\n  static GetOperatorName(operator) {\n    switch (operator) {\n      case ValueCondition._IsEqual:\n        return \"IsEqual\";\n      case ValueCondition._IsDifferent:\n        return \"IsDifferent\";\n      case ValueCondition._IsGreater:\n        return \"IsGreater\";\n      case ValueCondition._IsLesser:\n        return \"IsLesser\";\n      default:\n        return \"\";\n    }\n  }\n}\nValueCondition._IsEqual = 0;\nValueCondition._IsDifferent = 1;\nValueCondition._IsGreater = 2;\nValueCondition._IsLesser = 3;\n/**\n * Defines a predicate condition as an extension of Condition\n */\nexport class PredicateCondition extends Condition {\n  /**\n   * Creates a new PredicateCondition\n   * @param actionManager manager for the action the condition applies to\n   * @param predicate defines the predicate function used to validate the condition\n   */\n  constructor(actionManager, /** defines the predicate function used to validate the condition */\n  predicate) {\n    super(actionManager);\n    this.predicate = predicate;\n  }\n  /**\n   * @returns the validity of the predicate condition\n   */\n  isValid() {\n    return this.predicate();\n  }\n}\n/**\n * Defines a state condition as an extension of Condition\n */\nexport class StateCondition extends Condition {\n  /**\n   * Creates a new StateCondition\n   * @param actionManager manager for the action the condition applies to\n   * @param target of the condition\n   * @param value to compare with target state\n   */\n  constructor(actionManager, target, /** Value to compare with target state  */\n  value) {\n    super(actionManager);\n    this.value = value;\n    this._target = target;\n  }\n  /**\n   * Gets a boolean indicating if the current condition is met\n   * @returns the validity of the state\n   */\n  isValid() {\n    return this._target.state === this.value;\n  }\n  /**\n   * Serialize the StateCondition into a JSON compatible object\n   * @returns serialization object\n   */\n  serialize() {\n    return this._serialize({\n      name: \"StateCondition\",\n      properties: [Action._GetTargetProperty(this._target), {\n        name: \"value\",\n        value: this.value\n      }]\n    });\n  }\n}\nRegisterClass(\"BABYLON.ValueCondition\", ValueCondition);\nRegisterClass(\"BABYLON.PredicateCondition\", PredicateCondition);\nRegisterClass(\"BABYLON.StateCondition\", StateCondition);","map":{"version":3,"names":["Action","RegisterClass","Condition","constructor","actionManager","_actionManager","isValid","_getProperty","propertyPath","_getEffectiveTarget","target","serialize","_serialize","serializedCondition","type","children","name","properties","ValueCondition","IsEqual","_IsEqual","IsDifferent","_IsDifferent","IsGreater","_IsGreater","IsLesser","_IsLesser","value","operator","_target","_effectiveTarget","_property","check","equals","_GetTargetProperty","_SerializeValueAsString","GetOperatorName","PredicateCondition","predicate","StateCondition","state"],"sources":["../../../../dev/core/src/Actions/condition.ts"],"sourcesContent":["import { Action } from \"./action\";\r\nimport { RegisterClass } from \"../Misc/typeStore\";\r\n\r\nimport type { ActionManager } from \"./actionManager\";\r\n\r\n/**\r\n * A Condition applied to an Action\r\n */\r\nexport class Condition {\r\n    /**\r\n     * Internal only - manager for action\r\n     * @internal\r\n     */\r\n    public _actionManager: ActionManager;\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _evaluationId: number;\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _currentResult: boolean;\r\n\r\n    /**\r\n     * Creates a new Condition\r\n     * @param actionManager the manager of the action the condition is applied to\r\n     */\r\n    constructor(actionManager: ActionManager) {\r\n        this._actionManager = actionManager;\r\n    }\r\n\r\n    /**\r\n     * Check if the current condition is valid\r\n     * @returns a boolean\r\n     */\r\n    public isValid(): boolean {\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _getProperty(propertyPath: string): string {\r\n        return this._actionManager._getProperty(propertyPath);\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _getEffectiveTarget(target: any, propertyPath: string): any {\r\n        return this._actionManager._getEffectiveTarget(target, propertyPath);\r\n    }\r\n\r\n    /**\r\n     * Serialize placeholder for child classes\r\n     * @returns the serialized object\r\n     */\r\n    public serialize(): any {}\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    protected _serialize(serializedCondition: any): any {\r\n        return {\r\n            type: 2, // Condition\r\n            children: [],\r\n            name: serializedCondition.name,\r\n            properties: serializedCondition.properties,\r\n        };\r\n    }\r\n}\r\n\r\n/**\r\n * Defines specific conditional operators as extensions of Condition\r\n */\r\nexport class ValueCondition extends Condition {\r\n    private static _IsEqual = 0;\r\n    private static _IsDifferent = 1;\r\n    private static _IsGreater = 2;\r\n    private static _IsLesser = 3;\r\n\r\n    /**\r\n     * returns the number for IsEqual\r\n     */\r\n    public static get IsEqual(): number {\r\n        return ValueCondition._IsEqual;\r\n    }\r\n\r\n    /**\r\n     * Returns the number for IsDifferent\r\n     */\r\n    public static get IsDifferent(): number {\r\n        return ValueCondition._IsDifferent;\r\n    }\r\n\r\n    /**\r\n     * Returns the number for IsGreater\r\n     */\r\n    public static get IsGreater(): number {\r\n        return ValueCondition._IsGreater;\r\n    }\r\n\r\n    /**\r\n     * Returns the number for IsLesser\r\n     */\r\n    public static get IsLesser(): number {\r\n        return ValueCondition._IsLesser;\r\n    }\r\n\r\n    /**\r\n     * Internal only The action manager for the condition\r\n     * @internal\r\n     */\r\n    public _actionManager: ActionManager;\r\n\r\n    private _target: any;\r\n    private _effectiveTarget: any;\r\n    private _property: string;\r\n\r\n    /**\r\n     * Creates a new ValueCondition\r\n     * @param actionManager manager for the action the condition applies to\r\n     * @param target for the action\r\n     * @param propertyPath path to specify the property of the target the conditional operator uses\r\n     * @param value the value compared by the conditional operator against the current value of the property\r\n     * @param operator the conditional operator, default ValueCondition.IsEqual\r\n     */\r\n    constructor(\r\n        actionManager: ActionManager,\r\n        target: any,\r\n        /** path to specify the property of the target the conditional operator uses  */\r\n        public propertyPath: string,\r\n        /** the value compared by the conditional operator against the current value of the property */\r\n        public value: any,\r\n        /** the conditional operator, default ValueCondition.IsEqual */\r\n        public operator: number = ValueCondition.IsEqual\r\n    ) {\r\n        super(actionManager);\r\n\r\n        this._target = target;\r\n        this._effectiveTarget = this._getEffectiveTarget(target, this.propertyPath);\r\n        this._property = this._getProperty(this.propertyPath);\r\n    }\r\n\r\n    /**\r\n     * Compares the given value with the property value for the specified conditional operator\r\n     * @returns the result of the comparison\r\n     */\r\n    public isValid(): boolean {\r\n        switch (this.operator) {\r\n            case ValueCondition.IsGreater:\r\n                return this._effectiveTarget[this._property] > this.value;\r\n            case ValueCondition.IsLesser:\r\n                return this._effectiveTarget[this._property] < this.value;\r\n            case ValueCondition.IsEqual:\r\n            case ValueCondition.IsDifferent: {\r\n                let check: boolean;\r\n\r\n                if (this.value.equals) {\r\n                    check = this.value.equals(this._effectiveTarget[this._property]);\r\n                } else {\r\n                    check = this.value === this._effectiveTarget[this._property];\r\n                }\r\n                return this.operator === ValueCondition.IsEqual ? check : !check;\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Serialize the ValueCondition into a JSON compatible object\r\n     * @returns serialization object\r\n     */\r\n    public serialize(): any {\r\n        return this._serialize({\r\n            name: \"ValueCondition\",\r\n            properties: [\r\n                Action._GetTargetProperty(this._target),\r\n                { name: \"propertyPath\", value: this.propertyPath },\r\n                { name: \"value\", value: Action._SerializeValueAsString(this.value) },\r\n                { name: \"operator\", value: ValueCondition.GetOperatorName(this.operator) },\r\n            ],\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Gets the name of the conditional operator for the ValueCondition\r\n     * @param operator the conditional operator\r\n     * @returns the name\r\n     */\r\n    public static GetOperatorName(operator: number): string {\r\n        switch (operator) {\r\n            case ValueCondition._IsEqual:\r\n                return \"IsEqual\";\r\n            case ValueCondition._IsDifferent:\r\n                return \"IsDifferent\";\r\n            case ValueCondition._IsGreater:\r\n                return \"IsGreater\";\r\n            case ValueCondition._IsLesser:\r\n                return \"IsLesser\";\r\n            default:\r\n                return \"\";\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * Defines a predicate condition as an extension of Condition\r\n */\r\nexport class PredicateCondition extends Condition {\r\n    /**\r\n     * Internal only - manager for action\r\n     * @internal\r\n     */\r\n    public _actionManager: ActionManager;\r\n\r\n    /**\r\n     * Creates a new PredicateCondition\r\n     * @param actionManager manager for the action the condition applies to\r\n     * @param predicate defines the predicate function used to validate the condition\r\n     */\r\n    constructor(\r\n        actionManager: ActionManager,\r\n        /** defines the predicate function used to validate the condition */\r\n        public predicate: () => boolean\r\n    ) {\r\n        super(actionManager);\r\n    }\r\n\r\n    /**\r\n     * @returns the validity of the predicate condition\r\n     */\r\n    public isValid(): boolean {\r\n        return this.predicate();\r\n    }\r\n}\r\n\r\n/**\r\n * Defines a state condition as an extension of Condition\r\n */\r\nexport class StateCondition extends Condition {\r\n    /**\r\n     * Internal only - manager for action\r\n     * @internal\r\n     */\r\n    public _actionManager: ActionManager;\r\n\r\n    private _target: any;\r\n\r\n    /**\r\n     * Creates a new StateCondition\r\n     * @param actionManager manager for the action the condition applies to\r\n     * @param target of the condition\r\n     * @param value to compare with target state\r\n     */\r\n    constructor(\r\n        actionManager: ActionManager,\r\n        target: any,\r\n        /** Value to compare with target state  */\r\n        public value: string\r\n    ) {\r\n        super(actionManager);\r\n\r\n        this._target = target;\r\n    }\r\n\r\n    /**\r\n     * Gets a boolean indicating if the current condition is met\r\n     * @returns the validity of the state\r\n     */\r\n    public isValid(): boolean {\r\n        return this._target.state === this.value;\r\n    }\r\n\r\n    /**\r\n     * Serialize the StateCondition into a JSON compatible object\r\n     * @returns serialization object\r\n     */\r\n    public serialize(): any {\r\n        return this._serialize({\r\n            name: \"StateCondition\",\r\n            properties: [Action._GetTargetProperty(this._target), { name: \"value\", value: this.value }],\r\n        });\r\n    }\r\n}\r\n\r\nRegisterClass(\"BABYLON.ValueCondition\", ValueCondition);\r\nRegisterClass(\"BABYLON.PredicateCondition\", PredicateCondition);\r\nRegisterClass(\"BABYLON.StateCondition\", StateCondition);\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}