{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { StorageBuffer } from \"../Buffers/storageBuffer.js\";\nimport { ComputeShader } from \"../Compute/computeShader.js\";\nimport { UniformBuffer } from \"../Materials/uniformBuffer.js\";\nimport { UniformBufferEffectCommonAccessor } from \"../Materials/uniformBufferEffectCommonAccessor.js\";\nimport { RegisterClass } from \"../Misc/typeStore.js\";\nimport \"../ShadersWGSL/gpuUpdateParticles.compute.js\";\n/** @internal */\nexport class ComputeShaderParticleSystem {\n  constructor(parent, engine) {\n    this._bufferComputeShader = [];\n    this._renderVertexBuffers = [];\n    this.alignDataInBuffer = true;\n    this._parent = parent;\n    this._engine = engine;\n  }\n  contextLost() {\n    this._updateComputeShader = undefined;\n    this._bufferComputeShader.length = 0;\n    this._renderVertexBuffers.length = 0;\n  }\n  isUpdateBufferCreated() {\n    return !!this._updateComputeShader;\n  }\n  isUpdateBufferReady() {\n    var _a, _b;\n    return (_b = (_a = this._updateComputeShader) === null || _a === void 0 ? void 0 : _a.isReady()) !== null && _b !== void 0 ? _b : false;\n  }\n  createUpdateBuffer(defines) {\n    var _a;\n    const bindingsMapping = {\n      params: {\n        group: 0,\n        binding: 0\n      },\n      particlesIn: {\n        group: 0,\n        binding: 1\n      },\n      particlesOut: {\n        group: 0,\n        binding: 2\n      },\n      randomTexture: {\n        group: 0,\n        binding: 3\n      },\n      randomTexture2: {\n        group: 0,\n        binding: 4\n      }\n    };\n    if (this._parent._sizeGradientsTexture) {\n      bindingsMapping[\"sizeGradientTexture\"] = {\n        group: 1,\n        binding: 1\n      };\n    }\n    if (this._parent._angularSpeedGradientsTexture) {\n      bindingsMapping[\"angularSpeedGradientTexture\"] = {\n        group: 1,\n        binding: 3\n      };\n    }\n    if (this._parent._velocityGradientsTexture) {\n      bindingsMapping[\"velocityGradientTexture\"] = {\n        group: 1,\n        binding: 5\n      };\n    }\n    if (this._parent._limitVelocityGradientsTexture) {\n      bindingsMapping[\"limitVelocityGradientTexture\"] = {\n        group: 1,\n        binding: 7\n      };\n    }\n    if (this._parent._dragGradientsTexture) {\n      bindingsMapping[\"dragGradientTexture\"] = {\n        group: 1,\n        binding: 9\n      };\n    }\n    if (this._parent.noiseTexture) {\n      bindingsMapping[\"noiseTexture\"] = {\n        group: 1,\n        binding: 11\n      };\n    }\n    this._updateComputeShader = new ComputeShader(\"updateParticles\", this._engine, \"gpuUpdateParticles\", {\n      bindingsMapping,\n      defines: defines.split(\"\\n\")\n    });\n    (_a = this._simParamsComputeShader) === null || _a === void 0 ? void 0 : _a.dispose();\n    this._simParamsComputeShader = new UniformBuffer(this._engine);\n    this._simParamsComputeShader.addUniform(\"currentCount\", 1);\n    this._simParamsComputeShader.addUniform(\"timeDelta\", 1);\n    this._simParamsComputeShader.addUniform(\"stopFactor\", 1);\n    this._simParamsComputeShader.addUniform(\"randomTextureSize\", 1);\n    this._simParamsComputeShader.addUniform(\"lifeTime\", 2);\n    this._simParamsComputeShader.addUniform(\"emitPower\", 2);\n    if (!this._parent._colorGradientsTexture) {\n      this._simParamsComputeShader.addUniform(\"color1\", 4);\n      this._simParamsComputeShader.addUniform(\"color2\", 4);\n    }\n    this._simParamsComputeShader.addUniform(\"sizeRange\", 2);\n    this._simParamsComputeShader.addUniform(\"scaleRange\", 4);\n    this._simParamsComputeShader.addUniform(\"angleRange\", 4);\n    this._simParamsComputeShader.addUniform(\"gravity\", 3);\n    if (this._parent._limitVelocityGradientsTexture) {\n      this._simParamsComputeShader.addUniform(\"limitVelocityDamping\", 1);\n    }\n    if (this._parent.isAnimationSheetEnabled) {\n      this._simParamsComputeShader.addUniform(\"cellInfos\", 4);\n    }\n    if (this._parent.noiseTexture) {\n      this._simParamsComputeShader.addUniform(\"noiseStrength\", 3);\n    }\n    if (!this._parent.isLocal) {\n      this._simParamsComputeShader.addUniform(\"emitterWM\", 16);\n    }\n    if (this._parent.particleEmitterType) {\n      this._parent.particleEmitterType.buildUniformLayout(this._simParamsComputeShader);\n    }\n    this._updateComputeShader.setUniformBuffer(\"params\", this._simParamsComputeShader);\n    return new UniformBufferEffectCommonAccessor(this._simParamsComputeShader);\n  }\n  createVertexBuffers(updateBuffer, renderVertexBuffers) {\n    this._renderVertexBuffers.push(renderVertexBuffers);\n  }\n  createParticleBuffer(data) {\n    const buffer = new StorageBuffer(this._engine, data.length * 4, 3 | 8);\n    buffer.update(data);\n    this._bufferComputeShader.push(buffer);\n    return buffer.getBuffer();\n  }\n  bindDrawBuffers(index, effect, indexBuffer) {\n    this._engine.bindBuffers(this._renderVertexBuffers[index], indexBuffer, effect);\n  }\n  preUpdateParticleBuffer() {}\n  updateParticleBuffer(index, targetBuffer, currentActiveCount) {\n    this._simParamsComputeShader.update();\n    this._updateComputeShader.setTexture(\"randomTexture\", this._parent._randomTexture, false);\n    this._updateComputeShader.setTexture(\"randomTexture2\", this._parent._randomTexture2, false);\n    if (this._parent._sizeGradientsTexture) {\n      this._updateComputeShader.setTexture(\"sizeGradientTexture\", this._parent._sizeGradientsTexture);\n    }\n    if (this._parent._angularSpeedGradientsTexture) {\n      this._updateComputeShader.setTexture(\"angularSpeedGradientTexture\", this._parent._angularSpeedGradientsTexture);\n    }\n    if (this._parent._velocityGradientsTexture) {\n      this._updateComputeShader.setTexture(\"velocityGradientTexture\", this._parent._velocityGradientsTexture);\n    }\n    if (this._parent._limitVelocityGradientsTexture) {\n      this._updateComputeShader.setTexture(\"limitVelocityGradientTexture\", this._parent._limitVelocityGradientsTexture);\n    }\n    if (this._parent._dragGradientsTexture) {\n      this._updateComputeShader.setTexture(\"dragGradientTexture\", this._parent._dragGradientsTexture);\n    }\n    if (this._parent.noiseTexture) {\n      this._updateComputeShader.setTexture(\"noiseTexture\", this._parent.noiseTexture);\n    }\n    this._updateComputeShader.setStorageBuffer(\"particlesIn\", this._bufferComputeShader[index]);\n    this._updateComputeShader.setStorageBuffer(\"particlesOut\", this._bufferComputeShader[index ^ 1]);\n    this._updateComputeShader.dispatch(Math.ceil(currentActiveCount / 64));\n  }\n  releaseBuffers() {\n    var _a;\n    for (let i = 0; i < this._bufferComputeShader.length; ++i) {\n      this._bufferComputeShader[i].dispose();\n    }\n    this._bufferComputeShader.length = 0;\n    (_a = this._simParamsComputeShader) === null || _a === void 0 ? void 0 : _a.dispose();\n    this._simParamsComputeShader = null;\n    this._updateComputeShader = null;\n  }\n  releaseVertexBuffers() {\n    this._renderVertexBuffers.length = 0;\n  }\n}\nRegisterClass(\"BABYLON.ComputeShaderParticleSystem\", ComputeShaderParticleSystem);","map":{"version":3,"names":["StorageBuffer","ComputeShader","UniformBuffer","UniformBufferEffectCommonAccessor","RegisterClass","ComputeShaderParticleSystem","constructor","parent","engine","_bufferComputeShader","_renderVertexBuffers","alignDataInBuffer","_parent","_engine","contextLost","_updateComputeShader","undefined","length","isUpdateBufferCreated","isUpdateBufferReady","_b","_a","isReady","createUpdateBuffer","defines","bindingsMapping","params","group","binding","particlesIn","particlesOut","randomTexture","randomTexture2","_sizeGradientsTexture","_angularSpeedGradientsTexture","_velocityGradientsTexture","_limitVelocityGradientsTexture","_dragGradientsTexture","noiseTexture","split","_simParamsComputeShader","dispose","addUniform","_colorGradientsTexture","isAnimationSheetEnabled","isLocal","particleEmitterType","buildUniformLayout","setUniformBuffer","createVertexBuffers","updateBuffer","renderVertexBuffers","push","createParticleBuffer","data","buffer","update","getBuffer","bindDrawBuffers","index","effect","indexBuffer","bindBuffers","preUpdateParticleBuffer","updateParticleBuffer","targetBuffer","currentActiveCount","setTexture","_randomTexture","_randomTexture2","setStorageBuffer","dispatch","Math","ceil","releaseBuffers","i","releaseVertexBuffers"],"sources":["../../../../dev/core/src/Particles/computeShaderParticleSystem.ts"],"sourcesContent":["import type { ThinEngine } from \"../Engines/thinEngine\";\r\nimport { StorageBuffer } from \"../Buffers/storageBuffer\";\r\nimport { ComputeShader } from \"../Compute/computeShader\";\r\nimport { UniformBuffer } from \"../Materials/uniformBuffer\";\r\nimport type { IGPUParticleSystemPlatform } from \"./IGPUParticleSystemPlatform\";\r\nimport type { Buffer, VertexBuffer } from \"../Buffers/buffer\";\r\nimport type { GPUParticleSystem } from \"./gpuParticleSystem\";\r\n\r\nimport type { DataArray, Nullable } from \"../types\";\r\nimport type { DataBuffer } from \"../Buffers/dataBuffer\";\r\nimport { Constants } from \"../Engines/constants\";\r\nimport { UniformBufferEffectCommonAccessor } from \"../Materials/uniformBufferEffectCommonAccessor\";\r\nimport type { ComputeBindingMapping } from \"../Engines/Extensions/engine.computeShader\";\r\nimport type { Effect } from \"../Materials/effect\";\r\nimport { RegisterClass } from \"../Misc/typeStore\";\r\n\r\nimport \"../ShadersWGSL/gpuUpdateParticles.compute\";\r\n\r\n/** @internal */\r\nexport class ComputeShaderParticleSystem implements IGPUParticleSystemPlatform {\r\n    private _parent: GPUParticleSystem;\r\n    private _engine: ThinEngine;\r\n    private _updateComputeShader: ComputeShader;\r\n    private _simParamsComputeShader: UniformBuffer;\r\n    private _bufferComputeShader: StorageBuffer[] = [];\r\n    private _renderVertexBuffers: Array<{ [key: string]: VertexBuffer }> = [];\r\n\r\n    public readonly alignDataInBuffer = true;\r\n\r\n    constructor(parent: GPUParticleSystem, engine: ThinEngine) {\r\n        this._parent = parent;\r\n        this._engine = engine;\r\n    }\r\n\r\n    public contextLost(): void {\r\n        this._updateComputeShader = undefined as any;\r\n        this._bufferComputeShader.length = 0;\r\n        this._renderVertexBuffers.length = 0;\r\n    }\r\n\r\n    public isUpdateBufferCreated(): boolean {\r\n        return !!this._updateComputeShader;\r\n    }\r\n\r\n    public isUpdateBufferReady(): boolean {\r\n        return this._updateComputeShader?.isReady() ?? false;\r\n    }\r\n\r\n    public createUpdateBuffer(defines: string): UniformBufferEffectCommonAccessor {\r\n        const bindingsMapping: ComputeBindingMapping = {\r\n            params: { group: 0, binding: 0 },\r\n            particlesIn: { group: 0, binding: 1 },\r\n            particlesOut: { group: 0, binding: 2 },\r\n            randomTexture: { group: 0, binding: 3 },\r\n            randomTexture2: { group: 0, binding: 4 },\r\n        };\r\n        if (this._parent._sizeGradientsTexture) {\r\n            bindingsMapping[\"sizeGradientTexture\"] = { group: 1, binding: 1 };\r\n        }\r\n        if (this._parent._angularSpeedGradientsTexture) {\r\n            bindingsMapping[\"angularSpeedGradientTexture\"] = { group: 1, binding: 3 };\r\n        }\r\n        if (this._parent._velocityGradientsTexture) {\r\n            bindingsMapping[\"velocityGradientTexture\"] = { group: 1, binding: 5 };\r\n        }\r\n        if (this._parent._limitVelocityGradientsTexture) {\r\n            bindingsMapping[\"limitVelocityGradientTexture\"] = { group: 1, binding: 7 };\r\n        }\r\n        if (this._parent._dragGradientsTexture) {\r\n            bindingsMapping[\"dragGradientTexture\"] = { group: 1, binding: 9 };\r\n        }\r\n        if (this._parent.noiseTexture) {\r\n            bindingsMapping[\"noiseTexture\"] = { group: 1, binding: 11 };\r\n        }\r\n\r\n        this._updateComputeShader = new ComputeShader(\"updateParticles\", this._engine, \"gpuUpdateParticles\", { bindingsMapping, defines: defines.split(\"\\n\") });\r\n\r\n        this._simParamsComputeShader?.dispose();\r\n        this._simParamsComputeShader = new UniformBuffer(this._engine);\r\n\r\n        this._simParamsComputeShader.addUniform(\"currentCount\", 1);\r\n        this._simParamsComputeShader.addUniform(\"timeDelta\", 1);\r\n        this._simParamsComputeShader.addUniform(\"stopFactor\", 1);\r\n        this._simParamsComputeShader.addUniform(\"randomTextureSize\", 1);\r\n        this._simParamsComputeShader.addUniform(\"lifeTime\", 2);\r\n        this._simParamsComputeShader.addUniform(\"emitPower\", 2);\r\n        if (!this._parent._colorGradientsTexture) {\r\n            this._simParamsComputeShader.addUniform(\"color1\", 4);\r\n            this._simParamsComputeShader.addUniform(\"color2\", 4);\r\n        }\r\n        this._simParamsComputeShader.addUniform(\"sizeRange\", 2);\r\n        this._simParamsComputeShader.addUniform(\"scaleRange\", 4);\r\n        this._simParamsComputeShader.addUniform(\"angleRange\", 4);\r\n        this._simParamsComputeShader.addUniform(\"gravity\", 3);\r\n        if (this._parent._limitVelocityGradientsTexture) {\r\n            this._simParamsComputeShader.addUniform(\"limitVelocityDamping\", 1);\r\n        }\r\n        if (this._parent.isAnimationSheetEnabled) {\r\n            this._simParamsComputeShader.addUniform(\"cellInfos\", 4);\r\n        }\r\n        if (this._parent.noiseTexture) {\r\n            this._simParamsComputeShader.addUniform(\"noiseStrength\", 3);\r\n        }\r\n        if (!this._parent.isLocal) {\r\n            this._simParamsComputeShader.addUniform(\"emitterWM\", 16);\r\n        }\r\n        if (this._parent.particleEmitterType) {\r\n            this._parent.particleEmitterType.buildUniformLayout(this._simParamsComputeShader);\r\n        }\r\n\r\n        this._updateComputeShader.setUniformBuffer(\"params\", this._simParamsComputeShader);\r\n\r\n        return new UniformBufferEffectCommonAccessor(this._simParamsComputeShader);\r\n    }\r\n\r\n    public createVertexBuffers(updateBuffer: Buffer, renderVertexBuffers: { [key: string]: VertexBuffer }): void {\r\n        this._renderVertexBuffers.push(renderVertexBuffers);\r\n    }\r\n\r\n    public createParticleBuffer(data: number[]): DataArray | DataBuffer {\r\n        const buffer = new StorageBuffer(this._engine, data.length * 4, Constants.BUFFER_CREATIONFLAG_READWRITE | Constants.BUFFER_CREATIONFLAG_VERTEX);\r\n\r\n        buffer.update(data);\r\n        this._bufferComputeShader.push(buffer);\r\n\r\n        return buffer.getBuffer();\r\n    }\r\n\r\n    public bindDrawBuffers(index: number, effect: Effect, indexBuffer: Nullable<DataBuffer>): void {\r\n        this._engine.bindBuffers(this._renderVertexBuffers[index], indexBuffer, effect);\r\n    }\r\n\r\n    public preUpdateParticleBuffer(): void {}\r\n\r\n    public updateParticleBuffer(index: number, targetBuffer: Buffer, currentActiveCount: number): void {\r\n        this._simParamsComputeShader.update();\r\n\r\n        this._updateComputeShader.setTexture(\"randomTexture\", this._parent._randomTexture, false);\r\n        this._updateComputeShader.setTexture(\"randomTexture2\", this._parent._randomTexture2, false);\r\n        if (this._parent._sizeGradientsTexture) {\r\n            this._updateComputeShader.setTexture(\"sizeGradientTexture\", this._parent._sizeGradientsTexture);\r\n        }\r\n\r\n        if (this._parent._angularSpeedGradientsTexture) {\r\n            this._updateComputeShader.setTexture(\"angularSpeedGradientTexture\", this._parent._angularSpeedGradientsTexture);\r\n        }\r\n\r\n        if (this._parent._velocityGradientsTexture) {\r\n            this._updateComputeShader.setTexture(\"velocityGradientTexture\", this._parent._velocityGradientsTexture);\r\n        }\r\n\r\n        if (this._parent._limitVelocityGradientsTexture) {\r\n            this._updateComputeShader.setTexture(\"limitVelocityGradientTexture\", this._parent._limitVelocityGradientsTexture);\r\n        }\r\n\r\n        if (this._parent._dragGradientsTexture) {\r\n            this._updateComputeShader.setTexture(\"dragGradientTexture\", this._parent._dragGradientsTexture);\r\n        }\r\n\r\n        if (this._parent.noiseTexture) {\r\n            this._updateComputeShader.setTexture(\"noiseTexture\", this._parent.noiseTexture);\r\n        }\r\n\r\n        this._updateComputeShader.setStorageBuffer(\"particlesIn\", this._bufferComputeShader[index]);\r\n        this._updateComputeShader.setStorageBuffer(\"particlesOut\", this._bufferComputeShader[index ^ 1]);\r\n\r\n        this._updateComputeShader.dispatch(Math.ceil(currentActiveCount / 64));\r\n    }\r\n\r\n    public releaseBuffers(): void {\r\n        for (let i = 0; i < this._bufferComputeShader.length; ++i) {\r\n            this._bufferComputeShader[i].dispose();\r\n        }\r\n\r\n        this._bufferComputeShader.length = 0;\r\n\r\n        this._simParamsComputeShader?.dispose();\r\n        (<any>this._simParamsComputeShader) = null;\r\n\r\n        (<any>this._updateComputeShader) = null;\r\n    }\r\n\r\n    public releaseVertexBuffers(): void {\r\n        this._renderVertexBuffers.length = 0;\r\n    }\r\n}\r\n\r\nRegisterClass(\"BABYLON.ComputeShaderParticleSystem\", ComputeShaderParticleSystem);\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}