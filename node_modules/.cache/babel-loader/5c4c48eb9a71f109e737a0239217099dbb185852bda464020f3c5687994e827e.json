{"ast":null,"code":"import { Button } from \"./button.js\";\nimport { RegisterClass } from \"@babylonjs/core/Misc/typeStore.js\";\nimport { Observable } from \"@babylonjs/core/Misc/observable.js\";\n/**\n * Class used to create a focusable button that can easily handle keyboard events\n * @since 5.0.0\n */\nexport class FocusableButton extends Button {\n  constructor(name) {\n    super(name);\n    this.name = name;\n    /** Highlight color when button is focused */\n    this.focusedColor = null;\n    this._isFocused = false;\n    this._unfocusedColor = null;\n    /** Observable raised when the control gets the focus */\n    this.onFocusObservable = new Observable();\n    /** Observable raised when the control loses the focus */\n    this.onBlurObservable = new Observable();\n    /** Observable raised when a key event was processed */\n    this.onKeyboardEventProcessedObservable = new Observable();\n    this._unfocusedColor = this.color;\n  }\n  /** @internal */\n  onBlur() {\n    if (this._isFocused) {\n      this._isFocused = false;\n      if (this.focusedColor && this._unfocusedColor != null) {\n        // Set color back to saved unfocused color\n        this.color = this._unfocusedColor;\n      }\n      this.onBlurObservable.notifyObservers(this);\n    }\n  }\n  /** @internal */\n  onFocus() {\n    this._isFocused = true;\n    if (this.focusedColor) {\n      // Save the unfocused color\n      this._unfocusedColor = this.color;\n      this.color = this.focusedColor;\n    }\n    this.onFocusObservable.notifyObservers(this);\n  }\n  /**\n   * Function called to get the list of controls that should not steal the focus from this control\n   * @returns an array of controls\n   */\n  keepsFocusWith() {\n    return null;\n  }\n  /**\n   * Function to focus a button programmatically\n   */\n  focus() {\n    this._host.moveFocusToControl(this);\n  }\n  /**\n   * Function to unfocus a button programmatically\n   */\n  blur() {\n    this._host.focusedControl = null;\n  }\n  /**\n   * Handles the keyboard event\n   * @param evt Defines the KeyboardEvent\n   */\n  processKeyboard(evt) {\n    this.onKeyboardEventProcessedObservable.notifyObservers(evt, -1, this);\n  }\n  /**\n   * @internal\n   */\n  _onPointerDown(target, coordinates, pointerId, buttonIndex, pi) {\n    if (!this.isReadOnly) {\n      // Clicking on button should focus\n      this.focus();\n    }\n    return super._onPointerDown(target, coordinates, pointerId, buttonIndex, pi);\n  }\n  /** @internal */\n  displose() {\n    super.dispose();\n    this.onBlurObservable.clear();\n    this.onFocusObservable.clear();\n    this.onKeyboardEventProcessedObservable.clear();\n  }\n}\nRegisterClass(\"BABYLON.GUI.FocusableButton\", FocusableButton);","map":{"version":3,"names":["Button","RegisterClass","Observable","FocusableButton","constructor","name","focusedColor","_isFocused","_unfocusedColor","onFocusObservable","onBlurObservable","onKeyboardEventProcessedObservable","color","onBlur","notifyObservers","onFocus","keepsFocusWith","focus","_host","moveFocusToControl","blur","focusedControl","processKeyboard","evt","_onPointerDown","target","coordinates","pointerId","buttonIndex","pi","isReadOnly","displose","dispose","clear"],"sources":["../../../../../dev/gui/src/2D/controls/focusableButton.ts"],"sourcesContent":["import type { Nullable } from \"core/types\";\r\nimport type { Vector2 } from \"core/Maths/math.vector\";\r\n\r\nimport { Button } from \"./button\";\r\nimport type { Control } from \"./control\";\r\nimport { RegisterClass } from \"core/Misc/typeStore\";\r\nimport type { PointerInfoBase } from \"core/Events/pointerEvents\";\r\nimport type { IFocusableControl } from \"./focusableControl\";\r\nimport { Observable } from \"core/Misc/observable\";\r\nimport type { IKeyboardEvent } from \"core/Events/deviceInputEvents\";\r\n\r\n/**\r\n * Class used to create a focusable button that can easily handle keyboard events\r\n * @since 5.0.0\r\n */\r\nexport class FocusableButton extends Button implements IFocusableControl {\r\n    /** Highlight color when button is focused */\r\n    public focusedColor: Nullable<string> = null;\r\n    private _isFocused = false;\r\n    private _unfocusedColor: Nullable<string> = null;\r\n\r\n    /** Observable raised when the control gets the focus */\r\n    public onFocusObservable = new Observable<Button>();\r\n    /** Observable raised when the control loses the focus */\r\n    public onBlurObservable = new Observable<Button>();\r\n    /** Observable raised when a key event was processed */\r\n    public onKeyboardEventProcessedObservable = new Observable<IKeyboardEvent>();\r\n\r\n    constructor(public name?: string) {\r\n        super(name);\r\n\r\n        this._unfocusedColor = this.color;\r\n    }\r\n\r\n    /** @internal */\r\n    public onBlur(): void {\r\n        if (this._isFocused) {\r\n            this._isFocused = false;\r\n            if (this.focusedColor && this._unfocusedColor != null) {\r\n                // Set color back to saved unfocused color\r\n                this.color = this._unfocusedColor;\r\n            }\r\n            this.onBlurObservable.notifyObservers(this);\r\n        }\r\n    }\r\n\r\n    /** @internal */\r\n    public onFocus(): void {\r\n        this._isFocused = true;\r\n\r\n        if (this.focusedColor) {\r\n            // Save the unfocused color\r\n            this._unfocusedColor = this.color;\r\n            this.color = this.focusedColor;\r\n        }\r\n        this.onFocusObservable.notifyObservers(this);\r\n    }\r\n\r\n    /**\r\n     * Function called to get the list of controls that should not steal the focus from this control\r\n     * @returns an array of controls\r\n     */\r\n    public keepsFocusWith(): Nullable<Control[]> {\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Function to focus a button programmatically\r\n     */\r\n    public focus() {\r\n        this._host.moveFocusToControl(this);\r\n    }\r\n\r\n    /**\r\n     * Function to unfocus a button programmatically\r\n     */\r\n    public blur() {\r\n        this._host.focusedControl = null;\r\n    }\r\n\r\n    /**\r\n     * Handles the keyboard event\r\n     * @param evt Defines the KeyboardEvent\r\n     */\r\n    public processKeyboard(evt: IKeyboardEvent): void {\r\n        this.onKeyboardEventProcessedObservable.notifyObservers(evt, -1, this);\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _onPointerDown(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number, pi: PointerInfoBase): boolean {\r\n        if (!this.isReadOnly) {\r\n            // Clicking on button should focus\r\n            this.focus();\r\n        }\r\n\r\n        return super._onPointerDown(target, coordinates, pointerId, buttonIndex, pi);\r\n    }\r\n\r\n    /** @internal */\r\n    public displose() {\r\n        super.dispose();\r\n\r\n        this.onBlurObservable.clear();\r\n        this.onFocusObservable.clear();\r\n        this.onKeyboardEventProcessedObservable.clear();\r\n    }\r\n}\r\nRegisterClass(\"BABYLON.GUI.FocusableButton\", FocusableButton);\r\n"],"mappings":"AAGA,SAASA,MAAM,QAAQ,aAAW;AAElC,SAASC,aAAa,QAAE;AAGxB,SAASC,UAAU,QAAE;AAGrB;;;;AAIA,OAAM,MAAOC,eAAgB,SAAQH,MAAM;EAavCI,YAAmBC,IAAa;IAC5B,KAAK,CAACA,IAAI,CAAC;IADI,KAAAA,IAAI,GAAJA,IAAI;IAZvB;IACO,KAAAC,YAAY,GAAqB,IAAI;IACpC,KAAAC,UAAU,GAAG,KAAK;IAClB,KAAAC,eAAe,GAAqB,IAAI;IAEhD;IACO,KAAAC,iBAAiB,GAAG,IAAIP,UAAU,EAAU;IACnD;IACO,KAAAQ,gBAAgB,GAAG,IAAIR,UAAU,EAAU;IAClD;IACO,KAAAS,kCAAkC,GAAG,IAAIT,UAAU,EAAkB;IAKxE,IAAI,CAACM,eAAe,GAAG,IAAI,CAACI,KAAK;EACrC;EAEA;EACOC,MAAMA,CAAA;IACT,IAAI,IAAI,CAACN,UAAU,EAAE;MACjB,IAAI,CAACA,UAAU,GAAG,KAAK;MACvB,IAAI,IAAI,CAACD,YAAY,IAAI,IAAI,CAACE,eAAe,IAAI,IAAI,EAAE;QACnD;QACA,IAAI,CAACI,KAAK,GAAG,IAAI,CAACJ,eAAe;;MAErC,IAAI,CAACE,gBAAgB,CAACI,eAAe,CAAC,IAAI,CAAC;;EAEnD;EAEA;EACOC,OAAOA,CAAA;IACV,IAAI,CAACR,UAAU,GAAG,IAAI;IAEtB,IAAI,IAAI,CAACD,YAAY,EAAE;MACnB;MACA,IAAI,CAACE,eAAe,GAAG,IAAI,CAACI,KAAK;MACjC,IAAI,CAACA,KAAK,GAAG,IAAI,CAACN,YAAY;;IAElC,IAAI,CAACG,iBAAiB,CAACK,eAAe,CAAC,IAAI,CAAC;EAChD;EAEA;;;;EAIOE,cAAcA,CAAA;IACjB,OAAO,IAAI;EACf;EAEA;;;EAGOC,KAAKA,CAAA;IACR,IAAI,CAACC,KAAK,CAACC,kBAAkB,CAAC,IAAI,CAAC;EACvC;EAEA;;;EAGOC,IAAIA,CAAA;IACP,IAAI,CAACF,KAAK,CAACG,cAAc,GAAG,IAAI;EACpC;EAEA;;;;EAIOC,eAAeA,CAACC,GAAmB;IACtC,IAAI,CAACZ,kCAAkC,CAACG,eAAe,CAACS,GAAG,EAAE,CAAC,CAAC,EAAE,IAAI,CAAC;EAC1E;EAEA;;;EAGOC,cAAcA,CAACC,MAAe,EAAEC,WAAoB,EAAEC,SAAiB,EAAEC,WAAmB,EAAEC,EAAmB;IACpH,IAAI,CAAC,IAAI,CAACC,UAAU,EAAE;MAClB;MACA,IAAI,CAACb,KAAK,EAAE;;IAGhB,OAAO,KAAK,CAACO,cAAc,CAACC,MAAM,EAAEC,WAAW,EAAEC,SAAS,EAAEC,WAAW,EAAEC,EAAE,CAAC;EAChF;EAEA;EACOE,QAAQA,CAAA;IACX,KAAK,CAACC,OAAO,EAAE;IAEf,IAAI,CAACtB,gBAAgB,CAACuB,KAAK,EAAE;IAC7B,IAAI,CAACxB,iBAAiB,CAACwB,KAAK,EAAE;IAC9B,IAAI,CAACtB,kCAAkC,CAACsB,KAAK,EAAE;EACnD;;AAEJhC,aAAa,CAAC,6BAA6B,EAAEE,eAAe,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}