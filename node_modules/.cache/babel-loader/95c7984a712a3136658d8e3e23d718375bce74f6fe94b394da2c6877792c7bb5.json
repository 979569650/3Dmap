{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { PrePassRenderTarget } from \"../Materials/Textures/prePassRenderTarget.js\";\nimport { _WarnImport } from \"../Misc/devTools.js\";\nimport { Color4 } from \"../Maths/math.color.js\";\nimport { Material } from \"../Materials/material.js\";\nimport { GeometryBufferRenderer } from \"../Rendering/geometryBufferRenderer.js\";\n/**\n * Renders a pre pass of the scene\n * This means every mesh in the scene will be rendered to a render target texture\n * And then this texture will be composited to the rendering canvas with post processes\n * It is necessary for effects like subsurface scattering or deferred shading\n */\nexport class PrePassRenderer {\n  /**\n   * Indicates if the prepass renderer is generating normals in world space or camera space (default: camera space)\n   */\n  get generateNormalsInWorldSpace() {\n    return this._generateNormalsInWorldSpace;\n  }\n  set generateNormalsInWorldSpace(value) {\n    if (this._generateNormalsInWorldSpace === value) {\n      return;\n    }\n    this._generateNormalsInWorldSpace = value;\n    this._markAllMaterialsAsPrePassDirty();\n  }\n  /**\n   * Returns the index of a texture in the multi render target texture array.\n   * @param type Texture type\n   * @returns The index\n   */\n  getIndex(type) {\n    return this._textureIndices[type];\n  }\n  /**\n   * How many samples are used for MSAA of the scene render target\n   */\n  get samples() {\n    return this.defaultRT.samples;\n  }\n  set samples(n) {\n    this.defaultRT.samples = n;\n  }\n  /**\n   * If set to true (default: false), the depth texture will be cleared with the depth value corresponding to the far plane (1 in normal mode, 0 in reverse depth buffer mode)\n   * If set to false, the depth texture is always cleared with 0.\n   */\n  get useSpecificClearForDepthTexture() {\n    return this._useSpecificClearForDepthTexture;\n  }\n  set useSpecificClearForDepthTexture(value) {\n    if (this._useSpecificClearForDepthTexture === value) {\n      return;\n    }\n    this._useSpecificClearForDepthTexture = value;\n    this._isDirty = true;\n  }\n  /**\n   * @returns the prepass render target for the rendering pass.\n   * If we are currently rendering a render target, it returns the PrePassRenderTarget\n   * associated with that render target. Otherwise, it returns the scene default PrePassRenderTarget\n   */\n  getRenderTarget() {\n    return this._currentTarget;\n  }\n  /**\n   * @internal\n   * Managed by the scene component\n   * @param prePassRenderTarget\n   */\n  _setRenderTarget(prePassRenderTarget) {\n    var _a, _b;\n    if (prePassRenderTarget) {\n      this._currentTarget = prePassRenderTarget;\n    } else {\n      this._currentTarget = this.defaultRT;\n      this._engine.currentRenderPassId = (_b = (_a = this._scene.activeCamera) === null || _a === void 0 ? void 0 : _a.renderPassId) !== null && _b !== void 0 ? _b : this._currentTarget.renderPassId;\n    }\n  }\n  /**\n   * Returns true if the currently rendered prePassRenderTarget is the one\n   * associated with the scene.\n   */\n  get currentRTisSceneRT() {\n    return this._currentTarget === this.defaultRT;\n  }\n  _refreshGeometryBufferRendererLink() {\n    if (!this.doNotUseGeometryRendererFallback) {\n      this._geometryBuffer = this._scene.enableGeometryBufferRenderer();\n      if (!this._geometryBuffer) {\n        // Not supported\n        this.doNotUseGeometryRendererFallback = true;\n        return;\n      }\n      this._geometryBuffer._linkPrePassRenderer(this);\n    } else {\n      if (this._geometryBuffer) {\n        this._geometryBuffer._unlinkPrePassRenderer();\n      }\n      this._geometryBuffer = null;\n      this._scene.disableGeometryBufferRenderer();\n    }\n  }\n  /**\n   * Indicates if the prepass is enabled\n   */\n  get enabled() {\n    return this._enabled;\n  }\n  /**\n   * Instantiates a prepass renderer\n   * @param scene The scene\n   */\n  constructor(scene) {\n    /**\n     * To save performance, we can excluded skinned meshes from the prepass\n     */\n    this.excludedSkinnedMesh = [];\n    /**\n     * Force material to be excluded from the prepass\n     * Can be useful when `useGeometryBufferFallback` is set to `true`\n     * and you don't want a material to show in the effect.\n     */\n    this.excludedMaterials = [];\n    /**\n     * Number of textures in the multi render target texture where the scene is directly rendered\n     */\n    this.mrtCount = 0;\n    this._mrtTypes = [];\n    this._mrtFormats = [];\n    this._mrtLayout = [];\n    this._mrtNames = [];\n    this._textureIndices = [];\n    this._generateNormalsInWorldSpace = false;\n    this._useSpecificClearForDepthTexture = false;\n    this._isDirty = true;\n    /**\n     * Configuration for prepass effects\n     */\n    this._effectConfigurations = [];\n    /**\n     * Prevents the PrePassRenderer from using the GeometryBufferRenderer as a fallback\n     */\n    this.doNotUseGeometryRendererFallback = true;\n    /**\n     * All the render targets generated by prepass\n     */\n    this.renderTargets = [];\n    this._clearColor = new Color4(0, 0, 0, 0);\n    this._clearDepthColor = new Color4(1e8, 0, 0, 1); // \"infinity\" value - depth in the depth texture is view.z, not a 0..1 value!\n    this._enabled = false;\n    this._needsCompositionForThisPass = false;\n    /**\n     * Set to true to disable gamma transform in PrePass.\n     * Can be useful in case you already proceed to gamma transform on a material level\n     * and your post processes don't need to be in linear color space.\n     */\n    this.disableGammaTransform = false;\n    this._scene = scene;\n    this._engine = scene.getEngine();\n    let type = 0;\n    if (this._engine._caps.textureFloat && this._engine._caps.textureFloatLinearFiltering) {\n      type = 1;\n    } else if (this._engine._caps.textureHalfFloat && this._engine._caps.textureHalfFloatLinearFiltering) {\n      type = 2;\n    }\n    if (type !== 1) {\n      for (let i = 0; i < PrePassRenderer.TextureFormats.length; ++i) {\n        if (PrePassRenderer.TextureFormats[i].type === 1) {\n          PrePassRenderer.TextureFormats[5].type = type;\n        }\n      }\n    }\n    PrePassRenderer._SceneComponentInitialization(this._scene);\n    this.defaultRT = this._createRenderTarget(\"sceneprePassRT\", null);\n    this._currentTarget = this.defaultRT;\n  }\n  /**\n   * Creates a new PrePassRenderTarget\n   * This should be the only way to instantiate a `PrePassRenderTarget`\n   * @param name Name of the `PrePassRenderTarget`\n   * @param renderTargetTexture RenderTarget the `PrePassRenderTarget` will be attached to.\n   * Can be `null` if the created `PrePassRenderTarget` is attached to the scene (default framebuffer).\n   * @internal\n   */\n  _createRenderTarget(name, renderTargetTexture) {\n    const rt = new PrePassRenderTarget(name, renderTargetTexture, {\n      width: this._engine.getRenderWidth(),\n      height: this._engine.getRenderHeight()\n    }, 0, this._scene, {\n      generateMipMaps: false,\n      generateStencilBuffer: this._engine.isStencilEnable,\n      defaultType: 0,\n      types: [],\n      drawOnlyOnFirstAttachmentByDefault: true\n    });\n    this.renderTargets.push(rt);\n    if (this._enabled) {\n      // The pre-pass renderer is already enabled, so make sure we create the render target with the correct number of textures\n      this._update();\n    }\n    return rt;\n  }\n  /**\n   * Indicates if rendering a prepass is supported\n   */\n  get isSupported() {\n    return this._scene.getEngine().getCaps().drawBuffersExtension;\n  }\n  /**\n   * Sets the proper output textures to draw in the engine.\n   * @param effect The effect that is drawn. It can be or not be compatible with drawing to several output textures.\n   * @param subMesh Submesh on which the effect is applied\n   */\n  bindAttachmentsForEffect(effect, subMesh) {\n    const material = subMesh.getMaterial();\n    const isPrePassCapable = material && material.isPrePassCapable;\n    const excluded = material && this.excludedMaterials.indexOf(material) !== -1;\n    if (this.enabled && this._currentTarget.enabled) {\n      if (effect._multiTarget && isPrePassCapable && !excluded) {\n        this._engine.bindAttachments(this._multiRenderAttachments);\n      } else {\n        if (this._engine._currentRenderTarget) {\n          this._engine.bindAttachments(this._defaultAttachments);\n        } else {\n          this._engine.restoreSingleAttachment();\n        }\n        if (this._geometryBuffer && this.currentRTisSceneRT && !excluded) {\n          this._geometryBuffer.renderList.push(subMesh.getRenderingMesh());\n        }\n      }\n    }\n  }\n  _reinitializeAttachments() {\n    const multiRenderLayout = [];\n    const clearLayout = [false];\n    const clearDepthLayout = [false];\n    const defaultLayout = [true];\n    for (let i = 0; i < this.mrtCount; i++) {\n      multiRenderLayout.push(true);\n      if (i > 0) {\n        if (this._useSpecificClearForDepthTexture && this._mrtLayout[i] === 5) {\n          clearLayout.push(false);\n          clearDepthLayout.push(true);\n        } else {\n          clearLayout.push(true);\n          clearDepthLayout.push(false);\n        }\n        defaultLayout.push(false);\n      }\n    }\n    this._multiRenderAttachments = this._engine.buildTextureLayout(multiRenderLayout);\n    this._clearAttachments = this._engine.buildTextureLayout(clearLayout);\n    this._clearDepthAttachments = this._engine.buildTextureLayout(clearDepthLayout);\n    this._defaultAttachments = this._engine.buildTextureLayout(defaultLayout);\n  }\n  _resetLayout() {\n    for (let i = 0; i < PrePassRenderer.TextureFormats.length; i++) {\n      this._textureIndices[PrePassRenderer.TextureFormats[i].purpose] = -1;\n    }\n    this._textureIndices[4] = 0;\n    this._mrtLayout = [4];\n    this._mrtTypes = [PrePassRenderer.TextureFormats[4].type];\n    this._mrtFormats = [PrePassRenderer.TextureFormats[4].format];\n    this._mrtNames = [PrePassRenderer.TextureFormats[4].name];\n    this.mrtCount = 1;\n  }\n  _updateGeometryBufferLayout() {\n    this._refreshGeometryBufferRendererLink();\n    if (this._geometryBuffer) {\n      this._geometryBuffer._resetLayout();\n      const texturesActivated = [];\n      for (let i = 0; i < this._mrtLayout.length; i++) {\n        texturesActivated.push(false);\n      }\n      this._geometryBuffer._linkInternalTexture(this.defaultRT.getInternalTexture());\n      const matches = [{\n        prePassConstant: 5,\n        geometryBufferConstant: GeometryBufferRenderer.DEPTH_TEXTURE_TYPE\n      }, {\n        prePassConstant: 6,\n        geometryBufferConstant: GeometryBufferRenderer.NORMAL_TEXTURE_TYPE\n      }, {\n        prePassConstant: 1,\n        geometryBufferConstant: GeometryBufferRenderer.POSITION_TEXTURE_TYPE\n      }, {\n        prePassConstant: 3,\n        geometryBufferConstant: GeometryBufferRenderer.REFLECTIVITY_TEXTURE_TYPE\n      }, {\n        prePassConstant: 2,\n        geometryBufferConstant: GeometryBufferRenderer.VELOCITY_TEXTURE_TYPE\n      }];\n      // replace textures in the geometryBuffer RT\n      for (let i = 0; i < matches.length; i++) {\n        const index = this._mrtLayout.indexOf(matches[i].prePassConstant);\n        if (index !== -1) {\n          this._geometryBuffer._forceTextureType(matches[i].geometryBufferConstant, index);\n          texturesActivated[index] = true;\n        }\n      }\n      this._geometryBuffer._setAttachments(this._engine.buildTextureLayout(texturesActivated));\n    }\n  }\n  /**\n   * Restores attachments for single texture draw.\n   */\n  restoreAttachments() {\n    if (this.enabled && this._currentTarget.enabled && this._defaultAttachments) {\n      if (this._engine._currentRenderTarget) {\n        this._engine.bindAttachments(this._defaultAttachments);\n      } else {\n        this._engine.restoreSingleAttachment();\n      }\n    }\n  }\n  /**\n   * @internal\n   */\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  _beforeDraw(camera, faceIndex, layer) {\n    // const previousEnabled = this._enabled && this._currentTarget.enabled;\n    if (this._isDirty) {\n      this._update();\n    }\n    if (!this._enabled || !this._currentTarget.enabled) {\n      return;\n    }\n    if (this._geometryBuffer) {\n      this._geometryBuffer.renderList = [];\n    }\n    this._setupOutputForThisPass(this._currentTarget, camera);\n  }\n  _prepareFrame(prePassRenderTarget, faceIndex, layer) {\n    if (prePassRenderTarget.renderTargetTexture) {\n      prePassRenderTarget.renderTargetTexture._prepareFrame(this._scene, faceIndex, layer, prePassRenderTarget.renderTargetTexture.useCameraPostProcesses);\n    } else if (this._postProcessesSourceForThisPass.length) {\n      this._scene.postProcessManager._prepareFrame();\n    } else {\n      this._engine.restoreDefaultFramebuffer();\n    }\n  }\n  /**\n   * Sets an intermediary texture between prepass and postprocesses. This texture\n   * will be used as input for post processes\n   * @param rt\n   * @returns true if there are postprocesses that will use this texture,\n   * false if there is no postprocesses - and the function has no effect\n   */\n  setCustomOutput(rt) {\n    const firstPP = this._postProcessesSourceForThisPass[0];\n    if (!firstPP) {\n      return false;\n    }\n    firstPP.inputTexture = rt.renderTarget;\n    return true;\n  }\n  _renderPostProcesses(prePassRenderTarget, faceIndex) {\n    var _a;\n    const firstPP = this._postProcessesSourceForThisPass[0];\n    const outputTexture = firstPP ? firstPP.inputTexture : prePassRenderTarget.renderTargetTexture ? prePassRenderTarget.renderTargetTexture.renderTarget : null;\n    // Build post process chain for this prepass post draw\n    let postProcessChain = this._currentTarget._beforeCompositionPostProcesses;\n    if (this._needsCompositionForThisPass) {\n      postProcessChain = postProcessChain.concat([this._currentTarget.imageProcessingPostProcess]);\n    }\n    // Activates and renders the chain\n    if (postProcessChain.length) {\n      this._scene.postProcessManager._prepareFrame((_a = this._currentTarget.renderTarget) === null || _a === void 0 ? void 0 : _a.texture, postProcessChain);\n      this._scene.postProcessManager.directRender(postProcessChain, outputTexture, false, faceIndex);\n    }\n  }\n  /**\n   * @internal\n   */\n  _afterDraw(faceIndex, layer) {\n    if (this._enabled && this._currentTarget.enabled) {\n      this._prepareFrame(this._currentTarget, faceIndex, layer);\n      this._renderPostProcesses(this._currentTarget, faceIndex);\n    }\n  }\n  /**\n   * Clears the current prepass render target (in the sense of settings pixels to the scene clear color value)\n   * @internal\n   */\n  _clear() {\n    if (this._enabled && this._currentTarget.enabled) {\n      this._bindFrameBuffer();\n      // Clearing other attachment with 0 on all other attachments\n      this._engine.bindAttachments(this._clearAttachments);\n      this._engine.clear(this._clearColor, true, false, false);\n      if (this._useSpecificClearForDepthTexture) {\n        this._engine.bindAttachments(this._clearDepthAttachments);\n        this._engine.clear(this._clearDepthColor, true, false, false);\n      }\n      // Regular clear color with the scene clear color of the 1st attachment\n      this._engine.bindAttachments(this._defaultAttachments);\n    }\n  }\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  _bindFrameBuffer() {\n    if (this._enabled && this._currentTarget.enabled) {\n      this._currentTarget._checkSize();\n      const internalTexture = this._currentTarget.renderTarget;\n      if (internalTexture) {\n        this._engine.bindFramebuffer(internalTexture);\n      }\n    }\n  }\n  _setEnabled(enabled) {\n    this._enabled = enabled;\n  }\n  _setRenderTargetEnabled(prePassRenderTarget, enabled) {\n    prePassRenderTarget.enabled = enabled;\n    if (!enabled) {\n      this._unlinkInternalTexture(prePassRenderTarget);\n    }\n  }\n  /**\n   * Adds an effect configuration to the prepass render target.\n   * If an effect has already been added, it won't add it twice and will return the configuration\n   * already present.\n   * @param cfg the effect configuration\n   * @returns the effect configuration now used by the prepass\n   */\n  addEffectConfiguration(cfg) {\n    // Do not add twice\n    for (let i = 0; i < this._effectConfigurations.length; i++) {\n      if (this._effectConfigurations[i].name === cfg.name) {\n        return this._effectConfigurations[i];\n      }\n    }\n    this._effectConfigurations.push(cfg);\n    return cfg;\n  }\n  /**\n   * Retrieves an effect configuration by name\n   * @param name\n   * @returns the effect configuration, or null if not present\n   */\n  getEffectConfiguration(name) {\n    for (let i = 0; i < this._effectConfigurations.length; i++) {\n      if (this._effectConfigurations[i].name === name) {\n        return this._effectConfigurations[i];\n      }\n    }\n    return null;\n  }\n  _enable() {\n    const previousMrtCount = this.mrtCount;\n    for (let i = 0; i < this._effectConfigurations.length; i++) {\n      if (this._effectConfigurations[i].enabled) {\n        this._enableTextures(this._effectConfigurations[i].texturesRequired);\n      }\n    }\n    for (let i = 0; i < this.renderTargets.length; i++) {\n      if (this.mrtCount !== previousMrtCount || this.renderTargets[i].count !== this.mrtCount) {\n        this.renderTargets[i].updateCount(this.mrtCount, {\n          types: this._mrtTypes,\n          formats: this._mrtFormats\n        }, this._mrtNames.concat(\"prePass_DepthBuffer\"));\n      }\n      this.renderTargets[i]._resetPostProcessChain();\n      for (let j = 0; j < this._effectConfigurations.length; j++) {\n        if (this._effectConfigurations[j].enabled) {\n          // TODO : subsurface scattering has 1 scene-wide effect configuration\n          // solution : do not stock postProcess on effectConfiguration, but in the prepassRenderTarget (hashmap configuration => postProcess)\n          // And call createPostProcess whenever the post process does not exist in the RT\n          if (!this._effectConfigurations[j].postProcess && this._effectConfigurations[j].createPostProcess) {\n            this._effectConfigurations[j].createPostProcess();\n          }\n          if (this._effectConfigurations[j].postProcess) {\n            this.renderTargets[i]._beforeCompositionPostProcesses.push(this._effectConfigurations[j].postProcess);\n          }\n        }\n      }\n    }\n    this._reinitializeAttachments();\n    this._setEnabled(true);\n    this._updateGeometryBufferLayout();\n  }\n  _disable() {\n    this._setEnabled(false);\n    for (let i = 0; i < this.renderTargets.length; i++) {\n      this._setRenderTargetEnabled(this.renderTargets[i], false);\n    }\n    this._resetLayout();\n    for (let i = 0; i < this._effectConfigurations.length; i++) {\n      this._effectConfigurations[i].enabled = false;\n    }\n  }\n  _getPostProcessesSource(prePassRenderTarget, camera) {\n    if (camera) {\n      return camera._postProcesses;\n    } else if (prePassRenderTarget.renderTargetTexture) {\n      if (prePassRenderTarget.renderTargetTexture.useCameraPostProcesses) {\n        const camera = prePassRenderTarget.renderTargetTexture.activeCamera ? prePassRenderTarget.renderTargetTexture.activeCamera : this._scene.activeCamera;\n        return camera ? camera._postProcesses : [];\n      } else if (prePassRenderTarget.renderTargetTexture.postProcesses) {\n        return prePassRenderTarget.renderTargetTexture.postProcesses;\n      } else {\n        return [];\n      }\n    } else {\n      return this._scene.activeCamera ? this._scene.activeCamera._postProcesses : [];\n    }\n  }\n  _setupOutputForThisPass(prePassRenderTarget, camera) {\n    // Order is : draw ===> prePassRenderTarget._postProcesses ==> ipp ==> camera._postProcesses\n    const secondaryCamera = camera && this._scene.activeCameras && !!this._scene.activeCameras.length && this._scene.activeCameras.indexOf(camera) !== 0;\n    this._postProcessesSourceForThisPass = this._getPostProcessesSource(prePassRenderTarget, camera);\n    this._postProcessesSourceForThisPass = this._postProcessesSourceForThisPass.filter(pp => {\n      return pp != null;\n    });\n    this._scene.autoClear = true;\n    const cameraHasImageProcessing = this._hasImageProcessing(this._postProcessesSourceForThisPass);\n    this._needsCompositionForThisPass = !cameraHasImageProcessing && !this.disableGammaTransform && this._needsImageProcessing() && !secondaryCamera;\n    const firstCameraPP = this._getFirstPostProcess(this._postProcessesSourceForThisPass);\n    const firstPrePassPP = prePassRenderTarget._beforeCompositionPostProcesses && prePassRenderTarget._beforeCompositionPostProcesses[0];\n    let firstPP = null;\n    // Setting the scene-wide post process configuration\n    this._scene.imageProcessingConfiguration.applyByPostProcess = this._needsCompositionForThisPass || cameraHasImageProcessing;\n    // Create composition effect if needed\n    if (this._needsCompositionForThisPass && !prePassRenderTarget.imageProcessingPostProcess) {\n      prePassRenderTarget._createCompositionEffect();\n    }\n    // Setting the prePassRenderTarget as input texture of the first PP\n    if (firstPrePassPP) {\n      firstPP = firstPrePassPP;\n    } else if (this._needsCompositionForThisPass) {\n      firstPP = prePassRenderTarget.imageProcessingPostProcess;\n    } else if (firstCameraPP) {\n      firstPP = firstCameraPP;\n    }\n    this._bindFrameBuffer();\n    this._linkInternalTexture(prePassRenderTarget, firstPP);\n  }\n  _linkInternalTexture(prePassRenderTarget, postProcess) {\n    if (postProcess) {\n      postProcess.autoClear = false;\n      postProcess.inputTexture = prePassRenderTarget.renderTarget;\n    }\n    if (prePassRenderTarget._outputPostProcess !== postProcess) {\n      if (prePassRenderTarget._outputPostProcess) {\n        this._unlinkInternalTexture(prePassRenderTarget);\n      }\n      prePassRenderTarget._outputPostProcess = postProcess;\n    }\n    if (prePassRenderTarget._internalTextureDirty) {\n      this._updateGeometryBufferLayout();\n      prePassRenderTarget._internalTextureDirty = false;\n    }\n  }\n  /**\n   * @internal\n   */\n  _unlinkInternalTexture(prePassRenderTarget) {\n    if (prePassRenderTarget._outputPostProcess) {\n      prePassRenderTarget._outputPostProcess.autoClear = true;\n      prePassRenderTarget._outputPostProcess.restoreDefaultInputTexture();\n      prePassRenderTarget._outputPostProcess = null;\n    }\n  }\n  _needsImageProcessing() {\n    for (let i = 0; i < this._effectConfigurations.length; i++) {\n      if (this._effectConfigurations[i].enabled && this._effectConfigurations[i].needsImageProcessing) {\n        return true;\n      }\n    }\n    return false;\n  }\n  _hasImageProcessing(postProcesses) {\n    var _a;\n    let isIPPAlreadyPresent = false;\n    if (postProcesses) {\n      for (let i = 0; i < postProcesses.length; i++) {\n        if (((_a = postProcesses[i]) === null || _a === void 0 ? void 0 : _a.getClassName()) === \"ImageProcessingPostProcess\") {\n          isIPPAlreadyPresent = true;\n          break;\n        }\n      }\n    }\n    return isIPPAlreadyPresent;\n  }\n  /**\n   * Internal, gets the first post proces.\n   * @param postProcesses\n   * @returns the first post process to be run on this camera.\n   */\n  _getFirstPostProcess(postProcesses) {\n    for (let ppIndex = 0; ppIndex < postProcesses.length; ppIndex++) {\n      if (postProcesses[ppIndex] !== null) {\n        return postProcesses[ppIndex];\n      }\n    }\n    return null;\n  }\n  /**\n   * Marks the prepass renderer as dirty, triggering a check if the prepass is necessary for the next rendering.\n   */\n  markAsDirty() {\n    this._isDirty = true;\n  }\n  /**\n   * Enables a texture on the MultiRenderTarget for prepass\n   * @param types\n   */\n  _enableTextures(types) {\n    // For velocity : enable storage of previous matrices for instances\n    this._scene.needsPreviousWorldMatrices = false;\n    for (let i = 0; i < types.length; i++) {\n      const type = types[i];\n      if (this._textureIndices[type] === -1) {\n        this._textureIndices[type] = this._mrtLayout.length;\n        this._mrtLayout.push(type);\n        this._mrtTypes.push(PrePassRenderer.TextureFormats[type].type);\n        this._mrtFormats.push(PrePassRenderer.TextureFormats[type].format);\n        this._mrtNames.push(PrePassRenderer.TextureFormats[type].name);\n        this.mrtCount++;\n      }\n      if (type === 2) {\n        this._scene.needsPreviousWorldMatrices = true;\n      }\n    }\n  }\n  /**\n   * Makes sure that the prepass renderer is up to date if it has been dirtified.\n   */\n  update() {\n    if (this._isDirty) {\n      this._update();\n    }\n  }\n  _update() {\n    this._disable();\n    let enablePrePass = false;\n    this._scene.imageProcessingConfiguration.applyByPostProcess = false;\n    if (this._scene._depthPeelingRenderer && this._scene.useOrderIndependentTransparency) {\n      this._scene._depthPeelingRenderer.setPrePassRenderer(this);\n      enablePrePass = true;\n    }\n    for (let i = 0; i < this._scene.materials.length; i++) {\n      if (this._scene.materials[i].setPrePassRenderer(this)) {\n        enablePrePass = true;\n      }\n    }\n    if (enablePrePass) {\n      this._setRenderTargetEnabled(this.defaultRT, true);\n    }\n    let postProcesses;\n    for (let i = 0; i < this.renderTargets.length; i++) {\n      if (this.renderTargets[i].renderTargetTexture) {\n        postProcesses = this._getPostProcessesSource(this.renderTargets[i]);\n      } else {\n        const camera = this._scene.activeCamera;\n        if (!camera) {\n          continue;\n        }\n        postProcesses = camera._postProcesses;\n      }\n      if (!postProcesses) {\n        continue;\n      }\n      postProcesses = postProcesses.filter(pp => {\n        return pp != null;\n      });\n      if (postProcesses) {\n        for (let j = 0; j < postProcesses.length; j++) {\n          if (postProcesses[j].setPrePassRenderer(this)) {\n            this._setRenderTargetEnabled(this.renderTargets[i], true);\n            enablePrePass = true;\n          }\n        }\n        if (this._hasImageProcessing(postProcesses)) {\n          this._scene.imageProcessingConfiguration.applyByPostProcess = true;\n        }\n      }\n    }\n    this._markAllMaterialsAsPrePassDirty();\n    this._isDirty = false;\n    if (enablePrePass) {\n      this._enable();\n    }\n  }\n  _markAllMaterialsAsPrePassDirty() {\n    const materials = this._scene.materials;\n    for (let i = 0; i < materials.length; i++) {\n      materials[i].markAsDirty(Material.PrePassDirtyFlag);\n    }\n  }\n  /**\n   * Disposes the prepass renderer.\n   */\n  dispose() {\n    for (let i = this.renderTargets.length - 1; i >= 0; i--) {\n      this.renderTargets[i].dispose();\n    }\n    for (let i = 0; i < this._effectConfigurations.length; i++) {\n      if (this._effectConfigurations[i].dispose) {\n        this._effectConfigurations[i].dispose();\n      }\n    }\n  }\n}\n/**\n * @internal\n */\nPrePassRenderer._SceneComponentInitialization = _ => {\n  throw _WarnImport(\"PrePassRendererSceneComponent\");\n};\n/**\n * Describes the types and formats of the textures used by the pre-pass renderer\n */\nPrePassRenderer.TextureFormats = [{\n  purpose: 0,\n  type: 2,\n  format: 5,\n  name: \"prePass_Irradiance\"\n}, {\n  purpose: 1,\n  type: 2,\n  format: 5,\n  name: \"prePass_Position\"\n}, {\n  purpose: 2,\n  type: 0,\n  format: 5,\n  name: \"prePass_Velocity\"\n}, {\n  purpose: 3,\n  type: 0,\n  format: 5,\n  name: \"prePass_Reflectivity\"\n}, {\n  purpose: 4,\n  type: 2,\n  format: 5,\n  name: \"prePass_Color\"\n}, {\n  purpose: 5,\n  type: 1,\n  format: 6,\n  name: \"prePass_Depth\"\n}, {\n  purpose: 6,\n  type: 2,\n  format: 5,\n  name: \"prePass_Normal\"\n}, {\n  purpose: 7,\n  type: 0,\n  format: 5,\n  name: \"prePass_Albedo\"\n}];","map":{"version":3,"names":["PrePassRenderTarget","_WarnImport","Color4","Material","GeometryBufferRenderer","PrePassRenderer","generateNormalsInWorldSpace","_generateNormalsInWorldSpace","value","_markAllMaterialsAsPrePassDirty","getIndex","type","_textureIndices","samples","defaultRT","n","useSpecificClearForDepthTexture","_useSpecificClearForDepthTexture","_isDirty","getRenderTarget","_currentTarget","_setRenderTarget","prePassRenderTarget","_engine","currentRenderPassId","_b","_a","_scene","activeCamera","renderPassId","currentRTisSceneRT","_refreshGeometryBufferRendererLink","doNotUseGeometryRendererFallback","_geometryBuffer","enableGeometryBufferRenderer","_linkPrePassRenderer","_unlinkPrePassRenderer","disableGeometryBufferRenderer","enabled","_enabled","constructor","scene","excludedSkinnedMesh","excludedMaterials","mrtCount","_mrtTypes","_mrtFormats","_mrtLayout","_mrtNames","_effectConfigurations","renderTargets","_clearColor","_clearDepthColor","_needsCompositionForThisPass","disableGammaTransform","getEngine","_caps","textureFloat","textureFloatLinearFiltering","textureHalfFloat","textureHalfFloatLinearFiltering","i","TextureFormats","length","_SceneComponentInitialization","_createRenderTarget","name","renderTargetTexture","rt","width","getRenderWidth","height","getRenderHeight","generateMipMaps","generateStencilBuffer","isStencilEnable","defaultType","types","drawOnlyOnFirstAttachmentByDefault","push","_update","isSupported","getCaps","drawBuffersExtension","bindAttachmentsForEffect","effect","subMesh","material","getMaterial","isPrePassCapable","excluded","indexOf","_multiTarget","bindAttachments","_multiRenderAttachments","_currentRenderTarget","_defaultAttachments","restoreSingleAttachment","renderList","getRenderingMesh","_reinitializeAttachments","multiRenderLayout","clearLayout","clearDepthLayout","defaultLayout","buildTextureLayout","_clearAttachments","_clearDepthAttachments","_resetLayout","purpose","format","_updateGeometryBufferLayout","texturesActivated","_linkInternalTexture","getInternalTexture","matches","prePassConstant","geometryBufferConstant","DEPTH_TEXTURE_TYPE","NORMAL_TEXTURE_TYPE","POSITION_TEXTURE_TYPE","REFLECTIVITY_TEXTURE_TYPE","VELOCITY_TEXTURE_TYPE","index","_forceTextureType","_setAttachments","restoreAttachments","_beforeDraw","camera","faceIndex","layer","_setupOutputForThisPass","_prepareFrame","useCameraPostProcesses","_postProcessesSourceForThisPass","postProcessManager","restoreDefaultFramebuffer","setCustomOutput","firstPP","inputTexture","renderTarget","_renderPostProcesses","outputTexture","postProcessChain","_beforeCompositionPostProcesses","concat","imageProcessingPostProcess","texture","directRender","_afterDraw","_clear","_bindFrameBuffer","clear","_checkSize","internalTexture","bindFramebuffer","_setEnabled","_setRenderTargetEnabled","_unlinkInternalTexture","addEffectConfiguration","cfg","getEffectConfiguration","_enable","previousMrtCount","_enableTextures","texturesRequired","count","updateCount","formats","_resetPostProcessChain","j","postProcess","createPostProcess","_disable","_getPostProcessesSource","_postProcesses","postProcesses","secondaryCamera","activeCameras","filter","pp","autoClear","cameraHasImageProcessing","_hasImageProcessing","_needsImageProcessing","firstCameraPP","_getFirstPostProcess","firstPrePassPP","imageProcessingConfiguration","applyByPostProcess","_createCompositionEffect","_outputPostProcess","_internalTextureDirty","restoreDefaultInputTexture","needsImageProcessing","isIPPAlreadyPresent","getClassName","ppIndex","markAsDirty","needsPreviousWorldMatrices","update","enablePrePass","_depthPeelingRenderer","useOrderIndependentTransparency","setPrePassRenderer","materials","PrePassDirtyFlag","dispose","_"],"sources":["../../../../dev/core/src/Rendering/prePassRenderer.ts"],"sourcesContent":["import { PrePassRenderTarget } from \"../Materials/Textures/prePassRenderTarget\";\r\nimport type { Scene } from \"../scene\";\r\nimport type { Engine } from \"../Engines/engine\";\r\nimport { Constants } from \"../Engines/constants\";\r\nimport type { PostProcess } from \"../PostProcesses/postProcess\";\r\nimport type { Effect } from \"../Materials/effect\";\r\nimport { _WarnImport } from \"../Misc/devTools\";\r\nimport { Color4 } from \"../Maths/math.color\";\r\nimport type { Nullable } from \"../types\";\r\nimport type { AbstractMesh } from \"../Meshes/abstractMesh\";\r\nimport type { Camera } from \"../Cameras/camera\";\r\nimport { Material } from \"../Materials/material\";\r\nimport type { SubMesh } from \"../Meshes/subMesh\";\r\nimport type { PrePassEffectConfiguration } from \"./prePassEffectConfiguration\";\r\nimport type { RenderTargetTexture } from \"../Materials/Textures/renderTargetTexture\";\r\nimport { GeometryBufferRenderer } from \"../Rendering/geometryBufferRenderer\";\r\n\r\n/**\r\n * Renders a pre pass of the scene\r\n * This means every mesh in the scene will be rendered to a render target texture\r\n * And then this texture will be composited to the rendering canvas with post processes\r\n * It is necessary for effects like subsurface scattering or deferred shading\r\n */\r\nexport class PrePassRenderer {\r\n    /**\r\n     * @internal\r\n     */\r\n    public static _SceneComponentInitialization: (scene: Scene) => void = (_) => {\r\n        throw _WarnImport(\"PrePassRendererSceneComponent\");\r\n    };\r\n\r\n    /**\r\n     * To save performance, we can excluded skinned meshes from the prepass\r\n     */\r\n    public excludedSkinnedMesh: AbstractMesh[] = [];\r\n\r\n    /**\r\n     * Force material to be excluded from the prepass\r\n     * Can be useful when `useGeometryBufferFallback` is set to `true`\r\n     * and you don't want a material to show in the effect.\r\n     */\r\n    public excludedMaterials: Material[] = [];\r\n\r\n    private _scene: Scene;\r\n    private _engine: Engine;\r\n\r\n    /**\r\n     * Number of textures in the multi render target texture where the scene is directly rendered\r\n     */\r\n    public mrtCount: number = 0;\r\n\r\n    private _mrtTypes: number[] = [];\r\n    private _mrtFormats: number[] = [];\r\n    private _mrtLayout: number[] = [];\r\n    private _mrtNames: string[] = [];\r\n    private _textureIndices: number[] = [];\r\n\r\n    private _multiRenderAttachments: number[];\r\n    private _defaultAttachments: number[];\r\n    private _clearAttachments: number[];\r\n    private _clearDepthAttachments: number[];\r\n    private _generateNormalsInWorldSpace = false;\r\n\r\n    /**\r\n     * Indicates if the prepass renderer is generating normals in world space or camera space (default: camera space)\r\n     */\r\n    public get generateNormalsInWorldSpace() {\r\n        return this._generateNormalsInWorldSpace;\r\n    }\r\n\r\n    public set generateNormalsInWorldSpace(value: boolean) {\r\n        if (this._generateNormalsInWorldSpace === value) {\r\n            return;\r\n        }\r\n\r\n        this._generateNormalsInWorldSpace = value;\r\n        this._markAllMaterialsAsPrePassDirty();\r\n    }\r\n\r\n    /**\r\n     * Returns the index of a texture in the multi render target texture array.\r\n     * @param type Texture type\r\n     * @returns The index\r\n     */\r\n    public getIndex(type: number): number {\r\n        return this._textureIndices[type];\r\n    }\r\n\r\n    /**\r\n     * How many samples are used for MSAA of the scene render target\r\n     */\r\n    public get samples() {\r\n        return this.defaultRT.samples;\r\n    }\r\n\r\n    public set samples(n: number) {\r\n        this.defaultRT.samples = n;\r\n    }\r\n\r\n    private _useSpecificClearForDepthTexture = false;\r\n\r\n    /**\r\n     * If set to true (default: false), the depth texture will be cleared with the depth value corresponding to the far plane (1 in normal mode, 0 in reverse depth buffer mode)\r\n     * If set to false, the depth texture is always cleared with 0.\r\n     */\r\n    public get useSpecificClearForDepthTexture() {\r\n        return this._useSpecificClearForDepthTexture;\r\n    }\r\n\r\n    public set useSpecificClearForDepthTexture(value: boolean) {\r\n        if (this._useSpecificClearForDepthTexture === value) {\r\n            return;\r\n        }\r\n\r\n        this._useSpecificClearForDepthTexture = value;\r\n        this._isDirty = true;\r\n    }\r\n\r\n    /**\r\n     * Describes the types and formats of the textures used by the pre-pass renderer\r\n     */\r\n    public static TextureFormats = [\r\n        {\r\n            purpose: Constants.PREPASS_IRRADIANCE_TEXTURE_TYPE,\r\n            type: Constants.TEXTURETYPE_HALF_FLOAT,\r\n            format: Constants.TEXTUREFORMAT_RGBA,\r\n            name: \"prePass_Irradiance\",\r\n        },\r\n        {\r\n            purpose: Constants.PREPASS_POSITION_TEXTURE_TYPE,\r\n            type: Constants.TEXTURETYPE_HALF_FLOAT,\r\n            format: Constants.TEXTUREFORMAT_RGBA,\r\n            name: \"prePass_Position\",\r\n        },\r\n        {\r\n            purpose: Constants.PREPASS_VELOCITY_TEXTURE_TYPE,\r\n            type: Constants.TEXTURETYPE_UNSIGNED_INT,\r\n            format: Constants.TEXTUREFORMAT_RGBA,\r\n            name: \"prePass_Velocity\",\r\n        },\r\n        {\r\n            purpose: Constants.PREPASS_REFLECTIVITY_TEXTURE_TYPE,\r\n            type: Constants.TEXTURETYPE_UNSIGNED_INT,\r\n            format: Constants.TEXTUREFORMAT_RGBA,\r\n            name: \"prePass_Reflectivity\",\r\n        },\r\n        {\r\n            purpose: Constants.PREPASS_COLOR_TEXTURE_TYPE,\r\n            type: Constants.TEXTURETYPE_HALF_FLOAT,\r\n            format: Constants.TEXTUREFORMAT_RGBA,\r\n            name: \"prePass_Color\",\r\n        },\r\n        {\r\n            purpose: Constants.PREPASS_DEPTH_TEXTURE_TYPE,\r\n            type: Constants.TEXTURETYPE_FLOAT,\r\n            format: Constants.TEXTUREFORMAT_R,\r\n            name: \"prePass_Depth\",\r\n        },\r\n        {\r\n            purpose: Constants.PREPASS_NORMAL_TEXTURE_TYPE,\r\n            type: Constants.TEXTURETYPE_HALF_FLOAT,\r\n            format: Constants.TEXTUREFORMAT_RGBA,\r\n            name: \"prePass_Normal\",\r\n        },\r\n        {\r\n            purpose: Constants.PREPASS_ALBEDO_SQRT_TEXTURE_TYPE,\r\n            type: Constants.TEXTURETYPE_UNSIGNED_INT,\r\n            format: Constants.TEXTUREFORMAT_RGBA,\r\n            name: \"prePass_Albedo\",\r\n        },\r\n    ];\r\n\r\n    private _isDirty: boolean = true;\r\n\r\n    /**\r\n     * The render target where the scene is directly rendered\r\n     */\r\n    public defaultRT: PrePassRenderTarget;\r\n\r\n    /**\r\n     * Configuration for prepass effects\r\n     */\r\n    private _effectConfigurations: PrePassEffectConfiguration[] = [];\r\n\r\n    /**\r\n     * @returns the prepass render target for the rendering pass.\r\n     * If we are currently rendering a render target, it returns the PrePassRenderTarget\r\n     * associated with that render target. Otherwise, it returns the scene default PrePassRenderTarget\r\n     */\r\n    public getRenderTarget(): PrePassRenderTarget {\r\n        return this._currentTarget;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * Managed by the scene component\r\n     * @param prePassRenderTarget\r\n     */\r\n    public _setRenderTarget(prePassRenderTarget: Nullable<PrePassRenderTarget>): void {\r\n        if (prePassRenderTarget) {\r\n            this._currentTarget = prePassRenderTarget;\r\n        } else {\r\n            this._currentTarget = this.defaultRT;\r\n            this._engine.currentRenderPassId = this._scene.activeCamera?.renderPassId ?? this._currentTarget.renderPassId;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns true if the currently rendered prePassRenderTarget is the one\r\n     * associated with the scene.\r\n     */\r\n    public get currentRTisSceneRT(): boolean {\r\n        return this._currentTarget === this.defaultRT;\r\n    }\r\n\r\n    private _geometryBuffer: Nullable<GeometryBufferRenderer>;\r\n\r\n    /**\r\n     * Prevents the PrePassRenderer from using the GeometryBufferRenderer as a fallback\r\n     */\r\n    public doNotUseGeometryRendererFallback = true;\r\n\r\n    private _refreshGeometryBufferRendererLink() {\r\n        if (!this.doNotUseGeometryRendererFallback) {\r\n            this._geometryBuffer = this._scene.enableGeometryBufferRenderer();\r\n\r\n            if (!this._geometryBuffer) {\r\n                // Not supported\r\n                this.doNotUseGeometryRendererFallback = true;\r\n                return;\r\n            }\r\n\r\n            this._geometryBuffer._linkPrePassRenderer(this);\r\n        } else {\r\n            if (this._geometryBuffer) {\r\n                this._geometryBuffer._unlinkPrePassRenderer();\r\n            }\r\n            this._geometryBuffer = null;\r\n            this._scene.disableGeometryBufferRenderer();\r\n        }\r\n    }\r\n\r\n    private _currentTarget: PrePassRenderTarget;\r\n\r\n    /**\r\n     * All the render targets generated by prepass\r\n     */\r\n    public renderTargets: PrePassRenderTarget[] = [];\r\n\r\n    private readonly _clearColor = new Color4(0, 0, 0, 0);\r\n    private readonly _clearDepthColor = new Color4(1e8, 0, 0, 1); // \"infinity\" value - depth in the depth texture is view.z, not a 0..1 value!\r\n\r\n    private _enabled: boolean = false;\r\n\r\n    private _needsCompositionForThisPass = false;\r\n    private _postProcessesSourceForThisPass: Nullable<PostProcess>[];\r\n\r\n    /**\r\n     * Indicates if the prepass is enabled\r\n     */\r\n    public get enabled() {\r\n        return this._enabled;\r\n    }\r\n\r\n    /**\r\n     * Set to true to disable gamma transform in PrePass.\r\n     * Can be useful in case you already proceed to gamma transform on a material level\r\n     * and your post processes don't need to be in linear color space.\r\n     */\r\n    public disableGammaTransform = false;\r\n\r\n    /**\r\n     * Instantiates a prepass renderer\r\n     * @param scene The scene\r\n     */\r\n    constructor(scene: Scene) {\r\n        this._scene = scene;\r\n        this._engine = scene.getEngine();\r\n\r\n        let type = Constants.TEXTURETYPE_UNSIGNED_BYTE;\r\n        if (this._engine._caps.textureFloat && this._engine._caps.textureFloatLinearFiltering) {\r\n            type = Constants.TEXTURETYPE_FLOAT;\r\n        } else if (this._engine._caps.textureHalfFloat && this._engine._caps.textureHalfFloatLinearFiltering) {\r\n            type = Constants.TEXTURETYPE_HALF_FLOAT;\r\n        }\r\n\r\n        if (type !== Constants.TEXTURETYPE_FLOAT) {\r\n            for (let i = 0; i < PrePassRenderer.TextureFormats.length; ++i) {\r\n                if (PrePassRenderer.TextureFormats[i].type === Constants.TEXTURETYPE_FLOAT) {\r\n                    PrePassRenderer.TextureFormats[Constants.PREPASS_DEPTH_TEXTURE_TYPE].type = type;\r\n                }\r\n            }\r\n        }\r\n\r\n        PrePassRenderer._SceneComponentInitialization(this._scene);\r\n        this.defaultRT = this._createRenderTarget(\"sceneprePassRT\", null);\r\n        this._currentTarget = this.defaultRT;\r\n    }\r\n\r\n    /**\r\n     * Creates a new PrePassRenderTarget\r\n     * This should be the only way to instantiate a `PrePassRenderTarget`\r\n     * @param name Name of the `PrePassRenderTarget`\r\n     * @param renderTargetTexture RenderTarget the `PrePassRenderTarget` will be attached to.\r\n     * Can be `null` if the created `PrePassRenderTarget` is attached to the scene (default framebuffer).\r\n     * @internal\r\n     */\r\n    public _createRenderTarget(name: string, renderTargetTexture: Nullable<RenderTargetTexture>): PrePassRenderTarget {\r\n        const rt = new PrePassRenderTarget(name, renderTargetTexture, { width: this._engine.getRenderWidth(), height: this._engine.getRenderHeight() }, 0, this._scene, {\r\n            generateMipMaps: false,\r\n            generateStencilBuffer: this._engine.isStencilEnable,\r\n            defaultType: Constants.TEXTURETYPE_UNSIGNED_INT,\r\n            types: [],\r\n            drawOnlyOnFirstAttachmentByDefault: true,\r\n        });\r\n\r\n        this.renderTargets.push(rt);\r\n\r\n        if (this._enabled) {\r\n            // The pre-pass renderer is already enabled, so make sure we create the render target with the correct number of textures\r\n            this._update();\r\n        }\r\n\r\n        return rt;\r\n    }\r\n\r\n    /**\r\n     * Indicates if rendering a prepass is supported\r\n     */\r\n    public get isSupported() {\r\n        return this._scene.getEngine().getCaps().drawBuffersExtension;\r\n    }\r\n\r\n    /**\r\n     * Sets the proper output textures to draw in the engine.\r\n     * @param effect The effect that is drawn. It can be or not be compatible with drawing to several output textures.\r\n     * @param subMesh Submesh on which the effect is applied\r\n     */\r\n    public bindAttachmentsForEffect(effect: Effect, subMesh: SubMesh) {\r\n        const material = subMesh.getMaterial();\r\n        const isPrePassCapable = material && material.isPrePassCapable;\r\n        const excluded = material && this.excludedMaterials.indexOf(material) !== -1;\r\n\r\n        if (this.enabled && this._currentTarget.enabled) {\r\n            if (effect._multiTarget && isPrePassCapable && !excluded) {\r\n                this._engine.bindAttachments(this._multiRenderAttachments);\r\n            } else {\r\n                if (this._engine._currentRenderTarget) {\r\n                    this._engine.bindAttachments(this._defaultAttachments);\r\n                } else {\r\n                    this._engine.restoreSingleAttachment();\r\n                }\r\n\r\n                if (this._geometryBuffer && this.currentRTisSceneRT && !excluded) {\r\n                    this._geometryBuffer.renderList!.push(subMesh.getRenderingMesh());\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private _reinitializeAttachments() {\r\n        const multiRenderLayout = [];\r\n        const clearLayout = [false];\r\n        const clearDepthLayout = [false];\r\n        const defaultLayout = [true];\r\n\r\n        for (let i = 0; i < this.mrtCount; i++) {\r\n            multiRenderLayout.push(true);\r\n\r\n            if (i > 0) {\r\n                if (this._useSpecificClearForDepthTexture && this._mrtLayout[i] === Constants.PREPASS_DEPTH_TEXTURE_TYPE) {\r\n                    clearLayout.push(false);\r\n                    clearDepthLayout.push(true);\r\n                } else {\r\n                    clearLayout.push(true);\r\n                    clearDepthLayout.push(false);\r\n                }\r\n                defaultLayout.push(false);\r\n            }\r\n        }\r\n\r\n        this._multiRenderAttachments = this._engine.buildTextureLayout(multiRenderLayout);\r\n        this._clearAttachments = this._engine.buildTextureLayout(clearLayout);\r\n        this._clearDepthAttachments = this._engine.buildTextureLayout(clearDepthLayout);\r\n        this._defaultAttachments = this._engine.buildTextureLayout(defaultLayout);\r\n    }\r\n\r\n    private _resetLayout() {\r\n        for (let i = 0; i < PrePassRenderer.TextureFormats.length; i++) {\r\n            this._textureIndices[PrePassRenderer.TextureFormats[i].purpose] = -1;\r\n        }\r\n\r\n        this._textureIndices[Constants.PREPASS_COLOR_TEXTURE_TYPE] = 0;\r\n        this._mrtLayout = [Constants.PREPASS_COLOR_TEXTURE_TYPE];\r\n        this._mrtTypes = [PrePassRenderer.TextureFormats[Constants.PREPASS_COLOR_TEXTURE_TYPE].type];\r\n        this._mrtFormats = [PrePassRenderer.TextureFormats[Constants.PREPASS_COLOR_TEXTURE_TYPE].format];\r\n        this._mrtNames = [PrePassRenderer.TextureFormats[Constants.PREPASS_COLOR_TEXTURE_TYPE].name];\r\n        this.mrtCount = 1;\r\n    }\r\n\r\n    private _updateGeometryBufferLayout() {\r\n        this._refreshGeometryBufferRendererLink();\r\n\r\n        if (this._geometryBuffer) {\r\n            this._geometryBuffer._resetLayout();\r\n\r\n            const texturesActivated = [];\r\n\r\n            for (let i = 0; i < this._mrtLayout.length; i++) {\r\n                texturesActivated.push(false);\r\n            }\r\n\r\n            this._geometryBuffer._linkInternalTexture(this.defaultRT.getInternalTexture()!);\r\n\r\n            const matches = [\r\n                {\r\n                    prePassConstant: Constants.PREPASS_DEPTH_TEXTURE_TYPE,\r\n                    geometryBufferConstant: GeometryBufferRenderer.DEPTH_TEXTURE_TYPE,\r\n                },\r\n                {\r\n                    prePassConstant: Constants.PREPASS_NORMAL_TEXTURE_TYPE,\r\n                    geometryBufferConstant: GeometryBufferRenderer.NORMAL_TEXTURE_TYPE,\r\n                },\r\n                {\r\n                    prePassConstant: Constants.PREPASS_POSITION_TEXTURE_TYPE,\r\n                    geometryBufferConstant: GeometryBufferRenderer.POSITION_TEXTURE_TYPE,\r\n                },\r\n                {\r\n                    prePassConstant: Constants.PREPASS_REFLECTIVITY_TEXTURE_TYPE,\r\n                    geometryBufferConstant: GeometryBufferRenderer.REFLECTIVITY_TEXTURE_TYPE,\r\n                },\r\n                {\r\n                    prePassConstant: Constants.PREPASS_VELOCITY_TEXTURE_TYPE,\r\n                    geometryBufferConstant: GeometryBufferRenderer.VELOCITY_TEXTURE_TYPE,\r\n                },\r\n            ];\r\n\r\n            // replace textures in the geometryBuffer RT\r\n            for (let i = 0; i < matches.length; i++) {\r\n                const index = this._mrtLayout.indexOf(matches[i].prePassConstant);\r\n                if (index !== -1) {\r\n                    this._geometryBuffer._forceTextureType(matches[i].geometryBufferConstant, index);\r\n                    texturesActivated[index] = true;\r\n                }\r\n            }\r\n\r\n            this._geometryBuffer._setAttachments(this._engine.buildTextureLayout(texturesActivated));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Restores attachments for single texture draw.\r\n     */\r\n    public restoreAttachments() {\r\n        if (this.enabled && this._currentTarget.enabled && this._defaultAttachments) {\r\n            if (this._engine._currentRenderTarget) {\r\n                this._engine.bindAttachments(this._defaultAttachments);\r\n            } else {\r\n                this._engine.restoreSingleAttachment();\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    public _beforeDraw(camera?: Camera, faceIndex?: number, layer?: number) {\r\n        // const previousEnabled = this._enabled && this._currentTarget.enabled;\r\n\r\n        if (this._isDirty) {\r\n            this._update();\r\n        }\r\n\r\n        if (!this._enabled || !this._currentTarget.enabled) {\r\n            return;\r\n        }\r\n\r\n        if (this._geometryBuffer) {\r\n            this._geometryBuffer.renderList = [];\r\n        }\r\n\r\n        this._setupOutputForThisPass(this._currentTarget, camera);\r\n    }\r\n\r\n    private _prepareFrame(prePassRenderTarget: PrePassRenderTarget, faceIndex?: number, layer?: number) {\r\n        if (prePassRenderTarget.renderTargetTexture) {\r\n            prePassRenderTarget.renderTargetTexture._prepareFrame(this._scene, faceIndex, layer, prePassRenderTarget.renderTargetTexture.useCameraPostProcesses);\r\n        } else if (this._postProcessesSourceForThisPass.length) {\r\n            this._scene.postProcessManager._prepareFrame();\r\n        } else {\r\n            this._engine.restoreDefaultFramebuffer();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sets an intermediary texture between prepass and postprocesses. This texture\r\n     * will be used as input for post processes\r\n     * @param rt\r\n     * @returns true if there are postprocesses that will use this texture,\r\n     * false if there is no postprocesses - and the function has no effect\r\n     */\r\n    public setCustomOutput(rt: RenderTargetTexture) {\r\n        const firstPP = this._postProcessesSourceForThisPass[0];\r\n        if (!firstPP) {\r\n            return false;\r\n        }\r\n\r\n        firstPP.inputTexture = rt.renderTarget!;\r\n\r\n        return true;\r\n    }\r\n\r\n    private _renderPostProcesses(prePassRenderTarget: PrePassRenderTarget, faceIndex?: number) {\r\n        const firstPP = this._postProcessesSourceForThisPass[0];\r\n        const outputTexture = firstPP ? firstPP.inputTexture : prePassRenderTarget.renderTargetTexture ? prePassRenderTarget.renderTargetTexture.renderTarget : null;\r\n\r\n        // Build post process chain for this prepass post draw\r\n        let postProcessChain = this._currentTarget._beforeCompositionPostProcesses;\r\n\r\n        if (this._needsCompositionForThisPass) {\r\n            postProcessChain = postProcessChain.concat([this._currentTarget.imageProcessingPostProcess]);\r\n        }\r\n\r\n        // Activates and renders the chain\r\n        if (postProcessChain.length) {\r\n            this._scene.postProcessManager._prepareFrame(this._currentTarget.renderTarget?.texture, postProcessChain);\r\n            this._scene.postProcessManager.directRender(postProcessChain, outputTexture, false, faceIndex);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _afterDraw(faceIndex?: number, layer?: number) {\r\n        if (this._enabled && this._currentTarget.enabled) {\r\n            this._prepareFrame(this._currentTarget, faceIndex, layer);\r\n            this._renderPostProcesses(this._currentTarget, faceIndex);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Clears the current prepass render target (in the sense of settings pixels to the scene clear color value)\r\n     * @internal\r\n     */\r\n    public _clear() {\r\n        if (this._enabled && this._currentTarget.enabled) {\r\n            this._bindFrameBuffer();\r\n\r\n            // Clearing other attachment with 0 on all other attachments\r\n            this._engine.bindAttachments(this._clearAttachments);\r\n            this._engine.clear(this._clearColor, true, false, false);\r\n            if (this._useSpecificClearForDepthTexture) {\r\n                this._engine.bindAttachments(this._clearDepthAttachments);\r\n                this._engine.clear(this._clearDepthColor, true, false, false);\r\n            }\r\n            // Regular clear color with the scene clear color of the 1st attachment\r\n            this._engine.bindAttachments(this._defaultAttachments);\r\n        }\r\n    }\r\n\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    private _bindFrameBuffer() {\r\n        if (this._enabled && this._currentTarget.enabled) {\r\n            this._currentTarget._checkSize();\r\n            const internalTexture = this._currentTarget.renderTarget;\r\n            if (internalTexture) {\r\n                this._engine.bindFramebuffer(internalTexture);\r\n            }\r\n        }\r\n    }\r\n\r\n    private _setEnabled(enabled: boolean) {\r\n        this._enabled = enabled;\r\n    }\r\n\r\n    private _setRenderTargetEnabled(prePassRenderTarget: PrePassRenderTarget, enabled: boolean) {\r\n        prePassRenderTarget.enabled = enabled;\r\n        if (!enabled) {\r\n            this._unlinkInternalTexture(prePassRenderTarget);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Adds an effect configuration to the prepass render target.\r\n     * If an effect has already been added, it won't add it twice and will return the configuration\r\n     * already present.\r\n     * @param cfg the effect configuration\r\n     * @returns the effect configuration now used by the prepass\r\n     */\r\n    public addEffectConfiguration(cfg: PrePassEffectConfiguration): PrePassEffectConfiguration {\r\n        // Do not add twice\r\n        for (let i = 0; i < this._effectConfigurations.length; i++) {\r\n            if (this._effectConfigurations[i].name === cfg.name) {\r\n                return this._effectConfigurations[i];\r\n            }\r\n        }\r\n\r\n        this._effectConfigurations.push(cfg);\r\n        return cfg;\r\n    }\r\n\r\n    /**\r\n     * Retrieves an effect configuration by name\r\n     * @param name\r\n     * @returns the effect configuration, or null if not present\r\n     */\r\n    public getEffectConfiguration(name: string): Nullable<PrePassEffectConfiguration> {\r\n        for (let i = 0; i < this._effectConfigurations.length; i++) {\r\n            if (this._effectConfigurations[i].name === name) {\r\n                return this._effectConfigurations[i];\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    private _enable() {\r\n        const previousMrtCount = this.mrtCount;\r\n\r\n        for (let i = 0; i < this._effectConfigurations.length; i++) {\r\n            if (this._effectConfigurations[i].enabled) {\r\n                this._enableTextures(this._effectConfigurations[i].texturesRequired);\r\n            }\r\n        }\r\n\r\n        for (let i = 0; i < this.renderTargets.length; i++) {\r\n            if (this.mrtCount !== previousMrtCount || this.renderTargets[i].count !== this.mrtCount) {\r\n                this.renderTargets[i].updateCount(this.mrtCount, { types: this._mrtTypes, formats: this._mrtFormats }, this._mrtNames.concat(\"prePass_DepthBuffer\"));\r\n            }\r\n\r\n            this.renderTargets[i]._resetPostProcessChain();\r\n\r\n            for (let j = 0; j < this._effectConfigurations.length; j++) {\r\n                if (this._effectConfigurations[j].enabled) {\r\n                    // TODO : subsurface scattering has 1 scene-wide effect configuration\r\n                    // solution : do not stock postProcess on effectConfiguration, but in the prepassRenderTarget (hashmap configuration => postProcess)\r\n                    // And call createPostProcess whenever the post process does not exist in the RT\r\n                    if (!this._effectConfigurations[j].postProcess && this._effectConfigurations[j].createPostProcess) {\r\n                        this._effectConfigurations[j].createPostProcess!();\r\n                    }\r\n\r\n                    if (this._effectConfigurations[j].postProcess) {\r\n                        this.renderTargets[i]._beforeCompositionPostProcesses.push(this._effectConfigurations[j].postProcess!);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        this._reinitializeAttachments();\r\n        this._setEnabled(true);\r\n        this._updateGeometryBufferLayout();\r\n    }\r\n\r\n    private _disable() {\r\n        this._setEnabled(false);\r\n\r\n        for (let i = 0; i < this.renderTargets.length; i++) {\r\n            this._setRenderTargetEnabled(this.renderTargets[i], false);\r\n        }\r\n\r\n        this._resetLayout();\r\n\r\n        for (let i = 0; i < this._effectConfigurations.length; i++) {\r\n            this._effectConfigurations[i].enabled = false;\r\n        }\r\n    }\r\n\r\n    private _getPostProcessesSource(prePassRenderTarget: PrePassRenderTarget, camera?: Camera): Nullable<PostProcess>[] {\r\n        if (camera) {\r\n            return camera._postProcesses;\r\n        } else if (prePassRenderTarget.renderTargetTexture) {\r\n            if (prePassRenderTarget.renderTargetTexture.useCameraPostProcesses) {\r\n                const camera = prePassRenderTarget.renderTargetTexture.activeCamera ? prePassRenderTarget.renderTargetTexture.activeCamera : this._scene.activeCamera;\r\n                return camera ? camera._postProcesses : [];\r\n            } else if (prePassRenderTarget.renderTargetTexture.postProcesses) {\r\n                return prePassRenderTarget.renderTargetTexture.postProcesses;\r\n            } else {\r\n                return [];\r\n            }\r\n        } else {\r\n            return this._scene.activeCamera ? this._scene.activeCamera._postProcesses : [];\r\n        }\r\n    }\r\n\r\n    private _setupOutputForThisPass(prePassRenderTarget: PrePassRenderTarget, camera?: Camera) {\r\n        // Order is : draw ===> prePassRenderTarget._postProcesses ==> ipp ==> camera._postProcesses\r\n        const secondaryCamera = camera && this._scene.activeCameras && !!this._scene.activeCameras.length && this._scene.activeCameras.indexOf(camera) !== 0;\r\n        this._postProcessesSourceForThisPass = this._getPostProcessesSource(prePassRenderTarget, camera);\r\n        this._postProcessesSourceForThisPass = this._postProcessesSourceForThisPass.filter((pp) => {\r\n            return pp != null;\r\n        });\r\n        this._scene.autoClear = true;\r\n\r\n        const cameraHasImageProcessing = this._hasImageProcessing(this._postProcessesSourceForThisPass);\r\n        this._needsCompositionForThisPass = !cameraHasImageProcessing && !this.disableGammaTransform && this._needsImageProcessing() && !secondaryCamera;\r\n\r\n        const firstCameraPP = this._getFirstPostProcess(this._postProcessesSourceForThisPass);\r\n        const firstPrePassPP = prePassRenderTarget._beforeCompositionPostProcesses && prePassRenderTarget._beforeCompositionPostProcesses[0];\r\n        let firstPP = null;\r\n\r\n        // Setting the scene-wide post process configuration\r\n        this._scene.imageProcessingConfiguration.applyByPostProcess = this._needsCompositionForThisPass || cameraHasImageProcessing;\r\n\r\n        // Create composition effect if needed\r\n        if (this._needsCompositionForThisPass && !prePassRenderTarget.imageProcessingPostProcess) {\r\n            prePassRenderTarget._createCompositionEffect();\r\n        }\r\n\r\n        // Setting the prePassRenderTarget as input texture of the first PP\r\n        if (firstPrePassPP) {\r\n            firstPP = firstPrePassPP;\r\n        } else if (this._needsCompositionForThisPass) {\r\n            firstPP = prePassRenderTarget.imageProcessingPostProcess;\r\n        } else if (firstCameraPP) {\r\n            firstPP = firstCameraPP;\r\n        }\r\n\r\n        this._bindFrameBuffer();\r\n        this._linkInternalTexture(prePassRenderTarget, firstPP);\r\n    }\r\n\r\n    private _linkInternalTexture(prePassRenderTarget: PrePassRenderTarget, postProcess: Nullable<PostProcess>) {\r\n        if (postProcess) {\r\n            postProcess.autoClear = false;\r\n            postProcess.inputTexture = prePassRenderTarget.renderTarget!;\r\n        }\r\n\r\n        if (prePassRenderTarget._outputPostProcess !== postProcess) {\r\n            if (prePassRenderTarget._outputPostProcess) {\r\n                this._unlinkInternalTexture(prePassRenderTarget);\r\n            }\r\n            prePassRenderTarget._outputPostProcess = postProcess;\r\n        }\r\n\r\n        if (prePassRenderTarget._internalTextureDirty) {\r\n            this._updateGeometryBufferLayout();\r\n            prePassRenderTarget._internalTextureDirty = false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _unlinkInternalTexture(prePassRenderTarget: PrePassRenderTarget) {\r\n        if (prePassRenderTarget._outputPostProcess) {\r\n            prePassRenderTarget._outputPostProcess.autoClear = true;\r\n            prePassRenderTarget._outputPostProcess.restoreDefaultInputTexture();\r\n            prePassRenderTarget._outputPostProcess = null;\r\n        }\r\n    }\r\n\r\n    private _needsImageProcessing(): boolean {\r\n        for (let i = 0; i < this._effectConfigurations.length; i++) {\r\n            if (this._effectConfigurations[i].enabled && this._effectConfigurations[i].needsImageProcessing) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    private _hasImageProcessing(postProcesses: Nullable<PostProcess>[]): boolean {\r\n        let isIPPAlreadyPresent = false;\r\n        if (postProcesses) {\r\n            for (let i = 0; i < postProcesses.length; i++) {\r\n                if (postProcesses[i]?.getClassName() === \"ImageProcessingPostProcess\") {\r\n                    isIPPAlreadyPresent = true;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        return isIPPAlreadyPresent;\r\n    }\r\n\r\n    /**\r\n     * Internal, gets the first post proces.\r\n     * @param postProcesses\r\n     * @returns the first post process to be run on this camera.\r\n     */\r\n    private _getFirstPostProcess(postProcesses: Nullable<PostProcess>[]): Nullable<PostProcess> {\r\n        for (let ppIndex = 0; ppIndex < postProcesses.length; ppIndex++) {\r\n            if (postProcesses[ppIndex] !== null) {\r\n                return postProcesses[ppIndex];\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Marks the prepass renderer as dirty, triggering a check if the prepass is necessary for the next rendering.\r\n     */\r\n    public markAsDirty() {\r\n        this._isDirty = true;\r\n    }\r\n\r\n    /**\r\n     * Enables a texture on the MultiRenderTarget for prepass\r\n     * @param types\r\n     */\r\n    private _enableTextures(types: number[]) {\r\n        // For velocity : enable storage of previous matrices for instances\r\n        this._scene.needsPreviousWorldMatrices = false;\r\n\r\n        for (let i = 0; i < types.length; i++) {\r\n            const type = types[i];\r\n\r\n            if (this._textureIndices[type] === -1) {\r\n                this._textureIndices[type] = this._mrtLayout.length;\r\n                this._mrtLayout.push(type);\r\n\r\n                this._mrtTypes.push(PrePassRenderer.TextureFormats[type].type);\r\n                this._mrtFormats.push(PrePassRenderer.TextureFormats[type].format);\r\n                this._mrtNames.push(PrePassRenderer.TextureFormats[type].name);\r\n                this.mrtCount++;\r\n            }\r\n\r\n            if (type === Constants.PREPASS_VELOCITY_TEXTURE_TYPE) {\r\n                this._scene.needsPreviousWorldMatrices = true;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Makes sure that the prepass renderer is up to date if it has been dirtified.\r\n     */\r\n    public update() {\r\n        if (this._isDirty) {\r\n            this._update();\r\n        }\r\n    }\r\n\r\n    private _update() {\r\n        this._disable();\r\n        let enablePrePass = false;\r\n        this._scene.imageProcessingConfiguration.applyByPostProcess = false;\r\n\r\n        if (this._scene._depthPeelingRenderer && this._scene.useOrderIndependentTransparency) {\r\n            this._scene._depthPeelingRenderer.setPrePassRenderer(this);\r\n            enablePrePass = true;\r\n        }\r\n\r\n        for (let i = 0; i < this._scene.materials.length; i++) {\r\n            if (this._scene.materials[i].setPrePassRenderer(this)) {\r\n                enablePrePass = true;\r\n            }\r\n        }\r\n\r\n        if (enablePrePass) {\r\n            this._setRenderTargetEnabled(this.defaultRT, true);\r\n        }\r\n\r\n        let postProcesses;\r\n\r\n        for (let i = 0; i < this.renderTargets.length; i++) {\r\n            if (this.renderTargets[i].renderTargetTexture) {\r\n                postProcesses = this._getPostProcessesSource(this.renderTargets[i]);\r\n            } else {\r\n                const camera = this._scene.activeCamera;\r\n                if (!camera) {\r\n                    continue;\r\n                }\r\n\r\n                postProcesses = camera._postProcesses;\r\n            }\r\n\r\n            if (!postProcesses) {\r\n                continue;\r\n            }\r\n\r\n            postProcesses = <Nullable<PostProcess[]>>postProcesses.filter((pp) => {\r\n                return pp != null;\r\n            });\r\n\r\n            if (postProcesses) {\r\n                for (let j = 0; j < postProcesses.length; j++) {\r\n                    if (postProcesses[j].setPrePassRenderer(this)) {\r\n                        this._setRenderTargetEnabled(this.renderTargets[i], true);\r\n                        enablePrePass = true;\r\n                    }\r\n                }\r\n\r\n                if (this._hasImageProcessing(postProcesses)) {\r\n                    this._scene.imageProcessingConfiguration.applyByPostProcess = true;\r\n                }\r\n            }\r\n        }\r\n\r\n        this._markAllMaterialsAsPrePassDirty();\r\n        this._isDirty = false;\r\n\r\n        if (enablePrePass) {\r\n            this._enable();\r\n        }\r\n    }\r\n\r\n    private _markAllMaterialsAsPrePassDirty() {\r\n        const materials = this._scene.materials;\r\n\r\n        for (let i = 0; i < materials.length; i++) {\r\n            materials[i].markAsDirty(Material.PrePassDirtyFlag);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Disposes the prepass renderer.\r\n     */\r\n    public dispose() {\r\n        for (let i = this.renderTargets.length - 1; i >= 0; i--) {\r\n            this.renderTargets[i].dispose();\r\n        }\r\n\r\n        for (let i = 0; i < this._effectConfigurations.length; i++) {\r\n            if (this._effectConfigurations[i].dispose) {\r\n                this._effectConfigurations[i].dispose!();\r\n            }\r\n        }\r\n    }\r\n}\r\n"],"mappings":";AAAA,SAASA,mBAAmB,QAAQ,8CAA4C;AAMhF,SAASC,WAAW,QAAQ,qBAAmB;AAC/C,SAASC,MAAM,QAAQ,wBAAsB;AAI7C,SAASC,QAAQ,QAAQ,0BAAwB;AAIjD,SAASC,sBAAsB,QAAQ,wCAAsC;AAE7E;;;;;;AAMA,OAAM,MAAOC,eAAe;EAwCxB;;;EAGA,IAAWC,2BAA2BA,CAAA;IAClC,OAAO,IAAI,CAACC,4BAA4B;EAC5C;EAEA,IAAWD,2BAA2BA,CAACE,KAAc;IACjD,IAAI,IAAI,CAACD,4BAA4B,KAAKC,KAAK,EAAE;MAC7C;;IAGJ,IAAI,CAACD,4BAA4B,GAAGC,KAAK;IACzC,IAAI,CAACC,+BAA+B,EAAE;EAC1C;EAEA;;;;;EAKOC,QAAQA,CAACC,IAAY;IACxB,OAAO,IAAI,CAACC,eAAe,CAACD,IAAI,CAAC;EACrC;EAEA;;;EAGA,IAAWE,OAAOA,CAAA;IACd,OAAO,IAAI,CAACC,SAAS,CAACD,OAAO;EACjC;EAEA,IAAWA,OAAOA,CAACE,CAAS;IACxB,IAAI,CAACD,SAAS,CAACD,OAAO,GAAGE,CAAC;EAC9B;EAIA;;;;EAIA,IAAWC,+BAA+BA,CAAA;IACtC,OAAO,IAAI,CAACC,gCAAgC;EAChD;EAEA,IAAWD,+BAA+BA,CAACR,KAAc;IACrD,IAAI,IAAI,CAACS,gCAAgC,KAAKT,KAAK,EAAE;MACjD;;IAGJ,IAAI,CAACS,gCAAgC,GAAGT,KAAK;IAC7C,IAAI,CAACU,QAAQ,GAAG,IAAI;EACxB;EAoEA;;;;;EAKOC,eAAeA,CAAA;IAClB,OAAO,IAAI,CAACC,cAAc;EAC9B;EAEA;;;;;EAKOC,gBAAgBA,CAACC,mBAAkD;;IACtE,IAAIA,mBAAmB,EAAE;MACrB,IAAI,CAACF,cAAc,GAAGE,mBAAmB;KAC5C,MAAM;MACH,IAAI,CAACF,cAAc,GAAG,IAAI,CAACN,SAAS;MACpC,IAAI,CAACS,OAAO,CAACC,mBAAmB,GAAG,CAAAC,EAAA,IAAAC,EAAA,OAAI,CAACC,MAAM,CAACC,YAAY,cAAAF,EAAA,uBAAAA,EAAA,CAAEG,YAAY,cAAAJ,EAAA,cAAAA,EAAA,GAAI,IAAI,CAACL,cAAc,CAACS,YAAY;;EAErH;EAEA;;;;EAIA,IAAWC,kBAAkBA,CAAA;IACzB,OAAO,IAAI,CAACV,cAAc,KAAK,IAAI,CAACN,SAAS;EACjD;EASQiB,kCAAkCA,CAAA;IACtC,IAAI,CAAC,IAAI,CAACC,gCAAgC,EAAE;MACxC,IAAI,CAACC,eAAe,GAAG,IAAI,CAACN,MAAM,CAACO,4BAA4B,EAAE;MAEjE,IAAI,CAAC,IAAI,CAACD,eAAe,EAAE;QACvB;QACA,IAAI,CAACD,gCAAgC,GAAG,IAAI;QAC5C;;MAGJ,IAAI,CAACC,eAAe,CAACE,oBAAoB,CAAC,IAAI,CAAC;KAClD,MAAM;MACH,IAAI,IAAI,CAACF,eAAe,EAAE;QACtB,IAAI,CAACA,eAAe,CAACG,sBAAsB,EAAE;;MAEjD,IAAI,CAACH,eAAe,GAAG,IAAI;MAC3B,IAAI,CAACN,MAAM,CAACU,6BAA6B,EAAE;;EAEnD;EAiBA;;;EAGA,IAAWC,OAAOA,CAAA;IACd,OAAO,IAAI,CAACC,QAAQ;EACxB;EASA;;;;EAIAC,YAAYC,KAAY;IApPxB;;;IAGO,KAAAC,mBAAmB,GAAmB,EAAE;IAE/C;;;;;IAKO,KAAAC,iBAAiB,GAAe,EAAE;IAKzC;;;IAGO,KAAAC,QAAQ,GAAW,CAAC;IAEnB,KAAAC,SAAS,GAAa,EAAE;IACxB,KAAAC,WAAW,GAAa,EAAE;IAC1B,KAAAC,UAAU,GAAa,EAAE;IACzB,KAAAC,SAAS,GAAa,EAAE;IACxB,KAAApC,eAAe,GAAa,EAAE;IAM9B,KAAAL,4BAA4B,GAAG,KAAK;IAsCpC,KAAAU,gCAAgC,GAAG,KAAK;IAyExC,KAAAC,QAAQ,GAAY,IAAI;IAOhC;;;IAGQ,KAAA+B,qBAAqB,GAAiC,EAAE;IAmChE;;;IAGO,KAAAjB,gCAAgC,GAAG,IAAI;IAwB9C;;;IAGO,KAAAkB,aAAa,GAA0B,EAAE;IAE/B,KAAAC,WAAW,GAAG,IAAIjD,MAAM,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;IACpC,KAAAkD,gBAAgB,GAAG,IAAIlD,MAAM,CAAC,GAAG,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;IAEtD,KAAAqC,QAAQ,GAAY,KAAK;IAEzB,KAAAc,4BAA4B,GAAG,KAAK;IAU5C;;;;;IAKO,KAAAC,qBAAqB,GAAG,KAAK;IAOhC,IAAI,CAAC3B,MAAM,GAAGc,KAAK;IACnB,IAAI,CAAClB,OAAO,GAAGkB,KAAK,CAACc,SAAS,EAAE;IAEhC,IAAI5C,IAAI,GAAG;IACX,IAAI,IAAI,CAACY,OAAO,CAACiC,KAAK,CAACC,YAAY,IAAI,IAAI,CAAClC,OAAO,CAACiC,KAAK,CAACE,2BAA2B,EAAE;MACnF/C,IAAI,GAAG;KACV,MAAM,IAAI,IAAI,CAACY,OAAO,CAACiC,KAAK,CAACG,gBAAgB,IAAI,IAAI,CAACpC,OAAO,CAACiC,KAAK,CAACI,+BAA+B,EAAE;MAClGjD,IAAI,GAAG;;IAGX,IAAIA,IAAI,KAAK;MACT,KAAK,IAAIkD,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGxD,eAAe,CAACyD,cAAc,CAACC,MAAM,EAAE,EAAEF,CAAC,EAAE;QAC5D,IAAIxD,eAAe,CAACyD,cAAc,CAACD,CAAC,CAAC,CAAClD,IAAI,KAAK;UAC3CN,eAAe,CAACyD,cAAc,CAAC,GAAAnD,IAAA,GAAUA,IAAA;;;;IAKrDN,eAAe,CAAC2D,6BAA6B,CAAC,IAAI,CAACrC,MAAM,CAAC;IAC1D,IAAI,CAACb,SAAS,GAAG,IAAI,CAACmD,mBAAmB,CAAC,gBAAgB,EAAE,IAAI,CAAC;IACjE,IAAI,CAAC7C,cAAc,GAAG,IAAI,CAACN,SAAS;EACxC;EAEA;;;;;;;;EAQOmD,mBAAmBA,CAACC,IAAY,EAAEC,mBAAkD;IACvF,MAAMC,EAAE,GAAG,IAAIpE,mBAAmB,CAACkE,IAAI,EAAEC,mBAAmB,EAAE;MAAEE,KAAK,EAAE,IAAI,CAAC9C,OAAO,CAAC+C,cAAc,EAAE;MAAEC,MAAM,EAAE,IAAI,CAAChD,OAAO,CAACiD,eAAe;IAAE,CAAE,EAAE,CAAC,EAAE,IAAI,CAAC7C,MAAM,EAAE;MAC5J8C,eAAe,EAAE,KAAK;MACtBC,qBAAqB,EAAE,IAAI,CAACnD,OAAO,CAACoD,eAAe;MACnDC,WAAW,EAAE;MACbC,KAAK,EAAE,EAAE;MACTC,kCAAkC,EAAE;KACvC,CAAC;IAEF,IAAI,CAAC5B,aAAa,CAAC6B,IAAI,CAACX,EAAE,CAAC;IAE3B,IAAI,IAAI,CAAC7B,QAAQ,EAAE;MACf;MACA,IAAI,CAACyC,OAAO,EAAE;;IAGlB,OAAOZ,EAAE;EACb;EAEA;;;EAGA,IAAWa,WAAWA,CAAA;IAClB,OAAO,IAAI,CAACtD,MAAM,CAAC4B,SAAS,EAAE,CAAC2B,OAAO,EAAE,CAACC,oBAAoB;EACjE;EAEA;;;;;EAKOC,wBAAwBA,CAACC,MAAc,EAAEC,OAAgB;IAC5D,MAAMC,QAAQ,GAAGD,OAAO,CAACE,WAAW,EAAE;IACtC,MAAMC,gBAAgB,GAAGF,QAAQ,IAAIA,QAAQ,CAACE,gBAAgB;IAC9D,MAAMC,QAAQ,GAAGH,QAAQ,IAAI,IAAI,CAAC5C,iBAAiB,CAACgD,OAAO,CAACJ,QAAQ,CAAC,KAAK,CAAC,CAAC;IAE5E,IAAI,IAAI,CAACjD,OAAO,IAAI,IAAI,CAAClB,cAAc,CAACkB,OAAO,EAAE;MAC7C,IAAI+C,MAAM,CAACO,YAAY,IAAIH,gBAAgB,IAAI,CAACC,QAAQ,EAAE;QACtD,IAAI,CAACnE,OAAO,CAACsE,eAAe,CAAC,IAAI,CAACC,uBAAuB,CAAC;OAC7D,MAAM;QACH,IAAI,IAAI,CAACvE,OAAO,CAACwE,oBAAoB,EAAE;UACnC,IAAI,CAACxE,OAAO,CAACsE,eAAe,CAAC,IAAI,CAACG,mBAAmB,CAAC;SACzD,MAAM;UACH,IAAI,CAACzE,OAAO,CAAC0E,uBAAuB,EAAE;;QAG1C,IAAI,IAAI,CAAChE,eAAe,IAAI,IAAI,CAACH,kBAAkB,IAAI,CAAC4D,QAAQ,EAAE;UAC9D,IAAI,CAACzD,eAAe,CAACiE,UAAW,CAACnB,IAAI,CAACO,OAAO,CAACa,gBAAgB,EAAE,CAAC;;;;EAIjF;EAEQC,wBAAwBA,CAAA;IAC5B,MAAMC,iBAAiB,GAAG,EAAE;IAC5B,MAAMC,WAAW,GAAG,CAAC,KAAK,CAAC;IAC3B,MAAMC,gBAAgB,GAAG,CAAC,KAAK,CAAC;IAChC,MAAMC,aAAa,GAAG,CAAC,IAAI,CAAC;IAE5B,KAAK,IAAI3C,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,IAAI,CAACjB,QAAQ,EAAEiB,CAAC,EAAE,EAAE;MACpCwC,iBAAiB,CAACtB,IAAI,CAAC,IAAI,CAAC;MAE5B,IAAIlB,CAAC,GAAG,CAAC,EAAE;QACP,IAAI,IAAI,CAAC5C,gCAAgC,IAAI,IAAI,CAAC8B,UAAU,CAACc,CAAC,CAAC,KAAK;UAChEyC,WAAW,CAACvB,IAAI,CAAC,KAAK,CAAC;UACvBwB,gBAAgB,CAACxB,IAAI,CAAC,IAAI,CAAC;SAC9B,MAAM;UACHuB,WAAW,CAACvB,IAAI,CAAC,IAAI,CAAC;UACtBwB,gBAAgB,CAACxB,IAAI,CAAC,KAAK,CAAC;;QAEhCyB,aAAa,CAACzB,IAAI,CAAC,KAAK,CAAC;;;IAIjC,IAAI,CAACe,uBAAuB,GAAG,IAAI,CAACvE,OAAO,CAACkF,kBAAkB,CAACJ,iBAAiB,CAAC;IACjF,IAAI,CAACK,iBAAiB,GAAG,IAAI,CAACnF,OAAO,CAACkF,kBAAkB,CAACH,WAAW,CAAC;IACrE,IAAI,CAACK,sBAAsB,GAAG,IAAI,CAACpF,OAAO,CAACkF,kBAAkB,CAACF,gBAAgB,CAAC;IAC/E,IAAI,CAACP,mBAAmB,GAAG,IAAI,CAACzE,OAAO,CAACkF,kBAAkB,CAACD,aAAa,CAAC;EAC7E;EAEQI,YAAYA,CAAA;IAChB,KAAK,IAAI/C,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGxD,eAAe,CAACyD,cAAc,CAACC,MAAM,EAAEF,CAAC,EAAE,EAAE;MAC5D,IAAI,CAACjD,eAAe,CAACP,eAAe,CAACyD,cAAc,CAACD,CAAC,CAAC,CAACgD,OAAO,CAAC,GAAG,CAAC,CAAC;;IAGxE,IAAI,CAACjG,eAAe,CAAC;IACrB,IAAI,CAACmC,UAAU,GAAG,CAAC;IACnB,IAAI,CAACF,SAAS,GAAG,CAACxC,eAAe,CAACyD,cAAc,CAAC,GAAAnD,IAAA;IACjD,IAAI,CAACmC,WAAW,GAAG,CAACzC,eAAe,CAACyD,cAAc,CAAC,GAAAgD,MAAS,CAAC;IAC7D,IAAI,CAAC9D,SAAS,GAAG,CAAC3C,eAAe,CAACyD,cAAc,CAAC,GAAAI,IAAA;IACjD,IAAI,CAACtB,QAAQ,GAAG,CAAC;EACrB;EAEQmE,2BAA2BA,CAAA;IAC/B,IAAI,CAAChF,kCAAkC,EAAE;IAEzC,IAAI,IAAI,CAACE,eAAe,EAAE;MACtB,IAAI,CAACA,eAAe,CAAC2E,YAAY,EAAE;MAEnC,MAAMI,iBAAiB,GAAG,EAAE;MAE5B,KAAK,IAAInD,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,IAAI,CAACd,UAAU,CAACgB,MAAM,EAAEF,CAAC,EAAE,EAAE;QAC7CmD,iBAAiB,CAACjC,IAAI,CAAC,KAAK,CAAC;;MAGjC,IAAI,CAAC9C,eAAe,CAACgF,oBAAoB,CAAC,IAAI,CAACnG,SAAS,CAACoG,kBAAkB,EAAG,CAAC;MAE/E,MAAMC,OAAO,GAAG,CACZ;QACIC,eAAe,EAAE;QACjBC,sBAAsB,EAAEjH,sBAAsB,CAACkH;OAClD,EACD;QACIF,eAAe,EAAE;QACjBC,sBAAsB,EAAEjH,sBAAsB,CAACmH;OAClD,EACD;QACIH,eAAe,EAAE;QACjBC,sBAAsB,EAAEjH,sBAAsB,CAACoH;OAClD,EACD;QACIJ,eAAe,EAAE;QACjBC,sBAAsB,EAAEjH,sBAAsB,CAACqH;OAClD,EACD;QACIL,eAAe,EAAE;QACjBC,sBAAsB,EAAEjH,sBAAsB,CAACsH;OAClD,CACJ;MAED;MACA,KAAK,IAAI7D,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGsD,OAAO,CAACpD,MAAM,EAAEF,CAAC,EAAE,EAAE;QACrC,MAAM8D,KAAK,GAAG,IAAI,CAAC5E,UAAU,CAAC4C,OAAO,CAACwB,OAAO,CAACtD,CAAC,CAAC,CAACuD,eAAe,CAAC;QACjE,IAAIO,KAAK,KAAK,CAAC,CAAC,EAAE;UACd,IAAI,CAAC1F,eAAe,CAAC2F,iBAAiB,CAACT,OAAO,CAACtD,CAAC,CAAC,CAACwD,sBAAsB,EAAEM,KAAK,CAAC;UAChFX,iBAAiB,CAACW,KAAK,CAAC,GAAG,IAAI;;;MAIvC,IAAI,CAAC1F,eAAe,CAAC4F,eAAe,CAAC,IAAI,CAACtG,OAAO,CAACkF,kBAAkB,CAACO,iBAAiB,CAAC,CAAC;;EAEhG;EAEA;;;EAGOc,kBAAkBA,CAAA;IACrB,IAAI,IAAI,CAACxF,OAAO,IAAI,IAAI,CAAClB,cAAc,CAACkB,OAAO,IAAI,IAAI,CAAC0D,mBAAmB,EAAE;MACzE,IAAI,IAAI,CAACzE,OAAO,CAACwE,oBAAoB,EAAE;QACnC,IAAI,CAACxE,OAAO,CAACsE,eAAe,CAAC,IAAI,CAACG,mBAAmB,CAAC;OACzD,MAAM;QACH,IAAI,CAACzE,OAAO,CAAC0E,uBAAuB,EAAE;;;EAGlD;EAEA;;;EAGA;EACO8B,WAAWA,CAACC,MAAe,EAAEC,SAAkB,EAAEC,KAAc;IAClE;IAEA,IAAI,IAAI,CAAChH,QAAQ,EAAE;MACf,IAAI,CAAC8D,OAAO,EAAE;;IAGlB,IAAI,CAAC,IAAI,CAACzC,QAAQ,IAAI,CAAC,IAAI,CAACnB,cAAc,CAACkB,OAAO,EAAE;MAChD;;IAGJ,IAAI,IAAI,CAACL,eAAe,EAAE;MACtB,IAAI,CAACA,eAAe,CAACiE,UAAU,GAAG,EAAE;;IAGxC,IAAI,CAACiC,uBAAuB,CAAC,IAAI,CAAC/G,cAAc,EAAE4G,MAAM,CAAC;EAC7D;EAEQI,aAAaA,CAAC9G,mBAAwC,EAAE2G,SAAkB,EAAEC,KAAc;IAC9F,IAAI5G,mBAAmB,CAAC6C,mBAAmB,EAAE;MACzC7C,mBAAmB,CAAC6C,mBAAmB,CAACiE,aAAa,CAAC,IAAI,CAACzG,MAAM,EAAEsG,SAAS,EAAEC,KAAK,EAAE5G,mBAAmB,CAAC6C,mBAAmB,CAACkE,sBAAsB,CAAC;KACvJ,MAAM,IAAI,IAAI,CAACC,+BAA+B,CAACvE,MAAM,EAAE;MACpD,IAAI,CAACpC,MAAM,CAAC4G,kBAAkB,CAACH,aAAa,EAAE;KACjD,MAAM;MACH,IAAI,CAAC7G,OAAO,CAACiH,yBAAyB,EAAE;;EAEhD;EAEA;;;;;;;EAOOC,eAAeA,CAACrE,EAAuB;IAC1C,MAAMsE,OAAO,GAAG,IAAI,CAACJ,+BAA+B,CAAC,CAAC,CAAC;IACvD,IAAI,CAACI,OAAO,EAAE;MACV,OAAO,KAAK;;IAGhBA,OAAO,CAACC,YAAY,GAAGvE,EAAE,CAACwE,YAAa;IAEvC,OAAO,IAAI;EACf;EAEQC,oBAAoBA,CAACvH,mBAAwC,EAAE2G,SAAkB;;IACrF,MAAMS,OAAO,GAAG,IAAI,CAACJ,+BAA+B,CAAC,CAAC,CAAC;IACvD,MAAMQ,aAAa,GAAGJ,OAAO,GAAGA,OAAO,CAACC,YAAY,GAAGrH,mBAAmB,CAAC6C,mBAAmB,GAAG7C,mBAAmB,CAAC6C,mBAAmB,CAACyE,YAAY,GAAG,IAAI;IAE5J;IACA,IAAIG,gBAAgB,GAAG,IAAI,CAAC3H,cAAc,CAAC4H,+BAA+B;IAE1E,IAAI,IAAI,CAAC3F,4BAA4B,EAAE;MACnC0F,gBAAgB,GAAGA,gBAAgB,CAACE,MAAM,CAAC,CAAC,IAAI,CAAC7H,cAAc,CAAC8H,0BAA0B,CAAC,CAAC;;IAGhG;IACA,IAAIH,gBAAgB,CAAChF,MAAM,EAAE;MACzB,IAAI,CAACpC,MAAM,CAAC4G,kBAAkB,CAACH,aAAa,CAAC,CAAA1G,EAAA,OAAI,CAACN,cAAc,CAACwH,YAAY,cAAAlH,EAAA,uBAAAA,EAAA,CAAEyH,OAAO,EAAEJ,gBAAgB,CAAC;MACzG,IAAI,CAACpH,MAAM,CAAC4G,kBAAkB,CAACa,YAAY,CAACL,gBAAgB,EAAED,aAAa,EAAE,KAAK,EAAEb,SAAS,CAAC;;EAEtG;EAEA;;;EAGOoB,UAAUA,CAACpB,SAAkB,EAAEC,KAAc;IAChD,IAAI,IAAI,CAAC3F,QAAQ,IAAI,IAAI,CAACnB,cAAc,CAACkB,OAAO,EAAE;MAC9C,IAAI,CAAC8F,aAAa,CAAC,IAAI,CAAChH,cAAc,EAAE6G,SAAS,EAAEC,KAAK,CAAC;MACzD,IAAI,CAACW,oBAAoB,CAAC,IAAI,CAACzH,cAAc,EAAE6G,SAAS,CAAC;;EAEjE;EAEA;;;;EAIOqB,MAAMA,CAAA;IACT,IAAI,IAAI,CAAC/G,QAAQ,IAAI,IAAI,CAACnB,cAAc,CAACkB,OAAO,EAAE;MAC9C,IAAI,CAACiH,gBAAgB,EAAE;MAEvB;MACA,IAAI,CAAChI,OAAO,CAACsE,eAAe,CAAC,IAAI,CAACa,iBAAiB,CAAC;MACpD,IAAI,CAACnF,OAAO,CAACiI,KAAK,CAAC,IAAI,CAACrG,WAAW,EAAE,IAAI,EAAE,KAAK,EAAE,KAAK,CAAC;MACxD,IAAI,IAAI,CAAClC,gCAAgC,EAAE;QACvC,IAAI,CAACM,OAAO,CAACsE,eAAe,CAAC,IAAI,CAACc,sBAAsB,CAAC;QACzD,IAAI,CAACpF,OAAO,CAACiI,KAAK,CAAC,IAAI,CAACpG,gBAAgB,EAAE,IAAI,EAAE,KAAK,EAAE,KAAK,CAAC;;MAEjE;MACA,IAAI,CAAC7B,OAAO,CAACsE,eAAe,CAAC,IAAI,CAACG,mBAAmB,CAAC;;EAE9D;EAEA;EACQuD,gBAAgBA,CAAA;IACpB,IAAI,IAAI,CAAChH,QAAQ,IAAI,IAAI,CAACnB,cAAc,CAACkB,OAAO,EAAE;MAC9C,IAAI,CAAClB,cAAc,CAACqI,UAAU,EAAE;MAChC,MAAMC,eAAe,GAAG,IAAI,CAACtI,cAAc,CAACwH,YAAY;MACxD,IAAIc,eAAe,EAAE;QACjB,IAAI,CAACnI,OAAO,CAACoI,eAAe,CAACD,eAAe,CAAC;;;EAGzD;EAEQE,WAAWA,CAACtH,OAAgB;IAChC,IAAI,CAACC,QAAQ,GAAGD,OAAO;EAC3B;EAEQuH,uBAAuBA,CAACvI,mBAAwC,EAAEgB,OAAgB;IACtFhB,mBAAmB,CAACgB,OAAO,GAAGA,OAAO;IACrC,IAAI,CAACA,OAAO,EAAE;MACV,IAAI,CAACwH,sBAAsB,CAACxI,mBAAmB,CAAC;;EAExD;EAEA;;;;;;;EAOOyI,sBAAsBA,CAACC,GAA+B;IACzD;IACA,KAAK,IAAInG,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,IAAI,CAACZ,qBAAqB,CAACc,MAAM,EAAEF,CAAC,EAAE,EAAE;MACxD,IAAI,IAAI,CAACZ,qBAAqB,CAACY,CAAC,CAAC,CAACK,IAAI,KAAK8F,GAAG,CAAC9F,IAAI,EAAE;QACjD,OAAO,IAAI,CAACjB,qBAAqB,CAACY,CAAC,CAAC;;;IAI5C,IAAI,CAACZ,qBAAqB,CAAC8B,IAAI,CAACiF,GAAG,CAAC;IACpC,OAAOA,GAAG;EACd;EAEA;;;;;EAKOC,sBAAsBA,CAAC/F,IAAY;IACtC,KAAK,IAAIL,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,IAAI,CAACZ,qBAAqB,CAACc,MAAM,EAAEF,CAAC,EAAE,EAAE;MACxD,IAAI,IAAI,CAACZ,qBAAqB,CAACY,CAAC,CAAC,CAACK,IAAI,KAAKA,IAAI,EAAE;QAC7C,OAAO,IAAI,CAACjB,qBAAqB,CAACY,CAAC,CAAC;;;IAI5C,OAAO,IAAI;EACf;EAEQqG,OAAOA,CAAA;IACX,MAAMC,gBAAgB,GAAG,IAAI,CAACvH,QAAQ;IAEtC,KAAK,IAAIiB,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,IAAI,CAACZ,qBAAqB,CAACc,MAAM,EAAEF,CAAC,EAAE,EAAE;MACxD,IAAI,IAAI,CAACZ,qBAAqB,CAACY,CAAC,CAAC,CAACvB,OAAO,EAAE;QACvC,IAAI,CAAC8H,eAAe,CAAC,IAAI,CAACnH,qBAAqB,CAACY,CAAC,CAAC,CAACwG,gBAAgB,CAAC;;;IAI5E,KAAK,IAAIxG,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,IAAI,CAACX,aAAa,CAACa,MAAM,EAAEF,CAAC,EAAE,EAAE;MAChD,IAAI,IAAI,CAACjB,QAAQ,KAAKuH,gBAAgB,IAAI,IAAI,CAACjH,aAAa,CAACW,CAAC,CAAC,CAACyG,KAAK,KAAK,IAAI,CAAC1H,QAAQ,EAAE;QACrF,IAAI,CAACM,aAAa,CAACW,CAAC,CAAC,CAAC0G,WAAW,CAAC,IAAI,CAAC3H,QAAQ,EAAE;UAAEiC,KAAK,EAAE,IAAI,CAAChC,SAAS;UAAE2H,OAAO,EAAE,IAAI,CAAC1H;QAAW,CAAE,EAAE,IAAI,CAACE,SAAS,CAACiG,MAAM,CAAC,qBAAqB,CAAC,CAAC;;MAGxJ,IAAI,CAAC/F,aAAa,CAACW,CAAC,CAAC,CAAC4G,sBAAsB,EAAE;MAE9C,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,IAAI,CAACzH,qBAAqB,CAACc,MAAM,EAAE2G,CAAC,EAAE,EAAE;QACxD,IAAI,IAAI,CAACzH,qBAAqB,CAACyH,CAAC,CAAC,CAACpI,OAAO,EAAE;UACvC;UACA;UACA;UACA,IAAI,CAAC,IAAI,CAACW,qBAAqB,CAACyH,CAAC,CAAC,CAACC,WAAW,IAAI,IAAI,CAAC1H,qBAAqB,CAACyH,CAAC,CAAC,CAACE,iBAAiB,EAAE;YAC/F,IAAI,CAAC3H,qBAAqB,CAACyH,CAAC,CAAC,CAACE,iBAAkB,EAAE;;UAGtD,IAAI,IAAI,CAAC3H,qBAAqB,CAACyH,CAAC,CAAC,CAACC,WAAW,EAAE;YAC3C,IAAI,CAACzH,aAAa,CAACW,CAAC,CAAC,CAACmF,+BAA+B,CAACjE,IAAI,CAAC,IAAI,CAAC9B,qBAAqB,CAACyH,CAAC,CAAC,CAACC,WAAY,CAAC;;;;;IAMtH,IAAI,CAACvE,wBAAwB,EAAE;IAC/B,IAAI,CAACwD,WAAW,CAAC,IAAI,CAAC;IACtB,IAAI,CAAC7C,2BAA2B,EAAE;EACtC;EAEQ8D,QAAQA,CAAA;IACZ,IAAI,CAACjB,WAAW,CAAC,KAAK,CAAC;IAEvB,KAAK,IAAI/F,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,IAAI,CAACX,aAAa,CAACa,MAAM,EAAEF,CAAC,EAAE,EAAE;MAChD,IAAI,CAACgG,uBAAuB,CAAC,IAAI,CAAC3G,aAAa,CAACW,CAAC,CAAC,EAAE,KAAK,CAAC;;IAG9D,IAAI,CAAC+C,YAAY,EAAE;IAEnB,KAAK,IAAI/C,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,IAAI,CAACZ,qBAAqB,CAACc,MAAM,EAAEF,CAAC,EAAE,EAAE;MACxD,IAAI,CAACZ,qBAAqB,CAACY,CAAC,CAAC,CAACvB,OAAO,GAAG,KAAK;;EAErD;EAEQwI,uBAAuBA,CAACxJ,mBAAwC,EAAE0G,MAAe;IACrF,IAAIA,MAAM,EAAE;MACR,OAAOA,MAAM,CAAC+C,cAAc;KAC/B,MAAM,IAAIzJ,mBAAmB,CAAC6C,mBAAmB,EAAE;MAChD,IAAI7C,mBAAmB,CAAC6C,mBAAmB,CAACkE,sBAAsB,EAAE;QAChE,MAAML,MAAM,GAAG1G,mBAAmB,CAAC6C,mBAAmB,CAACvC,YAAY,GAAGN,mBAAmB,CAAC6C,mBAAmB,CAACvC,YAAY,GAAG,IAAI,CAACD,MAAM,CAACC,YAAY;QACrJ,OAAOoG,MAAM,GAAGA,MAAM,CAAC+C,cAAc,GAAG,EAAE;OAC7C,MAAM,IAAIzJ,mBAAmB,CAAC6C,mBAAmB,CAAC6G,aAAa,EAAE;QAC9D,OAAO1J,mBAAmB,CAAC6C,mBAAmB,CAAC6G,aAAa;OAC/D,MAAM;QACH,OAAO,EAAE;;KAEhB,MAAM;MACH,OAAO,IAAI,CAACrJ,MAAM,CAACC,YAAY,GAAG,IAAI,CAACD,MAAM,CAACC,YAAY,CAACmJ,cAAc,GAAG,EAAE;;EAEtF;EAEQ5C,uBAAuBA,CAAC7G,mBAAwC,EAAE0G,MAAe;IACrF;IACA,MAAMiD,eAAe,GAAGjD,MAAM,IAAI,IAAI,CAACrG,MAAM,CAACuJ,aAAa,IAAI,CAAC,CAAC,IAAI,CAACvJ,MAAM,CAACuJ,aAAa,CAACnH,MAAM,IAAI,IAAI,CAACpC,MAAM,CAACuJ,aAAa,CAACvF,OAAO,CAACqC,MAAM,CAAC,KAAK,CAAC;IACpJ,IAAI,CAACM,+BAA+B,GAAG,IAAI,CAACwC,uBAAuB,CAACxJ,mBAAmB,EAAE0G,MAAM,CAAC;IAChG,IAAI,CAACM,+BAA+B,GAAG,IAAI,CAACA,+BAA+B,CAAC6C,MAAM,CAAEC,EAAE,IAAI;MACtF,OAAOA,EAAE,IAAI,IAAI;IACrB,CAAC,CAAC;IACF,IAAI,CAACzJ,MAAM,CAAC0J,SAAS,GAAG,IAAI;IAE5B,MAAMC,wBAAwB,GAAG,IAAI,CAACC,mBAAmB,CAAC,IAAI,CAACjD,+BAA+B,CAAC;IAC/F,IAAI,CAACjF,4BAA4B,GAAG,CAACiI,wBAAwB,IAAI,CAAC,IAAI,CAAChI,qBAAqB,IAAI,IAAI,CAACkI,qBAAqB,EAAE,IAAI,CAACP,eAAe;IAEhJ,MAAMQ,aAAa,GAAG,IAAI,CAACC,oBAAoB,CAAC,IAAI,CAACpD,+BAA+B,CAAC;IACrF,MAAMqD,cAAc,GAAGrK,mBAAmB,CAAC0H,+BAA+B,IAAI1H,mBAAmB,CAAC0H,+BAA+B,CAAC,CAAC,CAAC;IACpI,IAAIN,OAAO,GAAG,IAAI;IAElB;IACA,IAAI,CAAC/G,MAAM,CAACiK,4BAA4B,CAACC,kBAAkB,GAAG,IAAI,CAACxI,4BAA4B,IAAIiI,wBAAwB;IAE3H;IACA,IAAI,IAAI,CAACjI,4BAA4B,IAAI,CAAC/B,mBAAmB,CAAC4H,0BAA0B,EAAE;MACtF5H,mBAAmB,CAACwK,wBAAwB,EAAE;;IAGlD;IACA,IAAIH,cAAc,EAAE;MAChBjD,OAAO,GAAGiD,cAAc;KAC3B,MAAM,IAAI,IAAI,CAACtI,4BAA4B,EAAE;MAC1CqF,OAAO,GAAGpH,mBAAmB,CAAC4H,0BAA0B;KAC3D,MAAM,IAAIuC,aAAa,EAAE;MACtB/C,OAAO,GAAG+C,aAAa;;IAG3B,IAAI,CAAClC,gBAAgB,EAAE;IACvB,IAAI,CAACtC,oBAAoB,CAAC3F,mBAAmB,EAAEoH,OAAO,CAAC;EAC3D;EAEQzB,oBAAoBA,CAAC3F,mBAAwC,EAAEqJ,WAAkC;IACrG,IAAIA,WAAW,EAAE;MACbA,WAAW,CAACU,SAAS,GAAG,KAAK;MAC7BV,WAAW,CAAChC,YAAY,GAAGrH,mBAAmB,CAACsH,YAAa;;IAGhE,IAAItH,mBAAmB,CAACyK,kBAAkB,KAAKpB,WAAW,EAAE;MACxD,IAAIrJ,mBAAmB,CAACyK,kBAAkB,EAAE;QACxC,IAAI,CAACjC,sBAAsB,CAACxI,mBAAmB,CAAC;;MAEpDA,mBAAmB,CAACyK,kBAAkB,GAAGpB,WAAW;;IAGxD,IAAIrJ,mBAAmB,CAAC0K,qBAAqB,EAAE;MAC3C,IAAI,CAACjF,2BAA2B,EAAE;MAClCzF,mBAAmB,CAAC0K,qBAAqB,GAAG,KAAK;;EAEzD;EAEA;;;EAGOlC,sBAAsBA,CAACxI,mBAAwC;IAClE,IAAIA,mBAAmB,CAACyK,kBAAkB,EAAE;MACxCzK,mBAAmB,CAACyK,kBAAkB,CAACV,SAAS,GAAG,IAAI;MACvD/J,mBAAmB,CAACyK,kBAAkB,CAACE,0BAA0B,EAAE;MACnE3K,mBAAmB,CAACyK,kBAAkB,GAAG,IAAI;;EAErD;EAEQP,qBAAqBA,CAAA;IACzB,KAAK,IAAI3H,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,IAAI,CAACZ,qBAAqB,CAACc,MAAM,EAAEF,CAAC,EAAE,EAAE;MACxD,IAAI,IAAI,CAACZ,qBAAqB,CAACY,CAAC,CAAC,CAACvB,OAAO,IAAI,IAAI,CAACW,qBAAqB,CAACY,CAAC,CAAC,CAACqI,oBAAoB,EAAE;QAC7F,OAAO,IAAI;;;IAInB,OAAO,KAAK;EAChB;EAEQX,mBAAmBA,CAACP,aAAsC;;IAC9D,IAAImB,mBAAmB,GAAG,KAAK;IAC/B,IAAInB,aAAa,EAAE;MACf,KAAK,IAAInH,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGmH,aAAa,CAACjH,MAAM,EAAEF,CAAC,EAAE,EAAE;QAC3C,IAAI,EAAAnC,EAAA,GAAAsJ,aAAa,CAACnH,CAAC,CAAC,cAAAnC,EAAA,uBAAAA,EAAA,CAAE0K,YAAY,EAAE,MAAK,4BAA4B,EAAE;UACnED,mBAAmB,GAAG,IAAI;UAC1B;;;;IAKZ,OAAOA,mBAAmB;EAC9B;EAEA;;;;;EAKQT,oBAAoBA,CAACV,aAAsC;IAC/D,KAAK,IAAIqB,OAAO,GAAG,CAAC,EAAEA,OAAO,GAAGrB,aAAa,CAACjH,MAAM,EAAEsI,OAAO,EAAE,EAAE;MAC7D,IAAIrB,aAAa,CAACqB,OAAO,CAAC,KAAK,IAAI,EAAE;QACjC,OAAOrB,aAAa,CAACqB,OAAO,CAAC;;;IAGrC,OAAO,IAAI;EACf;EAEA;;;EAGOC,WAAWA,CAAA;IACd,IAAI,CAACpL,QAAQ,GAAG,IAAI;EACxB;EAEA;;;;EAIQkJ,eAAeA,CAACvF,KAAe;IACnC;IACA,IAAI,CAAClD,MAAM,CAAC4K,0BAA0B,GAAG,KAAK;IAE9C,KAAK,IAAI1I,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGgB,KAAK,CAACd,MAAM,EAAEF,CAAC,EAAE,EAAE;MACnC,MAAMlD,IAAI,GAAGkE,KAAK,CAAChB,CAAC,CAAC;MAErB,IAAI,IAAI,CAACjD,eAAe,CAACD,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE;QACnC,IAAI,CAACC,eAAe,CAACD,IAAI,CAAC,GAAG,IAAI,CAACoC,UAAU,CAACgB,MAAM;QACnD,IAAI,CAAChB,UAAU,CAACgC,IAAI,CAACpE,IAAI,CAAC;QAE1B,IAAI,CAACkC,SAAS,CAACkC,IAAI,CAAC1E,eAAe,CAACyD,cAAc,CAACnD,IAAI,CAAC,CAACA,IAAI,CAAC;QAC9D,IAAI,CAACmC,WAAW,CAACiC,IAAI,CAAC1E,eAAe,CAACyD,cAAc,CAACnD,IAAI,CAAC,CAACmG,MAAM,CAAC;QAClE,IAAI,CAAC9D,SAAS,CAAC+B,IAAI,CAAC1E,eAAe,CAACyD,cAAc,CAACnD,IAAI,CAAC,CAACuD,IAAI,CAAC;QAC9D,IAAI,CAACtB,QAAQ,EAAE;;MAGnB,IAAIjC,IAAI,KAAK;QACT,IAAI,CAACgB,MAAM,CAAC4K,0BAA0B,GAAG,IAAI;;;EAGzD;EAEA;;;EAGOC,MAAMA,CAAA;IACT,IAAI,IAAI,CAACtL,QAAQ,EAAE;MACf,IAAI,CAAC8D,OAAO,EAAE;;EAEtB;EAEQA,OAAOA,CAAA;IACX,IAAI,CAAC6F,QAAQ,EAAE;IACf,IAAI4B,aAAa,GAAG,KAAK;IACzB,IAAI,CAAC9K,MAAM,CAACiK,4BAA4B,CAACC,kBAAkB,GAAG,KAAK;IAEnE,IAAI,IAAI,CAAClK,MAAM,CAAC+K,qBAAqB,IAAI,IAAI,CAAC/K,MAAM,CAACgL,+BAA+B,EAAE;MAClF,IAAI,CAAChL,MAAM,CAAC+K,qBAAqB,CAACE,kBAAkB,CAAC,IAAI,CAAC;MAC1DH,aAAa,GAAG,IAAI;;IAGxB,KAAK,IAAI5I,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,IAAI,CAAClC,MAAM,CAACkL,SAAS,CAAC9I,MAAM,EAAEF,CAAC,EAAE,EAAE;MACnD,IAAI,IAAI,CAAClC,MAAM,CAACkL,SAAS,CAAChJ,CAAC,CAAC,CAAC+I,kBAAkB,CAAC,IAAI,CAAC,EAAE;QACnDH,aAAa,GAAG,IAAI;;;IAI5B,IAAIA,aAAa,EAAE;MACf,IAAI,CAAC5C,uBAAuB,CAAC,IAAI,CAAC/I,SAAS,EAAE,IAAI,CAAC;;IAGtD,IAAIkK,aAAa;IAEjB,KAAK,IAAInH,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,IAAI,CAACX,aAAa,CAACa,MAAM,EAAEF,CAAC,EAAE,EAAE;MAChD,IAAI,IAAI,CAACX,aAAa,CAACW,CAAC,CAAC,CAACM,mBAAmB,EAAE;QAC3C6G,aAAa,GAAG,IAAI,CAACF,uBAAuB,CAAC,IAAI,CAAC5H,aAAa,CAACW,CAAC,CAAC,CAAC;OACtE,MAAM;QACH,MAAMmE,MAAM,GAAG,IAAI,CAACrG,MAAM,CAACC,YAAY;QACvC,IAAI,CAACoG,MAAM,EAAE;UACT;;QAGJgD,aAAa,GAAGhD,MAAM,CAAC+C,cAAc;;MAGzC,IAAI,CAACC,aAAa,EAAE;QAChB;;MAGJA,aAAa,GAA4BA,aAAa,CAACG,MAAM,CAAEC,EAAE,IAAI;QACjE,OAAOA,EAAE,IAAI,IAAI;MACrB,CAAC,CAAC;MAEF,IAAIJ,aAAa,EAAE;QACf,KAAK,IAAIN,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGM,aAAa,CAACjH,MAAM,EAAE2G,CAAC,EAAE,EAAE;UAC3C,IAAIM,aAAa,CAACN,CAAC,CAAC,CAACkC,kBAAkB,CAAC,IAAI,CAAC,EAAE;YAC3C,IAAI,CAAC/C,uBAAuB,CAAC,IAAI,CAAC3G,aAAa,CAACW,CAAC,CAAC,EAAE,IAAI,CAAC;YACzD4I,aAAa,GAAG,IAAI;;;QAI5B,IAAI,IAAI,CAAClB,mBAAmB,CAACP,aAAa,CAAC,EAAE;UACzC,IAAI,CAACrJ,MAAM,CAACiK,4BAA4B,CAACC,kBAAkB,GAAG,IAAI;;;;IAK9E,IAAI,CAACpL,+BAA+B,EAAE;IACtC,IAAI,CAACS,QAAQ,GAAG,KAAK;IAErB,IAAIuL,aAAa,EAAE;MACf,IAAI,CAACvC,OAAO,EAAE;;EAEtB;EAEQzJ,+BAA+BA,CAAA;IACnC,MAAMoM,SAAS,GAAG,IAAI,CAAClL,MAAM,CAACkL,SAAS;IAEvC,KAAK,IAAIhJ,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGgJ,SAAS,CAAC9I,MAAM,EAAEF,CAAC,EAAE,EAAE;MACvCgJ,SAAS,CAAChJ,CAAC,CAAC,CAACyI,WAAW,CAACnM,QAAQ,CAAC2M,gBAAgB,CAAC;;EAE3D;EAEA;;;EAGOC,OAAOA,CAAA;IACV,KAAK,IAAIlJ,CAAC,GAAG,IAAI,CAACX,aAAa,CAACa,MAAM,GAAG,CAAC,EAAEF,CAAC,IAAI,CAAC,EAAEA,CAAC,EAAE,EAAE;MACrD,IAAI,CAACX,aAAa,CAACW,CAAC,CAAC,CAACkJ,OAAO,EAAE;;IAGnC,KAAK,IAAIlJ,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,IAAI,CAACZ,qBAAqB,CAACc,MAAM,EAAEF,CAAC,EAAE,EAAE;MACxD,IAAI,IAAI,CAACZ,qBAAqB,CAACY,CAAC,CAAC,CAACkJ,OAAO,EAAE;QACvC,IAAI,CAAC9J,qBAAqB,CAACY,CAAC,CAAC,CAACkJ,OAAQ,EAAE;;;EAGpD;;AA93BA;;;AAGc1M,eAAA,CAAA2D,6BAA6B,GAA4BgJ,CAAC,IAAI;EACxE,MAAM/M,WAAW,CAAC,+BAA+B,CAAC;AACtD,CAAC;AAyFD;;;AAGcI,eAAA,CAAAyD,cAAc,GAAG,CAC3B;EACI+C,OAAO,EAAE;EACTlG,IAAI,EAAE;EACNmG,MAAM,EAAE;EACR5C,IAAI,EAAE;CACT,EACD;EACI2C,OAAO,EAAE;EACTlG,IAAI,EAAE;EACNmG,MAAM,EAAE;EACR5C,IAAI,EAAE;CACT,EACD;EACI2C,OAAO,EAAE;EACTlG,IAAI,EAAE;EACNmG,MAAM,EAAE;EACR5C,IAAI,EAAE;CACT,EACD;EACI2C,OAAO,EAAE;EACTlG,IAAI,EAAE;EACNmG,MAAM,EAAE;EACR5C,IAAI,EAAE;CACT,EACD;EACI2C,OAAO,EAAE;EACTlG,IAAI,EAAE;EACNmG,MAAM,EAAE;EACR5C,IAAI,EAAE;CACT,EACD;EACI2C,OAAO,EAAE;EACTlG,IAAI,EAAE;EACNmG,MAAM,EAAE;EACR5C,IAAI,EAAE;CACT,EACD;EACI2C,OAAO,EAAE;EACTlG,IAAI,EAAE;EACNmG,MAAM,EAAE;EACR5C,IAAI,EAAE;CACT,EACD;EACI2C,OAAO,EAAE;EACTlG,IAAI,EAAE;EACNmG,MAAM,EAAE;EACR5C,IAAI,EAAE;CACT,CACJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}