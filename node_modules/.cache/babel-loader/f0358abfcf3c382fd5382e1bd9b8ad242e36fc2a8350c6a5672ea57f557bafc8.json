{"ast":null,"code":"import { Observable } from \"@babylonjs/core/Misc/observable.js\";\nimport { Vector3 } from \"@babylonjs/core/Maths/math.vector.js\";\nimport { PointerEventTypes } from \"@babylonjs/core/Events/pointerEvents.js\";\nimport { HemisphericLight } from \"@babylonjs/core/Lights/hemisphericLight.js\";\nimport { UtilityLayerRenderer } from \"@babylonjs/core/Rendering/utilityLayerRenderer.js\";\nimport { EngineStore } from \"@babylonjs/core/Engines/engineStore.js\";\nimport { Container3D } from \"./controls/container3D.js\";\n/**\n * Class used to manage 3D user interface\n * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui3D\n */\nexport class GUI3DManager {\n  /** Gets the hosting scene */\n  get scene() {\n    return this._scene;\n  }\n  /** Gets associated utility layer */\n  get utilityLayer() {\n    return this._utilityLayer;\n  }\n  /** Gets the scaling for all UI elements owned by this manager */\n  get controlScaling() {\n    return this._customControlScaling;\n  }\n  /** Sets the scaling adjustment for all UI elements owned by this manager */\n  set controlScaling(newScale) {\n    if (this._customControlScaling !== newScale && newScale > 0) {\n      const scaleRatio = newScale / this._customControlScaling;\n      this._customControlScaling = newScale;\n      this._rootContainer.children.forEach(control => {\n        control.scaling.scaleInPlace(scaleRatio);\n        if (newScale !== 1) {\n          control._isScaledByManager = true;\n        }\n      });\n    }\n  }\n  /** Gets if controls attached to this manager are realistically sized, based on the fact that 1 unit length is 1 meter */\n  get useRealisticScaling() {\n    return this.controlScaling === GUI3DManager.MRTK_REALISTIC_SCALING;\n  }\n  /** Sets if controls attached to this manager are realistically sized, based on the fact that 1 unit length is 1 meter */\n  set useRealisticScaling(newValue) {\n    this.controlScaling = newValue ? GUI3DManager.MRTK_REALISTIC_SCALING : 1;\n  }\n  /**\n   * Creates a new GUI3DManager\n   * @param scene\n   */\n  constructor(scene) {\n    this._customControlScaling = 1.0;\n    /** @internal */\n    this._lastControlOver = {};\n    /** @internal */\n    this._lastControlDown = {};\n    /**\n     * Observable raised when the point picked by the pointer events changed\n     */\n    this.onPickedPointChangedObservable = new Observable();\n    /**\n     * Observable raised when a picking happens\n     */\n    this.onPickingObservable = new Observable();\n    // Shared resources\n    /** @internal */\n    this._sharedMaterials = {};\n    /** @internal */\n    this._touchSharedMaterials = {};\n    this._scene = scene || EngineStore.LastCreatedScene;\n    this._sceneDisposeObserver = this._scene.onDisposeObservable.add(() => {\n      this._sceneDisposeObserver = null;\n      this._utilityLayer = null;\n      this.dispose();\n    });\n    this._utilityLayer = UtilityLayerRenderer._CreateDefaultUtilityLayerFromScene(this._scene);\n    this._utilityLayer.onlyCheckPointerDownEvents = false;\n    this._utilityLayer.pickUtilitySceneFirst = false;\n    this._utilityLayer.mainSceneTrackerPredicate = mesh => {\n      var _a, _b, _c;\n      return mesh && ((_c = (_b = (_a = mesh.reservedDataStore) === null || _a === void 0 ? void 0 : _a.GUI3D) === null || _b === void 0 ? void 0 : _b.control) === null || _c === void 0 ? void 0 : _c._node);\n    };\n    // Root\n    this._rootContainer = new Container3D(\"RootContainer\");\n    this._rootContainer._host = this;\n    const utilityLayerScene = this._utilityLayer.utilityLayerScene;\n    // Events\n    this._pointerOutObserver = this._utilityLayer.onPointerOutObservable.add(pointerId => {\n      this._handlePointerOut(pointerId, true);\n    });\n    this._pointerObserver = utilityLayerScene.onPointerObservable.add(pi => {\n      this._doPicking(pi);\n    });\n    // Scene\n    this._utilityLayer.utilityLayerScene.autoClear = false;\n    this._utilityLayer.utilityLayerScene.autoClearDepthAndStencil = false;\n    new HemisphericLight(\"hemi\", Vector3.Up(), this._utilityLayer.utilityLayerScene);\n  }\n  _handlePointerOut(pointerId, isPointerUp) {\n    const previousControlOver = this._lastControlOver[pointerId];\n    if (previousControlOver) {\n      previousControlOver._onPointerOut(previousControlOver);\n      delete this._lastControlOver[pointerId];\n    }\n    if (isPointerUp) {\n      if (this._lastControlDown[pointerId]) {\n        this._lastControlDown[pointerId].forcePointerUp();\n        delete this._lastControlDown[pointerId];\n      }\n    }\n    this.onPickedPointChangedObservable.notifyObservers(null);\n  }\n  _doPicking(pi) {\n    var _a, _b, _c;\n    if (!this._utilityLayer || !this._utilityLayer.shouldRender || !this._utilityLayer.utilityLayerScene.activeCamera) {\n      return false;\n    }\n    const pointerEvent = pi.event;\n    const pointerId = pointerEvent.pointerId || 0;\n    const buttonIndex = pointerEvent.button;\n    const pickingInfo = pi.pickInfo;\n    if (pickingInfo) {\n      this.onPickingObservable.notifyObservers(pickingInfo.pickedMesh);\n    }\n    if (!pickingInfo || !pickingInfo.hit) {\n      this._handlePointerOut(pointerId, pi.type === PointerEventTypes.POINTERUP);\n      return false;\n    }\n    if (pickingInfo.pickedPoint) {\n      this.onPickedPointChangedObservable.notifyObservers(pickingInfo.pickedPoint);\n    }\n    const control = (_b = (_a = pickingInfo.pickedMesh.reservedDataStore) === null || _a === void 0 ? void 0 : _a.GUI3D) === null || _b === void 0 ? void 0 : _b.control;\n    if (!!control && !control._processObservables(pi.type, pickingInfo.pickedPoint, ((_c = pickingInfo.originMesh) === null || _c === void 0 ? void 0 : _c.position) || null, pointerId, buttonIndex)) {\n      if (pi.type === PointerEventTypes.POINTERMOVE) {\n        if (this._lastControlOver[pointerId]) {\n          this._lastControlOver[pointerId]._onPointerOut(this._lastControlOver[pointerId]);\n        }\n        delete this._lastControlOver[pointerId];\n      }\n    }\n    if (pi.type === PointerEventTypes.POINTERUP) {\n      if (this._lastControlDown[pointerEvent.pointerId]) {\n        this._lastControlDown[pointerEvent.pointerId].forcePointerUp();\n        delete this._lastControlDown[pointerEvent.pointerId];\n      }\n      if (pointerEvent.pointerType === \"touch\" || pointerEvent.pointerType === \"xr\" && this._scene.getEngine().hostInformation.isMobile) {\n        this._handlePointerOut(pointerId, false);\n      }\n    }\n    return true;\n  }\n  /**\n   * Gets the root container\n   */\n  get rootContainer() {\n    return this._rootContainer;\n  }\n  /**\n   * Gets a boolean indicating if the given control is in the root child list\n   * @param control defines the control to check\n   * @returns true if the control is in the root child list\n   */\n  containsControl(control) {\n    return this._rootContainer.containsControl(control);\n  }\n  /**\n   * Adds a control to the root child list\n   * @param control defines the control to add\n   * @returns the current manager\n   */\n  addControl(control) {\n    this._rootContainer.addControl(control);\n    if (this._customControlScaling !== 1) {\n      control.scaling.scaleInPlace(this._customControlScaling);\n      control._isScaledByManager = true;\n    }\n    return this;\n  }\n  /**\n   * Removes a control from the root child list\n   * @param control defines the control to remove\n   * @returns the current container\n   */\n  removeControl(control) {\n    this._rootContainer.removeControl(control);\n    if (control._isScaledByManager) {\n      control.scaling.scaleInPlace(1 / this._customControlScaling);\n      control._isScaledByManager = false;\n    }\n    return this;\n  }\n  /**\n   * Releases all associated resources\n   */\n  dispose() {\n    this._rootContainer.dispose();\n    for (const materialName in this._sharedMaterials) {\n      if (!Object.prototype.hasOwnProperty.call(this._sharedMaterials, materialName)) {\n        continue;\n      }\n      this._sharedMaterials[materialName].dispose();\n    }\n    this._sharedMaterials = {};\n    for (const materialName in this._touchSharedMaterials) {\n      if (!Object.prototype.hasOwnProperty.call(this._touchSharedMaterials, materialName)) {\n        continue;\n      }\n      this._touchSharedMaterials[materialName].dispose();\n    }\n    this._touchSharedMaterials = {};\n    if (this._pointerOutObserver && this._utilityLayer) {\n      this._utilityLayer.onPointerOutObservable.remove(this._pointerOutObserver);\n      this._pointerOutObserver = null;\n    }\n    this.onPickedPointChangedObservable.clear();\n    this.onPickingObservable.clear();\n    const utilityLayerScene = this._utilityLayer ? this._utilityLayer.utilityLayerScene : null;\n    if (utilityLayerScene) {\n      if (this._pointerObserver) {\n        utilityLayerScene.onPointerObservable.remove(this._pointerObserver);\n        this._pointerObserver = null;\n      }\n    }\n    if (this._scene) {\n      if (this._sceneDisposeObserver) {\n        this._scene.onDisposeObservable.remove(this._sceneDisposeObserver);\n        this._sceneDisposeObserver = null;\n      }\n    }\n    if (this._utilityLayer) {\n      this._utilityLayer.dispose();\n    }\n  }\n}\nGUI3DManager.MRTK_REALISTIC_SCALING = 0.032;","map":{"version":3,"names":["Observable","Vector3","PointerEventTypes","HemisphericLight","UtilityLayerRenderer","EngineStore","Container3D","GUI3DManager","scene","_scene","utilityLayer","_utilityLayer","controlScaling","_customControlScaling","newScale","scaleRatio","_rootContainer","children","forEach","control","scaling","scaleInPlace","_isScaledByManager","useRealisticScaling","MRTK_REALISTIC_SCALING","newValue","constructor","_lastControlOver","_lastControlDown","onPickedPointChangedObservable","onPickingObservable","_sharedMaterials","_touchSharedMaterials","LastCreatedScene","_sceneDisposeObserver","onDisposeObservable","add","dispose","_CreateDefaultUtilityLayerFromScene","onlyCheckPointerDownEvents","pickUtilitySceneFirst","mainSceneTrackerPredicate","mesh","_c","_b","_a","reservedDataStore","GUI3D","_node","_host","utilityLayerScene","_pointerOutObserver","onPointerOutObservable","pointerId","_handlePointerOut","_pointerObserver","onPointerObservable","pi","_doPicking","autoClear","autoClearDepthAndStencil","Up","isPointerUp","previousControlOver","_onPointerOut","forcePointerUp","notifyObservers","shouldRender","activeCamera","pointerEvent","event","buttonIndex","button","pickingInfo","pickInfo","pickedMesh","hit","type","POINTERUP","pickedPoint","_processObservables","originMesh","position","POINTERMOVE","pointerType","getEngine","hostInformation","isMobile","rootContainer","containsControl","addControl","removeControl","materialName","Object","prototype","hasOwnProperty","call","remove","clear"],"sources":["../../../../dev/gui/src/3D/gui3DManager.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/naming-convention */\r\nimport type { Nullable } from \"core/types\";\r\nimport type { Observer } from \"core/Misc/observable\";\r\nimport { Observable } from \"core/Misc/observable\";\r\nimport { Vector3 } from \"core/Maths/math.vector\";\r\nimport type { PointerInfo } from \"core/Events/pointerEvents\";\r\nimport { PointerEventTypes } from \"core/Events/pointerEvents\";\r\nimport type { Material } from \"core/Materials/material\";\r\nimport { HemisphericLight } from \"core/Lights/hemisphericLight\";\r\nimport type { AbstractMesh } from \"core/Meshes/abstractMesh\";\r\nimport { UtilityLayerRenderer } from \"core/Rendering/utilityLayerRenderer\";\r\nimport { EngineStore } from \"core/Engines/engineStore\";\r\nimport type { IDisposable, Scene } from \"core/scene\";\r\n\r\nimport { Container3D } from \"./controls/container3D\";\r\nimport type { Control3D } from \"./controls/control3D\";\r\nimport type { IPointerEvent } from \"core/Events/deviceInputEvents\";\r\n\r\n/**\r\n * Class used to manage 3D user interface\r\n * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui3D\r\n */\r\nexport class GUI3DManager implements IDisposable {\r\n    private _scene: Scene;\r\n    private _sceneDisposeObserver: Nullable<Observer<Scene>>;\r\n    private _utilityLayer: Nullable<UtilityLayerRenderer>;\r\n    private _rootContainer: Container3D;\r\n    private _pointerObserver: Nullable<Observer<PointerInfo>>;\r\n    private _pointerOutObserver: Nullable<Observer<number>>;\r\n    private _customControlScaling = 1.0;\r\n    /** @internal */\r\n    public _lastPickedControl: Control3D;\r\n    /** @internal */\r\n    public _lastControlOver: { [pointerId: number]: Control3D } = {};\r\n    /** @internal */\r\n    public _lastControlDown: { [pointerId: number]: Control3D } = {};\r\n\r\n    protected static MRTK_REALISTIC_SCALING: number = 0.032;\r\n\r\n    /**\r\n     * Observable raised when the point picked by the pointer events changed\r\n     */\r\n    public onPickedPointChangedObservable = new Observable<Nullable<Vector3>>();\r\n\r\n    /**\r\n     * Observable raised when a picking happens\r\n     */\r\n    public onPickingObservable = new Observable<Nullable<AbstractMesh>>();\r\n\r\n    // Shared resources\r\n    /** @internal */\r\n    public _sharedMaterials: { [key: string]: Material } = {};\r\n\r\n    /** @internal */\r\n    public _touchSharedMaterials: { [key: string]: Material } = {};\r\n\r\n    /** Gets the hosting scene */\r\n    public get scene(): Scene {\r\n        return this._scene;\r\n    }\r\n\r\n    /** Gets associated utility layer */\r\n    public get utilityLayer(): Nullable<UtilityLayerRenderer> {\r\n        return this._utilityLayer;\r\n    }\r\n\r\n    /** Gets the scaling for all UI elements owned by this manager */\r\n    public get controlScaling() {\r\n        return this._customControlScaling;\r\n    }\r\n\r\n    /** Sets the scaling adjustment for all UI elements owned by this manager */\r\n    public set controlScaling(newScale: number) {\r\n        if (this._customControlScaling !== newScale && newScale > 0) {\r\n            const scaleRatio = newScale / this._customControlScaling;\r\n            this._customControlScaling = newScale;\r\n\r\n            this._rootContainer.children.forEach((control: Control3D) => {\r\n                control.scaling.scaleInPlace(scaleRatio);\r\n\r\n                if (newScale !== 1) {\r\n                    control._isScaledByManager = true;\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    /** Gets if controls attached to this manager are realistically sized, based on the fact that 1 unit length is 1 meter */\r\n    public get useRealisticScaling() {\r\n        return this.controlScaling === GUI3DManager.MRTK_REALISTIC_SCALING;\r\n    }\r\n\r\n    /** Sets if controls attached to this manager are realistically sized, based on the fact that 1 unit length is 1 meter */\r\n    public set useRealisticScaling(newValue: boolean) {\r\n        this.controlScaling = newValue ? GUI3DManager.MRTK_REALISTIC_SCALING : 1;\r\n    }\r\n\r\n    /**\r\n     * Creates a new GUI3DManager\r\n     * @param scene\r\n     */\r\n    public constructor(scene?: Scene) {\r\n        this._scene = scene || EngineStore.LastCreatedScene!;\r\n        this._sceneDisposeObserver = this._scene.onDisposeObservable.add(() => {\r\n            this._sceneDisposeObserver = null;\r\n            this._utilityLayer = null;\r\n            this.dispose();\r\n        });\r\n\r\n        this._utilityLayer = UtilityLayerRenderer._CreateDefaultUtilityLayerFromScene(this._scene);\r\n        this._utilityLayer.onlyCheckPointerDownEvents = false;\r\n        this._utilityLayer.pickUtilitySceneFirst = false;\r\n        this._utilityLayer.mainSceneTrackerPredicate = (mesh: Nullable<AbstractMesh>) => {\r\n            return mesh && mesh.reservedDataStore?.GUI3D?.control?._node;\r\n        };\r\n\r\n        // Root\r\n        this._rootContainer = new Container3D(\"RootContainer\");\r\n        this._rootContainer._host = this;\r\n        const utilityLayerScene = this._utilityLayer.utilityLayerScene;\r\n\r\n        // Events\r\n        this._pointerOutObserver = this._utilityLayer.onPointerOutObservable.add((pointerId) => {\r\n            this._handlePointerOut(pointerId, true);\r\n        });\r\n\r\n        this._pointerObserver = utilityLayerScene.onPointerObservable.add((pi) => {\r\n            this._doPicking(pi);\r\n        });\r\n\r\n        // Scene\r\n        this._utilityLayer.utilityLayerScene.autoClear = false;\r\n        this._utilityLayer.utilityLayerScene.autoClearDepthAndStencil = false;\r\n        new HemisphericLight(\"hemi\", Vector3.Up(), this._utilityLayer.utilityLayerScene);\r\n    }\r\n\r\n    private _handlePointerOut(pointerId: number, isPointerUp: boolean) {\r\n        const previousControlOver = this._lastControlOver[pointerId];\r\n        if (previousControlOver) {\r\n            previousControlOver._onPointerOut(previousControlOver);\r\n            delete this._lastControlOver[pointerId];\r\n        }\r\n\r\n        if (isPointerUp) {\r\n            if (this._lastControlDown[pointerId]) {\r\n                this._lastControlDown[pointerId].forcePointerUp();\r\n                delete this._lastControlDown[pointerId];\r\n            }\r\n        }\r\n\r\n        this.onPickedPointChangedObservable.notifyObservers(null);\r\n    }\r\n\r\n    private _doPicking(pi: PointerInfo): boolean {\r\n        if (!this._utilityLayer || !this._utilityLayer.shouldRender || !this._utilityLayer.utilityLayerScene.activeCamera) {\r\n            return false;\r\n        }\r\n\r\n        const pointerEvent = <IPointerEvent>pi.event;\r\n\r\n        const pointerId = pointerEvent.pointerId || 0;\r\n        const buttonIndex = pointerEvent.button;\r\n\r\n        const pickingInfo = pi.pickInfo;\r\n        if (pickingInfo) {\r\n            this.onPickingObservable.notifyObservers(pickingInfo.pickedMesh);\r\n        }\r\n\r\n        if (!pickingInfo || !pickingInfo.hit) {\r\n            this._handlePointerOut(pointerId, pi.type === PointerEventTypes.POINTERUP);\r\n            return false;\r\n        }\r\n\r\n        if (pickingInfo.pickedPoint) {\r\n            this.onPickedPointChangedObservable.notifyObservers(pickingInfo.pickedPoint);\r\n        }\r\n\r\n        const control = <Control3D>pickingInfo.pickedMesh!.reservedDataStore?.GUI3D?.control;\r\n        if (!!control && !control._processObservables(pi.type, pickingInfo.pickedPoint!, pickingInfo.originMesh?.position || null, pointerId, buttonIndex)) {\r\n            if (pi.type === PointerEventTypes.POINTERMOVE) {\r\n                if (this._lastControlOver[pointerId]) {\r\n                    this._lastControlOver[pointerId]._onPointerOut(this._lastControlOver[pointerId]);\r\n                }\r\n\r\n                delete this._lastControlOver[pointerId];\r\n            }\r\n        }\r\n\r\n        if (pi.type === PointerEventTypes.POINTERUP) {\r\n            if (this._lastControlDown[pointerEvent.pointerId]) {\r\n                this._lastControlDown[pointerEvent.pointerId].forcePointerUp();\r\n                delete this._lastControlDown[pointerEvent.pointerId];\r\n            }\r\n\r\n            if (pointerEvent.pointerType === \"touch\" || (pointerEvent.pointerType === \"xr\" && this._scene.getEngine().hostInformation.isMobile)) {\r\n                this._handlePointerOut(pointerId, false);\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Gets the root container\r\n     */\r\n    public get rootContainer(): Container3D {\r\n        return this._rootContainer;\r\n    }\r\n\r\n    /**\r\n     * Gets a boolean indicating if the given control is in the root child list\r\n     * @param control defines the control to check\r\n     * @returns true if the control is in the root child list\r\n     */\r\n    public containsControl(control: Control3D): boolean {\r\n        return this._rootContainer.containsControl(control);\r\n    }\r\n\r\n    /**\r\n     * Adds a control to the root child list\r\n     * @param control defines the control to add\r\n     * @returns the current manager\r\n     */\r\n    public addControl(control: Control3D): GUI3DManager {\r\n        this._rootContainer.addControl(control);\r\n        if (this._customControlScaling !== 1) {\r\n            control.scaling.scaleInPlace(this._customControlScaling);\r\n            control._isScaledByManager = true;\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Removes a control from the root child list\r\n     * @param control defines the control to remove\r\n     * @returns the current container\r\n     */\r\n    public removeControl(control: Control3D): GUI3DManager {\r\n        this._rootContainer.removeControl(control);\r\n        if (control._isScaledByManager) {\r\n            control.scaling.scaleInPlace(1 / this._customControlScaling);\r\n            control._isScaledByManager = false;\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Releases all associated resources\r\n     */\r\n    public dispose() {\r\n        this._rootContainer.dispose();\r\n\r\n        for (const materialName in this._sharedMaterials) {\r\n            if (!Object.prototype.hasOwnProperty.call(this._sharedMaterials, materialName)) {\r\n                continue;\r\n            }\r\n\r\n            this._sharedMaterials[materialName].dispose();\r\n        }\r\n\r\n        this._sharedMaterials = {};\r\n\r\n        for (const materialName in this._touchSharedMaterials) {\r\n            if (!Object.prototype.hasOwnProperty.call(this._touchSharedMaterials, materialName)) {\r\n                continue;\r\n            }\r\n\r\n            this._touchSharedMaterials[materialName].dispose();\r\n        }\r\n\r\n        this._touchSharedMaterials = {};\r\n\r\n        if (this._pointerOutObserver && this._utilityLayer) {\r\n            this._utilityLayer.onPointerOutObservable.remove(this._pointerOutObserver);\r\n            this._pointerOutObserver = null;\r\n        }\r\n\r\n        this.onPickedPointChangedObservable.clear();\r\n        this.onPickingObservable.clear();\r\n\r\n        const utilityLayerScene = this._utilityLayer ? this._utilityLayer.utilityLayerScene : null;\r\n\r\n        if (utilityLayerScene) {\r\n            if (this._pointerObserver) {\r\n                utilityLayerScene.onPointerObservable.remove(this._pointerObserver);\r\n                this._pointerObserver = null;\r\n            }\r\n        }\r\n        if (this._scene) {\r\n            if (this._sceneDisposeObserver) {\r\n                this._scene.onDisposeObservable.remove(this._sceneDisposeObserver);\r\n                this._sceneDisposeObserver = null;\r\n            }\r\n        }\r\n\r\n        if (this._utilityLayer) {\r\n            this._utilityLayer.dispose();\r\n        }\r\n    }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}