{"ast":null,"code":"import { __decorate } from \"../../../../tslib.es6.js\";\nimport { NodeGeometryBlockConnectionPointTypes } from \"../../Enums/nodeGeometryConnectionPointTypes.js\";\nimport { NodeGeometryBlock } from \"../../nodeGeometryBlock.js\";\nimport { GeometryInputBlock } from \"../geometryInputBlock.js\";\nimport { RegisterClass } from \"../../../../Misc/typeStore.js\";\nimport { CreateCylinderVertexData } from \"../../../Builders/cylinderBuilder.js\";\nimport { PropertyTypeForEdition, editableInPropertyPage } from \"../../../../Decorators/nodeDecorator.js\";\n/**\n * Defines a block used to generate cylinder geometry data\n */\nexport class CylinderBlock extends NodeGeometryBlock {\n  /**\n   * Create a new SphereBlock\n   * @param name defines the block name\n   */\n  constructor(name) {\n    super(name);\n    /**\n     * Gets or sets a boolean indicating that this block can evaluate context\n     * Build performance is improved when this value is set to false as the system will cache values instead of reevaluating everything per context change\n     */\n    this.evaluateContext = false;\n    this.registerInput(\"height\", NodeGeometryBlockConnectionPointTypes.Float, true, 25);\n    this.registerInput(\"diameter\", NodeGeometryBlockConnectionPointTypes.Float, true, 1);\n    this.registerInput(\"diameterTop\", NodeGeometryBlockConnectionPointTypes.Float, true, -1);\n    this.registerInput(\"diameterBottom\", NodeGeometryBlockConnectionPointTypes.Float, true, -1);\n    this.registerInput(\"subdivisions\", NodeGeometryBlockConnectionPointTypes.Int, true, 1);\n    this.registerInput(\"tessellation\", NodeGeometryBlockConnectionPointTypes.Int, true, 24);\n    this.registerInput(\"arc\", NodeGeometryBlockConnectionPointTypes.Float, true, 1.0);\n    this.registerOutput(\"geometry\", NodeGeometryBlockConnectionPointTypes.Geometry);\n  }\n  /**\n   * Gets the current class name\n   * @returns the class name\n   */\n  getClassName() {\n    return \"CylinderBlock\";\n  }\n  /**\n   * Gets the height input component\n   */\n  get height() {\n    return this._inputs[0];\n  }\n  /**\n   * Gets the diameter input component\n   */\n  get diameter() {\n    return this._inputs[1];\n  }\n  /**\n   * Gets the diameterTop input component\n   */\n  get diameterTop() {\n    return this._inputs[2];\n  }\n  /**\n   * Gets the diameterBottom input component\n   */\n  get diameterBottom() {\n    return this._inputs[3];\n  }\n  /**\n   * Gets the subdivisions input component\n   */\n  get subdivisions() {\n    return this._inputs[4];\n  }\n  /**\n   * Gets the tessellation input component\n   */\n  get tessellation() {\n    return this._inputs[5];\n  }\n  /**\n   * Gets the arc input component\n   */\n  get arc() {\n    return this._inputs[6];\n  }\n  /**\n   * Gets the geometry output component\n   */\n  get geometry() {\n    return this._outputs[0];\n  }\n  autoConfigure() {\n    if (!this.diameter.isConnected) {\n      const diameterInput = new GeometryInputBlock(\"Diameter\");\n      diameterInput.value = 1;\n      diameterInput.output.connectTo(this.diameter);\n    }\n    if (!this.height.isConnected) {\n      const heightInput = new GeometryInputBlock(\"Height\");\n      heightInput.value = 1;\n      heightInput.output.connectTo(this.height);\n    }\n  }\n  _buildBlock(state) {\n    const options = {};\n    const func = state => {\n      options.height = this.height.getConnectedValue(state);\n      options.diameter = this.diameter.getConnectedValue(state);\n      options.diameterTop = this.diameterTop.getConnectedValue(state);\n      options.diameterBottom = this.diameterBottom.getConnectedValue(state);\n      if (options.diameterTop === -1) {\n        options.diameterTop = options.diameter;\n      }\n      if (options.diameterBottom === -1) {\n        options.diameterBottom = options.diameter;\n      }\n      options.tessellation = this.tessellation.getConnectedValue(state);\n      options.subdivisions = this.subdivisions.getConnectedValue(state);\n      options.arc = this.arc.getConnectedValue(state);\n      // Append vertex data from the plane builder\n      return CreateCylinderVertexData(options);\n    };\n    if (this.evaluateContext) {\n      this.geometry._storedFunction = func;\n    } else {\n      this.geometry._storedFunction = () => {\n        return func(state).clone();\n      };\n    }\n  }\n  _dumpPropertiesCode() {\n    const codeString = super._dumpPropertiesCode() + `${this._codeVariableName}.evaluateContext = ${this.evaluateContext ? \"true\" : \"false\"};\\n`;\n    return codeString;\n  }\n  /**\n   * Serializes this block in a JSON representation\n   * @returns the serialized block object\n   */\n  serialize() {\n    const serializationObject = super.serialize();\n    serializationObject.evaluateContext = this.evaluateContext;\n    return serializationObject;\n  }\n  _deserialize(serializationObject) {\n    super._deserialize(serializationObject);\n    this.evaluateContext = serializationObject.evaluateContext;\n  }\n}\n__decorate([editableInPropertyPage(\"Evaluate context\", PropertyTypeForEdition.Boolean, \"ADVANCED\", {\n  notifiers: {\n    rebuild: true\n  }\n})], CylinderBlock.prototype, \"evaluateContext\", void 0);\nRegisterClass(\"BABYLON.CylinderBlock\", CylinderBlock);","map":{"version":3,"names":["NodeGeometryBlockConnectionPointTypes","NodeGeometryBlock","GeometryInputBlock","RegisterClass","CreateCylinderVertexData","PropertyTypeForEdition","editableInPropertyPage","CylinderBlock","constructor","name","evaluateContext","registerInput","Float","Int","registerOutput","Geometry","getClassName","height","_inputs","diameter","diameterTop","diameterBottom","subdivisions","tessellation","arc","geometry","_outputs","autoConfigure","isConnected","diameterInput","value","output","connectTo","heightInput","_buildBlock","state","options","func","getConnectedValue","_storedFunction","clone","_dumpPropertiesCode","codeString","_codeVariableName","serialize","serializationObject","_deserialize","__decorate","Boolean","notifiers","rebuild"],"sources":["../../../../../../../dev/core/src/Meshes/Node/Blocks/Sources/cylinderBlock.ts"],"sourcesContent":["import { NodeGeometryBlockConnectionPointTypes } from \"../../Enums/nodeGeometryConnectionPointTypes\";\r\nimport { NodeGeometryBlock } from \"../../nodeGeometryBlock\";\r\nimport type { NodeGeometryConnectionPoint } from \"../../nodeGeometryBlockConnectionPoint\";\r\nimport type { NodeGeometryBuildState } from \"../../nodeGeometryBuildState\";\r\nimport { GeometryInputBlock } from \"../geometryInputBlock\";\r\nimport { RegisterClass } from \"../../../../Misc/typeStore\";\r\nimport type { Vector4 } from \"../../../../Maths/math.vector\";\r\nimport { CreateCylinderVertexData } from \"core/Meshes/Builders/cylinderBuilder\";\r\nimport type { Color4 } from \"../../../../Maths/math.color\";\r\nimport { PropertyTypeForEdition, editableInPropertyPage } from \"../../../../Decorators/nodeDecorator\";\r\n\r\n/**\r\n * Defines a block used to generate cylinder geometry data\r\n */\r\nexport class CylinderBlock extends NodeGeometryBlock {\r\n    /**\r\n     * Gets or sets a boolean indicating that this block can evaluate context\r\n     * Build performance is improved when this value is set to false as the system will cache values instead of reevaluating everything per context change\r\n     */\r\n    @editableInPropertyPage(\"Evaluate context\", PropertyTypeForEdition.Boolean, \"ADVANCED\", { notifiers: { rebuild: true } })\r\n    public evaluateContext = false;\r\n\r\n    /**\r\n     * Create a new SphereBlock\r\n     * @param name defines the block name\r\n     */\r\n    public constructor(name: string) {\r\n        super(name);\r\n\r\n        this.registerInput(\"height\", NodeGeometryBlockConnectionPointTypes.Float, true, 25);\r\n        this.registerInput(\"diameter\", NodeGeometryBlockConnectionPointTypes.Float, true, 1);\r\n        this.registerInput(\"diameterTop\", NodeGeometryBlockConnectionPointTypes.Float, true, -1);\r\n        this.registerInput(\"diameterBottom\", NodeGeometryBlockConnectionPointTypes.Float, true, -1);\r\n        this.registerInput(\"subdivisions\", NodeGeometryBlockConnectionPointTypes.Int, true, 1);\r\n        this.registerInput(\"tessellation\", NodeGeometryBlockConnectionPointTypes.Int, true, 24);\r\n        this.registerInput(\"arc\", NodeGeometryBlockConnectionPointTypes.Float, true, 1.0);\r\n\r\n        this.registerOutput(\"geometry\", NodeGeometryBlockConnectionPointTypes.Geometry);\r\n    }\r\n\r\n    /**\r\n     * Gets the current class name\r\n     * @returns the class name\r\n     */\r\n    public getClassName() {\r\n        return \"CylinderBlock\";\r\n    }\r\n\r\n    /**\r\n     * Gets the height input component\r\n     */\r\n    public get height(): NodeGeometryConnectionPoint {\r\n        return this._inputs[0];\r\n    }\r\n\r\n    /**\r\n     * Gets the diameter input component\r\n     */\r\n    public get diameter(): NodeGeometryConnectionPoint {\r\n        return this._inputs[1];\r\n    }\r\n\r\n    /**\r\n     * Gets the diameterTop input component\r\n     */\r\n    public get diameterTop(): NodeGeometryConnectionPoint {\r\n        return this._inputs[2];\r\n    }\r\n\r\n    /**\r\n     * Gets the diameterBottom input component\r\n     */\r\n    public get diameterBottom(): NodeGeometryConnectionPoint {\r\n        return this._inputs[3];\r\n    }\r\n\r\n    /**\r\n     * Gets the subdivisions input component\r\n     */\r\n    public get subdivisions(): NodeGeometryConnectionPoint {\r\n        return this._inputs[4];\r\n    }\r\n\r\n    /**\r\n     * Gets the tessellation input component\r\n     */\r\n    public get tessellation(): NodeGeometryConnectionPoint {\r\n        return this._inputs[5];\r\n    }\r\n\r\n    /**\r\n     * Gets the arc input component\r\n     */\r\n    public get arc(): NodeGeometryConnectionPoint {\r\n        return this._inputs[6];\r\n    }\r\n\r\n    /**\r\n     * Gets the geometry output component\r\n     */\r\n    public get geometry(): NodeGeometryConnectionPoint {\r\n        return this._outputs[0];\r\n    }\r\n\r\n    public autoConfigure() {\r\n        if (!this.diameter.isConnected) {\r\n            const diameterInput = new GeometryInputBlock(\"Diameter\");\r\n            diameterInput.value = 1;\r\n            diameterInput.output.connectTo(this.diameter);\r\n        }\r\n\r\n        if (!this.height.isConnected) {\r\n            const heightInput = new GeometryInputBlock(\"Height\");\r\n            heightInput.value = 1;\r\n            heightInput.output.connectTo(this.height);\r\n        }\r\n    }\r\n\r\n    protected _buildBlock(state: NodeGeometryBuildState) {\r\n        const options: {\r\n            height?: number;\r\n            diameterTop?: number;\r\n            diameterBottom?: number;\r\n            diameter?: number;\r\n            tessellation?: number;\r\n            subdivisions?: number;\r\n            arc?: number;\r\n            faceColors?: Color4[];\r\n            faceUV?: Vector4[];\r\n            hasRings?: boolean;\r\n            enclose?: boolean;\r\n            cap?: number;\r\n            sideOrientation?: number;\r\n            frontUVs?: Vector4;\r\n            backUVs?: Vector4;\r\n        } = {};\r\n\r\n        const func = (state: NodeGeometryBuildState) => {\r\n            options.height = this.height.getConnectedValue(state);\r\n            options.diameter = this.diameter.getConnectedValue(state);\r\n            options.diameterTop = this.diameterTop.getConnectedValue(state);\r\n            options.diameterBottom = this.diameterBottom.getConnectedValue(state);\r\n\r\n            if (options.diameterTop === -1) {\r\n                options.diameterTop = options.diameter;\r\n            }\r\n\r\n            if (options.diameterBottom === -1) {\r\n                options.diameterBottom = options.diameter;\r\n            }\r\n\r\n            options.tessellation = this.tessellation.getConnectedValue(state);\r\n            options.subdivisions = this.subdivisions.getConnectedValue(state);\r\n            options.arc = this.arc.getConnectedValue(state);\r\n\r\n            // Append vertex data from the plane builder\r\n            return CreateCylinderVertexData(options);\r\n        };\r\n\r\n        if (this.evaluateContext) {\r\n            this.geometry._storedFunction = func;\r\n        } else {\r\n            this.geometry._storedFunction = () => {\r\n                return func(state).clone();\r\n            };\r\n        }\r\n    }\r\n\r\n    protected _dumpPropertiesCode() {\r\n        const codeString = super._dumpPropertiesCode() + `${this._codeVariableName}.evaluateContext = ${this.evaluateContext ? \"true\" : \"false\"};\\n`;\r\n        return codeString;\r\n    }\r\n\r\n    /**\r\n     * Serializes this block in a JSON representation\r\n     * @returns the serialized block object\r\n     */\r\n    public serialize(): any {\r\n        const serializationObject = super.serialize();\r\n\r\n        serializationObject.evaluateContext = this.evaluateContext;\r\n\r\n        return serializationObject;\r\n    }\r\n\r\n    public _deserialize(serializationObject: any) {\r\n        super._deserialize(serializationObject);\r\n\r\n        this.evaluateContext = serializationObject.evaluateContext;\r\n    }\r\n}\r\n\r\nRegisterClass(\"BABYLON.CylinderBlock\", CylinderBlock);\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}