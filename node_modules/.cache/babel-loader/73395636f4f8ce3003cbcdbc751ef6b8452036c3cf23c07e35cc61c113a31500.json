{"ast":null,"code":"import { RegisterClass } from \"../../../Misc/typeStore.js\";\nimport { NodeGeometryBlockConnectionPointTypes } from \"../Enums/nodeGeometryConnectionPointTypes.js\";\nimport { NodeGeometryBlock } from \"../nodeGeometryBlock.js\";\n/**\n * Defines a block used to convert from int to float\n */\nexport class IntFloatConverterBlock extends NodeGeometryBlock {\n  /**\n   * Create a new IntFloatConverterBlock\n   * @param name defines the block name\n   */\n  constructor(name) {\n    super(name);\n    this.registerInput(\"float \", NodeGeometryBlockConnectionPointTypes.Float, true);\n    this.registerInput(\"int \", NodeGeometryBlockConnectionPointTypes.Int, true);\n    this.registerOutput(\"float\", NodeGeometryBlockConnectionPointTypes.Float);\n    this.registerOutput(\"int\", NodeGeometryBlockConnectionPointTypes.Int);\n  }\n  /**\n   * Gets the current class name\n   * @returns the class name\n   */\n  getClassName() {\n    return \"IntFloatConverterBlock\";\n  }\n  /**\n   * Gets the float input component\n   */\n  get floatIn() {\n    return this._inputs[0];\n  }\n  /**\n   * Gets the int input component\n   */\n  get intIn() {\n    return this._inputs[1];\n  }\n  /**\n   * Gets the float output component\n   */\n  get floatOut() {\n    return this._outputs[0];\n  }\n  /**\n   * Gets the int output component\n   */\n  get intOut() {\n    return this._outputs[1];\n  }\n  _inputRename(name) {\n    if (name === \"float \") {\n      return \"floatIn\";\n    }\n    if (name === \"int \") {\n      return \"intIn\";\n    }\n    return name;\n  }\n  _buildBlock() {\n    this.floatOut._storedFunction = state => {\n      if (this.floatIn.isConnected) {\n        return this.floatIn.getConnectedValue(state);\n      }\n      if (this.intIn.isConnected) {\n        return this.intIn.getConnectedValue(state);\n      }\n      return 0;\n    };\n    this.intOut._storedFunction = state => {\n      if (this.floatIn.isConnected) {\n        return Math.floor(this.floatIn.getConnectedValue(state));\n      }\n      if (this.intIn.isConnected) {\n        return Math.floor(this.intIn.getConnectedValue(state));\n      }\n      return 0;\n    };\n  }\n}\nRegisterClass(\"BABYLON.IntFloatConverterBlock\", IntFloatConverterBlock);","map":{"version":3,"names":["RegisterClass","NodeGeometryBlockConnectionPointTypes","NodeGeometryBlock","IntFloatConverterBlock","constructor","name","registerInput","Float","Int","registerOutput","getClassName","floatIn","_inputs","intIn","floatOut","_outputs","intOut","_inputRename","_buildBlock","_storedFunction","state","isConnected","getConnectedValue","Math","floor"],"sources":["../../../../../../dev/core/src/Meshes/Node/Blocks/intFloatConverterBlock.ts"],"sourcesContent":["import { RegisterClass } from \"../../../Misc/typeStore\";\r\nimport { NodeGeometryBlockConnectionPointTypes } from \"../Enums/nodeGeometryConnectionPointTypes\";\r\nimport { NodeGeometryBlock } from \"../nodeGeometryBlock\";\r\nimport type { NodeGeometryConnectionPoint } from \"../nodeGeometryBlockConnectionPoint\";\r\n\r\n/**\r\n * Defines a block used to convert from int to float\r\n */\r\nexport class IntFloatConverterBlock extends NodeGeometryBlock {\r\n    /**\r\n     * Create a new IntFloatConverterBlock\r\n     * @param name defines the block name\r\n     */\r\n    public constructor(name: string) {\r\n        super(name);\r\n\r\n        this.registerInput(\"float \", NodeGeometryBlockConnectionPointTypes.Float, true);\r\n        this.registerInput(\"int \", NodeGeometryBlockConnectionPointTypes.Int, true);\r\n\r\n        this.registerOutput(\"float\", NodeGeometryBlockConnectionPointTypes.Float);\r\n        this.registerOutput(\"int\", NodeGeometryBlockConnectionPointTypes.Int);\r\n    }\r\n\r\n    /**\r\n     * Gets the current class name\r\n     * @returns the class name\r\n     */\r\n    public getClassName() {\r\n        return \"IntFloatConverterBlock\";\r\n    }\r\n\r\n    /**\r\n     * Gets the float input component\r\n     */\r\n    public get floatIn(): NodeGeometryConnectionPoint {\r\n        return this._inputs[0];\r\n    }\r\n\r\n    /**\r\n     * Gets the int input component\r\n     */\r\n    public get intIn(): NodeGeometryConnectionPoint {\r\n        return this._inputs[1];\r\n    }\r\n\r\n    /**\r\n     * Gets the float output component\r\n     */\r\n    public get floatOut(): NodeGeometryConnectionPoint {\r\n        return this._outputs[0];\r\n    }\r\n\r\n    /**\r\n     * Gets the int output component\r\n     */\r\n    public get intOut(): NodeGeometryConnectionPoint {\r\n        return this._outputs[1];\r\n    }\r\n\r\n    protected _inputRename(name: string) {\r\n        if (name === \"float \") {\r\n            return \"floatIn\";\r\n        }\r\n        if (name === \"int \") {\r\n            return \"intIn\";\r\n        }\r\n        return name;\r\n    }\r\n\r\n    protected _buildBlock() {\r\n        this.floatOut._storedFunction = (state) => {\r\n            if (this.floatIn.isConnected) {\r\n                return this.floatIn.getConnectedValue(state);\r\n            }\r\n            if (this.intIn.isConnected) {\r\n                return this.intIn.getConnectedValue(state);\r\n            }\r\n\r\n            return 0;\r\n        };\r\n\r\n        this.intOut._storedFunction = (state) => {\r\n            if (this.floatIn.isConnected) {\r\n                return Math.floor(this.floatIn.getConnectedValue(state));\r\n            }\r\n            if (this.intIn.isConnected) {\r\n                return Math.floor(this.intIn.getConnectedValue(state));\r\n            }\r\n\r\n            return 0;\r\n        };\r\n    }\r\n}\r\n\r\nRegisterClass(\"BABYLON.IntFloatConverterBlock\", IntFloatConverterBlock);\r\n"],"mappings":"AAAA,SAASA,aAAa,QAAQ,4BAA0B;AACxD,SAASC,qCAAqC,QAAQ,8CAA4C;AAClG,SAASC,iBAAiB,QAAQ,yBAAuB;AAGzD;;;AAGA,OAAM,MAAOC,sBAAuB,SAAQD,iBAAiB;EACzD;;;;EAIAE,YAAmBC,IAAY;IAC3B,KAAK,CAACA,IAAI,CAAC;IAEX,IAAI,CAACC,aAAa,CAAC,QAAQ,EAAEL,qCAAqC,CAACM,KAAK,EAAE,IAAI,CAAC;IAC/E,IAAI,CAACD,aAAa,CAAC,MAAM,EAAEL,qCAAqC,CAACO,GAAG,EAAE,IAAI,CAAC;IAE3E,IAAI,CAACC,cAAc,CAAC,OAAO,EAAER,qCAAqC,CAACM,KAAK,CAAC;IACzE,IAAI,CAACE,cAAc,CAAC,KAAK,EAAER,qCAAqC,CAACO,GAAG,CAAC;EACzE;EAEA;;;;EAIOE,YAAYA,CAAA;IACf,OAAO,wBAAwB;EACnC;EAEA;;;EAGA,IAAWC,OAAOA,CAAA;IACd,OAAO,IAAI,CAACC,OAAO,CAAC,CAAC,CAAC;EAC1B;EAEA;;;EAGA,IAAWC,KAAKA,CAAA;IACZ,OAAO,IAAI,CAACD,OAAO,CAAC,CAAC,CAAC;EAC1B;EAEA;;;EAGA,IAAWE,QAAQA,CAAA;IACf,OAAO,IAAI,CAACC,QAAQ,CAAC,CAAC,CAAC;EAC3B;EAEA;;;EAGA,IAAWC,MAAMA,CAAA;IACb,OAAO,IAAI,CAACD,QAAQ,CAAC,CAAC,CAAC;EAC3B;EAEUE,YAAYA,CAACZ,IAAY;IAC/B,IAAIA,IAAI,KAAK,QAAQ,EAAE;MACnB,OAAO,SAAS;;IAEpB,IAAIA,IAAI,KAAK,MAAM,EAAE;MACjB,OAAO,OAAO;;IAElB,OAAOA,IAAI;EACf;EAEUa,WAAWA,CAAA;IACjB,IAAI,CAACJ,QAAQ,CAACK,eAAe,GAAIC,KAAK,IAAI;MACtC,IAAI,IAAI,CAACT,OAAO,CAACU,WAAW,EAAE;QAC1B,OAAO,IAAI,CAACV,OAAO,CAACW,iBAAiB,CAACF,KAAK,CAAC;;MAEhD,IAAI,IAAI,CAACP,KAAK,CAACQ,WAAW,EAAE;QACxB,OAAO,IAAI,CAACR,KAAK,CAACS,iBAAiB,CAACF,KAAK,CAAC;;MAG9C,OAAO,CAAC;IACZ,CAAC;IAED,IAAI,CAACJ,MAAM,CAACG,eAAe,GAAIC,KAAK,IAAI;MACpC,IAAI,IAAI,CAACT,OAAO,CAACU,WAAW,EAAE;QAC1B,OAAOE,IAAI,CAACC,KAAK,CAAC,IAAI,CAACb,OAAO,CAACW,iBAAiB,CAACF,KAAK,CAAC,CAAC;;MAE5D,IAAI,IAAI,CAACP,KAAK,CAACQ,WAAW,EAAE;QACxB,OAAOE,IAAI,CAACC,KAAK,CAAC,IAAI,CAACX,KAAK,CAACS,iBAAiB,CAACF,KAAK,CAAC,CAAC;;MAG1D,OAAO,CAAC;IACZ,CAAC;EACL;;AAGJpB,aAAa,CAAC,gCAAgC,EAAEG,sBAAsB,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}