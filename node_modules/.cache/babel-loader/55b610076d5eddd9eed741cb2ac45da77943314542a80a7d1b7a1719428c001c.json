{"ast":null,"code":"import { Observable } from \"../Misc/observable.js\";\nimport { Vector3, Matrix, TmpVectors } from \"../Maths/math.vector.js\";\nimport { Mesh } from \"../Meshes/mesh.js\";\nimport { CreateBox } from \"../Meshes/Builders/boxBuilder.js\";\nimport { CreateCylinder } from \"../Meshes/Builders/cylinderBuilder.js\";\nimport { StandardMaterial } from \"../Materials/standardMaterial.js\";\nimport { PointerDragBehavior } from \"../Behaviors/Meshes/pointerDragBehavior.js\";\nimport { Gizmo } from \"./gizmo.js\";\nimport { UtilityLayerRenderer } from \"../Rendering/utilityLayerRenderer.js\";\nimport { Color3 } from \"../Maths/math.color.js\";\n/**\n * Single axis scale gizmo\n */\nexport class AxisScaleGizmo extends Gizmo {\n  /** Default material used to render when gizmo is not disabled or hovered */\n  get coloredMaterial() {\n    return this._coloredMaterial;\n  }\n  /** Material used to render when gizmo is hovered with mouse*/\n  get hoverMaterial() {\n    return this._hoverMaterial;\n  }\n  /** Material used to render when gizmo is disabled. typically grey.*/\n  get disableMaterial() {\n    return this._disableMaterial;\n  }\n  /**\n   * Creates an AxisScaleGizmo\n   * @param dragAxis The axis which the gizmo will be able to scale on\n   * @param color The color of the gizmo\n   * @param gizmoLayer The utility layer the gizmo will be added to\n   * @param parent\n   * @param thickness display gizmo axis thickness\n   */\n  constructor(dragAxis, color = Color3.Gray(), gizmoLayer = UtilityLayerRenderer.DefaultUtilityLayer, parent = null, thickness = 1) {\n    var _a, _b, _c, _d, _e, _f, _g;\n    super(gizmoLayer);\n    this._pointerObserver = null;\n    /**\n     * Scale distance in babylon units that the gizmo will snap to when dragged (Default: 0)\n     */\n    this.snapDistance = 0;\n    /**\n     * Event that fires each time the gizmo snaps to a new location.\n     * * snapDistance is the the change in distance\n     */\n    this.onSnapObservable = new Observable();\n    /**\n     * If the scaling operation should be done on all axis (default: false)\n     */\n    this.uniformScaling = false;\n    /**\n     * Custom sensitivity value for the drag strength\n     */\n    this.sensitivity = 1;\n    /**\n     * The magnitude of the drag strength (scaling factor)\n     */\n    this.dragScale = 1;\n    this._isEnabled = true;\n    this._parent = null;\n    this._dragging = false;\n    this._tmpVector = new Vector3(0, 0, 0);\n    this._parent = parent;\n    // Create Material\n    this._coloredMaterial = new StandardMaterial(\"\", gizmoLayer.utilityLayerScene);\n    this._coloredMaterial.diffuseColor = color;\n    this._coloredMaterial.specularColor = color.subtract(new Color3(0.1, 0.1, 0.1));\n    this._hoverMaterial = new StandardMaterial(\"\", gizmoLayer.utilityLayerScene);\n    this._hoverMaterial.diffuseColor = Color3.Yellow();\n    this._disableMaterial = new StandardMaterial(\"\", gizmoLayer.utilityLayerScene);\n    this._disableMaterial.diffuseColor = Color3.Gray();\n    this._disableMaterial.alpha = 0.4;\n    // Build mesh + Collider\n    this._gizmoMesh = new Mesh(\"axis\", gizmoLayer.utilityLayerScene);\n    const {\n      arrowMesh,\n      arrowTail\n    } = this._createGizmoMesh(this._gizmoMesh, thickness);\n    const collider = this._createGizmoMesh(this._gizmoMesh, thickness + 4, true);\n    this._gizmoMesh.lookAt(this._rootMesh.position.add(dragAxis));\n    this._rootMesh.addChild(this._gizmoMesh, Gizmo.PreserveScaling);\n    this._gizmoMesh.scaling.scaleInPlace(1 / 3);\n    // Closure of initial prop values for resetting\n    const nodePosition = arrowMesh.position.clone();\n    const linePosition = arrowTail.position.clone();\n    const lineScale = arrowTail.scaling.clone();\n    const increaseGizmoMesh = dragDistance => {\n      const dragStrength = dragDistance * (3 / this._rootMesh.scaling.length()) * 6;\n      arrowMesh.position.z += dragStrength / 3.5;\n      arrowTail.scaling.y += dragStrength;\n      this.dragScale = arrowTail.scaling.y;\n      arrowTail.position.z = arrowMesh.position.z / 2;\n    };\n    const resetGizmoMesh = () => {\n      arrowMesh.position.set(nodePosition.x, nodePosition.y, nodePosition.z);\n      arrowTail.position.set(linePosition.x, linePosition.y, linePosition.z);\n      arrowTail.scaling.set(lineScale.x, lineScale.y, lineScale.z);\n      this.dragScale = arrowTail.scaling.y;\n      this._dragging = false;\n    };\n    // Add drag behavior to handle events when the gizmo is dragged\n    this.dragBehavior = new PointerDragBehavior({\n      dragAxis: dragAxis\n    });\n    this.dragBehavior.moveAttached = false;\n    this.dragBehavior.updateDragPlane = false;\n    this._rootMesh.addBehavior(this.dragBehavior);\n    let currentSnapDragDistance = 0;\n    const tmpSnapEvent = {\n      snapDistance: 0\n    };\n    this.dragBehavior.onDragObservable.add(event => {\n      if (this.attachedNode) {\n        // Drag strength is modified by the scale of the gizmo (eg. for small objects like boombox the strength will be increased to match the behavior of larger objects)\n        const dragStrength = this.sensitivity * event.dragDistance * (this.scaleRatio * 3 / this._rootMesh.scaling.length());\n        const tmpVector = this._tmpVector;\n        // Snapping logic\n        let snapped = false;\n        let dragSteps = 0;\n        if (this.uniformScaling) {\n          tmpVector.setAll(0.57735); // 1 / sqrt(3)\n        } else {\n          tmpVector.copyFrom(dragAxis);\n        }\n        if (this.snapDistance == 0) {\n          tmpVector.scaleToRef(dragStrength, tmpVector);\n        } else {\n          currentSnapDragDistance += dragStrength;\n          if (Math.abs(currentSnapDragDistance) > this.snapDistance) {\n            dragSteps = Math.floor(Math.abs(currentSnapDragDistance) / this.snapDistance);\n            if (currentSnapDragDistance < 0) {\n              dragSteps *= -1;\n            }\n            currentSnapDragDistance = currentSnapDragDistance % this.snapDistance;\n            tmpVector.scaleToRef(this.snapDistance * dragSteps, tmpVector);\n            snapped = true;\n          } else {\n            tmpVector.scaleInPlace(0);\n          }\n        }\n        Matrix.ScalingToRef(1 + tmpVector.x, 1 + tmpVector.y, 1 + tmpVector.z, TmpVectors.Matrix[2]);\n        TmpVectors.Matrix[2].multiplyToRef(this.attachedNode.getWorldMatrix(), TmpVectors.Matrix[1]);\n        const transformNode = this.attachedNode._isMesh ? this.attachedNode : undefined;\n        TmpVectors.Matrix[1].decompose(TmpVectors.Vector3[1], undefined, undefined, Gizmo.PreserveScaling ? transformNode : undefined);\n        const maxScale = 100000;\n        if (Math.abs(TmpVectors.Vector3[1].x) < maxScale && Math.abs(TmpVectors.Vector3[1].y) < maxScale && Math.abs(TmpVectors.Vector3[1].z) < maxScale) {\n          this.attachedNode.getWorldMatrix().copyFrom(TmpVectors.Matrix[1]);\n        }\n        if (snapped) {\n          tmpSnapEvent.snapDistance = this.snapDistance * dragSteps;\n          this.onSnapObservable.notifyObservers(tmpSnapEvent);\n        }\n        this._matrixChanged();\n      }\n    });\n    // On Drag Listener: to move gizmo mesh with user action\n    this.dragBehavior.onDragStartObservable.add(() => {\n      this._dragging = true;\n    });\n    this.dragBehavior.onDragObservable.add(e => increaseGizmoMesh(e.dragDistance));\n    this.dragBehavior.onDragEndObservable.add(resetGizmoMesh);\n    // Listeners for Universal Scalar\n    (_c = (_b = (_a = parent === null || parent === void 0 ? void 0 : parent.uniformScaleGizmo) === null || _a === void 0 ? void 0 : _a.dragBehavior) === null || _b === void 0 ? void 0 : _b.onDragObservable) === null || _c === void 0 ? void 0 : _c.add(e => increaseGizmoMesh(e.delta.y));\n    (_f = (_e = (_d = parent === null || parent === void 0 ? void 0 : parent.uniformScaleGizmo) === null || _d === void 0 ? void 0 : _d.dragBehavior) === null || _e === void 0 ? void 0 : _e.onDragEndObservable) === null || _f === void 0 ? void 0 : _f.add(resetGizmoMesh);\n    const cache = {\n      gizmoMeshes: [arrowMesh, arrowTail],\n      colliderMeshes: [collider.arrowMesh, collider.arrowTail],\n      material: this._coloredMaterial,\n      hoverMaterial: this._hoverMaterial,\n      disableMaterial: this._disableMaterial,\n      active: false,\n      dragBehavior: this.dragBehavior\n    };\n    (_g = this._parent) === null || _g === void 0 ? void 0 : _g.addToAxisCache(this._gizmoMesh, cache);\n    this._pointerObserver = gizmoLayer.utilityLayerScene.onPointerObservable.add(pointerInfo => {\n      var _a;\n      if (this._customMeshSet) {\n        return;\n      }\n      this._isHovered = !!(cache.colliderMeshes.indexOf((_a = pointerInfo === null || pointerInfo === void 0 ? void 0 : pointerInfo.pickInfo) === null || _a === void 0 ? void 0 : _a.pickedMesh) != -1);\n      if (!this._parent) {\n        const material = this.dragBehavior.enabled ? this._isHovered || this._dragging ? this._hoverMaterial : this._coloredMaterial : this._disableMaterial;\n        this._setGizmoMeshMaterial(cache.gizmoMeshes, material);\n      }\n    });\n    this.dragBehavior.onEnabledObservable.add(newState => {\n      this._setGizmoMeshMaterial(cache.gizmoMeshes, newState ? this._coloredMaterial : this._disableMaterial);\n    });\n    const light = gizmoLayer._getSharedGizmoLight();\n    light.includedOnlyMeshes = light.includedOnlyMeshes.concat(this._rootMesh.getChildMeshes());\n  }\n  /**\n   * Create Geometry for Gizmo\n   * @param parentMesh\n   * @param thickness\n   * @param isCollider\n   */\n  _createGizmoMesh(parentMesh, thickness, isCollider = false) {\n    const arrowMesh = CreateBox(\"yPosMesh\", {\n      size: 0.4 * (1 + (thickness - 1) / 4)\n    }, this.gizmoLayer.utilityLayerScene);\n    const arrowTail = CreateCylinder(\"cylinder\", {\n      diameterTop: 0.005 * thickness,\n      height: 0.275,\n      diameterBottom: 0.005 * thickness,\n      tessellation: 96\n    }, this.gizmoLayer.utilityLayerScene);\n    // Position arrow pointing in its drag axis\n    arrowMesh.scaling.scaleInPlace(0.1);\n    arrowMesh.material = this._coloredMaterial;\n    arrowMesh.rotation.x = Math.PI / 2;\n    arrowMesh.position.z += 0.3;\n    arrowTail.material = this._coloredMaterial;\n    arrowTail.position.z += 0.275 / 2;\n    arrowTail.rotation.x = Math.PI / 2;\n    if (isCollider) {\n      arrowMesh.visibility = 0;\n      arrowTail.visibility = 0;\n    }\n    parentMesh.addChild(arrowMesh);\n    parentMesh.addChild(arrowTail);\n    return {\n      arrowMesh,\n      arrowTail\n    };\n  }\n  _attachedNodeChanged(value) {\n    if (this.dragBehavior) {\n      this.dragBehavior.enabled = value ? true : false;\n    }\n  }\n  /**\n   * If the gizmo is enabled\n   */\n  set isEnabled(value) {\n    this._isEnabled = value;\n    if (!value) {\n      this.attachedMesh = null;\n      this.attachedNode = null;\n    } else {\n      if (this._parent) {\n        this.attachedMesh = this._parent.attachedMesh;\n        this.attachedNode = this._parent.attachedNode;\n      }\n    }\n  }\n  get isEnabled() {\n    return this._isEnabled;\n  }\n  /**\n   * Disposes of the gizmo\n   */\n  dispose() {\n    this.onSnapObservable.clear();\n    this.gizmoLayer.utilityLayerScene.onPointerObservable.remove(this._pointerObserver);\n    this.dragBehavior.detach();\n    if (this._gizmoMesh) {\n      this._gizmoMesh.dispose();\n    }\n    [this._coloredMaterial, this._hoverMaterial, this._disableMaterial].forEach(matl => {\n      if (matl) {\n        matl.dispose();\n      }\n    });\n    super.dispose();\n  }\n  /**\n   * Disposes and replaces the current meshes in the gizmo with the specified mesh\n   * @param mesh The mesh to replace the default mesh of the gizmo\n   * @param useGizmoMaterial If the gizmo's default material should be used (default: false)\n   */\n  setCustomMesh(mesh, useGizmoMaterial = false) {\n    super.setCustomMesh(mesh);\n    if (useGizmoMaterial) {\n      this._rootMesh.getChildMeshes().forEach(m => {\n        m.material = this._coloredMaterial;\n        if (m.color) {\n          m.color = this._coloredMaterial.diffuseColor;\n        }\n      });\n      this._customMeshSet = false;\n    }\n  }\n}","map":{"version":3,"names":["Observable","Vector3","Matrix","TmpVectors","Mesh","CreateBox","CreateCylinder","StandardMaterial","PointerDragBehavior","Gizmo","UtilityLayerRenderer","Color3","AxisScaleGizmo","coloredMaterial","_coloredMaterial","hoverMaterial","_hoverMaterial","disableMaterial","_disableMaterial","constructor","dragAxis","color","Gray","gizmoLayer","DefaultUtilityLayer","parent","thickness","_pointerObserver","snapDistance","onSnapObservable","uniformScaling","sensitivity","dragScale","_isEnabled","_parent","_dragging","_tmpVector","utilityLayerScene","diffuseColor","specularColor","subtract","Yellow","alpha","_gizmoMesh","arrowMesh","arrowTail","_createGizmoMesh","collider","lookAt","_rootMesh","position","add","addChild","PreserveScaling","scaling","scaleInPlace","nodePosition","clone","linePosition","lineScale","increaseGizmoMesh","dragDistance","dragStrength","length","z","y","resetGizmoMesh","set","x","dragBehavior","moveAttached","updateDragPlane","addBehavior","currentSnapDragDistance","tmpSnapEvent","onDragObservable","event","attachedNode","scaleRatio","tmpVector","snapped","dragSteps","setAll","copyFrom","scaleToRef","Math","abs","floor","ScalingToRef","multiplyToRef","getWorldMatrix","transformNode","_isMesh","undefined","decompose","maxScale","notifyObservers","_matrixChanged","onDragStartObservable","e","onDragEndObservable","_c","_b","_a","uniformScaleGizmo","delta","_f","_e","_d","cache","gizmoMeshes","colliderMeshes","material","active","_g","addToAxisCache","onPointerObservable","pointerInfo","_customMeshSet","_isHovered","indexOf","pickInfo","pickedMesh","enabled","_setGizmoMeshMaterial","onEnabledObservable","newState","light","_getSharedGizmoLight","includedOnlyMeshes","concat","getChildMeshes","parentMesh","isCollider","size","diameterTop","height","diameterBottom","tessellation","rotation","PI","visibility","_attachedNodeChanged","value","isEnabled","attachedMesh","dispose","clear","remove","detach","forEach","matl","setCustomMesh","mesh","useGizmoMaterial","m"],"sources":["../../../../dev/core/src/Gizmos/axisScaleGizmo.ts"],"sourcesContent":["import type { Observer } from \"../Misc/observable\";\r\nimport { Observable } from \"../Misc/observable\";\r\nimport type { Nullable } from \"../types\";\r\nimport type { PointerInfo } from \"../Events/pointerEvents\";\r\nimport { Vector3, Matrix, TmpVectors } from \"../Maths/math.vector\";\r\nimport type { AbstractMesh } from \"../Meshes/abstractMesh\";\r\nimport type { Node } from \"../node\";\r\nimport { Mesh } from \"../Meshes/mesh\";\r\nimport type { LinesMesh } from \"../Meshes/linesMesh\";\r\nimport { CreateBox } from \"../Meshes/Builders/boxBuilder\";\r\nimport { CreateCylinder } from \"../Meshes/Builders/cylinderBuilder\";\r\nimport { StandardMaterial } from \"../Materials/standardMaterial\";\r\nimport { PointerDragBehavior } from \"../Behaviors/Meshes/pointerDragBehavior\";\r\nimport type { GizmoAxisCache, IGizmo } from \"./gizmo\";\r\nimport { Gizmo } from \"./gizmo\";\r\nimport { UtilityLayerRenderer } from \"../Rendering/utilityLayerRenderer\";\r\nimport type { ScaleGizmo } from \"./scaleGizmo\";\r\nimport { Color3 } from \"../Maths/math.color\";\r\nimport type { TransformNode } from \"../Meshes/transformNode\";\r\n\r\n/**\r\n * Interface for axis scale gizmo\r\n */\r\nexport interface IAxisScaleGizmo extends IGizmo {\r\n    /** Drag behavior responsible for the gizmos dragging interactions */\r\n    dragBehavior: PointerDragBehavior;\r\n    /** Drag distance in babylon units that the gizmo will snap to when dragged */\r\n    snapDistance: number;\r\n    /**\r\n     * Event that fires each time the gizmo snaps to a new location.\r\n     * * snapDistance is the the change in distance\r\n     */\r\n    onSnapObservable: Observable<{ snapDistance: number }>;\r\n    /** If the scaling operation should be done on all axis */\r\n    uniformScaling: boolean;\r\n    /** Custom sensitivity value for the drag strength */\r\n    sensitivity: number;\r\n    /** The magnitude of the drag strength (scaling factor) */\r\n    dragScale: number;\r\n    /** If the gizmo is enabled */\r\n    isEnabled: boolean;\r\n\r\n    /** Default material used to render when gizmo is not disabled or hovered */\r\n    coloredMaterial: StandardMaterial;\r\n    /** Material used to render when gizmo is hovered with mouse*/\r\n    hoverMaterial: StandardMaterial;\r\n    /** Material used to render when gizmo is disabled. typically grey.*/\r\n    disableMaterial: StandardMaterial;\r\n}\r\n\r\n/**\r\n * Single axis scale gizmo\r\n */\r\nexport class AxisScaleGizmo extends Gizmo implements IAxisScaleGizmo {\r\n    /**\r\n     * Drag behavior responsible for the gizmos dragging interactions\r\n     */\r\n    public dragBehavior: PointerDragBehavior;\r\n    protected _pointerObserver: Nullable<Observer<PointerInfo>> = null;\r\n    /**\r\n     * Scale distance in babylon units that the gizmo will snap to when dragged (Default: 0)\r\n     */\r\n    public snapDistance = 0;\r\n    /**\r\n     * Event that fires each time the gizmo snaps to a new location.\r\n     * * snapDistance is the the change in distance\r\n     */\r\n    public onSnapObservable = new Observable<{ snapDistance: number }>();\r\n    /**\r\n     * If the scaling operation should be done on all axis (default: false)\r\n     */\r\n    public uniformScaling = false;\r\n    /**\r\n     * Custom sensitivity value for the drag strength\r\n     */\r\n    public sensitivity = 1;\r\n    /**\r\n     * The magnitude of the drag strength (scaling factor)\r\n     */\r\n    public dragScale = 1;\r\n\r\n    protected _isEnabled: boolean = true;\r\n    protected _parent: Nullable<ScaleGizmo> = null;\r\n\r\n    protected _gizmoMesh: Mesh;\r\n    protected _coloredMaterial: StandardMaterial;\r\n    protected _hoverMaterial: StandardMaterial;\r\n    protected _disableMaterial: StandardMaterial;\r\n    protected _dragging: boolean = false;\r\n    private _tmpVector = new Vector3(0, 0, 0);\r\n\r\n    /** Default material used to render when gizmo is not disabled or hovered */\r\n    public get coloredMaterial() {\r\n        return this._coloredMaterial;\r\n    }\r\n\r\n    /** Material used to render when gizmo is hovered with mouse*/\r\n    public get hoverMaterial() {\r\n        return this._hoverMaterial;\r\n    }\r\n\r\n    /** Material used to render when gizmo is disabled. typically grey.*/\r\n    public get disableMaterial() {\r\n        return this._disableMaterial;\r\n    }\r\n    /**\r\n     * Creates an AxisScaleGizmo\r\n     * @param dragAxis The axis which the gizmo will be able to scale on\r\n     * @param color The color of the gizmo\r\n     * @param gizmoLayer The utility layer the gizmo will be added to\r\n     * @param parent\r\n     * @param thickness display gizmo axis thickness\r\n     */\r\n    constructor(\r\n        dragAxis: Vector3,\r\n        color: Color3 = Color3.Gray(),\r\n        gizmoLayer: UtilityLayerRenderer = UtilityLayerRenderer.DefaultUtilityLayer,\r\n        parent: Nullable<ScaleGizmo> = null,\r\n        thickness: number = 1\r\n    ) {\r\n        super(gizmoLayer);\r\n        this._parent = parent;\r\n        // Create Material\r\n        this._coloredMaterial = new StandardMaterial(\"\", gizmoLayer.utilityLayerScene);\r\n        this._coloredMaterial.diffuseColor = color;\r\n        this._coloredMaterial.specularColor = color.subtract(new Color3(0.1, 0.1, 0.1));\r\n\r\n        this._hoverMaterial = new StandardMaterial(\"\", gizmoLayer.utilityLayerScene);\r\n        this._hoverMaterial.diffuseColor = Color3.Yellow();\r\n\r\n        this._disableMaterial = new StandardMaterial(\"\", gizmoLayer.utilityLayerScene);\r\n        this._disableMaterial.diffuseColor = Color3.Gray();\r\n        this._disableMaterial.alpha = 0.4;\r\n\r\n        // Build mesh + Collider\r\n        this._gizmoMesh = new Mesh(\"axis\", gizmoLayer.utilityLayerScene);\r\n        const { arrowMesh, arrowTail } = this._createGizmoMesh(this._gizmoMesh, thickness);\r\n        const collider = this._createGizmoMesh(this._gizmoMesh, thickness + 4, true);\r\n\r\n        this._gizmoMesh.lookAt(this._rootMesh.position.add(dragAxis));\r\n        this._rootMesh.addChild(this._gizmoMesh, Gizmo.PreserveScaling);\r\n        this._gizmoMesh.scaling.scaleInPlace(1 / 3);\r\n\r\n        // Closure of initial prop values for resetting\r\n        const nodePosition = arrowMesh.position.clone();\r\n        const linePosition = arrowTail.position.clone();\r\n        const lineScale = arrowTail.scaling.clone();\r\n\r\n        const increaseGizmoMesh = (dragDistance: number) => {\r\n            const dragStrength = dragDistance * (3 / this._rootMesh.scaling.length()) * 6;\r\n\r\n            arrowMesh.position.z += dragStrength / 3.5;\r\n            arrowTail.scaling.y += dragStrength;\r\n            this.dragScale = arrowTail.scaling.y;\r\n            arrowTail.position.z = arrowMesh.position.z / 2;\r\n        };\r\n\r\n        const resetGizmoMesh = () => {\r\n            arrowMesh.position.set(nodePosition.x, nodePosition.y, nodePosition.z);\r\n            arrowTail.position.set(linePosition.x, linePosition.y, linePosition.z);\r\n            arrowTail.scaling.set(lineScale.x, lineScale.y, lineScale.z);\r\n            this.dragScale = arrowTail.scaling.y;\r\n            this._dragging = false;\r\n        };\r\n\r\n        // Add drag behavior to handle events when the gizmo is dragged\r\n        this.dragBehavior = new PointerDragBehavior({ dragAxis: dragAxis });\r\n        this.dragBehavior.moveAttached = false;\r\n        this.dragBehavior.updateDragPlane = false;\r\n        this._rootMesh.addBehavior(this.dragBehavior);\r\n\r\n        let currentSnapDragDistance = 0;\r\n\r\n        const tmpSnapEvent = { snapDistance: 0 };\r\n        this.dragBehavior.onDragObservable.add((event) => {\r\n            if (this.attachedNode) {\r\n                // Drag strength is modified by the scale of the gizmo (eg. for small objects like boombox the strength will be increased to match the behavior of larger objects)\r\n                const dragStrength = this.sensitivity * event.dragDistance * ((this.scaleRatio * 3) / this._rootMesh.scaling.length());\r\n                const tmpVector = this._tmpVector;\r\n                // Snapping logic\r\n                let snapped = false;\r\n                let dragSteps = 0;\r\n                if (this.uniformScaling) {\r\n                    tmpVector.setAll(0.57735); // 1 / sqrt(3)\r\n                } else {\r\n                    tmpVector.copyFrom(dragAxis);\r\n                }\r\n                if (this.snapDistance == 0) {\r\n                    tmpVector.scaleToRef(dragStrength, tmpVector);\r\n                } else {\r\n                    currentSnapDragDistance += dragStrength;\r\n                    if (Math.abs(currentSnapDragDistance) > this.snapDistance) {\r\n                        dragSteps = Math.floor(Math.abs(currentSnapDragDistance) / this.snapDistance);\r\n                        if (currentSnapDragDistance < 0) {\r\n                            dragSteps *= -1;\r\n                        }\r\n                        currentSnapDragDistance = currentSnapDragDistance % this.snapDistance;\r\n                        tmpVector.scaleToRef(this.snapDistance * dragSteps, tmpVector);\r\n                        snapped = true;\r\n                    } else {\r\n                        tmpVector.scaleInPlace(0);\r\n                    }\r\n                }\r\n\r\n                Matrix.ScalingToRef(1 + tmpVector.x, 1 + tmpVector.y, 1 + tmpVector.z, TmpVectors.Matrix[2]);\r\n\r\n                TmpVectors.Matrix[2].multiplyToRef(this.attachedNode.getWorldMatrix(), TmpVectors.Matrix[1]);\r\n                const transformNode = (<Mesh>this.attachedNode)._isMesh ? (this.attachedNode as TransformNode) : undefined;\r\n                TmpVectors.Matrix[1].decompose(TmpVectors.Vector3[1], undefined, undefined, Gizmo.PreserveScaling ? transformNode : undefined);\r\n\r\n                const maxScale = 100000;\r\n                if (Math.abs(TmpVectors.Vector3[1].x) < maxScale && Math.abs(TmpVectors.Vector3[1].y) < maxScale && Math.abs(TmpVectors.Vector3[1].z) < maxScale) {\r\n                    this.attachedNode.getWorldMatrix().copyFrom(TmpVectors.Matrix[1]);\r\n                }\r\n\r\n                if (snapped) {\r\n                    tmpSnapEvent.snapDistance = this.snapDistance * dragSteps;\r\n                    this.onSnapObservable.notifyObservers(tmpSnapEvent);\r\n                }\r\n                this._matrixChanged();\r\n            }\r\n        });\r\n        // On Drag Listener: to move gizmo mesh with user action\r\n        this.dragBehavior.onDragStartObservable.add(() => {\r\n            this._dragging = true;\r\n        });\r\n        this.dragBehavior.onDragObservable.add((e) => increaseGizmoMesh(e.dragDistance));\r\n        this.dragBehavior.onDragEndObservable.add(resetGizmoMesh);\r\n\r\n        // Listeners for Universal Scalar\r\n        parent?.uniformScaleGizmo?.dragBehavior?.onDragObservable?.add((e) => increaseGizmoMesh(e.delta.y));\r\n        parent?.uniformScaleGizmo?.dragBehavior?.onDragEndObservable?.add(resetGizmoMesh);\r\n\r\n        const cache: GizmoAxisCache = {\r\n            gizmoMeshes: [arrowMesh, arrowTail],\r\n            colliderMeshes: [collider.arrowMesh, collider.arrowTail],\r\n            material: this._coloredMaterial,\r\n            hoverMaterial: this._hoverMaterial,\r\n            disableMaterial: this._disableMaterial,\r\n            active: false,\r\n            dragBehavior: this.dragBehavior,\r\n        };\r\n        this._parent?.addToAxisCache(this._gizmoMesh, cache);\r\n\r\n        this._pointerObserver = gizmoLayer.utilityLayerScene.onPointerObservable.add((pointerInfo) => {\r\n            if (this._customMeshSet) {\r\n                return;\r\n            }\r\n            this._isHovered = !!(cache.colliderMeshes.indexOf(<Mesh>pointerInfo?.pickInfo?.pickedMesh) != -1);\r\n            if (!this._parent) {\r\n                const material = this.dragBehavior.enabled ? (this._isHovered || this._dragging ? this._hoverMaterial : this._coloredMaterial) : this._disableMaterial;\r\n                this._setGizmoMeshMaterial(cache.gizmoMeshes, material);\r\n            }\r\n        });\r\n\r\n        this.dragBehavior.onEnabledObservable.add((newState) => {\r\n            this._setGizmoMeshMaterial(cache.gizmoMeshes, newState ? this._coloredMaterial : this._disableMaterial);\r\n        });\r\n\r\n        const light = gizmoLayer._getSharedGizmoLight();\r\n        light.includedOnlyMeshes = light.includedOnlyMeshes.concat(this._rootMesh.getChildMeshes());\r\n    }\r\n\r\n    /**\r\n     * Create Geometry for Gizmo\r\n     * @param parentMesh\r\n     * @param thickness\r\n     * @param isCollider\r\n     */\r\n    protected _createGizmoMesh(parentMesh: AbstractMesh, thickness: number, isCollider = false) {\r\n        const arrowMesh = CreateBox(\"yPosMesh\", { size: 0.4 * (1 + (thickness - 1) / 4) }, this.gizmoLayer.utilityLayerScene);\r\n        const arrowTail = CreateCylinder(\r\n            \"cylinder\",\r\n            { diameterTop: 0.005 * thickness, height: 0.275, diameterBottom: 0.005 * thickness, tessellation: 96 },\r\n            this.gizmoLayer.utilityLayerScene\r\n        );\r\n\r\n        // Position arrow pointing in its drag axis\r\n        arrowMesh.scaling.scaleInPlace(0.1);\r\n        arrowMesh.material = this._coloredMaterial;\r\n        arrowMesh.rotation.x = Math.PI / 2;\r\n        arrowMesh.position.z += 0.3;\r\n\r\n        arrowTail.material = this._coloredMaterial;\r\n        arrowTail.position.z += 0.275 / 2;\r\n        arrowTail.rotation.x = Math.PI / 2;\r\n\r\n        if (isCollider) {\r\n            arrowMesh.visibility = 0;\r\n            arrowTail.visibility = 0;\r\n        }\r\n\r\n        parentMesh.addChild(arrowMesh);\r\n        parentMesh.addChild(arrowTail);\r\n\r\n        return { arrowMesh, arrowTail };\r\n    }\r\n\r\n    protected _attachedNodeChanged(value: Nullable<Node>) {\r\n        if (this.dragBehavior) {\r\n            this.dragBehavior.enabled = value ? true : false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * If the gizmo is enabled\r\n     */\r\n    public set isEnabled(value: boolean) {\r\n        this._isEnabled = value;\r\n        if (!value) {\r\n            this.attachedMesh = null;\r\n            this.attachedNode = null;\r\n        } else {\r\n            if (this._parent) {\r\n                this.attachedMesh = this._parent.attachedMesh;\r\n                this.attachedNode = this._parent.attachedNode;\r\n            }\r\n        }\r\n    }\r\n    public get isEnabled(): boolean {\r\n        return this._isEnabled;\r\n    }\r\n\r\n    /**\r\n     * Disposes of the gizmo\r\n     */\r\n    public dispose() {\r\n        this.onSnapObservable.clear();\r\n        this.gizmoLayer.utilityLayerScene.onPointerObservable.remove(this._pointerObserver);\r\n        this.dragBehavior.detach();\r\n        if (this._gizmoMesh) {\r\n            this._gizmoMesh.dispose();\r\n        }\r\n        [this._coloredMaterial, this._hoverMaterial, this._disableMaterial].forEach((matl) => {\r\n            if (matl) {\r\n                matl.dispose();\r\n            }\r\n        });\r\n        super.dispose();\r\n    }\r\n\r\n    /**\r\n     * Disposes and replaces the current meshes in the gizmo with the specified mesh\r\n     * @param mesh The mesh to replace the default mesh of the gizmo\r\n     * @param useGizmoMaterial If the gizmo's default material should be used (default: false)\r\n     */\r\n    public setCustomMesh(mesh: Mesh, useGizmoMaterial: boolean = false) {\r\n        super.setCustomMesh(mesh);\r\n        if (useGizmoMaterial) {\r\n            this._rootMesh.getChildMeshes().forEach((m) => {\r\n                m.material = this._coloredMaterial;\r\n                if ((<LinesMesh>m).color) {\r\n                    (<LinesMesh>m).color = this._coloredMaterial.diffuseColor;\r\n                }\r\n            });\r\n            this._customMeshSet = false;\r\n        }\r\n    }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}