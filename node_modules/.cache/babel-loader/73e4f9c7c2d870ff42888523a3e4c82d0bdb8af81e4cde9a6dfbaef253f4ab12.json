{"ast":null,"code":"import { RegisterClass } from \"../Misc/typeStore.js\";\nimport { FlowGraphConnection, FlowGraphConnectionType } from \"./flowGraphConnection.js\";\nimport { RichType } from \"./flowGraphRichTypes.js\";\n/**\n * @experimental\n * Represents a connection point for data.\n * An unconnected input point can have a default value.\n * An output point will only have a value if it is connected to an input point. Furthermore,\n * if the point belongs to a \"function\" node, the node will run its function to update the value.\n */\nexport class FlowGraphDataConnection extends FlowGraphConnection {\n  /**\n   * Create a new data connection point.\n   * @param name\n   * @param connectionType\n   * @param ownerBlock\n   * @param richType\n   */\n  constructor(name, connectionType, ownerBlock, richType) {\n    super(name, connectionType, ownerBlock);\n    this.richType = richType;\n  }\n  /**\n   * An output data block can connect to multiple input data blocks,\n   * but an input data block can only connect to one output data block.\n   */\n  _isSingularConnection() {\n    return this.connectionType === FlowGraphConnectionType.Input;\n  }\n  /**\n   * Set the value of the connection in a specific context.\n   * @param value the value to set\n   * @param context the context to which the value is set\n   */\n  setValue(value, context) {\n    context._setConnectionValue(this, value);\n  }\n  connectTo(point) {\n    super.connectTo(point);\n  }\n  _getValueOrDefault(context) {\n    if (context._hasConnectionValue(this)) {\n      return context._getConnectionValue(this);\n    } else {\n      return this.richType.defaultValue;\n    }\n  }\n  /**\n   * Gets the value of the connection in a specific context.\n   * @param context the context from which the value is retrieved\n   * @returns the value of the connection\n   */\n  getValue(context) {\n    if (this.connectionType === FlowGraphConnectionType.Output) {\n      this._ownerBlock._updateOutputs(context);\n      return this._getValueOrDefault(context);\n    }\n    if (!this.isConnected()) {\n      return this._getValueOrDefault(context);\n    } else {\n      return this._connectedPoint[0].getValue(context);\n    }\n  }\n  getClassName() {\n    return \"FGDataConnection\";\n  }\n  serialize(serializationObject = {}) {\n    super.serialize(serializationObject);\n    serializationObject.richType = {};\n    this.richType.serialize(serializationObject.richType);\n  }\n  static Parse(serializationObject, ownerBlock) {\n    const obj = FlowGraphConnection.Parse(serializationObject, ownerBlock);\n    obj.richType = RichType.Parse(serializationObject.richType);\n    return obj;\n  }\n}\nRegisterClass(\"FGDataConnection\", FlowGraphDataConnection);","map":{"version":3,"names":["RegisterClass","FlowGraphConnection","FlowGraphConnectionType","RichType","FlowGraphDataConnection","constructor","name","connectionType","ownerBlock","richType","_isSingularConnection","Input","setValue","value","context","_setConnectionValue","connectTo","point","_getValueOrDefault","_hasConnectionValue","_getConnectionValue","defaultValue","getValue","Output","_ownerBlock","_updateOutputs","isConnected","_connectedPoint","getClassName","serialize","serializationObject","Parse","obj"],"sources":["../../../../dev/core/src/FlowGraph/flowGraphDataConnection.ts"],"sourcesContent":["import { RegisterClass } from \"../Misc/typeStore\";\r\nimport type { FlowGraphBlock } from \"./flowGraphBlock\";\r\nimport { FlowGraphConnection, FlowGraphConnectionType } from \"./flowGraphConnection\";\r\nimport type { FlowGraphContext } from \"./flowGraphContext\";\r\nimport { RichType } from \"./flowGraphRichTypes\";\r\n/**\r\n * @experimental\r\n * Represents a connection point for data.\r\n * An unconnected input point can have a default value.\r\n * An output point will only have a value if it is connected to an input point. Furthermore,\r\n * if the point belongs to a \"function\" node, the node will run its function to update the value.\r\n */\r\nexport class FlowGraphDataConnection<T> extends FlowGraphConnection<FlowGraphBlock, FlowGraphDataConnection<T>> {\r\n    /**\r\n     * Create a new data connection point.\r\n     * @param name\r\n     * @param connectionType\r\n     * @param ownerBlock\r\n     * @param richType\r\n     */\r\n    public constructor(name: string, connectionType: FlowGraphConnectionType, ownerBlock: FlowGraphBlock, public richType: RichType<T>) {\r\n        super(name, connectionType, ownerBlock);\r\n    }\r\n\r\n    /**\r\n     * An output data block can connect to multiple input data blocks,\r\n     * but an input data block can only connect to one output data block.\r\n     */\r\n    public _isSingularConnection(): boolean {\r\n        return this.connectionType === FlowGraphConnectionType.Input;\r\n    }\r\n\r\n    /**\r\n     * Set the value of the connection in a specific context.\r\n     * @param value the value to set\r\n     * @param context the context to which the value is set\r\n     */\r\n    public setValue(value: T, context: FlowGraphContext): void {\r\n        context._setConnectionValue(this, value);\r\n    }\r\n\r\n    public connectTo(point: FlowGraphDataConnection<T>): void {\r\n        super.connectTo(point);\r\n    }\r\n\r\n    private _getValueOrDefault(context: FlowGraphContext): T {\r\n        if (context._hasConnectionValue(this)) {\r\n            return context._getConnectionValue(this);\r\n        } else {\r\n            return this.richType.defaultValue;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets the value of the connection in a specific context.\r\n     * @param context the context from which the value is retrieved\r\n     * @returns the value of the connection\r\n     */\r\n    public getValue(context: FlowGraphContext): T {\r\n        if (this.connectionType === FlowGraphConnectionType.Output) {\r\n            this._ownerBlock._updateOutputs(context);\r\n            return this._getValueOrDefault(context);\r\n        }\r\n\r\n        if (!this.isConnected()) {\r\n            return this._getValueOrDefault(context);\r\n        } else {\r\n            return this._connectedPoint[0].getValue(context);\r\n        }\r\n    }\r\n\r\n    public getClassName(): string {\r\n        return \"FGDataConnection\";\r\n    }\r\n\r\n    public serialize(serializationObject: any = {}) {\r\n        super.serialize(serializationObject);\r\n        serializationObject.richType = {};\r\n        this.richType.serialize(serializationObject.richType);\r\n    }\r\n\r\n    public static Parse(serializationObject: any, ownerBlock: FlowGraphBlock): FlowGraphDataConnection<any> {\r\n        const obj = FlowGraphConnection.Parse(serializationObject, ownerBlock);\r\n        obj.richType = RichType.Parse(serializationObject.richType);\r\n        return obj;\r\n    }\r\n}\r\n\r\nRegisterClass(\"FGDataConnection\", FlowGraphDataConnection);\r\n"],"mappings":"AAAA,SAASA,aAAa,QAAQ,sBAAoB;AAElD,SAASC,mBAAmB,EAAEC,uBAAuB,QAAQ,0BAAwB;AAErF,SAASC,QAAQ,QAAQ,yBAAuB;AAChD;;;;;;;AAOA,OAAM,MAAOC,uBAA2B,SAAQH,mBAA+D;EAC3G;;;;;;;EAOAI,YAAmBC,IAAY,EAAEC,cAAuC,EAAEC,UAA0B,EAASC,QAAqB;IAC9H,KAAK,CAACH,IAAI,EAAEC,cAAc,EAAEC,UAAU,CAAC;IADkE,KAAAC,QAAQ,GAARA,QAAQ;EAErH;EAEA;;;;EAIOC,qBAAqBA,CAAA;IACxB,OAAO,IAAI,CAACH,cAAc,KAAKL,uBAAuB,CAACS,KAAK;EAChE;EAEA;;;;;EAKOC,QAAQA,CAACC,KAAQ,EAAEC,OAAyB;IAC/CA,OAAO,CAACC,mBAAmB,CAAC,IAAI,EAAEF,KAAK,CAAC;EAC5C;EAEOG,SAASA,CAACC,KAAiC;IAC9C,KAAK,CAACD,SAAS,CAACC,KAAK,CAAC;EAC1B;EAEQC,kBAAkBA,CAACJ,OAAyB;IAChD,IAAIA,OAAO,CAACK,mBAAmB,CAAC,IAAI,CAAC,EAAE;MACnC,OAAOL,OAAO,CAACM,mBAAmB,CAAC,IAAI,CAAC;KAC3C,MAAM;MACH,OAAO,IAAI,CAACX,QAAQ,CAACY,YAAY;;EAEzC;EAEA;;;;;EAKOC,QAAQA,CAACR,OAAyB;IACrC,IAAI,IAAI,CAACP,cAAc,KAAKL,uBAAuB,CAACqB,MAAM,EAAE;MACxD,IAAI,CAACC,WAAW,CAACC,cAAc,CAACX,OAAO,CAAC;MACxC,OAAO,IAAI,CAACI,kBAAkB,CAACJ,OAAO,CAAC;;IAG3C,IAAI,CAAC,IAAI,CAACY,WAAW,EAAE,EAAE;MACrB,OAAO,IAAI,CAACR,kBAAkB,CAACJ,OAAO,CAAC;KAC1C,MAAM;MACH,OAAO,IAAI,CAACa,eAAe,CAAC,CAAC,CAAC,CAACL,QAAQ,CAACR,OAAO,CAAC;;EAExD;EAEOc,YAAYA,CAAA;IACf,OAAO,kBAAkB;EAC7B;EAEOC,SAASA,CAACC,mBAAA,GAA2B,EAAE;IAC1C,KAAK,CAACD,SAAS,CAACC,mBAAmB,CAAC;IACpCA,mBAAmB,CAACrB,QAAQ,GAAG,EAAE;IACjC,IAAI,CAACA,QAAQ,CAACoB,SAAS,CAACC,mBAAmB,CAACrB,QAAQ,CAAC;EACzD;EAEO,OAAOsB,KAAKA,CAACD,mBAAwB,EAAEtB,UAA0B;IACpE,MAAMwB,GAAG,GAAG/B,mBAAmB,CAAC8B,KAAK,CAACD,mBAAmB,EAAEtB,UAAU,CAAC;IACtEwB,GAAG,CAACvB,QAAQ,GAAGN,QAAQ,CAAC4B,KAAK,CAACD,mBAAmB,CAACrB,QAAQ,CAAC;IAC3D,OAAOuB,GAAG;EACd;;AAGJhC,aAAa,CAAC,kBAAkB,EAAEI,uBAAuB,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}