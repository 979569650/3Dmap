{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.typed-array.to-reversed.js\";\nimport \"core-js/modules/es.typed-array.to-sorted.js\";\nimport \"core-js/modules/es.typed-array.with.js\";\nimport { Logger } from \"./logger.js\";\nconst CloneValue = (source, destinationObject) => {\n  if (!source) {\n    return null;\n  }\n  if (source.getClassName && source.getClassName() === \"Mesh\") {\n    return null;\n  }\n  if (source.getClassName && (source.getClassName() === \"SubMesh\" || source.getClassName() === \"PhysicsBody\")) {\n    return source.clone(destinationObject);\n  } else if (source.clone) {\n    return source.clone();\n  } else if (Array.isArray(source)) {\n    return source.slice();\n  } else if (typeof source === \"object\") {\n    return Object.assign({}, source);\n  }\n  return null;\n};\nfunction GetAllPropertyNames(obj) {\n  const props = [];\n  do {\n    Object.getOwnPropertyNames(obj).forEach(function (prop) {\n      if (props.indexOf(prop) === -1) {\n        props.push(prop);\n      }\n    });\n  } while (obj = Object.getPrototypeOf(obj));\n  return props;\n}\n/**\n * Class containing a set of static utilities functions for deep copy.\n */\nexport class DeepCopier {\n  /**\n   * Tries to copy an object by duplicating every property\n   * @param source defines the source object\n   * @param destination defines the target object\n   * @param doNotCopyList defines a list of properties to avoid\n   * @param mustCopyList defines a list of properties to copy (even if they start with _)\n   */\n  static DeepCopy(source, destination, doNotCopyList, mustCopyList) {\n    const properties = GetAllPropertyNames(source);\n    for (const prop of properties) {\n      if (prop[0] === \"_\" && (!mustCopyList || mustCopyList.indexOf(prop) === -1)) {\n        continue;\n      }\n      if (prop.endsWith(\"Observable\")) {\n        continue;\n      }\n      if (doNotCopyList && doNotCopyList.indexOf(prop) !== -1) {\n        continue;\n      }\n      const sourceValue = source[prop];\n      const typeOfSourceValue = typeof sourceValue;\n      if (typeOfSourceValue === \"function\") {\n        continue;\n      }\n      try {\n        if (typeOfSourceValue === \"object\") {\n          if (sourceValue instanceof Uint8Array) {\n            destination[prop] = Uint8Array.from(sourceValue);\n          } else if (sourceValue instanceof Array) {\n            destination[prop] = [];\n            if (sourceValue.length > 0) {\n              if (typeof sourceValue[0] == \"object\") {\n                for (let index = 0; index < sourceValue.length; index++) {\n                  const clonedValue = CloneValue(sourceValue[index], destination);\n                  if (destination[prop].indexOf(clonedValue) === -1) {\n                    // Test if auto inject was not done\n                    destination[prop].push(clonedValue);\n                  }\n                }\n              } else {\n                destination[prop] = sourceValue.slice(0);\n              }\n            }\n          } else {\n            destination[prop] = CloneValue(sourceValue, destination);\n          }\n        } else {\n          destination[prop] = sourceValue;\n        }\n      } catch (e) {\n        // Log a warning (it could be because of a read-only property)\n        Logger.Warn(e.message);\n      }\n    }\n  }\n}","map":{"version":3,"names":["Logger","CloneValue","source","destinationObject","getClassName","clone","Array","isArray","slice","Object","assign","GetAllPropertyNames","obj","props","getOwnPropertyNames","forEach","prop","indexOf","push","getPrototypeOf","DeepCopier","DeepCopy","destination","doNotCopyList","mustCopyList","properties","endsWith","sourceValue","typeOfSourceValue","Uint8Array","from","length","index","clonedValue","e","Warn","message"],"sources":["../../../../dev/core/src/Misc/deepCopier.ts"],"sourcesContent":["import { Logger } from \"./logger\";\r\n\r\nconst CloneValue = (source: any, destinationObject: any) => {\r\n    if (!source) {\r\n        return null;\r\n    }\r\n\r\n    if (source.getClassName && source.getClassName() === \"Mesh\") {\r\n        return null;\r\n    }\r\n\r\n    if (source.getClassName && (source.getClassName() === \"SubMesh\" || source.getClassName() === \"PhysicsBody\")) {\r\n        return source.clone(destinationObject);\r\n    } else if (source.clone) {\r\n        return source.clone();\r\n    } else if (Array.isArray(source)) {\r\n        return source.slice();\r\n    } else if (typeof source === \"object\") {\r\n        return { ...source };\r\n    }\r\n    return null;\r\n};\r\n\r\nfunction GetAllPropertyNames(obj: any): string[] {\r\n    const props: string[] = [];\r\n\r\n    do {\r\n        Object.getOwnPropertyNames(obj).forEach(function (prop) {\r\n            if (props.indexOf(prop) === -1) {\r\n                props.push(prop);\r\n            }\r\n        });\r\n    } while ((obj = Object.getPrototypeOf(obj)));\r\n\r\n    return props;\r\n}\r\n\r\n/**\r\n * Class containing a set of static utilities functions for deep copy.\r\n */\r\nexport class DeepCopier {\r\n    /**\r\n     * Tries to copy an object by duplicating every property\r\n     * @param source defines the source object\r\n     * @param destination defines the target object\r\n     * @param doNotCopyList defines a list of properties to avoid\r\n     * @param mustCopyList defines a list of properties to copy (even if they start with _)\r\n     */\r\n    public static DeepCopy(source: any, destination: any, doNotCopyList?: string[], mustCopyList?: string[]): void {\r\n        const properties = GetAllPropertyNames(source);\r\n        for (const prop of properties) {\r\n            if (prop[0] === \"_\" && (!mustCopyList || mustCopyList.indexOf(prop) === -1)) {\r\n                continue;\r\n            }\r\n\r\n            if (prop.endsWith(\"Observable\")) {\r\n                continue;\r\n            }\r\n\r\n            if (doNotCopyList && doNotCopyList.indexOf(prop) !== -1) {\r\n                continue;\r\n            }\r\n\r\n            const sourceValue = source[prop];\r\n            const typeOfSourceValue = typeof sourceValue;\r\n\r\n            if (typeOfSourceValue === \"function\") {\r\n                continue;\r\n            }\r\n\r\n            try {\r\n                if (typeOfSourceValue === \"object\") {\r\n                    if (sourceValue instanceof Uint8Array) {\r\n                        destination[prop] = Uint8Array.from(sourceValue);\r\n                    } else if (sourceValue instanceof Array) {\r\n                        destination[prop] = [];\r\n\r\n                        if (sourceValue.length > 0) {\r\n                            if (typeof sourceValue[0] == \"object\") {\r\n                                for (let index = 0; index < sourceValue.length; index++) {\r\n                                    const clonedValue = CloneValue(sourceValue[index], destination);\r\n\r\n                                    if (destination[prop].indexOf(clonedValue) === -1) {\r\n                                        // Test if auto inject was not done\r\n                                        destination[prop].push(clonedValue);\r\n                                    }\r\n                                }\r\n                            } else {\r\n                                destination[prop] = sourceValue.slice(0);\r\n                            }\r\n                        }\r\n                    } else {\r\n                        destination[prop] = CloneValue(sourceValue, destination);\r\n                    }\r\n                } else {\r\n                    destination[prop] = sourceValue;\r\n                }\r\n            } catch (e) {\r\n                // Log a warning (it could be because of a read-only property)\r\n                Logger.Warn(e.message);\r\n            }\r\n        }\r\n    }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}