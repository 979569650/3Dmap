{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { __decorate } from \"../../../tslib.es6.js\";\nimport { RegisterClass } from \"../../../Misc/typeStore.js\";\nimport { NodeGeometryBlockConnectionPointTypes } from \"../Enums/nodeGeometryConnectionPointTypes.js\";\nimport { NodeGeometryBlock } from \"../nodeGeometryBlock.js\";\nimport { Vector2, Vector3, Vector4 } from \"../../../Maths/math.vector.js\";\nimport { PropertyTypeForEdition, editableInPropertyPage } from \"../../../Decorators/nodeDecorator.js\";\n/**\n * Operations supported by the Trigonometry block\n */\nexport var GeometryTrigonometryBlockOperations;\n(function (GeometryTrigonometryBlockOperations) {\n  /** Cos */\n  GeometryTrigonometryBlockOperations[GeometryTrigonometryBlockOperations[\"Cos\"] = 0] = \"Cos\";\n  /** Sin */\n  GeometryTrigonometryBlockOperations[GeometryTrigonometryBlockOperations[\"Sin\"] = 1] = \"Sin\";\n  /** Abs */\n  GeometryTrigonometryBlockOperations[GeometryTrigonometryBlockOperations[\"Abs\"] = 2] = \"Abs\";\n  /** Exp */\n  GeometryTrigonometryBlockOperations[GeometryTrigonometryBlockOperations[\"Exp\"] = 3] = \"Exp\";\n  /** Round */\n  GeometryTrigonometryBlockOperations[GeometryTrigonometryBlockOperations[\"Round\"] = 4] = \"Round\";\n  /** Floor */\n  GeometryTrigonometryBlockOperations[GeometryTrigonometryBlockOperations[\"Floor\"] = 5] = \"Floor\";\n  /** Ceiling */\n  GeometryTrigonometryBlockOperations[GeometryTrigonometryBlockOperations[\"Ceiling\"] = 6] = \"Ceiling\";\n  /** Square root */\n  GeometryTrigonometryBlockOperations[GeometryTrigonometryBlockOperations[\"Sqrt\"] = 7] = \"Sqrt\";\n  /** Log */\n  GeometryTrigonometryBlockOperations[GeometryTrigonometryBlockOperations[\"Log\"] = 8] = \"Log\";\n  /** Tangent */\n  GeometryTrigonometryBlockOperations[GeometryTrigonometryBlockOperations[\"Tan\"] = 9] = \"Tan\";\n  /** Arc tangent */\n  GeometryTrigonometryBlockOperations[GeometryTrigonometryBlockOperations[\"ArcTan\"] = 10] = \"ArcTan\";\n  /** Arc cosinus */\n  GeometryTrigonometryBlockOperations[GeometryTrigonometryBlockOperations[\"ArcCos\"] = 11] = \"ArcCos\";\n  /** Arc sinus */\n  GeometryTrigonometryBlockOperations[GeometryTrigonometryBlockOperations[\"ArcSin\"] = 12] = \"ArcSin\";\n  /** Sign */\n  GeometryTrigonometryBlockOperations[GeometryTrigonometryBlockOperations[\"Sign\"] = 13] = \"Sign\";\n  /** Negate */\n  GeometryTrigonometryBlockOperations[GeometryTrigonometryBlockOperations[\"Negate\"] = 14] = \"Negate\";\n  /** OneMinus */\n  GeometryTrigonometryBlockOperations[GeometryTrigonometryBlockOperations[\"OneMinus\"] = 15] = \"OneMinus\";\n  /** Reciprocal */\n  GeometryTrigonometryBlockOperations[GeometryTrigonometryBlockOperations[\"Reciprocal\"] = 16] = \"Reciprocal\";\n  /** ToDegrees */\n  GeometryTrigonometryBlockOperations[GeometryTrigonometryBlockOperations[\"ToDegrees\"] = 17] = \"ToDegrees\";\n  /** ToRadians */\n  GeometryTrigonometryBlockOperations[GeometryTrigonometryBlockOperations[\"ToRadians\"] = 18] = \"ToRadians\";\n})(GeometryTrigonometryBlockOperations || (GeometryTrigonometryBlockOperations = {}));\n/**\n * Block used to apply trigonometry operation to floats\n */\nexport class GeometryTrigonometryBlock extends NodeGeometryBlock {\n  /**\n   * Creates a new GeometryTrigonometryBlock\n   * @param name defines the block name\n   */\n  constructor(name) {\n    super(name);\n    /**\n     * Gets or sets the operation applied by the block\n     */\n    this.operation = GeometryTrigonometryBlockOperations.Cos;\n    this.registerInput(\"input\", NodeGeometryBlockConnectionPointTypes.AutoDetect);\n    this.registerOutput(\"output\", NodeGeometryBlockConnectionPointTypes.BasedOnInput);\n    this._outputs[0]._typeConnectionSource = this._inputs[0];\n    this._inputs[0].excludedConnectionPointTypes.push(NodeGeometryBlockConnectionPointTypes.Matrix);\n    this._inputs[0].excludedConnectionPointTypes.push(NodeGeometryBlockConnectionPointTypes.Geometry);\n    this._inputs[0].excludedConnectionPointTypes.push(NodeGeometryBlockConnectionPointTypes.Texture);\n  }\n  /**\n   * Gets the current class name\n   * @returns the class name\n   */\n  getClassName() {\n    return \"GeometryTrigonometryBlock\";\n  }\n  /**\n   * Gets the input component\n   */\n  get input() {\n    return this._inputs[0];\n  }\n  /**\n   * Gets the output component\n   */\n  get output() {\n    return this._outputs[0];\n  }\n  _buildBlock(state) {\n    super._buildBlock(state);\n    let func = null;\n    switch (this.operation) {\n      case GeometryTrigonometryBlockOperations.Cos:\n        {\n          func = value => Math.cos(value);\n          break;\n        }\n      case GeometryTrigonometryBlockOperations.Sin:\n        {\n          func = value => Math.sin(value);\n          break;\n        }\n      case GeometryTrigonometryBlockOperations.Abs:\n        {\n          func = value => Math.abs(value);\n          break;\n        }\n      case GeometryTrigonometryBlockOperations.Exp:\n        {\n          func = value => Math.exp(value);\n          break;\n        }\n      case GeometryTrigonometryBlockOperations.Round:\n        {\n          func = value => Math.round(value);\n          break;\n        }\n      case GeometryTrigonometryBlockOperations.Floor:\n        {\n          func = value => Math.floor(value);\n          break;\n        }\n      case GeometryTrigonometryBlockOperations.Ceiling:\n        {\n          func = value => Math.ceil(value);\n          break;\n        }\n      case GeometryTrigonometryBlockOperations.Sqrt:\n        {\n          func = value => Math.sqrt(value);\n          break;\n        }\n      case GeometryTrigonometryBlockOperations.Log:\n        {\n          func = value => Math.log(value);\n          break;\n        }\n      case GeometryTrigonometryBlockOperations.Tan:\n        {\n          func = value => Math.tan(value);\n          break;\n        }\n      case GeometryTrigonometryBlockOperations.ArcTan:\n        {\n          func = value => Math.atan(value);\n          break;\n        }\n      case GeometryTrigonometryBlockOperations.ArcCos:\n        {\n          func = value => Math.acos(value);\n          break;\n        }\n      case GeometryTrigonometryBlockOperations.ArcSin:\n        {\n          func = value => Math.asin(value);\n          break;\n        }\n      case GeometryTrigonometryBlockOperations.Sign:\n        {\n          func = value => Math.sign(value);\n          break;\n        }\n      case GeometryTrigonometryBlockOperations.Negate:\n        {\n          func = value => -value;\n          break;\n        }\n      case GeometryTrigonometryBlockOperations.OneMinus:\n        {\n          func = value => 1 - value;\n          break;\n        }\n      case GeometryTrigonometryBlockOperations.Reciprocal:\n        {\n          func = value => 1 / value;\n          break;\n        }\n      case GeometryTrigonometryBlockOperations.ToRadians:\n        {\n          func = value => value * Math.PI / 180;\n          break;\n        }\n      case GeometryTrigonometryBlockOperations.ToDegrees:\n        {\n          func = value => value * 180 / Math.PI;\n          break;\n        }\n    }\n    if (!func) {\n      this.input._storedFunction = null;\n      this.input._storedValue = null;\n      return;\n    }\n    switch (this.input.type) {\n      case NodeGeometryBlockConnectionPointTypes.Int:\n      case NodeGeometryBlockConnectionPointTypes.Float:\n        {\n          this.output._storedFunction = state => {\n            const source = this.input.getConnectedValue(state);\n            return func(source);\n          };\n          break;\n        }\n      case NodeGeometryBlockConnectionPointTypes.Vector2:\n        {\n          this.output._storedFunction = state => {\n            const source = this.input.getConnectedValue(state);\n            return new Vector2(func(source.x), func(source.y));\n          };\n          break;\n        }\n      case NodeGeometryBlockConnectionPointTypes.Vector3:\n        {\n          this.output._storedFunction = state => {\n            const source = this.input.getConnectedValue(state);\n            return new Vector3(func(source.x), func(source.y), func(source.z));\n          };\n          break;\n        }\n      case NodeGeometryBlockConnectionPointTypes.Vector4:\n        {\n          this.output._storedFunction = state => {\n            const source = this.input.getConnectedValue(state);\n            return new Vector4(func(source.x), func(source.y), func(source.z), func(source.w));\n          };\n          break;\n        }\n    }\n    return this;\n  }\n  serialize() {\n    const serializationObject = super.serialize();\n    serializationObject.operation = this.operation;\n    return serializationObject;\n  }\n  _deserialize(serializationObject) {\n    super._deserialize(serializationObject);\n    this.operation = serializationObject.operation;\n  }\n  _dumpPropertiesCode() {\n    const codeString = super._dumpPropertiesCode() + `${this._codeVariableName}.operation = BABYLON.GeometryTrigonometryBlockOperations.${GeometryTrigonometryBlockOperations[this.operation]};\\n`;\n    return codeString;\n  }\n}\n__decorate([editableInPropertyPage(\"Operation\", PropertyTypeForEdition.List, \"ADVANCED\", {\n  notifiers: {\n    rebuild: true\n  },\n  options: [{\n    label: \"Cos\",\n    value: GeometryTrigonometryBlockOperations.Cos\n  }, {\n    label: \"Sin\",\n    value: GeometryTrigonometryBlockOperations.Sin\n  }, {\n    label: \"Abs\",\n    value: GeometryTrigonometryBlockOperations.Abs\n  }, {\n    label: \"Exp\",\n    value: GeometryTrigonometryBlockOperations.Exp\n  }, {\n    label: \"Round\",\n    value: GeometryTrigonometryBlockOperations.Round\n  }, {\n    label: \"Floor\",\n    value: GeometryTrigonometryBlockOperations.Floor\n  }, {\n    label: \"Ceiling\",\n    value: GeometryTrigonometryBlockOperations.Ceiling\n  }, {\n    label: \"Sqrt\",\n    value: GeometryTrigonometryBlockOperations.Sqrt\n  }, {\n    label: \"Log\",\n    value: GeometryTrigonometryBlockOperations.Log\n  }, {\n    label: \"Tan\",\n    value: GeometryTrigonometryBlockOperations.Tan\n  }, {\n    label: \"ArcTan\",\n    value: GeometryTrigonometryBlockOperations.ArcTan\n  }, {\n    label: \"ArcCos\",\n    value: GeometryTrigonometryBlockOperations.ArcCos\n  }, {\n    label: \"ArcSin\",\n    value: GeometryTrigonometryBlockOperations.ArcSin\n  }, {\n    label: \"Sign\",\n    value: GeometryTrigonometryBlockOperations.Sign\n  }, {\n    label: \"Negate\",\n    value: GeometryTrigonometryBlockOperations.Negate\n  }, {\n    label: \"OneMinus\",\n    value: GeometryTrigonometryBlockOperations.OneMinus\n  }, {\n    label: \"Reciprocal\",\n    value: GeometryTrigonometryBlockOperations.Reciprocal\n  }, {\n    label: \"ToDegrees\",\n    value: GeometryTrigonometryBlockOperations.ToDegrees\n  }, {\n    label: \"ToRadians\",\n    value: GeometryTrigonometryBlockOperations.ToRadians\n  }]\n})], GeometryTrigonometryBlock.prototype, \"operation\", void 0);\nRegisterClass(\"BABYLON.GeometryTrigonometryBlock\", GeometryTrigonometryBlock);","map":{"version":3,"names":["RegisterClass","NodeGeometryBlockConnectionPointTypes","NodeGeometryBlock","Vector2","Vector3","Vector4","PropertyTypeForEdition","editableInPropertyPage","GeometryTrigonometryBlockOperations","GeometryTrigonometryBlock","constructor","name","operation","Cos","registerInput","AutoDetect","registerOutput","BasedOnInput","_outputs","_typeConnectionSource","_inputs","excludedConnectionPointTypes","push","Matrix","Geometry","Texture","getClassName","input","output","_buildBlock","state","func","value","Math","cos","Sin","sin","Abs","abs","Exp","exp","Round","round","Floor","floor","Ceiling","ceil","Sqrt","sqrt","Log","log","Tan","tan","ArcTan","atan","ArcCos","acos","ArcSin","asin","Sign","sign","Negate","OneMinus","Reciprocal","ToRadians","PI","ToDegrees","_storedFunction","_storedValue","type","Int","Float","source","getConnectedValue","x","y","z","w","serialize","serializationObject","_deserialize","_dumpPropertiesCode","codeString","_codeVariableName","__decorate","List","notifiers","rebuild","options","label"],"sources":["../../../../../../dev/core/src/Meshes/Node/Blocks/geometryTrigonometryBlock.ts"],"sourcesContent":["import type { Nullable } from \"../../../types\";\r\nimport { RegisterClass } from \"../../../Misc/typeStore\";\r\nimport { NodeGeometryBlockConnectionPointTypes } from \"../Enums/nodeGeometryConnectionPointTypes\";\r\nimport { NodeGeometryBlock } from \"../nodeGeometryBlock\";\r\nimport type { NodeGeometryConnectionPoint } from \"../nodeGeometryBlockConnectionPoint\";\r\nimport type { NodeGeometryBuildState } from \"../nodeGeometryBuildState\";\r\nimport { Vector2, Vector3, Vector4 } from \"../../../Maths/math.vector\";\r\nimport { PropertyTypeForEdition, editableInPropertyPage } from \"../../../Decorators/nodeDecorator\";\r\n\r\n/**\r\n * Operations supported by the Trigonometry block\r\n */\r\nexport enum GeometryTrigonometryBlockOperations {\r\n    /** Cos */\r\n    Cos,\r\n    /** Sin */\r\n    Sin,\r\n    /** Abs */\r\n    Abs,\r\n    /** Exp */\r\n    Exp,\r\n    /** Round */\r\n    Round,\r\n    /** Floor */\r\n    Floor,\r\n    /** Ceiling */\r\n    Ceiling,\r\n    /** Square root */\r\n    Sqrt,\r\n    /** Log */\r\n    Log,\r\n    /** Tangent */\r\n    Tan,\r\n    /** Arc tangent */\r\n    ArcTan,\r\n    /** Arc cosinus */\r\n    ArcCos,\r\n    /** Arc sinus */\r\n    ArcSin,\r\n    /** Sign */\r\n    Sign,\r\n    /** Negate */\r\n    Negate,\r\n    /** OneMinus */\r\n    OneMinus,\r\n    /** Reciprocal */\r\n    Reciprocal,\r\n    /** ToDegrees */\r\n    ToDegrees,\r\n    /** ToRadians */\r\n    ToRadians,\r\n}\r\n\r\n/**\r\n * Block used to apply trigonometry operation to floats\r\n */\r\nexport class GeometryTrigonometryBlock extends NodeGeometryBlock {\r\n    /**\r\n     * Gets or sets the operation applied by the block\r\n     */\r\n    @editableInPropertyPage(\"Operation\", PropertyTypeForEdition.List, \"ADVANCED\", {\r\n        notifiers: { rebuild: true },\r\n        options: [\r\n            { label: \"Cos\", value: GeometryTrigonometryBlockOperations.Cos },\r\n            { label: \"Sin\", value: GeometryTrigonometryBlockOperations.Sin },\r\n            { label: \"Abs\", value: GeometryTrigonometryBlockOperations.Abs },\r\n            { label: \"Exp\", value: GeometryTrigonometryBlockOperations.Exp },\r\n            { label: \"Round\", value: GeometryTrigonometryBlockOperations.Round },\r\n            { label: \"Floor\", value: GeometryTrigonometryBlockOperations.Floor },\r\n            { label: \"Ceiling\", value: GeometryTrigonometryBlockOperations.Ceiling },\r\n            { label: \"Sqrt\", value: GeometryTrigonometryBlockOperations.Sqrt },\r\n            { label: \"Log\", value: GeometryTrigonometryBlockOperations.Log },\r\n            { label: \"Tan\", value: GeometryTrigonometryBlockOperations.Tan },\r\n            { label: \"ArcTan\", value: GeometryTrigonometryBlockOperations.ArcTan },\r\n            { label: \"ArcCos\", value: GeometryTrigonometryBlockOperations.ArcCos },\r\n            { label: \"ArcSin\", value: GeometryTrigonometryBlockOperations.ArcSin },\r\n            { label: \"Sign\", value: GeometryTrigonometryBlockOperations.Sign },\r\n            { label: \"Negate\", value: GeometryTrigonometryBlockOperations.Negate },\r\n            { label: \"OneMinus\", value: GeometryTrigonometryBlockOperations.OneMinus },\r\n            { label: \"Reciprocal\", value: GeometryTrigonometryBlockOperations.Reciprocal },\r\n            { label: \"ToDegrees\", value: GeometryTrigonometryBlockOperations.ToDegrees },\r\n            { label: \"ToRadians\", value: GeometryTrigonometryBlockOperations.ToRadians },\r\n        ],\r\n    })\r\n    public operation = GeometryTrigonometryBlockOperations.Cos;\r\n\r\n    /**\r\n     * Creates a new GeometryTrigonometryBlock\r\n     * @param name defines the block name\r\n     */\r\n    public constructor(name: string) {\r\n        super(name);\r\n\r\n        this.registerInput(\"input\", NodeGeometryBlockConnectionPointTypes.AutoDetect);\r\n        this.registerOutput(\"output\", NodeGeometryBlockConnectionPointTypes.BasedOnInput);\r\n\r\n        this._outputs[0]._typeConnectionSource = this._inputs[0];\r\n        this._inputs[0].excludedConnectionPointTypes.push(NodeGeometryBlockConnectionPointTypes.Matrix);\r\n        this._inputs[0].excludedConnectionPointTypes.push(NodeGeometryBlockConnectionPointTypes.Geometry);\r\n        this._inputs[0].excludedConnectionPointTypes.push(NodeGeometryBlockConnectionPointTypes.Texture);\r\n    }\r\n\r\n    /**\r\n     * Gets the current class name\r\n     * @returns the class name\r\n     */\r\n    public getClassName() {\r\n        return \"GeometryTrigonometryBlock\";\r\n    }\r\n\r\n    /**\r\n     * Gets the input component\r\n     */\r\n    public get input(): NodeGeometryConnectionPoint {\r\n        return this._inputs[0];\r\n    }\r\n\r\n    /**\r\n     * Gets the output component\r\n     */\r\n    public get output(): NodeGeometryConnectionPoint {\r\n        return this._outputs[0];\r\n    }\r\n\r\n    protected _buildBlock(state: NodeGeometryBuildState) {\r\n        super._buildBlock(state);\r\n        let func: Nullable<(value: number) => number> = null;\r\n\r\n        switch (this.operation) {\r\n            case GeometryTrigonometryBlockOperations.Cos: {\r\n                func = (value: number) => Math.cos(value);\r\n                break;\r\n            }\r\n            case GeometryTrigonometryBlockOperations.Sin: {\r\n                func = (value: number) => Math.sin(value);\r\n                break;\r\n            }\r\n            case GeometryTrigonometryBlockOperations.Abs: {\r\n                func = (value: number) => Math.abs(value);\r\n                break;\r\n            }\r\n            case GeometryTrigonometryBlockOperations.Exp: {\r\n                func = (value: number) => Math.exp(value);\r\n                break;\r\n            }\r\n            case GeometryTrigonometryBlockOperations.Round: {\r\n                func = (value: number) => Math.round(value);\r\n                break;\r\n            }\r\n            case GeometryTrigonometryBlockOperations.Floor: {\r\n                func = (value: number) => Math.floor(value);\r\n                break;\r\n            }\r\n            case GeometryTrigonometryBlockOperations.Ceiling: {\r\n                func = (value: number) => Math.ceil(value);\r\n                break;\r\n            }\r\n            case GeometryTrigonometryBlockOperations.Sqrt: {\r\n                func = (value: number) => Math.sqrt(value);\r\n                break;\r\n            }\r\n            case GeometryTrigonometryBlockOperations.Log: {\r\n                func = (value: number) => Math.log(value);\r\n                break;\r\n            }\r\n            case GeometryTrigonometryBlockOperations.Tan: {\r\n                func = (value: number) => Math.tan(value);\r\n                break;\r\n            }\r\n            case GeometryTrigonometryBlockOperations.ArcTan: {\r\n                func = (value: number) => Math.atan(value);\r\n                break;\r\n            }\r\n            case GeometryTrigonometryBlockOperations.ArcCos: {\r\n                func = (value: number) => Math.acos(value);\r\n                break;\r\n            }\r\n            case GeometryTrigonometryBlockOperations.ArcSin: {\r\n                func = (value: number) => Math.asin(value);\r\n                break;\r\n            }\r\n            case GeometryTrigonometryBlockOperations.Sign: {\r\n                func = (value: number) => Math.sign(value);\r\n                break;\r\n            }\r\n            case GeometryTrigonometryBlockOperations.Negate: {\r\n                func = (value: number) => -value;\r\n                break;\r\n            }\r\n            case GeometryTrigonometryBlockOperations.OneMinus: {\r\n                func = (value: number) => 1 - value;\r\n                break;\r\n            }\r\n            case GeometryTrigonometryBlockOperations.Reciprocal: {\r\n                func = (value: number) => 1 / value;\r\n                break;\r\n            }\r\n            case GeometryTrigonometryBlockOperations.ToRadians: {\r\n                func = (value: number) => (value * Math.PI) / 180;\r\n                break;\r\n            }\r\n            case GeometryTrigonometryBlockOperations.ToDegrees: {\r\n                func = (value: number) => (value * 180) / Math.PI;\r\n                break;\r\n            }\r\n        }\r\n        if (!func) {\r\n            this.input._storedFunction = null;\r\n            this.input._storedValue = null;\r\n            return;\r\n        }\r\n\r\n        switch (this.input.type) {\r\n            case NodeGeometryBlockConnectionPointTypes.Int:\r\n            case NodeGeometryBlockConnectionPointTypes.Float: {\r\n                this.output._storedFunction = (state) => {\r\n                    const source = this.input.getConnectedValue(state);\r\n                    return func!(source);\r\n                };\r\n                break;\r\n            }\r\n            case NodeGeometryBlockConnectionPointTypes.Vector2: {\r\n                this.output._storedFunction = (state) => {\r\n                    const source = this.input.getConnectedValue(state);\r\n                    return new Vector2(func!(source.x), func!(source.y));\r\n                };\r\n                break;\r\n            }\r\n            case NodeGeometryBlockConnectionPointTypes.Vector3: {\r\n                this.output._storedFunction = (state) => {\r\n                    const source = this.input.getConnectedValue(state);\r\n                    return new Vector3(func!(source.x), func!(source.y), func!(source.z));\r\n                };\r\n                break;\r\n            }\r\n            case NodeGeometryBlockConnectionPointTypes.Vector4: {\r\n                this.output._storedFunction = (state) => {\r\n                    const source = this.input.getConnectedValue(state);\r\n                    return new Vector4(func!(source.x), func!(source.y), func!(source.z), func!(source.w));\r\n                };\r\n                break;\r\n            }\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    public serialize(): any {\r\n        const serializationObject = super.serialize();\r\n\r\n        serializationObject.operation = this.operation;\r\n\r\n        return serializationObject;\r\n    }\r\n\r\n    public _deserialize(serializationObject: any) {\r\n        super._deserialize(serializationObject);\r\n\r\n        this.operation = serializationObject.operation;\r\n    }\r\n\r\n    protected _dumpPropertiesCode() {\r\n        const codeString =\r\n            super._dumpPropertiesCode() +\r\n            `${this._codeVariableName}.operation = BABYLON.GeometryTrigonometryBlockOperations.${GeometryTrigonometryBlockOperations[this.operation]};\\n`;\r\n        return codeString;\r\n    }\r\n}\r\n\r\nRegisterClass(\"BABYLON.GeometryTrigonometryBlock\", GeometryTrigonometryBlock);\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}