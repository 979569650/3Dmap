{"ast":null,"code":"import { Tools } from \"../../Misc/tools.js\";\n/** @internal */\nexport class WebGPUTintWASM {\n  async initTwgsl(twgslOptions) {\n    if (WebGPUTintWASM._twgsl) {\n      return;\n    }\n    twgslOptions = twgslOptions || {};\n    twgslOptions = Object.assign(Object.assign({}, WebGPUTintWASM._TWgslDefaultOptions), twgslOptions);\n    if (twgslOptions.twgsl) {\n      WebGPUTintWASM._twgsl = twgslOptions.twgsl;\n      return Promise.resolve();\n    }\n    if (twgslOptions.jsPath && twgslOptions.wasmPath) {\n      await Tools.LoadBabylonScriptAsync(twgslOptions.jsPath);\n    }\n    if (self.twgsl) {\n      WebGPUTintWASM._twgsl = await self.twgsl(Tools.GetBabylonScriptURL(twgslOptions.wasmPath));\n      return Promise.resolve();\n    }\n    return Promise.reject(\"twgsl is not available.\");\n  }\n  convertSpirV2WGSL(code, disableUniformityAnalysis = false) {\n    const ccode = WebGPUTintWASM._twgsl.convertSpirV2WGSL(code, WebGPUTintWASM.DisableUniformityAnalysis || disableUniformityAnalysis);\n    if (WebGPUTintWASM.ShowWGSLShaderCode) {\n      console.log(ccode);\n      console.log(\"***********************************************\");\n    }\n    return WebGPUTintWASM.DisableUniformityAnalysis || disableUniformityAnalysis ? \"diagnostic(off, derivative_uniformity);\\n\" + ccode : ccode;\n  }\n}\n// Default twgsl options.\nWebGPUTintWASM._TWgslDefaultOptions = {\n  jsPath: \"twgsl/twgsl.js\",\n  wasmPath: \"twgsl/twgsl.wasm\"\n};\nWebGPUTintWASM.ShowWGSLShaderCode = false;\nWebGPUTintWASM.DisableUniformityAnalysis = false;\nWebGPUTintWASM._twgsl = null;","map":{"version":3,"names":["Tools","WebGPUTintWASM","initTwgsl","twgslOptions","_twgsl","Object","assign","_TWgslDefaultOptions","twgsl","Promise","resolve","jsPath","wasmPath","LoadBabylonScriptAsync","self","GetBabylonScriptURL","reject","convertSpirV2WGSL","code","disableUniformityAnalysis","ccode","DisableUniformityAnalysis","ShowWGSLShaderCode","console","log"],"sources":["../../../../../dev/core/src/Engines/WebGPU/webgpuTintWASM.ts"],"sourcesContent":["import { Tools } from \"../../Misc/tools\";\r\n\r\n/**\r\n * Options to load the associated Twgsl library\r\n */\r\nexport interface TwgslOptions {\r\n    /**\r\n     * Defines an existing instance of Twgsl (useful in modules who do not access the global instance).\r\n     */\r\n    twgsl?: any;\r\n    /**\r\n     * Defines the URL of the twgsl JS File.\r\n     */\r\n    jsPath?: string;\r\n    /**\r\n     * Defines the URL of the twgsl WASM File.\r\n     */\r\n    wasmPath?: string;\r\n}\r\n\r\n/** @internal */\r\nexport class WebGPUTintWASM {\r\n    // Default twgsl options.\r\n    private static readonly _TWgslDefaultOptions: TwgslOptions = {\r\n        jsPath: \"twgsl/twgsl.js\",\r\n        wasmPath: \"twgsl/twgsl.wasm\",\r\n    };\r\n\r\n    public static ShowWGSLShaderCode = false;\r\n\r\n    public static DisableUniformityAnalysis = false;\r\n\r\n    private static _twgsl: any = null;\r\n\r\n    public async initTwgsl(twgslOptions?: TwgslOptions): Promise<void> {\r\n        if (WebGPUTintWASM._twgsl) {\r\n            return;\r\n        }\r\n\r\n        twgslOptions = twgslOptions || {};\r\n        twgslOptions = {\r\n            ...WebGPUTintWASM._TWgslDefaultOptions,\r\n            ...twgslOptions,\r\n        };\r\n\r\n        if (twgslOptions.twgsl) {\r\n            WebGPUTintWASM._twgsl = twgslOptions.twgsl;\r\n            return Promise.resolve();\r\n        }\r\n\r\n        if (twgslOptions.jsPath && twgslOptions.wasmPath) {\r\n            await Tools.LoadBabylonScriptAsync(twgslOptions.jsPath);\r\n        }\r\n\r\n        if ((self as any).twgsl) {\r\n            WebGPUTintWASM._twgsl = await (self as any).twgsl(Tools.GetBabylonScriptURL(twgslOptions!.wasmPath!));\r\n            return Promise.resolve();\r\n        }\r\n\r\n        return Promise.reject(\"twgsl is not available.\");\r\n    }\r\n\r\n    public convertSpirV2WGSL(code: Uint32Array, disableUniformityAnalysis = false): string {\r\n        const ccode = WebGPUTintWASM._twgsl.convertSpirV2WGSL(code, WebGPUTintWASM.DisableUniformityAnalysis || disableUniformityAnalysis);\r\n        if (WebGPUTintWASM.ShowWGSLShaderCode) {\r\n            console.log(ccode);\r\n            console.log(\"***********************************************\");\r\n        }\r\n        return WebGPUTintWASM.DisableUniformityAnalysis || disableUniformityAnalysis ? \"diagnostic(off, derivative_uniformity);\\n\" + ccode : ccode;\r\n    }\r\n}\r\n"],"mappings":"AAAA,SAASA,KAAK,QAAQ,qBAAmB;AAoBzC;AACA,OAAM,MAAOC,cAAc;EAahB,MAAMC,SAASA,CAACC,YAA2B;IAC9C,IAAIF,cAAc,CAACG,MAAM,EAAE;MACvB;;IAGJD,YAAY,GAAGA,YAAY,IAAI,EAAE;IACjCA,YAAY,GAAAE,MAAA,CAAAC,MAAA,CAAAD,MAAA,CAAAC,MAAA,KACLL,cAAc,CAACM,oBAAoB,GACnCJ,YAAY,CAClB;IAED,IAAIA,YAAY,CAACK,KAAK,EAAE;MACpBP,cAAc,CAACG,MAAM,GAAGD,YAAY,CAACK,KAAK;MAC1C,OAAOC,OAAO,CAACC,OAAO,EAAE;;IAG5B,IAAIP,YAAY,CAACQ,MAAM,IAAIR,YAAY,CAACS,QAAQ,EAAE;MAC9C,MAAMZ,KAAK,CAACa,sBAAsB,CAACV,YAAY,CAACQ,MAAM,CAAC;;IAG3D,IAAKG,IAAY,CAACN,KAAK,EAAE;MACrBP,cAAc,CAACG,MAAM,GAAG,MAAOU,IAAY,CAACN,KAAK,CAACR,KAAK,CAACe,mBAAmB,CAACZ,YAAa,CAACS,QAAS,CAAC,CAAC;MACrG,OAAOH,OAAO,CAACC,OAAO,EAAE;;IAG5B,OAAOD,OAAO,CAACO,MAAM,CAAC,yBAAyB,CAAC;EACpD;EAEOC,iBAAiBA,CAACC,IAAiB,EAAEC,yBAAyB,GAAG,KAAK;IACzE,MAAMC,KAAK,GAAGnB,cAAc,CAACG,MAAM,CAACa,iBAAiB,CAACC,IAAI,EAAEjB,cAAc,CAACoB,yBAAyB,IAAIF,yBAAyB,CAAC;IAClI,IAAIlB,cAAc,CAACqB,kBAAkB,EAAE;MACnCC,OAAO,CAACC,GAAG,CAACJ,KAAK,CAAC;MAClBG,OAAO,CAACC,GAAG,CAAC,iDAAiD,CAAC;;IAElE,OAAOvB,cAAc,CAACoB,yBAAyB,IAAIF,yBAAyB,GAAG,2CAA2C,GAAGC,KAAK,GAAGA,KAAK;EAC9I;;AA/CA;AACwBnB,cAAA,CAAAM,oBAAoB,GAAiB;EACzDI,MAAM,EAAE,gBAAgB;EACxBC,QAAQ,EAAE;CACb;AAEaX,cAAA,CAAAqB,kBAAkB,GAAG,KAAK;AAE1BrB,cAAA,CAAAoB,yBAAyB,GAAG,KAAK;AAEhCpB,cAAA,CAAAG,MAAM,GAAQ,IAAI"},"metadata":{},"sourceType":"module","externalDependencies":[]}