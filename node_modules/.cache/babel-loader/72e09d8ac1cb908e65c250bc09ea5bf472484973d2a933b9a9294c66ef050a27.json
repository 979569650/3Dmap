{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { FlowGraphExecutionBlock } from \"../../../flowGraphExecutionBlock.js\";\nimport { RichTypeAny } from \"../../../flowGraphRichTypes.js\";\nimport { RegisterClass } from \"../../../../Misc/typeStore.js\";\n/**\n * @experimental\n * A block that executes a branch based on a selection.\n */\nexport class FlowGraphSwitchBlock extends FlowGraphExecutionBlock {\n  constructor(config) {\n    super(config);\n    this.config = config;\n    this.selection = this._registerDataInput(\"selection\", RichTypeAny);\n  }\n  configure() {\n    super.configure();\n    this.outputFlows = [];\n    for (let i = 0; i <= this.config.cases.length; i++) {\n      this.outputFlows.push(this._registerSignalOutput(`out${i}`));\n    }\n  }\n  _execute(context, _callingSignal) {\n    const selectionValue = this.selection.getValue(context);\n    for (let i = 0; i < this.config.cases.length; i++) {\n      if (selectionValue === this.config.cases[i]) {\n        this.outputFlows[i]._activateSignal(context);\n        return;\n      }\n    }\n    // default case\n    this.outputFlows[this.outputFlows.length - 1]._activateSignal(context);\n  }\n  getClassName() {\n    return \"FGSwitchBlock\";\n  }\n}\nRegisterClass(\"FGSwitchBlock\", FlowGraphSwitchBlock);","map":{"version":3,"names":["FlowGraphExecutionBlock","RichTypeAny","RegisterClass","FlowGraphSwitchBlock","constructor","config","selection","_registerDataInput","configure","outputFlows","i","cases","length","push","_registerSignalOutput","_execute","context","_callingSignal","selectionValue","getValue","_activateSignal","getClassName"],"sources":["../../../../../../../dev/core/src/FlowGraph/Blocks/Execution/ControlFlow/flowGraphSwitchBlock.ts"],"sourcesContent":["import type { FlowGraphContext } from \"../../../flowGraphContext\";\r\nimport type { FlowGraphDataConnection } from \"../../../flowGraphDataConnection\";\r\nimport { FlowGraphExecutionBlock } from \"../../../flowGraphExecutionBlock\";\r\nimport { RichTypeAny } from \"../../../flowGraphRichTypes\";\r\nimport type { FlowGraphSignalConnection } from \"../../../flowGraphSignalConnection\";\r\nimport type { IFlowGraphBlockConfiguration } from \"../../../flowGraphBlock\";\r\nimport { RegisterClass } from \"../../../../Misc/typeStore\";\r\n/**\r\n * @experimental\r\n * Configuration for a switch block.\r\n */\r\nexport interface IFlowGraphSwitchBlockConfiguration<T> extends IFlowGraphBlockConfiguration {\r\n    /**\r\n     * The possible values for the selection.\r\n     */\r\n    cases: T[];\r\n}\r\n\r\n/**\r\n * @experimental\r\n * A block that executes a branch based on a selection.\r\n */\r\nexport class FlowGraphSwitchBlock<T> extends FlowGraphExecutionBlock {\r\n    /**\r\n     * Input connection: The value of the selection.\r\n     */\r\n    public readonly selection: FlowGraphDataConnection<T>;\r\n    /**\r\n     * Output connection: The output flows.\r\n     */\r\n    public outputFlows: FlowGraphSignalConnection[];\r\n\r\n    constructor(public config: IFlowGraphSwitchBlockConfiguration<T>) {\r\n        super(config);\r\n\r\n        this.selection = this._registerDataInput(\"selection\", RichTypeAny);\r\n    }\r\n\r\n    public configure(): void {\r\n        super.configure();\r\n        this.outputFlows = [];\r\n        for (let i = 0; i <= this.config.cases.length; i++) {\r\n            this.outputFlows.push(this._registerSignalOutput(`out${i}`));\r\n        }\r\n    }\r\n\r\n    public _execute(context: FlowGraphContext, _callingSignal: FlowGraphSignalConnection): void {\r\n        const selectionValue = this.selection.getValue(context);\r\n\r\n        for (let i = 0; i < this.config.cases.length; i++) {\r\n            if (selectionValue === this.config.cases[i]) {\r\n                this.outputFlows[i]._activateSignal(context);\r\n                return;\r\n            }\r\n        }\r\n\r\n        // default case\r\n        this.outputFlows[this.outputFlows.length - 1]._activateSignal(context);\r\n    }\r\n\r\n    public getClassName(): string {\r\n        return \"FGSwitchBlock\";\r\n    }\r\n}\r\nRegisterClass(\"FGSwitchBlock\", FlowGraphSwitchBlock);\r\n"],"mappings":";AAEA,SAASA,uBAAuB,QAAQ,qCAAmC;AAC3E,SAASC,WAAW,QAAQ,gCAA8B;AAG1D,SAASC,aAAa,QAAQ,+BAA6B;AAY3D;;;;AAIA,OAAM,MAAOC,oBAAwB,SAAQH,uBAAuB;EAUhEI,YAAmBC,MAA6C;IAC5D,KAAK,CAACA,MAAM,CAAC;IADE,KAAAA,MAAM,GAANA,MAAM;IAGrB,IAAI,CAACC,SAAS,GAAG,IAAI,CAACC,kBAAkB,CAAC,WAAW,EAAEN,WAAW,CAAC;EACtE;EAEOO,SAASA,CAAA;IACZ,KAAK,CAACA,SAAS,EAAE;IACjB,IAAI,CAACC,WAAW,GAAG,EAAE;IACrB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,IAAI,IAAI,CAACL,MAAM,CAACM,KAAK,CAACC,MAAM,EAAEF,CAAC,EAAE,EAAE;MAChD,IAAI,CAACD,WAAW,CAACI,IAAI,CAAC,IAAI,CAACC,qBAAqB,CAAC,MAAMJ,CAAC,EAAE,CAAC,CAAC;;EAEpE;EAEOK,QAAQA,CAACC,OAAyB,EAAEC,cAAyC;IAChF,MAAMC,cAAc,GAAG,IAAI,CAACZ,SAAS,CAACa,QAAQ,CAACH,OAAO,CAAC;IAEvD,KAAK,IAAIN,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,IAAI,CAACL,MAAM,CAACM,KAAK,CAACC,MAAM,EAAEF,CAAC,EAAE,EAAE;MAC/C,IAAIQ,cAAc,KAAK,IAAI,CAACb,MAAM,CAACM,KAAK,CAACD,CAAC,CAAC,EAAE;QACzC,IAAI,CAACD,WAAW,CAACC,CAAC,CAAC,CAACU,eAAe,CAACJ,OAAO,CAAC;QAC5C;;;IAIR;IACA,IAAI,CAACP,WAAW,CAAC,IAAI,CAACA,WAAW,CAACG,MAAM,GAAG,CAAC,CAAC,CAACQ,eAAe,CAACJ,OAAO,CAAC;EAC1E;EAEOK,YAAYA,CAAA;IACf,OAAO,eAAe;EAC1B;;AAEJnB,aAAa,CAAC,eAAe,EAAEC,oBAAoB,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}