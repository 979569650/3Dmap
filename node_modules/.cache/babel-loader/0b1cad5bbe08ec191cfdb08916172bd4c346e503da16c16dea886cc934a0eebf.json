{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { InternalTexture, InternalTextureSource } from \"../../Materials/Textures/internalTexture.js\";\nimport { Logger } from \"../../Misc/logger.js\";\nimport { ThinEngine } from \"../thinEngine.js\";\nimport { WebGLRenderTargetWrapper } from \"../WebGL/webGLRenderTargetWrapper.js\";\nThinEngine.prototype._createHardwareRenderTargetWrapper = function (isMulti, isCube, size) {\n  const rtWrapper = new WebGLRenderTargetWrapper(isMulti, isCube, size, this, this._gl);\n  this._renderTargetWrapperCache.push(rtWrapper);\n  return rtWrapper;\n};\nThinEngine.prototype.createRenderTargetTexture = function (size, options) {\n  var _a, _b;\n  const rtWrapper = this._createHardwareRenderTargetWrapper(false, false, size);\n  let generateDepthBuffer = true;\n  let generateStencilBuffer = false;\n  let noColorAttachment = false;\n  let colorAttachment = undefined;\n  let samples = 1;\n  if (options !== undefined && typeof options === \"object\") {\n    generateDepthBuffer = (_a = options.generateDepthBuffer) !== null && _a !== void 0 ? _a : true;\n    generateStencilBuffer = !!options.generateStencilBuffer;\n    noColorAttachment = !!options.noColorAttachment;\n    colorAttachment = options.colorAttachment;\n    samples = (_b = options.samples) !== null && _b !== void 0 ? _b : 1;\n  }\n  const texture = colorAttachment || (noColorAttachment ? null : this._createInternalTexture(size, options, true, InternalTextureSource.RenderTarget));\n  const width = size.width || size;\n  const height = size.height || size;\n  const currentFrameBuffer = this._currentFramebuffer;\n  const gl = this._gl;\n  // Create the framebuffer\n  const framebuffer = gl.createFramebuffer();\n  this._bindUnboundFramebuffer(framebuffer);\n  rtWrapper._depthStencilBuffer = this._setupFramebufferDepthAttachments(generateStencilBuffer, generateDepthBuffer, width, height);\n  // No need to rebind on every frame\n  if (texture && !texture.is2DArray) {\n    gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture._hardwareTexture.underlyingResource, 0);\n  }\n  this._bindUnboundFramebuffer(currentFrameBuffer);\n  rtWrapper._framebuffer = framebuffer;\n  rtWrapper._generateDepthBuffer = generateDepthBuffer;\n  rtWrapper._generateStencilBuffer = generateStencilBuffer;\n  rtWrapper.setTextures(texture);\n  this.updateRenderTargetTextureSampleCount(rtWrapper, samples);\n  return rtWrapper;\n};\nThinEngine.prototype.createDepthStencilTexture = function (size, options, rtWrapper) {\n  if (options.isCube) {\n    const width = size.width || size;\n    return this._createDepthStencilCubeTexture(width, options, rtWrapper);\n  } else {\n    return this._createDepthStencilTexture(size, options, rtWrapper);\n  }\n};\nThinEngine.prototype._createDepthStencilTexture = function (size, options, rtWrapper) {\n  const gl = this._gl;\n  const layers = size.layers || 0;\n  const target = layers !== 0 ? gl.TEXTURE_2D_ARRAY : gl.TEXTURE_2D;\n  const internalTexture = new InternalTexture(this, InternalTextureSource.DepthStencil);\n  if (!this._caps.depthTextureExtension) {\n    Logger.Error(\"Depth texture is not supported by your browser or hardware.\");\n    return internalTexture;\n  }\n  const internalOptions = Object.assign({\n    bilinearFiltering: false,\n    comparisonFunction: 0,\n    generateStencil: false\n  }, options);\n  this._bindTextureDirectly(target, internalTexture, true);\n  this._setupDepthStencilTexture(internalTexture, size, internalOptions.generateStencil, internalOptions.comparisonFunction === 0 ? false : internalOptions.bilinearFiltering, internalOptions.comparisonFunction, internalOptions.samples);\n  if (internalOptions.depthTextureFormat !== undefined) {\n    if (internalOptions.depthTextureFormat !== 15 && internalOptions.depthTextureFormat !== 16 && internalOptions.depthTextureFormat !== 17 && internalOptions.depthTextureFormat !== 13 && internalOptions.depthTextureFormat !== 14 && internalOptions.depthTextureFormat !== 18) {\n      Logger.Error(\"Depth texture format is not supported.\");\n      return internalTexture;\n    }\n    internalTexture.format = internalOptions.depthTextureFormat;\n  } else {\n    internalTexture.format = internalOptions.generateStencil ? 13 : 16;\n  }\n  const hasStencil = internalTexture.format === 17 || internalTexture.format === 13 || internalTexture.format === 18;\n  rtWrapper._depthStencilTexture = internalTexture;\n  rtWrapper._depthStencilTextureWithStencil = hasStencil;\n  let type = gl.UNSIGNED_INT;\n  if (internalTexture.format === 15) {\n    type = gl.UNSIGNED_SHORT;\n  } else if (internalTexture.format === 17 || internalTexture.format === 13) {\n    type = gl.UNSIGNED_INT_24_8;\n  } else if (internalTexture.format === 14) {\n    type = gl.FLOAT;\n  } else if (internalTexture.format === 18) {\n    type = gl.FLOAT_32_UNSIGNED_INT_24_8_REV;\n  }\n  const format = hasStencil ? gl.DEPTH_STENCIL : gl.DEPTH_COMPONENT;\n  let internalFormat = format;\n  if (this.webGLVersion > 1) {\n    if (internalTexture.format === 15) {\n      internalFormat = gl.DEPTH_COMPONENT16;\n    } else if (internalTexture.format === 16) {\n      internalFormat = gl.DEPTH_COMPONENT24;\n    } else if (internalTexture.format === 17 || internalTexture.format === 13) {\n      internalFormat = gl.DEPTH24_STENCIL8;\n    } else if (internalTexture.format === 14) {\n      internalFormat = gl.DEPTH_COMPONENT32F;\n    } else if (internalTexture.format === 18) {\n      internalFormat = gl.DEPTH32F_STENCIL8;\n    }\n  }\n  if (internalTexture.is2DArray) {\n    gl.texImage3D(target, 0, internalFormat, internalTexture.width, internalTexture.height, layers, 0, format, type, null);\n  } else {\n    gl.texImage2D(target, 0, internalFormat, internalTexture.width, internalTexture.height, 0, format, type, null);\n  }\n  this._bindTextureDirectly(target, null);\n  this._internalTexturesCache.push(internalTexture);\n  // Dispose previous depth/stencil render buffers and clear the corresponding attachment.\n  // Next time this framebuffer is bound, the new depth/stencil texture will be attached.\n  const glRtWrapper = rtWrapper;\n  if (glRtWrapper._depthStencilBuffer) {\n    const currentFrameBuffer = this._currentFramebuffer;\n    this._bindUnboundFramebuffer(glRtWrapper._framebuffer);\n    gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.DEPTH_STENCIL_ATTACHMENT, gl.RENDERBUFFER, null);\n    gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.DEPTH_ATTACHMENT, gl.RENDERBUFFER, null);\n    gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.STENCIL_ATTACHMENT, gl.RENDERBUFFER, null);\n    this._bindUnboundFramebuffer(currentFrameBuffer);\n    gl.deleteRenderbuffer(glRtWrapper._depthStencilBuffer);\n    glRtWrapper._depthStencilBuffer = null;\n  }\n  return internalTexture;\n};\nThinEngine.prototype.updateRenderTargetTextureSampleCount = function (rtWrapper, samples) {\n  if (this.webGLVersion < 2 || !rtWrapper || !rtWrapper.texture) {\n    return 1;\n  }\n  if (rtWrapper.samples === samples) {\n    return samples;\n  }\n  const gl = this._gl;\n  samples = Math.min(samples, this.getCaps().maxMSAASamples);\n  // Dispose previous render buffers\n  if (rtWrapper._depthStencilBuffer) {\n    gl.deleteRenderbuffer(rtWrapper._depthStencilBuffer);\n    rtWrapper._depthStencilBuffer = null;\n  }\n  if (rtWrapper._MSAAFramebuffer) {\n    gl.deleteFramebuffer(rtWrapper._MSAAFramebuffer);\n    rtWrapper._MSAAFramebuffer = null;\n  }\n  const hardwareTexture = rtWrapper.texture._hardwareTexture;\n  hardwareTexture.releaseMSAARenderBuffers();\n  if (samples > 1 && typeof gl.renderbufferStorageMultisample === \"function\") {\n    const framebuffer = gl.createFramebuffer();\n    if (!framebuffer) {\n      throw new Error(\"Unable to create multi sampled framebuffer\");\n    }\n    rtWrapper._MSAAFramebuffer = framebuffer;\n    this._bindUnboundFramebuffer(rtWrapper._MSAAFramebuffer);\n    const colorRenderbuffer = this._createRenderBuffer(rtWrapper.texture.width, rtWrapper.texture.height, samples, -1 /* not used */, this._getRGBAMultiSampleBufferFormat(rtWrapper.texture.type), gl.COLOR_ATTACHMENT0, false);\n    if (!colorRenderbuffer) {\n      throw new Error(\"Unable to create multi sampled framebuffer\");\n    }\n    hardwareTexture.addMSAARenderBuffer(colorRenderbuffer);\n  } else {\n    this._bindUnboundFramebuffer(rtWrapper._framebuffer);\n  }\n  rtWrapper.texture.samples = samples;\n  rtWrapper._samples = samples;\n  rtWrapper._depthStencilBuffer = this._setupFramebufferDepthAttachments(rtWrapper._generateStencilBuffer, rtWrapper._generateDepthBuffer, rtWrapper.texture.width, rtWrapper.texture.height, samples);\n  this._bindUnboundFramebuffer(null);\n  return samples;\n};","map":{"version":3,"names":["InternalTexture","InternalTextureSource","Logger","ThinEngine","WebGLRenderTargetWrapper","prototype","_createHardwareRenderTargetWrapper","isMulti","isCube","size","rtWrapper","_gl","_renderTargetWrapperCache","push","createRenderTargetTexture","options","generateDepthBuffer","generateStencilBuffer","noColorAttachment","colorAttachment","undefined","samples","_a","_b","texture","_createInternalTexture","RenderTarget","width","height","currentFrameBuffer","_currentFramebuffer","gl","framebuffer","createFramebuffer","_bindUnboundFramebuffer","_depthStencilBuffer","_setupFramebufferDepthAttachments","is2DArray","framebufferTexture2D","FRAMEBUFFER","COLOR_ATTACHMENT0","TEXTURE_2D","_hardwareTexture","underlyingResource","_framebuffer","_generateDepthBuffer","_generateStencilBuffer","setTextures","updateRenderTargetTextureSampleCount","createDepthStencilTexture","_createDepthStencilCubeTexture","_createDepthStencilTexture","layers","target","TEXTURE_2D_ARRAY","internalTexture","DepthStencil","_caps","depthTextureExtension","Error","internalOptions","Object","assign","bilinearFiltering","comparisonFunction","generateStencil","_bindTextureDirectly","_setupDepthStencilTexture","depthTextureFormat","format","hasStencil","_depthStencilTexture","_depthStencilTextureWithStencil","type","UNSIGNED_INT","UNSIGNED_SHORT","UNSIGNED_INT_24_8","FLOAT","FLOAT_32_UNSIGNED_INT_24_8_REV","DEPTH_STENCIL","DEPTH_COMPONENT","internalFormat","webGLVersion","DEPTH_COMPONENT16","DEPTH_COMPONENT24","DEPTH24_STENCIL8","DEPTH_COMPONENT32F","DEPTH32F_STENCIL8","texImage3D","texImage2D","_internalTexturesCache","glRtWrapper","framebufferRenderbuffer","DEPTH_STENCIL_ATTACHMENT","RENDERBUFFER","DEPTH_ATTACHMENT","STENCIL_ATTACHMENT","deleteRenderbuffer","Math","min","getCaps","maxMSAASamples","_MSAAFramebuffer","deleteFramebuffer","hardwareTexture","releaseMSAARenderBuffers","renderbufferStorageMultisample","colorRenderbuffer","_createRenderBuffer","_getRGBAMultiSampleBufferFormat","addMSAARenderBuffer","_samples"],"sources":["../../../../../dev/core/src/Engines/Extensions/engine.renderTarget.ts"],"sourcesContent":["import { InternalTexture, InternalTextureSource } from \"../../Materials/Textures/internalTexture\";\r\nimport { Logger } from \"../../Misc/logger\";\r\nimport type { RenderTargetCreationOptions, DepthTextureCreationOptions, TextureSize } from \"../../Materials/Textures/textureCreationOptions\";\r\nimport { ThinEngine } from \"../thinEngine\";\r\nimport type { Nullable } from \"../../types\";\r\nimport type { RenderTargetWrapper } from \"../renderTargetWrapper\";\r\nimport { WebGLRenderTargetWrapper } from \"../WebGL/webGLRenderTargetWrapper\";\r\nimport type { WebGLHardwareTexture } from \"../WebGL/webGLHardwareTexture\";\r\n\r\nimport { Constants } from \"../constants\";\r\n\r\n/**\r\n * Type used to define a texture size (either with a number or with a rect width and height)\r\n * @deprecated please use TextureSize instead\r\n */\r\nexport type RenderTargetTextureSize = TextureSize;\r\n\r\ndeclare module \"../../Engines/thinEngine\" {\r\n    export interface ThinEngine {\r\n        /**\r\n         * Creates a new render target texture\r\n         * @param size defines the size of the texture\r\n         * @param options defines the options used to create the texture\r\n         * @returns a new render target wrapper ready to render texture\r\n         */\r\n        createRenderTargetTexture(size: TextureSize, options: boolean | RenderTargetCreationOptions): RenderTargetWrapper;\r\n\r\n        /**\r\n         * Creates a depth stencil texture.\r\n         * This is only available in WebGL 2 or with the depth texture extension available.\r\n         * @param size The size of face edge in the texture.\r\n         * @param options The options defining the texture.\r\n         * @param rtWrapper The render target wrapper for which the depth/stencil texture must be created\r\n         * @returns The texture\r\n         */\r\n        createDepthStencilTexture(size: TextureSize, options: DepthTextureCreationOptions, rtWrapper: RenderTargetWrapper): InternalTexture;\r\n\r\n        /**\r\n         * Updates the sample count of a render target texture\r\n         * @see https://doc.babylonjs.com/setup/support/webGL2#multisample-render-targets\r\n         * @param rtWrapper defines the render target wrapper to update\r\n         * @param samples defines the sample count to set\r\n         * @returns the effective sample count (could be 0 if multisample render targets are not supported)\r\n         */\r\n        updateRenderTargetTextureSampleCount(rtWrapper: Nullable<RenderTargetWrapper>, samples: number): number;\r\n\r\n        /** @internal */\r\n        _createDepthStencilTexture(size: TextureSize, options: DepthTextureCreationOptions, rtWrapper: RenderTargetWrapper): InternalTexture;\r\n\r\n        /** @internal */\r\n        _createHardwareRenderTargetWrapper(isMulti: boolean, isCube: boolean, size: TextureSize): RenderTargetWrapper;\r\n    }\r\n}\r\n\r\nThinEngine.prototype._createHardwareRenderTargetWrapper = function (isMulti: boolean, isCube: boolean, size: TextureSize): RenderTargetWrapper {\r\n    const rtWrapper = new WebGLRenderTargetWrapper(isMulti, isCube, size, this, this._gl);\r\n    this._renderTargetWrapperCache.push(rtWrapper);\r\n    return rtWrapper;\r\n};\r\n\r\nThinEngine.prototype.createRenderTargetTexture = function (this: ThinEngine, size: TextureSize, options: boolean | RenderTargetCreationOptions): RenderTargetWrapper {\r\n    const rtWrapper = this._createHardwareRenderTargetWrapper(false, false, size) as WebGLRenderTargetWrapper;\r\n\r\n    let generateDepthBuffer = true;\r\n    let generateStencilBuffer = false;\r\n    let noColorAttachment = false;\r\n    let colorAttachment: InternalTexture | undefined = undefined;\r\n    let samples = 1;\r\n    if (options !== undefined && typeof options === \"object\") {\r\n        generateDepthBuffer = options.generateDepthBuffer ?? true;\r\n        generateStencilBuffer = !!options.generateStencilBuffer;\r\n        noColorAttachment = !!options.noColorAttachment;\r\n        colorAttachment = options.colorAttachment;\r\n        samples = options.samples ?? 1;\r\n    }\r\n\r\n    const texture = colorAttachment || (noColorAttachment ? null : this._createInternalTexture(size, options, true, InternalTextureSource.RenderTarget));\r\n    const width = (<{ width: number; height: number; layers?: number }>size).width || <number>size;\r\n    const height = (<{ width: number; height: number; layers?: number }>size).height || <number>size;\r\n\r\n    const currentFrameBuffer = this._currentFramebuffer;\r\n    const gl = this._gl;\r\n\r\n    // Create the framebuffer\r\n    const framebuffer = gl.createFramebuffer();\r\n    this._bindUnboundFramebuffer(framebuffer);\r\n    rtWrapper._depthStencilBuffer = this._setupFramebufferDepthAttachments(generateStencilBuffer, generateDepthBuffer, width, height);\r\n\r\n    // No need to rebind on every frame\r\n    if (texture && !texture.is2DArray) {\r\n        gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture._hardwareTexture!.underlyingResource, 0);\r\n    }\r\n\r\n    this._bindUnboundFramebuffer(currentFrameBuffer);\r\n\r\n    rtWrapper._framebuffer = framebuffer;\r\n    rtWrapper._generateDepthBuffer = generateDepthBuffer;\r\n    rtWrapper._generateStencilBuffer = generateStencilBuffer;\r\n\r\n    rtWrapper.setTextures(texture);\r\n\r\n    this.updateRenderTargetTextureSampleCount(rtWrapper, samples);\r\n\r\n    return rtWrapper;\r\n};\r\n\r\nThinEngine.prototype.createDepthStencilTexture = function (size: TextureSize, options: DepthTextureCreationOptions, rtWrapper: RenderTargetWrapper): InternalTexture {\r\n    if (options.isCube) {\r\n        const width = (<{ width: number; height: number }>size).width || <number>size;\r\n        return this._createDepthStencilCubeTexture(width, options, rtWrapper);\r\n    } else {\r\n        return this._createDepthStencilTexture(size, options, rtWrapper);\r\n    }\r\n};\r\n\r\nThinEngine.prototype._createDepthStencilTexture = function (size: TextureSize, options: DepthTextureCreationOptions, rtWrapper: RenderTargetWrapper): InternalTexture {\r\n    const gl = this._gl;\r\n    const layers = (<{ width: number; height: number; layers?: number }>size).layers || 0;\r\n    const target = layers !== 0 ? gl.TEXTURE_2D_ARRAY : gl.TEXTURE_2D;\r\n    const internalTexture = new InternalTexture(this, InternalTextureSource.DepthStencil);\r\n    if (!this._caps.depthTextureExtension) {\r\n        Logger.Error(\"Depth texture is not supported by your browser or hardware.\");\r\n        return internalTexture;\r\n    }\r\n\r\n    const internalOptions = {\r\n        bilinearFiltering: false,\r\n        comparisonFunction: 0,\r\n        generateStencil: false,\r\n        ...options,\r\n    };\r\n\r\n    this._bindTextureDirectly(target, internalTexture, true);\r\n\r\n    this._setupDepthStencilTexture(\r\n        internalTexture,\r\n        size,\r\n        internalOptions.generateStencil,\r\n        internalOptions.comparisonFunction === 0 ? false : internalOptions.bilinearFiltering,\r\n        internalOptions.comparisonFunction,\r\n        internalOptions.samples\r\n    );\r\n\r\n    if (internalOptions.depthTextureFormat !== undefined) {\r\n        if (\r\n            internalOptions.depthTextureFormat !== Constants.TEXTUREFORMAT_DEPTH16 &&\r\n            internalOptions.depthTextureFormat !== Constants.TEXTUREFORMAT_DEPTH24 &&\r\n            internalOptions.depthTextureFormat !== Constants.TEXTUREFORMAT_DEPTH24UNORM_STENCIL8 &&\r\n            internalOptions.depthTextureFormat !== Constants.TEXTUREFORMAT_DEPTH24_STENCIL8 &&\r\n            internalOptions.depthTextureFormat !== Constants.TEXTUREFORMAT_DEPTH32_FLOAT &&\r\n            internalOptions.depthTextureFormat !== Constants.TEXTUREFORMAT_DEPTH32FLOAT_STENCIL8\r\n        ) {\r\n            Logger.Error(\"Depth texture format is not supported.\");\r\n            return internalTexture;\r\n        }\r\n        internalTexture.format = internalOptions.depthTextureFormat;\r\n    } else {\r\n        internalTexture.format = internalOptions.generateStencil ? Constants.TEXTUREFORMAT_DEPTH24_STENCIL8 : Constants.TEXTUREFORMAT_DEPTH24;\r\n    }\r\n\r\n    const hasStencil =\r\n        internalTexture.format === Constants.TEXTUREFORMAT_DEPTH24UNORM_STENCIL8 ||\r\n        internalTexture.format === Constants.TEXTUREFORMAT_DEPTH24_STENCIL8 ||\r\n        internalTexture.format === Constants.TEXTUREFORMAT_DEPTH32FLOAT_STENCIL8;\r\n\r\n    rtWrapper._depthStencilTexture = internalTexture;\r\n    rtWrapper._depthStencilTextureWithStencil = hasStencil;\r\n\r\n    let type: GLenum = gl.UNSIGNED_INT;\r\n    if (internalTexture.format === Constants.TEXTUREFORMAT_DEPTH16) {\r\n        type = gl.UNSIGNED_SHORT;\r\n    } else if (internalTexture.format === Constants.TEXTUREFORMAT_DEPTH24UNORM_STENCIL8 || internalTexture.format === Constants.TEXTUREFORMAT_DEPTH24_STENCIL8) {\r\n        type = gl.UNSIGNED_INT_24_8;\r\n    } else if (internalTexture.format === Constants.TEXTUREFORMAT_DEPTH32_FLOAT) {\r\n        type = gl.FLOAT;\r\n    } else if (internalTexture.format === Constants.TEXTUREFORMAT_DEPTH32FLOAT_STENCIL8) {\r\n        type = gl.FLOAT_32_UNSIGNED_INT_24_8_REV;\r\n    }\r\n\r\n    const format: GLenum = hasStencil ? gl.DEPTH_STENCIL : gl.DEPTH_COMPONENT;\r\n    let internalFormat = format;\r\n    if (this.webGLVersion > 1) {\r\n        if (internalTexture.format === Constants.TEXTUREFORMAT_DEPTH16) {\r\n            internalFormat = gl.DEPTH_COMPONENT16;\r\n        } else if (internalTexture.format === Constants.TEXTUREFORMAT_DEPTH24) {\r\n            internalFormat = gl.DEPTH_COMPONENT24;\r\n        } else if (internalTexture.format === Constants.TEXTUREFORMAT_DEPTH24UNORM_STENCIL8 || internalTexture.format === Constants.TEXTUREFORMAT_DEPTH24_STENCIL8) {\r\n            internalFormat = gl.DEPTH24_STENCIL8;\r\n        } else if (internalTexture.format === Constants.TEXTUREFORMAT_DEPTH32_FLOAT) {\r\n            internalFormat = gl.DEPTH_COMPONENT32F;\r\n        } else if (internalTexture.format === Constants.TEXTUREFORMAT_DEPTH32FLOAT_STENCIL8) {\r\n            internalFormat = gl.DEPTH32F_STENCIL8;\r\n        }\r\n    }\r\n\r\n    if (internalTexture.is2DArray) {\r\n        gl.texImage3D(target, 0, internalFormat, internalTexture.width, internalTexture.height, layers, 0, format, type, null);\r\n    } else {\r\n        gl.texImage2D(target, 0, internalFormat, internalTexture.width, internalTexture.height, 0, format, type, null);\r\n    }\r\n\r\n    this._bindTextureDirectly(target, null);\r\n\r\n    this._internalTexturesCache.push(internalTexture);\r\n\r\n    // Dispose previous depth/stencil render buffers and clear the corresponding attachment.\r\n    // Next time this framebuffer is bound, the new depth/stencil texture will be attached.\r\n    const glRtWrapper = <WebGLRenderTargetWrapper>(rtWrapper as any);\r\n    if (glRtWrapper._depthStencilBuffer) {\r\n        const currentFrameBuffer = this._currentFramebuffer;\r\n        this._bindUnboundFramebuffer(glRtWrapper._framebuffer);\r\n        gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.DEPTH_STENCIL_ATTACHMENT, gl.RENDERBUFFER, null);\r\n        gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.DEPTH_ATTACHMENT, gl.RENDERBUFFER, null);\r\n        gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.STENCIL_ATTACHMENT, gl.RENDERBUFFER, null);\r\n        this._bindUnboundFramebuffer(currentFrameBuffer);\r\n\r\n        gl.deleteRenderbuffer(glRtWrapper._depthStencilBuffer);\r\n        glRtWrapper._depthStencilBuffer = null;\r\n    }\r\n\r\n    return internalTexture;\r\n};\r\n\r\nThinEngine.prototype.updateRenderTargetTextureSampleCount = function (rtWrapper: Nullable<WebGLRenderTargetWrapper>, samples: number): number {\r\n    if (this.webGLVersion < 2 || !rtWrapper || !rtWrapper.texture) {\r\n        return 1;\r\n    }\r\n\r\n    if (rtWrapper.samples === samples) {\r\n        return samples;\r\n    }\r\n\r\n    const gl = this._gl;\r\n\r\n    samples = Math.min(samples, this.getCaps().maxMSAASamples);\r\n\r\n    // Dispose previous render buffers\r\n    if (rtWrapper._depthStencilBuffer) {\r\n        gl.deleteRenderbuffer(rtWrapper._depthStencilBuffer);\r\n        rtWrapper._depthStencilBuffer = null;\r\n    }\r\n\r\n    if (rtWrapper._MSAAFramebuffer) {\r\n        gl.deleteFramebuffer(rtWrapper._MSAAFramebuffer);\r\n        rtWrapper._MSAAFramebuffer = null;\r\n    }\r\n\r\n    const hardwareTexture = rtWrapper.texture._hardwareTexture as WebGLHardwareTexture;\r\n    hardwareTexture.releaseMSAARenderBuffers();\r\n\r\n    if (samples > 1 && typeof gl.renderbufferStorageMultisample === \"function\") {\r\n        const framebuffer = gl.createFramebuffer();\r\n\r\n        if (!framebuffer) {\r\n            throw new Error(\"Unable to create multi sampled framebuffer\");\r\n        }\r\n\r\n        rtWrapper._MSAAFramebuffer = framebuffer;\r\n        this._bindUnboundFramebuffer(rtWrapper._MSAAFramebuffer);\r\n\r\n        const colorRenderbuffer = this._createRenderBuffer(\r\n            rtWrapper.texture.width,\r\n            rtWrapper.texture.height,\r\n            samples,\r\n            -1 /* not used */,\r\n            this._getRGBAMultiSampleBufferFormat(rtWrapper.texture.type),\r\n            gl.COLOR_ATTACHMENT0,\r\n            false\r\n        );\r\n\r\n        if (!colorRenderbuffer) {\r\n            throw new Error(\"Unable to create multi sampled framebuffer\");\r\n        }\r\n\r\n        hardwareTexture.addMSAARenderBuffer(colorRenderbuffer);\r\n    } else {\r\n        this._bindUnboundFramebuffer(rtWrapper._framebuffer);\r\n    }\r\n\r\n    rtWrapper.texture.samples = samples;\r\n    rtWrapper._samples = samples;\r\n    rtWrapper._depthStencilBuffer = this._setupFramebufferDepthAttachments(\r\n        rtWrapper._generateStencilBuffer,\r\n        rtWrapper._generateDepthBuffer,\r\n        rtWrapper.texture.width,\r\n        rtWrapper.texture.height,\r\n        samples\r\n    );\r\n\r\n    this._bindUnboundFramebuffer(null);\r\n\r\n    return samples;\r\n};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}