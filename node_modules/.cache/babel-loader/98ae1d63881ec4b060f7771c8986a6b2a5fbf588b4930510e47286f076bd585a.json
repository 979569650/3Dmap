{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { Effect } from \"../Materials/effect.js\";\nimport { CustomParticleEmitter } from \"./EmitterTypes/customParticleEmitter.js\";\nimport { UniformBufferEffectCommonAccessor } from \"../Materials/uniformBufferEffectCommonAccessor.js\";\nimport { RegisterClass } from \"../Misc/typeStore.js\";\nimport \"../Shaders/gpuUpdateParticles.fragment.js\";\nimport \"../Shaders/gpuUpdateParticles.vertex.js\";\n/** @internal */\nexport class WebGL2ParticleSystem {\n  constructor(parent, engine) {\n    this._renderVAO = [];\n    this._updateVAO = [];\n    this.alignDataInBuffer = false;\n    this._parent = parent;\n    this._engine = engine;\n    this._updateEffectOptions = {\n      attributes: [\"position\", \"initialPosition\", \"age\", \"life\", \"seed\", \"size\", \"color\", \"direction\", \"initialDirection\", \"angle\", \"cellIndex\", \"cellStartOffset\", \"noiseCoordinates1\", \"noiseCoordinates2\"],\n      uniformsNames: [\"currentCount\", \"timeDelta\", \"emitterWM\", \"lifeTime\", \"color1\", \"color2\", \"sizeRange\", \"scaleRange\", \"gravity\", \"emitPower\", \"direction1\", \"direction2\", \"minEmitBox\", \"maxEmitBox\", \"radius\", \"directionRandomizer\", \"height\", \"coneAngle\", \"stopFactor\", \"angleRange\", \"radiusRange\", \"cellInfos\", \"noiseStrength\", \"limitVelocityDamping\"],\n      uniformBuffersNames: [],\n      samplers: [\"randomSampler\", \"randomSampler2\", \"sizeGradientSampler\", \"angularSpeedGradientSampler\", \"velocityGradientSampler\", \"limitVelocityGradientSampler\", \"noiseSampler\", \"dragGradientSampler\"],\n      defines: \"\",\n      fallbacks: null,\n      onCompiled: null,\n      onError: null,\n      indexParameters: null,\n      maxSimultaneousLights: 0,\n      transformFeedbackVaryings: []\n    };\n  }\n  contextLost() {\n    this._updateEffect = undefined;\n    this._renderVAO.length = 0;\n    this._updateVAO.length = 0;\n  }\n  isUpdateBufferCreated() {\n    return !!this._updateEffect;\n  }\n  isUpdateBufferReady() {\n    var _a, _b;\n    return (_b = (_a = this._updateEffect) === null || _a === void 0 ? void 0 : _a.isReady()) !== null && _b !== void 0 ? _b : false;\n  }\n  createUpdateBuffer(defines) {\n    this._updateEffectOptions.transformFeedbackVaryings = [\"outPosition\"];\n    this._updateEffectOptions.transformFeedbackVaryings.push(\"outAge\");\n    this._updateEffectOptions.transformFeedbackVaryings.push(\"outSize\");\n    this._updateEffectOptions.transformFeedbackVaryings.push(\"outLife\");\n    this._updateEffectOptions.transformFeedbackVaryings.push(\"outSeed\");\n    this._updateEffectOptions.transformFeedbackVaryings.push(\"outDirection\");\n    if (this._parent.particleEmitterType instanceof CustomParticleEmitter) {\n      this._updateEffectOptions.transformFeedbackVaryings.push(\"outInitialPosition\");\n    }\n    if (!this._parent._colorGradientsTexture) {\n      this._updateEffectOptions.transformFeedbackVaryings.push(\"outColor\");\n    }\n    if (!this._parent._isBillboardBased) {\n      this._updateEffectOptions.transformFeedbackVaryings.push(\"outInitialDirection\");\n    }\n    if (this._parent.noiseTexture) {\n      this._updateEffectOptions.transformFeedbackVaryings.push(\"outNoiseCoordinates1\");\n      this._updateEffectOptions.transformFeedbackVaryings.push(\"outNoiseCoordinates2\");\n    }\n    this._updateEffectOptions.transformFeedbackVaryings.push(\"outAngle\");\n    if (this._parent.isAnimationSheetEnabled) {\n      this._updateEffectOptions.transformFeedbackVaryings.push(\"outCellIndex\");\n      if (this._parent.spriteRandomStartCell) {\n        this._updateEffectOptions.transformFeedbackVaryings.push(\"outCellStartOffset\");\n      }\n    }\n    this._updateEffectOptions.defines = defines;\n    this._updateEffect = new Effect(\"gpuUpdateParticles\", this._updateEffectOptions, this._engine);\n    return new UniformBufferEffectCommonAccessor(this._updateEffect);\n  }\n  createVertexBuffers(updateBuffer, renderVertexBuffers) {\n    this._updateVAO.push(this._createUpdateVAO(updateBuffer));\n    this._renderVAO.push(this._engine.recordVertexArrayObject(renderVertexBuffers, null, this._parent._getWrapper(this._parent.blendMode).effect));\n    this._engine.bindArrayBuffer(null);\n    this._renderVertexBuffers = renderVertexBuffers;\n  }\n  createParticleBuffer(data) {\n    return data;\n  }\n  bindDrawBuffers(index, effect, indexBuffer) {\n    if (indexBuffer) {\n      this._engine.bindBuffers(this._renderVertexBuffers, indexBuffer, effect);\n    } else {\n      this._engine.bindVertexArrayObject(this._renderVAO[index], null);\n    }\n  }\n  preUpdateParticleBuffer() {\n    const engine = this._engine;\n    this._engine.enableEffect(this._updateEffect);\n    if (!engine.setState) {\n      throw new Error(\"GPU particles cannot work without a full Engine. ThinEngine is not supported\");\n    }\n  }\n  updateParticleBuffer(index, targetBuffer, currentActiveCount) {\n    this._updateEffect.setTexture(\"randomSampler\", this._parent._randomTexture);\n    this._updateEffect.setTexture(\"randomSampler2\", this._parent._randomTexture2);\n    if (this._parent._sizeGradientsTexture) {\n      this._updateEffect.setTexture(\"sizeGradientSampler\", this._parent._sizeGradientsTexture);\n    }\n    if (this._parent._angularSpeedGradientsTexture) {\n      this._updateEffect.setTexture(\"angularSpeedGradientSampler\", this._parent._angularSpeedGradientsTexture);\n    }\n    if (this._parent._velocityGradientsTexture) {\n      this._updateEffect.setTexture(\"velocityGradientSampler\", this._parent._velocityGradientsTexture);\n    }\n    if (this._parent._limitVelocityGradientsTexture) {\n      this._updateEffect.setTexture(\"limitVelocityGradientSampler\", this._parent._limitVelocityGradientsTexture);\n    }\n    if (this._parent._dragGradientsTexture) {\n      this._updateEffect.setTexture(\"dragGradientSampler\", this._parent._dragGradientsTexture);\n    }\n    if (this._parent.noiseTexture) {\n      this._updateEffect.setTexture(\"noiseSampler\", this._parent.noiseTexture);\n    }\n    // Bind source VAO\n    this._engine.bindVertexArrayObject(this._updateVAO[index], null);\n    // Update\n    const engine = this._engine;\n    engine.bindTransformFeedbackBuffer(targetBuffer.getBuffer());\n    engine.setRasterizerState(false);\n    engine.beginTransformFeedback(true);\n    engine.drawArraysType(3, 0, currentActiveCount);\n    engine.endTransformFeedback();\n    engine.setRasterizerState(true);\n    engine.bindTransformFeedbackBuffer(null);\n  }\n  releaseBuffers() {}\n  releaseVertexBuffers() {\n    for (let index = 0; index < this._updateVAO.length; index++) {\n      this._engine.releaseVertexArrayObject(this._updateVAO[index]);\n    }\n    this._updateVAO.length = 0;\n    for (let index = 0; index < this._renderVAO.length; index++) {\n      this._engine.releaseVertexArrayObject(this._renderVAO[index]);\n    }\n    this._renderVAO.length = 0;\n  }\n  _createUpdateVAO(source) {\n    const updateVertexBuffers = {};\n    updateVertexBuffers[\"position\"] = source.createVertexBuffer(\"position\", 0, 3);\n    let offset = 3;\n    updateVertexBuffers[\"age\"] = source.createVertexBuffer(\"age\", offset, 1);\n    offset += 1;\n    updateVertexBuffers[\"size\"] = source.createVertexBuffer(\"size\", offset, 3);\n    offset += 3;\n    updateVertexBuffers[\"life\"] = source.createVertexBuffer(\"life\", offset, 1);\n    offset += 1;\n    updateVertexBuffers[\"seed\"] = source.createVertexBuffer(\"seed\", offset, 4);\n    offset += 4;\n    updateVertexBuffers[\"direction\"] = source.createVertexBuffer(\"direction\", offset, 3);\n    offset += 3;\n    if (this._parent.particleEmitterType instanceof CustomParticleEmitter) {\n      updateVertexBuffers[\"initialPosition\"] = source.createVertexBuffer(\"initialPosition\", offset, 3);\n      offset += 3;\n    }\n    if (!this._parent._colorGradientsTexture) {\n      updateVertexBuffers[\"color\"] = source.createVertexBuffer(\"color\", offset, 4);\n      offset += 4;\n    }\n    if (!this._parent._isBillboardBased) {\n      updateVertexBuffers[\"initialDirection\"] = source.createVertexBuffer(\"initialDirection\", offset, 3);\n      offset += 3;\n    }\n    if (this._parent.noiseTexture) {\n      updateVertexBuffers[\"noiseCoordinates1\"] = source.createVertexBuffer(\"noiseCoordinates1\", offset, 3);\n      offset += 3;\n      updateVertexBuffers[\"noiseCoordinates2\"] = source.createVertexBuffer(\"noiseCoordinates2\", offset, 3);\n      offset += 3;\n    }\n    if (this._parent._angularSpeedGradientsTexture) {\n      updateVertexBuffers[\"angle\"] = source.createVertexBuffer(\"angle\", offset, 1);\n      offset += 1;\n    } else {\n      updateVertexBuffers[\"angle\"] = source.createVertexBuffer(\"angle\", offset, 2);\n      offset += 2;\n    }\n    if (this._parent._isAnimationSheetEnabled) {\n      updateVertexBuffers[\"cellIndex\"] = source.createVertexBuffer(\"cellIndex\", offset, 1);\n      offset += 1;\n      if (this._parent.spriteRandomStartCell) {\n        updateVertexBuffers[\"cellStartOffset\"] = source.createVertexBuffer(\"cellStartOffset\", offset, 1);\n        offset += 1;\n      }\n    }\n    const vao = this._engine.recordVertexArrayObject(updateVertexBuffers, null, this._updateEffect);\n    this._engine.bindArrayBuffer(null);\n    return vao;\n  }\n}\nRegisterClass(\"BABYLON.WebGL2ParticleSystem\", WebGL2ParticleSystem);","map":{"version":3,"names":["Effect","CustomParticleEmitter","UniformBufferEffectCommonAccessor","RegisterClass","WebGL2ParticleSystem","constructor","parent","engine","_renderVAO","_updateVAO","alignDataInBuffer","_parent","_engine","_updateEffectOptions","attributes","uniformsNames","uniformBuffersNames","samplers","defines","fallbacks","onCompiled","onError","indexParameters","maxSimultaneousLights","transformFeedbackVaryings","contextLost","_updateEffect","undefined","length","isUpdateBufferCreated","isUpdateBufferReady","_b","_a","isReady","createUpdateBuffer","push","particleEmitterType","_colorGradientsTexture","_isBillboardBased","noiseTexture","isAnimationSheetEnabled","spriteRandomStartCell","createVertexBuffers","updateBuffer","renderVertexBuffers","_createUpdateVAO","recordVertexArrayObject","_getWrapper","blendMode","effect","bindArrayBuffer","_renderVertexBuffers","createParticleBuffer","data","bindDrawBuffers","index","indexBuffer","bindBuffers","bindVertexArrayObject","preUpdateParticleBuffer","enableEffect","setState","Error","updateParticleBuffer","targetBuffer","currentActiveCount","setTexture","_randomTexture","_randomTexture2","_sizeGradientsTexture","_angularSpeedGradientsTexture","_velocityGradientsTexture","_limitVelocityGradientsTexture","_dragGradientsTexture","bindTransformFeedbackBuffer","getBuffer","setRasterizerState","beginTransformFeedback","drawArraysType","endTransformFeedback","releaseBuffers","releaseVertexBuffers","releaseVertexArrayObject","source","updateVertexBuffers","createVertexBuffer","offset","_isAnimationSheetEnabled","vao"],"sources":["../../../../dev/core/src/Particles/webgl2ParticleSystem.ts"],"sourcesContent":["import type { VertexBuffer, Buffer } from \"../Buffers/buffer\";\r\nimport type { ThinEngine } from \"../Engines/thinEngine\";\r\nimport type { IEffectCreationOptions } from \"../Materials/effect\";\r\nimport { Effect } from \"../Materials/effect\";\r\nimport type { IGPUParticleSystemPlatform } from \"./IGPUParticleSystemPlatform\";\r\n\r\nimport { CustomParticleEmitter } from \"./EmitterTypes/customParticleEmitter\";\r\nimport type { GPUParticleSystem } from \"./gpuParticleSystem\";\r\nimport type { DataArray, Nullable } from \"../types\";\r\nimport type { DataBuffer } from \"../Buffers/dataBuffer\";\r\nimport { UniformBufferEffectCommonAccessor } from \"../Materials/uniformBufferEffectCommonAccessor\";\r\nimport { Constants } from \"../Engines/constants\";\r\nimport { RegisterClass } from \"../Misc/typeStore\";\r\n\r\nimport \"../Shaders/gpuUpdateParticles.fragment\";\r\nimport \"../Shaders/gpuUpdateParticles.vertex\";\r\n\r\nimport type { Engine } from \"../Engines/engine\";\r\n\r\n/** @internal */\r\nexport class WebGL2ParticleSystem implements IGPUParticleSystemPlatform {\r\n    private _parent: GPUParticleSystem;\r\n    private _engine: ThinEngine;\r\n    private _updateEffect: Effect;\r\n    private _updateEffectOptions: IEffectCreationOptions;\r\n    private _renderVAO: WebGLVertexArrayObject[] = [];\r\n    private _updateVAO: WebGLVertexArrayObject[] = [];\r\n    private _renderVertexBuffers: { [key: string]: VertexBuffer };\r\n\r\n    public readonly alignDataInBuffer = false;\r\n\r\n    constructor(parent: GPUParticleSystem, engine: ThinEngine) {\r\n        this._parent = parent;\r\n        this._engine = engine;\r\n\r\n        this._updateEffectOptions = {\r\n            attributes: [\r\n                \"position\",\r\n                \"initialPosition\",\r\n                \"age\",\r\n                \"life\",\r\n                \"seed\",\r\n                \"size\",\r\n                \"color\",\r\n                \"direction\",\r\n                \"initialDirection\",\r\n                \"angle\",\r\n                \"cellIndex\",\r\n                \"cellStartOffset\",\r\n                \"noiseCoordinates1\",\r\n                \"noiseCoordinates2\",\r\n            ],\r\n            uniformsNames: [\r\n                \"currentCount\",\r\n                \"timeDelta\",\r\n                \"emitterWM\",\r\n                \"lifeTime\",\r\n                \"color1\",\r\n                \"color2\",\r\n                \"sizeRange\",\r\n                \"scaleRange\",\r\n                \"gravity\",\r\n                \"emitPower\",\r\n                \"direction1\",\r\n                \"direction2\",\r\n                \"minEmitBox\",\r\n                \"maxEmitBox\",\r\n                \"radius\",\r\n                \"directionRandomizer\",\r\n                \"height\",\r\n                \"coneAngle\",\r\n                \"stopFactor\",\r\n                \"angleRange\",\r\n                \"radiusRange\",\r\n                \"cellInfos\",\r\n                \"noiseStrength\",\r\n                \"limitVelocityDamping\",\r\n            ],\r\n            uniformBuffersNames: [],\r\n            samplers: [\r\n                \"randomSampler\",\r\n                \"randomSampler2\",\r\n                \"sizeGradientSampler\",\r\n                \"angularSpeedGradientSampler\",\r\n                \"velocityGradientSampler\",\r\n                \"limitVelocityGradientSampler\",\r\n                \"noiseSampler\",\r\n                \"dragGradientSampler\",\r\n            ],\r\n            defines: \"\",\r\n            fallbacks: null,\r\n            onCompiled: null,\r\n            onError: null,\r\n            indexParameters: null,\r\n            maxSimultaneousLights: 0,\r\n            transformFeedbackVaryings: [],\r\n        };\r\n    }\r\n\r\n    public contextLost(): void {\r\n        this._updateEffect = undefined as any;\r\n        this._renderVAO.length = 0;\r\n        this._updateVAO.length = 0;\r\n    }\r\n\r\n    public isUpdateBufferCreated(): boolean {\r\n        return !!this._updateEffect;\r\n    }\r\n\r\n    public isUpdateBufferReady(): boolean {\r\n        return this._updateEffect?.isReady() ?? false;\r\n    }\r\n\r\n    public createUpdateBuffer(defines: string): UniformBufferEffectCommonAccessor {\r\n        this._updateEffectOptions.transformFeedbackVaryings = [\"outPosition\"];\r\n        this._updateEffectOptions.transformFeedbackVaryings.push(\"outAge\");\r\n        this._updateEffectOptions.transformFeedbackVaryings.push(\"outSize\");\r\n        this._updateEffectOptions.transformFeedbackVaryings.push(\"outLife\");\r\n        this._updateEffectOptions.transformFeedbackVaryings.push(\"outSeed\");\r\n        this._updateEffectOptions.transformFeedbackVaryings.push(\"outDirection\");\r\n\r\n        if (this._parent.particleEmitterType instanceof CustomParticleEmitter) {\r\n            this._updateEffectOptions.transformFeedbackVaryings.push(\"outInitialPosition\");\r\n        }\r\n\r\n        if (!this._parent._colorGradientsTexture) {\r\n            this._updateEffectOptions.transformFeedbackVaryings.push(\"outColor\");\r\n        }\r\n\r\n        if (!this._parent._isBillboardBased) {\r\n            this._updateEffectOptions.transformFeedbackVaryings.push(\"outInitialDirection\");\r\n        }\r\n\r\n        if (this._parent.noiseTexture) {\r\n            this._updateEffectOptions.transformFeedbackVaryings.push(\"outNoiseCoordinates1\");\r\n            this._updateEffectOptions.transformFeedbackVaryings.push(\"outNoiseCoordinates2\");\r\n        }\r\n\r\n        this._updateEffectOptions.transformFeedbackVaryings.push(\"outAngle\");\r\n\r\n        if (this._parent.isAnimationSheetEnabled) {\r\n            this._updateEffectOptions.transformFeedbackVaryings.push(\"outCellIndex\");\r\n            if (this._parent.spriteRandomStartCell) {\r\n                this._updateEffectOptions.transformFeedbackVaryings.push(\"outCellStartOffset\");\r\n            }\r\n        }\r\n\r\n        this._updateEffectOptions.defines = defines;\r\n        this._updateEffect = new Effect(\"gpuUpdateParticles\", this._updateEffectOptions, this._engine);\r\n\r\n        return new UniformBufferEffectCommonAccessor(this._updateEffect);\r\n    }\r\n\r\n    public createVertexBuffers(updateBuffer: Buffer, renderVertexBuffers: { [key: string]: VertexBuffer }): void {\r\n        this._updateVAO.push(this._createUpdateVAO(updateBuffer));\r\n\r\n        this._renderVAO.push(this._engine.recordVertexArrayObject(renderVertexBuffers, null, this._parent._getWrapper(this._parent.blendMode).effect!));\r\n        this._engine.bindArrayBuffer(null);\r\n\r\n        this._renderVertexBuffers = renderVertexBuffers;\r\n    }\r\n\r\n    public createParticleBuffer(data: number[]): DataArray | DataBuffer {\r\n        return data;\r\n    }\r\n\r\n    public bindDrawBuffers(index: number, effect: Effect, indexBuffer: Nullable<DataBuffer>): void {\r\n        if (indexBuffer) {\r\n            this._engine.bindBuffers(this._renderVertexBuffers, indexBuffer, effect);\r\n        } else {\r\n            this._engine.bindVertexArrayObject(this._renderVAO[index], null);\r\n        }\r\n    }\r\n\r\n    public preUpdateParticleBuffer(): void {\r\n        const engine = this._engine as Engine;\r\n\r\n        this._engine.enableEffect(this._updateEffect);\r\n\r\n        if (!engine.setState) {\r\n            throw new Error(\"GPU particles cannot work without a full Engine. ThinEngine is not supported\");\r\n        }\r\n    }\r\n\r\n    public updateParticleBuffer(index: number, targetBuffer: Buffer, currentActiveCount: number): void {\r\n        this._updateEffect.setTexture(\"randomSampler\", this._parent._randomTexture);\r\n        this._updateEffect.setTexture(\"randomSampler2\", this._parent._randomTexture2);\r\n\r\n        if (this._parent._sizeGradientsTexture) {\r\n            this._updateEffect.setTexture(\"sizeGradientSampler\", this._parent._sizeGradientsTexture);\r\n        }\r\n\r\n        if (this._parent._angularSpeedGradientsTexture) {\r\n            this._updateEffect.setTexture(\"angularSpeedGradientSampler\", this._parent._angularSpeedGradientsTexture);\r\n        }\r\n\r\n        if (this._parent._velocityGradientsTexture) {\r\n            this._updateEffect.setTexture(\"velocityGradientSampler\", this._parent._velocityGradientsTexture);\r\n        }\r\n\r\n        if (this._parent._limitVelocityGradientsTexture) {\r\n            this._updateEffect.setTexture(\"limitVelocityGradientSampler\", this._parent._limitVelocityGradientsTexture);\r\n        }\r\n\r\n        if (this._parent._dragGradientsTexture) {\r\n            this._updateEffect.setTexture(\"dragGradientSampler\", this._parent._dragGradientsTexture);\r\n        }\r\n\r\n        if (this._parent.noiseTexture) {\r\n            this._updateEffect.setTexture(\"noiseSampler\", this._parent.noiseTexture);\r\n        }\r\n\r\n        // Bind source VAO\r\n        this._engine.bindVertexArrayObject(this._updateVAO[index], null);\r\n\r\n        // Update\r\n        const engine = this._engine as Engine;\r\n\r\n        engine.bindTransformFeedbackBuffer(targetBuffer.getBuffer());\r\n        engine.setRasterizerState(false);\r\n        engine.beginTransformFeedback(true);\r\n        engine.drawArraysType(Constants.MATERIAL_PointListDrawMode, 0, currentActiveCount);\r\n        engine.endTransformFeedback();\r\n        engine.setRasterizerState(true);\r\n        engine.bindTransformFeedbackBuffer(null);\r\n    }\r\n\r\n    public releaseBuffers(): void {}\r\n\r\n    public releaseVertexBuffers(): void {\r\n        for (let index = 0; index < this._updateVAO.length; index++) {\r\n            this._engine.releaseVertexArrayObject(this._updateVAO[index]);\r\n        }\r\n        this._updateVAO.length = 0;\r\n\r\n        for (let index = 0; index < this._renderVAO.length; index++) {\r\n            this._engine.releaseVertexArrayObject(this._renderVAO[index]);\r\n        }\r\n        this._renderVAO.length = 0;\r\n    }\r\n\r\n    private _createUpdateVAO(source: Buffer): WebGLVertexArrayObject {\r\n        const updateVertexBuffers: { [key: string]: VertexBuffer } = {};\r\n        updateVertexBuffers[\"position\"] = source.createVertexBuffer(\"position\", 0, 3);\r\n\r\n        let offset = 3;\r\n        updateVertexBuffers[\"age\"] = source.createVertexBuffer(\"age\", offset, 1);\r\n        offset += 1;\r\n        updateVertexBuffers[\"size\"] = source.createVertexBuffer(\"size\", offset, 3);\r\n        offset += 3;\r\n        updateVertexBuffers[\"life\"] = source.createVertexBuffer(\"life\", offset, 1);\r\n        offset += 1;\r\n        updateVertexBuffers[\"seed\"] = source.createVertexBuffer(\"seed\", offset, 4);\r\n        offset += 4;\r\n        updateVertexBuffers[\"direction\"] = source.createVertexBuffer(\"direction\", offset, 3);\r\n        offset += 3;\r\n\r\n        if (this._parent.particleEmitterType instanceof CustomParticleEmitter) {\r\n            updateVertexBuffers[\"initialPosition\"] = source.createVertexBuffer(\"initialPosition\", offset, 3);\r\n            offset += 3;\r\n        }\r\n\r\n        if (!this._parent._colorGradientsTexture) {\r\n            updateVertexBuffers[\"color\"] = source.createVertexBuffer(\"color\", offset, 4);\r\n            offset += 4;\r\n        }\r\n\r\n        if (!this._parent._isBillboardBased) {\r\n            updateVertexBuffers[\"initialDirection\"] = source.createVertexBuffer(\"initialDirection\", offset, 3);\r\n            offset += 3;\r\n        }\r\n\r\n        if (this._parent.noiseTexture) {\r\n            updateVertexBuffers[\"noiseCoordinates1\"] = source.createVertexBuffer(\"noiseCoordinates1\", offset, 3);\r\n            offset += 3;\r\n            updateVertexBuffers[\"noiseCoordinates2\"] = source.createVertexBuffer(\"noiseCoordinates2\", offset, 3);\r\n            offset += 3;\r\n        }\r\n\r\n        if (this._parent._angularSpeedGradientsTexture) {\r\n            updateVertexBuffers[\"angle\"] = source.createVertexBuffer(\"angle\", offset, 1);\r\n            offset += 1;\r\n        } else {\r\n            updateVertexBuffers[\"angle\"] = source.createVertexBuffer(\"angle\", offset, 2);\r\n            offset += 2;\r\n        }\r\n\r\n        if (this._parent._isAnimationSheetEnabled) {\r\n            updateVertexBuffers[\"cellIndex\"] = source.createVertexBuffer(\"cellIndex\", offset, 1);\r\n            offset += 1;\r\n            if (this._parent.spriteRandomStartCell) {\r\n                updateVertexBuffers[\"cellStartOffset\"] = source.createVertexBuffer(\"cellStartOffset\", offset, 1);\r\n                offset += 1;\r\n            }\r\n        }\r\n\r\n        const vao = this._engine.recordVertexArrayObject(updateVertexBuffers, null, this._updateEffect);\r\n        this._engine.bindArrayBuffer(null);\r\n\r\n        return vao;\r\n    }\r\n}\r\n\r\nRegisterClass(\"BABYLON.WebGL2ParticleSystem\", WebGL2ParticleSystem);\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}