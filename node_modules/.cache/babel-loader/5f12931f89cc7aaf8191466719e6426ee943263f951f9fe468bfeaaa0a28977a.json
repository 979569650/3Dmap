{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { __decorate } from \"../../../tslib.es6.js\";\nimport { NodeGeometryBlock } from \"../nodeGeometryBlock.js\";\nimport { RegisterClass } from \"../../../Misc/typeStore.js\";\nimport { NodeGeometryBlockConnectionPointTypes } from \"../Enums/nodeGeometryConnectionPointTypes.js\";\nimport { Matrix, Vector2, Vector3, Vector4 } from \"../../../Maths/math.vector.js\";\nimport { PropertyTypeForEdition, editableInPropertyPage } from \"../../../Decorators/nodeDecorator.js\";\n/**\n * Block used to apply a transform to a vector / geometry\n */\nexport class GeometryTransformBlock extends NodeGeometryBlock {\n  /**\n   * Create a new GeometryTransformBlock\n   * @param name defines the block name\n   */\n  constructor(name) {\n    super(name);\n    this._rotationMatrix = new Matrix();\n    this._scalingMatrix = new Matrix();\n    this._translationMatrix = new Matrix();\n    this._scalingRotationMatrix = new Matrix();\n    this._transformMatrix = new Matrix();\n    /**\n     * Gets or sets a boolean indicating that this block can evaluate context\n     * Build performance is improved when this value is set to false as the system will cache values instead of reevaluating everything per context change\n     */\n    this.evaluateContext = true;\n    this.registerInput(\"value\", NodeGeometryBlockConnectionPointTypes.AutoDetect);\n    this.registerInput(\"matrix\", NodeGeometryBlockConnectionPointTypes.Matrix, true);\n    this.registerInput(\"translation\", NodeGeometryBlockConnectionPointTypes.Vector3, true, Vector3.Zero());\n    this.registerInput(\"rotation\", NodeGeometryBlockConnectionPointTypes.Vector3, true, Vector3.Zero());\n    this.registerInput(\"scaling\", NodeGeometryBlockConnectionPointTypes.Vector3, true, Vector3.One());\n    this.registerOutput(\"output\", NodeGeometryBlockConnectionPointTypes.BasedOnInput);\n    this._outputs[0]._typeConnectionSource = this._inputs[0];\n    this._inputs[0].excludedConnectionPointTypes.push(NodeGeometryBlockConnectionPointTypes.Float);\n    this._inputs[0].excludedConnectionPointTypes.push(NodeGeometryBlockConnectionPointTypes.Matrix);\n    this._inputs[0].excludedConnectionPointTypes.push(NodeGeometryBlockConnectionPointTypes.Texture);\n  }\n  /**\n   * Gets the current class name\n   * @returns the class name\n   */\n  getClassName() {\n    return \"GeometryTransformBlock\";\n  }\n  /**\n   * Gets the value input component\n   */\n  get value() {\n    return this._inputs[0];\n  }\n  /**\n   * Gets the matrix input component\n   */\n  get matrix() {\n    return this._inputs[1];\n  }\n  /**\n   * Gets the translation input component\n   */\n  get translation() {\n    return this._inputs[2];\n  }\n  /**\n   * Gets the rotation input component\n   */\n  get rotation() {\n    return this._inputs[3];\n  }\n  /**\n   * Gets the scaling input component\n   */\n  get scaling() {\n    return this._inputs[4];\n  }\n  /**\n   * Gets the output component\n   */\n  get output() {\n    return this._outputs[0];\n  }\n  _buildBlock(state) {\n    if (!this.value.isConnected) {\n      this.output._storedFunction = null;\n      this.output._storedValue = null;\n      return;\n    }\n    const func = state => {\n      const value = this.value.getConnectedValue(state);\n      if (!value) {\n        return null;\n      }\n      let matrix;\n      if (this.matrix.isConnected) {\n        matrix = this.matrix.getConnectedValue(state);\n      } else {\n        const scaling = this.scaling.getConnectedValue(state);\n        const rotation = this.rotation.getConnectedValue(state);\n        const translation = this.translation.getConnectedValue(state);\n        // Transform\n        Matrix.ScalingToRef(scaling.x, scaling.y, scaling.z, this._scalingMatrix);\n        Matrix.RotationYawPitchRollToRef(rotation.y, rotation.x, rotation.z, this._rotationMatrix);\n        Matrix.TranslationToRef(translation.x, translation.y, translation.z, this._translationMatrix);\n        this._scalingMatrix.multiplyToRef(this._rotationMatrix, this._scalingRotationMatrix);\n        this._scalingRotationMatrix.multiplyToRef(this._translationMatrix, this._transformMatrix);\n        matrix = this._transformMatrix;\n      }\n      switch (this.value.type) {\n        case NodeGeometryBlockConnectionPointTypes.Geometry:\n          {\n            const geometry = value.clone();\n            geometry.transform(matrix);\n            return geometry;\n          }\n        case NodeGeometryBlockConnectionPointTypes.Vector2:\n          return Vector2.Transform(value, matrix);\n        case NodeGeometryBlockConnectionPointTypes.Vector3:\n          return Vector3.TransformCoordinates(value, matrix);\n        case NodeGeometryBlockConnectionPointTypes.Vector4:\n          return Vector4.TransformCoordinates(value, matrix);\n      }\n      return null;\n    };\n    if (this.evaluateContext) {\n      this.output._storedFunction = func;\n    } else {\n      this.output._storedFunction = null;\n      this.output._storedValue = func(state);\n    }\n  }\n  _dumpPropertiesCode() {\n    const codeString = super._dumpPropertiesCode() + `${this._codeVariableName}.evaluateContext = ${this.evaluateContext ? \"true\" : \"false\"};\\n`;\n    return codeString;\n  }\n  /**\n   * Serializes this block in a JSON representation\n   * @returns the serialized block object\n   */\n  serialize() {\n    const serializationObject = super.serialize();\n    serializationObject.evaluateContext = this.evaluateContext;\n    return serializationObject;\n  }\n  _deserialize(serializationObject) {\n    super._deserialize(serializationObject);\n    if (serializationObject.evaluateContext !== undefined) {\n      this.evaluateContext = serializationObject.evaluateContext;\n    }\n  }\n}\n__decorate([editableInPropertyPage(\"Evaluate context\", PropertyTypeForEdition.Boolean, \"ADVANCED\", {\n  notifiers: {\n    rebuild: true\n  }\n})], GeometryTransformBlock.prototype, \"evaluateContext\", void 0);\nRegisterClass(\"BABYLON.GeometryTransformBlock\", GeometryTransformBlock);","map":{"version":3,"names":["NodeGeometryBlock","RegisterClass","NodeGeometryBlockConnectionPointTypes","Matrix","Vector2","Vector3","Vector4","PropertyTypeForEdition","editableInPropertyPage","GeometryTransformBlock","constructor","name","_rotationMatrix","_scalingMatrix","_translationMatrix","_scalingRotationMatrix","_transformMatrix","evaluateContext","registerInput","AutoDetect","Zero","One","registerOutput","BasedOnInput","_outputs","_typeConnectionSource","_inputs","excludedConnectionPointTypes","push","Float","Texture","getClassName","value","matrix","translation","rotation","scaling","output","_buildBlock","state","isConnected","_storedFunction","_storedValue","func","getConnectedValue","ScalingToRef","x","y","z","RotationYawPitchRollToRef","TranslationToRef","multiplyToRef","type","Geometry","geometry","clone","transform","Transform","TransformCoordinates","_dumpPropertiesCode","codeString","_codeVariableName","serialize","serializationObject","_deserialize","undefined","__decorate","Boolean","notifiers","rebuild"],"sources":["../../../../../../dev/core/src/Meshes/Node/Blocks/geometryTransformBlock.ts"],"sourcesContent":["import { NodeGeometryBlock } from \"../nodeGeometryBlock\";\r\nimport type { NodeGeometryConnectionPoint } from \"../nodeGeometryBlockConnectionPoint\";\r\nimport { RegisterClass } from \"../../../Misc/typeStore\";\r\nimport { NodeGeometryBlockConnectionPointTypes } from \"../Enums/nodeGeometryConnectionPointTypes\";\r\nimport { Matrix, Vector2, Vector3, Vector4 } from \"../../../Maths/math.vector\";\r\nimport type { VertexData } from \"../../../Meshes/mesh.vertexData\";\r\nimport { PropertyTypeForEdition, editableInPropertyPage } from \"../../../Decorators/nodeDecorator\";\r\nimport type { NodeGeometryBuildState } from \"../nodeGeometryBuildState\";\r\n\r\n/**\r\n * Block used to apply a transform to a vector / geometry\r\n */\r\nexport class GeometryTransformBlock extends NodeGeometryBlock {\r\n    private _rotationMatrix = new Matrix();\r\n    private _scalingMatrix = new Matrix();\r\n    private _translationMatrix = new Matrix();\r\n    private _scalingRotationMatrix = new Matrix();\r\n    private _transformMatrix = new Matrix();\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating that this block can evaluate context\r\n     * Build performance is improved when this value is set to false as the system will cache values instead of reevaluating everything per context change\r\n     */\r\n    @editableInPropertyPage(\"Evaluate context\", PropertyTypeForEdition.Boolean, \"ADVANCED\", { notifiers: { rebuild: true } })\r\n    public evaluateContext = true;\r\n\r\n    /**\r\n     * Create a new GeometryTransformBlock\r\n     * @param name defines the block name\r\n     */\r\n    public constructor(name: string) {\r\n        super(name);\r\n\r\n        this.registerInput(\"value\", NodeGeometryBlockConnectionPointTypes.AutoDetect);\r\n        this.registerInput(\"matrix\", NodeGeometryBlockConnectionPointTypes.Matrix, true);\r\n        this.registerInput(\"translation\", NodeGeometryBlockConnectionPointTypes.Vector3, true, Vector3.Zero());\r\n        this.registerInput(\"rotation\", NodeGeometryBlockConnectionPointTypes.Vector3, true, Vector3.Zero());\r\n        this.registerInput(\"scaling\", NodeGeometryBlockConnectionPointTypes.Vector3, true, Vector3.One());\r\n\r\n        this.registerOutput(\"output\", NodeGeometryBlockConnectionPointTypes.BasedOnInput);\r\n\r\n        this._outputs[0]._typeConnectionSource = this._inputs[0];\r\n        this._inputs[0].excludedConnectionPointTypes.push(NodeGeometryBlockConnectionPointTypes.Float);\r\n        this._inputs[0].excludedConnectionPointTypes.push(NodeGeometryBlockConnectionPointTypes.Matrix);\r\n        this._inputs[0].excludedConnectionPointTypes.push(NodeGeometryBlockConnectionPointTypes.Texture);\r\n    }\r\n\r\n    /**\r\n     * Gets the current class name\r\n     * @returns the class name\r\n     */\r\n    public getClassName() {\r\n        return \"GeometryTransformBlock\";\r\n    }\r\n\r\n    /**\r\n     * Gets the value input component\r\n     */\r\n    public get value(): NodeGeometryConnectionPoint {\r\n        return this._inputs[0];\r\n    }\r\n\r\n    /**\r\n     * Gets the matrix input component\r\n     */\r\n    public get matrix(): NodeGeometryConnectionPoint {\r\n        return this._inputs[1];\r\n    }\r\n\r\n    /**\r\n     * Gets the translation input component\r\n     */\r\n    public get translation(): NodeGeometryConnectionPoint {\r\n        return this._inputs[2];\r\n    }\r\n\r\n    /**\r\n     * Gets the rotation input component\r\n     */\r\n    public get rotation(): NodeGeometryConnectionPoint {\r\n        return this._inputs[3];\r\n    }\r\n\r\n    /**\r\n     * Gets the scaling input component\r\n     */\r\n    public get scaling(): NodeGeometryConnectionPoint {\r\n        return this._inputs[4];\r\n    }\r\n\r\n    /**\r\n     * Gets the output component\r\n     */\r\n    public get output(): NodeGeometryConnectionPoint {\r\n        return this._outputs[0];\r\n    }\r\n\r\n    protected _buildBlock(state: NodeGeometryBuildState) {\r\n        if (!this.value.isConnected) {\r\n            this.output._storedFunction = null;\r\n            this.output._storedValue = null;\r\n            return;\r\n        }\r\n\r\n        const func = (state: NodeGeometryBuildState) => {\r\n            const value = this.value.getConnectedValue(state);\r\n\r\n            if (!value) {\r\n                return null;\r\n            }\r\n\r\n            let matrix: Matrix;\r\n\r\n            if (this.matrix.isConnected) {\r\n                matrix = this.matrix.getConnectedValue(state);\r\n            } else {\r\n                const scaling = this.scaling.getConnectedValue(state);\r\n                const rotation = this.rotation.getConnectedValue(state);\r\n                const translation = this.translation.getConnectedValue(state);\r\n\r\n                // Transform\r\n                Matrix.ScalingToRef(scaling.x, scaling.y, scaling.z, this._scalingMatrix);\r\n                Matrix.RotationYawPitchRollToRef(rotation.y, rotation.x, rotation.z, this._rotationMatrix);\r\n                Matrix.TranslationToRef(translation.x, translation.y, translation.z, this._translationMatrix);\r\n\r\n                this._scalingMatrix.multiplyToRef(this._rotationMatrix, this._scalingRotationMatrix);\r\n                this._scalingRotationMatrix.multiplyToRef(this._translationMatrix, this._transformMatrix);\r\n                matrix = this._transformMatrix;\r\n            }\r\n\r\n            switch (this.value.type) {\r\n                case NodeGeometryBlockConnectionPointTypes.Geometry: {\r\n                    const geometry = (value as VertexData).clone();\r\n                    geometry.transform(matrix);\r\n                    return geometry;\r\n                }\r\n                case NodeGeometryBlockConnectionPointTypes.Vector2:\r\n                    return Vector2.Transform(value, matrix);\r\n                case NodeGeometryBlockConnectionPointTypes.Vector3:\r\n                    return Vector3.TransformCoordinates(value, matrix);\r\n                case NodeGeometryBlockConnectionPointTypes.Vector4:\r\n                    return Vector4.TransformCoordinates(value, matrix);\r\n            }\r\n\r\n            return null;\r\n        };\r\n\r\n        if (this.evaluateContext) {\r\n            this.output._storedFunction = func;\r\n        } else {\r\n            this.output._storedFunction = null;\r\n            this.output._storedValue = func(state);\r\n        }\r\n    }\r\n\r\n    protected _dumpPropertiesCode() {\r\n        const codeString = super._dumpPropertiesCode() + `${this._codeVariableName}.evaluateContext = ${this.evaluateContext ? \"true\" : \"false\"};\\n`;\r\n        return codeString;\r\n    }\r\n\r\n    /**\r\n     * Serializes this block in a JSON representation\r\n     * @returns the serialized block object\r\n     */\r\n    public serialize(): any {\r\n        const serializationObject = super.serialize();\r\n\r\n        serializationObject.evaluateContext = this.evaluateContext;\r\n\r\n        return serializationObject;\r\n    }\r\n\r\n    public _deserialize(serializationObject: any) {\r\n        super._deserialize(serializationObject);\r\n\r\n        if (serializationObject.evaluateContext !== undefined) {\r\n            this.evaluateContext = serializationObject.evaluateContext;\r\n        }\r\n    }\r\n}\r\n\r\nRegisterClass(\"BABYLON.GeometryTransformBlock\", GeometryTransformBlock);\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}