{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { RegisterClass } from \"../../../Misc/typeStore.js\";\nimport { NodeGeometryBlockConnectionPointTypes } from \"../Enums/nodeGeometryConnectionPointTypes.js\";\nimport { NodeGeometryBlock } from \"../nodeGeometryBlock.js\";\n/**\n * Defines a block used to debug values going through it\n */\nexport class DebugBlock extends NodeGeometryBlock {\n  /**\n   * Create a new DebugBlock\n   * @param name defines the block name\n   */\n  constructor(name) {\n    super(name);\n    /**\n     * Gets the log entries\n     */\n    this.log = [];\n    this._isDebug = true;\n    this.registerInput(\"input\", NodeGeometryBlockConnectionPointTypes.AutoDetect);\n    this.registerOutput(\"output\", NodeGeometryBlockConnectionPointTypes.BasedOnInput);\n    this._outputs[0]._typeConnectionSource = this._inputs[0];\n    this._inputs[0].excludedConnectionPointTypes.push(NodeGeometryBlockConnectionPointTypes.Geometry);\n    this._inputs[0].excludedConnectionPointTypes.push(NodeGeometryBlockConnectionPointTypes.Texture);\n  }\n  /**\n   * Gets the time spent to build this block (in ms)\n   */\n  get buildExecutionTime() {\n    return 0;\n  }\n  /**\n   * Gets the current class name\n   * @returns the class name\n   */\n  getClassName() {\n    return \"DebugBlock\";\n  }\n  /**\n   * Gets the input component\n   */\n  get input() {\n    return this._inputs[0];\n  }\n  /**\n   * Gets the output component\n   */\n  get output() {\n    return this._outputs[0];\n  }\n  _buildBlock(state) {\n    if (!this.input.isConnected) {\n      this.output._storedFunction = null;\n      this.output._storedValue = null;\n      return;\n    }\n    this.log = [];\n    const func = state => {\n      const input = this.input.getConnectedValue(state);\n      if (input === null || input === undefined) {\n        this.log.push(\"null\");\n        return input;\n      }\n      this.log.push(input.toString());\n      return input;\n    };\n    if (this.output.isConnected) {\n      this.output._storedFunction = func;\n    } else {\n      this.output._storedValue = func(state);\n    }\n  }\n}\nRegisterClass(\"BABYLON.DebugBlock\", DebugBlock);","map":{"version":3,"names":["RegisterClass","NodeGeometryBlockConnectionPointTypes","NodeGeometryBlock","DebugBlock","constructor","name","log","_isDebug","registerInput","AutoDetect","registerOutput","BasedOnInput","_outputs","_typeConnectionSource","_inputs","excludedConnectionPointTypes","push","Geometry","Texture","buildExecutionTime","getClassName","input","output","_buildBlock","state","isConnected","_storedFunction","_storedValue","func","getConnectedValue","undefined","toString"],"sources":["../../../../../../dev/core/src/Meshes/Node/Blocks/debugBlock.ts"],"sourcesContent":["import { RegisterClass } from \"../../../Misc/typeStore\";\r\nimport { NodeGeometryBlockConnectionPointTypes } from \"../Enums/nodeGeometryConnectionPointTypes\";\r\nimport { NodeGeometryBlock } from \"../nodeGeometryBlock\";\r\nimport type { NodeGeometryConnectionPoint } from \"../nodeGeometryBlockConnectionPoint\";\r\nimport type { NodeGeometryBuildState } from \"../nodeGeometryBuildState\";\r\n\r\n/**\r\n * Defines a block used to debug values going through it\r\n */\r\nexport class DebugBlock extends NodeGeometryBlock {\r\n    /**\r\n     * Gets the log entries\r\n     */\r\n    public log: string[] = [];\r\n\r\n    /**\r\n     * Create a new DebugBlock\r\n     * @param name defines the block name\r\n     */\r\n    public constructor(name: string) {\r\n        super(name);\r\n\r\n        this._isDebug = true;\r\n\r\n        this.registerInput(\"input\", NodeGeometryBlockConnectionPointTypes.AutoDetect);\r\n        this.registerOutput(\"output\", NodeGeometryBlockConnectionPointTypes.BasedOnInput);\r\n\r\n        this._outputs[0]._typeConnectionSource = this._inputs[0];\r\n        this._inputs[0].excludedConnectionPointTypes.push(NodeGeometryBlockConnectionPointTypes.Geometry);\r\n        this._inputs[0].excludedConnectionPointTypes.push(NodeGeometryBlockConnectionPointTypes.Texture);\r\n    }\r\n\r\n    /**\r\n     * Gets the time spent to build this block (in ms)\r\n     */\r\n    public get buildExecutionTime() {\r\n        return 0;\r\n    }\r\n\r\n    /**\r\n     * Gets the current class name\r\n     * @returns the class name\r\n     */\r\n    public getClassName() {\r\n        return \"DebugBlock\";\r\n    }\r\n\r\n    /**\r\n     * Gets the input component\r\n     */\r\n    public get input(): NodeGeometryConnectionPoint {\r\n        return this._inputs[0];\r\n    }\r\n\r\n    /**\r\n     * Gets the output component\r\n     */\r\n    public get output(): NodeGeometryConnectionPoint {\r\n        return this._outputs[0];\r\n    }\r\n\r\n    protected _buildBlock(state: NodeGeometryBuildState) {\r\n        if (!this.input.isConnected) {\r\n            this.output._storedFunction = null;\r\n            this.output._storedValue = null;\r\n            return;\r\n        }\r\n\r\n        this.log = [];\r\n        const func = (state: NodeGeometryBuildState) => {\r\n            const input = this.input.getConnectedValue(state);\r\n\r\n            if (input === null || input === undefined) {\r\n                this.log.push(\"null\");\r\n                return input;\r\n            }\r\n\r\n            this.log.push(input.toString());\r\n\r\n            return input;\r\n        };\r\n\r\n        if (this.output.isConnected) {\r\n            this.output._storedFunction = func;\r\n        } else {\r\n            this.output._storedValue = func(state);\r\n        }\r\n    }\r\n}\r\n\r\nRegisterClass(\"BABYLON.DebugBlock\", DebugBlock);\r\n"],"mappings":";AAAA,SAASA,aAAa,QAAQ,4BAA0B;AACxD,SAASC,qCAAqC,QAAQ,8CAA4C;AAClG,SAASC,iBAAiB,QAAQ,yBAAuB;AAIzD;;;AAGA,OAAM,MAAOC,UAAW,SAAQD,iBAAiB;EAM7C;;;;EAIAE,YAAmBC,IAAY;IAC3B,KAAK,CAACA,IAAI,CAAC;IAVf;;;IAGO,KAAAC,GAAG,GAAa,EAAE;IASrB,IAAI,CAACC,QAAQ,GAAG,IAAI;IAEpB,IAAI,CAACC,aAAa,CAAC,OAAO,EAAEP,qCAAqC,CAACQ,UAAU,CAAC;IAC7E,IAAI,CAACC,cAAc,CAAC,QAAQ,EAAET,qCAAqC,CAACU,YAAY,CAAC;IAEjF,IAAI,CAACC,QAAQ,CAAC,CAAC,CAAC,CAACC,qBAAqB,GAAG,IAAI,CAACC,OAAO,CAAC,CAAC,CAAC;IACxD,IAAI,CAACA,OAAO,CAAC,CAAC,CAAC,CAACC,4BAA4B,CAACC,IAAI,CAACf,qCAAqC,CAACgB,QAAQ,CAAC;IACjG,IAAI,CAACH,OAAO,CAAC,CAAC,CAAC,CAACC,4BAA4B,CAACC,IAAI,CAACf,qCAAqC,CAACiB,OAAO,CAAC;EACpG;EAEA;;;EAGA,IAAWC,kBAAkBA,CAAA;IACzB,OAAO,CAAC;EACZ;EAEA;;;;EAIOC,YAAYA,CAAA;IACf,OAAO,YAAY;EACvB;EAEA;;;EAGA,IAAWC,KAAKA,CAAA;IACZ,OAAO,IAAI,CAACP,OAAO,CAAC,CAAC,CAAC;EAC1B;EAEA;;;EAGA,IAAWQ,MAAMA,CAAA;IACb,OAAO,IAAI,CAACV,QAAQ,CAAC,CAAC,CAAC;EAC3B;EAEUW,WAAWA,CAACC,KAA6B;IAC/C,IAAI,CAAC,IAAI,CAACH,KAAK,CAACI,WAAW,EAAE;MACzB,IAAI,CAACH,MAAM,CAACI,eAAe,GAAG,IAAI;MAClC,IAAI,CAACJ,MAAM,CAACK,YAAY,GAAG,IAAI;MAC/B;;IAGJ,IAAI,CAACrB,GAAG,GAAG,EAAE;IACb,MAAMsB,IAAI,GAAIJ,KAA6B,IAAI;MAC3C,MAAMH,KAAK,GAAG,IAAI,CAACA,KAAK,CAACQ,iBAAiB,CAACL,KAAK,CAAC;MAEjD,IAAIH,KAAK,KAAK,IAAI,IAAIA,KAAK,KAAKS,SAAS,EAAE;QACvC,IAAI,CAACxB,GAAG,CAACU,IAAI,CAAC,MAAM,CAAC;QACrB,OAAOK,KAAK;;MAGhB,IAAI,CAACf,GAAG,CAACU,IAAI,CAACK,KAAK,CAACU,QAAQ,EAAE,CAAC;MAE/B,OAAOV,KAAK;IAChB,CAAC;IAED,IAAI,IAAI,CAACC,MAAM,CAACG,WAAW,EAAE;MACzB,IAAI,CAACH,MAAM,CAACI,eAAe,GAAGE,IAAI;KACrC,MAAM;MACH,IAAI,CAACN,MAAM,CAACK,YAAY,GAAGC,IAAI,CAACJ,KAAK,CAAC;;EAE9C;;AAGJxB,aAAa,CAAC,oBAAoB,EAAEG,UAAU,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}