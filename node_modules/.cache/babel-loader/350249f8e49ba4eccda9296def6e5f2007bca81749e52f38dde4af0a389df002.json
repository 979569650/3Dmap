{"ast":null,"code":"import { Observable } from \"@babylonjs/core/Misc/observable.js\";\nimport { Rectangle } from \"./rectangle.js\";\nimport { RegisterClass } from \"@babylonjs/core/Misc/typeStore.js\";\n/**\n * Class used to create toggle buttons\n * @since 5.0.0\n */\nexport class ToggleButton extends Rectangle {\n  /** Gets or sets group name this toggle button belongs to */\n  get group() {\n    return this._group;\n  }\n  set group(value) {\n    if (this._group === value) {\n      return;\n    }\n    this._group = value;\n  }\n  /** Gets or sets a boolean indicating if the toggle button is active or not */\n  get isActive() {\n    return this._isActive;\n  }\n  set isActive(value) {\n    var _a, _b;\n    // Function modeled after radioButton.ts\n    if (this._isActive === value) {\n      return;\n    }\n    this._isActive = value;\n    // Update the visual state based on the new value\n    if (this._isActive) {\n      (_a = this.toActiveAnimation) === null || _a === void 0 ? void 0 : _a.call(this);\n    } else {\n      (_b = this.toInactiveAnimation) === null || _b === void 0 ? void 0 : _b.call(this);\n    }\n    this._markAsDirty();\n    this.onIsActiveChangedObservable.notifyObservers(value);\n    if (this._isActive && this._host && this._group) {\n      // A toggle button in a group can only have 1 active element at a given time.\n      // If this toggle button has a group, set other toggle buttons in the group to inactive.\n      this._host.executeOnAllControls(control => {\n        // Check for control type ToggleButton\n        if (control.typeName === \"ToggleButton\") {\n          // Don't do anything to this toggle button\n          if (control === this) {\n            return;\n          }\n          const childToggle = control;\n          // If toggle button is in same group, set isActive to false\n          if (childToggle.group === this.group) {\n            childToggle.isActive = false;\n          }\n        }\n      });\n    }\n  }\n  /**\n   * Creates a new ToggleButton\n   * @param name defines the control name\n   * @param group defines the toggle group this toggle belongs to\n   */\n  constructor(name, group) {\n    super(name);\n    this.name = name;\n    /** Observable raised when isActive is changed */\n    this.onIsActiveChangedObservable = new Observable();\n    /**\n     * Gets or sets a boolean indicating that the toggle button will let internal controls handle picking instead of doing it directly using its bounding info\n     */\n    this.delegatePickingToChildren = false;\n    this._isActive = false;\n    this.group = group !== null && group !== void 0 ? group : \"\";\n    this.thickness = 0;\n    this.isPointerBlocker = true;\n    let alphaStore = null;\n    this.toActiveAnimation = () => {\n      this.thickness = 1;\n    };\n    this.toInactiveAnimation = () => {\n      this.thickness = 0;\n    };\n    this.pointerEnterActiveAnimation = () => {\n      alphaStore = this.alpha;\n      this.alpha -= 0.1;\n    };\n    this.pointerOutActiveAnimation = () => {\n      if (alphaStore !== null) {\n        this.alpha = alphaStore;\n      }\n    };\n    this.pointerDownActiveAnimation = () => {\n      this.scaleX -= 0.05;\n      this.scaleY -= 0.05;\n    };\n    this.pointerUpActiveAnimation = () => {\n      this.scaleX += 0.05;\n      this.scaleY += 0.05;\n    };\n    this.pointerEnterInactiveAnimation = () => {\n      alphaStore = this.alpha;\n      this.alpha -= 0.1;\n    };\n    this.pointerOutInactiveAnimation = () => {\n      if (alphaStore !== null) {\n        this.alpha = alphaStore;\n      }\n    };\n    this.pointerDownInactiveAnimation = () => {\n      this.scaleX -= 0.05;\n      this.scaleY -= 0.05;\n    };\n    this.pointerUpInactiveAnimation = () => {\n      this.scaleX += 0.05;\n      this.scaleY += 0.05;\n    };\n  }\n  _getTypeName() {\n    return \"ToggleButton\";\n  }\n  // While being a container, the toggle button behaves like a control.\n  /**\n   * @internal\n   */\n  _processPicking(x, y, pi, type, pointerId, buttonIndex, deltaX, deltaY) {\n    if (!this._isEnabled || !this.isHitTestVisible || !this.isVisible || this.notRenderable) {\n      return false;\n    }\n    if (!super.contains(x, y)) {\n      return false;\n    }\n    if (this.delegatePickingToChildren) {\n      let contains = false;\n      for (let index = this._children.length - 1; index >= 0; index--) {\n        const child = this._children[index];\n        if (child.isEnabled && child.isHitTestVisible && child.isVisible && !child.notRenderable && child.contains(x, y)) {\n          contains = true;\n          break;\n        }\n      }\n      if (!contains) {\n        return false;\n      }\n    }\n    this._processObservables(type, x, y, pi, pointerId, buttonIndex, deltaX, deltaY);\n    return true;\n  }\n  /**\n   * @internal\n   */\n  _onPointerEnter(target, pi) {\n    if (!super._onPointerEnter(target, pi)) {\n      return false;\n    }\n    if (this.isReadOnly) {\n      return true;\n    }\n    if (this._isActive) {\n      if (this.pointerEnterActiveAnimation) {\n        this.pointerEnterActiveAnimation();\n      }\n    } else {\n      if (this.pointerEnterInactiveAnimation) {\n        this.pointerEnterInactiveAnimation();\n      }\n    }\n    return true;\n  }\n  /**\n   * @internal\n   */\n  _onPointerOut(target, pi, force = false) {\n    if (!this.isReadOnly) {\n      if (this._isActive) {\n        if (this.pointerOutActiveAnimation) {\n          this.pointerOutActiveAnimation();\n        }\n      } else {\n        if (this.pointerOutInactiveAnimation) {\n          this.pointerOutInactiveAnimation();\n        }\n      }\n    }\n    super._onPointerOut(target, pi, force);\n  }\n  /**\n   * @internal\n   */\n  _onPointerDown(target, coordinates, pointerId, buttonIndex, pi) {\n    if (!super._onPointerDown(target, coordinates, pointerId, buttonIndex, pi)) {\n      return false;\n    }\n    if (this.isReadOnly) {\n      return true;\n    }\n    if (this._isActive) {\n      if (this.pointerDownActiveAnimation) {\n        this.pointerDownActiveAnimation();\n      }\n    } else {\n      if (this.pointerDownInactiveAnimation) {\n        this.pointerDownInactiveAnimation();\n      }\n    }\n    return true;\n  }\n  /**\n   * @internal\n   */\n  _onPointerUp(target, coordinates, pointerId, buttonIndex, notifyClick, pi) {\n    if (!this.isReadOnly) {\n      if (this._isActive) {\n        if (this.pointerUpActiveAnimation) {\n          this.pointerUpActiveAnimation();\n        }\n      } else {\n        if (this.pointerUpInactiveAnimation) {\n          this.pointerUpInactiveAnimation();\n        }\n      }\n    }\n    super._onPointerUp(target, coordinates, pointerId, buttonIndex, notifyClick, pi);\n  }\n}\nRegisterClass(\"BABYLON.GUI.ToggleButton\", ToggleButton);","map":{"version":3,"names":["Observable","Rectangle","RegisterClass","ToggleButton","group","_group","value","isActive","_isActive","_a","toActiveAnimation","call","_b","toInactiveAnimation","_markAsDirty","onIsActiveChangedObservable","notifyObservers","_host","executeOnAllControls","control","typeName","childToggle","constructor","name","delegatePickingToChildren","thickness","isPointerBlocker","alphaStore","pointerEnterActiveAnimation","alpha","pointerOutActiveAnimation","pointerDownActiveAnimation","scaleX","scaleY","pointerUpActiveAnimation","pointerEnterInactiveAnimation","pointerOutInactiveAnimation","pointerDownInactiveAnimation","pointerUpInactiveAnimation","_getTypeName","_processPicking","x","y","pi","type","pointerId","buttonIndex","deltaX","deltaY","_isEnabled","isHitTestVisible","isVisible","notRenderable","contains","index","_children","length","child","isEnabled","_processObservables","_onPointerEnter","target","isReadOnly","_onPointerOut","force","_onPointerDown","coordinates","_onPointerUp","notifyClick"],"sources":["../../../../../dev/gui/src/2D/controls/toggleButton.ts"],"sourcesContent":["import type { Nullable } from \"core/types\";\r\nimport { Observable } from \"core/Misc/observable\";\r\nimport type { Vector2 } from \"core/Maths/math.vector\";\r\n\r\nimport { Rectangle } from \"./rectangle\";\r\nimport type { Control } from \"./control\";\r\nimport { RegisterClass } from \"core/Misc/typeStore\";\r\nimport type { PointerInfoBase } from \"core/Events/pointerEvents\";\r\n\r\n/**\r\n * Class used to create toggle buttons\r\n * @since 5.0.0\r\n */\r\nexport class ToggleButton extends Rectangle {\r\n    /**\r\n     * Function called to generate the toActive animation\r\n     */\r\n    public toActiveAnimation: () => void;\r\n\r\n    /**\r\n     * Function called to generate the toInactive animation\r\n     */\r\n    public toInactiveAnimation: () => void;\r\n\r\n    /**\r\n     * Function called to generate a pointer enter animation when the toggle button is active.\r\n     */\r\n    public pointerEnterActiveAnimation: () => void;\r\n    /**\r\n     * Function called to generate a pointer out animation when the toggle button is active.\r\n     */\r\n    public pointerOutActiveAnimation: () => void;\r\n    /**\r\n     * Function called to generate a pointer down animation when the toggle button is active.\r\n     */\r\n    public pointerDownActiveAnimation: () => void;\r\n    /**\r\n     * Function called to generate a pointer up animation when the toggle button is active.\r\n     */\r\n    public pointerUpActiveAnimation: () => void;\r\n\r\n    /**\r\n     * Function called to generate a pointer enter animation when the toggle button is inactive.\r\n     */\r\n    public pointerEnterInactiveAnimation: () => void;\r\n    /**\r\n     * Function called to generate a pointer out animation when the toggle button is inactive.\r\n     */\r\n    public pointerOutInactiveAnimation: () => void;\r\n    /**\r\n     * Function called to generate a pointer down animation when the toggle button is inactive.\r\n     */\r\n    public pointerDownInactiveAnimation: () => void;\r\n    /**\r\n     * Function called to generate a pointer up animation when the toggle button is inactive.\r\n     */\r\n    public pointerUpInactiveAnimation: () => void;\r\n\r\n    /** Observable raised when isActive is changed */\r\n    public onIsActiveChangedObservable = new Observable<boolean>();\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating that the toggle button will let internal controls handle picking instead of doing it directly using its bounding info\r\n     */\r\n    public delegatePickingToChildren = false;\r\n\r\n    private _group: string;\r\n    /** Gets or sets group name this toggle button belongs to */\r\n    public get group(): string {\r\n        return this._group;\r\n    }\r\n    public set group(value: string) {\r\n        if (this._group === value) {\r\n            return;\r\n        }\r\n\r\n        this._group = value;\r\n    }\r\n\r\n    private _isActive = false;\r\n    /** Gets or sets a boolean indicating if the toggle button is active or not */\r\n    public get isActive(): boolean {\r\n        return this._isActive;\r\n    }\r\n    public set isActive(value: boolean) {\r\n        // Function modeled after radioButton.ts\r\n        if (this._isActive === value) {\r\n            return;\r\n        }\r\n\r\n        this._isActive = value;\r\n\r\n        // Update the visual state based on the new value\r\n        if (this._isActive) {\r\n            this.toActiveAnimation?.();\r\n        } else {\r\n            this.toInactiveAnimation?.();\r\n        }\r\n\r\n        this._markAsDirty();\r\n\r\n        this.onIsActiveChangedObservable.notifyObservers(value);\r\n\r\n        if (this._isActive && this._host && this._group) {\r\n            // A toggle button in a group can only have 1 active element at a given time.\r\n            // If this toggle button has a group, set other toggle buttons in the group to inactive.\r\n            this._host.executeOnAllControls((control) => {\r\n                // Check for control type ToggleButton\r\n                if (control.typeName === \"ToggleButton\") {\r\n                    // Don't do anything to this toggle button\r\n                    if (control === this) {\r\n                        return;\r\n                    }\r\n\r\n                    const childToggle = <ToggleButton>control;\r\n                    // If toggle button is in same group, set isActive to false\r\n                    if (childToggle.group === this.group) {\r\n                        childToggle.isActive = false;\r\n                    }\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Creates a new ToggleButton\r\n     * @param name defines the control name\r\n     * @param group defines the toggle group this toggle belongs to\r\n     */\r\n    constructor(public name?: string, group?: string) {\r\n        super(name);\r\n        this.group = group ?? \"\";\r\n\r\n        this.thickness = 0;\r\n        this.isPointerBlocker = true;\r\n\r\n        let alphaStore: Nullable<number> = null;\r\n\r\n        this.toActiveAnimation = () => {\r\n            this.thickness = 1;\r\n        };\r\n        this.toInactiveAnimation = () => {\r\n            this.thickness = 0;\r\n        };\r\n\r\n        this.pointerEnterActiveAnimation = () => {\r\n            alphaStore = this.alpha;\r\n            this.alpha -= 0.1;\r\n        };\r\n\r\n        this.pointerOutActiveAnimation = () => {\r\n            if (alphaStore !== null) {\r\n                this.alpha = alphaStore;\r\n            }\r\n        };\r\n\r\n        this.pointerDownActiveAnimation = () => {\r\n            this.scaleX -= 0.05;\r\n            this.scaleY -= 0.05;\r\n        };\r\n\r\n        this.pointerUpActiveAnimation = () => {\r\n            this.scaleX += 0.05;\r\n            this.scaleY += 0.05;\r\n        };\r\n\r\n        this.pointerEnterInactiveAnimation = () => {\r\n            alphaStore = this.alpha;\r\n            this.alpha -= 0.1;\r\n        };\r\n\r\n        this.pointerOutInactiveAnimation = () => {\r\n            if (alphaStore !== null) {\r\n                this.alpha = alphaStore;\r\n            }\r\n        };\r\n\r\n        this.pointerDownInactiveAnimation = () => {\r\n            this.scaleX -= 0.05;\r\n            this.scaleY -= 0.05;\r\n        };\r\n\r\n        this.pointerUpInactiveAnimation = () => {\r\n            this.scaleX += 0.05;\r\n            this.scaleY += 0.05;\r\n        };\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"ToggleButton\";\r\n    }\r\n\r\n    // While being a container, the toggle button behaves like a control.\r\n    /**\r\n     * @internal\r\n     */\r\n    public _processPicking(x: number, y: number, pi: PointerInfoBase, type: number, pointerId: number, buttonIndex: number, deltaX?: number, deltaY?: number): boolean {\r\n        if (!this._isEnabled || !this.isHitTestVisible || !this.isVisible || this.notRenderable) {\r\n            return false;\r\n        }\r\n\r\n        if (!super.contains(x, y)) {\r\n            return false;\r\n        }\r\n\r\n        if (this.delegatePickingToChildren) {\r\n            let contains = false;\r\n            for (let index = this._children.length - 1; index >= 0; index--) {\r\n                const child = this._children[index];\r\n                if (child.isEnabled && child.isHitTestVisible && child.isVisible && !child.notRenderable && child.contains(x, y)) {\r\n                    contains = true;\r\n                    break;\r\n                }\r\n            }\r\n\r\n            if (!contains) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        this._processObservables(type, x, y, pi, pointerId, buttonIndex, deltaX, deltaY);\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _onPointerEnter(target: Control, pi: PointerInfoBase): boolean {\r\n        if (!super._onPointerEnter(target, pi)) {\r\n            return false;\r\n        }\r\n\r\n        if (this.isReadOnly) {\r\n            return true;\r\n        }\r\n\r\n        if (this._isActive) {\r\n            if (this.pointerEnterActiveAnimation) {\r\n                this.pointerEnterActiveAnimation();\r\n            }\r\n        } else {\r\n            if (this.pointerEnterInactiveAnimation) {\r\n                this.pointerEnterInactiveAnimation();\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _onPointerOut(target: Control, pi: PointerInfoBase, force = false): void {\r\n        if (!this.isReadOnly) {\r\n            if (this._isActive) {\r\n                if (this.pointerOutActiveAnimation) {\r\n                    this.pointerOutActiveAnimation();\r\n                }\r\n            } else {\r\n                if (this.pointerOutInactiveAnimation) {\r\n                    this.pointerOutInactiveAnimation();\r\n                }\r\n            }\r\n        }\r\n\r\n        super._onPointerOut(target, pi, force);\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _onPointerDown(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number, pi: PointerInfoBase): boolean {\r\n        if (!super._onPointerDown(target, coordinates, pointerId, buttonIndex, pi)) {\r\n            return false;\r\n        }\r\n\r\n        if (this.isReadOnly) {\r\n            return true;\r\n        }\r\n\r\n        if (this._isActive) {\r\n            if (this.pointerDownActiveAnimation) {\r\n                this.pointerDownActiveAnimation();\r\n            }\r\n        } else {\r\n            if (this.pointerDownInactiveAnimation) {\r\n                this.pointerDownInactiveAnimation();\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _onPointerUp(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number, notifyClick: boolean, pi: PointerInfoBase): void {\r\n        if (!this.isReadOnly) {\r\n            if (this._isActive) {\r\n                if (this.pointerUpActiveAnimation) {\r\n                    this.pointerUpActiveAnimation();\r\n                }\r\n            } else {\r\n                if (this.pointerUpInactiveAnimation) {\r\n                    this.pointerUpInactiveAnimation();\r\n                }\r\n            }\r\n        }\r\n\r\n        super._onPointerUp(target, coordinates, pointerId, buttonIndex, notifyClick, pi);\r\n    }\r\n}\r\n\r\nRegisterClass(\"BABYLON.GUI.ToggleButton\", ToggleButton);\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}