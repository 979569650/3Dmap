{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { __decorate } from \"../../../tslib.es6.js\";\nimport { NodeGeometryBlock } from \"../nodeGeometryBlock.js\";\nimport { RegisterClass } from \"../../../Misc/typeStore.js\";\nimport { NodeGeometryBlockConnectionPointTypes } from \"../Enums/nodeGeometryConnectionPointTypes.js\";\nimport { PropertyTypeForEdition, editableInPropertyPage } from \"../../../Decorators/nodeDecorator.js\";\nimport { Scalar } from \"../../../Maths/math.scalar.js\";\nimport { Epsilon } from \"../../../Maths/math.constants.js\";\n/**\n * Conditions supported by the condition block\n */\nexport var ConditionBlockTests;\n(function (ConditionBlockTests) {\n  /** Equal */\n  ConditionBlockTests[ConditionBlockTests[\"Equal\"] = 0] = \"Equal\";\n  /** NotEqual */\n  ConditionBlockTests[ConditionBlockTests[\"NotEqual\"] = 1] = \"NotEqual\";\n  /** LessThan */\n  ConditionBlockTests[ConditionBlockTests[\"LessThan\"] = 2] = \"LessThan\";\n  /** GreaterThan */\n  ConditionBlockTests[ConditionBlockTests[\"GreaterThan\"] = 3] = \"GreaterThan\";\n  /** LessOrEqual */\n  ConditionBlockTests[ConditionBlockTests[\"LessOrEqual\"] = 4] = \"LessOrEqual\";\n  /** GreaterOrEqual */\n  ConditionBlockTests[ConditionBlockTests[\"GreaterOrEqual\"] = 5] = \"GreaterOrEqual\";\n  /** Logical Exclusive OR */\n  ConditionBlockTests[ConditionBlockTests[\"Xor\"] = 6] = \"Xor\";\n  /** Logical Or */\n  ConditionBlockTests[ConditionBlockTests[\"Or\"] = 7] = \"Or\";\n  /** Logical And */\n  ConditionBlockTests[ConditionBlockTests[\"And\"] = 8] = \"And\";\n})(ConditionBlockTests || (ConditionBlockTests = {}));\n/**\n * Block used to evaluate a condition and return a true or false value\n */\nexport class ConditionBlock extends NodeGeometryBlock {\n  /**\n   * Create a new ConditionBlock\n   * @param name defines the block name\n   */\n  constructor(name) {\n    super(name);\n    /**\n     * Gets or sets the test used by the block\n     */\n    this.test = ConditionBlockTests.Equal;\n    this.registerInput(\"left\", NodeGeometryBlockConnectionPointTypes.Float);\n    this.registerInput(\"right\", NodeGeometryBlockConnectionPointTypes.Float, true, 0);\n    this.registerInput(\"ifTrue\", NodeGeometryBlockConnectionPointTypes.AutoDetect, true, 1);\n    this.registerInput(\"ifFalse\", NodeGeometryBlockConnectionPointTypes.AutoDetect, true, 0);\n    this.registerOutput(\"output\", NodeGeometryBlockConnectionPointTypes.BasedOnInput);\n    this._outputs[0]._typeConnectionSource = this._inputs[2];\n    this._outputs[0]._defaultConnectionPointType = NodeGeometryBlockConnectionPointTypes.Float;\n    this._inputs[0].acceptedConnectionPointTypes.push(NodeGeometryBlockConnectionPointTypes.Int);\n    this._inputs[1].acceptedConnectionPointTypes.push(NodeGeometryBlockConnectionPointTypes.Int);\n    this._linkConnectionTypes(2, 3);\n  }\n  /**\n   * Gets the current class name\n   * @returns the class name\n   */\n  getClassName() {\n    return \"ConditionBlock\";\n  }\n  /**\n   * Gets the left input component\n   */\n  get left() {\n    return this._inputs[0];\n  }\n  /**\n   * Gets the right input component\n   */\n  get right() {\n    return this._inputs[1];\n  }\n  /**\n   * Gets the ifTrue input component\n   */\n  get ifTrue() {\n    return this._inputs[2];\n  }\n  /**\n   * Gets the ifFalse input component\n   */\n  get ifFalse() {\n    return this._inputs[3];\n  }\n  /**\n   * Gets the output component\n   */\n  get output() {\n    return this._outputs[0];\n  }\n  _buildBlock() {\n    if (!this.left.isConnected) {\n      this.output._storedFunction = null;\n      this.output._storedValue = null;\n      return;\n    }\n    const func = state => {\n      const left = this.left.getConnectedValue(state);\n      const right = this.right.getConnectedValue(state);\n      let condition = false;\n      switch (this.test) {\n        case ConditionBlockTests.Equal:\n          condition = Scalar.WithinEpsilon(left, right, Epsilon);\n          break;\n        case ConditionBlockTests.NotEqual:\n          condition = left !== right;\n          break;\n        case ConditionBlockTests.LessThan:\n          condition = left < right;\n          break;\n        case ConditionBlockTests.GreaterThan:\n          condition = left > right;\n          break;\n        case ConditionBlockTests.LessOrEqual:\n          condition = left <= right;\n          break;\n        case ConditionBlockTests.GreaterOrEqual:\n          condition = left >= right;\n          break;\n        case ConditionBlockTests.Xor:\n          condition = !!left && !right || !left && !!right;\n          break;\n        case ConditionBlockTests.Or:\n          condition = !!left || !!right;\n          break;\n        case ConditionBlockTests.And:\n          condition = !!left && !!right;\n          break;\n      }\n      return condition;\n    };\n    this.output._storedFunction = state => {\n      if (func(state)) {\n        return this.ifTrue.getConnectedValue(state);\n      }\n      return this.ifFalse.getConnectedValue(state);\n    };\n  }\n  _dumpPropertiesCode() {\n    const codeString = super._dumpPropertiesCode() + `${this._codeVariableName}.test = BABYLON.ConditionBlockTests.${ConditionBlockTests[this.test]};\\n`;\n    return codeString;\n  }\n  /**\n   * Serializes this block in a JSON representation\n   * @returns the serialized block object\n   */\n  serialize() {\n    const serializationObject = super.serialize();\n    serializationObject.test = this.test;\n    return serializationObject;\n  }\n  _deserialize(serializationObject) {\n    super._deserialize(serializationObject);\n    this.test = serializationObject.test;\n  }\n}\n__decorate([editableInPropertyPage(\"Test\", PropertyTypeForEdition.List, \"ADVANCED\", {\n  notifiers: {\n    rebuild: true\n  },\n  options: [{\n    label: \"Equal\",\n    value: ConditionBlockTests.Equal\n  }, {\n    label: \"NotEqual\",\n    value: ConditionBlockTests.NotEqual\n  }, {\n    label: \"LessThan\",\n    value: ConditionBlockTests.LessThan\n  }, {\n    label: \"GreaterThan\",\n    value: ConditionBlockTests.GreaterThan\n  }, {\n    label: \"LessOrEqual\",\n    value: ConditionBlockTests.LessOrEqual\n  }, {\n    label: \"GreaterOrEqual\",\n    value: ConditionBlockTests.GreaterOrEqual\n  }, {\n    label: \"Xor\",\n    value: ConditionBlockTests.Xor\n  }, {\n    label: \"Or\",\n    value: ConditionBlockTests.Or\n  }, {\n    label: \"And\",\n    value: ConditionBlockTests.And\n  }]\n})], ConditionBlock.prototype, \"test\", void 0);\nRegisterClass(\"BABYLON.ConditionBlock\", ConditionBlock);","map":{"version":3,"names":["NodeGeometryBlock","RegisterClass","NodeGeometryBlockConnectionPointTypes","PropertyTypeForEdition","editableInPropertyPage","Scalar","Epsilon","ConditionBlockTests","ConditionBlock","constructor","name","test","Equal","registerInput","Float","AutoDetect","registerOutput","BasedOnInput","_outputs","_typeConnectionSource","_inputs","_defaultConnectionPointType","acceptedConnectionPointTypes","push","Int","_linkConnectionTypes","getClassName","left","right","ifTrue","ifFalse","output","_buildBlock","isConnected","_storedFunction","_storedValue","func","state","getConnectedValue","condition","WithinEpsilon","NotEqual","LessThan","GreaterThan","LessOrEqual","GreaterOrEqual","Xor","Or","And","_dumpPropertiesCode","codeString","_codeVariableName","serialize","serializationObject","_deserialize","__decorate","List","notifiers","rebuild","options","label","value"],"sources":["../../../../../../dev/core/src/Meshes/Node/Blocks/conditionBlock.ts"],"sourcesContent":["import { NodeGeometryBlock } from \"../nodeGeometryBlock\";\r\nimport type { NodeGeometryConnectionPoint } from \"../nodeGeometryBlockConnectionPoint\";\r\nimport { RegisterClass } from \"../../../Misc/typeStore\";\r\nimport { NodeGeometryBlockConnectionPointTypes } from \"../Enums/nodeGeometryConnectionPointTypes\";\r\nimport type { NodeGeometryBuildState } from \"../nodeGeometryBuildState\";\r\nimport { PropertyTypeForEdition, editableInPropertyPage } from \"../../../Decorators/nodeDecorator\";\r\nimport { Scalar } from \"../../../Maths/math.scalar\";\r\nimport { Epsilon } from \"../../../Maths/math.constants\";\r\n\r\n/**\r\n * Conditions supported by the condition block\r\n */\r\nexport enum ConditionBlockTests {\r\n    /** Equal */\r\n    Equal,\r\n    /** NotEqual */\r\n    NotEqual,\r\n    /** LessThan */\r\n    LessThan,\r\n    /** GreaterThan */\r\n    GreaterThan,\r\n    /** LessOrEqual */\r\n    LessOrEqual,\r\n    /** GreaterOrEqual */\r\n    GreaterOrEqual,\r\n    /** Logical Exclusive OR */\r\n    Xor,\r\n    /** Logical Or */\r\n    Or,\r\n    /** Logical And */\r\n    And,\r\n}\r\n\r\n/**\r\n * Block used to evaluate a condition and return a true or false value\r\n */\r\nexport class ConditionBlock extends NodeGeometryBlock {\r\n    /**\r\n     * Gets or sets the test used by the block\r\n     */\r\n    @editableInPropertyPage(\"Test\", PropertyTypeForEdition.List, \"ADVANCED\", {\r\n        notifiers: { rebuild: true },\r\n        options: [\r\n            { label: \"Equal\", value: ConditionBlockTests.Equal },\r\n            { label: \"NotEqual\", value: ConditionBlockTests.NotEqual },\r\n            { label: \"LessThan\", value: ConditionBlockTests.LessThan },\r\n            { label: \"GreaterThan\", value: ConditionBlockTests.GreaterThan },\r\n            { label: \"LessOrEqual\", value: ConditionBlockTests.LessOrEqual },\r\n            { label: \"GreaterOrEqual\", value: ConditionBlockTests.GreaterOrEqual },\r\n            { label: \"Xor\", value: ConditionBlockTests.Xor },\r\n            { label: \"Or\", value: ConditionBlockTests.Or },\r\n            { label: \"And\", value: ConditionBlockTests.And },\r\n        ],\r\n    })\r\n    public test = ConditionBlockTests.Equal;\r\n\r\n    /**\r\n     * Create a new ConditionBlock\r\n     * @param name defines the block name\r\n     */\r\n    public constructor(name: string) {\r\n        super(name);\r\n\r\n        this.registerInput(\"left\", NodeGeometryBlockConnectionPointTypes.Float);\r\n        this.registerInput(\"right\", NodeGeometryBlockConnectionPointTypes.Float, true, 0);\r\n        this.registerInput(\"ifTrue\", NodeGeometryBlockConnectionPointTypes.AutoDetect, true, 1);\r\n        this.registerInput(\"ifFalse\", NodeGeometryBlockConnectionPointTypes.AutoDetect, true, 0);\r\n\r\n        this.registerOutput(\"output\", NodeGeometryBlockConnectionPointTypes.BasedOnInput);\r\n\r\n        this._outputs[0]._typeConnectionSource = this._inputs[2];\r\n        this._outputs[0]._defaultConnectionPointType = NodeGeometryBlockConnectionPointTypes.Float;\r\n        this._inputs[0].acceptedConnectionPointTypes.push(NodeGeometryBlockConnectionPointTypes.Int);\r\n        this._inputs[1].acceptedConnectionPointTypes.push(NodeGeometryBlockConnectionPointTypes.Int);\r\n        this._linkConnectionTypes(2, 3);\r\n    }\r\n\r\n    /**\r\n     * Gets the current class name\r\n     * @returns the class name\r\n     */\r\n    public getClassName() {\r\n        return \"ConditionBlock\";\r\n    }\r\n\r\n    /**\r\n     * Gets the left input component\r\n     */\r\n    public get left(): NodeGeometryConnectionPoint {\r\n        return this._inputs[0];\r\n    }\r\n\r\n    /**\r\n     * Gets the right input component\r\n     */\r\n    public get right(): NodeGeometryConnectionPoint {\r\n        return this._inputs[1];\r\n    }\r\n\r\n    /**\r\n     * Gets the ifTrue input component\r\n     */\r\n    public get ifTrue(): NodeGeometryConnectionPoint {\r\n        return this._inputs[2];\r\n    }\r\n\r\n    /**\r\n     * Gets the ifFalse input component\r\n     */\r\n    public get ifFalse(): NodeGeometryConnectionPoint {\r\n        return this._inputs[3];\r\n    }\r\n\r\n    /**\r\n     * Gets the output component\r\n     */\r\n    public get output(): NodeGeometryConnectionPoint {\r\n        return this._outputs[0];\r\n    }\r\n\r\n    protected _buildBlock() {\r\n        if (!this.left.isConnected) {\r\n            this.output._storedFunction = null;\r\n            this.output._storedValue = null;\r\n            return;\r\n        }\r\n\r\n        const func = (state: NodeGeometryBuildState) => {\r\n            const left = this.left.getConnectedValue(state) as number;\r\n            const right = this.right.getConnectedValue(state) as number;\r\n            let condition = false;\r\n\r\n            switch (this.test) {\r\n                case ConditionBlockTests.Equal:\r\n                    condition = Scalar.WithinEpsilon(left, right, Epsilon);\r\n                    break;\r\n                case ConditionBlockTests.NotEqual:\r\n                    condition = left !== right;\r\n                    break;\r\n                case ConditionBlockTests.LessThan:\r\n                    condition = left < right;\r\n                    break;\r\n                case ConditionBlockTests.GreaterThan:\r\n                    condition = left > right;\r\n                    break;\r\n                case ConditionBlockTests.LessOrEqual:\r\n                    condition = left <= right;\r\n                    break;\r\n                case ConditionBlockTests.GreaterOrEqual:\r\n                    condition = left >= right;\r\n                    break;\r\n                case ConditionBlockTests.Xor:\r\n                    condition = (!!left && !right) || (!left && !!right);\r\n                    break;\r\n                case ConditionBlockTests.Or:\r\n                    condition = !!left || !!right;\r\n                    break;\r\n                case ConditionBlockTests.And:\r\n                    condition = !!left && !!right;\r\n                    break;\r\n            }\r\n            return condition;\r\n        };\r\n\r\n        this.output._storedFunction = (state) => {\r\n            if (func(state)) {\r\n                return this.ifTrue.getConnectedValue(state);\r\n            }\r\n\r\n            return this.ifFalse.getConnectedValue(state);\r\n        };\r\n    }\r\n\r\n    protected _dumpPropertiesCode() {\r\n        const codeString = super._dumpPropertiesCode() + `${this._codeVariableName}.test = BABYLON.ConditionBlockTests.${ConditionBlockTests[this.test]};\\n`;\r\n        return codeString;\r\n    }\r\n\r\n    /**\r\n     * Serializes this block in a JSON representation\r\n     * @returns the serialized block object\r\n     */\r\n    public serialize(): any {\r\n        const serializationObject = super.serialize();\r\n\r\n        serializationObject.test = this.test;\r\n\r\n        return serializationObject;\r\n    }\r\n\r\n    public _deserialize(serializationObject: any) {\r\n        super._deserialize(serializationObject);\r\n\r\n        this.test = serializationObject.test;\r\n    }\r\n}\r\n\r\nRegisterClass(\"BABYLON.ConditionBlock\", ConditionBlock);\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}