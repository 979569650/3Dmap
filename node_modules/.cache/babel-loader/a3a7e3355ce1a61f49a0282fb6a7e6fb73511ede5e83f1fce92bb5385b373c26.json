{"ast":null,"code":"import { ArrayTools } from \"../Misc/arrayTools.js\";\nimport { Matrix, Vector3 } from \"../Maths/math.vector.js\";\n/**\n * Class used to store bounding sphere information\n */\nexport class BoundingSphere {\n  /**\n   * Creates a new bounding sphere\n   * @param min defines the minimum vector (in local space)\n   * @param max defines the maximum vector (in local space)\n   * @param worldMatrix defines the new world matrix\n   */\n  constructor(min, max, worldMatrix) {\n    /**\n     * Gets the center of the bounding sphere in local space\n     */\n    this.center = Vector3.Zero();\n    /**\n     * Gets the center of the bounding sphere in world space\n     */\n    this.centerWorld = Vector3.Zero();\n    /**\n     * Gets the minimum vector in local space\n     */\n    this.minimum = Vector3.Zero();\n    /**\n     * Gets the maximum vector in local space\n     */\n    this.maximum = Vector3.Zero();\n    this.reConstruct(min, max, worldMatrix);\n  }\n  /**\n   * Recreates the entire bounding sphere from scratch as if we call the constructor in place\n   * @param min defines the new minimum vector (in local space)\n   * @param max defines the new maximum vector (in local space)\n   * @param worldMatrix defines the new world matrix\n   */\n  reConstruct(min, max, worldMatrix) {\n    this.minimum.copyFrom(min);\n    this.maximum.copyFrom(max);\n    const distance = Vector3.Distance(min, max);\n    max.addToRef(min, this.center).scaleInPlace(0.5);\n    this.radius = distance * 0.5;\n    this._update(worldMatrix || Matrix.IdentityReadOnly);\n  }\n  /**\n   * Scale the current bounding sphere by applying a scale factor\n   * @param factor defines the scale factor to apply\n   * @returns the current bounding box\n   */\n  scale(factor) {\n    const newRadius = this.radius * factor;\n    const tmpVectors = BoundingSphere._TmpVector3;\n    const tempRadiusVector = tmpVectors[0].setAll(newRadius);\n    const min = this.center.subtractToRef(tempRadiusVector, tmpVectors[1]);\n    const max = this.center.addToRef(tempRadiusVector, tmpVectors[2]);\n    this.reConstruct(min, max, this._worldMatrix);\n    return this;\n  }\n  /**\n   * Gets the world matrix of the bounding box\n   * @returns a matrix\n   */\n  getWorldMatrix() {\n    return this._worldMatrix;\n  }\n  // Methods\n  /**\n   * @internal\n   */\n  _update(worldMatrix) {\n    if (!worldMatrix.isIdentity()) {\n      Vector3.TransformCoordinatesToRef(this.center, worldMatrix, this.centerWorld);\n      const tempVector = BoundingSphere._TmpVector3[0];\n      Vector3.TransformNormalFromFloatsToRef(1.0, 1.0, 1.0, worldMatrix, tempVector);\n      this.radiusWorld = Math.max(Math.abs(tempVector.x), Math.abs(tempVector.y), Math.abs(tempVector.z)) * this.radius;\n    } else {\n      this.centerWorld.copyFrom(this.center);\n      this.radiusWorld = this.radius;\n    }\n  }\n  /**\n   * Tests if the bounding sphere is intersecting the frustum planes\n   * @param frustumPlanes defines the frustum planes to test\n   * @returns true if there is an intersection\n   */\n  isInFrustum(frustumPlanes) {\n    const center = this.centerWorld;\n    const radius = this.radiusWorld;\n    for (let i = 0; i < 6; i++) {\n      if (frustumPlanes[i].dotCoordinate(center) <= -radius) {\n        return false;\n      }\n    }\n    return true;\n  }\n  /**\n   * Tests if the bounding sphere center is in between the frustum planes.\n   * Used for optimistic fast inclusion.\n   * @param frustumPlanes defines the frustum planes to test\n   * @returns true if the sphere center is in between the frustum planes\n   */\n  isCenterInFrustum(frustumPlanes) {\n    const center = this.centerWorld;\n    for (let i = 0; i < 6; i++) {\n      if (frustumPlanes[i].dotCoordinate(center) < 0) {\n        return false;\n      }\n    }\n    return true;\n  }\n  /**\n   * Tests if a point is inside the bounding sphere\n   * @param point defines the point to test\n   * @returns true if the point is inside the bounding sphere\n   */\n  intersectsPoint(point) {\n    const squareDistance = Vector3.DistanceSquared(this.centerWorld, point);\n    if (this.radiusWorld * this.radiusWorld < squareDistance) {\n      return false;\n    }\n    return true;\n  }\n  // Statics\n  /**\n   * Checks if two sphere intersect\n   * @param sphere0 sphere 0\n   * @param sphere1 sphere 1\n   * @returns true if the spheres intersect\n   */\n  static Intersects(sphere0, sphere1) {\n    const squareDistance = Vector3.DistanceSquared(sphere0.centerWorld, sphere1.centerWorld);\n    const radiusSum = sphere0.radiusWorld + sphere1.radiusWorld;\n    if (radiusSum * radiusSum < squareDistance) {\n      return false;\n    }\n    return true;\n  }\n  /**\n   * Creates a sphere from a center and a radius\n   * @param center The center\n   * @param radius radius\n   * @param matrix Optional worldMatrix\n   * @returns The sphere\n   */\n  static CreateFromCenterAndRadius(center, radius, matrix) {\n    this._TmpVector3[0].copyFrom(center);\n    this._TmpVector3[1].copyFromFloats(0, 0, radius);\n    this._TmpVector3[2].copyFrom(center);\n    this._TmpVector3[0].addInPlace(this._TmpVector3[1]);\n    this._TmpVector3[2].subtractInPlace(this._TmpVector3[1]);\n    const sphere = new BoundingSphere(this._TmpVector3[0], this._TmpVector3[2]);\n    if (matrix) {\n      sphere._worldMatrix = matrix;\n    } else {\n      sphere._worldMatrix = Matrix.Identity();\n    }\n    return sphere;\n  }\n}\nBoundingSphere._TmpVector3 = ArrayTools.BuildArray(3, Vector3.Zero);","map":{"version":3,"names":["ArrayTools","Matrix","Vector3","BoundingSphere","constructor","min","max","worldMatrix","center","Zero","centerWorld","minimum","maximum","reConstruct","copyFrom","distance","Distance","addToRef","scaleInPlace","radius","_update","IdentityReadOnly","scale","factor","newRadius","tmpVectors","_TmpVector3","tempRadiusVector","setAll","subtractToRef","_worldMatrix","getWorldMatrix","isIdentity","TransformCoordinatesToRef","tempVector","TransformNormalFromFloatsToRef","radiusWorld","Math","abs","x","y","z","isInFrustum","frustumPlanes","i","dotCoordinate","isCenterInFrustum","intersectsPoint","point","squareDistance","DistanceSquared","Intersects","sphere0","sphere1","radiusSum","CreateFromCenterAndRadius","matrix","copyFromFloats","addInPlace","subtractInPlace","sphere","Identity","BuildArray"],"sources":["../../../../dev/core/src/Culling/boundingSphere.ts"],"sourcesContent":["import type { DeepImmutable } from \"../types\";\r\nimport { ArrayTools } from \"../Misc/arrayTools\";\r\nimport { Matrix, Vector3 } from \"../Maths/math.vector\";\r\nimport type { Plane } from \"../Maths/math.plane\";\r\n\r\n/**\r\n * Class used to store bounding sphere information\r\n */\r\nexport class BoundingSphere {\r\n    /**\r\n     * Gets the center of the bounding sphere in local space\r\n     */\r\n    public readonly center = Vector3.Zero();\r\n    /**\r\n     * Radius of the bounding sphere in local space\r\n     */\r\n    public radius: number;\r\n    /**\r\n     * Gets the center of the bounding sphere in world space\r\n     */\r\n    public readonly centerWorld = Vector3.Zero();\r\n    /**\r\n     * Radius of the bounding sphere in world space\r\n     */\r\n    public radiusWorld: number;\r\n    /**\r\n     * Gets the minimum vector in local space\r\n     */\r\n    public readonly minimum = Vector3.Zero();\r\n    /**\r\n     * Gets the maximum vector in local space\r\n     */\r\n    public readonly maximum = Vector3.Zero();\r\n\r\n    private _worldMatrix: DeepImmutable<Matrix>;\r\n    private static readonly _TmpVector3 = ArrayTools.BuildArray(3, Vector3.Zero);\r\n\r\n    /**\r\n     * Creates a new bounding sphere\r\n     * @param min defines the minimum vector (in local space)\r\n     * @param max defines the maximum vector (in local space)\r\n     * @param worldMatrix defines the new world matrix\r\n     */\r\n    constructor(min: DeepImmutable<Vector3>, max: DeepImmutable<Vector3>, worldMatrix?: DeepImmutable<Matrix>) {\r\n        this.reConstruct(min, max, worldMatrix);\r\n    }\r\n\r\n    /**\r\n     * Recreates the entire bounding sphere from scratch as if we call the constructor in place\r\n     * @param min defines the new minimum vector (in local space)\r\n     * @param max defines the new maximum vector (in local space)\r\n     * @param worldMatrix defines the new world matrix\r\n     */\r\n    public reConstruct(min: DeepImmutable<Vector3>, max: DeepImmutable<Vector3>, worldMatrix?: DeepImmutable<Matrix>) {\r\n        this.minimum.copyFrom(min);\r\n        this.maximum.copyFrom(max);\r\n\r\n        const distance = Vector3.Distance(min, max);\r\n\r\n        max.addToRef(min, this.center).scaleInPlace(0.5);\r\n        this.radius = distance * 0.5;\r\n\r\n        this._update(worldMatrix || Matrix.IdentityReadOnly);\r\n    }\r\n\r\n    /**\r\n     * Scale the current bounding sphere by applying a scale factor\r\n     * @param factor defines the scale factor to apply\r\n     * @returns the current bounding box\r\n     */\r\n    public scale(factor: number): BoundingSphere {\r\n        const newRadius = this.radius * factor;\r\n        const tmpVectors = BoundingSphere._TmpVector3;\r\n        const tempRadiusVector = tmpVectors[0].setAll(newRadius);\r\n        const min = this.center.subtractToRef(tempRadiusVector, tmpVectors[1]);\r\n        const max = this.center.addToRef(tempRadiusVector, tmpVectors[2]);\r\n\r\n        this.reConstruct(min, max, this._worldMatrix);\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Gets the world matrix of the bounding box\r\n     * @returns a matrix\r\n     */\r\n    public getWorldMatrix(): DeepImmutable<Matrix> {\r\n        return this._worldMatrix;\r\n    }\r\n\r\n    // Methods\r\n    /**\r\n     * @internal\r\n     */\r\n    public _update(worldMatrix: DeepImmutable<Matrix>): void {\r\n        if (!worldMatrix.isIdentity()) {\r\n            Vector3.TransformCoordinatesToRef(this.center, worldMatrix, this.centerWorld);\r\n            const tempVector = BoundingSphere._TmpVector3[0];\r\n            Vector3.TransformNormalFromFloatsToRef(1.0, 1.0, 1.0, worldMatrix, tempVector);\r\n            this.radiusWorld = Math.max(Math.abs(tempVector.x), Math.abs(tempVector.y), Math.abs(tempVector.z)) * this.radius;\r\n        } else {\r\n            this.centerWorld.copyFrom(this.center);\r\n            this.radiusWorld = this.radius;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Tests if the bounding sphere is intersecting the frustum planes\r\n     * @param frustumPlanes defines the frustum planes to test\r\n     * @returns true if there is an intersection\r\n     */\r\n    public isInFrustum(frustumPlanes: Array<DeepImmutable<Plane>>): boolean {\r\n        const center = this.centerWorld;\r\n        const radius = this.radiusWorld;\r\n        for (let i = 0; i < 6; i++) {\r\n            if (frustumPlanes[i].dotCoordinate(center) <= -radius) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Tests if the bounding sphere center is in between the frustum planes.\r\n     * Used for optimistic fast inclusion.\r\n     * @param frustumPlanes defines the frustum planes to test\r\n     * @returns true if the sphere center is in between the frustum planes\r\n     */\r\n    public isCenterInFrustum(frustumPlanes: Array<DeepImmutable<Plane>>): boolean {\r\n        const center = this.centerWorld;\r\n        for (let i = 0; i < 6; i++) {\r\n            if (frustumPlanes[i].dotCoordinate(center) < 0) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Tests if a point is inside the bounding sphere\r\n     * @param point defines the point to test\r\n     * @returns true if the point is inside the bounding sphere\r\n     */\r\n    public intersectsPoint(point: DeepImmutable<Vector3>): boolean {\r\n        const squareDistance = Vector3.DistanceSquared(this.centerWorld, point);\r\n        if (this.radiusWorld * this.radiusWorld < squareDistance) {\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    // Statics\r\n    /**\r\n     * Checks if two sphere intersect\r\n     * @param sphere0 sphere 0\r\n     * @param sphere1 sphere 1\r\n     * @returns true if the spheres intersect\r\n     */\r\n    public static Intersects(sphere0: DeepImmutable<BoundingSphere>, sphere1: DeepImmutable<BoundingSphere>): boolean {\r\n        const squareDistance = Vector3.DistanceSquared(sphere0.centerWorld, sphere1.centerWorld);\r\n        const radiusSum = sphere0.radiusWorld + sphere1.radiusWorld;\r\n\r\n        if (radiusSum * radiusSum < squareDistance) {\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Creates a sphere from a center and a radius\r\n     * @param center The center\r\n     * @param radius radius\r\n     * @param matrix Optional worldMatrix\r\n     * @returns The sphere\r\n     */\r\n    public static CreateFromCenterAndRadius(center: DeepImmutable<Vector3>, radius: number, matrix?: DeepImmutable<Matrix>): BoundingSphere {\r\n        this._TmpVector3[0].copyFrom(center);\r\n        this._TmpVector3[1].copyFromFloats(0, 0, radius);\r\n        this._TmpVector3[2].copyFrom(center);\r\n        this._TmpVector3[0].addInPlace(this._TmpVector3[1]);\r\n        this._TmpVector3[2].subtractInPlace(this._TmpVector3[1]);\r\n\r\n        const sphere = new BoundingSphere(this._TmpVector3[0], this._TmpVector3[2]);\r\n\r\n        if (matrix) {\r\n            sphere._worldMatrix = matrix;\r\n        } else {\r\n            sphere._worldMatrix = Matrix.Identity();\r\n        }\r\n\r\n        return sphere;\r\n    }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}