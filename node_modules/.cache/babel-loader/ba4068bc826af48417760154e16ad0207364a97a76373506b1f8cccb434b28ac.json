{"ast":null,"code":"import { __decorate } from \"@babylonjs/core/tslib.es6.js\";\nimport { Container } from \"./container.js\";\nimport { Control } from \"./control.js\";\nimport { RegisterClass } from \"@babylonjs/core/Misc/typeStore.js\";\nimport { serialize } from \"@babylonjs/core/Misc/decorators.js\";\n/** Class used to create 2D ellipse containers */\nexport class Ellipse extends Container {\n  /** Gets or sets border thickness */\n  get thickness() {\n    return this._thickness;\n  }\n  set thickness(value) {\n    if (this._thickness === value) {\n      return;\n    }\n    this._thickness = value;\n    this._markAsDirty();\n  }\n  /**\n   * Creates a new Ellipse\n   * @param name defines the control name\n   */\n  constructor(name) {\n    super(name);\n    this.name = name;\n    this._thickness = 1;\n  }\n  _getTypeName() {\n    return \"Ellipse\";\n  }\n  _localDraw(context) {\n    context.save();\n    if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\n      context.shadowColor = this.shadowColor;\n      context.shadowBlur = this.shadowBlur;\n      context.shadowOffsetX = this.shadowOffsetX;\n      context.shadowOffsetY = this.shadowOffsetY;\n    }\n    Control.drawEllipse(this._currentMeasure.left + this._currentMeasure.width / 2, this._currentMeasure.top + this._currentMeasure.height / 2, this._currentMeasure.width / 2 - this._thickness / 2, this._currentMeasure.height / 2 - this._thickness / 2, context);\n    if (this._backgroundGradient || this._background) {\n      context.fillStyle = this._getBackgroundColor(context);\n      context.fill();\n    }\n    if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\n      context.shadowBlur = 0;\n      context.shadowOffsetX = 0;\n      context.shadowOffsetY = 0;\n    }\n    if (this._thickness) {\n      if (this.color) {\n        context.strokeStyle = this.color;\n      }\n      context.lineWidth = this._thickness;\n      context.stroke();\n    }\n    context.restore();\n  }\n  _additionalProcessing(parentMeasure, context) {\n    super._additionalProcessing(parentMeasure, context);\n    this._measureForChildren.width -= 2 * this._thickness;\n    this._measureForChildren.height -= 2 * this._thickness;\n    this._measureForChildren.left += this._thickness;\n    this._measureForChildren.top += this._thickness;\n  }\n  _clipForChildren(context) {\n    Control.drawEllipse(this._currentMeasure.left + this._currentMeasure.width / 2, this._currentMeasure.top + this._currentMeasure.height / 2, this._currentMeasure.width / 2, this._currentMeasure.height / 2, context);\n    context.clip();\n  }\n  _renderHighlightSpecific(context) {\n    Control.drawEllipse(this._currentMeasure.left + this._currentMeasure.width / 2, this._currentMeasure.top + this._currentMeasure.height / 2, this._currentMeasure.width / 2 - this._highlightLineWidth / 2, this._currentMeasure.height / 2 - this._highlightLineWidth / 2, context);\n    context.stroke();\n  }\n}\n__decorate([serialize()], Ellipse.prototype, \"thickness\", null);\nRegisterClass(\"BABYLON.GUI.Ellipse\", Ellipse);","map":{"version":3,"names":["Container","Control","RegisterClass","serialize","Ellipse","thickness","_thickness","value","_markAsDirty","constructor","name","_getTypeName","_localDraw","context","save","shadowBlur","shadowOffsetX","shadowOffsetY","shadowColor","drawEllipse","_currentMeasure","left","width","top","height","_backgroundGradient","_background","fillStyle","_getBackgroundColor","fill","color","strokeStyle","lineWidth","stroke","restore","_additionalProcessing","parentMeasure","_measureForChildren","_clipForChildren","clip","_renderHighlightSpecific","_highlightLineWidth","__decorate"],"sources":["../../../../../dev/gui/src/2D/controls/ellipse.ts"],"sourcesContent":["import { Container } from \"./container\";\r\nimport { Control } from \"./control\";\r\nimport type { Measure } from \"../measure\";\r\nimport { RegisterClass } from \"core/Misc/typeStore\";\r\nimport { serialize } from \"core/Misc/decorators\";\r\nimport type { ICanvasRenderingContext } from \"core/Engines/ICanvas\";\r\n\r\n/** Class used to create 2D ellipse containers */\r\nexport class Ellipse extends Container {\r\n    private _thickness = 1;\r\n\r\n    /** Gets or sets border thickness */\r\n    @serialize()\r\n    public get thickness(): number {\r\n        return this._thickness;\r\n    }\r\n\r\n    public set thickness(value: number) {\r\n        if (this._thickness === value) {\r\n            return;\r\n        }\r\n\r\n        this._thickness = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Creates a new Ellipse\r\n     * @param name defines the control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Ellipse\";\r\n    }\r\n\r\n    protected _localDraw(context: ICanvasRenderingContext): void {\r\n        context.save();\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            context.shadowColor = this.shadowColor;\r\n            context.shadowBlur = this.shadowBlur;\r\n            context.shadowOffsetX = this.shadowOffsetX;\r\n            context.shadowOffsetY = this.shadowOffsetY;\r\n        }\r\n\r\n        Control.drawEllipse(\r\n            this._currentMeasure.left + this._currentMeasure.width / 2,\r\n            this._currentMeasure.top + this._currentMeasure.height / 2,\r\n            this._currentMeasure.width / 2 - this._thickness / 2,\r\n            this._currentMeasure.height / 2 - this._thickness / 2,\r\n            context\r\n        );\r\n\r\n        if (this._backgroundGradient || this._background) {\r\n            context.fillStyle = this._getBackgroundColor(context);\r\n\r\n            context.fill();\r\n        }\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            context.shadowBlur = 0;\r\n            context.shadowOffsetX = 0;\r\n            context.shadowOffsetY = 0;\r\n        }\r\n\r\n        if (this._thickness) {\r\n            if (this.color) {\r\n                context.strokeStyle = this.color;\r\n            }\r\n            context.lineWidth = this._thickness;\r\n\r\n            context.stroke();\r\n        }\r\n\r\n        context.restore();\r\n    }\r\n\r\n    protected _additionalProcessing(parentMeasure: Measure, context: ICanvasRenderingContext): void {\r\n        super._additionalProcessing(parentMeasure, context);\r\n\r\n        this._measureForChildren.width -= 2 * this._thickness;\r\n        this._measureForChildren.height -= 2 * this._thickness;\r\n        this._measureForChildren.left += this._thickness;\r\n        this._measureForChildren.top += this._thickness;\r\n    }\r\n\r\n    protected _clipForChildren(context: ICanvasRenderingContext) {\r\n        Control.drawEllipse(\r\n            this._currentMeasure.left + this._currentMeasure.width / 2,\r\n            this._currentMeasure.top + this._currentMeasure.height / 2,\r\n            this._currentMeasure.width / 2,\r\n            this._currentMeasure.height / 2,\r\n            context\r\n        );\r\n\r\n        context.clip();\r\n    }\r\n\r\n    public _renderHighlightSpecific(context: ICanvasRenderingContext): void {\r\n        Control.drawEllipse(\r\n            this._currentMeasure.left + this._currentMeasure.width / 2,\r\n            this._currentMeasure.top + this._currentMeasure.height / 2,\r\n            this._currentMeasure.width / 2 - this._highlightLineWidth / 2,\r\n            this._currentMeasure.height / 2 - this._highlightLineWidth / 2,\r\n            context\r\n        );\r\n        context.stroke();\r\n    }\r\n}\r\nRegisterClass(\"BABYLON.GUI.Ellipse\", Ellipse);\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}