{"ast":null,"code":"import { FlowGraphExecutionBlock } from \"./flowGraphExecutionBlock.js\";\n/**\n * An async execution block can start tasks that will be executed asynchronously.\n * It should also be responsible for clearing it in _cancelPendingTasks.\n * @experimental\n */\nexport class FlowGraphAsyncExecutionBlock extends FlowGraphExecutionBlock {\n  constructor(config) {\n    super(config);\n    this.onDone = this._registerSignalOutput(\"onDone\");\n  }\n  /**\n   * @internal\n   * @param context\n   */\n  _startPendingTasks(context) {\n    this._preparePendingTasks(context);\n    context._addPendingBlock(this);\n  }\n}","map":{"version":3,"names":["FlowGraphExecutionBlock","FlowGraphAsyncExecutionBlock","constructor","config","onDone","_registerSignalOutput","_startPendingTasks","context","_preparePendingTasks","_addPendingBlock"],"sources":["../../../../dev/core/src/FlowGraph/flowGraphAsyncExecutionBlock.ts"],"sourcesContent":["import type { IFlowGraphBlockConfiguration } from \"./flowGraphBlock\";\r\nimport type { FlowGraphContext } from \"./flowGraphContext\";\r\nimport { FlowGraphExecutionBlock } from \"./flowGraphExecutionBlock\";\r\nimport type { FlowGraphSignalConnection } from \"./flowGraphSignalConnection\";\r\n\r\n/**\r\n * An async execution block can start tasks that will be executed asynchronously.\r\n * It should also be responsible for clearing it in _cancelPendingTasks.\r\n * @experimental\r\n */\r\nexport abstract class FlowGraphAsyncExecutionBlock extends FlowGraphExecutionBlock {\r\n    /**\r\n     * Output connection: The signal that is triggered when the execution of this block is done.\r\n     */\r\n    public onDone: FlowGraphSignalConnection;\r\n\r\n    constructor(config?: IFlowGraphBlockConfiguration) {\r\n        super(config);\r\n        this.onDone = this._registerSignalOutput(\"onDone\");\r\n    }\r\n    /**\r\n     * @internal\r\n     * This function can be overridden to start any\r\n     * pending tasks this node might have, such as\r\n     * timeouts and playing animations.\r\n     * @param context\r\n     */\r\n    public abstract _preparePendingTasks(context: FlowGraphContext): void;\r\n\r\n    /**\r\n     * @internal\r\n     * @param context\r\n     */\r\n    public _startPendingTasks(context: FlowGraphContext) {\r\n        this._preparePendingTasks(context);\r\n        context._addPendingBlock(this);\r\n    }\r\n\r\n    public abstract _cancelPendingTasks(context: FlowGraphContext): void;\r\n}\r\n"],"mappings":"AAEA,SAASA,uBAAuB,QAAQ,8BAA4B;AAGpE;;;;;AAKA,OAAM,MAAgBC,4BAA6B,SAAQD,uBAAuB;EAM9EE,YAAYC,MAAqC;IAC7C,KAAK,CAACA,MAAM,CAAC;IACb,IAAI,CAACC,MAAM,GAAG,IAAI,CAACC,qBAAqB,CAAC,QAAQ,CAAC;EACtD;EAUA;;;;EAIOC,kBAAkBA,CAACC,OAAyB;IAC/C,IAAI,CAACC,oBAAoB,CAACD,OAAO,CAAC;IAClCA,OAAO,CAACE,gBAAgB,CAAC,IAAI,CAAC;EAClC"},"metadata":{},"sourceType":"module","externalDependencies":[]}