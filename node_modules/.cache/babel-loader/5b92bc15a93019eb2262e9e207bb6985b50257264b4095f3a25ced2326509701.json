{"ast":null,"code":"import { __decorate } from \"../../../../tslib.es6.js\";\nimport { Vector4 } from \"../../../../Maths/math.vector.js\";\nimport { RegisterClass } from \"../../../../Misc/typeStore.js\";\nimport { NodeGeometryBlockConnectionPointTypes } from \"../../Enums/nodeGeometryConnectionPointTypes.js\";\nimport { NodeGeometryBlock } from \"../../nodeGeometryBlock.js\";\nimport { PropertyTypeForEdition, editableInPropertyPage } from \"../../../../Decorators/nodeDecorator.js\";\n/**\n * Block used to fetch a color from texture data\n */\nexport class GeometryTextureFetchBlock extends NodeGeometryBlock {\n  /**\n   * Creates a new GeometryTextureFetchBlock\n   * @param name defines the block name\n   */\n  constructor(name) {\n    super(name);\n    /**\n     * Gets or sets a boolean indicating if coordinates should be clamped between 0 and 1\n     */\n    this.clampCoordinates = true;\n    this.registerInput(\"texture\", NodeGeometryBlockConnectionPointTypes.Texture);\n    this.registerInput(\"coordinates\", NodeGeometryBlockConnectionPointTypes.Vector2);\n    this.registerOutput(\"rgba\", NodeGeometryBlockConnectionPointTypes.Vector4);\n    this.registerOutput(\"rgb\", NodeGeometryBlockConnectionPointTypes.Vector3);\n    this.registerOutput(\"r\", NodeGeometryBlockConnectionPointTypes.Float);\n    this.registerOutput(\"g\", NodeGeometryBlockConnectionPointTypes.Float);\n    this.registerOutput(\"b\", NodeGeometryBlockConnectionPointTypes.Float);\n    this.registerOutput(\"a\", NodeGeometryBlockConnectionPointTypes.Float);\n  }\n  /**\n   * Gets the current class name\n   * @returns the class name\n   */\n  getClassName() {\n    return \"GeometryTextureFetchBlock\";\n  }\n  /**\n   * Gets the texture component\n   */\n  get texture() {\n    return this.inputs[0];\n  }\n  /**\n   * Gets the coordinates component\n   */\n  get coordinates() {\n    return this.inputs[1];\n  }\n  /**\n   * Gets the rgba component\n   */\n  get rgba() {\n    return this._outputs[0];\n  }\n  /**\n   * Gets the rgb component\n   */\n  get rgb() {\n    return this._outputs[1];\n  }\n  /**\n   * Gets the r component\n   */\n  get r() {\n    return this._outputs[2];\n  }\n  /**\n   * Gets the g component\n   */\n  get g() {\n    return this._outputs[3];\n  }\n  /**\n   * Gets the b component\n   */\n  get b() {\n    return this._outputs[4];\n  }\n  /**\n   * Gets the a component\n   */\n  get a() {\n    return this._outputs[5];\n  }\n  _repeatClamp(num) {\n    if (num >= 0) {\n      return num % 1;\n    } else {\n      return 1 - Math.abs(num) % 1;\n    }\n  }\n  _buildBlock() {\n    const func = state => {\n      const textureData = this.texture.getConnectedValue(state);\n      if (!textureData || !textureData.data) {\n        return null;\n      }\n      const uv = this.coordinates.getConnectedValue(state);\n      if (!uv) {\n        return null;\n      }\n      const u = this.clampCoordinates ? Math.max(0, Math.min(uv.x, 1.0)) : this._repeatClamp(uv.x);\n      const v = this.clampCoordinates ? Math.max(0, Math.min(uv.y, 1.0)) : this._repeatClamp(uv.y);\n      const x = Math.floor(u * (textureData.width - 1));\n      const y = Math.floor(v * (textureData.height - 1));\n      const index = x + textureData.width * y;\n      return Vector4.FromArray(textureData.data, index * 4);\n    };\n    this.rgba._storedFunction = state => {\n      return func(state);\n    };\n    this.rgb._storedFunction = state => {\n      const color = func(state);\n      return color ? color.toVector3() : null;\n    };\n    this.r._storedFunction = state => {\n      const color = func(state);\n      return color ? color.x : null;\n    };\n    this.g._storedFunction = state => {\n      const color = func(state);\n      return color ? color.y : null;\n    };\n    this.b._storedFunction = state => {\n      const color = func(state);\n      return color ? color.z : null;\n    };\n    this.a._storedFunction = state => {\n      const color = func(state);\n      return color ? color.w : null;\n    };\n  }\n  _dumpPropertiesCode() {\n    const codeString = super._dumpPropertiesCode() + `${this._codeVariableName}.clampCoordinates = ${this.clampCoordinates};\\n`;\n    return codeString;\n  }\n  /**\n   * Serializes this block in a JSON representation\n   * @returns the serialized block object\n   */\n  serialize() {\n    const serializationObject = super.serialize();\n    serializationObject.clampCoordinates = this.clampCoordinates;\n    return serializationObject;\n  }\n  _deserialize(serializationObject) {\n    super._deserialize(serializationObject);\n    this.clampCoordinates = serializationObject.clampCoordinates;\n  }\n}\n__decorate([editableInPropertyPage(\"Clamp Coordinates\", PropertyTypeForEdition.Boolean, \"ADVANCED\", {\n  notifiers: {\n    rebuild: true\n  }\n})], GeometryTextureFetchBlock.prototype, \"clampCoordinates\", void 0);\nRegisterClass(\"BABYLON.GeometryTextureFetchBlock\", GeometryTextureFetchBlock);","map":{"version":3,"names":["Vector4","RegisterClass","NodeGeometryBlockConnectionPointTypes","NodeGeometryBlock","PropertyTypeForEdition","editableInPropertyPage","GeometryTextureFetchBlock","constructor","name","clampCoordinates","registerInput","Texture","Vector2","registerOutput","Vector3","Float","getClassName","texture","inputs","coordinates","rgba","_outputs","rgb","r","g","b","a","_repeatClamp","num","Math","abs","_buildBlock","func","state","textureData","getConnectedValue","data","uv","u","max","min","x","v","y","floor","width","height","index","FromArray","_storedFunction","color","toVector3","z","w","_dumpPropertiesCode","codeString","_codeVariableName","serialize","serializationObject","_deserialize","__decorate","Boolean","notifiers","rebuild"],"sources":["../../../../../../../dev/core/src/Meshes/Node/Blocks/Textures/geometryTextureFetchBlock.ts"],"sourcesContent":["import { Vector4, type Vector2 } from \"core/Maths/math.vector\";\r\nimport { RegisterClass } from \"../../../../Misc/typeStore\";\r\nimport { NodeGeometryBlockConnectionPointTypes } from \"../../Enums/nodeGeometryConnectionPointTypes\";\r\nimport type { INodeGeometryTextureData } from \"../../Interfaces/nodeGeometryTextureData\";\r\nimport { NodeGeometryBlock } from \"../../nodeGeometryBlock\";\r\nimport type { NodeGeometryConnectionPoint } from \"../../nodeGeometryBlockConnectionPoint\";\r\nimport { PropertyTypeForEdition, editableInPropertyPage } from \"core/Decorators/nodeDecorator\";\r\nimport type { NodeGeometryBuildState } from \"../../nodeGeometryBuildState\";\r\n\r\n/**\r\n * Block used to fetch a color from texture data\r\n */\r\nexport class GeometryTextureFetchBlock extends NodeGeometryBlock {\r\n    /**\r\n     * Gets or sets a boolean indicating if coordinates should be clamped between 0 and 1\r\n     */\r\n    @editableInPropertyPage(\"Clamp Coordinates\", PropertyTypeForEdition.Boolean, \"ADVANCED\", { notifiers: { rebuild: true } })\r\n    public clampCoordinates = true;\r\n\r\n    /**\r\n     * Creates a new GeometryTextureFetchBlock\r\n     * @param name defines the block name\r\n     */\r\n    public constructor(name: string) {\r\n        super(name);\r\n\r\n        this.registerInput(\"texture\", NodeGeometryBlockConnectionPointTypes.Texture);\r\n        this.registerInput(\"coordinates\", NodeGeometryBlockConnectionPointTypes.Vector2);\r\n        this.registerOutput(\"rgba\", NodeGeometryBlockConnectionPointTypes.Vector4);\r\n        this.registerOutput(\"rgb\", NodeGeometryBlockConnectionPointTypes.Vector3);\r\n        this.registerOutput(\"r\", NodeGeometryBlockConnectionPointTypes.Float);\r\n        this.registerOutput(\"g\", NodeGeometryBlockConnectionPointTypes.Float);\r\n        this.registerOutput(\"b\", NodeGeometryBlockConnectionPointTypes.Float);\r\n        this.registerOutput(\"a\", NodeGeometryBlockConnectionPointTypes.Float);\r\n    }\r\n\r\n    /**\r\n     * Gets the current class name\r\n     * @returns the class name\r\n     */\r\n    public getClassName() {\r\n        return \"GeometryTextureFetchBlock\";\r\n    }\r\n\r\n    /**\r\n     * Gets the texture component\r\n     */\r\n    public get texture(): NodeGeometryConnectionPoint {\r\n        return this.inputs[0];\r\n    }\r\n\r\n    /**\r\n     * Gets the coordinates component\r\n     */\r\n    public get coordinates(): NodeGeometryConnectionPoint {\r\n        return this.inputs[1];\r\n    }\r\n\r\n    /**\r\n     * Gets the rgba component\r\n     */\r\n    public get rgba(): NodeGeometryConnectionPoint {\r\n        return this._outputs[0];\r\n    }\r\n\r\n    /**\r\n     * Gets the rgb component\r\n     */\r\n    public get rgb(): NodeGeometryConnectionPoint {\r\n        return this._outputs[1];\r\n    }\r\n\r\n    /**\r\n     * Gets the r component\r\n     */\r\n    public get r(): NodeGeometryConnectionPoint {\r\n        return this._outputs[2];\r\n    }\r\n\r\n    /**\r\n     * Gets the g component\r\n     */\r\n    public get g(): NodeGeometryConnectionPoint {\r\n        return this._outputs[3];\r\n    }\r\n\r\n    /**\r\n     * Gets the b component\r\n     */\r\n    public get b(): NodeGeometryConnectionPoint {\r\n        return this._outputs[4];\r\n    }\r\n\r\n    /**\r\n     * Gets the a component\r\n     */\r\n    public get a(): NodeGeometryConnectionPoint {\r\n        return this._outputs[5];\r\n    }\r\n\r\n    private _repeatClamp(num: number) {\r\n        if (num >= 0) {\r\n            return num % 1;\r\n        } else {\r\n            return 1 - (Math.abs(num) % 1);\r\n        }\r\n    }\r\n\r\n    protected _buildBlock() {\r\n        const func = (state: NodeGeometryBuildState) => {\r\n            const textureData = this.texture.getConnectedValue(state) as INodeGeometryTextureData;\r\n            if (!textureData || !textureData.data) {\r\n                return null;\r\n            }\r\n\r\n            const uv = this.coordinates.getConnectedValue(state) as Vector2;\r\n\r\n            if (!uv) {\r\n                return null;\r\n            }\r\n\r\n            const u = this.clampCoordinates ? Math.max(0, Math.min(uv.x, 1.0)) : this._repeatClamp(uv.x);\r\n            const v = this.clampCoordinates ? Math.max(0, Math.min(uv.y, 1.0)) : this._repeatClamp(uv.y);\r\n\r\n            const x = Math.floor(u * (textureData.width - 1));\r\n            const y = Math.floor(v * (textureData.height - 1));\r\n            const index = x + textureData.width * y;\r\n\r\n            return Vector4.FromArray(textureData.data, index * 4);\r\n        };\r\n\r\n        this.rgba._storedFunction = (state) => {\r\n            return func(state);\r\n        };\r\n\r\n        this.rgb._storedFunction = (state) => {\r\n            const color = func(state) as Vector4;\r\n            return color ? color.toVector3() : null;\r\n        };\r\n\r\n        this.r._storedFunction = (state) => {\r\n            const color = func(state) as Vector4;\r\n            return color ? color.x : null;\r\n        };\r\n\r\n        this.g._storedFunction = (state) => {\r\n            const color = func(state) as Vector4;\r\n            return color ? color.y : null;\r\n        };\r\n\r\n        this.b._storedFunction = (state) => {\r\n            const color = func(state) as Vector4;\r\n            return color ? color.z : null;\r\n        };\r\n\r\n        this.a._storedFunction = (state) => {\r\n            const color = func(state) as Vector4;\r\n            return color ? color.w : null;\r\n        };\r\n    }\r\n\r\n    protected _dumpPropertiesCode() {\r\n        const codeString = super._dumpPropertiesCode() + `${this._codeVariableName}.clampCoordinates = ${this.clampCoordinates};\\n`;\r\n        return codeString;\r\n    }\r\n\r\n    /**\r\n     * Serializes this block in a JSON representation\r\n     * @returns the serialized block object\r\n     */\r\n    public serialize(): any {\r\n        const serializationObject = super.serialize();\r\n\r\n        serializationObject.clampCoordinates = this.clampCoordinates;\r\n\r\n        return serializationObject;\r\n    }\r\n\r\n    public _deserialize(serializationObject: any) {\r\n        super._deserialize(serializationObject);\r\n\r\n        this.clampCoordinates = serializationObject.clampCoordinates;\r\n    }\r\n}\r\n\r\nRegisterClass(\"BABYLON.GeometryTextureFetchBlock\", GeometryTextureFetchBlock);\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}