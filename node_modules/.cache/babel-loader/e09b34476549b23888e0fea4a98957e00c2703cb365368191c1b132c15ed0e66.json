{"ast":null,"code":"import { ErrorCodes, RuntimeError } from \"../../Misc/error.js\";\nimport { VertexBuffer } from \"../../Buffers/buffer.js\";\nexport function getNativeTextureFormat(format, type) {\n  switch (format) {\n    // Depth (type is ignored)\n    case 15:\n      return _native.Engine.TEXTURE_FORMAT_D16;\n    case 16:\n      return _native.Engine.TEXTURE_FORMAT_D24;\n    case 13:\n      return _native.Engine.TEXTURE_FORMAT_D24S8;\n    case 14:\n      return _native.Engine.TEXTURE_FORMAT_D32F;\n    // Compressed (type is ignored)\n    case 36492:\n      return _native.Engine.TEXTURE_FORMAT_BC7;\n    case 36494:\n      return _native.Engine.TEXTURE_FORMAT_BC6H;\n    case 33779:\n      return _native.Engine.TEXTURE_FORMAT_BC3;\n    case 33778:\n      return _native.Engine.TEXTURE_FORMAT_BC2;\n    case 33777:\n      return _native.Engine.TEXTURE_FORMAT_BC1;\n    case 33776:\n      return _native.Engine.TEXTURE_FORMAT_BC1;\n    case 37808:\n      return _native.Engine.TEXTURE_FORMAT_ASTC4x4;\n    case 36196:\n      return _native.Engine.TEXTURE_FORMAT_ETC1;\n    case 37492:\n      return _native.Engine.TEXTURE_FORMAT_ETC2;\n    case 37496:\n      return _native.Engine.TEXTURE_FORMAT_ETC2A;\n    case 4:\n      {\n        switch (type) {\n          case 0:\n            return _native.Engine.TEXTURE_FORMAT_RGB8;\n          case 3:\n            return _native.Engine.TEXTURE_FORMAT_RGB8S;\n          case 6:\n            return _native.Engine.TEXTURE_FORMAT_RGB8I;\n          case 7:\n            return _native.Engine.TEXTURE_FORMAT_RGB8U;\n        }\n        break;\n      }\n    case 5:\n      {\n        switch (type) {\n          case 0:\n            return _native.Engine.TEXTURE_FORMAT_RGBA8;\n          case 1:\n            return _native.Engine.TEXTURE_FORMAT_RGBA32F;\n          case 2:\n            return _native.Engine.TEXTURE_FORMAT_RGBA16F;\n          case 3:\n            return _native.Engine.TEXTURE_FORMAT_RGBA8S;\n          case 4:\n            return _native.Engine.TEXTURE_FORMAT_RGBA16I;\n          case 5:\n            return _native.Engine.TEXTURE_FORMAT_RGBA16U;\n          case 6:\n            return _native.Engine.TEXTURE_FORMAT_RGBA32I;\n          case 7:\n            return _native.Engine.TEXTURE_FORMAT_RGBA32U;\n        }\n        break;\n      }\n    case 6:\n      {\n        switch (type) {\n          case 0:\n            return _native.Engine.TEXTURE_FORMAT_R8;\n          case 1:\n            return _native.Engine.TEXTURE_FORMAT_R32F;\n          case 2:\n            return _native.Engine.TEXTURE_FORMAT_R16F;\n          case 3:\n            return _native.Engine.TEXTURE_FORMAT_R8S;\n          case 4:\n            return _native.Engine.TEXTURE_FORMAT_R16S;\n          case 5:\n            return _native.Engine.TEXTURE_FORMAT_R16U;\n          case 6:\n            return _native.Engine.TEXTURE_FORMAT_R32I;\n          case 7:\n            return _native.Engine.TEXTURE_FORMAT_R32U;\n        }\n        break;\n      }\n    case 7:\n      {\n        switch (type) {\n          case 0:\n            return _native.Engine.TEXTURE_FORMAT_RG8;\n          case 1:\n            return _native.Engine.TEXTURE_FORMAT_RG32F;\n          case 2:\n            return _native.Engine.TEXTURE_FORMAT_RG16F;\n          case 3:\n            return _native.Engine.TEXTURE_FORMAT_RG8S;\n          case 4:\n            return _native.Engine.TEXTURE_FORMAT_RG16S;\n          case 5:\n            return _native.Engine.TEXTURE_FORMAT_RG16U;\n          case 6:\n            return _native.Engine.TEXTURE_FORMAT_RG32I;\n          case 7:\n            return _native.Engine.TEXTURE_FORMAT_RG32U;\n        }\n        break;\n      }\n    case 12:\n      {\n        switch (type) {\n          case 0:\n            return _native.Engine.TEXTURE_FORMAT_BGRA8;\n        }\n        break;\n      }\n  }\n  throw new RuntimeError(`Unsupported texture format or type: format ${format}, type ${type}.`, ErrorCodes.UnsupportedTextureError);\n}\nexport function getNativeSamplingMode(samplingMode) {\n  switch (samplingMode) {\n    case 1:\n      return _native.Engine.TEXTURE_NEAREST_NEAREST;\n    case 2:\n      return _native.Engine.TEXTURE_LINEAR_LINEAR;\n    case 3:\n      return _native.Engine.TEXTURE_LINEAR_LINEAR_MIPLINEAR;\n    case 4:\n      return _native.Engine.TEXTURE_NEAREST_NEAREST_MIPNEAREST;\n    case 5:\n      return _native.Engine.TEXTURE_NEAREST_LINEAR_MIPNEAREST;\n    case 6:\n      return _native.Engine.TEXTURE_NEAREST_LINEAR_MIPLINEAR;\n    case 7:\n      return _native.Engine.TEXTURE_NEAREST_LINEAR;\n    case 8:\n      return _native.Engine.TEXTURE_NEAREST_NEAREST_MIPLINEAR;\n    case 9:\n      return _native.Engine.TEXTURE_LINEAR_NEAREST_MIPNEAREST;\n    case 10:\n      return _native.Engine.TEXTURE_LINEAR_NEAREST_MIPLINEAR;\n    case 11:\n      return _native.Engine.TEXTURE_LINEAR_LINEAR_MIPNEAREST;\n    case 12:\n      return _native.Engine.TEXTURE_LINEAR_NEAREST;\n    default:\n      throw new Error(`Unsupported sampling mode: ${samplingMode}.`);\n  }\n}\nexport function getNativeAddressMode(wrapMode) {\n  switch (wrapMode) {\n    case 1:\n      return _native.Engine.ADDRESS_MODE_WRAP;\n    case 0:\n      return _native.Engine.ADDRESS_MODE_CLAMP;\n    case 2:\n      return _native.Engine.ADDRESS_MODE_MIRROR;\n    default:\n      throw new Error(\"Unexpected wrap mode: \" + wrapMode + \".\");\n  }\n}\nexport function getNativeStencilFunc(func) {\n  switch (func) {\n    case 513:\n      return _native.Engine.STENCIL_TEST_LESS;\n    case 515:\n      return _native.Engine.STENCIL_TEST_LEQUAL;\n    case 514:\n      return _native.Engine.STENCIL_TEST_EQUAL;\n    case 518:\n      return _native.Engine.STENCIL_TEST_GEQUAL;\n    case 516:\n      return _native.Engine.STENCIL_TEST_GREATER;\n    case 517:\n      return _native.Engine.STENCIL_TEST_NOTEQUAL;\n    case 512:\n      return _native.Engine.STENCIL_TEST_NEVER;\n    case 519:\n      return _native.Engine.STENCIL_TEST_ALWAYS;\n    default:\n      throw new Error(`Unsupported stencil func mode: ${func}.`);\n  }\n}\nexport function getNativeStencilOpFail(opFail) {\n  switch (opFail) {\n    case 7680:\n      return _native.Engine.STENCIL_OP_FAIL_S_KEEP;\n    case 0:\n      return _native.Engine.STENCIL_OP_FAIL_S_ZERO;\n    case 7681:\n      return _native.Engine.STENCIL_OP_FAIL_S_REPLACE;\n    case 7682:\n      return _native.Engine.STENCIL_OP_FAIL_S_INCR;\n    case 7683:\n      return _native.Engine.STENCIL_OP_FAIL_S_DECR;\n    case 5386:\n      return _native.Engine.STENCIL_OP_FAIL_S_INVERT;\n    case 34055:\n      return _native.Engine.STENCIL_OP_FAIL_S_INCRSAT;\n    case 34056:\n      return _native.Engine.STENCIL_OP_FAIL_S_DECRSAT;\n    default:\n      throw new Error(`Unsupported stencil OpFail mode: ${opFail}.`);\n  }\n}\nexport function getNativeStencilDepthFail(depthFail) {\n  switch (depthFail) {\n    case 7680:\n      return _native.Engine.STENCIL_OP_FAIL_Z_KEEP;\n    case 0:\n      return _native.Engine.STENCIL_OP_FAIL_Z_ZERO;\n    case 7681:\n      return _native.Engine.STENCIL_OP_FAIL_Z_REPLACE;\n    case 7682:\n      return _native.Engine.STENCIL_OP_FAIL_Z_INCR;\n    case 7683:\n      return _native.Engine.STENCIL_OP_FAIL_Z_DECR;\n    case 5386:\n      return _native.Engine.STENCIL_OP_FAIL_Z_INVERT;\n    case 34055:\n      return _native.Engine.STENCIL_OP_FAIL_Z_INCRSAT;\n    case 34056:\n      return _native.Engine.STENCIL_OP_FAIL_Z_DECRSAT;\n    default:\n      throw new Error(`Unsupported stencil depthFail mode: ${depthFail}.`);\n  }\n}\nexport function getNativeStencilDepthPass(opPass) {\n  switch (opPass) {\n    case 7680:\n      return _native.Engine.STENCIL_OP_PASS_Z_KEEP;\n    case 0:\n      return _native.Engine.STENCIL_OP_PASS_Z_ZERO;\n    case 7681:\n      return _native.Engine.STENCIL_OP_PASS_Z_REPLACE;\n    case 7682:\n      return _native.Engine.STENCIL_OP_PASS_Z_INCR;\n    case 7683:\n      return _native.Engine.STENCIL_OP_PASS_Z_DECR;\n    case 5386:\n      return _native.Engine.STENCIL_OP_PASS_Z_INVERT;\n    case 34055:\n      return _native.Engine.STENCIL_OP_PASS_Z_INCRSAT;\n    case 34056:\n      return _native.Engine.STENCIL_OP_PASS_Z_DECRSAT;\n    default:\n      throw new Error(`Unsupported stencil opPass mode: ${opPass}.`);\n  }\n}\nexport function getNativeAlphaMode(mode) {\n  switch (mode) {\n    case 0:\n      return _native.Engine.ALPHA_DISABLE;\n    case 1:\n      return _native.Engine.ALPHA_ADD;\n    case 2:\n      return _native.Engine.ALPHA_COMBINE;\n    case 3:\n      return _native.Engine.ALPHA_SUBTRACT;\n    case 4:\n      return _native.Engine.ALPHA_MULTIPLY;\n    case 5:\n      return _native.Engine.ALPHA_MAXIMIZED;\n    case 6:\n      return _native.Engine.ALPHA_ONEONE;\n    case 7:\n      return _native.Engine.ALPHA_PREMULTIPLIED;\n    case 8:\n      return _native.Engine.ALPHA_PREMULTIPLIED_PORTERDUFF;\n    case 9:\n      return _native.Engine.ALPHA_INTERPOLATE;\n    case 10:\n      return _native.Engine.ALPHA_SCREENMODE;\n    default:\n      throw new Error(`Unsupported alpha mode: ${mode}.`);\n  }\n}\nexport function getNativeAttribType(type) {\n  switch (type) {\n    case VertexBuffer.BYTE:\n      return _native.Engine.ATTRIB_TYPE_INT8;\n    case VertexBuffer.UNSIGNED_BYTE:\n      return _native.Engine.ATTRIB_TYPE_UINT8;\n    case VertexBuffer.SHORT:\n      return _native.Engine.ATTRIB_TYPE_INT16;\n    case VertexBuffer.UNSIGNED_SHORT:\n      return _native.Engine.ATTRIB_TYPE_UINT16;\n    case VertexBuffer.FLOAT:\n      return _native.Engine.ATTRIB_TYPE_FLOAT;\n    default:\n      throw new Error(`Unsupported attribute type: ${type}.`);\n  }\n}","map":{"version":3,"names":["ErrorCodes","RuntimeError","VertexBuffer","getNativeTextureFormat","format","type","_native","Engine","TEXTURE_FORMAT_D16","TEXTURE_FORMAT_D24","TEXTURE_FORMAT_D24S8","TEXTURE_FORMAT_D32F","TEXTURE_FORMAT_BC7","TEXTURE_FORMAT_BC6H","TEXTURE_FORMAT_BC3","TEXTURE_FORMAT_BC2","TEXTURE_FORMAT_BC1","TEXTURE_FORMAT_ASTC4x4","TEXTURE_FORMAT_ETC1","TEXTURE_FORMAT_ETC2","TEXTURE_FORMAT_ETC2A","TEXTURE_FORMAT_RGB8","TEXTURE_FORMAT_RGB8S","TEXTURE_FORMAT_RGB8I","TEXTURE_FORMAT_RGB8U","TEXTURE_FORMAT_RGBA8","TEXTURE_FORMAT_RGBA32F","TEXTURE_FORMAT_RGBA16F","TEXTURE_FORMAT_RGBA8S","TEXTURE_FORMAT_RGBA16I","TEXTURE_FORMAT_RGBA16U","TEXTURE_FORMAT_RGBA32I","TEXTURE_FORMAT_RGBA32U","TEXTURE_FORMAT_R8","TEXTURE_FORMAT_R32F","TEXTURE_FORMAT_R16F","TEXTURE_FORMAT_R8S","TEXTURE_FORMAT_R16S","TEXTURE_FORMAT_R16U","TEXTURE_FORMAT_R32I","TEXTURE_FORMAT_R32U","TEXTURE_FORMAT_RG8","TEXTURE_FORMAT_RG32F","TEXTURE_FORMAT_RG16F","TEXTURE_FORMAT_RG8S","TEXTURE_FORMAT_RG16S","TEXTURE_FORMAT_RG16U","TEXTURE_FORMAT_RG32I","TEXTURE_FORMAT_RG32U","TEXTURE_FORMAT_BGRA8","UnsupportedTextureError","getNativeSamplingMode","samplingMode","TEXTURE_NEAREST_NEAREST","TEXTURE_LINEAR_LINEAR","TEXTURE_LINEAR_LINEAR_MIPLINEAR","TEXTURE_NEAREST_NEAREST_MIPNEAREST","TEXTURE_NEAREST_LINEAR_MIPNEAREST","TEXTURE_NEAREST_LINEAR_MIPLINEAR","TEXTURE_NEAREST_LINEAR","TEXTURE_NEAREST_NEAREST_MIPLINEAR","TEXTURE_LINEAR_NEAREST_MIPNEAREST","TEXTURE_LINEAR_NEAREST_MIPLINEAR","TEXTURE_LINEAR_LINEAR_MIPNEAREST","TEXTURE_LINEAR_NEAREST","Error","getNativeAddressMode","wrapMode","ADDRESS_MODE_WRAP","ADDRESS_MODE_CLAMP","ADDRESS_MODE_MIRROR","getNativeStencilFunc","func","STENCIL_TEST_LESS","STENCIL_TEST_LEQUAL","STENCIL_TEST_EQUAL","STENCIL_TEST_GEQUAL","STENCIL_TEST_GREATER","STENCIL_TEST_NOTEQUAL","STENCIL_TEST_NEVER","STENCIL_TEST_ALWAYS","getNativeStencilOpFail","opFail","STENCIL_OP_FAIL_S_KEEP","STENCIL_OP_FAIL_S_ZERO","STENCIL_OP_FAIL_S_REPLACE","STENCIL_OP_FAIL_S_INCR","STENCIL_OP_FAIL_S_DECR","STENCIL_OP_FAIL_S_INVERT","STENCIL_OP_FAIL_S_INCRSAT","STENCIL_OP_FAIL_S_DECRSAT","getNativeStencilDepthFail","depthFail","STENCIL_OP_FAIL_Z_KEEP","STENCIL_OP_FAIL_Z_ZERO","STENCIL_OP_FAIL_Z_REPLACE","STENCIL_OP_FAIL_Z_INCR","STENCIL_OP_FAIL_Z_DECR","STENCIL_OP_FAIL_Z_INVERT","STENCIL_OP_FAIL_Z_INCRSAT","STENCIL_OP_FAIL_Z_DECRSAT","getNativeStencilDepthPass","opPass","STENCIL_OP_PASS_Z_KEEP","STENCIL_OP_PASS_Z_ZERO","STENCIL_OP_PASS_Z_REPLACE","STENCIL_OP_PASS_Z_INCR","STENCIL_OP_PASS_Z_DECR","STENCIL_OP_PASS_Z_INVERT","STENCIL_OP_PASS_Z_INCRSAT","STENCIL_OP_PASS_Z_DECRSAT","getNativeAlphaMode","mode","ALPHA_DISABLE","ALPHA_ADD","ALPHA_COMBINE","ALPHA_SUBTRACT","ALPHA_MULTIPLY","ALPHA_MAXIMIZED","ALPHA_ONEONE","ALPHA_PREMULTIPLIED","ALPHA_PREMULTIPLIED_PORTERDUFF","ALPHA_INTERPOLATE","ALPHA_SCREENMODE","getNativeAttribType","BYTE","ATTRIB_TYPE_INT8","UNSIGNED_BYTE","ATTRIB_TYPE_UINT8","SHORT","ATTRIB_TYPE_INT16","UNSIGNED_SHORT","ATTRIB_TYPE_UINT16","FLOAT","ATTRIB_TYPE_FLOAT"],"sources":["../../../../../dev/core/src/Engines/Native/nativeHelpers.ts"],"sourcesContent":["import { ErrorCodes, RuntimeError } from \"core/Misc/error\";\r\nimport { Constants } from \"../constants\";\r\nimport type { INative } from \"./nativeInterfaces\";\r\nimport { VertexBuffer } from \"core/Buffers/buffer\";\r\n\r\ndeclare const _native: INative;\r\n\r\nexport function getNativeTextureFormat(format: number, type: number): number {\r\n    switch (format) {\r\n        // Depth (type is ignored)\r\n        case Constants.TEXTUREFORMAT_DEPTH16:\r\n            return _native.Engine.TEXTURE_FORMAT_D16;\r\n        case Constants.TEXTUREFORMAT_DEPTH24:\r\n            return _native.Engine.TEXTURE_FORMAT_D24;\r\n        case Constants.TEXTUREFORMAT_DEPTH24_STENCIL8:\r\n            return _native.Engine.TEXTURE_FORMAT_D24S8;\r\n        case Constants.TEXTUREFORMAT_DEPTH32_FLOAT:\r\n            return _native.Engine.TEXTURE_FORMAT_D32F;\r\n\r\n        // Compressed (type is ignored)\r\n        case Constants.TEXTUREFORMAT_COMPRESSED_RGBA_BPTC_UNORM:\r\n            return _native.Engine.TEXTURE_FORMAT_BC7;\r\n        case Constants.TEXTUREFORMAT_COMPRESSED_RGB_BPTC_SIGNED_FLOAT:\r\n            return _native.Engine.TEXTURE_FORMAT_BC6H;\r\n        case Constants.TEXTUREFORMAT_COMPRESSED_RGBA_S3TC_DXT5:\r\n            return _native.Engine.TEXTURE_FORMAT_BC3;\r\n        case Constants.TEXTUREFORMAT_COMPRESSED_RGBA_S3TC_DXT3:\r\n            return _native.Engine.TEXTURE_FORMAT_BC2;\r\n        case Constants.TEXTUREFORMAT_COMPRESSED_RGBA_S3TC_DXT1:\r\n            return _native.Engine.TEXTURE_FORMAT_BC1;\r\n        case Constants.TEXTUREFORMAT_COMPRESSED_RGB_S3TC_DXT1:\r\n            return _native.Engine.TEXTURE_FORMAT_BC1;\r\n        case Constants.TEXTUREFORMAT_COMPRESSED_RGBA_ASTC_4x4:\r\n            return _native.Engine.TEXTURE_FORMAT_ASTC4x4;\r\n        case Constants.TEXTUREFORMAT_COMPRESSED_RGB_ETC1_WEBGL:\r\n            return _native.Engine.TEXTURE_FORMAT_ETC1;\r\n        case Constants.TEXTUREFORMAT_COMPRESSED_RGB8_ETC2:\r\n            return _native.Engine.TEXTURE_FORMAT_ETC2;\r\n        case Constants.TEXTUREFORMAT_COMPRESSED_RGBA8_ETC2_EAC:\r\n            return _native.Engine.TEXTURE_FORMAT_ETC2A;\r\n\r\n        case Constants.TEXTUREFORMAT_RGB: {\r\n            switch (type) {\r\n                case Constants.TEXTURETYPE_UNSIGNED_BYTE:\r\n                    return _native.Engine.TEXTURE_FORMAT_RGB8;\r\n                case Constants.TEXTURETYPE_BYTE:\r\n                    return _native.Engine.TEXTURE_FORMAT_RGB8S;\r\n                case Constants.TEXTURETYPE_INT:\r\n                    return _native.Engine.TEXTURE_FORMAT_RGB8I;\r\n                case Constants.TEXTURETYPE_UNSIGNED_INTEGER:\r\n                    return _native.Engine.TEXTURE_FORMAT_RGB8U;\r\n            }\r\n            break;\r\n        }\r\n        case Constants.TEXTUREFORMAT_RGBA: {\r\n            switch (type) {\r\n                case Constants.TEXTURETYPE_UNSIGNED_BYTE:\r\n                    return _native.Engine.TEXTURE_FORMAT_RGBA8;\r\n                case Constants.TEXTURETYPE_FLOAT:\r\n                    return _native.Engine.TEXTURE_FORMAT_RGBA32F;\r\n                case Constants.TEXTURETYPE_HALF_FLOAT:\r\n                    return _native.Engine.TEXTURE_FORMAT_RGBA16F;\r\n                case Constants.TEXTURETYPE_BYTE:\r\n                    return _native.Engine.TEXTURE_FORMAT_RGBA8S;\r\n                case Constants.TEXTURETYPE_SHORT:\r\n                    return _native.Engine.TEXTURE_FORMAT_RGBA16I;\r\n                case Constants.TEXTURETYPE_UNSIGNED_SHORT:\r\n                    return _native.Engine.TEXTURE_FORMAT_RGBA16U;\r\n                case Constants.TEXTURETYPE_INT:\r\n                    return _native.Engine.TEXTURE_FORMAT_RGBA32I;\r\n                case Constants.TEXTURETYPE_UNSIGNED_INTEGER:\r\n                    return _native.Engine.TEXTURE_FORMAT_RGBA32U;\r\n            }\r\n            break;\r\n        }\r\n        case Constants.TEXTUREFORMAT_R: {\r\n            switch (type) {\r\n                case Constants.TEXTURETYPE_UNSIGNED_BYTE:\r\n                    return _native.Engine.TEXTURE_FORMAT_R8;\r\n                case Constants.TEXTURETYPE_FLOAT:\r\n                    return _native.Engine.TEXTURE_FORMAT_R32F;\r\n                case Constants.TEXTURETYPE_HALF_FLOAT:\r\n                    return _native.Engine.TEXTURE_FORMAT_R16F;\r\n                case Constants.TEXTURETYPE_BYTE:\r\n                    return _native.Engine.TEXTURE_FORMAT_R8S;\r\n                case Constants.TEXTURETYPE_SHORT:\r\n                    return _native.Engine.TEXTURE_FORMAT_R16S;\r\n                case Constants.TEXTURETYPE_UNSIGNED_SHORT:\r\n                    return _native.Engine.TEXTURE_FORMAT_R16U;\r\n                case Constants.TEXTURETYPE_INT:\r\n                    return _native.Engine.TEXTURE_FORMAT_R32I;\r\n                case Constants.TEXTURETYPE_UNSIGNED_INTEGER:\r\n                    return _native.Engine.TEXTURE_FORMAT_R32U;\r\n            }\r\n            break;\r\n        }\r\n        case Constants.TEXTUREFORMAT_RG: {\r\n            switch (type) {\r\n                case Constants.TEXTURETYPE_UNSIGNED_BYTE:\r\n                    return _native.Engine.TEXTURE_FORMAT_RG8;\r\n                case Constants.TEXTURETYPE_FLOAT:\r\n                    return _native.Engine.TEXTURE_FORMAT_RG32F;\r\n                case Constants.TEXTURETYPE_HALF_FLOAT:\r\n                    return _native.Engine.TEXTURE_FORMAT_RG16F;\r\n                case Constants.TEXTURETYPE_BYTE:\r\n                    return _native.Engine.TEXTURE_FORMAT_RG8S;\r\n                case Constants.TEXTURETYPE_SHORT:\r\n                    return _native.Engine.TEXTURE_FORMAT_RG16S;\r\n                case Constants.TEXTURETYPE_UNSIGNED_SHORT:\r\n                    return _native.Engine.TEXTURE_FORMAT_RG16U;\r\n                case Constants.TEXTURETYPE_INT:\r\n                    return _native.Engine.TEXTURE_FORMAT_RG32I;\r\n                case Constants.TEXTURETYPE_UNSIGNED_INTEGER:\r\n                    return _native.Engine.TEXTURE_FORMAT_RG32U;\r\n            }\r\n            break;\r\n        }\r\n        case Constants.TEXTUREFORMAT_BGRA: {\r\n            switch (type) {\r\n                case Constants.TEXTURETYPE_UNSIGNED_BYTE:\r\n                    return _native.Engine.TEXTURE_FORMAT_BGRA8;\r\n            }\r\n            break;\r\n        }\r\n    }\r\n\r\n    throw new RuntimeError(`Unsupported texture format or type: format ${format}, type ${type}.`, ErrorCodes.UnsupportedTextureError);\r\n}\r\n\r\nexport function getNativeSamplingMode(samplingMode: number): number {\r\n    switch (samplingMode) {\r\n        case Constants.TEXTURE_NEAREST_NEAREST:\r\n            return _native.Engine.TEXTURE_NEAREST_NEAREST;\r\n        case Constants.TEXTURE_LINEAR_LINEAR:\r\n            return _native.Engine.TEXTURE_LINEAR_LINEAR;\r\n        case Constants.TEXTURE_LINEAR_LINEAR_MIPLINEAR:\r\n            return _native.Engine.TEXTURE_LINEAR_LINEAR_MIPLINEAR;\r\n        case Constants.TEXTURE_NEAREST_NEAREST_MIPNEAREST:\r\n            return _native.Engine.TEXTURE_NEAREST_NEAREST_MIPNEAREST;\r\n        case Constants.TEXTURE_NEAREST_LINEAR_MIPNEAREST:\r\n            return _native.Engine.TEXTURE_NEAREST_LINEAR_MIPNEAREST;\r\n        case Constants.TEXTURE_NEAREST_LINEAR_MIPLINEAR:\r\n            return _native.Engine.TEXTURE_NEAREST_LINEAR_MIPLINEAR;\r\n        case Constants.TEXTURE_NEAREST_LINEAR:\r\n            return _native.Engine.TEXTURE_NEAREST_LINEAR;\r\n        case Constants.TEXTURE_NEAREST_NEAREST_MIPLINEAR:\r\n            return _native.Engine.TEXTURE_NEAREST_NEAREST_MIPLINEAR;\r\n        case Constants.TEXTURE_LINEAR_NEAREST_MIPNEAREST:\r\n            return _native.Engine.TEXTURE_LINEAR_NEAREST_MIPNEAREST;\r\n        case Constants.TEXTURE_LINEAR_NEAREST_MIPLINEAR:\r\n            return _native.Engine.TEXTURE_LINEAR_NEAREST_MIPLINEAR;\r\n        case Constants.TEXTURE_LINEAR_LINEAR_MIPNEAREST:\r\n            return _native.Engine.TEXTURE_LINEAR_LINEAR_MIPNEAREST;\r\n        case Constants.TEXTURE_LINEAR_NEAREST:\r\n            return _native.Engine.TEXTURE_LINEAR_NEAREST;\r\n        default:\r\n            throw new Error(`Unsupported sampling mode: ${samplingMode}.`);\r\n    }\r\n}\r\n\r\nexport function getNativeAddressMode(wrapMode: number): number {\r\n    switch (wrapMode) {\r\n        case Constants.TEXTURE_WRAP_ADDRESSMODE:\r\n            return _native.Engine.ADDRESS_MODE_WRAP;\r\n        case Constants.TEXTURE_CLAMP_ADDRESSMODE:\r\n            return _native.Engine.ADDRESS_MODE_CLAMP;\r\n        case Constants.TEXTURE_MIRROR_ADDRESSMODE:\r\n            return _native.Engine.ADDRESS_MODE_MIRROR;\r\n        default:\r\n            throw new Error(\"Unexpected wrap mode: \" + wrapMode + \".\");\r\n    }\r\n}\r\n\r\nexport function getNativeStencilFunc(func: number): number {\r\n    switch (func) {\r\n        case Constants.LESS:\r\n            return _native.Engine.STENCIL_TEST_LESS;\r\n        case Constants.LEQUAL:\r\n            return _native.Engine.STENCIL_TEST_LEQUAL;\r\n        case Constants.EQUAL:\r\n            return _native.Engine.STENCIL_TEST_EQUAL;\r\n        case Constants.GEQUAL:\r\n            return _native.Engine.STENCIL_TEST_GEQUAL;\r\n        case Constants.GREATER:\r\n            return _native.Engine.STENCIL_TEST_GREATER;\r\n        case Constants.NOTEQUAL:\r\n            return _native.Engine.STENCIL_TEST_NOTEQUAL;\r\n        case Constants.NEVER:\r\n            return _native.Engine.STENCIL_TEST_NEVER;\r\n        case Constants.ALWAYS:\r\n            return _native.Engine.STENCIL_TEST_ALWAYS;\r\n        default:\r\n            throw new Error(`Unsupported stencil func mode: ${func}.`);\r\n    }\r\n}\r\n\r\nexport function getNativeStencilOpFail(opFail: number): number {\r\n    switch (opFail) {\r\n        case Constants.KEEP:\r\n            return _native.Engine.STENCIL_OP_FAIL_S_KEEP;\r\n        case Constants.ZERO:\r\n            return _native.Engine.STENCIL_OP_FAIL_S_ZERO;\r\n        case Constants.REPLACE:\r\n            return _native.Engine.STENCIL_OP_FAIL_S_REPLACE;\r\n        case Constants.INCR:\r\n            return _native.Engine.STENCIL_OP_FAIL_S_INCR;\r\n        case Constants.DECR:\r\n            return _native.Engine.STENCIL_OP_FAIL_S_DECR;\r\n        case Constants.INVERT:\r\n            return _native.Engine.STENCIL_OP_FAIL_S_INVERT;\r\n        case Constants.INCR_WRAP:\r\n            return _native.Engine.STENCIL_OP_FAIL_S_INCRSAT;\r\n        case Constants.DECR_WRAP:\r\n            return _native.Engine.STENCIL_OP_FAIL_S_DECRSAT;\r\n        default:\r\n            throw new Error(`Unsupported stencil OpFail mode: ${opFail}.`);\r\n    }\r\n}\r\n\r\nexport function getNativeStencilDepthFail(depthFail: number): number {\r\n    switch (depthFail) {\r\n        case Constants.KEEP:\r\n            return _native.Engine.STENCIL_OP_FAIL_Z_KEEP;\r\n        case Constants.ZERO:\r\n            return _native.Engine.STENCIL_OP_FAIL_Z_ZERO;\r\n        case Constants.REPLACE:\r\n            return _native.Engine.STENCIL_OP_FAIL_Z_REPLACE;\r\n        case Constants.INCR:\r\n            return _native.Engine.STENCIL_OP_FAIL_Z_INCR;\r\n        case Constants.DECR:\r\n            return _native.Engine.STENCIL_OP_FAIL_Z_DECR;\r\n        case Constants.INVERT:\r\n            return _native.Engine.STENCIL_OP_FAIL_Z_INVERT;\r\n        case Constants.INCR_WRAP:\r\n            return _native.Engine.STENCIL_OP_FAIL_Z_INCRSAT;\r\n        case Constants.DECR_WRAP:\r\n            return _native.Engine.STENCIL_OP_FAIL_Z_DECRSAT;\r\n        default:\r\n            throw new Error(`Unsupported stencil depthFail mode: ${depthFail}.`);\r\n    }\r\n}\r\n\r\nexport function getNativeStencilDepthPass(opPass: number): number {\r\n    switch (opPass) {\r\n        case Constants.KEEP:\r\n            return _native.Engine.STENCIL_OP_PASS_Z_KEEP;\r\n        case Constants.ZERO:\r\n            return _native.Engine.STENCIL_OP_PASS_Z_ZERO;\r\n        case Constants.REPLACE:\r\n            return _native.Engine.STENCIL_OP_PASS_Z_REPLACE;\r\n        case Constants.INCR:\r\n            return _native.Engine.STENCIL_OP_PASS_Z_INCR;\r\n        case Constants.DECR:\r\n            return _native.Engine.STENCIL_OP_PASS_Z_DECR;\r\n        case Constants.INVERT:\r\n            return _native.Engine.STENCIL_OP_PASS_Z_INVERT;\r\n        case Constants.INCR_WRAP:\r\n            return _native.Engine.STENCIL_OP_PASS_Z_INCRSAT;\r\n        case Constants.DECR_WRAP:\r\n            return _native.Engine.STENCIL_OP_PASS_Z_DECRSAT;\r\n        default:\r\n            throw new Error(`Unsupported stencil opPass mode: ${opPass}.`);\r\n    }\r\n}\r\n\r\nexport function getNativeAlphaMode(mode: number): number {\r\n    switch (mode) {\r\n        case Constants.ALPHA_DISABLE:\r\n            return _native.Engine.ALPHA_DISABLE;\r\n        case Constants.ALPHA_ADD:\r\n            return _native.Engine.ALPHA_ADD;\r\n        case Constants.ALPHA_COMBINE:\r\n            return _native.Engine.ALPHA_COMBINE;\r\n        case Constants.ALPHA_SUBTRACT:\r\n            return _native.Engine.ALPHA_SUBTRACT;\r\n        case Constants.ALPHA_MULTIPLY:\r\n            return _native.Engine.ALPHA_MULTIPLY;\r\n        case Constants.ALPHA_MAXIMIZED:\r\n            return _native.Engine.ALPHA_MAXIMIZED;\r\n        case Constants.ALPHA_ONEONE:\r\n            return _native.Engine.ALPHA_ONEONE;\r\n        case Constants.ALPHA_PREMULTIPLIED:\r\n            return _native.Engine.ALPHA_PREMULTIPLIED;\r\n        case Constants.ALPHA_PREMULTIPLIED_PORTERDUFF:\r\n            return _native.Engine.ALPHA_PREMULTIPLIED_PORTERDUFF;\r\n        case Constants.ALPHA_INTERPOLATE:\r\n            return _native.Engine.ALPHA_INTERPOLATE;\r\n        case Constants.ALPHA_SCREENMODE:\r\n            return _native.Engine.ALPHA_SCREENMODE;\r\n        default:\r\n            throw new Error(`Unsupported alpha mode: ${mode}.`);\r\n    }\r\n}\r\n\r\nexport function getNativeAttribType(type: number): number {\r\n    switch (type) {\r\n        case VertexBuffer.BYTE:\r\n            return _native.Engine.ATTRIB_TYPE_INT8;\r\n        case VertexBuffer.UNSIGNED_BYTE:\r\n            return _native.Engine.ATTRIB_TYPE_UINT8;\r\n        case VertexBuffer.SHORT:\r\n            return _native.Engine.ATTRIB_TYPE_INT16;\r\n        case VertexBuffer.UNSIGNED_SHORT:\r\n            return _native.Engine.ATTRIB_TYPE_UINT16;\r\n        case VertexBuffer.FLOAT:\r\n            return _native.Engine.ATTRIB_TYPE_FLOAT;\r\n        default:\r\n            throw new Error(`Unsupported attribute type: ${type}.`);\r\n    }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}