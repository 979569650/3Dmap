{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { CreateBox } from \"@babylonjs/core/Meshes/Builders/boxBuilder.js\";\nimport { TransformNode } from \"@babylonjs/core/Meshes/transformNode.js\";\nimport { Vector3 } from \"@babylonjs/core/Maths/math.vector.js\";\nimport { HandleMaterial } from \"../materials/handle/handleMaterial.js\";\nimport { BaseSixDofDragBehavior } from \"@babylonjs/core/Behaviors/Meshes/baseSixDofDragBehavior.js\";\n/**\n * State of the handle regarding user interaction\n */\nexport var HandleState;\n(function (HandleState) {\n  /**\n   * Handle is idle\n   */\n  HandleState[HandleState[\"IDLE\"] = 0] = \"IDLE\";\n  /**\n   * Handle is hovered\n   */\n  HandleState[HandleState[\"HOVER\"] = 1] = \"HOVER\";\n  /**\n   * Handle is dragged\n   */\n  HandleState[HandleState[\"DRAG\"] = 2] = \"DRAG\";\n})(HandleState || (HandleState = {}));\n/**\n * Base class for SlateGizmo handles\n */\nexport class GizmoHandle {\n  /**\n   * The current state of the handle\n   */\n  get state() {\n    return this._state;\n  }\n  /**\n   * Returns the gizmo carrying this handle\n   */\n  get gizmo() {\n    return this._gizmo;\n  }\n  /**\n   * Sets hover state\n   */\n  set hover(value) {\n    if (value) {\n      this._state |= HandleState.HOVER;\n    } else {\n      this._state &= ~HandleState.HOVER;\n    }\n    this._updateMaterial();\n  }\n  /**\n   * Sets drag state\n   */\n  set drag(value) {\n    if (value) {\n      this._state |= HandleState.DRAG;\n    } else {\n      this._state &= ~HandleState.DRAG;\n    }\n    this._updateMaterial();\n  }\n  /**\n   * Creates a handle for a SlateGizmo\n   * @param gizmo associated SlateGizmo\n   * @param scene scene\n   */\n  constructor(gizmo, scene) {\n    this._state = HandleState.IDLE;\n    this._materials = [];\n    this._scene = scene;\n    this._gizmo = gizmo;\n    this.node = this.createNode();\n    this.node.reservedDataStore = {\n      handle: this\n    };\n  }\n  _createMaterial(positionOffset) {\n    const mat = new HandleMaterial(\"handle\", this._scene);\n    if (positionOffset) {\n      mat._positionOffset = positionOffset;\n    }\n    return mat;\n  }\n  _updateMaterial() {\n    const state = this._state;\n    for (const mat of this._materials) {\n      mat.hover = false;\n      mat.drag = false;\n    }\n    if (state & HandleState.DRAG) {\n      for (const mat of this._materials) {\n        mat.drag = true;\n      }\n    } else if (state & HandleState.HOVER) {\n      for (const mat of this._materials) {\n        mat.hover = true;\n      }\n    }\n  }\n  /**\n   * Binds callbacks from dragging interaction\n   * @param dragStartFn Function to call on drag start\n   * @param dragFn Function to call on drag\n   * @param dragEndFn Function to call on drag end\n   */\n  setDragBehavior(dragStartFn, dragFn, dragEndFn) {\n    const dragBehavior = new BaseSixDofDragBehavior();\n    this._dragBehavior = dragBehavior;\n    this._dragStartObserver = dragBehavior.onDragStartObservable.add(dragStartFn);\n    this._draggingObserver = dragBehavior.onDragObservable.add(dragFn);\n    this._dragEndObserver = dragBehavior.onDragEndObservable.add(dragEndFn);\n    this._dragBehavior.attach(this.node);\n  }\n  /**\n   * Disposes the handle\n   */\n  dispose() {\n    this._dragBehavior.onDragStartObservable.remove(this._dragStartObserver);\n    this._dragBehavior.onDragObservable.remove(this._draggingObserver);\n    this._dragBehavior.onDragEndObservable.remove(this._dragEndObserver);\n    this._dragBehavior.detach();\n    for (const material of this._materials) {\n      material.dispose();\n    }\n    this.node.dispose();\n  }\n}\n/**\n * Side handle class that rotates the slate\n */\nexport class SideHandle extends GizmoHandle {\n  /**\n   * Creates the meshes and parent node of the handle\n   * @returns created node\n   */\n  createNode() {\n    // Create a simple vertical rectangle\n    const verticalBox = CreateBox(\"sideVert\", {\n      width: 1,\n      height: 10,\n      depth: 0.1\n    }, this._scene);\n    const sideNode = new TransformNode(\"side\", this._scene);\n    verticalBox.parent = sideNode;\n    const mat = this._createMaterial();\n    verticalBox.material = mat;\n    verticalBox.isNearGrabbable = true;\n    this._materials.push(mat);\n    return sideNode;\n  }\n}\n/**\n * Corner handle that resizes the slate\n */\nexport class CornerHandle extends GizmoHandle {\n  /**\n   * Creates the meshes and parent node of the handle\n   * @returns created node\n   */\n  createNode() {\n    // Create 2 boxes making a bottom left corner\n    const horizontalBox = CreateBox(\"angleHor\", {\n      width: 3,\n      height: 1,\n      depth: 0.1\n    }, this._scene);\n    const verticalBox = CreateBox(\"angleVert\", {\n      width: 1,\n      height: 3,\n      depth: 0.1\n    }, this._scene);\n    const angleNode = new TransformNode(\"angle\", this._scene);\n    horizontalBox.parent = angleNode;\n    verticalBox.parent = angleNode;\n    horizontalBox.material = this._createMaterial(new Vector3(1, 0, 0));\n    verticalBox.material = this._createMaterial(new Vector3(0, 1, 0));\n    verticalBox.isNearGrabbable = true;\n    horizontalBox.isNearGrabbable = true;\n    this._materials.push(horizontalBox.material);\n    this._materials.push(verticalBox.material);\n    return angleNode;\n  }\n}","map":{"version":3,"names":["CreateBox","TransformNode","Vector3","HandleMaterial","BaseSixDofDragBehavior","HandleState","GizmoHandle","state","_state","gizmo","_gizmo","hover","value","HOVER","_updateMaterial","drag","DRAG","constructor","scene","IDLE","_materials","_scene","node","createNode","reservedDataStore","handle","_createMaterial","positionOffset","mat","_positionOffset","setDragBehavior","dragStartFn","dragFn","dragEndFn","dragBehavior","_dragBehavior","_dragStartObserver","onDragStartObservable","add","_draggingObserver","onDragObservable","_dragEndObserver","onDragEndObservable","attach","dispose","remove","detach","material","SideHandle","verticalBox","width","height","depth","sideNode","parent","isNearGrabbable","push","CornerHandle","horizontalBox","angleNode"],"sources":["../../../../../dev/gui/src/3D/gizmos/gizmoHandle.ts"],"sourcesContent":["import type { Scene } from \"core/scene\";\r\nimport { CreateBox } from \"core/Meshes/Builders/boxBuilder\";\r\nimport { TransformNode } from \"core/Meshes/transformNode\";\r\nimport { Vector3 } from \"core/Maths/math.vector\";\r\nimport { HandleMaterial } from \"../materials/handle/handleMaterial\";\r\nimport type { SlateGizmo } from \"./slateGizmo\";\r\nimport { BaseSixDofDragBehavior } from \"core/Behaviors/Meshes/baseSixDofDragBehavior\";\r\nimport type { Nullable } from \"core/types\";\r\nimport type { Observer } from \"core/Misc/observable\";\r\n\r\n/**\r\n * State of the handle regarding user interaction\r\n */\r\nexport enum HandleState {\r\n    /**\r\n     * Handle is idle\r\n     */\r\n    IDLE = 0,\r\n    /**\r\n     * Handle is hovered\r\n     */\r\n    HOVER = 1,\r\n    /**\r\n     * Handle is dragged\r\n     */\r\n    DRAG = 2,\r\n}\r\n\r\n/**\r\n * Base class for SlateGizmo handles\r\n */\r\nexport abstract class GizmoHandle {\r\n    protected _scene: Scene;\r\n    protected _state: HandleState = HandleState.IDLE;\r\n    protected _materials: HandleMaterial[] = [];\r\n\r\n    private _dragStartObserver: Nullable<Observer<any>>;\r\n    private _draggingObserver: Nullable<Observer<any>>;\r\n    private _dragEndObserver: Nullable<Observer<any>>;\r\n    /**\r\n     * @internal\r\n     */\r\n    public _dragBehavior: BaseSixDofDragBehavior;\r\n\r\n    /**\r\n     * The current state of the handle\r\n     */\r\n    public get state(): HandleState {\r\n        return this._state;\r\n    }\r\n\r\n    private _gizmo: SlateGizmo;\r\n\r\n    /**\r\n     * Returns the gizmo carrying this handle\r\n     */\r\n    public get gizmo() {\r\n        return this._gizmo;\r\n    }\r\n\r\n    /**\r\n     * Sets hover state\r\n     */\r\n    public set hover(value: boolean) {\r\n        if (value) {\r\n            this._state |= HandleState.HOVER;\r\n        } else {\r\n            this._state &= ~HandleState.HOVER;\r\n        }\r\n\r\n        this._updateMaterial();\r\n    }\r\n    /**\r\n     * Sets drag state\r\n     */\r\n    public set drag(value: boolean) {\r\n        if (value) {\r\n            this._state |= HandleState.DRAG;\r\n        } else {\r\n            this._state &= ~HandleState.DRAG;\r\n        }\r\n\r\n        this._updateMaterial();\r\n    }\r\n\r\n    /**\r\n     * Node of this handle\r\n     */\r\n    public node: TransformNode;\r\n\r\n    /**\r\n     * Creates a handle for a SlateGizmo\r\n     * @param gizmo associated SlateGizmo\r\n     * @param scene scene\r\n     */\r\n    constructor(gizmo: SlateGizmo, scene: Scene) {\r\n        this._scene = scene;\r\n        this._gizmo = gizmo;\r\n\r\n        this.node = this.createNode();\r\n        this.node.reservedDataStore = {\r\n            handle: this,\r\n        };\r\n    }\r\n\r\n    protected _createMaterial(positionOffset?: Vector3) {\r\n        const mat = new HandleMaterial(\"handle\", this._scene);\r\n        if (positionOffset) {\r\n            mat._positionOffset = positionOffset;\r\n        }\r\n        return mat;\r\n    }\r\n\r\n    private _updateMaterial() {\r\n        const state = this._state;\r\n        for (const mat of this._materials) {\r\n            mat.hover = false;\r\n            mat.drag = false;\r\n        }\r\n\r\n        if (state & HandleState.DRAG) {\r\n            for (const mat of this._materials) {\r\n                mat.drag = true;\r\n            }\r\n        } else if (state & HandleState.HOVER) {\r\n            for (const mat of this._materials) {\r\n                mat.hover = true;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Binds callbacks from dragging interaction\r\n     * @param dragStartFn Function to call on drag start\r\n     * @param dragFn Function to call on drag\r\n     * @param dragEndFn Function to call on drag end\r\n     */\r\n    public setDragBehavior(dragStartFn: (event: { position: Vector3 }) => void, dragFn: (event: { position: Vector3 }) => void, dragEndFn: () => void) {\r\n        const dragBehavior = new BaseSixDofDragBehavior();\r\n\r\n        this._dragBehavior = dragBehavior;\r\n\r\n        this._dragStartObserver = dragBehavior.onDragStartObservable.add(dragStartFn);\r\n        this._draggingObserver = dragBehavior.onDragObservable.add(dragFn);\r\n        this._dragEndObserver = dragBehavior.onDragEndObservable.add(dragEndFn);\r\n\r\n        this._dragBehavior.attach(this.node);\r\n    }\r\n\r\n    /**\r\n     * Creates the meshes and parent node of the handle\r\n     * Should be overridden by child classes\r\n     * @returns created node\r\n     */\r\n    public abstract createNode(): TransformNode;\r\n\r\n    /**\r\n     * Disposes the handle\r\n     */\r\n    public dispose() {\r\n        this._dragBehavior.onDragStartObservable.remove(this._dragStartObserver);\r\n        this._dragBehavior.onDragObservable.remove(this._draggingObserver);\r\n        this._dragBehavior.onDragEndObservable.remove(this._dragEndObserver);\r\n\r\n        this._dragBehavior.detach();\r\n\r\n        for (const material of this._materials) {\r\n            material.dispose();\r\n        }\r\n        this.node.dispose();\r\n    }\r\n}\r\n\r\n/**\r\n * Side handle class that rotates the slate\r\n */\r\nexport class SideHandle extends GizmoHandle {\r\n    /**\r\n     * Creates the meshes and parent node of the handle\r\n     * @returns created node\r\n     */\r\n    public createNode() {\r\n        // Create a simple vertical rectangle\r\n        const verticalBox = CreateBox(\"sideVert\", { width: 1, height: 10, depth: 0.1 }, this._scene);\r\n        const sideNode = new TransformNode(\"side\", this._scene);\r\n        verticalBox.parent = sideNode;\r\n\r\n        const mat = this._createMaterial();\r\n        verticalBox.material = mat;\r\n        verticalBox.isNearGrabbable = true;\r\n        this._materials.push(mat);\r\n\r\n        return sideNode;\r\n    }\r\n}\r\n\r\n/**\r\n * Corner handle that resizes the slate\r\n */\r\nexport class CornerHandle extends GizmoHandle {\r\n    /**\r\n     * Creates the meshes and parent node of the handle\r\n     * @returns created node\r\n     */\r\n    public createNode() {\r\n        // Create 2 boxes making a bottom left corner\r\n        const horizontalBox = CreateBox(\"angleHor\", { width: 3, height: 1, depth: 0.1 }, this._scene);\r\n        const verticalBox = CreateBox(\"angleVert\", { width: 1, height: 3, depth: 0.1 }, this._scene);\r\n\r\n        const angleNode = new TransformNode(\"angle\", this._scene);\r\n        horizontalBox.parent = angleNode;\r\n        verticalBox.parent = angleNode;\r\n\r\n        horizontalBox.material = this._createMaterial(new Vector3(1, 0, 0));\r\n        verticalBox.material = this._createMaterial(new Vector3(0, 1, 0));\r\n        verticalBox.isNearGrabbable = true;\r\n        horizontalBox.isNearGrabbable = true;\r\n\r\n        this._materials.push(horizontalBox.material as HandleMaterial);\r\n        this._materials.push(verticalBox.material as HandleMaterial);\r\n        return angleNode;\r\n    }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}