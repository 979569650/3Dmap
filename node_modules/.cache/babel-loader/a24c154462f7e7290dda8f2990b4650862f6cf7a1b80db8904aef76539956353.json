{"ast":null,"code":"import { TouchHolographicButton } from \"./touchHolographicButton.js\";\nimport { DefaultBehavior } from \"../behaviors/defaultBehavior.js\";\nimport { TouchHolographicMenu } from \"./touchHolographicMenu.js\";\n/**\n * NearMenu that displays buttons and follows the camera\n * @since 5.0.0\n */\nexport class NearMenu extends TouchHolographicMenu {\n  /**\n   * Regroups all mesh behaviors for the near menu\n   */\n  get defaultBehavior() {\n    return this._defaultBehavior;\n  }\n  /**\n   * Indicates if the near menu is world-pinned\n   */\n  get isPinned() {\n    return this._isPinned;\n  }\n  set isPinned(value) {\n    // Tell the pin button to toggle if this was called manually, for clean state control\n    if (this._pinButton.isToggled !== value) {\n      this._pinButton.isToggled = value;\n      return;\n    }\n    this._isPinned = value;\n    if (value) {\n      this._defaultBehavior.followBehaviorEnabled = false;\n    } else {\n      this._defaultBehavior.followBehaviorEnabled = true;\n    }\n  }\n  _createPinButton(parent) {\n    const control = new TouchHolographicButton(\"pin\" + this.name, false);\n    control.imageUrl = NearMenu._ASSETS_BASE_URL + NearMenu._PIN_ICON_FILENAME;\n    control.parent = this;\n    control._host = this._host;\n    control.isToggleButton = true;\n    control.onToggleObservable.add(newState => {\n      this.isPinned = newState;\n    });\n    if (this._host.utilityLayer) {\n      control._prepareNode(this._host.utilityLayer.utilityLayerScene);\n      control.scaling.scaleInPlace(TouchHolographicMenu.MENU_BUTTON_SCALE);\n      if (control.node) {\n        control.node.parent = parent;\n      }\n    }\n    return control;\n  }\n  _createNode(scene) {\n    const node = super._createNode(scene);\n    this._pinButton = this._createPinButton(node);\n    this.isPinned = false;\n    this._defaultBehavior.attach(node, [this._backPlate]);\n    this._defaultBehavior.followBehavior.ignoreCameraPitchAndRoll = true;\n    this._defaultBehavior.followBehavior.pitchOffset = -15;\n    this._defaultBehavior.followBehavior.minimumDistance = 0.3;\n    this._defaultBehavior.followBehavior.defaultDistance = 0.4;\n    this._defaultBehavior.followBehavior.maximumDistance = 0.6;\n    this._backPlate.isNearGrabbable = true;\n    node.isVisible = false;\n    return node;\n  }\n  _finalProcessing() {\n    super._finalProcessing();\n    this._pinButton.position.copyFromFloats((this._backPlate.scaling.x + TouchHolographicMenu.MENU_BUTTON_SCALE) / 2, this._backPlate.scaling.y / 2, 0);\n  }\n  /**\n   * Creates a near menu GUI 3D control\n   * @param name name of the near menu\n   */\n  constructor(name) {\n    super(name);\n    this._isPinned = false;\n    this._defaultBehavior = new DefaultBehavior();\n    this._dragObserver = this._defaultBehavior.sixDofDragBehavior.onDragObservable.add(() => {\n      this.isPinned = true;\n    });\n    this.backPlateMargin = 1;\n  }\n  /**\n   * Disposes the near menu\n   */\n  dispose() {\n    super.dispose();\n    this._defaultBehavior.sixDofDragBehavior.onDragObservable.remove(this._dragObserver);\n    this._defaultBehavior.detach();\n  }\n}\n/**\n * Base Url for the assets.\n */\nNearMenu._ASSETS_BASE_URL = \"https://assets.babylonjs.com/meshes/MRTK/\";\n/**\n * File name for the close icon.\n */\nNearMenu._PIN_ICON_FILENAME = \"IconPin.png\";","map":{"version":3,"names":["TouchHolographicButton","DefaultBehavior","TouchHolographicMenu","NearMenu","defaultBehavior","_defaultBehavior","isPinned","_isPinned","value","_pinButton","isToggled","followBehaviorEnabled","_createPinButton","parent","control","name","imageUrl","_ASSETS_BASE_URL","_PIN_ICON_FILENAME","_host","isToggleButton","onToggleObservable","add","newState","utilityLayer","_prepareNode","utilityLayerScene","scaling","scaleInPlace","MENU_BUTTON_SCALE","node","_createNode","scene","attach","_backPlate","followBehavior","ignoreCameraPitchAndRoll","pitchOffset","minimumDistance","defaultDistance","maximumDistance","isNearGrabbable","isVisible","_finalProcessing","position","copyFromFloats","x","y","constructor","_dragObserver","sixDofDragBehavior","onDragObservable","backPlateMargin","dispose","remove","detach"],"sources":["../../../../../dev/gui/src/3D/controls/nearMenu.ts"],"sourcesContent":["import type { Scene } from \"core/scene\";\r\nimport type { TransformNode } from \"core/Meshes/transformNode\";\r\nimport type { Nullable } from \"core/types\";\r\nimport type { Mesh } from \"core/Meshes/mesh\";\r\nimport { TouchHolographicButton } from \"./touchHolographicButton\";\r\nimport { DefaultBehavior } from \"../behaviors/defaultBehavior\";\r\nimport { TouchHolographicMenu } from \"./touchHolographicMenu\";\r\nimport type { Observer } from \"core/Misc/observable\";\r\nimport type { Vector3 } from \"core/Maths/math.vector\";\r\nimport type { PickingInfo } from \"core/Collisions/pickingInfo\";\r\n\r\n/**\r\n * NearMenu that displays buttons and follows the camera\r\n * @since 5.0.0\r\n */\r\nexport class NearMenu extends TouchHolographicMenu {\r\n    /**\r\n     * Base Url for the assets.\r\n     */\r\n    private static _ASSETS_BASE_URL: string = \"https://assets.babylonjs.com/meshes/MRTK/\";\r\n    /**\r\n     * File name for the close icon.\r\n     */\r\n    private static _PIN_ICON_FILENAME: string = \"IconPin.png\";\r\n\r\n    private _pinButton: TouchHolographicButton;\r\n    private _dragObserver: Nullable<\r\n        Observer<{\r\n            delta: Vector3;\r\n            position: Vector3;\r\n            pickInfo: PickingInfo;\r\n        }>\r\n    >;\r\n\r\n    private _defaultBehavior: DefaultBehavior;\r\n    /**\r\n     * Regroups all mesh behaviors for the near menu\r\n     */\r\n    public get defaultBehavior(): DefaultBehavior {\r\n        return this._defaultBehavior;\r\n    }\r\n\r\n    private _isPinned: boolean = false;\r\n    /**\r\n     * Indicates if the near menu is world-pinned\r\n     */\r\n    public get isPinned(): boolean {\r\n        return this._isPinned;\r\n    }\r\n\r\n    public set isPinned(value: boolean) {\r\n        // Tell the pin button to toggle if this was called manually, for clean state control\r\n        if (this._pinButton.isToggled !== value) {\r\n            this._pinButton.isToggled = value;\r\n            return;\r\n        }\r\n\r\n        this._isPinned = value;\r\n\r\n        if (value) {\r\n            this._defaultBehavior.followBehaviorEnabled = false;\r\n        } else {\r\n            this._defaultBehavior.followBehaviorEnabled = true;\r\n        }\r\n    }\r\n\r\n    private _createPinButton(parent: TransformNode) {\r\n        const control = new TouchHolographicButton(\"pin\" + this.name, false);\r\n        control.imageUrl = NearMenu._ASSETS_BASE_URL + NearMenu._PIN_ICON_FILENAME;\r\n        control.parent = this;\r\n        control._host = this._host;\r\n        control.isToggleButton = true;\r\n        control.onToggleObservable.add((newState) => {\r\n            this.isPinned = newState;\r\n        });\r\n\r\n        if (this._host.utilityLayer) {\r\n            control._prepareNode(this._host.utilityLayer.utilityLayerScene);\r\n            control.scaling.scaleInPlace(TouchHolographicMenu.MENU_BUTTON_SCALE);\r\n\r\n            if (control.node) {\r\n                control.node.parent = parent;\r\n            }\r\n        }\r\n\r\n        return control;\r\n    }\r\n\r\n    protected _createNode(scene: Scene): Nullable<TransformNode> {\r\n        const node = super._createNode(scene)! as Mesh;\r\n\r\n        this._pinButton = this._createPinButton(node);\r\n        this.isPinned = false;\r\n\r\n        this._defaultBehavior.attach(node, [this._backPlate]);\r\n        this._defaultBehavior.followBehavior.ignoreCameraPitchAndRoll = true;\r\n        this._defaultBehavior.followBehavior.pitchOffset = -15;\r\n        this._defaultBehavior.followBehavior.minimumDistance = 0.3;\r\n        this._defaultBehavior.followBehavior.defaultDistance = 0.4;\r\n        this._defaultBehavior.followBehavior.maximumDistance = 0.6;\r\n\r\n        this._backPlate.isNearGrabbable = true;\r\n        node.isVisible = false;\r\n\r\n        return node;\r\n    }\r\n\r\n    protected _finalProcessing() {\r\n        super._finalProcessing();\r\n\r\n        this._pinButton.position.copyFromFloats((this._backPlate.scaling.x + TouchHolographicMenu.MENU_BUTTON_SCALE) / 2, this._backPlate.scaling.y / 2, 0);\r\n    }\r\n\r\n    /**\r\n     * Creates a near menu GUI 3D control\r\n     * @param name name of the near menu\r\n     */\r\n    constructor(name?: string) {\r\n        super(name);\r\n\r\n        this._defaultBehavior = new DefaultBehavior();\r\n        this._dragObserver = this._defaultBehavior.sixDofDragBehavior.onDragObservable.add(() => {\r\n            this.isPinned = true;\r\n        });\r\n\r\n        this.backPlateMargin = 1;\r\n    }\r\n\r\n    /**\r\n     * Disposes the near menu\r\n     */\r\n    public dispose() {\r\n        super.dispose();\r\n\r\n        this._defaultBehavior.sixDofDragBehavior.onDragObservable.remove(this._dragObserver);\r\n        this._defaultBehavior.detach();\r\n    }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}