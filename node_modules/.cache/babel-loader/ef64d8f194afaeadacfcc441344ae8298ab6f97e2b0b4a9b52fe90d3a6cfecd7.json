{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { __decorate } from \"../tslib.es6.js\";\nimport { serialize } from \"../Misc/decorators.js\";\nimport { RandomGUID } from \"../Misc/guid.js\";\nfunction isMeshClassName(className) {\n  return className === \"Mesh\" || className === \"AbstractMesh\" || className === \"GroundMesh\" || className === \"InstanceMesh\" || className === \"LinesMesh\" || className === \"GoldbergMesh\" || className === \"GreasedLineMesh\" || className === \"TrailMesh\";\n}\nfunction defaultValueSerializationFunction(key, value, serializationObject) {\n  if ((value === null || value === void 0 ? void 0 : value.getClassName) && isMeshClassName(value === null || value === void 0 ? void 0 : value.getClassName())) {\n    serializationObject[key] = {\n      name: value.name,\n      className: value.getClassName()\n    };\n  } else {\n    serializationObject[key] = value;\n  }\n}\nfunction defaultValueParseFunction(key, serializationObject, scene) {\n  const value = serializationObject[key];\n  let finalValue;\n  const className = value === null || value === void 0 ? void 0 : value.className;\n  if (isMeshClassName(className)) {\n    finalValue = scene.getMeshByName(value.name);\n  } else {\n    finalValue = value;\n  }\n  return finalValue;\n}\n/**\n * @experimental\n * The context represents the current state and execution of the flow graph.\n * It contains both user-defined variables, which are derived from\n * a more general variable definition, and execution variables that\n * are set by the blocks.\n */\nexport class FlowGraphContext {\n  constructor(params) {\n    /**\n     * A randomly generated GUID for each context.\n     */\n    this.uniqueId = RandomGUID();\n    /**\n     * These are the variables defined by a user.\n     */\n    this._userVariables = new Map();\n    /**\n     * These are the variables set by the blocks.\n     */\n    this._executionVariables = new Map();\n    /**\n     * These are the values for the data connection points\n     */\n    this._connectionValues = new Map();\n    /**\n     * These are blocks that have currently pending tasks/listeners that need to be cleaned up.\n     */\n    this._pendingBlocks = [];\n    this._configuration = params;\n  }\n  /**\n   * Check if a user-defined variable is defined.\n   * @param name\n   * @returns\n   */\n  hasVariable(name) {\n    return this._userVariables.has(name);\n  }\n  /**\n   * Set a user-defined variable.\n   * @param name\n   * @param value\n   */\n  setVariable(name, value) {\n    this._userVariables.set(name, value);\n  }\n  /**\n   * Get a user-defined variable.\n   * @param name\n   * @returns\n   */\n  getVariable(name) {\n    return this._userVariables.get(name);\n  }\n  _getUniqueIdPrefixedName(obj, name) {\n    return `${obj.uniqueId}_${name}`;\n  }\n  /**\n   * Set an internal execution variable\n   * @internal\n   * @param name\n   * @param value\n   */\n  _setExecutionVariable(block, name, value) {\n    this._executionVariables.set(this._getUniqueIdPrefixedName(block, name), value);\n  }\n  /**\n   * Get an internal execution variable\n   * @internal\n   * @param name\n   * @returns\n   */\n  _getExecutionVariable(block, name, defaultValue) {\n    if (this._hasExecutionVariable(block, name)) {\n      return this._executionVariables.get(this._getUniqueIdPrefixedName(block, name));\n    } else {\n      return defaultValue;\n    }\n  }\n  /**\n   * Delete an internal execution variable\n   * @internal\n   * @param block\n   * @param name\n   */\n  _deleteExecutionVariable(block, name) {\n    this._executionVariables.delete(this._getUniqueIdPrefixedName(block, name));\n  }\n  /**\n   * Check if an internal execution variable is defined\n   * @internal\n   * @param block\n   * @param name\n   * @returns\n   */\n  _hasExecutionVariable(block, name) {\n    return this._executionVariables.has(this._getUniqueIdPrefixedName(block, name));\n  }\n  /**\n   * Check if a connection value is defined\n   * @internal\n   * @param connectionPoint\n   * @returns\n   */\n  _hasConnectionValue(connectionPoint) {\n    return this._connectionValues.has(connectionPoint.uniqueId);\n  }\n  /**\n   * Set a connection value\n   * @internal\n   * @param connectionPoint\n   * @param value\n   */\n  _setConnectionValue(connectionPoint, value) {\n    this._connectionValues.set(connectionPoint.uniqueId, value);\n  }\n  /**\n   * Get a connection value\n   * @internal\n   * @param connectionPoint\n   * @returns\n   */\n  _getConnectionValue(connectionPoint) {\n    return this._connectionValues.get(connectionPoint.uniqueId);\n  }\n  /**\n   * Get the configuration\n   * @internal\n   * @param name\n   * @param value\n   */\n  get configuration() {\n    return this._configuration;\n  }\n  /**\n   * Add a block to the list of blocks that have pending tasks.\n   * @internal\n   * @param block\n   */\n  _addPendingBlock(block) {\n    this._pendingBlocks.push(block);\n  }\n  /**\n   * Remove a block from the list of blocks that have pending tasks.\n   * @internal\n   * @param block\n   */\n  _removePendingBlock(block) {\n    const index = this._pendingBlocks.indexOf(block);\n    if (index !== -1) {\n      this._pendingBlocks.splice(index, 1);\n    }\n  }\n  /**\n   * Clear all pending blocks.\n   * @internal\n   */\n  _clearPendingBlocks() {\n    for (const block of this._pendingBlocks) {\n      block._cancelPendingTasks(this);\n    }\n    this._pendingBlocks.length = 0;\n  }\n  /**\n   * Serializes a context\n   * @param serializationObject the object to write the values in\n   * @param valueSerializationFunction a function to serialize complex values\n   */\n  serialize(serializationObject = {}, valueSerializationFunction = defaultValueSerializationFunction) {\n    serializationObject.uniqueId = this.uniqueId;\n    serializationObject._userVariables = {};\n    this._userVariables.forEach((value, key) => {\n      valueSerializationFunction(key, value, serializationObject._userVariables);\n    });\n    serializationObject._connectionValues = {};\n    this._connectionValues.forEach((value, key) => {\n      valueSerializationFunction(key, value, serializationObject._connectionValues);\n    });\n  }\n  getClassName() {\n    return \"FGContext\";\n  }\n  /**\n   * Parses a context\n   * @param serializationObject the object containing the context serialization values\n   * @param graph the graph to which the context should belong\n   * @param valueParseFunction a function to parse complex values\n   * @returns\n   */\n  static Parse(serializationObject = {}, graph, valueParseFunction = defaultValueParseFunction) {\n    const result = graph.createContext();\n    result.uniqueId = serializationObject.uniqueId;\n    for (const key in serializationObject._userVariables) {\n      const value = valueParseFunction(key, serializationObject._userVariables, result._configuration.scene);\n      result._userVariables.set(key, value);\n    }\n    for (const key in serializationObject._connectionValues) {\n      const value = valueParseFunction(key, serializationObject._connectionValues, result._configuration.scene);\n      result._connectionValues.set(key, value);\n    }\n    return result;\n  }\n}\n__decorate([serialize()], FlowGraphContext.prototype, \"uniqueId\", void 0);","map":{"version":3,"names":["serialize","RandomGUID","isMeshClassName","className","defaultValueSerializationFunction","key","value","serializationObject","getClassName","name","defaultValueParseFunction","scene","finalValue","getMeshByName","FlowGraphContext","constructor","params","uniqueId","_userVariables","Map","_executionVariables","_connectionValues","_pendingBlocks","_configuration","hasVariable","has","setVariable","set","getVariable","get","_getUniqueIdPrefixedName","obj","_setExecutionVariable","block","_getExecutionVariable","defaultValue","_hasExecutionVariable","_deleteExecutionVariable","delete","_hasConnectionValue","connectionPoint","_setConnectionValue","_getConnectionValue","configuration","_addPendingBlock","push","_removePendingBlock","index","indexOf","splice","_clearPendingBlocks","_cancelPendingTasks","length","valueSerializationFunction","forEach","Parse","graph","valueParseFunction","result","createContext","__decorate"],"sources":["../../../../dev/core/src/FlowGraph/flowGraphContext.ts"],"sourcesContent":["import { serialize } from \"../Misc/decorators\";\r\nimport { RandomGUID } from \"../Misc/guid\";\r\nimport type { Scene } from \"../scene\";\r\nimport type { FlowGraphAsyncExecutionBlock } from \"./flowGraphAsyncExecutionBlock\";\r\nimport type { FlowGraphBlock } from \"./flowGraphBlock\";\r\nimport type { FlowGraphDataConnection } from \"./flowGraphDataConnection\";\r\nimport type { FlowGraphEventCoordinator } from \"./flowGraphEventCoordinator\";\r\nimport type { FlowGraph } from \"./flowGraph\";\r\n\r\nfunction isMeshClassName(className: string) {\r\n    return (\r\n        className === \"Mesh\" ||\r\n        className === \"AbstractMesh\" ||\r\n        className === \"GroundMesh\" ||\r\n        className === \"InstanceMesh\" ||\r\n        className === \"LinesMesh\" ||\r\n        className === \"GoldbergMesh\" ||\r\n        className === \"GreasedLineMesh\" ||\r\n        className === \"TrailMesh\"\r\n    );\r\n}\r\n\r\nfunction defaultValueSerializationFunction(key: string, value: any, serializationObject: any) {\r\n    if (value?.getClassName && isMeshClassName(value?.getClassName())) {\r\n        serializationObject[key] = {\r\n            name: value.name,\r\n            className: value.getClassName(),\r\n        };\r\n    } else {\r\n        serializationObject[key] = value;\r\n    }\r\n}\r\n\r\nfunction defaultValueParseFunction(key: string, serializationObject: any, scene: Scene) {\r\n    const value = serializationObject[key];\r\n    let finalValue;\r\n    const className = value?.className;\r\n    if (isMeshClassName(className)) {\r\n        finalValue = scene.getMeshByName(value.name);\r\n    } else {\r\n        finalValue = value;\r\n    }\r\n    return finalValue;\r\n}\r\n\r\n/**\r\n * Construction parameters for the context.\r\n * @experimental\r\n */\r\nexport interface IFlowGraphContextConfiguration {\r\n    /**\r\n     * The scene that the flow graph context belongs to.\r\n     */\r\n    readonly scene: Scene;\r\n    /**\r\n     * The event coordinator used by the flow graph context.\r\n     */\r\n    readonly eventCoordinator: FlowGraphEventCoordinator;\r\n}\r\n/**\r\n * @experimental\r\n * The context represents the current state and execution of the flow graph.\r\n * It contains both user-defined variables, which are derived from\r\n * a more general variable definition, and execution variables that\r\n * are set by the blocks.\r\n */\r\nexport class FlowGraphContext {\r\n    /**\r\n     * A randomly generated GUID for each context.\r\n     */\r\n    @serialize()\r\n    public uniqueId = RandomGUID();\r\n    /**\r\n     * These are the variables defined by a user.\r\n     */\r\n    private _userVariables: Map<string, any> = new Map();\r\n    /**\r\n     * These are the variables set by the blocks.\r\n     */\r\n    private _executionVariables: Map<string, any> = new Map();\r\n    /**\r\n     * These are the values for the data connection points\r\n     */\r\n    private _connectionValues: Map<string, any> = new Map();\r\n    /**\r\n     * These are the variables set by the graph.\r\n     */\r\n    private readonly _configuration: IFlowGraphContextConfiguration;\r\n    /**\r\n     * These are blocks that have currently pending tasks/listeners that need to be cleaned up.\r\n     */\r\n    private _pendingBlocks: FlowGraphAsyncExecutionBlock[] = [];\r\n\r\n    constructor(params: IFlowGraphContextConfiguration) {\r\n        this._configuration = params;\r\n    }\r\n\r\n    /**\r\n     * Check if a user-defined variable is defined.\r\n     * @param name\r\n     * @returns\r\n     */\r\n    public hasVariable(name: string) {\r\n        return this._userVariables.has(name);\r\n    }\r\n\r\n    /**\r\n     * Set a user-defined variable.\r\n     * @param name\r\n     * @param value\r\n     */\r\n    public setVariable(name: string, value: any) {\r\n        this._userVariables.set(name, value);\r\n    }\r\n\r\n    /**\r\n     * Get a user-defined variable.\r\n     * @param name\r\n     * @returns\r\n     */\r\n    public getVariable(name: string): any {\r\n        return this._userVariables.get(name);\r\n    }\r\n\r\n    private _getUniqueIdPrefixedName(obj: FlowGraphBlock, name: string): string {\r\n        return `${obj.uniqueId}_${name}`;\r\n    }\r\n\r\n    /**\r\n     * Set an internal execution variable\r\n     * @internal\r\n     * @param name\r\n     * @param value\r\n     */\r\n    public _setExecutionVariable(block: FlowGraphBlock, name: string, value: any) {\r\n        this._executionVariables.set(this._getUniqueIdPrefixedName(block, name), value);\r\n    }\r\n\r\n    /**\r\n     * Get an internal execution variable\r\n     * @internal\r\n     * @param name\r\n     * @returns\r\n     */\r\n    public _getExecutionVariable(block: FlowGraphBlock, name: string, defaultValue?: any): any {\r\n        if (this._hasExecutionVariable(block, name)) {\r\n            return this._executionVariables.get(this._getUniqueIdPrefixedName(block, name));\r\n        } else {\r\n            return defaultValue;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Delete an internal execution variable\r\n     * @internal\r\n     * @param block\r\n     * @param name\r\n     */\r\n    public _deleteExecutionVariable(block: FlowGraphBlock, name: string) {\r\n        this._executionVariables.delete(this._getUniqueIdPrefixedName(block, name));\r\n    }\r\n\r\n    /**\r\n     * Check if an internal execution variable is defined\r\n     * @internal\r\n     * @param block\r\n     * @param name\r\n     * @returns\r\n     */\r\n    public _hasExecutionVariable(block: FlowGraphBlock, name: string) {\r\n        return this._executionVariables.has(this._getUniqueIdPrefixedName(block, name));\r\n    }\r\n\r\n    /**\r\n     * Check if a connection value is defined\r\n     * @internal\r\n     * @param connectionPoint\r\n     * @returns\r\n     */\r\n    public _hasConnectionValue(connectionPoint: FlowGraphDataConnection<any>) {\r\n        return this._connectionValues.has(connectionPoint.uniqueId);\r\n    }\r\n\r\n    /**\r\n     * Set a connection value\r\n     * @internal\r\n     * @param connectionPoint\r\n     * @param value\r\n     */\r\n    public _setConnectionValue<T>(connectionPoint: FlowGraphDataConnection<T>, value: T) {\r\n        this._connectionValues.set(connectionPoint.uniqueId, value);\r\n    }\r\n\r\n    /**\r\n     * Get a connection value\r\n     * @internal\r\n     * @param connectionPoint\r\n     * @returns\r\n     */\r\n    public _getConnectionValue<T>(connectionPoint: FlowGraphDataConnection<T>): T {\r\n        return this._connectionValues.get(connectionPoint.uniqueId);\r\n    }\r\n\r\n    /**\r\n     * Get the configuration\r\n     * @internal\r\n     * @param name\r\n     * @param value\r\n     */\r\n    public get configuration() {\r\n        return this._configuration;\r\n    }\r\n\r\n    /**\r\n     * Add a block to the list of blocks that have pending tasks.\r\n     * @internal\r\n     * @param block\r\n     */\r\n    public _addPendingBlock(block: FlowGraphAsyncExecutionBlock) {\r\n        this._pendingBlocks.push(block);\r\n    }\r\n\r\n    /**\r\n     * Remove a block from the list of blocks that have pending tasks.\r\n     * @internal\r\n     * @param block\r\n     */\r\n    public _removePendingBlock(block: FlowGraphAsyncExecutionBlock) {\r\n        const index = this._pendingBlocks.indexOf(block);\r\n        if (index !== -1) {\r\n            this._pendingBlocks.splice(index, 1);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Clear all pending blocks.\r\n     * @internal\r\n     */\r\n    public _clearPendingBlocks() {\r\n        for (const block of this._pendingBlocks) {\r\n            block._cancelPendingTasks(this);\r\n        }\r\n        this._pendingBlocks.length = 0;\r\n    }\r\n\r\n    /**\r\n     * Serializes a context\r\n     * @param serializationObject the object to write the values in\r\n     * @param valueSerializationFunction a function to serialize complex values\r\n     */\r\n    public serialize(serializationObject: any = {}, valueSerializationFunction: (key: string, value: any, serializationObject: any) => void = defaultValueSerializationFunction) {\r\n        serializationObject.uniqueId = this.uniqueId;\r\n        serializationObject._userVariables = {};\r\n        this._userVariables.forEach((value, key) => {\r\n            valueSerializationFunction(key, value, serializationObject._userVariables);\r\n        });\r\n        serializationObject._connectionValues = {};\r\n        this._connectionValues.forEach((value, key) => {\r\n            valueSerializationFunction(key, value, serializationObject._connectionValues);\r\n        });\r\n    }\r\n\r\n    public getClassName() {\r\n        return \"FGContext\";\r\n    }\r\n\r\n    /**\r\n     * Parses a context\r\n     * @param serializationObject the object containing the context serialization values\r\n     * @param graph the graph to which the context should belong\r\n     * @param valueParseFunction a function to parse complex values\r\n     * @returns\r\n     */\r\n    public static Parse(\r\n        serializationObject: any = {},\r\n        graph: FlowGraph,\r\n        valueParseFunction: (key: string, serializationObject: any, scene: Scene) => any = defaultValueParseFunction\r\n    ): FlowGraphContext {\r\n        const result = graph.createContext();\r\n        result.uniqueId = serializationObject.uniqueId;\r\n        for (const key in serializationObject._userVariables) {\r\n            const value = valueParseFunction(key, serializationObject._userVariables, result._configuration.scene);\r\n            result._userVariables.set(key, value);\r\n        }\r\n        for (const key in serializationObject._connectionValues) {\r\n            const value = valueParseFunction(key, serializationObject._connectionValues, result._configuration.scene);\r\n            result._connectionValues.set(key, value);\r\n        }\r\n\r\n        return result;\r\n    }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}