{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { Tools } from \"../Misc/tools.js\";\nimport { RandomGUID } from \"../Misc/guid.js\";\n/**\n * @experimental\n * The type of a connection point - inpput or output.\n */\nexport var FlowGraphConnectionType;\n(function (FlowGraphConnectionType) {\n  FlowGraphConnectionType[FlowGraphConnectionType[\"Input\"] = 0] = \"Input\";\n  FlowGraphConnectionType[FlowGraphConnectionType[\"Output\"] = 1] = \"Output\";\n})(FlowGraphConnectionType || (FlowGraphConnectionType = {}));\n/**\n * @experimental\n * The base connection class.\n */\nexport class FlowGraphConnection {\n  constructor(name, _connectionType, /* @internal */_ownerBlock) {\n    this._ownerBlock = _ownerBlock;\n    /** @internal */\n    this._connectedPoint = [];\n    /**\n     * A uniquely identifying string for the connection.\n     */\n    this.uniqueId = RandomGUID();\n    /**\n     * Used for parsing connections.\n     * @internal\n     */\n    // disable warning as this is used for parsing\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    this.connectedPointIds = [];\n    this.name = name;\n    this._connectionType = _connectionType;\n  }\n  /**\n   * The type of the connection\n   */\n  get connectionType() {\n    return this._connectionType;\n  }\n  /**\n   * @internal\n   * Override this to indicate if a point can connect to more than one point.\n   */\n  _isSingularConnection() {\n    return true;\n  }\n  /**\n   * Returns if a point is connected to any other point.\n   * @returns boolean indicating if the point is connected.\n   */\n  isConnected() {\n    return this._connectedPoint.length > 0;\n  }\n  /**\n   * Connects two points together.\n   * @param point\n   */\n  connectTo(point) {\n    if (this._connectionType === point._connectionType) {\n      throw new Error(`Cannot connect two points of type ${this.connectionType}`);\n    }\n    if (this._isSingularConnection() && this._connectedPoint.length > 0 || point._isSingularConnection() && point._connectedPoint.length > 0) {\n      throw new Error(\"Max number of connections for point reached\");\n    }\n    this._connectedPoint.push(point);\n    point._connectedPoint.push(this);\n  }\n  /**\n   * Saves the connection to a JSON object.\n   */\n  serialize(serializationObject = {}) {\n    serializationObject.uniqueId = this.uniqueId;\n    serializationObject.name = this.name;\n    serializationObject._connectionType = this._connectionType;\n    serializationObject.connectedPointIds = [];\n    serializationObject.className = this.getClassName();\n    for (const point of this._connectedPoint) {\n      serializationObject.connectedPointIds.push(point.uniqueId);\n    }\n  }\n  getClassName() {\n    return \"FGConnection\";\n  }\n  /**\n   * Deserialize from a object into this\n   * @param serializationObject\n   */\n  deserialize(serializationObject) {\n    this.uniqueId = serializationObject.uniqueId;\n    this.name = serializationObject.name;\n    this._connectionType = serializationObject._connectionType;\n    this.connectedPointIds = serializationObject.connectedPointIds;\n  }\n  /**\n   * Parses a connection from an object\n   * @param serializationObject\n   * @param ownerBlock\n   * @returns\n   */\n  static Parse(serializationObject = {}, ownerBlock) {\n    const type = Tools.Instantiate(serializationObject.className);\n    const connection = new type(serializationObject.name, serializationObject._connectionType, ownerBlock);\n    connection.deserialize(serializationObject);\n    return connection;\n  }\n}","map":{"version":3,"names":["Tools","RandomGUID","FlowGraphConnectionType","FlowGraphConnection","constructor","name","_connectionType","_ownerBlock","_connectedPoint","uniqueId","connectedPointIds","connectionType","_isSingularConnection","isConnected","length","connectTo","point","Error","push","serialize","serializationObject","className","getClassName","deserialize","Parse","ownerBlock","type","Instantiate","connection"],"sources":["../../../../dev/core/src/FlowGraph/flowGraphConnection.ts"],"sourcesContent":["import { Tools } from \"../Misc/tools\";\r\nimport { RandomGUID } from \"../Misc/guid\";\r\nimport type { FlowGraphBlock } from \"./flowGraphBlock\";\r\n\r\n/**\r\n * @experimental\r\n * The type of a connection point - inpput or output.\r\n */\r\nexport enum FlowGraphConnectionType {\r\n    Input,\r\n    Output,\r\n}\r\n\r\n/**\r\n * @experimental\r\n */\r\nexport interface IConnectable {\r\n    uniqueId: string;\r\n    _connectedPoint: Array<IConnectable>;\r\n    _isSingularConnection(): boolean;\r\n    _connectionType: FlowGraphConnectionType;\r\n    connectTo(point: IConnectable): void;\r\n}\r\n\r\n/**\r\n * @experimental\r\n * The base connection class.\r\n */\r\nexport class FlowGraphConnection<BlockT, ConnectedToT extends IConnectable> implements IConnectable {\r\n    /** @internal */\r\n    public _connectedPoint: Array<ConnectedToT> = [];\r\n    /**\r\n     * A uniquely identifying string for the connection.\r\n     */\r\n    public uniqueId = RandomGUID();\r\n\r\n    /**\r\n     * The name of the connection.\r\n     */\r\n    public name: string;\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _connectionType: FlowGraphConnectionType;\r\n\r\n    /**\r\n     * Used for parsing connections.\r\n     * @internal\r\n     */\r\n    // disable warning as this is used for parsing\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    public connectedPointIds: any[] = [];\r\n\r\n    public constructor(name: string, _connectionType: FlowGraphConnectionType, /* @internal */ public _ownerBlock: BlockT) {\r\n        this.name = name;\r\n        this._connectionType = _connectionType;\r\n    }\r\n\r\n    /**\r\n     * The type of the connection\r\n     */\r\n    public get connectionType() {\r\n        return this._connectionType;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * Override this to indicate if a point can connect to more than one point.\r\n     */\r\n    public _isSingularConnection(): boolean {\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Returns if a point is connected to any other point.\r\n     * @returns boolean indicating if the point is connected.\r\n     */\r\n    public isConnected(): boolean {\r\n        return this._connectedPoint.length > 0;\r\n    }\r\n\r\n    /**\r\n     * Connects two points together.\r\n     * @param point\r\n     */\r\n    public connectTo(point: ConnectedToT): void {\r\n        if (this._connectionType === point._connectionType) {\r\n            throw new Error(`Cannot connect two points of type ${this.connectionType}`);\r\n        }\r\n        if ((this._isSingularConnection() && this._connectedPoint.length > 0) || (point._isSingularConnection() && point._connectedPoint.length > 0)) {\r\n            throw new Error(\"Max number of connections for point reached\");\r\n        }\r\n        this._connectedPoint.push(point);\r\n        point._connectedPoint.push(this);\r\n    }\r\n\r\n    /**\r\n     * Saves the connection to a JSON object.\r\n     */\r\n    public serialize(serializationObject: any = {}) {\r\n        serializationObject.uniqueId = this.uniqueId;\r\n        serializationObject.name = this.name;\r\n        serializationObject._connectionType = this._connectionType;\r\n        serializationObject.connectedPointIds = [];\r\n        serializationObject.className = this.getClassName();\r\n        for (const point of this._connectedPoint) {\r\n            serializationObject.connectedPointIds.push(point.uniqueId);\r\n        }\r\n    }\r\n\r\n    public getClassName(): string {\r\n        return \"FGConnection\";\r\n    }\r\n\r\n    /**\r\n     * Deserialize from a object into this\r\n     * @param serializationObject\r\n     */\r\n    deserialize(serializationObject: any) {\r\n        this.uniqueId = serializationObject.uniqueId;\r\n        this.name = serializationObject.name;\r\n        this._connectionType = serializationObject._connectionType;\r\n        this.connectedPointIds = serializationObject.connectedPointIds;\r\n    }\r\n\r\n    /**\r\n     * Parses a connection from an object\r\n     * @param serializationObject\r\n     * @param ownerBlock\r\n     * @returns\r\n     */\r\n    public static Parse(serializationObject: any = {}, ownerBlock: FlowGraphBlock) {\r\n        const type = Tools.Instantiate(serializationObject.className);\r\n        const connection = new type(serializationObject.name, serializationObject._connectionType, ownerBlock);\r\n        connection.deserialize(serializationObject);\r\n        return connection;\r\n    }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}