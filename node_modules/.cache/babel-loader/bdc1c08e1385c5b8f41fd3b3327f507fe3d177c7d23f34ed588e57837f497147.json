{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { NodeMaterialBlock } from \"../../nodeMaterialBlock.js\";\nimport { NodeMaterialBlockConnectionPointTypes } from \"../../Enums/nodeMaterialBlockConnectionPointTypes.js\";\nimport { NodeMaterialConnectionPointDirection } from \"../../nodeMaterialBlockConnectionPoint.js\";\nimport { NodeMaterialBlockTargets } from \"../../Enums/nodeMaterialBlockTargets.js\";\nimport { RegisterClass } from \"../../../../Misc/typeStore.js\";\nimport { NodeMaterialConnectionPointCustomObject } from \"../../nodeMaterialConnectionPointCustomObject.js\";\nimport { ImageSourceBlock } from \"../Dual/imageSourceBlock.js\";\n/**\n * Block used to read from prepass textures\n */\nexport class PrePassTextureBlock extends NodeMaterialBlock {\n  /**\n   * The texture associated with the node is the prepass texture\n   */\n  get texture() {\n    return null;\n  }\n  set texture(value) {\n    return;\n  }\n  /**\n   * Creates a new PrePassTextureBlock\n   * @param name defines the block name\n   * @param target defines the target of that block (VertexAndFragment by default)\n   */\n  constructor(name, target = NodeMaterialBlockTargets.VertexAndFragment) {\n    super(name, target, false);\n    this.registerOutput(\"position\", NodeMaterialBlockConnectionPointTypes.Object, NodeMaterialBlockTargets.VertexAndFragment, new NodeMaterialConnectionPointCustomObject(\"position\", this, NodeMaterialConnectionPointDirection.Output, ImageSourceBlock, \"ImageSourceBlock\"));\n    this.registerOutput(\"depth\", NodeMaterialBlockConnectionPointTypes.Object, NodeMaterialBlockTargets.VertexAndFragment, new NodeMaterialConnectionPointCustomObject(\"depth\", this, NodeMaterialConnectionPointDirection.Output, ImageSourceBlock, \"ImageSourceBlock\"));\n    this.registerOutput(\"normal\", NodeMaterialBlockConnectionPointTypes.Object, NodeMaterialBlockTargets.VertexAndFragment, new NodeMaterialConnectionPointCustomObject(\"normal\", this, NodeMaterialConnectionPointDirection.Output, ImageSourceBlock, \"ImageSourceBlock\"));\n  }\n  /**\n   * Returns the sampler name associated with the node connection point\n   * @param output\n   * @returns\n   */\n  getSamplerName(output) {\n    if (output === this._outputs[0]) {\n      return this._positionSamplerName;\n    }\n    if (output === this._outputs[1]) {\n      return this._depthSamplerName;\n    }\n    if (output === this._outputs[2]) {\n      return this._normalSamplerName;\n    }\n    return \"\";\n  }\n  /**\n   * Gets the position texture\n   */\n  get position() {\n    return this._outputs[0];\n  }\n  /**\n   * Gets the depth texture\n   */\n  get depth() {\n    return this._outputs[1];\n  }\n  /**\n   * Gets the normal texture\n   */\n  get normal() {\n    return this._outputs[2];\n  }\n  /**\n   * Gets the sampler name associated with this image source\n   */\n  get positionSamplerName() {\n    return this._positionSamplerName;\n  }\n  /**\n   * Gets the sampler name associated with this image source\n   */\n  get normalSamplerName() {\n    return this._normalSamplerName;\n  }\n  /**\n   * Gets the sampler name associated with this image source\n   */\n  get depthSamplerName() {\n    return this._depthSamplerName;\n  }\n  /**\n   * Gets the current class name\n   * @returns the class name\n   */\n  getClassName() {\n    return \"PrePassTextureBlock\";\n  }\n  _buildBlock(state) {\n    super._buildBlock(state);\n    if (state.target === NodeMaterialBlockTargets.Vertex) {\n      return;\n    }\n    this._positionSamplerName = \"prepassPositionSampler\";\n    this._depthSamplerName = \"prepassDepthSampler\";\n    this._normalSamplerName = \"prepassNormalSampler\";\n    // Unique sampler names for every prepasstexture block\n    state.sharedData.variableNames.prepassPositionSampler = 0;\n    state.sharedData.variableNames.prepassDepthSampler = 0;\n    state.sharedData.variableNames.prepassNormalSampler = 0;\n    // Declarations\n    state.sharedData.textureBlocks.push(this);\n    state.sharedData.bindableBlocks.push(this);\n    state._emit2DSampler(this._positionSamplerName);\n    state._emit2DSampler(this._depthSamplerName);\n    state._emit2DSampler(this._normalSamplerName);\n    return this;\n  }\n  bind(effect, nodeMaterial) {\n    const scene = nodeMaterial.getScene();\n    const prePassRenderer = scene.enablePrePassRenderer();\n    if (!prePassRenderer) {\n      return;\n    }\n    const sceneRT = prePassRenderer.defaultRT;\n    if (!sceneRT.textures) {\n      return;\n    }\n    if (this.position.isConnected) {\n      effect.setTexture(this._positionSamplerName, sceneRT.textures[prePassRenderer.getIndex(1)]);\n    }\n    if (this.depth.isConnected) {\n      effect.setTexture(this._depthSamplerName, sceneRT.textures[prePassRenderer.getIndex(5)]);\n    }\n    if (this.normal.isConnected) {\n      effect.setTexture(this._normalSamplerName, sceneRT.textures[prePassRenderer.getIndex(6)]);\n    }\n  }\n}\nRegisterClass(\"BABYLON.PrePassTextureBlock\", PrePassTextureBlock);","map":{"version":3,"names":["NodeMaterialBlock","NodeMaterialBlockConnectionPointTypes","NodeMaterialConnectionPointDirection","NodeMaterialBlockTargets","RegisterClass","NodeMaterialConnectionPointCustomObject","ImageSourceBlock","PrePassTextureBlock","texture","value","constructor","name","target","VertexAndFragment","registerOutput","Object","Output","getSamplerName","output","_outputs","_positionSamplerName","_depthSamplerName","_normalSamplerName","position","depth","normal","positionSamplerName","normalSamplerName","depthSamplerName","getClassName","_buildBlock","state","Vertex","sharedData","variableNames","prepassPositionSampler","prepassDepthSampler","prepassNormalSampler","textureBlocks","push","bindableBlocks","_emit2DSampler","bind","effect","nodeMaterial","scene","getScene","prePassRenderer","enablePrePassRenderer","sceneRT","defaultRT","textures","isConnected","setTexture","getIndex"],"sources":["../../../../../../../dev/core/src/Materials/Node/Blocks/Input/prePassTextureBlock.ts"],"sourcesContent":["import { NodeMaterialBlock } from \"../../nodeMaterialBlock\";\r\nimport { NodeMaterialBlockConnectionPointTypes } from \"../../Enums/nodeMaterialBlockConnectionPointTypes\";\r\nimport type { Effect } from \"../../../../Materials/effect\";\r\nimport { NodeMaterialConnectionPointDirection } from \"../../nodeMaterialBlockConnectionPoint\";\r\nimport type { NodeMaterialConnectionPoint } from \"../../nodeMaterialBlockConnectionPoint\";\r\nimport type { NodeMaterialBuildState } from \"../../nodeMaterialBuildState\";\r\nimport { NodeMaterialBlockTargets } from \"../../Enums/nodeMaterialBlockTargets\";\r\nimport { RegisterClass } from \"../../../../Misc/typeStore\";\r\nimport type { NodeMaterial } from \"../../nodeMaterial\";\r\nimport { NodeMaterialConnectionPointCustomObject } from \"../../nodeMaterialConnectionPointCustomObject\";\r\nimport { Constants } from \"../../../../Engines/constants\";\r\nimport { ImageSourceBlock } from \"../Dual/imageSourceBlock\";\r\n\r\n/**\r\n * Block used to read from prepass textures\r\n */\r\nexport class PrePassTextureBlock extends NodeMaterialBlock {\r\n    private _positionSamplerName: string;\r\n    private _depthSamplerName: string;\r\n    private _normalSamplerName: string;\r\n\r\n    /**\r\n     * The texture associated with the node is the prepass texture\r\n     */\r\n    public get texture() {\r\n        return null;\r\n    }\r\n\r\n    public set texture(value: any) {\r\n        return;\r\n    }\r\n\r\n    /**\r\n     * Creates a new PrePassTextureBlock\r\n     * @param name defines the block name\r\n     * @param target defines the target of that block (VertexAndFragment by default)\r\n     */\r\n    public constructor(name: string, target = NodeMaterialBlockTargets.VertexAndFragment) {\r\n        super(name, target, false);\r\n\r\n        this.registerOutput(\r\n            \"position\",\r\n            NodeMaterialBlockConnectionPointTypes.Object,\r\n            NodeMaterialBlockTargets.VertexAndFragment,\r\n            new NodeMaterialConnectionPointCustomObject(\"position\", this, NodeMaterialConnectionPointDirection.Output, ImageSourceBlock, \"ImageSourceBlock\")\r\n        );\r\n        this.registerOutput(\r\n            \"depth\",\r\n            NodeMaterialBlockConnectionPointTypes.Object,\r\n            NodeMaterialBlockTargets.VertexAndFragment,\r\n            new NodeMaterialConnectionPointCustomObject(\"depth\", this, NodeMaterialConnectionPointDirection.Output, ImageSourceBlock, \"ImageSourceBlock\")\r\n        );\r\n        this.registerOutput(\r\n            \"normal\",\r\n            NodeMaterialBlockConnectionPointTypes.Object,\r\n            NodeMaterialBlockTargets.VertexAndFragment,\r\n            new NodeMaterialConnectionPointCustomObject(\"normal\", this, NodeMaterialConnectionPointDirection.Output, ImageSourceBlock, \"ImageSourceBlock\")\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Returns the sampler name associated with the node connection point\r\n     * @param output\r\n     * @returns\r\n     */\r\n    public getSamplerName(output: NodeMaterialConnectionPoint): string {\r\n        if (output === this._outputs[0]) {\r\n            return this._positionSamplerName;\r\n        }\r\n\r\n        if (output === this._outputs[1]) {\r\n            return this._depthSamplerName;\r\n        }\r\n\r\n        if (output === this._outputs[2]) {\r\n            return this._normalSamplerName;\r\n        }\r\n\r\n        return \"\";\r\n    }\r\n\r\n    /**\r\n     * Gets the position texture\r\n     */\r\n    public get position(): NodeMaterialConnectionPoint {\r\n        return this._outputs[0];\r\n    }\r\n\r\n    /**\r\n     * Gets the depth texture\r\n     */\r\n    public get depth(): NodeMaterialConnectionPoint {\r\n        return this._outputs[1];\r\n    }\r\n\r\n    /**\r\n     * Gets the normal texture\r\n     */\r\n    public get normal(): NodeMaterialConnectionPoint {\r\n        return this._outputs[2];\r\n    }\r\n\r\n    /**\r\n     * Gets the sampler name associated with this image source\r\n     */\r\n    public get positionSamplerName(): string {\r\n        return this._positionSamplerName;\r\n    }\r\n\r\n    /**\r\n     * Gets the sampler name associated with this image source\r\n     */\r\n    public get normalSamplerName(): string {\r\n        return this._normalSamplerName;\r\n    }\r\n    /**\r\n     * Gets the sampler name associated with this image source\r\n     */\r\n    public get depthSamplerName(): string {\r\n        return this._depthSamplerName;\r\n    }\r\n\r\n    /**\r\n     * Gets the current class name\r\n     * @returns the class name\r\n     */\r\n    public getClassName() {\r\n        return \"PrePassTextureBlock\";\r\n    }\r\n\r\n    protected _buildBlock(state: NodeMaterialBuildState) {\r\n        super._buildBlock(state);\r\n\r\n        if (state.target === NodeMaterialBlockTargets.Vertex) {\r\n            return;\r\n        }\r\n\r\n        this._positionSamplerName = \"prepassPositionSampler\";\r\n        this._depthSamplerName = \"prepassDepthSampler\";\r\n        this._normalSamplerName = \"prepassNormalSampler\";\r\n\r\n        // Unique sampler names for every prepasstexture block\r\n        state.sharedData.variableNames.prepassPositionSampler = 0;\r\n        state.sharedData.variableNames.prepassDepthSampler = 0;\r\n        state.sharedData.variableNames.prepassNormalSampler = 0;\r\n\r\n        // Declarations\r\n        state.sharedData.textureBlocks.push(this);\r\n        state.sharedData.bindableBlocks.push(this);\r\n\r\n        state._emit2DSampler(this._positionSamplerName);\r\n        state._emit2DSampler(this._depthSamplerName);\r\n        state._emit2DSampler(this._normalSamplerName);\r\n\r\n        return this;\r\n    }\r\n\r\n    public bind(effect: Effect, nodeMaterial: NodeMaterial) {\r\n        const scene = nodeMaterial.getScene();\r\n        const prePassRenderer = scene.enablePrePassRenderer();\r\n        if (!prePassRenderer) {\r\n            return;\r\n        }\r\n\r\n        const sceneRT = prePassRenderer.defaultRT;\r\n        if (!sceneRT.textures) {\r\n            return;\r\n        }\r\n\r\n        if (this.position.isConnected) {\r\n            effect.setTexture(this._positionSamplerName, sceneRT.textures[prePassRenderer.getIndex(Constants.PREPASS_POSITION_TEXTURE_TYPE)]);\r\n        }\r\n        if (this.depth.isConnected) {\r\n            effect.setTexture(this._depthSamplerName, sceneRT.textures[prePassRenderer.getIndex(Constants.PREPASS_DEPTH_TEXTURE_TYPE)]);\r\n        }\r\n        if (this.normal.isConnected) {\r\n            effect.setTexture(this._normalSamplerName, sceneRT.textures[prePassRenderer.getIndex(Constants.PREPASS_NORMAL_TEXTURE_TYPE)]);\r\n        }\r\n    }\r\n}\r\n\r\nRegisterClass(\"BABYLON.PrePassTextureBlock\", PrePassTextureBlock);\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}