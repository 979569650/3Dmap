{"ast":null,"code":"import { Scalar } from \"../../Maths/math.scalar.js\";\nimport * as WebGPUConstants from \"./webgpuConstants.js\";\n/** @internal */\nexport class WebGPUHardwareTexture {\n  get underlyingResource() {\n    return this._webgpuTexture;\n  }\n  getMSAATexture(index = 0) {\n    var _a, _b;\n    return (_b = (_a = this._webgpuMSAATexture) === null || _a === void 0 ? void 0 : _a[index]) !== null && _b !== void 0 ? _b : null;\n  }\n  setMSAATexture(texture, index = -1) {\n    if (!this._webgpuMSAATexture) {\n      this._webgpuMSAATexture = [];\n    }\n    if (index === -1) {\n      index = this._webgpuMSAATexture.length;\n    }\n    this._webgpuMSAATexture[index] = texture;\n  }\n  releaseMSAATexture() {\n    if (this._webgpuMSAATexture) {\n      for (const texture of this._webgpuMSAATexture) {\n        texture === null || texture === void 0 ? void 0 : texture.destroy();\n      }\n      this._webgpuMSAATexture = null;\n    }\n  }\n  constructor(existingTexture = null) {\n    this.format = WebGPUConstants.TextureFormat.RGBA8Unorm;\n    this.textureUsages = 0;\n    this.textureAdditionalUsages = 0;\n    this._webgpuTexture = existingTexture;\n    this._webgpuMSAATexture = null;\n    this.view = null;\n    this.viewForWriting = null;\n  }\n  set(hardwareTexture) {\n    this._webgpuTexture = hardwareTexture;\n  }\n  setUsage(_textureSource, generateMipMaps, isCube, width, height) {\n    this.createView({\n      format: this.format,\n      dimension: isCube ? WebGPUConstants.TextureViewDimension.Cube : WebGPUConstants.TextureViewDimension.E2d,\n      mipLevelCount: generateMipMaps ? Scalar.ILog2(Math.max(width, height)) + 1 : 1,\n      baseArrayLayer: 0,\n      baseMipLevel: 0,\n      arrayLayerCount: isCube ? 6 : 1,\n      aspect: WebGPUConstants.TextureAspect.All\n    });\n  }\n  createView(descriptor, createViewForWriting = false) {\n    this.view = this._webgpuTexture.createView(descriptor);\n    if (createViewForWriting && descriptor) {\n      const saveNumMipMaps = descriptor.mipLevelCount;\n      descriptor.mipLevelCount = 1;\n      this.viewForWriting = this._webgpuTexture.createView(descriptor);\n      descriptor.mipLevelCount = saveNumMipMaps;\n    }\n  }\n  reset() {\n    this._webgpuTexture = null;\n    this._webgpuMSAATexture = null;\n    this.view = null;\n    this.viewForWriting = null;\n  }\n  release() {\n    var _a, _b;\n    (_a = this._webgpuTexture) === null || _a === void 0 ? void 0 : _a.destroy();\n    this.releaseMSAATexture();\n    (_b = this._copyInvertYTempTexture) === null || _b === void 0 ? void 0 : _b.destroy();\n    this.reset();\n  }\n}","map":{"version":3,"names":["Scalar","WebGPUConstants","WebGPUHardwareTexture","underlyingResource","_webgpuTexture","getMSAATexture","index","_b","_a","_webgpuMSAATexture","setMSAATexture","texture","length","releaseMSAATexture","destroy","constructor","existingTexture","format","TextureFormat","RGBA8Unorm","textureUsages","textureAdditionalUsages","view","viewForWriting","set","hardwareTexture","setUsage","_textureSource","generateMipMaps","isCube","width","height","createView","dimension","TextureViewDimension","Cube","E2d","mipLevelCount","ILog2","Math","max","baseArrayLayer","baseMipLevel","arrayLayerCount","aspect","TextureAspect","All","descriptor","createViewForWriting","saveNumMipMaps","reset","release","_copyInvertYTempTexture"],"sources":["../../../../../dev/core/src/Engines/WebGPU/webgpuHardwareTexture.ts"],"sourcesContent":["import type { HardwareTextureWrapper } from \"../../Materials/Textures/hardwareTextureWrapper\";\r\nimport { Scalar } from \"../../Maths/math.scalar\";\r\nimport type { Nullable } from \"../../types\";\r\nimport * as WebGPUConstants from \"./webgpuConstants\";\r\n\r\nimport type { WebGPUBundleList } from \"./webgpuBundleList\";\r\n\r\n/** @internal */\r\nexport class WebGPUHardwareTexture implements HardwareTextureWrapper {\r\n    /**\r\n     * List of bundles collected in the snapshot rendering mode when the texture is a render target texture\r\n     * The index in this array is the current layer we are rendering into\r\n     * @internal\r\n     */\r\n    public _bundleLists: WebGPUBundleList[];\r\n    /**\r\n     * Current layer we are rendering into when in snapshot rendering mode (if the texture is a render target texture)\r\n     * @internal\r\n     */\r\n    public _currentLayer: number;\r\n\r\n    /**\r\n     * Cache of RenderPassDescriptor and BindGroup used when generating mipmaps (see WebGPUTextureHelper.generateMipmaps)\r\n     * @internal\r\n     */\r\n    public _mipmapGenRenderPassDescr: GPURenderPassDescriptor[][];\r\n    /** @internal */\r\n    public _mipmapGenBindGroup: GPUBindGroup[][];\r\n\r\n    /**\r\n     * Cache for the invertYPreMultiplyAlpha function (see WebGPUTextureHelper)\r\n     * @internal\r\n     */\r\n    public _copyInvertYTempTexture?: GPUTexture;\r\n    /** @internal */\r\n    public _copyInvertYRenderPassDescr: GPURenderPassDescriptor;\r\n    /** @internal */\r\n    public _copyInvertYBindGroup: GPUBindGroup;\r\n    /** @internal */\r\n    public _copyInvertYBindGroupWithOfst: GPUBindGroup;\r\n\r\n    private _webgpuTexture: Nullable<GPUTexture>;\r\n    // There can be multiple MSAA textures for a single WebGPU texture because different layers of a 2DArrayTexture / 3DTexture\r\n    // or different faces of a cube texture can be bound to different render targets at the same time (in a multi RenderTargetWrapper)\r\n    private _webgpuMSAATexture: Nullable<GPUTexture[]>;\r\n\r\n    public get underlyingResource(): Nullable<GPUTexture> {\r\n        return this._webgpuTexture;\r\n    }\r\n\r\n    public getMSAATexture(index = 0): Nullable<GPUTexture> {\r\n        return this._webgpuMSAATexture?.[index] ?? null;\r\n    }\r\n\r\n    public setMSAATexture(texture: GPUTexture, index = -1) {\r\n        if (!this._webgpuMSAATexture) {\r\n            this._webgpuMSAATexture = [];\r\n        }\r\n\r\n        if (index === -1) {\r\n            index = this._webgpuMSAATexture.length;\r\n        }\r\n\r\n        this._webgpuMSAATexture![index] = texture;\r\n    }\r\n\r\n    public releaseMSAATexture() {\r\n        if (this._webgpuMSAATexture) {\r\n            for (const texture of this._webgpuMSAATexture) {\r\n                texture?.destroy();\r\n            }\r\n            this._webgpuMSAATexture = null;\r\n        }\r\n    }\r\n\r\n    public view: Nullable<GPUTextureView>;\r\n    public viewForWriting: Nullable<GPUTextureView>;\r\n    public format: GPUTextureFormat = WebGPUConstants.TextureFormat.RGBA8Unorm;\r\n    public textureUsages = 0;\r\n    public textureAdditionalUsages = 0;\r\n\r\n    constructor(existingTexture: Nullable<GPUTexture> = null) {\r\n        this._webgpuTexture = existingTexture;\r\n        this._webgpuMSAATexture = null;\r\n        this.view = null;\r\n        this.viewForWriting = null;\r\n    }\r\n\r\n    public set(hardwareTexture: GPUTexture): void {\r\n        this._webgpuTexture = hardwareTexture;\r\n    }\r\n\r\n    public setUsage(_textureSource: number, generateMipMaps: boolean, isCube: boolean, width: number, height: number): void {\r\n        this.createView({\r\n            format: this.format,\r\n            dimension: isCube ? WebGPUConstants.TextureViewDimension.Cube : WebGPUConstants.TextureViewDimension.E2d,\r\n            mipLevelCount: generateMipMaps ? Scalar.ILog2(Math.max(width, height)) + 1 : 1,\r\n            baseArrayLayer: 0,\r\n            baseMipLevel: 0,\r\n            arrayLayerCount: isCube ? 6 : 1,\r\n            aspect: WebGPUConstants.TextureAspect.All,\r\n        });\r\n    }\r\n\r\n    public createView(descriptor?: GPUTextureViewDescriptor, createViewForWriting = false): void {\r\n        this.view = this._webgpuTexture!.createView(descriptor);\r\n        if (createViewForWriting && descriptor) {\r\n            const saveNumMipMaps = descriptor.mipLevelCount;\r\n            descriptor.mipLevelCount = 1;\r\n            this.viewForWriting = this._webgpuTexture!.createView(descriptor);\r\n            descriptor.mipLevelCount = saveNumMipMaps;\r\n        }\r\n    }\r\n\r\n    public reset(): void {\r\n        this._webgpuTexture = null;\r\n        this._webgpuMSAATexture = null;\r\n        this.view = null;\r\n        this.viewForWriting = null;\r\n    }\r\n\r\n    public release(): void {\r\n        this._webgpuTexture?.destroy();\r\n        this.releaseMSAATexture();\r\n        this._copyInvertYTempTexture?.destroy();\r\n        this.reset();\r\n    }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}