{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { Observable } from \"../../../Misc/observable.js\";\nimport { NodeGeometryBlockConnectionPointTypes } from \"../Enums/nodeGeometryConnectionPointTypes.js\";\nimport { NodeGeometryBlock } from \"../nodeGeometryBlock.js\";\nimport { GetClass, RegisterClass } from \"../../../Misc/typeStore.js\";\nimport { Matrix, Vector2, Vector3, Vector4 } from \"../../../Maths/math.vector.js\";\nimport { NodeGeometryContextualSources } from \"../Enums/nodeGeometryContextualSources.js\";\n/**\n * Block used to expose an input value\n */\nexport class GeometryInputBlock extends NodeGeometryBlock {\n  /**\n   * Gets or sets the connection point type (default is float)\n   */\n  get type() {\n    if (this._type === NodeGeometryBlockConnectionPointTypes.AutoDetect) {\n      if (this.value != null) {\n        if (!isNaN(this.value)) {\n          this._type = NodeGeometryBlockConnectionPointTypes.Float;\n          return this._type;\n        }\n        switch (this.value.getClassName()) {\n          case \"Vector2\":\n            this._type = NodeGeometryBlockConnectionPointTypes.Vector2;\n            return this._type;\n          case \"Vector3\":\n            this._type = NodeGeometryBlockConnectionPointTypes.Vector3;\n            return this._type;\n          case \"Vector4\":\n            this._type = NodeGeometryBlockConnectionPointTypes.Vector4;\n            return this._type;\n          case \"Matrix\":\n            this._type = NodeGeometryBlockConnectionPointTypes.Matrix;\n            return this._type;\n        }\n      }\n    }\n    return this._type;\n  }\n  /**\n   * Gets a boolean indicating that the current connection point is a contextual value\n   */\n  get isContextual() {\n    return this._contextualSource !== NodeGeometryContextualSources.None;\n  }\n  /**\n   * Gets or sets the current contextual value\n   */\n  get contextualValue() {\n    return this._contextualSource;\n  }\n  set contextualValue(value) {\n    this._contextualSource = value;\n    switch (value) {\n      case NodeGeometryContextualSources.Positions:\n      case NodeGeometryContextualSources.Normals:\n        this._type = NodeGeometryBlockConnectionPointTypes.Vector3;\n        break;\n      case NodeGeometryContextualSources.Colors:\n      case NodeGeometryContextualSources.Tangents:\n        this._type = NodeGeometryBlockConnectionPointTypes.Vector4;\n        break;\n      case NodeGeometryContextualSources.UV:\n      case NodeGeometryContextualSources.UV2:\n      case NodeGeometryContextualSources.UV3:\n      case NodeGeometryContextualSources.UV4:\n      case NodeGeometryContextualSources.UV5:\n      case NodeGeometryContextualSources.UV6:\n        this._type = NodeGeometryBlockConnectionPointTypes.Vector2;\n        break;\n      case NodeGeometryContextualSources.VertexID:\n      case NodeGeometryContextualSources.GeometryID:\n      case NodeGeometryContextualSources.CollectionID:\n      case NodeGeometryContextualSources.FaceID:\n      case NodeGeometryContextualSources.LoopID:\n      case NodeGeometryContextualSources.InstanceID:\n        this._type = NodeGeometryBlockConnectionPointTypes.Int;\n        break;\n    }\n    if (this.output) {\n      this.output.type = this._type;\n    }\n  }\n  /**\n   * Creates a new InputBlock\n   * @param name defines the block name\n   * @param type defines the type of the input (can be set to NodeGeometryBlockConnectionPointTypes.AutoDetect)\n   */\n  constructor(name, type = NodeGeometryBlockConnectionPointTypes.AutoDetect) {\n    super(name);\n    this._type = NodeGeometryBlockConnectionPointTypes.Undefined;\n    this._contextualSource = NodeGeometryContextualSources.None;\n    /** Gets or set a value used to limit the range of float values */\n    this.min = 0;\n    /** Gets or set a value used to limit the range of float values */\n    this.max = 0;\n    /** Gets or sets the group to use to display this block in the Inspector */\n    this.groupInInspector = \"\";\n    /** Gets an observable raised when the value is changed */\n    this.onValueChangedObservable = new Observable();\n    this._type = type;\n    this._isInput = true;\n    this.setDefaultValue();\n    this.registerOutput(\"output\", type);\n  }\n  /**\n   * Gets or sets the value of that point.\n   * Please note that this value will be ignored if valueCallback is defined\n   */\n  get value() {\n    return this._storedValue;\n  }\n  set value(value) {\n    if (this.type === NodeGeometryBlockConnectionPointTypes.Float) {\n      if (this.min !== this.max) {\n        value = Math.max(this.min, value);\n        value = Math.min(this.max, value);\n      }\n    }\n    this._storedValue = value;\n    this.onValueChangedObservable.notifyObservers(this);\n  }\n  /**\n   * Gets or sets a callback used to get the value of that point.\n   * Please note that setting this value will force the connection point to ignore the value property\n   */\n  get valueCallback() {\n    return this._valueCallback;\n  }\n  set valueCallback(value) {\n    this._valueCallback = value;\n  }\n  /**\n   * Gets the current class name\n   * @returns the class name\n   */\n  getClassName() {\n    return \"GeometryInputBlock\";\n  }\n  /**\n   * Gets the geometry output component\n   */\n  get output() {\n    return this._outputs[0];\n  }\n  /**\n   * Set the input block to its default value (based on its type)\n   */\n  setDefaultValue() {\n    this.contextualValue = NodeGeometryContextualSources.None;\n    switch (this.type) {\n      case NodeGeometryBlockConnectionPointTypes.Int:\n      case NodeGeometryBlockConnectionPointTypes.Float:\n        this.value = 0;\n        break;\n      case NodeGeometryBlockConnectionPointTypes.Vector2:\n        this.value = Vector2.Zero();\n        break;\n      case NodeGeometryBlockConnectionPointTypes.Vector3:\n        this.value = Vector3.Zero();\n        break;\n      case NodeGeometryBlockConnectionPointTypes.Vector4:\n        this.value = Vector4.Zero();\n        break;\n      case NodeGeometryBlockConnectionPointTypes.Matrix:\n        this.value = Matrix.Identity();\n        break;\n    }\n  }\n  _buildBlock(state) {\n    super._buildBlock(state);\n    if (this.isContextual) {\n      this.output._storedValue = null;\n      this.output._storedFunction = state => {\n        return state.getContextualValue(this._contextualSource);\n      };\n    } else {\n      this.output._storedFunction = null;\n      this.output._storedValue = this.value;\n    }\n  }\n  dispose() {\n    this.onValueChangedObservable.clear();\n    super.dispose();\n  }\n  _dumpPropertiesCode() {\n    const variableName = this._codeVariableName;\n    if (this.isContextual) {\n      return super._dumpPropertiesCode() + `${variableName}.contextualValue = BABYLON.NodeGeometryContextualSources.${NodeGeometryContextualSources[this._contextualSource]};\\n`;\n    }\n    const codes = [];\n    let valueString = \"\";\n    switch (this.type) {\n      case NodeGeometryBlockConnectionPointTypes.Float:\n      case NodeGeometryBlockConnectionPointTypes.Int:\n        valueString = `${this.value}`;\n        break;\n      case NodeGeometryBlockConnectionPointTypes.Vector2:\n        valueString = `new BABYLON.Vector2(${this.value.x}, ${this.value.y})`;\n        break;\n      case NodeGeometryBlockConnectionPointTypes.Vector3:\n        valueString = `new BABYLON.Vector3(${this.value.x}, ${this.value.y}, ${this.value.z})`;\n        break;\n      case NodeGeometryBlockConnectionPointTypes.Vector4:\n        valueString = `new BABYLON.Vector4(${this.value.x}, ${this.value.y}, ${this.value.z}, ${this.value.w})`;\n        break;\n    }\n    // Common Property \"Value\"\n    codes.push(`${variableName}.value = ${valueString}`);\n    // Float-Value-Specific Properties\n    if (this.type === NodeGeometryBlockConnectionPointTypes.Float || this.type === NodeGeometryBlockConnectionPointTypes.Int) {\n      codes.push(`${variableName}.min = ${this.min}`, `${variableName}.max = ${this.max}`);\n    }\n    codes.push(\"\");\n    return super._dumpPropertiesCode() + codes.join(\";\\n\");\n  }\n  serialize() {\n    const serializationObject = super.serialize();\n    serializationObject.type = this.type;\n    serializationObject.contextualValue = this.contextualValue;\n    serializationObject.min = this.min;\n    serializationObject.max = this.max;\n    serializationObject.groupInInspector = this.groupInInspector;\n    if (this._storedValue !== null && !this.isContextual) {\n      if (this._storedValue.asArray) {\n        serializationObject.valueType = \"BABYLON.\" + this._storedValue.getClassName();\n        serializationObject.value = this._storedValue.asArray();\n      } else {\n        serializationObject.valueType = \"number\";\n        serializationObject.value = this._storedValue;\n      }\n    }\n    return serializationObject;\n  }\n  _deserialize(serializationObject) {\n    super._deserialize(serializationObject);\n    this._type = serializationObject.type;\n    this.contextualValue = serializationObject.contextualValue;\n    this.min = serializationObject.min || 0;\n    this.max = serializationObject.max || 0;\n    this.groupInInspector = serializationObject.groupInInspector || \"\";\n    if (!serializationObject.valueType) {\n      return;\n    }\n    if (serializationObject.valueType === \"number\") {\n      this._storedValue = serializationObject.value;\n    } else {\n      const valueType = GetClass(serializationObject.valueType);\n      if (valueType) {\n        this._storedValue = valueType.FromArray(serializationObject.value);\n      }\n    }\n  }\n}\nRegisterClass(\"BABYLON.GeometryInputBlock\", GeometryInputBlock);","map":{"version":3,"names":["Observable","NodeGeometryBlockConnectionPointTypes","NodeGeometryBlock","GetClass","RegisterClass","Matrix","Vector2","Vector3","Vector4","NodeGeometryContextualSources","GeometryInputBlock","type","_type","AutoDetect","value","isNaN","Float","getClassName","isContextual","_contextualSource","None","contextualValue","Positions","Normals","Colors","Tangents","UV","UV2","UV3","UV4","UV5","UV6","VertexID","GeometryID","CollectionID","FaceID","LoopID","InstanceID","Int","output","constructor","name","Undefined","min","max","groupInInspector","onValueChangedObservable","_isInput","setDefaultValue","registerOutput","_storedValue","Math","notifyObservers","valueCallback","_valueCallback","_outputs","Zero","Identity","_buildBlock","state","_storedFunction","getContextualValue","dispose","clear","_dumpPropertiesCode","variableName","_codeVariableName","codes","valueString","x","y","z","w","push","join","serialize","serializationObject","asArray","valueType","_deserialize","FromArray"],"sources":["../../../../../../dev/core/src/Meshes/Node/Blocks/geometryInputBlock.ts"],"sourcesContent":["import { Observable } from \"../../../Misc/observable\";\r\nimport { NodeGeometryBlockConnectionPointTypes } from \"../Enums/nodeGeometryConnectionPointTypes\";\r\nimport { NodeGeometryBlock } from \"../nodeGeometryBlock\";\r\nimport type { NodeGeometryConnectionPoint } from \"../nodeGeometryBlockConnectionPoint\";\r\nimport { GetClass, RegisterClass } from \"../../../Misc/typeStore\";\r\nimport { Matrix, Vector2, Vector3, Vector4 } from \"../../../Maths/math.vector\";\r\nimport type { NodeGeometryBuildState } from \"../nodeGeometryBuildState\";\r\nimport { NodeGeometryContextualSources } from \"../Enums/nodeGeometryContextualSources\";\r\n\r\n/**\r\n * Block used to expose an input value\r\n */\r\nexport class GeometryInputBlock extends NodeGeometryBlock {\r\n    private _storedValue: any;\r\n    private _valueCallback: () => any;\r\n    private _type: NodeGeometryBlockConnectionPointTypes = NodeGeometryBlockConnectionPointTypes.Undefined;\r\n    private _contextualSource = NodeGeometryContextualSources.None;\r\n\r\n    /** Gets or set a value used to limit the range of float values */\r\n    public min: number = 0;\r\n\r\n    /** Gets or set a value used to limit the range of float values */\r\n    public max: number = 0;\r\n\r\n    /** Gets or sets the group to use to display this block in the Inspector */\r\n    public groupInInspector = \"\";\r\n\r\n    /** Gets an observable raised when the value is changed */\r\n    public onValueChangedObservable = new Observable<GeometryInputBlock>();\r\n\r\n    /**\r\n     * Gets or sets the connection point type (default is float)\r\n     */\r\n    public get type(): NodeGeometryBlockConnectionPointTypes {\r\n        if (this._type === NodeGeometryBlockConnectionPointTypes.AutoDetect) {\r\n            if (this.value != null) {\r\n                if (!isNaN(this.value)) {\r\n                    this._type = NodeGeometryBlockConnectionPointTypes.Float;\r\n                    return this._type;\r\n                }\r\n\r\n                switch (this.value.getClassName()) {\r\n                    case \"Vector2\":\r\n                        this._type = NodeGeometryBlockConnectionPointTypes.Vector2;\r\n                        return this._type;\r\n                    case \"Vector3\":\r\n                        this._type = NodeGeometryBlockConnectionPointTypes.Vector3;\r\n                        return this._type;\r\n                    case \"Vector4\":\r\n                        this._type = NodeGeometryBlockConnectionPointTypes.Vector4;\r\n                        return this._type;\r\n                    case \"Matrix\":\r\n                        this._type = NodeGeometryBlockConnectionPointTypes.Matrix;\r\n                        return this._type;\r\n                }\r\n            }\r\n        }\r\n\r\n        return this._type;\r\n    }\r\n\r\n    /**\r\n     * Gets a boolean indicating that the current connection point is a contextual value\r\n     */\r\n    public get isContextual(): boolean {\r\n        return this._contextualSource !== NodeGeometryContextualSources.None;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the current contextual value\r\n     */\r\n    public get contextualValue(): NodeGeometryContextualSources {\r\n        return this._contextualSource;\r\n    }\r\n\r\n    public set contextualValue(value: NodeGeometryContextualSources) {\r\n        this._contextualSource = value;\r\n\r\n        switch (value) {\r\n            case NodeGeometryContextualSources.Positions:\r\n            case NodeGeometryContextualSources.Normals:\r\n                this._type = NodeGeometryBlockConnectionPointTypes.Vector3;\r\n                break;\r\n            case NodeGeometryContextualSources.Colors:\r\n            case NodeGeometryContextualSources.Tangents:\r\n                this._type = NodeGeometryBlockConnectionPointTypes.Vector4;\r\n                break;\r\n            case NodeGeometryContextualSources.UV:\r\n            case NodeGeometryContextualSources.UV2:\r\n            case NodeGeometryContextualSources.UV3:\r\n            case NodeGeometryContextualSources.UV4:\r\n            case NodeGeometryContextualSources.UV5:\r\n            case NodeGeometryContextualSources.UV6:\r\n                this._type = NodeGeometryBlockConnectionPointTypes.Vector2;\r\n                break;\r\n            case NodeGeometryContextualSources.VertexID:\r\n            case NodeGeometryContextualSources.GeometryID:\r\n            case NodeGeometryContextualSources.CollectionID:\r\n            case NodeGeometryContextualSources.FaceID:\r\n            case NodeGeometryContextualSources.LoopID:\r\n            case NodeGeometryContextualSources.InstanceID:\r\n                this._type = NodeGeometryBlockConnectionPointTypes.Int;\r\n                break;\r\n        }\r\n\r\n        if (this.output) {\r\n            this.output.type = this._type;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Creates a new InputBlock\r\n     * @param name defines the block name\r\n     * @param type defines the type of the input (can be set to NodeGeometryBlockConnectionPointTypes.AutoDetect)\r\n     */\r\n    public constructor(name: string, type: NodeGeometryBlockConnectionPointTypes = NodeGeometryBlockConnectionPointTypes.AutoDetect) {\r\n        super(name);\r\n\r\n        this._type = type;\r\n        this._isInput = true;\r\n\r\n        this.setDefaultValue();\r\n\r\n        this.registerOutput(\"output\", type);\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the value of that point.\r\n     * Please note that this value will be ignored if valueCallback is defined\r\n     */\r\n    public get value(): any {\r\n        return this._storedValue;\r\n    }\r\n\r\n    public set value(value: any) {\r\n        if (this.type === NodeGeometryBlockConnectionPointTypes.Float) {\r\n            if (this.min !== this.max) {\r\n                value = Math.max(this.min, value);\r\n                value = Math.min(this.max, value);\r\n            }\r\n        }\r\n\r\n        this._storedValue = value;\r\n\r\n        this.onValueChangedObservable.notifyObservers(this);\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a callback used to get the value of that point.\r\n     * Please note that setting this value will force the connection point to ignore the value property\r\n     */\r\n    public get valueCallback(): () => any {\r\n        return this._valueCallback;\r\n    }\r\n\r\n    public set valueCallback(value: () => any) {\r\n        this._valueCallback = value;\r\n    }\r\n\r\n    /**\r\n     * Gets the current class name\r\n     * @returns the class name\r\n     */\r\n    public getClassName() {\r\n        return \"GeometryInputBlock\";\r\n    }\r\n\r\n    /**\r\n     * Gets the geometry output component\r\n     */\r\n    public get output(): NodeGeometryConnectionPoint {\r\n        return this._outputs[0];\r\n    }\r\n\r\n    /**\r\n     * Set the input block to its default value (based on its type)\r\n     */\r\n    public setDefaultValue() {\r\n        this.contextualValue = NodeGeometryContextualSources.None;\r\n        switch (this.type) {\r\n            case NodeGeometryBlockConnectionPointTypes.Int:\r\n            case NodeGeometryBlockConnectionPointTypes.Float:\r\n                this.value = 0;\r\n                break;\r\n            case NodeGeometryBlockConnectionPointTypes.Vector2:\r\n                this.value = Vector2.Zero();\r\n                break;\r\n            case NodeGeometryBlockConnectionPointTypes.Vector3:\r\n                this.value = Vector3.Zero();\r\n                break;\r\n            case NodeGeometryBlockConnectionPointTypes.Vector4:\r\n                this.value = Vector4.Zero();\r\n                break;\r\n            case NodeGeometryBlockConnectionPointTypes.Matrix:\r\n                this.value = Matrix.Identity();\r\n                break;\r\n        }\r\n    }\r\n\r\n    protected _buildBlock(state: NodeGeometryBuildState) {\r\n        super._buildBlock(state);\r\n\r\n        if (this.isContextual) {\r\n            this.output._storedValue = null;\r\n            this.output._storedFunction = (state) => {\r\n                return state.getContextualValue(this._contextualSource);\r\n            };\r\n        } else {\r\n            this.output._storedFunction = null;\r\n            this.output._storedValue = this.value;\r\n        }\r\n    }\r\n\r\n    public dispose() {\r\n        this.onValueChangedObservable.clear();\r\n\r\n        super.dispose();\r\n    }\r\n\r\n    protected _dumpPropertiesCode() {\r\n        const variableName = this._codeVariableName;\r\n\r\n        if (this.isContextual) {\r\n            return (\r\n                super._dumpPropertiesCode() + `${variableName}.contextualValue = BABYLON.NodeGeometryContextualSources.${NodeGeometryContextualSources[this._contextualSource]};\\n`\r\n            );\r\n        }\r\n        const codes: string[] = [];\r\n\r\n        let valueString = \"\";\r\n\r\n        switch (this.type) {\r\n            case NodeGeometryBlockConnectionPointTypes.Float:\r\n            case NodeGeometryBlockConnectionPointTypes.Int:\r\n                valueString = `${this.value}`;\r\n                break;\r\n            case NodeGeometryBlockConnectionPointTypes.Vector2:\r\n                valueString = `new BABYLON.Vector2(${this.value.x}, ${this.value.y})`;\r\n                break;\r\n            case NodeGeometryBlockConnectionPointTypes.Vector3:\r\n                valueString = `new BABYLON.Vector3(${this.value.x}, ${this.value.y}, ${this.value.z})`;\r\n                break;\r\n            case NodeGeometryBlockConnectionPointTypes.Vector4:\r\n                valueString = `new BABYLON.Vector4(${this.value.x}, ${this.value.y}, ${this.value.z}, ${this.value.w})`;\r\n                break;\r\n        }\r\n\r\n        // Common Property \"Value\"\r\n        codes.push(`${variableName}.value = ${valueString}`);\r\n\r\n        // Float-Value-Specific Properties\r\n        if (this.type === NodeGeometryBlockConnectionPointTypes.Float || this.type === NodeGeometryBlockConnectionPointTypes.Int) {\r\n            codes.push(`${variableName}.min = ${this.min}`, `${variableName}.max = ${this.max}`);\r\n        }\r\n\r\n        codes.push(\"\");\r\n\r\n        return super._dumpPropertiesCode() + codes.join(\";\\n\");\r\n    }\r\n\r\n    public serialize(): any {\r\n        const serializationObject = super.serialize();\r\n\r\n        serializationObject.type = this.type;\r\n        serializationObject.contextualValue = this.contextualValue;\r\n        serializationObject.min = this.min;\r\n        serializationObject.max = this.max;\r\n        serializationObject.groupInInspector = this.groupInInspector;\r\n\r\n        if (this._storedValue !== null && !this.isContextual) {\r\n            if (this._storedValue.asArray) {\r\n                serializationObject.valueType = \"BABYLON.\" + this._storedValue.getClassName();\r\n                serializationObject.value = this._storedValue.asArray();\r\n            } else {\r\n                serializationObject.valueType = \"number\";\r\n                serializationObject.value = this._storedValue;\r\n            }\r\n        }\r\n\r\n        return serializationObject;\r\n    }\r\n\r\n    public _deserialize(serializationObject: any) {\r\n        super._deserialize(serializationObject);\r\n\r\n        this._type = serializationObject.type;\r\n\r\n        this.contextualValue = serializationObject.contextualValue;\r\n        this.min = serializationObject.min || 0;\r\n        this.max = serializationObject.max || 0;\r\n        this.groupInInspector = serializationObject.groupInInspector || \"\";\r\n\r\n        if (!serializationObject.valueType) {\r\n            return;\r\n        }\r\n\r\n        if (serializationObject.valueType === \"number\") {\r\n            this._storedValue = serializationObject.value;\r\n        } else {\r\n            const valueType = GetClass(serializationObject.valueType);\r\n\r\n            if (valueType) {\r\n                this._storedValue = valueType.FromArray(serializationObject.value);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nRegisterClass(\"BABYLON.GeometryInputBlock\", GeometryInputBlock);\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}