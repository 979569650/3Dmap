{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { TmpVectors, Vector2, Vector3 } from \"../../Maths/math.vector.js\";\nimport { Logger } from \"../../Misc/logger.js\";\nimport { Observable } from \"../../Misc/observable.js\";\nimport { WebXRFeatureName, WebXRFeaturesManager } from \"../webXRFeaturesManager.js\";\nimport { WebXRAbstractFeature } from \"./WebXRAbstractFeature.js\";\nclass CircleBuffer {\n  constructor(numSamples, initializer) {\n    this._samples = [];\n    this._idx = 0;\n    for (let idx = 0; idx < numSamples; ++idx) {\n      this._samples.push(initializer ? initializer() : Vector2.Zero());\n    }\n  }\n  get length() {\n    return this._samples.length;\n  }\n  push(x, y) {\n    this._idx = (this._idx + this._samples.length - 1) % this._samples.length;\n    this.at(0).copyFromFloats(x, y);\n  }\n  at(idx) {\n    if (idx >= this._samples.length) {\n      throw new Error(\"Index out of bounds\");\n    }\n    return this._samples[(this._idx + idx) % this._samples.length];\n  }\n}\nclass FirstStepDetector {\n  constructor() {\n    this._samples = new CircleBuffer(20);\n    this._entropy = 0;\n    this.onFirstStepDetected = new Observable();\n  }\n  update(posX, posY, forwardX, forwardY) {\n    this._samples.push(posX, posY);\n    const origin = this._samples.at(0);\n    this._entropy *= this._entropyDecayFactor;\n    this._entropy += Vector2.Distance(origin, this._samples.at(1));\n    if (this._entropy > this._entropyThreshold) {\n      return;\n    }\n    let samePointIdx;\n    for (samePointIdx = this._samePointCheckStartIdx; samePointIdx < this._samples.length; ++samePointIdx) {\n      if (Vector2.DistanceSquared(origin, this._samples.at(samePointIdx)) < this._samePointSquaredDistanceThreshold) {\n        break;\n      }\n    }\n    if (samePointIdx === this._samples.length) {\n      return;\n    }\n    let apexDistSquared = -1;\n    let apexIdx = 0;\n    for (let distSquared, idx = 1; idx < samePointIdx; ++idx) {\n      distSquared = Vector2.DistanceSquared(origin, this._samples.at(idx));\n      if (distSquared > apexDistSquared) {\n        apexIdx = idx;\n        apexDistSquared = distSquared;\n      }\n    }\n    if (apexDistSquared < this._apexSquaredDistanceThreshold) {\n      return;\n    }\n    const apex = this._samples.at(apexIdx);\n    const axis = apex.subtract(origin);\n    axis.normalize();\n    const vec = TmpVectors.Vector2[0];\n    let dot;\n    let sample;\n    let sumSquaredProjectionDistances = 0;\n    for (let idx = 1; idx < samePointIdx; ++idx) {\n      sample = this._samples.at(idx);\n      sample.subtractToRef(origin, vec);\n      dot = Vector2.Dot(axis, vec);\n      sumSquaredProjectionDistances += vec.lengthSquared() - dot * dot;\n    }\n    if (sumSquaredProjectionDistances > samePointIdx * this._squaredProjectionDistanceThreshold) {\n      return;\n    }\n    const forwardVec = TmpVectors.Vector3[0];\n    forwardVec.set(forwardX, forwardY, 0);\n    const axisVec = TmpVectors.Vector3[1];\n    axisVec.set(axis.x, axis.y, 0);\n    const isApexLeft = Vector3.Cross(forwardVec, axisVec).z > 0;\n    const leftApex = origin.clone();\n    const rightApex = origin.clone();\n    apex.subtractToRef(origin, axis);\n    if (isApexLeft) {\n      axis.scaleAndAddToRef(this._axisToApexShrinkFactor, leftApex);\n      axis.scaleAndAddToRef(this._axisToApexExtendFactor, rightApex);\n    } else {\n      axis.scaleAndAddToRef(this._axisToApexExtendFactor, leftApex);\n      axis.scaleAndAddToRef(this._axisToApexShrinkFactor, rightApex);\n    }\n    this.onFirstStepDetected.notifyObservers({\n      leftApex: leftApex,\n      rightApex: rightApex,\n      currentPosition: origin,\n      currentStepDirection: isApexLeft ? \"right\" : \"left\"\n    });\n  }\n  reset() {\n    for (let idx = 0; idx < this._samples.length; ++idx) {\n      this._samples.at(idx).copyFromFloats(0, 0);\n    }\n  }\n  get _samePointCheckStartIdx() {\n    return Math.floor(this._samples.length / 3);\n  }\n  get _samePointSquaredDistanceThreshold() {\n    return 0.03 * 0.03;\n  }\n  get _apexSquaredDistanceThreshold() {\n    return 0.09 * 0.09;\n  }\n  get _squaredProjectionDistanceThreshold() {\n    return 0.03 * 0.03;\n  }\n  get _axisToApexShrinkFactor() {\n    return 0.8;\n  }\n  get _axisToApexExtendFactor() {\n    return -1.6;\n  }\n  get _entropyDecayFactor() {\n    return 0.93;\n  }\n  get _entropyThreshold() {\n    return 0.4;\n  }\n}\nclass WalkingTracker {\n  constructor(leftApex, rightApex, currentPosition, currentStepDirection) {\n    this._leftApex = new Vector2();\n    this._rightApex = new Vector2();\n    this._currentPosition = new Vector2();\n    this._axis = new Vector2();\n    this._axisLength = -1;\n    this._forward = new Vector2();\n    this._steppingLeft = false;\n    this._t = -1;\n    this._maxT = -1;\n    this._maxTPosition = new Vector2();\n    this._vitality = 0;\n    this.onMovement = new Observable();\n    this.onFootfall = new Observable();\n    this._reset(leftApex, rightApex, currentPosition, currentStepDirection === \"left\");\n  }\n  _reset(leftApex, rightApex, currentPosition, steppingLeft) {\n    this._leftApex.copyFrom(leftApex);\n    this._rightApex.copyFrom(rightApex);\n    this._steppingLeft = steppingLeft;\n    if (this._steppingLeft) {\n      this._leftApex.subtractToRef(this._rightApex, this._axis);\n      this._forward.copyFromFloats(-this._axis.y, this._axis.x);\n    } else {\n      this._rightApex.subtractToRef(this._leftApex, this._axis);\n      this._forward.copyFromFloats(this._axis.y, -this._axis.x);\n    }\n    this._axisLength = this._axis.length();\n    this._forward.scaleInPlace(1 / this._axisLength);\n    this._updateTAndVitality(currentPosition.x, currentPosition.y);\n    this._maxT = this._t;\n    this._maxTPosition.copyFrom(currentPosition);\n    this._vitality = 1;\n  }\n  _updateTAndVitality(x, y) {\n    this._currentPosition.copyFromFloats(x, y);\n    if (this._steppingLeft) {\n      this._currentPosition.subtractInPlace(this._rightApex);\n    } else {\n      this._currentPosition.subtractInPlace(this._leftApex);\n    }\n    const priorT = this._t;\n    const dot = Vector2.Dot(this._currentPosition, this._axis);\n    this._t = dot / (this._axisLength * this._axisLength);\n    const projDistSquared = this._currentPosition.lengthSquared() - dot / this._axisLength * (dot / this._axisLength);\n    // TODO: Extricate the magic.\n    this._vitality *= 0.92 - 100 * Math.max(projDistSquared - 0.0016, 0) + Math.max(this._t - priorT, 0);\n  }\n  update(x, y) {\n    if (this._vitality < this._vitalityThreshold) {\n      return false;\n    }\n    const priorT = this._t;\n    this._updateTAndVitality(x, y);\n    if (this._t > this._maxT) {\n      this._maxT = this._t;\n      this._maxTPosition.copyFromFloats(x, y);\n    }\n    if (this._vitality < this._vitalityThreshold) {\n      return false;\n    }\n    if (this._t > priorT) {\n      this.onMovement.notifyObservers({\n        deltaT: this._t - priorT\n      });\n      if (priorT < 0.5 && this._t >= 0.5) {\n        this.onFootfall.notifyObservers({\n          foot: this._steppingLeft ? \"left\" : \"right\"\n        });\n      }\n    }\n    if (this._t < 0.95 * this._maxT) {\n      this._currentPosition.copyFromFloats(x, y);\n      if (this._steppingLeft) {\n        this._leftApex.copyFrom(this._maxTPosition);\n      } else {\n        this._rightApex.copyFrom(this._maxTPosition);\n      }\n      this._reset(this._leftApex, this._rightApex, this._currentPosition, !this._steppingLeft);\n    }\n    if (this._axisLength < 0.03) {\n      return false;\n    }\n    return true;\n  }\n  get _vitalityThreshold() {\n    return 0.1;\n  }\n  get forward() {\n    return this._forward;\n  }\n}\nclass Walker {\n  static get _MillisecondsPerUpdate() {\n    // 15 FPS\n    return 1000 / 15;\n  }\n  constructor(engine) {\n    this._detector = new FirstStepDetector();\n    this._walker = null;\n    this._movement = new Vector2();\n    this._millisecondsSinceLastUpdate = Walker._MillisecondsPerUpdate;\n    this.movementThisFrame = Vector3.Zero();\n    this._engine = engine;\n    this._detector.onFirstStepDetected.add(event => {\n      if (!this._walker) {\n        this._walker = new WalkingTracker(event.leftApex, event.rightApex, event.currentPosition, event.currentStepDirection);\n        this._walker.onFootfall.add(() => {\n          console.log(\"Footfall!\");\n        });\n        this._walker.onMovement.add(event => {\n          this._walker.forward.scaleAndAddToRef(0.024 * event.deltaT, this._movement);\n        });\n      }\n    });\n  }\n  update(position, forward) {\n    forward.y = 0;\n    forward.normalize();\n    // Enforce reduced framerate\n    this._millisecondsSinceLastUpdate += this._engine.getDeltaTime();\n    if (this._millisecondsSinceLastUpdate >= Walker._MillisecondsPerUpdate) {\n      this._millisecondsSinceLastUpdate -= Walker._MillisecondsPerUpdate;\n      this._detector.update(position.x, position.z, forward.x, forward.z);\n      if (this._walker) {\n        const updated = this._walker.update(position.x, position.z);\n        if (!updated) {\n          this._walker = null;\n        }\n      }\n      this._movement.scaleInPlace(0.85);\n    }\n    this.movementThisFrame.set(this._movement.x, 0, this._movement.y);\n  }\n}\n/**\n * A module that will enable VR locomotion by detecting when the user walks in place.\n */\nexport class WebXRWalkingLocomotion extends WebXRAbstractFeature {\n  /**\n   * The module's name.\n   */\n  static get Name() {\n    return WebXRFeatureName.WALKING_LOCOMOTION;\n  }\n  /**\n   * The (Babylon) version of this module.\n   * This is an integer representing the implementation version.\n   * This number has no external basis.\n   */\n  static get Version() {\n    return 1;\n  }\n  /**\n   * The target to be articulated by walking locomotion.\n   * When the walking locomotion feature detects walking in place, this element's\n   * X and Z coordinates will be modified to reflect locomotion. This target should\n   * be either the XR space's origin (i.e., the parent node of the WebXRCamera) or\n   * the WebXRCamera itself. Note that the WebXRCamera path will modify the position\n   * of the WebXRCamera directly and is thus discouraged.\n   */\n  get locomotionTarget() {\n    return this._locomotionTarget;\n  }\n  /**\n   * The target to be articulated by walking locomotion.\n   * When the walking locomotion feature detects walking in place, this element's\n   * X and Z coordinates will be modified to reflect locomotion. This target should\n   * be either the XR space's origin (i.e., the parent node of the WebXRCamera) or\n   * the WebXRCamera itself. Note that the WebXRCamera path will modify the position\n   * of the WebXRCamera directly and is thus discouraged.\n   */\n  set locomotionTarget(locomotionTarget) {\n    this._locomotionTarget = locomotionTarget;\n    this._isLocomotionTargetWebXRCamera = this._locomotionTarget.getClassName() === \"WebXRCamera\";\n  }\n  /**\n   * Construct a new Walking Locomotion feature.\n   * @param sessionManager manager for the current XR session\n   * @param options creation options, prominently including the vector target for locomotion\n   */\n  constructor(sessionManager, options) {\n    super(sessionManager);\n    this._up = new Vector3();\n    this._forward = new Vector3();\n    this._position = new Vector3();\n    this._movement = new Vector3();\n    this._sessionManager = sessionManager;\n    this.locomotionTarget = options.locomotionTarget;\n    if (this._isLocomotionTargetWebXRCamera) {\n      Logger.Warn(\"Using walking locomotion directly on a WebXRCamera may have unintended interactions with other XR techniques. Using an XR space parent is highly recommended\");\n    }\n  }\n  /**\n   * Checks whether this feature is compatible with the current WebXR session.\n   * Walking locomotion is only compatible with \"immersive-vr\" sessions.\n   * @returns true if compatible, false otherwise\n   */\n  isCompatible() {\n    return this._sessionManager.sessionMode === undefined || this._sessionManager.sessionMode === \"immersive-vr\";\n  }\n  /**\n   * Attaches the feature.\n   * Typically called automatically by the features manager.\n   * @returns true if attach succeeded, false otherwise\n   */\n  attach() {\n    if (!this.isCompatible || !super.attach()) {\n      return false;\n    }\n    this._walker = new Walker(this._sessionManager.scene.getEngine());\n    return true;\n  }\n  /**\n   * Detaches the feature.\n   * Typically called automatically by the features manager.\n   * @returns true if detach succeeded, false otherwise\n   */\n  detach() {\n    if (!super.detach()) {\n      return false;\n    }\n    this._walker = null;\n    return true;\n  }\n  _onXRFrame(frame) {\n    const pose = frame.getViewerPose(this._sessionManager.baseReferenceSpace);\n    if (!pose) {\n      return;\n    }\n    const handednessScalar = this.locomotionTarget.getScene().useRightHandedSystem ? 1 : -1;\n    const m = pose.transform.matrix;\n    this._up.copyFromFloats(m[4], m[5], handednessScalar * m[6]);\n    this._forward.copyFromFloats(m[8], m[9], handednessScalar * m[10]);\n    this._position.copyFromFloats(m[12], m[13], handednessScalar * m[14]);\n    // Compute the nape position\n    this._forward.scaleAndAddToRef(0.05, this._position);\n    this._up.scaleAndAddToRef(-0.05, this._position);\n    this._walker.update(this._position, this._forward);\n    this._movement.copyFrom(this._walker.movementThisFrame);\n    if (!this._isLocomotionTargetWebXRCamera) {\n      Vector3.TransformNormalToRef(this._movement, this.locomotionTarget.getWorldMatrix(), this._movement);\n    }\n    this.locomotionTarget.position.addInPlace(this._movement);\n  }\n}\n//register the plugin\nWebXRFeaturesManager.AddWebXRFeature(WebXRWalkingLocomotion.Name, (xrSessionManager, options) => {\n  return () => new WebXRWalkingLocomotion(xrSessionManager, options);\n}, WebXRWalkingLocomotion.Version, false);","map":{"version":3,"names":["TmpVectors","Vector2","Vector3","Logger","Observable","WebXRFeatureName","WebXRFeaturesManager","WebXRAbstractFeature","CircleBuffer","constructor","numSamples","initializer","_samples","_idx","idx","push","Zero","length","x","y","at","copyFromFloats","Error","FirstStepDetector","_entropy","onFirstStepDetected","update","posX","posY","forwardX","forwardY","origin","_entropyDecayFactor","Distance","_entropyThreshold","samePointIdx","_samePointCheckStartIdx","DistanceSquared","_samePointSquaredDistanceThreshold","apexDistSquared","apexIdx","distSquared","_apexSquaredDistanceThreshold","apex","axis","subtract","normalize","vec","dot","sample","sumSquaredProjectionDistances","subtractToRef","Dot","lengthSquared","_squaredProjectionDistanceThreshold","forwardVec","set","axisVec","isApexLeft","Cross","z","leftApex","clone","rightApex","scaleAndAddToRef","_axisToApexShrinkFactor","_axisToApexExtendFactor","notifyObservers","currentPosition","currentStepDirection","reset","Math","floor","WalkingTracker","_leftApex","_rightApex","_currentPosition","_axis","_axisLength","_forward","_steppingLeft","_t","_maxT","_maxTPosition","_vitality","onMovement","onFootfall","_reset","steppingLeft","copyFrom","scaleInPlace","_updateTAndVitality","subtractInPlace","priorT","projDistSquared","max","_vitalityThreshold","deltaT","foot","forward","Walker","_MillisecondsPerUpdate","engine","_detector","_walker","_movement","_millisecondsSinceLastUpdate","movementThisFrame","_engine","add","event","console","log","position","getDeltaTime","updated","WebXRWalkingLocomotion","Name","WALKING_LOCOMOTION","Version","locomotionTarget","_locomotionTarget","_isLocomotionTargetWebXRCamera","getClassName","sessionManager","options","_up","_position","_sessionManager","Warn","isCompatible","sessionMode","undefined","attach","scene","getEngine","detach","_onXRFrame","frame","pose","getViewerPose","baseReferenceSpace","handednessScalar","getScene","useRightHandedSystem","m","transform","matrix","TransformNormalToRef","getWorldMatrix","addInPlace","AddWebXRFeature","xrSessionManager"],"sources":["../../../../../dev/core/src/XR/features/WebXRWalkingLocomotion.ts"],"sourcesContent":["import type { Engine } from \"../../Engines/engine\";\r\nimport { TmpVectors, Vector2, Vector3 } from \"../../Maths/math.vector\";\r\nimport type { TransformNode } from \"../../Meshes/transformNode\";\r\nimport { Logger } from \"../../Misc/logger\";\r\nimport { Observable } from \"../../Misc/observable\";\r\nimport type { Nullable } from \"../../types\";\r\nimport type { WebXRCamera } from \"../webXRCamera\";\r\nimport { WebXRFeatureName, WebXRFeaturesManager } from \"../webXRFeaturesManager\";\r\nimport type { WebXRSessionManager } from \"../webXRSessionManager\";\r\nimport { WebXRAbstractFeature } from \"./WebXRAbstractFeature\";\r\n\r\nclass CircleBuffer {\r\n    private _samples: Array<Vector2> = [];\r\n    private _idx: number = 0;\r\n\r\n    constructor(numSamples: number, initializer?: () => Vector2) {\r\n        for (let idx = 0; idx < numSamples; ++idx) {\r\n            this._samples.push(initializer ? initializer() : Vector2.Zero());\r\n        }\r\n    }\r\n\r\n    public get length() {\r\n        return this._samples.length;\r\n    }\r\n\r\n    public push(x: number, y: number) {\r\n        this._idx = (this._idx + this._samples.length - 1) % this._samples.length;\r\n        this.at(0).copyFromFloats(x, y);\r\n    }\r\n\r\n    public at(idx: number) {\r\n        if (idx >= this._samples.length) {\r\n            throw new Error(\"Index out of bounds\");\r\n        }\r\n        return this._samples[(this._idx + idx) % this._samples.length];\r\n    }\r\n}\r\n\r\ninterface IDetectedStep {\r\n    leftApex: Vector2;\r\n    rightApex: Vector2;\r\n    currentPosition: Vector2;\r\n    currentStepDirection: \"left\" | \"right\";\r\n}\r\n\r\nclass FirstStepDetector {\r\n    private _samples = new CircleBuffer(20);\r\n    private _entropy = 0;\r\n\r\n    public onFirstStepDetected: Observable<IDetectedStep> = new Observable<IDetectedStep>();\r\n\r\n    public update(posX: number, posY: number, forwardX: number, forwardY: number) {\r\n        this._samples.push(posX, posY);\r\n        const origin = this._samples.at(0);\r\n\r\n        this._entropy *= this._entropyDecayFactor;\r\n        this._entropy += Vector2.Distance(origin, this._samples.at(1));\r\n        if (this._entropy > this._entropyThreshold) {\r\n            return;\r\n        }\r\n\r\n        let samePointIdx;\r\n        for (samePointIdx = this._samePointCheckStartIdx; samePointIdx < this._samples.length; ++samePointIdx) {\r\n            if (Vector2.DistanceSquared(origin, this._samples.at(samePointIdx)) < this._samePointSquaredDistanceThreshold) {\r\n                break;\r\n            }\r\n        }\r\n\r\n        if (samePointIdx === this._samples.length) {\r\n            return;\r\n        }\r\n\r\n        let apexDistSquared = -1;\r\n        let apexIdx = 0;\r\n        for (let distSquared, idx = 1; idx < samePointIdx; ++idx) {\r\n            distSquared = Vector2.DistanceSquared(origin, this._samples.at(idx));\r\n            if (distSquared > apexDistSquared) {\r\n                apexIdx = idx;\r\n                apexDistSquared = distSquared;\r\n            }\r\n        }\r\n\r\n        if (apexDistSquared < this._apexSquaredDistanceThreshold) {\r\n            return;\r\n        }\r\n\r\n        const apex = this._samples.at(apexIdx);\r\n        const axis = apex.subtract(origin);\r\n        axis.normalize();\r\n\r\n        const vec = TmpVectors.Vector2[0];\r\n        let dot;\r\n        let sample;\r\n        let sumSquaredProjectionDistances = 0;\r\n        for (let idx = 1; idx < samePointIdx; ++idx) {\r\n            sample = this._samples.at(idx);\r\n            sample.subtractToRef(origin, vec);\r\n            dot = Vector2.Dot(axis, vec);\r\n            sumSquaredProjectionDistances += vec.lengthSquared() - dot * dot;\r\n        }\r\n\r\n        if (sumSquaredProjectionDistances > samePointIdx * this._squaredProjectionDistanceThreshold) {\r\n            return;\r\n        }\r\n\r\n        const forwardVec = TmpVectors.Vector3[0];\r\n        forwardVec.set(forwardX, forwardY, 0);\r\n        const axisVec = TmpVectors.Vector3[1];\r\n        axisVec.set(axis.x, axis.y, 0);\r\n        const isApexLeft = Vector3.Cross(forwardVec, axisVec).z > 0;\r\n        const leftApex = origin.clone();\r\n        const rightApex = origin.clone();\r\n        apex.subtractToRef(origin, axis);\r\n        if (isApexLeft) {\r\n            axis.scaleAndAddToRef(this._axisToApexShrinkFactor, leftApex);\r\n            axis.scaleAndAddToRef(this._axisToApexExtendFactor, rightApex);\r\n        } else {\r\n            axis.scaleAndAddToRef(this._axisToApexExtendFactor, leftApex);\r\n            axis.scaleAndAddToRef(this._axisToApexShrinkFactor, rightApex);\r\n        }\r\n        this.onFirstStepDetected.notifyObservers({\r\n            leftApex: leftApex,\r\n            rightApex: rightApex,\r\n            currentPosition: origin,\r\n            currentStepDirection: isApexLeft ? \"right\" : \"left\",\r\n        });\r\n    }\r\n\r\n    public reset() {\r\n        for (let idx = 0; idx < this._samples.length; ++idx) {\r\n            this._samples.at(idx).copyFromFloats(0, 0);\r\n        }\r\n    }\r\n\r\n    private get _samePointCheckStartIdx() {\r\n        return Math.floor(this._samples.length / 3);\r\n    }\r\n\r\n    private get _samePointSquaredDistanceThreshold() {\r\n        return 0.03 * 0.03;\r\n    }\r\n\r\n    private get _apexSquaredDistanceThreshold() {\r\n        return 0.09 * 0.09;\r\n    }\r\n\r\n    private get _squaredProjectionDistanceThreshold() {\r\n        return 0.03 * 0.03;\r\n    }\r\n\r\n    private get _axisToApexShrinkFactor() {\r\n        return 0.8;\r\n    }\r\n\r\n    private get _axisToApexExtendFactor() {\r\n        return -1.6;\r\n    }\r\n\r\n    private get _entropyDecayFactor() {\r\n        return 0.93;\r\n    }\r\n\r\n    private get _entropyThreshold() {\r\n        return 0.4;\r\n    }\r\n}\r\n\r\nclass WalkingTracker {\r\n    private _leftApex = new Vector2();\r\n    private _rightApex = new Vector2();\r\n    private _currentPosition = new Vector2();\r\n    private _axis = new Vector2();\r\n    private _axisLength = -1;\r\n    private _forward = new Vector2();\r\n    private _steppingLeft = false;\r\n    private _t = -1;\r\n    private _maxT = -1;\r\n    private _maxTPosition = new Vector2();\r\n    private _vitality = 0;\r\n\r\n    public onMovement = new Observable<{ deltaT: number }>();\r\n    public onFootfall = new Observable<{ foot: \"left\" | \"right\" }>();\r\n\r\n    constructor(leftApex: Vector2, rightApex: Vector2, currentPosition: Vector2, currentStepDirection: \"left\" | \"right\") {\r\n        this._reset(leftApex, rightApex, currentPosition, currentStepDirection === \"left\");\r\n    }\r\n\r\n    private _reset(leftApex: Vector2, rightApex: Vector2, currentPosition: Vector2, steppingLeft: boolean) {\r\n        this._leftApex.copyFrom(leftApex);\r\n        this._rightApex.copyFrom(rightApex);\r\n        this._steppingLeft = steppingLeft;\r\n\r\n        if (this._steppingLeft) {\r\n            this._leftApex.subtractToRef(this._rightApex, this._axis);\r\n            this._forward.copyFromFloats(-this._axis.y, this._axis.x);\r\n        } else {\r\n            this._rightApex.subtractToRef(this._leftApex, this._axis);\r\n            this._forward.copyFromFloats(this._axis.y, -this._axis.x);\r\n        }\r\n        this._axisLength = this._axis.length();\r\n        this._forward.scaleInPlace(1 / this._axisLength);\r\n\r\n        this._updateTAndVitality(currentPosition.x, currentPosition.y);\r\n        this._maxT = this._t;\r\n        this._maxTPosition.copyFrom(currentPosition);\r\n\r\n        this._vitality = 1;\r\n    }\r\n\r\n    private _updateTAndVitality(x: number, y: number) {\r\n        this._currentPosition.copyFromFloats(x, y);\r\n\r\n        if (this._steppingLeft) {\r\n            this._currentPosition.subtractInPlace(this._rightApex);\r\n        } else {\r\n            this._currentPosition.subtractInPlace(this._leftApex);\r\n        }\r\n        const priorT = this._t;\r\n        const dot = Vector2.Dot(this._currentPosition, this._axis);\r\n        this._t = dot / (this._axisLength * this._axisLength);\r\n        const projDistSquared = this._currentPosition.lengthSquared() - (dot / this._axisLength) * (dot / this._axisLength);\r\n\r\n        // TODO: Extricate the magic.\r\n        this._vitality *= 0.92 - 100 * Math.max(projDistSquared - 0.0016, 0) + Math.max(this._t - priorT, 0);\r\n    }\r\n\r\n    public update(x: number, y: number) {\r\n        if (this._vitality < this._vitalityThreshold) {\r\n            return false;\r\n        }\r\n\r\n        const priorT = this._t;\r\n        this._updateTAndVitality(x, y);\r\n\r\n        if (this._t > this._maxT) {\r\n            this._maxT = this._t;\r\n            this._maxTPosition.copyFromFloats(x, y);\r\n        }\r\n\r\n        if (this._vitality < this._vitalityThreshold) {\r\n            return false;\r\n        }\r\n\r\n        if (this._t > priorT) {\r\n            this.onMovement.notifyObservers({ deltaT: this._t - priorT });\r\n\r\n            if (priorT < 0.5 && this._t >= 0.5) {\r\n                this.onFootfall.notifyObservers({ foot: this._steppingLeft ? \"left\" : \"right\" });\r\n            }\r\n        }\r\n\r\n        if (this._t < 0.95 * this._maxT) {\r\n            this._currentPosition.copyFromFloats(x, y);\r\n            if (this._steppingLeft) {\r\n                this._leftApex.copyFrom(this._maxTPosition);\r\n            } else {\r\n                this._rightApex.copyFrom(this._maxTPosition);\r\n            }\r\n            this._reset(this._leftApex, this._rightApex, this._currentPosition, !this._steppingLeft);\r\n        }\r\n\r\n        if (this._axisLength < 0.03) {\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    private get _vitalityThreshold() {\r\n        return 0.1;\r\n    }\r\n\r\n    get forward() {\r\n        return this._forward;\r\n    }\r\n}\r\n\r\nclass Walker {\r\n    private _engine: Engine;\r\n    private _detector = new FirstStepDetector();\r\n    private _walker: Nullable<WalkingTracker> = null;\r\n    private _movement = new Vector2();\r\n    private _millisecondsSinceLastUpdate: number = Walker._MillisecondsPerUpdate;\r\n\r\n    private static get _MillisecondsPerUpdate(): number {\r\n        // 15 FPS\r\n        return 1000 / 15;\r\n    }\r\n\r\n    public movementThisFrame: Vector3 = Vector3.Zero();\r\n\r\n    constructor(engine: Engine) {\r\n        this._engine = engine;\r\n        this._detector.onFirstStepDetected.add((event) => {\r\n            if (!this._walker) {\r\n                this._walker = new WalkingTracker(event.leftApex, event.rightApex, event.currentPosition, event.currentStepDirection);\r\n                this._walker.onFootfall.add(() => {\r\n                    console.log(\"Footfall!\");\r\n                });\r\n                this._walker.onMovement.add((event) => {\r\n                    this._walker!.forward.scaleAndAddToRef(0.024 * event.deltaT, this._movement);\r\n                });\r\n            }\r\n        });\r\n    }\r\n\r\n    public update(position: Vector3, forward: Vector3) {\r\n        forward.y = 0;\r\n        forward.normalize();\r\n\r\n        // Enforce reduced framerate\r\n        this._millisecondsSinceLastUpdate += this._engine.getDeltaTime();\r\n        if (this._millisecondsSinceLastUpdate >= Walker._MillisecondsPerUpdate) {\r\n            this._millisecondsSinceLastUpdate -= Walker._MillisecondsPerUpdate;\r\n            this._detector.update(position.x, position.z, forward.x, forward.z);\r\n            if (this._walker) {\r\n                const updated = this._walker.update(position.x, position.z);\r\n                if (!updated) {\r\n                    this._walker = null;\r\n                }\r\n            }\r\n            this._movement.scaleInPlace(0.85);\r\n        }\r\n\r\n        this.movementThisFrame.set(this._movement.x, 0, this._movement.y);\r\n    }\r\n}\r\n\r\n/**\r\n * Options for the walking locomotion feature.\r\n */\r\nexport interface IWebXRWalkingLocomotionOptions {\r\n    /**\r\n     * The target to be moved by walking locomotion. This should be the transform node\r\n     * which is the root of the XR space (i.e., the WebXRCamera's parent node). However,\r\n     * for simple cases and legacy purposes, articulating the WebXRCamera itself is also\r\n     * supported as a deprecated feature.\r\n     */\r\n    locomotionTarget: WebXRCamera | TransformNode;\r\n}\r\n\r\n/**\r\n * A module that will enable VR locomotion by detecting when the user walks in place.\r\n */\r\nexport class WebXRWalkingLocomotion extends WebXRAbstractFeature {\r\n    /**\r\n     * The module's name.\r\n     */\r\n    public static get Name(): string {\r\n        return WebXRFeatureName.WALKING_LOCOMOTION;\r\n    }\r\n\r\n    /**\r\n     * The (Babylon) version of this module.\r\n     * This is an integer representing the implementation version.\r\n     * This number has no external basis.\r\n     */\r\n    public static get Version(): number {\r\n        return 1;\r\n    }\r\n\r\n    private _sessionManager: WebXRSessionManager;\r\n    private _up: Vector3 = new Vector3();\r\n    private _forward: Vector3 = new Vector3();\r\n    private _position: Vector3 = new Vector3();\r\n    private _movement: Vector3 = new Vector3();\r\n    private _walker: Nullable<Walker>;\r\n\r\n    private _locomotionTarget: WebXRCamera | TransformNode;\r\n    private _isLocomotionTargetWebXRCamera: boolean;\r\n\r\n    /**\r\n     * The target to be articulated by walking locomotion.\r\n     * When the walking locomotion feature detects walking in place, this element's\r\n     * X and Z coordinates will be modified to reflect locomotion. This target should\r\n     * be either the XR space's origin (i.e., the parent node of the WebXRCamera) or\r\n     * the WebXRCamera itself. Note that the WebXRCamera path will modify the position\r\n     * of the WebXRCamera directly and is thus discouraged.\r\n     */\r\n    public get locomotionTarget(): WebXRCamera | TransformNode {\r\n        return this._locomotionTarget;\r\n    }\r\n\r\n    /**\r\n     * The target to be articulated by walking locomotion.\r\n     * When the walking locomotion feature detects walking in place, this element's\r\n     * X and Z coordinates will be modified to reflect locomotion. This target should\r\n     * be either the XR space's origin (i.e., the parent node of the WebXRCamera) or\r\n     * the WebXRCamera itself. Note that the WebXRCamera path will modify the position\r\n     * of the WebXRCamera directly and is thus discouraged.\r\n     */\r\n    public set locomotionTarget(locomotionTarget: WebXRCamera | TransformNode) {\r\n        this._locomotionTarget = locomotionTarget;\r\n        this._isLocomotionTargetWebXRCamera = this._locomotionTarget.getClassName() === \"WebXRCamera\";\r\n    }\r\n\r\n    /**\r\n     * Construct a new Walking Locomotion feature.\r\n     * @param sessionManager manager for the current XR session\r\n     * @param options creation options, prominently including the vector target for locomotion\r\n     */\r\n    public constructor(sessionManager: WebXRSessionManager, options: IWebXRWalkingLocomotionOptions) {\r\n        super(sessionManager);\r\n        this._sessionManager = sessionManager;\r\n        this.locomotionTarget = options.locomotionTarget;\r\n        if (this._isLocomotionTargetWebXRCamera) {\r\n            Logger.Warn(\r\n                \"Using walking locomotion directly on a WebXRCamera may have unintended interactions with other XR techniques. Using an XR space parent is highly recommended\"\r\n            );\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Checks whether this feature is compatible with the current WebXR session.\r\n     * Walking locomotion is only compatible with \"immersive-vr\" sessions.\r\n     * @returns true if compatible, false otherwise\r\n     */\r\n    public isCompatible(): boolean {\r\n        return this._sessionManager.sessionMode === undefined || this._sessionManager.sessionMode === \"immersive-vr\";\r\n    }\r\n\r\n    /**\r\n     * Attaches the feature.\r\n     * Typically called automatically by the features manager.\r\n     * @returns true if attach succeeded, false otherwise\r\n     */\r\n    public attach(): boolean {\r\n        if (!this.isCompatible || !super.attach()) {\r\n            return false;\r\n        }\r\n\r\n        this._walker = new Walker(this._sessionManager.scene.getEngine());\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Detaches the feature.\r\n     * Typically called automatically by the features manager.\r\n     * @returns true if detach succeeded, false otherwise\r\n     */\r\n    public detach(): boolean {\r\n        if (!super.detach()) {\r\n            return false;\r\n        }\r\n\r\n        this._walker = null;\r\n        return true;\r\n    }\r\n\r\n    protected _onXRFrame(frame: XRFrame): void {\r\n        const pose = frame.getViewerPose(this._sessionManager.baseReferenceSpace);\r\n        if (!pose) {\r\n            return;\r\n        }\r\n\r\n        const handednessScalar = this.locomotionTarget.getScene().useRightHandedSystem ? 1 : -1;\r\n\r\n        const m = pose.transform.matrix;\r\n        this._up.copyFromFloats(m[4], m[5], handednessScalar * m[6]);\r\n        this._forward.copyFromFloats(m[8], m[9], handednessScalar * m[10]);\r\n        this._position.copyFromFloats(m[12], m[13], handednessScalar * m[14]);\r\n\r\n        // Compute the nape position\r\n        this._forward.scaleAndAddToRef(0.05, this._position);\r\n        this._up.scaleAndAddToRef(-0.05, this._position);\r\n        this._walker!.update(this._position, this._forward);\r\n        this._movement.copyFrom(this._walker!.movementThisFrame);\r\n        if (!this._isLocomotionTargetWebXRCamera) {\r\n            Vector3.TransformNormalToRef(this._movement, this.locomotionTarget.getWorldMatrix(), this._movement);\r\n        }\r\n        this.locomotionTarget.position.addInPlace(this._movement);\r\n    }\r\n}\r\n\r\n//register the plugin\r\nWebXRFeaturesManager.AddWebXRFeature(\r\n    WebXRWalkingLocomotion.Name,\r\n    (xrSessionManager, options) => {\r\n        return () => new WebXRWalkingLocomotion(xrSessionManager, options);\r\n    },\r\n    WebXRWalkingLocomotion.Version,\r\n    false\r\n);\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}