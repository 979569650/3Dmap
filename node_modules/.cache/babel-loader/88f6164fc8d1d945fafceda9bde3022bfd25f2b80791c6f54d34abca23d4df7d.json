{"ast":null,"code":"import { Observable } from \"@babylonjs/core/Misc/observable.js\";\n/**\n * Class used to specific a value and its associated unit\n */\nexport class ValueAndUnit {\n  /**\n   * Creates a new ValueAndUnit\n   * @param value defines the value to store\n   * @param unit defines the unit to store - defaults to ValueAndUnit.UNITMODE_PIXEL\n   * @param negativeValueAllowed defines a boolean indicating if the value can be negative\n   */\n  constructor(value, /** defines the unit to store */\n  unit = ValueAndUnit.UNITMODE_PIXEL, /** defines a boolean indicating if the value can be negative */\n  negativeValueAllowed = true) {\n    this.negativeValueAllowed = negativeValueAllowed;\n    this._value = 1;\n    this._unit = ValueAndUnit.UNITMODE_PIXEL;\n    /**\n     * Gets or sets a value indicating that this value will not scale accordingly with adaptive scaling property\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#adaptive-scaling\n     */\n    this.ignoreAdaptiveScaling = false;\n    /**\n     * Observable event triggered each time the value or unit changes\n     */\n    this.onChangedObservable = new Observable();\n    this._value = value;\n    this._unit = unit;\n    this._originalUnit = unit;\n  }\n  /** Gets a boolean indicating if the value is a percentage */\n  get isPercentage() {\n    return this._unit === ValueAndUnit.UNITMODE_PERCENTAGE;\n  }\n  /** Gets a boolean indicating if the value is store as pixel */\n  get isPixel() {\n    return this._unit === ValueAndUnit.UNITMODE_PIXEL;\n  }\n  /**\n   * Gets value (without units)\n   * @deprecated use value property instead\n   */\n  get internalValue() {\n    return this._value;\n  }\n  /** Gets value (without units) */\n  get value() {\n    return this._value;\n  }\n  /** Sets value (without units) */\n  set value(value) {\n    if (value !== this._value) {\n      this._value = value;\n      this.onChangedObservable.notifyObservers();\n    }\n  }\n  /** Gets units (without value) */\n  get unit() {\n    return this._unit;\n  }\n  /** Sets units (without value) */\n  set unit(value) {\n    if (value !== this._unit) {\n      this._unit = value;\n      this.onChangedObservable.notifyObservers();\n    }\n  }\n  /**\n   * Gets value as pixel\n   * @param host defines the root host\n   * @param refValue defines the reference value for percentages\n   * @returns the value as pixel\n   */\n  getValueInPixel(host, refValue) {\n    if (this.isPixel) {\n      return this.getValue(host);\n    }\n    return this.getValue(host) * refValue;\n  }\n  /**\n   * Update the current value and unit.\n   * @param value defines the value to store\n   * @param unit defines the unit to store\n   * @returns the current ValueAndUnit\n   */\n  updateInPlace(value, unit = ValueAndUnit.UNITMODE_PIXEL) {\n    if (this.value !== value || this.unit !== unit) {\n      // set member variables to notify only once\n      this._value = value;\n      this._unit = unit;\n      this.onChangedObservable.notifyObservers();\n    }\n    return this;\n  }\n  /**\n   * Gets the value accordingly to its unit\n   * @param host  defines the root host\n   * @returns the value\n   */\n  getValue(host) {\n    if (host && !this.ignoreAdaptiveScaling && this.unit !== ValueAndUnit.UNITMODE_PERCENTAGE) {\n      let width = 0;\n      let height = 0;\n      if (host.idealWidth) {\n        width = Math.ceil(this._value * host.getSize().width / host.idealWidth);\n      }\n      if (host.idealHeight) {\n        height = Math.ceil(this._value * host.getSize().height / host.idealHeight);\n      }\n      if (host.useSmallestIdeal && host.idealWidth && host.idealHeight) {\n        return window.innerWidth < window.innerHeight ? width : height;\n      }\n      if (host.idealWidth) {\n        // horizontal\n        return width;\n      }\n      if (host.idealHeight) {\n        // vertical\n        return height;\n      }\n    }\n    return this._value;\n  }\n  /**\n   * Gets a string representation of the value\n   * @param host defines the root host\n   * @param decimals defines an optional number of decimals to display\n   * @returns a string\n   */\n  toString(host, decimals) {\n    switch (this._unit) {\n      case ValueAndUnit.UNITMODE_PERCENTAGE:\n        {\n          const percentage = this.getValue(host) * 100;\n          return (decimals ? percentage.toFixed(decimals) : percentage) + \"%\";\n        }\n      case ValueAndUnit.UNITMODE_PIXEL:\n        {\n          const pixels = this.getValue(host);\n          return (decimals ? pixels.toFixed(decimals) : pixels) + \"px\";\n        }\n    }\n    return this._unit.toString();\n  }\n  /**\n   * Store a value parsed from a string\n   * @param source defines the source string\n   * @returns true if the value was successfully parsed and updated\n   */\n  fromString(source) {\n    const match = ValueAndUnit._Regex.exec(source.toString());\n    if (!match || match.length === 0) {\n      return false;\n    }\n    let sourceValue = parseFloat(match[1]);\n    let sourceUnit = this._originalUnit;\n    if (!this.negativeValueAllowed) {\n      if (sourceValue < 0) {\n        sourceValue = 0;\n      }\n    }\n    if (match.length === 4) {\n      switch (match[3]) {\n        case \"px\":\n          sourceUnit = ValueAndUnit.UNITMODE_PIXEL;\n          break;\n        case \"%\":\n          sourceUnit = ValueAndUnit.UNITMODE_PERCENTAGE;\n          sourceValue /= 100.0;\n          break;\n      }\n    }\n    if (sourceValue === this._value && sourceUnit === this._unit) {\n      return false;\n    }\n    this._value = sourceValue;\n    this._unit = sourceUnit;\n    this.onChangedObservable.notifyObservers();\n    return true;\n  }\n  /** UNITMODE_PERCENTAGE */\n  static get UNITMODE_PERCENTAGE() {\n    return ValueAndUnit._UNITMODE_PERCENTAGE;\n  }\n  /** UNITMODE_PIXEL */\n  static get UNITMODE_PIXEL() {\n    return ValueAndUnit._UNITMODE_PIXEL;\n  }\n}\n// Static\nValueAndUnit._Regex = /(^-?\\d*(\\.\\d+)?)(%|px)?/;\nValueAndUnit._UNITMODE_PERCENTAGE = 0;\nValueAndUnit._UNITMODE_PIXEL = 1;","map":{"version":3,"names":["Observable","ValueAndUnit","constructor","value","unit","UNITMODE_PIXEL","negativeValueAllowed","_value","_unit","ignoreAdaptiveScaling","onChangedObservable","_originalUnit","isPercentage","UNITMODE_PERCENTAGE","isPixel","internalValue","notifyObservers","getValueInPixel","host","refValue","getValue","updateInPlace","width","height","idealWidth","Math","ceil","getSize","idealHeight","useSmallestIdeal","window","innerWidth","innerHeight","toString","decimals","percentage","toFixed","pixels","fromString","source","match","_Regex","exec","length","sourceValue","parseFloat","sourceUnit","_UNITMODE_PERCENTAGE","_UNITMODE_PIXEL"],"sources":["../../../../dev/gui/src/2D/valueAndUnit.ts"],"sourcesContent":["import { Observable } from \"core/Misc/observable\";\r\nimport type { AdvancedDynamicTexture } from \"./advancedDynamicTexture\";\r\n\r\n/**\r\n * Class used to specific a value and its associated unit\r\n */\r\nexport class ValueAndUnit {\r\n    private _value = 1;\r\n    private _unit = ValueAndUnit.UNITMODE_PIXEL;\r\n    private _originalUnit: number;\r\n\r\n    /**\r\n     * Gets or sets a value indicating that this value will not scale accordingly with adaptive scaling property\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#adaptive-scaling\r\n     */\r\n    public ignoreAdaptiveScaling = false;\r\n\r\n    /**\r\n     * Observable event triggered each time the value or unit changes\r\n     */\r\n    public onChangedObservable = new Observable<void>();\r\n\r\n    /**\r\n     * Creates a new ValueAndUnit\r\n     * @param value defines the value to store\r\n     * @param unit defines the unit to store - defaults to ValueAndUnit.UNITMODE_PIXEL\r\n     * @param negativeValueAllowed defines a boolean indicating if the value can be negative\r\n     */\r\n    public constructor(\r\n        value: number,\r\n        /** defines the unit to store */\r\n        unit = ValueAndUnit.UNITMODE_PIXEL,\r\n        /** defines a boolean indicating if the value can be negative */\r\n        public negativeValueAllowed = true\r\n    ) {\r\n        this._value = value;\r\n        this._unit = unit;\r\n        this._originalUnit = unit;\r\n    }\r\n\r\n    /** Gets a boolean indicating if the value is a percentage */\r\n    public get isPercentage(): boolean {\r\n        return this._unit === ValueAndUnit.UNITMODE_PERCENTAGE;\r\n    }\r\n\r\n    /** Gets a boolean indicating if the value is store as pixel */\r\n    public get isPixel(): boolean {\r\n        return this._unit === ValueAndUnit.UNITMODE_PIXEL;\r\n    }\r\n\r\n    /**\r\n     * Gets value (without units)\r\n     * @deprecated use value property instead\r\n     */\r\n    public get internalValue(): number {\r\n        return this._value;\r\n    }\r\n\r\n    /** Gets value (without units) */\r\n    public get value(): number {\r\n        return this._value;\r\n    }\r\n\r\n    /** Sets value (without units) */\r\n    public set value(value: number) {\r\n        if (value !== this._value) {\r\n            this._value = value;\r\n            this.onChangedObservable.notifyObservers();\r\n        }\r\n    }\r\n\r\n    /** Gets units (without value) */\r\n    public get unit(): number {\r\n        return this._unit;\r\n    }\r\n\r\n    /** Sets units (without value) */\r\n    public set unit(value: number) {\r\n        if (value !== this._unit) {\r\n            this._unit = value;\r\n            this.onChangedObservable.notifyObservers();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets value as pixel\r\n     * @param host defines the root host\r\n     * @param refValue defines the reference value for percentages\r\n     * @returns the value as pixel\r\n     */\r\n    public getValueInPixel(host: AdvancedDynamicTexture, refValue: number): number {\r\n        if (this.isPixel) {\r\n            return this.getValue(host);\r\n        }\r\n\r\n        return this.getValue(host) * refValue;\r\n    }\r\n\r\n    /**\r\n     * Update the current value and unit.\r\n     * @param value defines the value to store\r\n     * @param unit defines the unit to store\r\n     * @returns the current ValueAndUnit\r\n     */\r\n    public updateInPlace(value: number, unit = ValueAndUnit.UNITMODE_PIXEL): ValueAndUnit {\r\n        if (this.value !== value || this.unit !== unit) {\r\n            // set member variables to notify only once\r\n            this._value = value;\r\n            this._unit = unit;\r\n            this.onChangedObservable.notifyObservers();\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Gets the value accordingly to its unit\r\n     * @param host  defines the root host\r\n     * @returns the value\r\n     */\r\n    public getValue(host: AdvancedDynamicTexture): number {\r\n        if (host && !this.ignoreAdaptiveScaling && this.unit !== ValueAndUnit.UNITMODE_PERCENTAGE) {\r\n            let width: number = 0;\r\n            let height: number = 0;\r\n\r\n            if (host.idealWidth) {\r\n                width = Math.ceil((this._value * host.getSize().width) / host.idealWidth);\r\n            }\r\n\r\n            if (host.idealHeight) {\r\n                height = Math.ceil((this._value * host.getSize().height) / host.idealHeight);\r\n            }\r\n\r\n            if (host.useSmallestIdeal && host.idealWidth && host.idealHeight) {\r\n                return window.innerWidth < window.innerHeight ? width : height;\r\n            }\r\n\r\n            if (host.idealWidth) {\r\n                // horizontal\r\n                return width;\r\n            }\r\n\r\n            if (host.idealHeight) {\r\n                // vertical\r\n                return height;\r\n            }\r\n        }\r\n        return this._value;\r\n    }\r\n\r\n    /**\r\n     * Gets a string representation of the value\r\n     * @param host defines the root host\r\n     * @param decimals defines an optional number of decimals to display\r\n     * @returns a string\r\n     */\r\n    public toString(host: AdvancedDynamicTexture, decimals?: number): string {\r\n        switch (this._unit) {\r\n            case ValueAndUnit.UNITMODE_PERCENTAGE: {\r\n                const percentage = this.getValue(host) * 100;\r\n                return (decimals ? percentage.toFixed(decimals) : percentage) + \"%\";\r\n            }\r\n            case ValueAndUnit.UNITMODE_PIXEL: {\r\n                const pixels = this.getValue(host);\r\n                return (decimals ? pixels.toFixed(decimals) : pixels) + \"px\";\r\n            }\r\n        }\r\n\r\n        return this._unit.toString();\r\n    }\r\n\r\n    /**\r\n     * Store a value parsed from a string\r\n     * @param source defines the source string\r\n     * @returns true if the value was successfully parsed and updated\r\n     */\r\n    public fromString(source: string | number): boolean {\r\n        const match = ValueAndUnit._Regex.exec(source.toString());\r\n\r\n        if (!match || match.length === 0) {\r\n            return false;\r\n        }\r\n\r\n        let sourceValue = parseFloat(match[1]);\r\n        let sourceUnit = this._originalUnit;\r\n\r\n        if (!this.negativeValueAllowed) {\r\n            if (sourceValue < 0) {\r\n                sourceValue = 0;\r\n            }\r\n        }\r\n\r\n        if (match.length === 4) {\r\n            switch (match[3]) {\r\n                case \"px\":\r\n                    sourceUnit = ValueAndUnit.UNITMODE_PIXEL;\r\n                    break;\r\n                case \"%\":\r\n                    sourceUnit = ValueAndUnit.UNITMODE_PERCENTAGE;\r\n                    sourceValue /= 100.0;\r\n                    break;\r\n            }\r\n        }\r\n\r\n        if (sourceValue === this._value && sourceUnit === this._unit) {\r\n            return false;\r\n        }\r\n\r\n        this._value = sourceValue;\r\n        this._unit = sourceUnit;\r\n        this.onChangedObservable.notifyObservers();\r\n\r\n        return true;\r\n    }\r\n\r\n    // Static\r\n    private static _Regex = /(^-?\\d*(\\.\\d+)?)(%|px)?/;\r\n    private static _UNITMODE_PERCENTAGE = 0;\r\n    private static _UNITMODE_PIXEL = 1;\r\n\r\n    /** UNITMODE_PERCENTAGE */\r\n    public static get UNITMODE_PERCENTAGE(): number {\r\n        return ValueAndUnit._UNITMODE_PERCENTAGE;\r\n    }\r\n\r\n    /** UNITMODE_PIXEL */\r\n    public static get UNITMODE_PIXEL(): number {\r\n        return ValueAndUnit._UNITMODE_PIXEL;\r\n    }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}