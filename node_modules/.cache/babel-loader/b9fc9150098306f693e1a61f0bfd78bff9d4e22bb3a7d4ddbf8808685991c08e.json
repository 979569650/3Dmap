{"ast":null,"code":"import { __decorate } from \"@babylonjs/core/tslib.es6.js\";\nimport { Tools } from \"@babylonjs/core/Misc/tools.js\";\nimport { Container } from \"./container.js\";\nimport { Control } from \"./control.js\";\nimport { RegisterClass } from \"@babylonjs/core/Misc/typeStore.js\";\nimport { serialize } from \"@babylonjs/core/Misc/decorators.js\";\nimport { TextWrapping } from \"./textBlock.js\";\n/**\n * Class used to create a 2D stack panel container\n */\nexport class StackPanel extends Container {\n  /** Gets or sets a boolean indicating if the stack panel is vertical or horizontal*/\n  get isVertical() {\n    return this._isVertical;\n  }\n  set isVertical(value) {\n    if (this._isVertical === value) {\n      return;\n    }\n    this._isVertical = value;\n    this._markAsDirty();\n  }\n  /**\n   * Gets or sets the spacing (in pixels) between each child.\n   */\n  get spacing() {\n    return this._spacing;\n  }\n  set spacing(value) {\n    if (this._spacing === value) {\n      return;\n    }\n    this._spacing = value;\n    this._markAsDirty();\n  }\n  /**\n   * Gets or sets panel width.\n   * This value should not be set when in horizontal mode as it will be computed automatically\n   */\n  set width(value) {\n    if (!this._doNotTrackManualChanges) {\n      this._manualWidth = true;\n    }\n    if (this._width.toString(this._host) === value) {\n      return;\n    }\n    if (this._width.fromString(value)) {\n      this._markAsDirty();\n    }\n  }\n  get width() {\n    return this._width.toString(this._host);\n  }\n  /**\n   * Gets or sets panel height.\n   * This value should not be set when in vertical mode as it will be computed automatically\n   */\n  set height(value) {\n    if (!this._doNotTrackManualChanges) {\n      this._manualHeight = true;\n    }\n    if (this._height.toString(this._host) === value) {\n      return;\n    }\n    if (this._height.fromString(value)) {\n      this._markAsDirty();\n    }\n  }\n  get height() {\n    return this._height.toString(this._host);\n  }\n  /**\n   * Creates a new StackPanel\n   * @param name defines control name\n   */\n  constructor(name) {\n    super(name);\n    this.name = name;\n    this._isVertical = true;\n    this._manualWidth = false;\n    this._manualHeight = false;\n    this._doNotTrackManualChanges = false;\n    this._spacing = 0;\n    /**\n     * Gets or sets a boolean indicating that layout warnings should be ignored\n     */\n    this.ignoreLayoutWarnings = false;\n  }\n  _getTypeName() {\n    return \"StackPanel\";\n  }\n  /**\n   * @internal\n   */\n  _preMeasure(parentMeasure, context) {\n    for (const child of this._children) {\n      if (this._isVertical) {\n        child.verticalAlignment = Control.VERTICAL_ALIGNMENT_TOP;\n      } else {\n        child.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\n      }\n    }\n    super._preMeasure(parentMeasure, context);\n  }\n  _additionalProcessing(parentMeasure, context) {\n    super._additionalProcessing(parentMeasure, context);\n    this._measureForChildren.copyFrom(parentMeasure);\n    this._measureForChildren.left = this._currentMeasure.left;\n    this._measureForChildren.top = this._currentMeasure.top;\n    if (!this.isVertical || this._manualWidth) {\n      this._measureForChildren.width = this._currentMeasure.width;\n    }\n    if (this.isVertical || this._manualHeight) {\n      this._measureForChildren.height = this._currentMeasure.height;\n    }\n  }\n  _postMeasure() {\n    let stackWidth = 0;\n    let stackHeight = 0;\n    const childrenCount = this._children.length;\n    for (let index = 0; index < childrenCount; index++) {\n      const child = this._children[index];\n      if (!child.isVisible || child.notRenderable) {\n        continue;\n      }\n      if (this._isVertical) {\n        if (child.top !== stackHeight + \"px\") {\n          child.top = stackHeight + \"px\";\n          this._rebuildLayout = true;\n          child._top.ignoreAdaptiveScaling = true;\n        }\n        if (child._height.isPercentage && !child._automaticSize && !child.resizeToFit) {\n          if (!this.ignoreLayoutWarnings) {\n            Tools.Warn(`Control (Name:${child.name}, UniqueId:${child.uniqueId}) is using height in percentage mode inside a vertical StackPanel`);\n          }\n        } else {\n          stackHeight += child._currentMeasure.height + child._paddingTopInPixels + child._paddingBottomInPixels + (index < childrenCount - 1 ? this._spacing : 0);\n        }\n      } else {\n        if (child.left !== stackWidth + \"px\") {\n          child.left = stackWidth + \"px\";\n          this._rebuildLayout = true;\n          child._left.ignoreAdaptiveScaling = true;\n        }\n        if (child._width.isPercentage && !child._automaticSize && child.getClassName() === \"TextBlock\" && child.textWrapping !== TextWrapping.Clip && !child.forceResizeWidth) {\n          if (!this.ignoreLayoutWarnings) {\n            Tools.Warn(`Control (Name:${child.name}, UniqueId:${child.uniqueId}) is using width in percentage mode inside a horizontal StackPanel`);\n          }\n        } else {\n          stackWidth += child._currentMeasure.width + child._paddingLeftInPixels + child._paddingRightInPixels + (index < childrenCount - 1 ? this._spacing : 0);\n        }\n      }\n    }\n    stackWidth += this._paddingLeftInPixels + this._paddingRightInPixels;\n    stackHeight += this._paddingTopInPixels + this._paddingBottomInPixels;\n    this._doNotTrackManualChanges = true;\n    // Let stack panel width or height default to stackHeight and stackWidth if dimensions are not specified.\n    // User can now define their own height and width for stack panel.\n    let panelWidthChanged = false;\n    let panelHeightChanged = false;\n    if ((!this._manualHeight || this.adaptHeightToChildren) && this._isVertical) {\n      // do not specify height if strictly defined by user\n      const previousHeight = this.height;\n      this.height = stackHeight + \"px\";\n      panelHeightChanged = previousHeight !== this.height || !this._height.ignoreAdaptiveScaling;\n    }\n    if ((!this._manualWidth || this.adaptWidthToChildren) && !this._isVertical) {\n      // do not specify width if strictly defined by user\n      const previousWidth = this.width;\n      this.width = stackWidth + \"px\";\n      panelWidthChanged = previousWidth !== this.width || !this._width.ignoreAdaptiveScaling;\n    }\n    if (panelHeightChanged) {\n      this._height.ignoreAdaptiveScaling = true;\n    }\n    if (panelWidthChanged) {\n      this._width.ignoreAdaptiveScaling = true;\n    }\n    this._doNotTrackManualChanges = false;\n    if (panelWidthChanged || panelHeightChanged) {\n      this._rebuildLayout = true;\n    }\n    super._postMeasure();\n  }\n  /**\n   * Serializes the current control\n   * @param serializationObject defined the JSON serialized object\n   */\n  serialize(serializationObject) {\n    super.serialize(serializationObject);\n    serializationObject.manualWidth = this._manualWidth;\n    serializationObject.manualHeight = this._manualHeight;\n  }\n  /**\n   * @internal\n   */\n  _parseFromContent(serializedObject, host) {\n    this._manualWidth = serializedObject.manualWidth;\n    this._manualHeight = serializedObject.manualHeight;\n    super._parseFromContent(serializedObject, host);\n  }\n}\n__decorate([serialize()], StackPanel.prototype, \"ignoreLayoutWarnings\", void 0);\n__decorate([serialize()], StackPanel.prototype, \"isVertical\", null);\n__decorate([serialize()], StackPanel.prototype, \"spacing\", null);\n__decorate([serialize()], StackPanel.prototype, \"width\", null);\n__decorate([serialize()], StackPanel.prototype, \"height\", null);\nRegisterClass(\"BABYLON.GUI.StackPanel\", StackPanel);","map":{"version":3,"names":["Tools","Container","Control","RegisterClass","serialize","TextWrapping","StackPanel","isVertical","_isVertical","value","_markAsDirty","spacing","_spacing","width","_doNotTrackManualChanges","_manualWidth","_width","toString","_host","fromString","height","_manualHeight","_height","constructor","name","ignoreLayoutWarnings","_getTypeName","_preMeasure","parentMeasure","context","child","_children","verticalAlignment","VERTICAL_ALIGNMENT_TOP","horizontalAlignment","HORIZONTAL_ALIGNMENT_LEFT","_additionalProcessing","_measureForChildren","copyFrom","left","_currentMeasure","top","_postMeasure","stackWidth","stackHeight","childrenCount","length","index","isVisible","notRenderable","_rebuildLayout","_top","ignoreAdaptiveScaling","isPercentage","_automaticSize","resizeToFit","Warn","uniqueId","_paddingTopInPixels","_paddingBottomInPixels","_left","getClassName","textWrapping","Clip","forceResizeWidth","_paddingLeftInPixels","_paddingRightInPixels","panelWidthChanged","panelHeightChanged","adaptHeightToChildren","previousHeight","adaptWidthToChildren","previousWidth","serializationObject","manualWidth","manualHeight","_parseFromContent","serializedObject","host","__decorate"],"sources":["../../../../../dev/gui/src/2D/controls/stackPanel.ts"],"sourcesContent":["import { Tools } from \"core/Misc/tools\";\r\n\r\nimport { Container } from \"./container\";\r\nimport type { Measure } from \"../measure\";\r\nimport { Control } from \"./control\";\r\nimport { RegisterClass } from \"core/Misc/typeStore\";\r\nimport { serialize } from \"core/Misc/decorators\";\r\nimport type { AdvancedDynamicTexture } from \"../advancedDynamicTexture\";\r\nimport type { ICanvasRenderingContext } from \"core/Engines/ICanvas\";\r\nimport type { TextBlock } from \"./textBlock\";\r\nimport { TextWrapping } from \"./textBlock\";\r\n\r\n/**\r\n * Class used to create a 2D stack panel container\r\n */\r\nexport class StackPanel extends Container {\r\n    private _isVertical = true;\r\n    private _manualWidth = false;\r\n    private _manualHeight = false;\r\n    private _doNotTrackManualChanges = false;\r\n    private _spacing = 0;\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating that layout warnings should be ignored\r\n     */\r\n    @serialize()\r\n    public ignoreLayoutWarnings = false;\r\n\r\n    /** Gets or sets a boolean indicating if the stack panel is vertical or horizontal*/\r\n    @serialize()\r\n    public get isVertical(): boolean {\r\n        return this._isVertical;\r\n    }\r\n\r\n    public set isVertical(value: boolean) {\r\n        if (this._isVertical === value) {\r\n            return;\r\n        }\r\n\r\n        this._isVertical = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the spacing (in pixels) between each child.\r\n     */\r\n    @serialize()\r\n    public get spacing(): number {\r\n        return this._spacing;\r\n    }\r\n\r\n    public set spacing(value: number) {\r\n        if (this._spacing === value) {\r\n            return;\r\n        }\r\n\r\n        this._spacing = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets panel width.\r\n     * This value should not be set when in horizontal mode as it will be computed automatically\r\n     */\r\n    @serialize()\r\n    public set width(value: string | number) {\r\n        if (!this._doNotTrackManualChanges) {\r\n            this._manualWidth = true;\r\n        }\r\n\r\n        if (this._width.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._width.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    public get width(): string | number {\r\n        return this._width.toString(this._host);\r\n    }\r\n\r\n    /**\r\n     * Gets or sets panel height.\r\n     * This value should not be set when in vertical mode as it will be computed automatically\r\n     */\r\n    @serialize()\r\n    public set height(value: string | number) {\r\n        if (!this._doNotTrackManualChanges) {\r\n            this._manualHeight = true;\r\n        }\r\n\r\n        if (this._height.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._height.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    public get height(): string | number {\r\n        return this._height.toString(this._host);\r\n    }\r\n\r\n    /**\r\n     * Creates a new StackPanel\r\n     * @param name defines control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"StackPanel\";\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    protected _preMeasure(parentMeasure: Measure, context: ICanvasRenderingContext): void {\r\n        for (const child of this._children) {\r\n            if (this._isVertical) {\r\n                child.verticalAlignment = Control.VERTICAL_ALIGNMENT_TOP;\r\n            } else {\r\n                child.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n            }\r\n        }\r\n\r\n        super._preMeasure(parentMeasure, context);\r\n    }\r\n\r\n    protected _additionalProcessing(parentMeasure: Measure, context: ICanvasRenderingContext): void {\r\n        super._additionalProcessing(parentMeasure, context);\r\n\r\n        this._measureForChildren.copyFrom(parentMeasure);\r\n\r\n        this._measureForChildren.left = this._currentMeasure.left;\r\n        this._measureForChildren.top = this._currentMeasure.top;\r\n\r\n        if (!this.isVertical || this._manualWidth) {\r\n            this._measureForChildren.width = this._currentMeasure.width;\r\n        }\r\n\r\n        if (this.isVertical || this._manualHeight) {\r\n            this._measureForChildren.height = this._currentMeasure.height;\r\n        }\r\n    }\r\n\r\n    protected _postMeasure(): void {\r\n        let stackWidth = 0;\r\n        let stackHeight = 0;\r\n        const childrenCount = this._children.length;\r\n        for (let index = 0; index < childrenCount; index++) {\r\n            const child = this._children[index];\r\n            if (!child.isVisible || child.notRenderable) {\r\n                continue;\r\n            }\r\n\r\n            if (this._isVertical) {\r\n                if (child.top !== stackHeight + \"px\") {\r\n                    child.top = stackHeight + \"px\";\r\n                    this._rebuildLayout = true;\r\n                    child._top.ignoreAdaptiveScaling = true;\r\n                }\r\n\r\n                if (child._height.isPercentage && !child._automaticSize && !(child as TextBlock).resizeToFit) {\r\n                    if (!this.ignoreLayoutWarnings) {\r\n                        Tools.Warn(`Control (Name:${child.name}, UniqueId:${child.uniqueId}) is using height in percentage mode inside a vertical StackPanel`);\r\n                    }\r\n                } else {\r\n                    stackHeight += child._currentMeasure.height + child._paddingTopInPixels + child._paddingBottomInPixels + (index < childrenCount - 1 ? this._spacing : 0);\r\n                }\r\n            } else {\r\n                if (child.left !== stackWidth + \"px\") {\r\n                    child.left = stackWidth + \"px\";\r\n                    this._rebuildLayout = true;\r\n                    child._left.ignoreAdaptiveScaling = true;\r\n                }\r\n\r\n                if (\r\n                    child._width.isPercentage &&\r\n                    !child._automaticSize &&\r\n                    child.getClassName() === \"TextBlock\" &&\r\n                    (child as TextBlock).textWrapping !== TextWrapping.Clip &&\r\n                    !(child as TextBlock).forceResizeWidth\r\n                ) {\r\n                    if (!this.ignoreLayoutWarnings) {\r\n                        Tools.Warn(`Control (Name:${child.name}, UniqueId:${child.uniqueId}) is using width in percentage mode inside a horizontal StackPanel`);\r\n                    }\r\n                } else {\r\n                    stackWidth += child._currentMeasure.width + child._paddingLeftInPixels + child._paddingRightInPixels + (index < childrenCount - 1 ? this._spacing : 0);\r\n                }\r\n            }\r\n        }\r\n\r\n        stackWidth += this._paddingLeftInPixels + this._paddingRightInPixels;\r\n        stackHeight += this._paddingTopInPixels + this._paddingBottomInPixels;\r\n\r\n        this._doNotTrackManualChanges = true;\r\n\r\n        // Let stack panel width or height default to stackHeight and stackWidth if dimensions are not specified.\r\n        // User can now define their own height and width for stack panel.\r\n\r\n        let panelWidthChanged = false;\r\n        let panelHeightChanged = false;\r\n\r\n        if ((!this._manualHeight || this.adaptHeightToChildren) && this._isVertical) {\r\n            // do not specify height if strictly defined by user\r\n            const previousHeight = this.height;\r\n            this.height = stackHeight + \"px\";\r\n            panelHeightChanged = previousHeight !== this.height || !this._height.ignoreAdaptiveScaling;\r\n        }\r\n        if ((!this._manualWidth || this.adaptWidthToChildren) && !this._isVertical) {\r\n            // do not specify width if strictly defined by user\r\n            const previousWidth = this.width;\r\n            this.width = stackWidth + \"px\";\r\n            panelWidthChanged = previousWidth !== this.width || !this._width.ignoreAdaptiveScaling;\r\n        }\r\n\r\n        if (panelHeightChanged) {\r\n            this._height.ignoreAdaptiveScaling = true;\r\n        }\r\n\r\n        if (panelWidthChanged) {\r\n            this._width.ignoreAdaptiveScaling = true;\r\n        }\r\n\r\n        this._doNotTrackManualChanges = false;\r\n\r\n        if (panelWidthChanged || panelHeightChanged) {\r\n            this._rebuildLayout = true;\r\n        }\r\n\r\n        super._postMeasure();\r\n    }\r\n\r\n    /**\r\n     * Serializes the current control\r\n     * @param serializationObject defined the JSON serialized object\r\n     */\r\n    public serialize(serializationObject: any) {\r\n        super.serialize(serializationObject);\r\n        serializationObject.manualWidth = this._manualWidth;\r\n        serializationObject.manualHeight = this._manualHeight;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _parseFromContent(serializedObject: any, host: AdvancedDynamicTexture) {\r\n        this._manualWidth = serializedObject.manualWidth;\r\n        this._manualHeight = serializedObject.manualHeight;\r\n\r\n        super._parseFromContent(serializedObject, host);\r\n    }\r\n}\r\nRegisterClass(\"BABYLON.GUI.StackPanel\", StackPanel);\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}