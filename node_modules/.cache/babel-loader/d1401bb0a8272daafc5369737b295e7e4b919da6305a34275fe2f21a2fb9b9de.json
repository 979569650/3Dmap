{"ast":null,"code":"import { TmpVectors, Vector3 } from \"@babylonjs/core/Maths/math.vector.js\";\nimport { Container3D } from \"./container3D.js\";\nimport { VolumeBasedPanel } from \"./volumeBasedPanel.js\";\n/**\n * Class used to create a container panel deployed on the surface of a plane\n */\nexport class PlanePanel extends VolumeBasedPanel {\n  _mapGridNode(control, nodePosition) {\n    const mesh = control.mesh;\n    if (!mesh) {\n      return;\n    }\n    control.position = nodePosition.clone();\n    const target = TmpVectors.Vector3[0];\n    target.copyFrom(nodePosition);\n    switch (this.orientation) {\n      case Container3D.FACEORIGIN_ORIENTATION:\n      case Container3D.FACEFORWARD_ORIENTATION:\n        target.addInPlace(new Vector3(0, 0, 1));\n        mesh.lookAt(target);\n        break;\n      case Container3D.FACEFORWARDREVERSED_ORIENTATION:\n      case Container3D.FACEORIGINREVERSED_ORIENTATION:\n        target.addInPlace(new Vector3(0, 0, -1));\n        mesh.lookAt(target);\n        break;\n    }\n  }\n}","map":{"version":3,"names":["TmpVectors","Vector3","Container3D","VolumeBasedPanel","PlanePanel","_mapGridNode","control","nodePosition","mesh","position","clone","target","copyFrom","orientation","FACEORIGIN_ORIENTATION","FACEFORWARD_ORIENTATION","addInPlace","lookAt","FACEFORWARDREVERSED_ORIENTATION","FACEORIGINREVERSED_ORIENTATION"],"sources":["../../../../../dev/gui/src/3D/controls/planePanel.ts"],"sourcesContent":["import { TmpVectors, Vector3 } from \"core/Maths/math.vector\";\r\n\r\nimport { Container3D } from \"./container3D\";\r\nimport type { Control3D } from \"./control3D\";\r\nimport { VolumeBasedPanel } from \"./volumeBasedPanel\";\r\n\r\n/**\r\n * Class used to create a container panel deployed on the surface of a plane\r\n */\r\nexport class PlanePanel extends VolumeBasedPanel {\r\n    protected _mapGridNode(control: Control3D, nodePosition: Vector3) {\r\n        const mesh = control.mesh;\r\n\r\n        if (!mesh) {\r\n            return;\r\n        }\r\n\r\n        control.position = nodePosition.clone();\r\n        const target = TmpVectors.Vector3[0];\r\n\r\n        target.copyFrom(nodePosition);\r\n\r\n        switch (this.orientation) {\r\n            case Container3D.FACEORIGIN_ORIENTATION:\r\n            case Container3D.FACEFORWARD_ORIENTATION:\r\n                target.addInPlace(new Vector3(0, 0, 1));\r\n                mesh.lookAt(target);\r\n                break;\r\n            case Container3D.FACEFORWARDREVERSED_ORIENTATION:\r\n            case Container3D.FACEORIGINREVERSED_ORIENTATION:\r\n                target.addInPlace(new Vector3(0, 0, -1));\r\n                mesh.lookAt(target);\r\n                break;\r\n        }\r\n    }\r\n}\r\n"],"mappings":"AAAA,SAASA,UAAU,EAAEC,OAAO,QAAE;AAE9B,SAASC,WAAW,QAAQ,kBAAgB;AAE5C,SAASC,gBAAgB,QAAQ,uBAAqB;AAEtD;;;AAGA,OAAM,MAAOC,UAAW,SAAQD,gBAAgB;EAClCE,YAAYA,CAACC,OAAkB,EAAEC,YAAqB;IAC5D,MAAMC,IAAI,GAAGF,OAAO,CAACE,IAAI;IAEzB,IAAI,CAACA,IAAI,EAAE;MACP;;IAGJF,OAAO,CAACG,QAAQ,GAAGF,YAAY,CAACG,KAAK,EAAE;IACvC,MAAMC,MAAM,GAAGX,UAAU,CAACC,OAAO,CAAC,CAAC,CAAC;IAEpCU,MAAM,CAACC,QAAQ,CAACL,YAAY,CAAC;IAE7B,QAAQ,IAAI,CAACM,WAAW;MACpB,KAAKX,WAAW,CAACY,sBAAsB;MACvC,KAAKZ,WAAW,CAACa,uBAAuB;QACpCJ,MAAM,CAACK,UAAU,CAAC,IAAIf,OAAO,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;QACvCO,IAAI,CAACS,MAAM,CAACN,MAAM,CAAC;QACnB;MACJ,KAAKT,WAAW,CAACgB,+BAA+B;MAChD,KAAKhB,WAAW,CAACiB,8BAA8B;QAC3CR,MAAM,CAACK,UAAU,CAAC,IAAIf,OAAO,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;QACxCO,IAAI,CAACS,MAAM,CAACN,MAAM,CAAC;QACnB;;EAEZ"},"metadata":{},"sourceType":"module","externalDependencies":[]}