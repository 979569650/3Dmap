{"ast":null,"code":"import { __decorate } from \"../../../../tslib.es6.js\";\nimport { NodeGeometryBlock } from \"../../nodeGeometryBlock.js\";\nimport { RegisterClass } from \"../../../../Misc/typeStore.js\";\nimport { NodeGeometryBlockConnectionPointTypes } from \"../../Enums/nodeGeometryConnectionPointTypes.js\";\nimport { PropertyTypeForEdition, editableInPropertyPage } from \"../../../../Decorators/nodeDecorator.js\";\n/**\n * Block used to set texture coordinates for a geometry\n */\nexport class SetUVsBlock extends NodeGeometryBlock {\n  /**\n   * Create a new SetUVsBlock\n   * @param name defines the block name\n   */\n  constructor(name) {\n    super(name);\n    /**\n     * Gets or sets a boolean indicating that this block can evaluate context\n     * Build performance is improved when this value is set to false as the system will cache values instead of reevaluating everything per context change\n     */\n    this.evaluateContext = true;\n    /**\n     * Gets or sets a value indicating which UV to set\n     */\n    this.textureCoordinateIndex = 0;\n    this.registerInput(\"geometry\", NodeGeometryBlockConnectionPointTypes.Geometry);\n    this.registerInput(\"uvs\", NodeGeometryBlockConnectionPointTypes.Vector2);\n    this.registerOutput(\"output\", NodeGeometryBlockConnectionPointTypes.Geometry);\n  }\n  /**\n   * Gets the current index in the current flow\n   * @returns the current index\n   */\n  getExecutionIndex() {\n    return this._currentIndex;\n  }\n  /**\n   * Gets the current loop index in the current flow\n   * @returns the current loop index\n   */\n  getExecutionLoopIndex() {\n    return this._currentIndex;\n  }\n  /**\n   * Gets the current face index in the current flow\n   * @returns the current face index\n   */\n  getExecutionFaceIndex() {\n    return 0;\n  }\n  /**\n   * Gets the current class name\n   * @returns the class name\n   */\n  getClassName() {\n    return \"SetUVsBlock\";\n  }\n  /**\n   * Gets the geometry input component\n   */\n  get geometry() {\n    return this._inputs[0];\n  }\n  /**\n   * Gets the uvs input component\n   */\n  get uvs() {\n    return this._inputs[1];\n  }\n  /**\n   * Gets the geometry output component\n   */\n  get output() {\n    return this._outputs[0];\n  }\n  _buildBlock(state) {\n    const func = state => {\n      state.pushExecutionContext(this);\n      this._vertexData = this.geometry.getConnectedValue(state);\n      state.pushGeometryContext(this._vertexData);\n      if (!this._vertexData || !this._vertexData.positions) {\n        state.restoreGeometryContext();\n        state.restoreExecutionContext();\n        this.output._storedValue = null;\n        return;\n      }\n      if (!this.uvs.isConnected) {\n        state.restoreGeometryContext();\n        state.restoreExecutionContext();\n        this.output._storedValue = this._vertexData;\n        return;\n      }\n      const uvs = [];\n      // Processing\n      const vertexCount = this._vertexData.positions.length / 3;\n      for (this._currentIndex = 0; this._currentIndex < vertexCount; this._currentIndex++) {\n        const tempVector2 = this.uvs.getConnectedValue(state);\n        if (tempVector2) {\n          tempVector2.toArray(uvs, this._currentIndex * 2);\n        }\n      }\n      switch (this.textureCoordinateIndex) {\n        case 0:\n          this._vertexData.uvs = uvs;\n          break;\n        case 1:\n          this._vertexData.uvs2 = uvs;\n          break;\n        case 2:\n          this._vertexData.uvs3 = uvs;\n          break;\n        case 3:\n          this._vertexData.uvs4 = uvs;\n          break;\n        case 4:\n          this._vertexData.uvs5 = uvs;\n          break;\n        case 5:\n          this._vertexData.uvs6 = uvs;\n          break;\n      }\n      // Storage\n      state.restoreGeometryContext();\n      state.restoreExecutionContext();\n      return this._vertexData;\n    };\n    if (this.evaluateContext) {\n      this.output._storedFunction = func;\n    } else {\n      this.output._storedFunction = null;\n      this.output._storedValue = func(state);\n    }\n  }\n  _dumpPropertiesCode() {\n    let codeString = super._dumpPropertiesCode() + `${this._codeVariableName}.textureCoordinateIndex};\\n`;\n    codeString += `${this._codeVariableName}.evaluateContext = ${this.evaluateContext ? \"true\" : \"false\"};\\n`;\n    return codeString;\n  }\n  /**\n   * Serializes this block in a JSON representation\n   * @returns the serialized block object\n   */\n  serialize() {\n    const serializationObject = super.serialize();\n    serializationObject.evaluateContext = this.evaluateContext;\n    serializationObject.textureCoordinateIndex = this.textureCoordinateIndex;\n    return serializationObject;\n  }\n  _deserialize(serializationObject) {\n    super._deserialize(serializationObject);\n    this.textureCoordinateIndex = serializationObject.textureCoordinateIndex;\n    if (serializationObject.evaluateContext !== undefined) {\n      this.evaluateContext = serializationObject.evaluateContext;\n    }\n  }\n}\n__decorate([editableInPropertyPage(\"Evaluate context\", PropertyTypeForEdition.Boolean, \"ADVANCED\", {\n  notifiers: {\n    rebuild: true\n  }\n})], SetUVsBlock.prototype, \"evaluateContext\", void 0);\n__decorate([editableInPropertyPage(\"Texture coordinates index\", PropertyTypeForEdition.List, \"ADVANCED\", {\n  notifiers: {\n    update: true\n  },\n  options: [{\n    label: \"UV1\",\n    value: 0\n  }, {\n    label: \"UV2\",\n    value: 1\n  }, {\n    label: \"UV3\",\n    value: 2\n  }, {\n    label: \"UV4\",\n    value: 3\n  }, {\n    label: \"UV5\",\n    value: 4\n  }, {\n    label: \"UV6\",\n    value: 5\n  }]\n})], SetUVsBlock.prototype, \"textureCoordinateIndex\", void 0);\nRegisterClass(\"BABYLON.SetUVsBlock\", SetUVsBlock);","map":{"version":3,"names":["NodeGeometryBlock","RegisterClass","NodeGeometryBlockConnectionPointTypes","PropertyTypeForEdition","editableInPropertyPage","SetUVsBlock","constructor","name","evaluateContext","textureCoordinateIndex","registerInput","Geometry","Vector2","registerOutput","getExecutionIndex","_currentIndex","getExecutionLoopIndex","getExecutionFaceIndex","getClassName","geometry","_inputs","uvs","output","_outputs","_buildBlock","state","func","pushExecutionContext","_vertexData","getConnectedValue","pushGeometryContext","positions","restoreGeometryContext","restoreExecutionContext","_storedValue","isConnected","vertexCount","length","tempVector2","toArray","uvs2","uvs3","uvs4","uvs5","uvs6","_storedFunction","_dumpPropertiesCode","codeString","_codeVariableName","serialize","serializationObject","_deserialize","undefined","__decorate","Boolean","notifiers","rebuild","List","update","options","label","value"],"sources":["../../../../../../../dev/core/src/Meshes/Node/Blocks/Set/setUVsBlock.ts"],"sourcesContent":["import { NodeGeometryBlock } from \"../../nodeGeometryBlock\";\r\nimport type { NodeGeometryConnectionPoint } from \"../../nodeGeometryBlockConnectionPoint\";\r\nimport { RegisterClass } from \"../../../../Misc/typeStore\";\r\nimport { NodeGeometryBlockConnectionPointTypes } from \"../../Enums/nodeGeometryConnectionPointTypes\";\r\nimport type { NodeGeometryBuildState } from \"../../nodeGeometryBuildState\";\r\nimport type { INodeGeometryExecutionContext } from \"../../Interfaces/nodeGeometryExecutionContext\";\r\nimport type { VertexData } from \"../../../mesh.vertexData\";\r\nimport type { Vector2 } from \"../../../../Maths/math.vector\";\r\nimport { PropertyTypeForEdition, editableInPropertyPage } from \"../../../../Decorators/nodeDecorator\";\r\n\r\n/**\r\n * Block used to set texture coordinates for a geometry\r\n */\r\nexport class SetUVsBlock extends NodeGeometryBlock implements INodeGeometryExecutionContext {\r\n    private _vertexData: VertexData;\r\n    private _currentIndex: number;\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating that this block can evaluate context\r\n     * Build performance is improved when this value is set to false as the system will cache values instead of reevaluating everything per context change\r\n     */\r\n    @editableInPropertyPage(\"Evaluate context\", PropertyTypeForEdition.Boolean, \"ADVANCED\", { notifiers: { rebuild: true } })\r\n    public evaluateContext = true;\r\n\r\n    /**\r\n     * Gets or sets a value indicating which UV to set\r\n     */\r\n    @editableInPropertyPage(\"Texture coordinates index\", PropertyTypeForEdition.List, \"ADVANCED\", {\r\n        notifiers: { update: true },\r\n        options: [\r\n            { label: \"UV1\", value: 0 },\r\n            { label: \"UV2\", value: 1 },\r\n            { label: \"UV3\", value: 2 },\r\n            { label: \"UV4\", value: 3 },\r\n            { label: \"UV5\", value: 4 },\r\n            { label: \"UV6\", value: 5 },\r\n        ],\r\n    })\r\n    public textureCoordinateIndex = 0;\r\n\r\n    /**\r\n     * Create a new SetUVsBlock\r\n     * @param name defines the block name\r\n     */\r\n    public constructor(name: string) {\r\n        super(name);\r\n\r\n        this.registerInput(\"geometry\", NodeGeometryBlockConnectionPointTypes.Geometry);\r\n        this.registerInput(\"uvs\", NodeGeometryBlockConnectionPointTypes.Vector2);\r\n\r\n        this.registerOutput(\"output\", NodeGeometryBlockConnectionPointTypes.Geometry);\r\n    }\r\n\r\n    /**\r\n     * Gets the current index in the current flow\r\n     * @returns the current index\r\n     */\r\n    public getExecutionIndex(): number {\r\n        return this._currentIndex;\r\n    }\r\n\r\n    /**\r\n     * Gets the current loop index in the current flow\r\n     * @returns the current loop index\r\n     */\r\n    public getExecutionLoopIndex(): number {\r\n        return this._currentIndex;\r\n    }\r\n\r\n    /**\r\n     * Gets the current face index in the current flow\r\n     * @returns the current face index\r\n     */\r\n    public getExecutionFaceIndex(): number {\r\n        return 0;\r\n    }\r\n\r\n    /**\r\n     * Gets the current class name\r\n     * @returns the class name\r\n     */\r\n    public getClassName() {\r\n        return \"SetUVsBlock\";\r\n    }\r\n\r\n    /**\r\n     * Gets the geometry input component\r\n     */\r\n    public get geometry(): NodeGeometryConnectionPoint {\r\n        return this._inputs[0];\r\n    }\r\n\r\n    /**\r\n     * Gets the uvs input component\r\n     */\r\n    public get uvs(): NodeGeometryConnectionPoint {\r\n        return this._inputs[1];\r\n    }\r\n\r\n    /**\r\n     * Gets the geometry output component\r\n     */\r\n    public get output(): NodeGeometryConnectionPoint {\r\n        return this._outputs[0];\r\n    }\r\n\r\n    protected _buildBlock(state: NodeGeometryBuildState) {\r\n        const func = (state: NodeGeometryBuildState) => {\r\n            state.pushExecutionContext(this);\r\n\r\n            this._vertexData = this.geometry.getConnectedValue(state);\r\n            state.pushGeometryContext(this._vertexData);\r\n\r\n            if (!this._vertexData || !this._vertexData.positions) {\r\n                state.restoreGeometryContext();\r\n                state.restoreExecutionContext();\r\n                this.output._storedValue = null;\r\n                return;\r\n            }\r\n\r\n            if (!this.uvs.isConnected) {\r\n                state.restoreGeometryContext();\r\n                state.restoreExecutionContext();\r\n                this.output._storedValue = this._vertexData;\r\n                return;\r\n            }\r\n\r\n            const uvs: number[] = [];\r\n\r\n            // Processing\r\n            const vertexCount = this._vertexData.positions.length / 3;\r\n            for (this._currentIndex = 0; this._currentIndex < vertexCount; this._currentIndex++) {\r\n                const tempVector2 = this.uvs.getConnectedValue(state) as Vector2;\r\n                if (tempVector2) {\r\n                    tempVector2.toArray(uvs, this._currentIndex * 2);\r\n                }\r\n            }\r\n\r\n            switch (this.textureCoordinateIndex) {\r\n                case 0:\r\n                    this._vertexData.uvs = uvs;\r\n                    break;\r\n                case 1:\r\n                    this._vertexData.uvs2 = uvs;\r\n                    break;\r\n                case 2:\r\n                    this._vertexData.uvs3 = uvs;\r\n                    break;\r\n                case 3:\r\n                    this._vertexData.uvs4 = uvs;\r\n                    break;\r\n                case 4:\r\n                    this._vertexData.uvs5 = uvs;\r\n                    break;\r\n                case 5:\r\n                    this._vertexData.uvs6 = uvs;\r\n                    break;\r\n            }\r\n\r\n            // Storage\r\n            state.restoreGeometryContext();\r\n            state.restoreExecutionContext();\r\n            return this._vertexData;\r\n        };\r\n\r\n        if (this.evaluateContext) {\r\n            this.output._storedFunction = func;\r\n        } else {\r\n            this.output._storedFunction = null;\r\n            this.output._storedValue = func(state);\r\n        }\r\n    }\r\n\r\n    protected _dumpPropertiesCode() {\r\n        let codeString = super._dumpPropertiesCode() + `${this._codeVariableName}.textureCoordinateIndex};\\n`;\r\n        codeString += `${this._codeVariableName}.evaluateContext = ${this.evaluateContext ? \"true\" : \"false\"};\\n`;\r\n        return codeString;\r\n    }\r\n\r\n    /**\r\n     * Serializes this block in a JSON representation\r\n     * @returns the serialized block object\r\n     */\r\n    public serialize(): any {\r\n        const serializationObject = super.serialize();\r\n\r\n        serializationObject.evaluateContext = this.evaluateContext;\r\n        serializationObject.textureCoordinateIndex = this.textureCoordinateIndex;\r\n\r\n        return serializationObject;\r\n    }\r\n\r\n    public _deserialize(serializationObject: any) {\r\n        super._deserialize(serializationObject);\r\n\r\n        this.textureCoordinateIndex = serializationObject.textureCoordinateIndex;\r\n\r\n        if (serializationObject.evaluateContext !== undefined) {\r\n            this.evaluateContext = serializationObject.evaluateContext;\r\n        }\r\n    }\r\n}\r\n\r\nRegisterClass(\"BABYLON.SetUVsBlock\", SetUVsBlock);\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}