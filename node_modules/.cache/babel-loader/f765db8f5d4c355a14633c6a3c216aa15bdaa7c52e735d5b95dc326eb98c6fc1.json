{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { NodeMaterialBlock } from \"../../nodeMaterialBlock.js\";\nimport { NodeMaterialBlockConnectionPointTypes } from \"../../Enums/nodeMaterialBlockConnectionPointTypes.js\";\nimport { NodeMaterialBlockTargets } from \"../../Enums/nodeMaterialBlockTargets.js\";\nimport { NodeMaterialConnectionPointDirection } from \"../../nodeMaterialBlockConnectionPoint.js\";\nimport { RegisterClass } from \"../../../../Misc/typeStore.js\";\nimport { NodeMaterialConnectionPointCustomObject } from \"../../nodeMaterialConnectionPointCustomObject.js\";\nimport { NodeMaterialSystemValues } from \"../../Enums/nodeMaterialSystemValues.js\";\nimport { InputBlock } from \"../Input/inputBlock.js\";\n/**\n * Block used to implement TBN matrix\n */\nexport class TBNBlock extends NodeMaterialBlock {\n  /**\n   * Create a new TBNBlock\n   * @param name defines the block name\n   */\n  constructor(name) {\n    super(name, NodeMaterialBlockTargets.Fragment, true);\n    this.registerInput(\"normal\", NodeMaterialBlockConnectionPointTypes.AutoDetect, false);\n    this.normal.addExcludedConnectionPointFromAllowedTypes(NodeMaterialBlockConnectionPointTypes.Color4 | NodeMaterialBlockConnectionPointTypes.Vector4 | NodeMaterialBlockConnectionPointTypes.Vector3);\n    this.registerInput(\"tangent\", NodeMaterialBlockConnectionPointTypes.Vector4, false);\n    this.registerInput(\"world\", NodeMaterialBlockConnectionPointTypes.Matrix, false);\n    this.registerOutput(\"TBN\", NodeMaterialBlockConnectionPointTypes.Object, NodeMaterialBlockTargets.Fragment, new NodeMaterialConnectionPointCustomObject(\"TBN\", this, NodeMaterialConnectionPointDirection.Output, TBNBlock, \"TBNBlock\"));\n    this.registerOutput(\"row0\", NodeMaterialBlockConnectionPointTypes.Vector3, NodeMaterialBlockTargets.Fragment);\n    this.registerOutput(\"row1\", NodeMaterialBlockConnectionPointTypes.Vector3, NodeMaterialBlockTargets.Fragment);\n    this.registerOutput(\"row2\", NodeMaterialBlockConnectionPointTypes.Vector3, NodeMaterialBlockTargets.Fragment);\n  }\n  /**\n   * Gets the current class name\n   * @returns the class name\n   */\n  getClassName() {\n    return \"TBNBlock\";\n  }\n  /**\n   * Initialize the block and prepare the context for build\n   * @param state defines the state that will be used for the build\n   */\n  initialize(state) {\n    state._excludeVariableName(\"tbnNormal\");\n    state._excludeVariableName(\"tbnTangent\");\n    state._excludeVariableName(\"tbnBitangent\");\n    state._excludeVariableName(\"TBN\");\n  }\n  /**\n   * Gets the normal input component\n   */\n  get normal() {\n    return this._inputs[0];\n  }\n  /**\n   * Gets the tangent input component\n   */\n  get tangent() {\n    return this._inputs[1];\n  }\n  /**\n   * Gets the world matrix input component\n   */\n  get world() {\n    return this._inputs[2];\n  }\n  /**\n   * Gets the TBN output component\n   */\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  get TBN() {\n    return this._outputs[0];\n  }\n  /**\n   * Gets the row0 of the output matrix\n   */\n  get row0() {\n    return this._outputs[1];\n  }\n  /**\n   * Gets the row1 of the output matrix\n   */\n  get row1() {\n    return this._outputs[2];\n  }\n  /**\n   * Gets the row2 of the output matrix\n   */\n  get row2() {\n    return this._outputs[3];\n  }\n  get target() {\n    return NodeMaterialBlockTargets.Fragment;\n  }\n  set target(value) {}\n  autoConfigure(material, additionalFilteringInfo = () => true) {\n    if (!this.world.isConnected) {\n      let worldInput = material.getInputBlockByPredicate(b => b.isSystemValue && b.systemValue === NodeMaterialSystemValues.World && additionalFilteringInfo(b));\n      if (!worldInput) {\n        worldInput = new InputBlock(\"world\");\n        worldInput.setAsSystemValue(NodeMaterialSystemValues.World);\n      }\n      worldInput.output.connectTo(this.world);\n    }\n    if (!this.normal.isConnected) {\n      let normalInput = material.getInputBlockByPredicate(b => b.isAttribute && b.name === \"normal\" && additionalFilteringInfo(b));\n      if (!normalInput) {\n        normalInput = new InputBlock(\"normal\");\n        normalInput.setAsAttribute(\"normal\");\n      }\n      normalInput.output.connectTo(this.normal);\n    }\n    if (!this.tangent.isConnected) {\n      let tangentInput = material.getInputBlockByPredicate(b => b.isAttribute && b.name === \"tangent\" && b.type === NodeMaterialBlockConnectionPointTypes.Vector4 && additionalFilteringInfo(b));\n      if (!tangentInput) {\n        tangentInput = new InputBlock(\"tangent\");\n        tangentInput.setAsAttribute(\"tangent\");\n      }\n      tangentInput.output.connectTo(this.tangent);\n    }\n  }\n  prepareDefines(mesh, nodeMaterial, defines) {\n    var _a, _b, _c, _d;\n    const normal = this.normal;\n    const tangent = this.tangent;\n    let normalAvailable = normal.isConnected;\n    if (((_a = normal.connectInputBlock) === null || _a === void 0 ? void 0 : _a.isAttribute) && !mesh.isVerticesDataPresent((_b = normal.connectInputBlock) === null || _b === void 0 ? void 0 : _b.name)) {\n      normalAvailable = false;\n    }\n    let tangentAvailable = tangent.isConnected;\n    if (((_c = tangent.connectInputBlock) === null || _c === void 0 ? void 0 : _c.isAttribute) && !mesh.isVerticesDataPresent((_d = tangent.connectInputBlock) === null || _d === void 0 ? void 0 : _d.name)) {\n      tangentAvailable = false;\n    }\n    const useTBNBlock = normalAvailable && tangentAvailable;\n    defines.setValue(\"TBNBLOCK\", useTBNBlock, true);\n  }\n  _buildBlock(state) {\n    super._buildBlock(state);\n    const normal = this.normal;\n    const tangent = this.tangent;\n    const world = this.world;\n    const TBN = this.TBN;\n    const row0 = this.row0;\n    const row1 = this.row1;\n    const row2 = this.row2;\n    // Fragment\n    if (state.target === NodeMaterialBlockTargets.Fragment) {\n      state.compilationString += `\n                // ${this.name}\n                vec3 tbnNormal = normalize(${normal.associatedVariableName}).xyz;\n                vec3 tbnTangent = normalize(${tangent.associatedVariableName}.xyz);\n                vec3 tbnBitangent = cross(tbnNormal, tbnTangent) * ${tangent.associatedVariableName}.w;\n                mat3 ${TBN.associatedVariableName} = mat3(${world.associatedVariableName}) * mat3(tbnTangent, tbnBitangent, tbnNormal);\n            `;\n      if (row0.hasEndpoints) {\n        state.compilationString += this._declareOutput(row0, state) + ` = vec3(${TBN.associatedVariableName}[0][0], ${TBN.associatedVariableName}[0][1], ${TBN.associatedVariableName}[0][2]);\\n`;\n      }\n      if (row1.hasEndpoints) {\n        state.compilationString += this._declareOutput(row1, state) + ` = vec3(${TBN.associatedVariableName}[1[0], ${TBN.associatedVariableName}[1][1], ${TBN.associatedVariableName}[1][2]);\\n`;\n      }\n      if (row2.hasEndpoints) {\n        state.compilationString += this._declareOutput(row2, state) + ` = vec3(${TBN.associatedVariableName}[2][0], ${TBN.associatedVariableName}[2][1], ${TBN.associatedVariableName}[2][2]);\\n`;\n      }\n      state.sharedData.blocksWithDefines.push(this);\n    }\n    return this;\n  }\n}\nRegisterClass(\"BABYLON.TBNBlock\", TBNBlock);","map":{"version":3,"names":["NodeMaterialBlock","NodeMaterialBlockConnectionPointTypes","NodeMaterialBlockTargets","NodeMaterialConnectionPointDirection","RegisterClass","NodeMaterialConnectionPointCustomObject","NodeMaterialSystemValues","InputBlock","TBNBlock","constructor","name","Fragment","registerInput","AutoDetect","normal","addExcludedConnectionPointFromAllowedTypes","Color4","Vector4","Vector3","Matrix","registerOutput","Object","Output","getClassName","initialize","state","_excludeVariableName","_inputs","tangent","world","TBN","_outputs","row0","row1","row2","target","value","autoConfigure","material","additionalFilteringInfo","isConnected","worldInput","getInputBlockByPredicate","b","isSystemValue","systemValue","World","setAsSystemValue","output","connectTo","normalInput","isAttribute","setAsAttribute","tangentInput","type","prepareDefines","mesh","nodeMaterial","defines","normalAvailable","_a","connectInputBlock","isVerticesDataPresent","_b","tangentAvailable","_c","_d","useTBNBlock","setValue","_buildBlock","compilationString","associatedVariableName","hasEndpoints","_declareOutput","sharedData","blocksWithDefines","push"],"sources":["../../../../../../../dev/core/src/Materials/Node/Blocks/Fragment/TBNBlock.ts"],"sourcesContent":["import { NodeMaterialBlock } from \"../../nodeMaterialBlock\";\r\nimport { NodeMaterialBlockConnectionPointTypes } from \"../../Enums/nodeMaterialBlockConnectionPointTypes\";\r\nimport type { NodeMaterialBuildState } from \"../../nodeMaterialBuildState\";\r\nimport { NodeMaterialBlockTargets } from \"../../Enums/nodeMaterialBlockTargets\";\r\nimport type { NodeMaterialConnectionPoint } from \"../../nodeMaterialBlockConnectionPoint\";\r\nimport { NodeMaterialConnectionPointDirection } from \"../../nodeMaterialBlockConnectionPoint\";\r\nimport { RegisterClass } from \"../../../../Misc/typeStore\";\r\nimport { NodeMaterialConnectionPointCustomObject } from \"../../nodeMaterialConnectionPointCustomObject\";\r\nimport type { NodeMaterial, NodeMaterialDefines } from \"../../nodeMaterial\";\r\nimport { NodeMaterialSystemValues } from \"../../Enums/nodeMaterialSystemValues\";\r\nimport { InputBlock } from \"../Input/inputBlock\";\r\nimport type { AbstractMesh } from \"../../../../Meshes/abstractMesh\";\r\n\r\n/**\r\n * Block used to implement TBN matrix\r\n */\r\nexport class TBNBlock extends NodeMaterialBlock {\r\n    /**\r\n     * Create a new TBNBlock\r\n     * @param name defines the block name\r\n     */\r\n    public constructor(name: string) {\r\n        super(name, NodeMaterialBlockTargets.Fragment, true);\r\n\r\n        this.registerInput(\"normal\", NodeMaterialBlockConnectionPointTypes.AutoDetect, false);\r\n        this.normal.addExcludedConnectionPointFromAllowedTypes(\r\n            NodeMaterialBlockConnectionPointTypes.Color4 | NodeMaterialBlockConnectionPointTypes.Vector4 | NodeMaterialBlockConnectionPointTypes.Vector3\r\n        );\r\n        this.registerInput(\"tangent\", NodeMaterialBlockConnectionPointTypes.Vector4, false);\r\n        this.registerInput(\"world\", NodeMaterialBlockConnectionPointTypes.Matrix, false);\r\n\r\n        this.registerOutput(\r\n            \"TBN\",\r\n            NodeMaterialBlockConnectionPointTypes.Object,\r\n            NodeMaterialBlockTargets.Fragment,\r\n            new NodeMaterialConnectionPointCustomObject(\"TBN\", this, NodeMaterialConnectionPointDirection.Output, TBNBlock, \"TBNBlock\")\r\n        );\r\n\r\n        this.registerOutput(\"row0\", NodeMaterialBlockConnectionPointTypes.Vector3, NodeMaterialBlockTargets.Fragment);\r\n        this.registerOutput(\"row1\", NodeMaterialBlockConnectionPointTypes.Vector3, NodeMaterialBlockTargets.Fragment);\r\n        this.registerOutput(\"row2\", NodeMaterialBlockConnectionPointTypes.Vector3, NodeMaterialBlockTargets.Fragment);\r\n    }\r\n\r\n    /**\r\n     * Gets the current class name\r\n     * @returns the class name\r\n     */\r\n    public getClassName() {\r\n        return \"TBNBlock\";\r\n    }\r\n\r\n    /**\r\n     * Initialize the block and prepare the context for build\r\n     * @param state defines the state that will be used for the build\r\n     */\r\n    public initialize(state: NodeMaterialBuildState) {\r\n        state._excludeVariableName(\"tbnNormal\");\r\n        state._excludeVariableName(\"tbnTangent\");\r\n        state._excludeVariableName(\"tbnBitangent\");\r\n        state._excludeVariableName(\"TBN\");\r\n    }\r\n\r\n    /**\r\n     * Gets the normal input component\r\n     */\r\n    public get normal(): NodeMaterialConnectionPoint {\r\n        return this._inputs[0];\r\n    }\r\n\r\n    /**\r\n     * Gets the tangent input component\r\n     */\r\n    public get tangent(): NodeMaterialConnectionPoint {\r\n        return this._inputs[1];\r\n    }\r\n\r\n    /**\r\n     * Gets the world matrix input component\r\n     */\r\n    public get world(): NodeMaterialConnectionPoint {\r\n        return this._inputs[2];\r\n    }\r\n\r\n    /**\r\n     * Gets the TBN output component\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    public get TBN(): NodeMaterialConnectionPoint {\r\n        return this._outputs[0];\r\n    }\r\n\r\n    /**\r\n     * Gets the row0 of the output matrix\r\n     */\r\n    public get row0(): NodeMaterialConnectionPoint {\r\n        return this._outputs[1];\r\n    }\r\n\r\n    /**\r\n     * Gets the row1 of the output matrix\r\n     */\r\n    public get row1(): NodeMaterialConnectionPoint {\r\n        return this._outputs[2];\r\n    }\r\n\r\n    /**\r\n     * Gets the row2 of the output matrix\r\n     */\r\n    public get row2(): NodeMaterialConnectionPoint {\r\n        return this._outputs[3];\r\n    }\r\n\r\n    public get target() {\r\n        return NodeMaterialBlockTargets.Fragment;\r\n    }\r\n\r\n    public set target(value: NodeMaterialBlockTargets) {}\r\n\r\n    public autoConfigure(material: NodeMaterial, additionalFilteringInfo: (node: NodeMaterialBlock) => boolean = () => true) {\r\n        if (!this.world.isConnected) {\r\n            let worldInput = material.getInputBlockByPredicate((b) => b.isSystemValue && b.systemValue === NodeMaterialSystemValues.World && additionalFilteringInfo(b));\r\n\r\n            if (!worldInput) {\r\n                worldInput = new InputBlock(\"world\");\r\n                worldInput.setAsSystemValue(NodeMaterialSystemValues.World);\r\n            }\r\n            worldInput.output.connectTo(this.world);\r\n        }\r\n\r\n        if (!this.normal.isConnected) {\r\n            let normalInput = material.getInputBlockByPredicate((b) => b.isAttribute && b.name === \"normal\" && additionalFilteringInfo(b));\r\n\r\n            if (!normalInput) {\r\n                normalInput = new InputBlock(\"normal\");\r\n                normalInput.setAsAttribute(\"normal\");\r\n            }\r\n            normalInput.output.connectTo(this.normal);\r\n        }\r\n\r\n        if (!this.tangent.isConnected) {\r\n            let tangentInput = material.getInputBlockByPredicate(\r\n                (b) => b.isAttribute && b.name === \"tangent\" && b.type === NodeMaterialBlockConnectionPointTypes.Vector4 && additionalFilteringInfo(b)\r\n            );\r\n\r\n            if (!tangentInput) {\r\n                tangentInput = new InputBlock(\"tangent\");\r\n                tangentInput.setAsAttribute(\"tangent\");\r\n            }\r\n            tangentInput.output.connectTo(this.tangent);\r\n        }\r\n    }\r\n\r\n    public prepareDefines(mesh: AbstractMesh, nodeMaterial: NodeMaterial, defines: NodeMaterialDefines) {\r\n        const normal = this.normal;\r\n        const tangent = this.tangent;\r\n\r\n        let normalAvailable = normal.isConnected;\r\n        if (normal.connectInputBlock?.isAttribute && !mesh.isVerticesDataPresent(normal.connectInputBlock?.name)) {\r\n            normalAvailable = false;\r\n        }\r\n\r\n        let tangentAvailable = tangent.isConnected;\r\n        if (tangent.connectInputBlock?.isAttribute && !mesh.isVerticesDataPresent(tangent.connectInputBlock?.name)) {\r\n            tangentAvailable = false;\r\n        }\r\n\r\n        const useTBNBlock = normalAvailable && tangentAvailable;\r\n\r\n        defines.setValue(\"TBNBLOCK\", useTBNBlock, true);\r\n    }\r\n\r\n    protected _buildBlock(state: NodeMaterialBuildState) {\r\n        super._buildBlock(state);\r\n\r\n        const normal = this.normal;\r\n        const tangent = this.tangent;\r\n        const world = this.world;\r\n        const TBN = this.TBN;\r\n        const row0 = this.row0;\r\n        const row1 = this.row1;\r\n        const row2 = this.row2;\r\n\r\n        // Fragment\r\n        if (state.target === NodeMaterialBlockTargets.Fragment) {\r\n            state.compilationString += `\r\n                // ${this.name}\r\n                vec3 tbnNormal = normalize(${normal.associatedVariableName}).xyz;\r\n                vec3 tbnTangent = normalize(${tangent.associatedVariableName}.xyz);\r\n                vec3 tbnBitangent = cross(tbnNormal, tbnTangent) * ${tangent.associatedVariableName}.w;\r\n                mat3 ${TBN.associatedVariableName} = mat3(${world.associatedVariableName}) * mat3(tbnTangent, tbnBitangent, tbnNormal);\r\n            `;\r\n\r\n            if (row0.hasEndpoints) {\r\n                state.compilationString +=\r\n                    this._declareOutput(row0, state) + ` = vec3(${TBN.associatedVariableName}[0][0], ${TBN.associatedVariableName}[0][1], ${TBN.associatedVariableName}[0][2]);\\n`;\r\n            }\r\n            if (row1.hasEndpoints) {\r\n                state.compilationString +=\r\n                    this._declareOutput(row1, state) + ` = vec3(${TBN.associatedVariableName}[1[0], ${TBN.associatedVariableName}[1][1], ${TBN.associatedVariableName}[1][2]);\\n`;\r\n            }\r\n            if (row2.hasEndpoints) {\r\n                state.compilationString +=\r\n                    this._declareOutput(row2, state) + ` = vec3(${TBN.associatedVariableName}[2][0], ${TBN.associatedVariableName}[2][1], ${TBN.associatedVariableName}[2][2]);\\n`;\r\n            }\r\n\r\n            state.sharedData.blocksWithDefines.push(this);\r\n        }\r\n\r\n        return this;\r\n    }\r\n}\r\n\r\nRegisterClass(\"BABYLON.TBNBlock\", TBNBlock);\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}