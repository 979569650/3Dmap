{"ast":null,"code":"import { RichTypeNumber } from \"../../../flowGraphRichTypes.js\";\nimport { FlowGraphBinaryOperationBlock } from \"../flowGraphBinaryOperationBlock.js\";\nimport { FlowGraphUnaryOperationBlock } from \"../flowGraphUnaryOperationBlock.js\";\nimport { RegisterClass } from \"../../../../Misc/typeStore.js\";\nconst PREFIX = \"FGBitwise\";\nconst AND = \"AndBlock\";\nconst OR = \"OrBlock\";\nconst XOR = \"XorBlock\";\nconst NOT = \"NotBlock\";\nconst LSHIFT = \"LeftShiftBlock\";\nconst RSHIFT = \"RightShiftBlock\";\nconst CLZ = \"CountLeadingZerosBlock\";\nconst CTZ = \"CountTrailingZerosBlock\";\n/**\n * @experimental\n * Performs a bitwise AND operation on two numbers.\n */\nexport class FlowGraphBitwiseAndBlock extends FlowGraphBinaryOperationBlock {\n  constructor(config) {\n    super(RichTypeNumber, RichTypeNumber, RichTypeNumber, (left, right) => left & right, `${PREFIX}${AND}`, config);\n  }\n}\nRegisterClass(`${PREFIX}${AND}`, FlowGraphBitwiseAndBlock);\n/**\n * @experimental\n * Performs a bitwise OR operation on two numbers.\n */\nexport class FlowGraphBitwiseOrBlock extends FlowGraphBinaryOperationBlock {\n  constructor(config) {\n    super(RichTypeNumber, RichTypeNumber, RichTypeNumber, (left, right) => left | right, `${PREFIX}${OR}`, config);\n  }\n}\nRegisterClass(`${PREFIX}${OR}`, FlowGraphBitwiseOrBlock);\n/**\n * @experimental\n * Performs a bitwise XOR operation on two numbers.\n */\nexport class FlowGraphBitwiseXorBlock extends FlowGraphBinaryOperationBlock {\n  constructor(config) {\n    super(RichTypeNumber, RichTypeNumber, RichTypeNumber, (left, right) => left ^ right, `${PREFIX}${XOR}`, config);\n  }\n}\nRegisterClass(`${PREFIX}${XOR}`, FlowGraphBitwiseXorBlock);\n/**\n * @experimental\n * Performs a bitwise NOT operation on a number.\n */\nexport class FlowGraphBitwiseNotBlock extends FlowGraphUnaryOperationBlock {\n  constructor(config) {\n    super(RichTypeNumber, RichTypeNumber, value => ~value, `${PREFIX}${NOT}`, config);\n  }\n}\nRegisterClass(`${PREFIX}${NOT}`, FlowGraphBitwiseNotBlock);\n/**\n * @experimental\n * Left shifts a number by a specified amount.\n */\nexport class FlowGraphBitwiseLeftShiftBlock extends FlowGraphBinaryOperationBlock {\n  constructor(config) {\n    super(RichTypeNumber, RichTypeNumber, RichTypeNumber, (left, right) => left << right, `${PREFIX}${LSHIFT}`, config);\n  }\n}\nRegisterClass(`${PREFIX}${LSHIFT}`, FlowGraphBitwiseLeftShiftBlock);\n/**\n * @experimental\n * Right shifts a number by a specified amount.\n */\nexport class FlowGraphBitwiseRightShiftBlock extends FlowGraphBinaryOperationBlock {\n  constructor(config) {\n    super(RichTypeNumber, RichTypeNumber, RichTypeNumber, (left, right) => left >> right, `${PREFIX}${RSHIFT}`, config);\n  }\n}\nRegisterClass(`${PREFIX}${RSHIFT}`, FlowGraphBitwiseRightShiftBlock);\n/**\n * @experimental\n * Counts the leading zero bits of a number\n */\nexport class FlowGraphCountLeadingZerosBlock extends FlowGraphUnaryOperationBlock {\n  constructor(config) {\n    super(RichTypeNumber, RichTypeNumber, value => Math.clz32(value), `${PREFIX}${CLZ}`, config);\n  }\n}\nRegisterClass(`${PREFIX}${CLZ}`, FlowGraphCountLeadingZerosBlock);\n/**\n * @experimental\n * Counts the trailing zero bits of a number\n */\nexport class FlowGraphCountTrailingZerosBlock extends FlowGraphUnaryOperationBlock {\n  // from: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/clz32#implementing_count_leading_ones_and_beyond\n  _ctrz(integer) {\n    integer >>>= 0; // coerce to Uint32\n    if (integer === 0) {\n      // skipping this step would make it return -1\n      return 32;\n    }\n    integer &= -integer; // equivalent to `int = int & (~int + 1)`\n    return 31 - Math.clz32(integer);\n  }\n  constructor(config) {\n    super(RichTypeNumber, RichTypeNumber, value => this._ctrz(value), `${PREFIX}${CTZ}`, config);\n  }\n}\nRegisterClass(`${PREFIX}${CTZ}`, FlowGraphCountTrailingZerosBlock);","map":{"version":3,"names":["RichTypeNumber","FlowGraphBinaryOperationBlock","FlowGraphUnaryOperationBlock","RegisterClass","PREFIX","AND","OR","XOR","NOT","LSHIFT","RSHIFT","CLZ","CTZ","FlowGraphBitwiseAndBlock","constructor","config","left","right","FlowGraphBitwiseOrBlock","FlowGraphBitwiseXorBlock","FlowGraphBitwiseNotBlock","value","FlowGraphBitwiseLeftShiftBlock","FlowGraphBitwiseRightShiftBlock","FlowGraphCountLeadingZerosBlock","Math","clz32","FlowGraphCountTrailingZerosBlock","_ctrz","integer"],"sources":["../../../../../../../dev/core/src/FlowGraph/Blocks/Data/Logic/flowGraphBitwiseBlocks.ts"],"sourcesContent":["import { RichTypeNumber } from \"../../../flowGraphRichTypes\";\r\nimport { FlowGraphBinaryOperationBlock } from \"../flowGraphBinaryOperationBlock\";\r\nimport { FlowGraphUnaryOperationBlock } from \"../flowGraphUnaryOperationBlock\";\r\nimport type { IFlowGraphBlockConfiguration } from \"../../../flowGraphBlock\";\r\nimport { RegisterClass } from \"../../../../Misc/typeStore\";\r\n\r\nconst PREFIX = \"FGBitwise\";\r\nconst AND = \"AndBlock\";\r\nconst OR = \"OrBlock\";\r\nconst XOR = \"XorBlock\";\r\nconst NOT = \"NotBlock\";\r\nconst LSHIFT = \"LeftShiftBlock\";\r\nconst RSHIFT = \"RightShiftBlock\";\r\nconst CLZ = \"CountLeadingZerosBlock\";\r\nconst CTZ = \"CountTrailingZerosBlock\";\r\n\r\n/**\r\n * @experimental\r\n * Performs a bitwise AND operation on two numbers.\r\n */\r\nexport class FlowGraphBitwiseAndBlock extends FlowGraphBinaryOperationBlock<number, number, number> {\r\n    constructor(config?: IFlowGraphBlockConfiguration) {\r\n        super(RichTypeNumber, RichTypeNumber, RichTypeNumber, (left, right) => left & right, `${PREFIX}${AND}`, config);\r\n    }\r\n}\r\nRegisterClass(`${PREFIX}${AND}`, FlowGraphBitwiseAndBlock);\r\n\r\n/**\r\n * @experimental\r\n * Performs a bitwise OR operation on two numbers.\r\n */\r\nexport class FlowGraphBitwiseOrBlock extends FlowGraphBinaryOperationBlock<number, number, number> {\r\n    constructor(config?: IFlowGraphBlockConfiguration) {\r\n        super(RichTypeNumber, RichTypeNumber, RichTypeNumber, (left, right) => left | right, `${PREFIX}${OR}`, config);\r\n    }\r\n}\r\nRegisterClass(`${PREFIX}${OR}`, FlowGraphBitwiseOrBlock);\r\n\r\n/**\r\n * @experimental\r\n * Performs a bitwise XOR operation on two numbers.\r\n */\r\nexport class FlowGraphBitwiseXorBlock extends FlowGraphBinaryOperationBlock<number, number, number> {\r\n    constructor(config?: IFlowGraphBlockConfiguration) {\r\n        super(RichTypeNumber, RichTypeNumber, RichTypeNumber, (left, right) => left ^ right, `${PREFIX}${XOR}`, config);\r\n    }\r\n}\r\nRegisterClass(`${PREFIX}${XOR}`, FlowGraphBitwiseXorBlock);\r\n\r\n/**\r\n * @experimental\r\n * Performs a bitwise NOT operation on a number.\r\n */\r\nexport class FlowGraphBitwiseNotBlock extends FlowGraphUnaryOperationBlock<number, number> {\r\n    constructor(config?: IFlowGraphBlockConfiguration) {\r\n        super(RichTypeNumber, RichTypeNumber, (value) => ~value, `${PREFIX}${NOT}`, config);\r\n    }\r\n}\r\nRegisterClass(`${PREFIX}${NOT}`, FlowGraphBitwiseNotBlock);\r\n\r\n/**\r\n * @experimental\r\n * Left shifts a number by a specified amount.\r\n */\r\nexport class FlowGraphBitwiseLeftShiftBlock extends FlowGraphBinaryOperationBlock<number, number, number> {\r\n    constructor(config?: IFlowGraphBlockConfiguration) {\r\n        super(RichTypeNumber, RichTypeNumber, RichTypeNumber, (left, right) => left << right, `${PREFIX}${LSHIFT}`, config);\r\n    }\r\n}\r\nRegisterClass(`${PREFIX}${LSHIFT}`, FlowGraphBitwiseLeftShiftBlock);\r\n\r\n/**\r\n * @experimental\r\n * Right shifts a number by a specified amount.\r\n */\r\nexport class FlowGraphBitwiseRightShiftBlock extends FlowGraphBinaryOperationBlock<number, number, number> {\r\n    constructor(config?: IFlowGraphBlockConfiguration) {\r\n        super(RichTypeNumber, RichTypeNumber, RichTypeNumber, (left, right) => left >> right, `${PREFIX}${RSHIFT}`, config);\r\n    }\r\n}\r\nRegisterClass(`${PREFIX}${RSHIFT}`, FlowGraphBitwiseRightShiftBlock);\r\n\r\n/**\r\n * @experimental\r\n * Counts the leading zero bits of a number\r\n */\r\nexport class FlowGraphCountLeadingZerosBlock extends FlowGraphUnaryOperationBlock<number, number> {\r\n    constructor(config?: IFlowGraphBlockConfiguration) {\r\n        super(RichTypeNumber, RichTypeNumber, (value) => Math.clz32(value), `${PREFIX}${CLZ}`, config);\r\n    }\r\n}\r\nRegisterClass(`${PREFIX}${CLZ}`, FlowGraphCountLeadingZerosBlock);\r\n\r\n/**\r\n * @experimental\r\n * Counts the trailing zero bits of a number\r\n */\r\nexport class FlowGraphCountTrailingZerosBlock extends FlowGraphUnaryOperationBlock<number, number> {\r\n    // from: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/clz32#implementing_count_leading_ones_and_beyond\r\n    private _ctrz(integer: number) {\r\n        integer >>>= 0; // coerce to Uint32\r\n        if (integer === 0) {\r\n            // skipping this step would make it return -1\r\n            return 32;\r\n        }\r\n        integer &= -integer; // equivalent to `int = int & (~int + 1)`\r\n        return 31 - Math.clz32(integer);\r\n    }\r\n\r\n    constructor(config?: IFlowGraphBlockConfiguration) {\r\n        super(RichTypeNumber, RichTypeNumber, (value) => this._ctrz(value), `${PREFIX}${CTZ}`, config);\r\n    }\r\n}\r\nRegisterClass(`${PREFIX}${CTZ}`, FlowGraphCountTrailingZerosBlock);\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}