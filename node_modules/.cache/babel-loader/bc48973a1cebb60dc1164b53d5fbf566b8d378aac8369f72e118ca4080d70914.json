{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { __decorate } from \"@babylonjs/core/tslib.es6.js\";\nimport { Observable } from \"@babylonjs/core/Misc/observable.js\";\nimport { Vector2, Vector3, Matrix } from \"@babylonjs/core/Maths/math.vector.js\";\nimport { PointerEventTypes } from \"@babylonjs/core/Events/pointerEvents.js\";\nimport { Logger } from \"@babylonjs/core/Misc/logger.js\";\nimport { Tools } from \"@babylonjs/core/Misc/tools.js\";\nimport { ValueAndUnit } from \"../valueAndUnit.js\";\nimport { Measure } from \"../measure.js\";\nimport { Matrix2D, Vector2WithInfo } from \"../math2D.js\";\nimport { GetClass, RegisterClass } from \"@babylonjs/core/Misc/typeStore.js\";\nimport { SerializationHelper, serialize } from \"@babylonjs/core/Misc/decorators.js\";\nimport { EngineStore } from \"@babylonjs/core/Engines/engineStore.js\";\n/**\n * Root class used for all 2D controls\n * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#controls\n */\nexport class Control {\n  /**\n   * Gets or sets a boolean indicating if the control is readonly (default: false).\n   * A readonly control will still raise pointer events but will not react to them\n   */\n  get isReadOnly() {\n    return this._isReadOnly;\n  }\n  set isReadOnly(value) {\n    this._isReadOnly = value;\n  }\n  /**\n   * Gets the transformed measure, that is the bounding box of the control after applying all transformations\n   */\n  get transformedMeasure() {\n    return this._evaluatedMeasure;\n  }\n  /**\n   * Sets/Gets a boolean indicating if the children are clipped to the current control bounds.\n   * Please note that not clipping children may generate issues with adt.useInvalidateRectOptimization so it is recommended to turn this optimization off if you want to use unclipped children\n   */\n  set clipChildren(value) {\n    this._clipChildren = value;\n  }\n  get clipChildren() {\n    return this._clipChildren;\n  }\n  /**\n   * Sets/Gets a boolean indicating that control content must be clipped\n   * Please note that not clipping content may generate issues with adt.useInvalidateRectOptimization so it is recommended to turn this optimization off if you want to use unclipped children\n   */\n  set clipContent(value) {\n    this._clipContent = value;\n  }\n  get clipContent() {\n    return this._clipContent;\n  }\n  /** Gets or sets a value indicating the offset to apply on X axis to render the shadow */\n  get shadowOffsetX() {\n    return this._shadowOffsetX;\n  }\n  set shadowOffsetX(value) {\n    if (this._shadowOffsetX === value) {\n      return;\n    }\n    this._shadowOffsetX = value;\n    this._markAsDirty();\n  }\n  /** Gets or sets a value indicating the offset to apply on Y axis to render the shadow */\n  get shadowOffsetY() {\n    return this._shadowOffsetY;\n  }\n  set shadowOffsetY(value) {\n    if (this._shadowOffsetY === value) {\n      return;\n    }\n    this._shadowOffsetY = value;\n    this._markAsDirty();\n  }\n  /** Gets or sets a value indicating the amount of blur to use to render the shadow */\n  get shadowBlur() {\n    return this._shadowBlur;\n  }\n  set shadowBlur(value) {\n    if (this._shadowBlur === value) {\n      return;\n    }\n    this._previousShadowBlur = this._shadowBlur;\n    this._shadowBlur = value;\n    this._markAsDirty();\n  }\n  /** Gets or sets a value indicating the color of the shadow (black by default ie. \"#000\") */\n  get shadowColor() {\n    return this._shadowColor;\n  }\n  set shadowColor(value) {\n    if (this._shadowColor === value) {\n      return;\n    }\n    this._shadowColor = value;\n    this._markAsDirty();\n  }\n  // Properties\n  /** Gets the control type name */\n  get typeName() {\n    return this._getTypeName();\n  }\n  /**\n   * Get the current class name of the control.\n   * @returns current class name\n   */\n  getClassName() {\n    return this._getTypeName();\n  }\n  /**\n   * Gets or sets the accessibility tag to describe the control for accessibility purpose.\n   * By default, GUI controls already indicate accessibility info, but one can override the info using this tag.\n   */\n  set accessibilityTag(value) {\n    this._accessibilityTag = value;\n    this.onAccessibilityTagChangedObservable.notifyObservers(value);\n  }\n  get accessibilityTag() {\n    return this._accessibilityTag;\n  }\n  /**\n   * Get the hosting AdvancedDynamicTexture\n   */\n  get host() {\n    return this._host;\n  }\n  /** Gets or set information about font offsets (used to render and align text) */\n  get fontOffset() {\n    return this._fontOffset;\n  }\n  set fontOffset(offset) {\n    this._fontOffset = offset;\n  }\n  /** Gets or sets alpha value for the control (1 means opaque and 0 means entirely transparent) */\n  get alpha() {\n    return this._alpha;\n  }\n  set alpha(value) {\n    if (this._alpha === value) {\n      return;\n    }\n    this._alphaSet = true;\n    this._alpha = value;\n    this._markAsDirty();\n  }\n  /**\n   * Gets or sets a number indicating size of stroke we want to highlight the control with (mostly for debugging purpose)\n   */\n  get highlightLineWidth() {\n    return this._highlightLineWidth;\n  }\n  set highlightLineWidth(value) {\n    if (this._highlightLineWidth === value) {\n      return;\n    }\n    this._highlightLineWidth = value;\n    this._markAsDirty();\n  }\n  /**\n   * Gets or sets a boolean indicating that we want to highlight the control (mostly for debugging purpose)\n   */\n  get isHighlighted() {\n    return this._isHighlighted;\n  }\n  set isHighlighted(value) {\n    if (this._isHighlighted === value) {\n      return;\n    }\n    this._isHighlighted = value;\n    this._markAsDirty();\n  }\n  /**\n   * Gets or sets a string defining the color to use for highlighting this control\n   */\n  get highlightColor() {\n    return this._highlightColor;\n  }\n  set highlightColor(value) {\n    if (this._highlightColor === value) {\n      return;\n    }\n    this._highlightColor = value;\n    this._markAsDirty();\n  }\n  /** Gets or sets a value indicating the scale factor on X axis (1 by default)\n   * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#rotation-and-scaling\n   */\n  get scaleX() {\n    return this._scaleX;\n  }\n  set scaleX(value) {\n    if (this._scaleX === value) {\n      return;\n    }\n    this._scaleX = value;\n    this._markAsDirty();\n    this._markMatrixAsDirty();\n  }\n  /** Gets or sets a value indicating the scale factor on Y axis (1 by default)\n   * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#rotation-and-scaling\n   */\n  get scaleY() {\n    return this._scaleY;\n  }\n  set scaleY(value) {\n    if (this._scaleY === value) {\n      return;\n    }\n    this._scaleY = value;\n    this._markAsDirty();\n    this._markMatrixAsDirty();\n  }\n  /** Gets or sets the rotation angle (0 by default)\n   * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#rotation-and-scaling\n   */\n  get rotation() {\n    return this._rotation;\n  }\n  set rotation(value) {\n    if (this._rotation === value) {\n      return;\n    }\n    this._rotation = value;\n    this._markAsDirty();\n    this._markMatrixAsDirty();\n  }\n  /** Gets or sets the transformation center on Y axis (0 by default)\n   * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#rotation-and-scaling\n   */\n  get transformCenterY() {\n    return this._transformCenterY;\n  }\n  set transformCenterY(value) {\n    if (this._transformCenterY === value) {\n      return;\n    }\n    this._transformCenterY = value;\n    this._markAsDirty();\n    this._markMatrixAsDirty();\n  }\n  /** Gets or sets the transformation center on X axis (0 by default)\n   * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#rotation-and-scaling\n   */\n  get transformCenterX() {\n    return this._transformCenterX;\n  }\n  set transformCenterX(value) {\n    if (this._transformCenterX === value) {\n      return;\n    }\n    this._transformCenterX = value;\n    this._markAsDirty();\n    this._markMatrixAsDirty();\n  }\n  /**\n   * Gets or sets the horizontal alignment\n   * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#alignments\n   */\n  get horizontalAlignment() {\n    return this._horizontalAlignment;\n  }\n  set horizontalAlignment(value) {\n    if (this._horizontalAlignment === value) {\n      return;\n    }\n    this._horizontalAlignment = value;\n    this._markAsDirty();\n  }\n  /**\n   * Gets or sets the vertical alignment\n   * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#alignments\n   */\n  get verticalAlignment() {\n    return this._verticalAlignment;\n  }\n  set verticalAlignment(value) {\n    if (this._verticalAlignment === value) {\n      return;\n    }\n    this._verticalAlignment = value;\n    this._markAsDirty();\n  }\n  set fixedRatio(value) {\n    if (this._fixedRatio === value) {\n      return;\n    }\n    this._fixedRatio = value;\n    this._markAsDirty();\n  }\n  /**\n   * Gets or sets a fixed ratio for this control.\n   * When different from 0, the ratio is used to compute the \"second\" dimension.\n   * The first dimension used in the computation is the last one set (by setting width / widthInPixels or height / heightInPixels), and the\n   * second dimension is computed as first dimension * fixedRatio\n   */\n  get fixedRatio() {\n    return this._fixedRatio;\n  }\n  set fixedRatioMasterIsWidth(value) {\n    if (this._fixedRatioMasterIsWidth === value) {\n      return;\n    }\n    this._fixedRatioMasterIsWidth = value;\n    this._markAsDirty();\n  }\n  /**\n   * Gets or sets a boolean indicating that the fixed ratio is set on the width instead of the height. True by default.\n   * When the height of a control is set, this property is changed to false.\n   */\n  get fixedRatioMasterIsWidth() {\n    return this._fixedRatioMasterIsWidth;\n  }\n  /**\n   * Gets or sets control width\n   * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#position-and-size\n   */\n  get width() {\n    return this._width.toString(this._host);\n  }\n  set width(value) {\n    this._fixedRatioMasterIsWidth = true;\n    if (this._width.toString(this._host) === value) {\n      return;\n    }\n    if (this._width.fromString(value)) {\n      this._markAsDirty();\n    }\n  }\n  /**\n   * Gets or sets the control width in pixel\n   * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#position-and-size\n   */\n  get widthInPixels() {\n    return this._width.getValueInPixel(this._host, this._cachedParentMeasure.width);\n  }\n  set widthInPixels(value) {\n    if (isNaN(value)) {\n      return;\n    }\n    this._fixedRatioMasterIsWidth = true;\n    this.width = value + \"px\";\n  }\n  /**\n   * Gets or sets control height\n   * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#position-and-size\n   */\n  get height() {\n    return this._height.toString(this._host);\n  }\n  set height(value) {\n    this._fixedRatioMasterIsWidth = false;\n    if (this._height.toString(this._host) === value) {\n      return;\n    }\n    if (this._height.fromString(value)) {\n      this._markAsDirty();\n    }\n  }\n  /**\n   * Gets or sets control height in pixel\n   * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#position-and-size\n   */\n  get heightInPixels() {\n    return this._height.getValueInPixel(this._host, this._cachedParentMeasure.height);\n  }\n  set heightInPixels(value) {\n    if (isNaN(value)) {\n      return;\n    }\n    this._fixedRatioMasterIsWidth = false;\n    this.height = value + \"px\";\n  }\n  /** Gets or set font family */\n  get fontFamily() {\n    return this._fontFamily;\n  }\n  set fontFamily(value) {\n    if (this._fontFamily === value) {\n      return;\n    }\n    this._fontFamily = value;\n    this._resetFontCache();\n  }\n  /** Gets or sets font style */\n  get fontStyle() {\n    return this._fontStyle;\n  }\n  set fontStyle(value) {\n    if (this._fontStyle === value) {\n      return;\n    }\n    this._fontStyle = value;\n    this._resetFontCache();\n  }\n  /** Gets or sets font weight */\n  get fontWeight() {\n    return this._fontWeight;\n  }\n  set fontWeight(value) {\n    if (this._fontWeight === value) {\n      return;\n    }\n    this._fontWeight = value;\n    this._resetFontCache();\n  }\n  /**\n   * Gets or sets style\n   * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#styles\n   */\n  get style() {\n    return this._style;\n  }\n  set style(value) {\n    if (this._style) {\n      this._style.onChangedObservable.remove(this._styleObserver);\n      this._styleObserver = null;\n    }\n    this._style = value;\n    if (this._style) {\n      this._styleObserver = this._style.onChangedObservable.add(() => {\n        this._markAsDirty();\n        this._resetFontCache();\n      });\n    }\n    this._markAsDirty();\n    this._resetFontCache();\n  }\n  /** @internal */\n  get _isFontSizeInPercentage() {\n    return this._fontSize.isPercentage;\n  }\n  /** Gets or sets font size in pixels */\n  get fontSizeInPixels() {\n    const fontSizeToUse = this._style ? this._style._fontSize : this._fontSize;\n    if (fontSizeToUse.isPixel) {\n      return fontSizeToUse.getValue(this._host);\n    }\n    return fontSizeToUse.getValueInPixel(this._host, this._tempParentMeasure.height || this._cachedParentMeasure.height);\n  }\n  set fontSizeInPixels(value) {\n    if (isNaN(value)) {\n      return;\n    }\n    this.fontSize = value + \"px\";\n  }\n  /** Gets or sets font size */\n  get fontSize() {\n    return this._fontSize.toString(this._host);\n  }\n  set fontSize(value) {\n    if (this._fontSize.toString(this._host) === value) {\n      return;\n    }\n    if (this._fontSize.fromString(value)) {\n      this._markAsDirty();\n      this._resetFontCache();\n    }\n  }\n  /** Gets or sets foreground color */\n  get color() {\n    return this._color;\n  }\n  set color(value) {\n    if (this._color === value) {\n      return;\n    }\n    this._color = value;\n    this._markAsDirty();\n  }\n  /** Gets or sets gradient. Setting a gradient will override the color */\n  get gradient() {\n    return this._gradient;\n  }\n  set gradient(value) {\n    if (this._gradient === value) {\n      return;\n    }\n    this._gradient = value;\n    this._markAsDirty();\n  }\n  /** Gets or sets z index which is used to reorder controls on the z axis */\n  get zIndex() {\n    return this._zIndex;\n  }\n  set zIndex(value) {\n    if (this.zIndex === value) {\n      return;\n    }\n    this._zIndex = value;\n    if (this.parent) {\n      this.parent._reOrderControl(this);\n    }\n  }\n  /** Gets or sets a boolean indicating if the control can be rendered */\n  get notRenderable() {\n    return this._doNotRender;\n  }\n  set notRenderable(value) {\n    if (this._doNotRender === value) {\n      return;\n    }\n    this._doNotRender = value;\n    this._markAsDirty();\n  }\n  /** Gets or sets a boolean indicating if the control is visible */\n  get isVisible() {\n    return this._isVisible;\n  }\n  set isVisible(value) {\n    if (this._isVisible === value) {\n      return;\n    }\n    this._isVisible = value;\n    this._markAsDirty(true);\n    this.onIsVisibleChangedObservable.notifyObservers(value);\n  }\n  /** Gets a boolean indicating that the control needs to update its rendering */\n  get isDirty() {\n    return this._isDirty;\n  }\n  /**\n   * Gets the current linked mesh (or null if none)\n   */\n  get linkedMesh() {\n    return this._linkedMesh;\n  }\n  /**\n   * Gets or sets a value indicating the padding should work like in CSS.\n   * Basically, it will add the padding amount on each side of the parent control for its children.\n   */\n  get descendantsOnlyPadding() {\n    return this._descendantsOnlyPadding;\n  }\n  set descendantsOnlyPadding(value) {\n    if (this._descendantsOnlyPadding === value) {\n      return;\n    }\n    this._descendantsOnlyPadding = value;\n    this._markAsDirty();\n  }\n  /**\n   * Gets or sets a value indicating the padding to use on the left of the control\n   * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#position-and-size\n   */\n  get paddingLeft() {\n    return this._paddingLeft.toString(this._host);\n  }\n  set paddingLeft(value) {\n    if (this._paddingLeft.fromString(value)) {\n      this._markAsDirty();\n    }\n  }\n  /**\n   * Gets or sets a value indicating the padding in pixels to use on the left of the control\n   * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#position-and-size\n   */\n  get paddingLeftInPixels() {\n    return this._paddingLeft.getValueInPixel(this._host, this._cachedParentMeasure.width);\n  }\n  set paddingLeftInPixels(value) {\n    if (isNaN(value)) {\n      return;\n    }\n    this.paddingLeft = value + \"px\";\n  }\n  /** @internal */\n  get _paddingLeftInPixels() {\n    if (this._descendantsOnlyPadding) {\n      return 0;\n    }\n    return this.paddingLeftInPixels;\n  }\n  /**\n   * Gets or sets a value indicating the padding to use on the right of the control\n   * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#position-and-size\n   */\n  get paddingRight() {\n    return this._paddingRight.toString(this._host);\n  }\n  set paddingRight(value) {\n    if (this._paddingRight.fromString(value)) {\n      this._markAsDirty();\n    }\n  }\n  /**\n   * Gets or sets a value indicating the padding in pixels to use on the right of the control\n   * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#position-and-size\n   */\n  get paddingRightInPixels() {\n    return this._paddingRight.getValueInPixel(this._host, this._cachedParentMeasure.width);\n  }\n  set paddingRightInPixels(value) {\n    if (isNaN(value)) {\n      return;\n    }\n    this.paddingRight = value + \"px\";\n  }\n  /** @internal */\n  get _paddingRightInPixels() {\n    if (this._descendantsOnlyPadding) {\n      return 0;\n    }\n    return this.paddingRightInPixels;\n  }\n  /**\n   * Gets or sets a value indicating the padding to use on the top of the control\n   * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#position-and-size\n   */\n  get paddingTop() {\n    return this._paddingTop.toString(this._host);\n  }\n  set paddingTop(value) {\n    if (this._paddingTop.fromString(value)) {\n      this._markAsDirty();\n    }\n  }\n  /**\n   * Gets or sets a value indicating the padding in pixels to use on the top of the control\n   * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#position-and-size\n   */\n  get paddingTopInPixels() {\n    return this._paddingTop.getValueInPixel(this._host, this._cachedParentMeasure.height);\n  }\n  set paddingTopInPixels(value) {\n    if (isNaN(value)) {\n      return;\n    }\n    this.paddingTop = value + \"px\";\n  }\n  /** @internal */\n  get _paddingTopInPixels() {\n    if (this._descendantsOnlyPadding) {\n      return 0;\n    }\n    return this.paddingTopInPixels;\n  }\n  /**\n   * Gets or sets a value indicating the padding to use on the bottom of the control\n   * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#position-and-size\n   */\n  get paddingBottom() {\n    return this._paddingBottom.toString(this._host);\n  }\n  set paddingBottom(value) {\n    if (this._paddingBottom.fromString(value)) {\n      this._markAsDirty();\n    }\n  }\n  /**\n   * Gets or sets a value indicating the padding in pixels to use on the bottom of the control\n   * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#position-and-size\n   */\n  get paddingBottomInPixels() {\n    return this._paddingBottom.getValueInPixel(this._host, this._cachedParentMeasure.height);\n  }\n  set paddingBottomInPixels(value) {\n    if (isNaN(value)) {\n      return;\n    }\n    this.paddingBottom = value + \"px\";\n  }\n  /** @internal */\n  get _paddingBottomInPixels() {\n    if (this._descendantsOnlyPadding) {\n      return 0;\n    }\n    return this.paddingBottomInPixels;\n  }\n  /**\n   * Gets or sets a value indicating the left coordinate of the control\n   * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#position-and-size\n   */\n  get left() {\n    return this._left.toString(this._host);\n  }\n  set left(value) {\n    if (this._left.fromString(value)) {\n      this._markAsDirty();\n    }\n  }\n  /**\n   * Gets or sets a value indicating the left coordinate in pixels of the control\n   * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#position-and-size\n   */\n  get leftInPixels() {\n    return this._left.getValueInPixel(this._host, this._cachedParentMeasure.width);\n  }\n  set leftInPixels(value) {\n    if (isNaN(value)) {\n      return;\n    }\n    this.left = value + \"px\";\n  }\n  /**\n   * Gets or sets a value indicating the top coordinate of the control\n   * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#position-and-size\n   */\n  get top() {\n    return this._top.toString(this._host);\n  }\n  set top(value) {\n    if (this._top.fromString(value)) {\n      this._markAsDirty();\n    }\n  }\n  /**\n   * Gets or sets a value indicating the top coordinate in pixels of the control\n   * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#position-and-size\n   */\n  get topInPixels() {\n    return this._top.getValueInPixel(this._host, this._cachedParentMeasure.height);\n  }\n  set topInPixels(value) {\n    if (isNaN(value)) {\n      return;\n    }\n    this.top = value + \"px\";\n  }\n  /**\n   * Gets or sets a value indicating the offset on X axis to the linked mesh\n   * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#tracking-positions\n   */\n  get linkOffsetX() {\n    return this._linkOffsetX.toString(this._host);\n  }\n  set linkOffsetX(value) {\n    if (this._linkOffsetX.fromString(value)) {\n      this._markAsDirty();\n    }\n  }\n  /**\n   * Gets or sets a value indicating the offset in pixels on X axis to the linked mesh\n   * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#tracking-positions\n   */\n  get linkOffsetXInPixels() {\n    return this._linkOffsetX.getValueInPixel(this._host, this._cachedParentMeasure.width);\n  }\n  set linkOffsetXInPixels(value) {\n    if (isNaN(value)) {\n      return;\n    }\n    this.linkOffsetX = value + \"px\";\n  }\n  /**\n   * Gets or sets a value indicating the offset on Y axis to the linked mesh\n   * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#tracking-positions\n   */\n  get linkOffsetY() {\n    return this._linkOffsetY.toString(this._host);\n  }\n  set linkOffsetY(value) {\n    if (this._linkOffsetY.fromString(value)) {\n      this._markAsDirty();\n    }\n  }\n  /**\n   * Gets or sets a value indicating the offset in pixels on Y axis to the linked mesh\n   * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#tracking-positions\n   */\n  get linkOffsetYInPixels() {\n    return this._linkOffsetY.getValueInPixel(this._host, this._cachedParentMeasure.height);\n  }\n  set linkOffsetYInPixels(value) {\n    if (isNaN(value)) {\n      return;\n    }\n    this.linkOffsetY = value + \"px\";\n  }\n  /** Gets the center coordinate on X axis */\n  get centerX() {\n    return this._currentMeasure.left + this._currentMeasure.width / 2;\n  }\n  /** Gets the center coordinate on Y axis */\n  get centerY() {\n    return this._currentMeasure.top + this._currentMeasure.height / 2;\n  }\n  /** Gets or sets if control is Enabled */\n  get isEnabled() {\n    return this._isEnabled;\n  }\n  set isEnabled(value) {\n    if (this._isEnabled === value) {\n      return;\n    }\n    this._isEnabled = value;\n    this._markAsDirty();\n    // if this control or any of it's descendants are under a pointer, we need to fire a pointerOut event\n    const recursivelyFirePointerOut = control => {\n      if (!control.host) {\n        return;\n      }\n      for (const pointer in control.host._lastControlOver) {\n        if (control === this.host._lastControlOver[pointer]) {\n          control._onPointerOut(control, null, true);\n          delete control.host._lastControlOver[pointer];\n        }\n      }\n      if (control.children !== undefined) {\n        control.children.forEach(recursivelyFirePointerOut);\n      }\n    };\n    recursivelyFirePointerOut(this);\n    this.onEnabledStateChangedObservable.notifyObservers(value);\n  }\n  /** Gets or sets background color of control if it's disabled. Only applies to Button class. */\n  get disabledColor() {\n    return this._disabledColor;\n  }\n  set disabledColor(value) {\n    if (this._disabledColor === value) {\n      return;\n    }\n    this._disabledColor = value;\n    this._markAsDirty();\n  }\n  /** Gets or sets front color of control if it's disabled. Only applies to Checkbox class. */\n  get disabledColorItem() {\n    return this._disabledColorItem;\n  }\n  set disabledColorItem(value) {\n    if (this._disabledColorItem === value) {\n      return;\n    }\n    this._disabledColorItem = value;\n    this._markAsDirty();\n  }\n  // Functions\n  /**\n   * Creates a new control\n   * @param name defines the name of the control\n   */\n  constructor( /** defines the name of the control */\n  name) {\n    this.name = name;\n    this._alpha = 1;\n    this._alphaSet = false;\n    this._zIndex = 0;\n    /** @internal */\n    this._currentMeasure = Measure.Empty();\n    /** @internal */\n    this._tempPaddingMeasure = Measure.Empty();\n    this._fontFamily = \"\";\n    this._fontStyle = \"\";\n    this._fontWeight = \"\";\n    this._fontSize = new ValueAndUnit(18, ValueAndUnit.UNITMODE_PIXEL, false);\n    /** @internal */\n    this._width = new ValueAndUnit(1, ValueAndUnit.UNITMODE_PERCENTAGE, false);\n    /** @internal */\n    this._height = new ValueAndUnit(1, ValueAndUnit.UNITMODE_PERCENTAGE, false);\n    this._color = \"\";\n    this._style = null;\n    /** @internal */\n    this._horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_CENTER;\n    /** @internal */\n    this._verticalAlignment = Control.VERTICAL_ALIGNMENT_CENTER;\n    /** @internal */\n    this._isDirty = true;\n    /** @internal */\n    this._wasDirty = false;\n    /** @internal */\n    this._tempParentMeasure = Measure.Empty();\n    /** @internal */\n    this._prevCurrentMeasureTransformedIntoGlobalSpace = Measure.Empty();\n    /** @internal */\n    this._cachedParentMeasure = Measure.Empty();\n    this._descendantsOnlyPadding = false;\n    this._paddingLeft = new ValueAndUnit(0);\n    this._paddingRight = new ValueAndUnit(0);\n    this._paddingTop = new ValueAndUnit(0);\n    this._paddingBottom = new ValueAndUnit(0);\n    /** @internal */\n    this._left = new ValueAndUnit(0);\n    /** @internal */\n    this._top = new ValueAndUnit(0);\n    this._scaleX = 1.0;\n    this._scaleY = 1.0;\n    this._rotation = 0;\n    this._transformCenterX = 0.5;\n    this._transformCenterY = 0.5;\n    /** @internal */\n    this._transformMatrix = Matrix2D.Identity();\n    /** @internal */\n    this._invertTransformMatrix = Matrix2D.Identity();\n    /** @internal */\n    this._transformedPosition = Vector2.Zero();\n    this._isMatrixDirty = true;\n    this._isVisible = true;\n    this._isHighlighted = false;\n    this._highlightColor = \"#4affff\";\n    this._highlightLineWidth = 2;\n    this._fontSet = false;\n    this._dummyVector2 = Vector2.Zero();\n    this._downCount = 0;\n    this._enterCount = -1;\n    this._doNotRender = false;\n    this._downPointerIds = {};\n    this._evaluatedMeasure = new Measure(0, 0, 0, 0);\n    this._evaluatedParentMeasure = new Measure(0, 0, 0, 0);\n    this._isEnabled = true;\n    this._disabledColor = \"#9a9a9a\";\n    this._disabledColorItem = \"#6a6a6a\";\n    this._isReadOnly = false;\n    this._gradient = null;\n    /** @internal */\n    this._rebuildLayout = false;\n    /**\n     * Observable that fires when the control's enabled state changes\n     */\n    this.onEnabledStateChangedObservable = new Observable();\n    /** @internal */\n    this._customData = {};\n    /** @internal */\n    this._isClipped = false;\n    /** @internal */\n    this._automaticSize = false;\n    /**\n     * Gets or sets an object used to store user defined information for the node\n     */\n    this.metadata = null;\n    /** Gets or sets a boolean indicating if the control can be hit with pointer events */\n    this.isHitTestVisible = true;\n    /** Gets or sets a boolean indicating if the control can block pointer events. False by default except on the following controls:\n     * * Button controls (Button, RadioButton, ToggleButton)\n     * * Checkbox\n     * * ColorPicker\n     * * InputText\n     * * Slider\n     */\n    this.isPointerBlocker = false;\n    /** Gets or sets a boolean indicating if the control can be focusable */\n    this.isFocusInvisible = false;\n    this._clipChildren = true;\n    this._clipContent = true;\n    /**\n     * Gets or sets a boolean indicating that the current control should cache its rendering (useful when the control does not change often)\n     */\n    this.useBitmapCache = false;\n    this._shadowOffsetX = 0;\n    this._shadowOffsetY = 0;\n    this._shadowBlur = 0;\n    this._previousShadowBlur = 0;\n    this._shadowColor = \"black\";\n    /** Gets or sets the cursor to use when the control is hovered */\n    this.hoverCursor = \"\";\n    /** @internal */\n    this._linkOffsetX = new ValueAndUnit(0);\n    /** @internal */\n    this._linkOffsetY = new ValueAndUnit(0);\n    this._accessibilityTag = null;\n    this.onAccessibilityTagChangedObservable = new Observable();\n    /**\n     * An event triggered when pointer wheel is scrolled\n     */\n    this.onWheelObservable = new Observable();\n    /**\n     * An event triggered when the pointer moves over the control.\n     */\n    this.onPointerMoveObservable = new Observable();\n    /**\n     * An event triggered when the pointer moves out of the control.\n     */\n    this.onPointerOutObservable = new Observable();\n    /**\n     * An event triggered when the pointer taps the control\n     */\n    this.onPointerDownObservable = new Observable();\n    /**\n     * An event triggered when pointer up\n     */\n    this.onPointerUpObservable = new Observable();\n    /**\n     * An event triggered when a control is clicked on\n     */\n    this.onPointerClickObservable = new Observable();\n    /**\n     * An event triggered when pointer enters the control\n     */\n    this.onPointerEnterObservable = new Observable();\n    /**\n     * An event triggered when the control is marked as dirty\n     */\n    this.onDirtyObservable = new Observable();\n    /**\n     * An event triggered before drawing the control\n     */\n    this.onBeforeDrawObservable = new Observable();\n    /**\n     * An event triggered after the control was drawn\n     */\n    this.onAfterDrawObservable = new Observable();\n    /**\n     * An event triggered when the control has been disposed\n     */\n    this.onDisposeObservable = new Observable();\n    /**\n     * An event triggered when the control isVisible is changed\n     */\n    this.onIsVisibleChangedObservable = new Observable();\n    this._fixedRatio = 0;\n    this._fixedRatioMasterIsWidth = true;\n    /**\n     * Array of animations\n     */\n    this.animations = null;\n    this._tmpMeasureA = new Measure(0, 0, 0, 0);\n  }\n  /** @internal */\n  _getTypeName() {\n    return \"Control\";\n  }\n  /**\n   * Gets the first ascendant in the hierarchy of the given type\n   * @param className defines the required type\n   * @returns the ascendant or null if not found\n   */\n  getAscendantOfClass(className) {\n    if (!this.parent) {\n      return null;\n    }\n    if (this.parent.getClassName() === className) {\n      return this.parent;\n    }\n    return this.parent.getAscendantOfClass(className);\n  }\n  /**\n   * Mark control element as dirty\n   * @param force force non visible elements to be marked too\n   */\n  markAsDirty(force = false) {\n    this._markAsDirty(force);\n  }\n  /**\n   * Mark the element and its children as dirty\n   */\n  markAllAsDirty() {\n    this._markAllAsDirty();\n  }\n  /** @internal */\n  _resetFontCache() {\n    this._fontSet = true;\n    this._markAsDirty();\n  }\n  /**\n   * Determines if a container is an ascendant of the current control\n   * @param container defines the container to look for\n   * @returns true if the container is one of the ascendant of the control\n   */\n  isAscendant(container) {\n    if (!this.parent) {\n      return false;\n    }\n    if (this.parent === container) {\n      return true;\n    }\n    return this.parent.isAscendant(container);\n  }\n  /**\n   * Gets coordinates in local control space\n   * @param globalCoordinates defines the coordinates to transform\n   * @returns the new coordinates in local space\n   */\n  getLocalCoordinates(globalCoordinates) {\n    const result = Vector2.Zero();\n    this.getLocalCoordinatesToRef(globalCoordinates, result);\n    return result;\n  }\n  /**\n   * Gets coordinates in local control space\n   * @param globalCoordinates defines the coordinates to transform\n   * @param result defines the target vector2 where to store the result\n   * @returns the current control\n   */\n  getLocalCoordinatesToRef(globalCoordinates, result) {\n    result.x = globalCoordinates.x - this._currentMeasure.left;\n    result.y = globalCoordinates.y - this._currentMeasure.top;\n    return this;\n  }\n  /**\n   * Gets coordinates in parent local control space\n   * @param globalCoordinates defines the coordinates to transform\n   * @returns the new coordinates in parent local space\n   */\n  getParentLocalCoordinates(globalCoordinates) {\n    const result = Vector2.Zero();\n    result.x = globalCoordinates.x - this._cachedParentMeasure.left;\n    result.y = globalCoordinates.y - this._cachedParentMeasure.top;\n    return result;\n  }\n  /**\n   * Move the current control to a vector3 position projected onto the screen.\n   * @param position defines the target position\n   * @param scene defines the hosting scene\n   */\n  moveToVector3(position, scene) {\n    if (!this._host || this.parent !== this._host._rootContainer) {\n      Tools.Error(\"Cannot move a control to a vector3 if the control is not at root level\");\n      return;\n    }\n    this.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\n    this.verticalAlignment = Control.VERTICAL_ALIGNMENT_TOP;\n    const globalViewport = this._host._getGlobalViewport();\n    const projectedPosition = Vector3.Project(position, Matrix.IdentityReadOnly, scene.getTransformMatrix(), globalViewport);\n    this._moveToProjectedPosition(projectedPosition);\n    if (projectedPosition.z < 0 || projectedPosition.z > 1) {\n      this.notRenderable = true;\n      return;\n    }\n    this.notRenderable = false;\n  }\n  /**\n   * Will store all controls that have this control as ascendant in a given array\n   * @param results defines the array where to store the descendants\n   * @param directDescendantsOnly defines if true only direct descendants of 'this' will be considered, if false direct and also indirect (children of children, an so on in a recursive manner) descendants of 'this' will be considered\n   * @param predicate defines an optional predicate that will be called on every evaluated child, the predicate must return true for a given child to be part of the result, otherwise it will be ignored\n   */\n  getDescendantsToRef(results, directDescendantsOnly = false, predicate) {\n    // Do nothing by default\n  }\n  /**\n   * Will return all controls that have this control as ascendant\n   * @param directDescendantsOnly defines if true only direct descendants of 'this' will be considered, if false direct and also indirect (children of children, an so on in a recursive manner) descendants of 'this' will be considered\n   * @param predicate defines an optional predicate that will be called on every evaluated child, the predicate must return true for a given child to be part of the result, otherwise it will be ignored\n   * @returns all child controls\n   */\n  getDescendants(directDescendantsOnly, predicate) {\n    const results = new Array();\n    this.getDescendantsToRef(results, directDescendantsOnly, predicate);\n    return results;\n  }\n  /**\n   * Link current control with a target mesh\n   * @param mesh defines the mesh to link with\n   * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#tracking-positions\n   */\n  linkWithMesh(mesh) {\n    if (!this._host || this.parent && this.parent !== this._host._rootContainer) {\n      if (mesh) {\n        Tools.Error(\"Cannot link a control to a mesh if the control is not at root level\");\n      }\n      return;\n    }\n    const index = this._host._linkedControls.indexOf(this);\n    if (index !== -1) {\n      this._linkedMesh = mesh;\n      if (!mesh) {\n        this._host._linkedControls.splice(index, 1);\n      }\n      return;\n    } else if (!mesh) {\n      return;\n    }\n    this.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\n    this.verticalAlignment = Control.VERTICAL_ALIGNMENT_TOP;\n    this._linkedMesh = mesh;\n    this._host._linkedControls.push(this);\n  }\n  /**\n   * Shorthand function to set the top, right, bottom, and left padding values on the control.\n   * @param { string | number} paddingTop - The value of the top padding.\n   * @param { string | number} paddingRight - The value of the right padding. If omitted, top is used.\n   * @param { string | number} paddingBottom - The value of the bottom padding. If omitted, top is used.\n   * @param { string | number} paddingLeft - The value of the left padding. If omitted, right is used.\n   * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#position-and-size\n   */\n  setPadding(paddingTop, paddingRight, paddingBottom, paddingLeft) {\n    const top = paddingTop;\n    const right = paddingRight !== null && paddingRight !== void 0 ? paddingRight : top;\n    const bottom = paddingBottom !== null && paddingBottom !== void 0 ? paddingBottom : top;\n    const left = paddingLeft !== null && paddingLeft !== void 0 ? paddingLeft : right;\n    this.paddingTop = top;\n    this.paddingRight = right;\n    this.paddingBottom = bottom;\n    this.paddingLeft = left;\n  }\n  /**\n   * Shorthand funtion to set the top, right, bottom, and left padding values in pixels on the control.\n   * @param { number} paddingTop - The value in pixels of the top padding.\n   * @param { number} paddingRight - The value in pixels of the right padding. If omitted, top is used.\n   * @param { number} paddingBottom - The value in pixels of the bottom padding. If omitted, top is used.\n   * @param { number} paddingLeft - The value in pixels of the left padding. If omitted, right is used.\n   * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#position-and-size\n   */\n  setPaddingInPixels(paddingTop, paddingRight, paddingBottom, paddingLeft) {\n    const top = paddingTop;\n    const right = paddingRight !== null && paddingRight !== void 0 ? paddingRight : top;\n    const bottom = paddingBottom !== null && paddingBottom !== void 0 ? paddingBottom : top;\n    const left = paddingLeft !== null && paddingLeft !== void 0 ? paddingLeft : right;\n    this.paddingTopInPixels = top;\n    this.paddingRightInPixels = right;\n    this.paddingBottomInPixels = bottom;\n    this.paddingLeftInPixels = left;\n  }\n  /**\n   * @internal\n   */\n  _moveToProjectedPosition(projectedPosition) {\n    var _a;\n    const oldLeft = this._left.getValue(this._host);\n    const oldTop = this._top.getValue(this._host);\n    const parentMeasure = (_a = this.parent) === null || _a === void 0 ? void 0 : _a._currentMeasure;\n    if (parentMeasure) {\n      this._processMeasures(parentMeasure, this._host.getContext());\n    }\n    let newLeft = projectedPosition.x + this._linkOffsetX.getValue(this._host) - this._currentMeasure.width / 2;\n    let newTop = projectedPosition.y + this._linkOffsetY.getValue(this._host) - this._currentMeasure.height / 2;\n    const leftAndTopIgnoreAdaptiveScaling = this._left.ignoreAdaptiveScaling && this._top.ignoreAdaptiveScaling;\n    if (leftAndTopIgnoreAdaptiveScaling) {\n      if (Math.abs(newLeft - oldLeft) < 0.5) {\n        newLeft = oldLeft;\n      }\n      if (Math.abs(newTop - oldTop) < 0.5) {\n        newTop = oldTop;\n      }\n    }\n    if (!leftAndTopIgnoreAdaptiveScaling && oldLeft === newLeft && oldTop === newTop) {\n      return;\n    }\n    this.left = newLeft + \"px\";\n    this.top = newTop + \"px\";\n    this._left.ignoreAdaptiveScaling = true;\n    this._top.ignoreAdaptiveScaling = true;\n    this._markAsDirty();\n  }\n  /**\n   * @internal\n   */\n  _offsetLeft(offset) {\n    this._isDirty = true;\n    this._currentMeasure.left += offset;\n  }\n  /**\n   * @internal\n   */\n  _offsetTop(offset) {\n    this._isDirty = true;\n    this._currentMeasure.top += offset;\n  }\n  /** @internal */\n  _markMatrixAsDirty() {\n    this._isMatrixDirty = true;\n    this._flagDescendantsAsMatrixDirty();\n  }\n  /** @internal */\n  _flagDescendantsAsMatrixDirty() {\n    // No child\n  }\n  /**\n   * @internal\n   */\n  _intersectsRect(rect, context) {\n    // make sure we are transformed correctly before checking intersections. no-op if nothing is dirty.\n    this._transform(context);\n    if (this._evaluatedMeasure.left >= rect.left + rect.width) {\n      return false;\n    }\n    if (this._evaluatedMeasure.top >= rect.top + rect.height) {\n      return false;\n    }\n    if (this._evaluatedMeasure.left + this._evaluatedMeasure.width <= rect.left) {\n      return false;\n    }\n    if (this._evaluatedMeasure.top + this._evaluatedMeasure.height <= rect.top) {\n      return false;\n    }\n    return true;\n  }\n  /** @internal */\n  _computeAdditionalOffsetX() {\n    return 0;\n  }\n  /** @internal */\n  _computeAdditionalOffsetY() {\n    return 0;\n  }\n  /** @internal */\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  invalidateRect() {\n    this._transform();\n    if (this.host && this.host.useInvalidateRectOptimization) {\n      // Rotate by transform to get the measure transformed to global space\n      this._currentMeasure.transformToRef(this._transformMatrix, this._tmpMeasureA);\n      // get the boudning box of the current measure and last frames measure in global space and invalidate it\n      // the previous measure is used to properly clear a control that is scaled down\n      Measure.CombineToRef(this._tmpMeasureA, this._prevCurrentMeasureTransformedIntoGlobalSpace, this._tmpMeasureA);\n      // Expand rect based on shadows\n      const shadowOffsetX = this.shadowOffsetX;\n      const shadowOffsetY = this.shadowOffsetY;\n      const shadowBlur = Math.max(this._previousShadowBlur, this.shadowBlur);\n      const leftShadowOffset = Math.min(Math.min(shadowOffsetX, 0) - shadowBlur * 2, 0);\n      const rightShadowOffset = Math.max(Math.max(shadowOffsetX, 0) + shadowBlur * 2, 0);\n      const topShadowOffset = Math.min(Math.min(shadowOffsetY, 0) - shadowBlur * 2, 0);\n      const bottomShadowOffset = Math.max(Math.max(shadowOffsetY, 0) + shadowBlur * 2, 0);\n      const offsetX = this._computeAdditionalOffsetX();\n      const offsetY = this._computeAdditionalOffsetY();\n      this.host.invalidateRect(Math.floor(this._tmpMeasureA.left + leftShadowOffset - offsetX), Math.floor(this._tmpMeasureA.top + topShadowOffset - offsetY), Math.ceil(this._tmpMeasureA.left + this._tmpMeasureA.width + rightShadowOffset + offsetX), Math.ceil(this._tmpMeasureA.top + this._tmpMeasureA.height + bottomShadowOffset + offsetY));\n    }\n  }\n  /**\n   * @internal\n   */\n  _markAsDirty(force = false) {\n    if (!this._isVisible && !force) {\n      return;\n    }\n    this._isDirty = true;\n    this._markMatrixAsDirty();\n    // Redraw only this rectangle\n    if (this._host) {\n      this._host.markAsDirty();\n    }\n  }\n  /** @internal */\n  _markAllAsDirty() {\n    this._markAsDirty();\n    if (this._font) {\n      this._prepareFont();\n    }\n  }\n  /**\n   * @internal\n   */\n  _link(host) {\n    this._host = host;\n    if (this._host) {\n      this.uniqueId = this._host.getScene().getUniqueId();\n    }\n  }\n  /**\n   * @internal\n   */\n  _transform(context) {\n    if (!this._isMatrixDirty && this._scaleX === 1 && this._scaleY === 1 && this._rotation === 0) {\n      return;\n    }\n    // postTranslate\n    const offsetX = this._currentMeasure.width * this._transformCenterX + this._currentMeasure.left;\n    const offsetY = this._currentMeasure.height * this._transformCenterY + this._currentMeasure.top;\n    if (context) {\n      context.translate(offsetX, offsetY);\n      // rotate\n      context.rotate(this._rotation);\n      // scale\n      context.scale(this._scaleX, this._scaleY);\n      // preTranslate\n      context.translate(-offsetX, -offsetY);\n    }\n    // Need to update matrices?\n    if (this._isMatrixDirty || this._cachedOffsetX !== offsetX || this._cachedOffsetY !== offsetY) {\n      this._cachedOffsetX = offsetX;\n      this._cachedOffsetY = offsetY;\n      this._isMatrixDirty = false;\n      this._flagDescendantsAsMatrixDirty();\n      Matrix2D.ComposeToRef(-offsetX, -offsetY, this._rotation, this._scaleX, this._scaleY, this.parent ? this.parent._transformMatrix : null, this._transformMatrix);\n      this._transformMatrix.invertToRef(this._invertTransformMatrix);\n      this._currentMeasure.transformToRef(this._transformMatrix, this._evaluatedMeasure);\n    }\n  }\n  /**\n   * @internal\n   */\n  _renderHighlight(context) {\n    if (!this.isHighlighted) {\n      return;\n    }\n    context.save();\n    context.strokeStyle = this._highlightColor;\n    context.lineWidth = this._highlightLineWidth;\n    this._renderHighlightSpecific(context);\n    context.restore();\n  }\n  /**\n   * @internal\n   */\n  _renderHighlightSpecific(context) {\n    context.strokeRect(this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);\n  }\n  _getColor(context) {\n    return this.gradient ? this.gradient.getCanvasGradient(context) : this.color;\n  }\n  /**\n   * @internal\n   */\n  _applyStates(context) {\n    if (this._isFontSizeInPercentage) {\n      this._fontSet = true;\n    }\n    if (this._host && this._host.useSmallestIdeal && !this._font) {\n      this._fontSet = true;\n    }\n    if (this._fontSet) {\n      this._prepareFont();\n      this._fontSet = false;\n    }\n    if (this._font) {\n      context.font = this._font;\n    }\n    if (this._color || this.gradient) {\n      context.fillStyle = this._getColor(context);\n    }\n    if (Control.AllowAlphaInheritance) {\n      context.globalAlpha *= this._alpha;\n    } else if (this._alphaSet) {\n      context.globalAlpha = this.parent && !this.parent.renderToIntermediateTexture ? this.parent.alpha * this._alpha : this._alpha;\n    }\n  }\n  /**\n   * @internal\n   */\n  _layout(parentMeasure, context) {\n    if (!this.isDirty && (!this.isVisible || this.notRenderable)) {\n      return false;\n    }\n    if (this._isDirty || !this._cachedParentMeasure.isEqualsTo(parentMeasure)) {\n      this.host._numLayoutCalls++;\n      this._currentMeasure.addAndTransformToRef(this._transformMatrix, -this._paddingLeftInPixels | 0, -this._paddingTopInPixels | 0, this._paddingRightInPixels | 0, this._paddingBottomInPixels | 0, this._prevCurrentMeasureTransformedIntoGlobalSpace);\n      context.save();\n      this._applyStates(context);\n      let rebuildCount = 0;\n      do {\n        this._rebuildLayout = false;\n        this._processMeasures(parentMeasure, context);\n        rebuildCount++;\n      } while (this._rebuildLayout && rebuildCount < 3);\n      if (rebuildCount >= 3) {\n        Logger.Error(`Layout cycle detected in GUI (Control name=${this.name}, uniqueId=${this.uniqueId})`);\n      }\n      context.restore();\n      this.invalidateRect();\n      this._evaluateClippingState(parentMeasure);\n    }\n    this._wasDirty = this._isDirty;\n    this._isDirty = false;\n    return true;\n  }\n  /**\n   * @internal\n   */\n  _processMeasures(parentMeasure, context) {\n    this._tempPaddingMeasure.copyFrom(parentMeasure);\n    // Apply padding if in correct mode\n    if (this.parent && this.parent.descendantsOnlyPadding) {\n      this._tempPaddingMeasure.left += this.parent.paddingLeftInPixels;\n      this._tempPaddingMeasure.top += this.parent.paddingTopInPixels;\n      this._tempPaddingMeasure.width -= this.parent.paddingLeftInPixels + this.parent.paddingRightInPixels;\n      this._tempPaddingMeasure.height -= this.parent.paddingTopInPixels + this.parent.paddingBottomInPixels;\n    }\n    this._currentMeasure.copyFrom(this._tempPaddingMeasure);\n    // Let children take some pre-measurement actions\n    this._preMeasure(this._tempPaddingMeasure, context);\n    this._measure();\n    // Let children take some post-measurement actions\n    this._postMeasure(this._tempPaddingMeasure, context);\n    this._computeAlignment(this._tempPaddingMeasure, context);\n    // Convert to int values\n    this._currentMeasure.left = this._currentMeasure.left | 0;\n    this._currentMeasure.top = this._currentMeasure.top | 0;\n    this._currentMeasure.width = this._currentMeasure.width | 0;\n    this._currentMeasure.height = this._currentMeasure.height | 0;\n    // Let children add more features\n    this._additionalProcessing(this._tempPaddingMeasure, context);\n    this._cachedParentMeasure.copyFrom(this._tempPaddingMeasure);\n    this._currentMeasure.transformToRef(this._transformMatrix, this._evaluatedMeasure);\n    if (this.onDirtyObservable.hasObservers()) {\n      this.onDirtyObservable.notifyObservers(this);\n    }\n  }\n  _evaluateClippingState(parentMeasure) {\n    // Since transformMatrix is used here, we need to have it freshly computed\n    this._transform();\n    this._currentMeasure.transformToRef(this._transformMatrix, this._evaluatedMeasure);\n    if (this.parent && this.parent.clipChildren) {\n      parentMeasure.transformToRef(this.parent._transformMatrix, this._evaluatedParentMeasure);\n      // Early clip\n      if (this._evaluatedMeasure.left > this._evaluatedParentMeasure.left + this._evaluatedParentMeasure.width) {\n        this._isClipped = true;\n        return;\n      }\n      if (this._evaluatedMeasure.left + this._evaluatedMeasure.width < this._evaluatedParentMeasure.left) {\n        this._isClipped = true;\n        return;\n      }\n      if (this._evaluatedMeasure.top > this._evaluatedParentMeasure.top + this._evaluatedParentMeasure.height) {\n        this._isClipped = true;\n        return;\n      }\n      if (this._evaluatedMeasure.top + this._evaluatedMeasure.height < this._evaluatedParentMeasure.top) {\n        this._isClipped = true;\n        return;\n      }\n    }\n    this._isClipped = false;\n  }\n  /** @internal */\n  _measure() {\n    // Width / Height\n    if (this._width.isPixel) {\n      this._currentMeasure.width = this._width.getValue(this._host);\n    } else {\n      this._currentMeasure.width *= this._width.getValue(this._host);\n    }\n    if (this._height.isPixel) {\n      this._currentMeasure.height = this._height.getValue(this._host);\n    } else {\n      this._currentMeasure.height *= this._height.getValue(this._host);\n    }\n    if (this._fixedRatio !== 0) {\n      if (this._fixedRatioMasterIsWidth) {\n        this._currentMeasure.height = this._currentMeasure.width * this._fixedRatio;\n      } else {\n        this._currentMeasure.width = this._currentMeasure.height * this._fixedRatio;\n      }\n    }\n  }\n  /**\n   * @internal\n   */\n  _computeAlignment(parentMeasure, context) {\n    const width = this._currentMeasure.width;\n    const height = this._currentMeasure.height;\n    const parentWidth = parentMeasure.width;\n    const parentHeight = parentMeasure.height;\n    // Left / top\n    let x = 0;\n    let y = 0;\n    switch (this.horizontalAlignment) {\n      case Control.HORIZONTAL_ALIGNMENT_LEFT:\n        x = 0;\n        break;\n      case Control.HORIZONTAL_ALIGNMENT_RIGHT:\n        x = parentWidth - width;\n        break;\n      case Control.HORIZONTAL_ALIGNMENT_CENTER:\n        x = (parentWidth - width) / 2;\n        break;\n    }\n    switch (this.verticalAlignment) {\n      case Control.VERTICAL_ALIGNMENT_TOP:\n        y = 0;\n        break;\n      case Control.VERTICAL_ALIGNMENT_BOTTOM:\n        y = parentHeight - height;\n        break;\n      case Control.VERTICAL_ALIGNMENT_CENTER:\n        y = (parentHeight - height) / 2;\n        break;\n    }\n    if (!this.descendantsOnlyPadding) {\n      if (this._paddingLeft.isPixel) {\n        this._currentMeasure.left += this._paddingLeft.getValue(this._host);\n        this._currentMeasure.width -= this._paddingLeft.getValue(this._host);\n      } else {\n        this._currentMeasure.left += parentWidth * this._paddingLeft.getValue(this._host);\n        this._currentMeasure.width -= parentWidth * this._paddingLeft.getValue(this._host);\n      }\n      if (this._paddingRight.isPixel) {\n        this._currentMeasure.width -= this._paddingRight.getValue(this._host);\n      } else {\n        this._currentMeasure.width -= parentWidth * this._paddingRight.getValue(this._host);\n      }\n      if (this._paddingTop.isPixel) {\n        this._currentMeasure.top += this._paddingTop.getValue(this._host);\n        this._currentMeasure.height -= this._paddingTop.getValue(this._host);\n      } else {\n        this._currentMeasure.top += parentHeight * this._paddingTop.getValue(this._host);\n        this._currentMeasure.height -= parentHeight * this._paddingTop.getValue(this._host);\n      }\n      if (this._paddingBottom.isPixel) {\n        this._currentMeasure.height -= this._paddingBottom.getValue(this._host);\n      } else {\n        this._currentMeasure.height -= parentHeight * this._paddingBottom.getValue(this._host);\n      }\n    }\n    if (this._left.isPixel) {\n      this._currentMeasure.left += this._left.getValue(this._host);\n    } else {\n      this._currentMeasure.left += parentWidth * this._left.getValue(this._host);\n    }\n    if (this._top.isPixel) {\n      this._currentMeasure.top += this._top.getValue(this._host);\n    } else {\n      this._currentMeasure.top += parentHeight * this._top.getValue(this._host);\n    }\n    this._currentMeasure.left += x;\n    this._currentMeasure.top += y;\n  }\n  /**\n   * @internal\n   */\n  _preMeasure(parentMeasure, context) {\n    // Do nothing\n  }\n  /**\n   * @internal\n   */\n  _postMeasure(parentMeasure, context) {\n    // Do nothing\n  }\n  /**\n   * @internal\n   */\n  _additionalProcessing(parentMeasure, context) {\n    // Do nothing\n  }\n  /**\n   * @internal\n   */\n  _clipForChildren(context) {\n    // DO nothing\n  }\n  _clip(context, invalidatedRectangle) {\n    context.beginPath();\n    Control._ClipMeasure.copyFrom(this._currentMeasure);\n    if (invalidatedRectangle) {\n      // Rotate the invalidated rect into the control's space\n      invalidatedRectangle.transformToRef(this._invertTransformMatrix, this._tmpMeasureA);\n      // Get the intersection of the rect in context space and the current context\n      const intersection = new Measure(0, 0, 0, 0);\n      intersection.left = Math.max(this._tmpMeasureA.left, this._currentMeasure.left);\n      intersection.top = Math.max(this._tmpMeasureA.top, this._currentMeasure.top);\n      intersection.width = Math.min(this._tmpMeasureA.left + this._tmpMeasureA.width, this._currentMeasure.left + this._currentMeasure.width) - intersection.left;\n      intersection.height = Math.min(this._tmpMeasureA.top + this._tmpMeasureA.height, this._currentMeasure.top + this._currentMeasure.height) - intersection.top;\n      Control._ClipMeasure.copyFrom(intersection);\n    }\n    if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\n      const shadowOffsetX = this.shadowOffsetX;\n      const shadowOffsetY = this.shadowOffsetY;\n      const shadowBlur = this.shadowBlur;\n      const leftShadowOffset = Math.min(Math.min(shadowOffsetX, 0) - shadowBlur * 2, 0);\n      const rightShadowOffset = Math.max(Math.max(shadowOffsetX, 0) + shadowBlur * 2, 0);\n      const topShadowOffset = Math.min(Math.min(shadowOffsetY, 0) - shadowBlur * 2, 0);\n      const bottomShadowOffset = Math.max(Math.max(shadowOffsetY, 0) + shadowBlur * 2, 0);\n      context.rect(Control._ClipMeasure.left + leftShadowOffset, Control._ClipMeasure.top + topShadowOffset, Control._ClipMeasure.width + rightShadowOffset - leftShadowOffset, Control._ClipMeasure.height + bottomShadowOffset - topShadowOffset);\n    } else {\n      context.rect(Control._ClipMeasure.left, Control._ClipMeasure.top, Control._ClipMeasure.width, Control._ClipMeasure.height);\n    }\n    context.clip();\n  }\n  /**\n   * @internal\n   */\n  _render(context, invalidatedRectangle) {\n    if (!this.isVisible || this.notRenderable || this._isClipped) {\n      this._isDirty = false;\n      return false;\n    }\n    this.host._numRenderCalls++;\n    context.save();\n    this._applyStates(context);\n    // Transform\n    this._transform(context);\n    // Clip\n    if (this.clipContent) {\n      this._clip(context, invalidatedRectangle);\n    }\n    if (this.onBeforeDrawObservable.hasObservers()) {\n      this.onBeforeDrawObservable.notifyObservers(this);\n    }\n    if (this.useBitmapCache && !this._wasDirty && this._cacheData) {\n      context.putImageData(this._cacheData, this._currentMeasure.left, this._currentMeasure.top);\n    } else {\n      this._draw(context, invalidatedRectangle);\n    }\n    if (this.useBitmapCache && this._wasDirty) {\n      this._cacheData = context.getImageData(this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);\n    }\n    this._renderHighlight(context);\n    if (this.onAfterDrawObservable.hasObservers()) {\n      this.onAfterDrawObservable.notifyObservers(this);\n    }\n    context.restore();\n    return true;\n  }\n  /**\n   * @internal\n   */\n  _draw(context, invalidatedRectangle) {\n    // Do nothing\n  }\n  /**\n   * Tests if a given coordinates belong to the current control\n   * @param x defines x coordinate to test\n   * @param y defines y coordinate to test\n   * @returns true if the coordinates are inside the control\n   */\n  contains(x, y) {\n    // Invert transform\n    this._invertTransformMatrix.transformCoordinates(x, y, this._transformedPosition);\n    x = this._transformedPosition.x;\n    y = this._transformedPosition.y;\n    // Check\n    if (x < this._currentMeasure.left) {\n      return false;\n    }\n    if (x > this._currentMeasure.left + this._currentMeasure.width) {\n      return false;\n    }\n    if (y < this._currentMeasure.top) {\n      return false;\n    }\n    if (y > this._currentMeasure.top + this._currentMeasure.height) {\n      return false;\n    }\n    if (this.isPointerBlocker) {\n      this._host._shouldBlockPointer = true;\n    }\n    return true;\n  }\n  /**\n   * @internal\n   */\n  _processPicking(x, y, pi, type, pointerId, buttonIndex, deltaX, deltaY) {\n    if (!this._isEnabled) {\n      return false;\n    }\n    if (!this.isHitTestVisible || !this.isVisible || this._doNotRender) {\n      return false;\n    }\n    if (!this.contains(x, y)) {\n      return false;\n    }\n    this._processObservables(type, x, y, pi, pointerId, buttonIndex, deltaX, deltaY);\n    return true;\n  }\n  /**\n   * @internal\n   */\n  _onPointerMove(target, coordinates, pointerId, pi) {\n    const canNotify = this.onPointerMoveObservable.notifyObservers(coordinates, -1, target, this, pi);\n    if (canNotify && this.parent != null && !this.isPointerBlocker) {\n      this.parent._onPointerMove(target, coordinates, pointerId, pi);\n    }\n  }\n  /**\n   * @internal\n   */\n  _onPointerEnter(target, pi) {\n    if (!this._isEnabled) {\n      return false;\n    }\n    if (this._enterCount > 0) {\n      return false;\n    }\n    if (this._enterCount === -1) {\n      // -1 is for touch input, we are now sure we are with a mouse or pencil\n      this._enterCount = 0;\n    }\n    this._enterCount++;\n    const canNotify = this.onPointerEnterObservable.notifyObservers(this, -1, target, this, pi);\n    if (canNotify && this.parent != null && !this.isPointerBlocker) {\n      this.parent._onPointerEnter(target, pi);\n    }\n    return true;\n  }\n  /**\n   * @internal\n   */\n  _onPointerOut(target, pi, force = false) {\n    if (!force && (!this._isEnabled || target === this)) {\n      return;\n    }\n    this._enterCount = 0;\n    let canNotify = true;\n    if (!target.isAscendant(this)) {\n      canNotify = this.onPointerOutObservable.notifyObservers(this, -1, target, this, pi);\n    }\n    if (canNotify && this.parent != null && !this.isPointerBlocker) {\n      this.parent._onPointerOut(target, pi, force);\n    }\n  }\n  /**\n   * @internal\n   */\n  _onPointerDown(target, coordinates, pointerId, buttonIndex, pi) {\n    // Prevent pointerout to lose control context.\n    // Event redundancy is checked inside the function.\n    this._onPointerEnter(this, pi);\n    if (this._downCount !== 0) {\n      return false;\n    }\n    this._downCount++;\n    this._downPointerIds[pointerId] = true;\n    const canNotify = this.onPointerDownObservable.notifyObservers(new Vector2WithInfo(coordinates, buttonIndex), -1, target, this, pi);\n    if (canNotify && this.parent != null && !this.isPointerBlocker) {\n      this.parent._onPointerDown(target, coordinates, pointerId, buttonIndex, pi);\n    }\n    if (pi && this.uniqueId !== this._host.rootContainer.uniqueId) {\n      this._host._capturedPointerIds.add(pi.event.pointerId);\n    }\n    return true;\n  }\n  /**\n   * @internal\n   */\n  _onPointerUp(target, coordinates, pointerId, buttonIndex, notifyClick, pi) {\n    if (!this._isEnabled) {\n      return;\n    }\n    this._downCount = 0;\n    delete this._downPointerIds[pointerId];\n    let canNotifyClick = notifyClick;\n    if (notifyClick && (this._enterCount > 0 || this._enterCount === -1)) {\n      canNotifyClick = this.onPointerClickObservable.notifyObservers(new Vector2WithInfo(coordinates, buttonIndex), -1, target, this, pi);\n    }\n    const canNotify = this.onPointerUpObservable.notifyObservers(new Vector2WithInfo(coordinates, buttonIndex), -1, target, this, pi);\n    if (canNotify && this.parent != null && !this.isPointerBlocker) {\n      this.parent._onPointerUp(target, coordinates, pointerId, buttonIndex, canNotifyClick, pi);\n    }\n    if (pi && this.uniqueId !== this._host.rootContainer.uniqueId) {\n      this._host._capturedPointerIds.delete(pi.event.pointerId);\n    }\n  }\n  /**\n   * @internal\n   */\n  _forcePointerUp(pointerId = null) {\n    if (pointerId !== null) {\n      this._onPointerUp(this, Vector2.Zero(), pointerId, 0, true);\n    } else {\n      for (const key in this._downPointerIds) {\n        this._onPointerUp(this, Vector2.Zero(), +key, 0, true);\n      }\n    }\n  }\n  /**\n   * @internal\n   */\n  _onWheelScroll(deltaX, deltaY) {\n    if (!this._isEnabled) {\n      return;\n    }\n    const canNotify = this.onWheelObservable.notifyObservers(new Vector2(deltaX, deltaY));\n    if (canNotify && this.parent != null) {\n      this.parent._onWheelScroll(deltaX, deltaY);\n    }\n  }\n  /** @internal */\n  _onCanvasBlur() {}\n  /**\n   * @internal\n   */\n  _processObservables(type, x, y, pi, pointerId, buttonIndex, deltaX, deltaY) {\n    if (!this._isEnabled) {\n      return false;\n    }\n    this._dummyVector2.copyFromFloats(x, y);\n    if (type === PointerEventTypes.POINTERMOVE) {\n      this._onPointerMove(this, this._dummyVector2, pointerId, pi);\n      const previousControlOver = this._host._lastControlOver[pointerId];\n      if (previousControlOver && previousControlOver !== this) {\n        previousControlOver._onPointerOut(this, pi);\n      }\n      if (previousControlOver !== this) {\n        this._onPointerEnter(this, pi);\n      }\n      this._host._lastControlOver[pointerId] = this;\n      return true;\n    }\n    if (type === PointerEventTypes.POINTERDOWN) {\n      this._onPointerDown(this, this._dummyVector2, pointerId, buttonIndex, pi);\n      this._host._registerLastControlDown(this, pointerId);\n      this._host._lastPickedControl = this;\n      return true;\n    }\n    if (type === PointerEventTypes.POINTERUP) {\n      if (this._host._lastControlDown[pointerId]) {\n        this._host._lastControlDown[pointerId]._onPointerUp(this, this._dummyVector2, pointerId, buttonIndex, true, pi);\n      }\n      delete this._host._lastControlDown[pointerId];\n      return true;\n    }\n    if (type === PointerEventTypes.POINTERWHEEL) {\n      if (this._host._lastControlOver[pointerId]) {\n        this._host._lastControlOver[pointerId]._onWheelScroll(deltaX, deltaY);\n        return true;\n      }\n    }\n    return false;\n  }\n  _getStyleProperty(propName, defaultValue) {\n    var _a;\n    const prop = (_a = this._style && this._style[propName]) !== null && _a !== void 0 ? _a : this[propName];\n    if (!prop && this.parent) {\n      return this.parent._getStyleProperty(propName, defaultValue);\n    } else if (!this.parent) {\n      return defaultValue;\n    } else {\n      return prop;\n    }\n  }\n  _prepareFont() {\n    if (!this._font && !this._fontSet) {\n      return;\n    }\n    this._font = this._getStyleProperty(\"fontStyle\", \"\") + \" \" + this._getStyleProperty(\"fontWeight\", \"\") + \" \" + this.fontSizeInPixels + \"px \" + this._getStyleProperty(\"fontFamily\", \"Arial\");\n    this._fontOffset = Control._GetFontOffset(this._font);\n    //children need to be refreshed\n    this.getDescendants().forEach(child => child._markAllAsDirty());\n  }\n  /**\n   * Clones a control and its descendants\n   * @param host the texture where the control will be instantiated. Can be empty, in which case the control will be created on the same texture\n   * @returns the cloned control\n   */\n  clone(host) {\n    const serialization = {};\n    this.serialize(serialization);\n    const controlType = Tools.Instantiate(\"BABYLON.GUI.\" + serialization.className);\n    const cloned = new controlType();\n    cloned.parse(serialization, host);\n    return cloned;\n  }\n  /**\n   * Parses a serialized object into this control\n   * @param serializedObject the object with the serialized properties\n   * @param host the texture where the control will be instantiated. Can be empty, in which case the control will be created on the same texture\n   * @returns this control\n   */\n  parse(serializedObject, host) {\n    SerializationHelper.Parse(() => this, serializedObject, null);\n    this.name = serializedObject.name;\n    this._parseFromContent(serializedObject, host !== null && host !== void 0 ? host : this._host);\n    return this;\n  }\n  /**\n   * Serializes the current control\n   * @param serializationObject defined the JSON serialized object\n   */\n  serialize(serializationObject) {\n    SerializationHelper.Serialize(this, serializationObject);\n    serializationObject.name = this.name;\n    serializationObject.className = this.getClassName();\n    // Call prepareFont to guarantee the font is properly set before serializing\n    this._prepareFont();\n    if (this._font) {\n      serializationObject.fontFamily = this._fontFamily;\n      serializationObject.fontSize = this.fontSize;\n      serializationObject.fontWeight = this.fontWeight;\n      serializationObject.fontStyle = this.fontStyle;\n    }\n    if (this._gradient) {\n      serializationObject.gradient = {};\n      this._gradient.serialize(serializationObject.gradient);\n    }\n    // Animations\n    SerializationHelper.AppendSerializedAnimations(this, serializationObject);\n  }\n  /**\n   * @internal\n   */\n  _parseFromContent(serializedObject, host) {\n    var _a, _b;\n    if (serializedObject.fontFamily) {\n      this.fontFamily = serializedObject.fontFamily;\n    }\n    if (serializedObject.fontSize) {\n      this.fontSize = serializedObject.fontSize;\n    }\n    if (serializedObject.fontWeight) {\n      this.fontWeight = serializedObject.fontWeight;\n    }\n    if (serializedObject.fontStyle) {\n      this.fontStyle = serializedObject.fontStyle;\n    }\n    // Gradient\n    if (serializedObject.gradient) {\n      const className = Tools.Instantiate(\"BABYLON.GUI.\" + serializedObject.gradient.className);\n      this._gradient = new className();\n      (_a = this._gradient) === null || _a === void 0 ? void 0 : _a.parse(serializedObject.gradient);\n    }\n    // Animations\n    if (serializedObject.animations) {\n      this.animations = [];\n      for (let animationIndex = 0; animationIndex < serializedObject.animations.length; animationIndex++) {\n        const parsedAnimation = serializedObject.animations[animationIndex];\n        const internalClass = GetClass(\"BABYLON.Animation\");\n        if (internalClass) {\n          this.animations.push(internalClass.Parse(parsedAnimation));\n        }\n      }\n      if (serializedObject.autoAnimate && this._host && this._host.getScene()) {\n        this._host.getScene().beginAnimation(this, serializedObject.autoAnimateFrom, serializedObject.autoAnimateTo, serializedObject.autoAnimateLoop, serializedObject.autoAnimateSpeed || 1.0);\n      }\n    }\n    this.fixedRatioMasterIsWidth = (_b = serializedObject.fixedRatioMasterIsWidth) !== null && _b !== void 0 ? _b : this.fixedRatioMasterIsWidth;\n  }\n  /** Releases associated resources */\n  dispose() {\n    this.onDirtyObservable.clear();\n    this.onBeforeDrawObservable.clear();\n    this.onAfterDrawObservable.clear();\n    this.onPointerDownObservable.clear();\n    this.onPointerEnterObservable.clear();\n    this.onPointerMoveObservable.clear();\n    this.onPointerOutObservable.clear();\n    this.onPointerUpObservable.clear();\n    this.onPointerClickObservable.clear();\n    this.onWheelObservable.clear();\n    if (this._styleObserver && this._style) {\n      this._style.onChangedObservable.remove(this._styleObserver);\n      this._styleObserver = null;\n    }\n    if (this.parent) {\n      this.parent.removeControl(this);\n      this.parent = null;\n    }\n    if (this._host) {\n      const index = this._host._linkedControls.indexOf(this);\n      if (index > -1) {\n        this.linkWithMesh(null);\n      }\n    }\n    // Callback\n    this.onDisposeObservable.notifyObservers(this);\n    this.onDisposeObservable.clear();\n  }\n  /** HORIZONTAL_ALIGNMENT_LEFT */\n  static get HORIZONTAL_ALIGNMENT_LEFT() {\n    return Control._HORIZONTAL_ALIGNMENT_LEFT;\n  }\n  /** HORIZONTAL_ALIGNMENT_RIGHT */\n  static get HORIZONTAL_ALIGNMENT_RIGHT() {\n    return Control._HORIZONTAL_ALIGNMENT_RIGHT;\n  }\n  /** HORIZONTAL_ALIGNMENT_CENTER */\n  static get HORIZONTAL_ALIGNMENT_CENTER() {\n    return Control._HORIZONTAL_ALIGNMENT_CENTER;\n  }\n  /** VERTICAL_ALIGNMENT_TOP */\n  static get VERTICAL_ALIGNMENT_TOP() {\n    return Control._VERTICAL_ALIGNMENT_TOP;\n  }\n  /** VERTICAL_ALIGNMENT_BOTTOM */\n  static get VERTICAL_ALIGNMENT_BOTTOM() {\n    return Control._VERTICAL_ALIGNMENT_BOTTOM;\n  }\n  /** VERTICAL_ALIGNMENT_CENTER */\n  static get VERTICAL_ALIGNMENT_CENTER() {\n    return Control._VERTICAL_ALIGNMENT_CENTER;\n  }\n  /**\n   * @internal\n   */\n  static _GetFontOffset(font) {\n    if (Control._FontHeightSizes[font]) {\n      return Control._FontHeightSizes[font];\n    }\n    const engine = EngineStore.LastCreatedEngine;\n    if (!engine) {\n      throw new Error(\"Invalid engine. Unable to create a canvas.\");\n    }\n    const result = engine.getFontOffset(font);\n    Control._FontHeightSizes[font] = result;\n    return result;\n  }\n  /**\n   * Creates a Control from parsed data\n   * @param serializedObject defines parsed data\n   * @param host defines the hosting AdvancedDynamicTexture\n   * @returns a new Control\n   */\n  static Parse(serializedObject, host) {\n    const controlType = Tools.Instantiate(\"BABYLON.GUI.\" + serializedObject.className);\n    const control = SerializationHelper.Parse(() => new controlType(), serializedObject, null);\n    control.name = serializedObject.name;\n    control._parseFromContent(serializedObject, host);\n    return control;\n  }\n  /**\n   * @internal\n   */\n  static drawEllipse(x, y, width, height, context) {\n    context.translate(x, y);\n    context.scale(width, height);\n    context.beginPath();\n    context.arc(0, 0, 1, 0, 2 * Math.PI);\n    context.closePath();\n    context.scale(1 / width, 1 / height);\n    context.translate(-x, -y);\n  }\n  /**\n   * Returns true if the control is ready to be used\n   * @returns\n   */\n  isReady() {\n    // Most controls are ready by default, so the default implementation is to return true\n    return true;\n  }\n}\n/**\n * Gets or sets a boolean indicating if alpha must be an inherited value (false by default)\n */\nControl.AllowAlphaInheritance = false;\nControl._ClipMeasure = new Measure(0, 0, 0, 0);\n// Statics\nControl._HORIZONTAL_ALIGNMENT_LEFT = 0;\nControl._HORIZONTAL_ALIGNMENT_RIGHT = 1;\nControl._HORIZONTAL_ALIGNMENT_CENTER = 2;\nControl._VERTICAL_ALIGNMENT_TOP = 0;\nControl._VERTICAL_ALIGNMENT_BOTTOM = 1;\nControl._VERTICAL_ALIGNMENT_CENTER = 2;\nControl._FontHeightSizes = {};\nControl.AddHeader = () => {};\n__decorate([serialize()], Control.prototype, \"metadata\", void 0);\n__decorate([serialize()], Control.prototype, \"isHitTestVisible\", void 0);\n__decorate([serialize()], Control.prototype, \"isPointerBlocker\", void 0);\n__decorate([serialize()], Control.prototype, \"isFocusInvisible\", void 0);\n__decorate([serialize()], Control.prototype, \"clipChildren\", null);\n__decorate([serialize()], Control.prototype, \"clipContent\", null);\n__decorate([serialize()], Control.prototype, \"useBitmapCache\", void 0);\n__decorate([serialize()], Control.prototype, \"shadowOffsetX\", null);\n__decorate([serialize()], Control.prototype, \"shadowOffsetY\", null);\n__decorate([serialize()], Control.prototype, \"shadowBlur\", null);\n__decorate([serialize()], Control.prototype, \"shadowColor\", null);\n__decorate([serialize()], Control.prototype, \"hoverCursor\", void 0);\n__decorate([serialize()], Control.prototype, \"fontOffset\", null);\n__decorate([serialize()], Control.prototype, \"alpha\", null);\n__decorate([serialize()], Control.prototype, \"scaleX\", null);\n__decorate([serialize()], Control.prototype, \"scaleY\", null);\n__decorate([serialize()], Control.prototype, \"rotation\", null);\n__decorate([serialize()], Control.prototype, \"transformCenterY\", null);\n__decorate([serialize()], Control.prototype, \"transformCenterX\", null);\n__decorate([serialize()], Control.prototype, \"horizontalAlignment\", null);\n__decorate([serialize()], Control.prototype, \"verticalAlignment\", null);\n__decorate([serialize()], Control.prototype, \"fixedRatio\", null);\n__decorate([serialize()], Control.prototype, \"fixedRatioMasterIsWidth\", null);\n__decorate([serialize()], Control.prototype, \"width\", null);\n__decorate([serialize()], Control.prototype, \"height\", null);\n__decorate([serialize()], Control.prototype, \"style\", null);\n__decorate([serialize()], Control.prototype, \"color\", null);\n__decorate([serialize()], Control.prototype, \"gradient\", null);\n__decorate([serialize()], Control.prototype, \"zIndex\", null);\n__decorate([serialize()], Control.prototype, \"notRenderable\", null);\n__decorate([serialize()], Control.prototype, \"isVisible\", null);\n__decorate([serialize()], Control.prototype, \"descendantsOnlyPadding\", null);\n__decorate([serialize()], Control.prototype, \"paddingLeft\", null);\n__decorate([serialize()], Control.prototype, \"paddingRight\", null);\n__decorate([serialize()], Control.prototype, \"paddingTop\", null);\n__decorate([serialize()], Control.prototype, \"paddingBottom\", null);\n__decorate([serialize()], Control.prototype, \"left\", null);\n__decorate([serialize()], Control.prototype, \"top\", null);\n__decorate([serialize()], Control.prototype, \"linkOffsetX\", null);\n__decorate([serialize()], Control.prototype, \"linkOffsetY\", null);\n__decorate([serialize()], Control.prototype, \"isEnabled\", null);\n__decorate([serialize()], Control.prototype, \"disabledColor\", null);\n__decorate([serialize()], Control.prototype, \"disabledColorItem\", null);\n__decorate([serialize()], Control.prototype, \"overlapGroup\", void 0);\n__decorate([serialize()], Control.prototype, \"overlapDeltaMultiplier\", void 0);\nRegisterClass(\"BABYLON.GUI.Control\", Control);","map":{"version":3,"names":["Observable","Vector2","Vector3","Matrix","PointerEventTypes","Logger","Tools","ValueAndUnit","Measure","Matrix2D","Vector2WithInfo","GetClass","RegisterClass","SerializationHelper","serialize","EngineStore","Control","isReadOnly","_isReadOnly","value","transformedMeasure","_evaluatedMeasure","clipChildren","_clipChildren","clipContent","_clipContent","shadowOffsetX","_shadowOffsetX","_markAsDirty","shadowOffsetY","_shadowOffsetY","shadowBlur","_shadowBlur","_previousShadowBlur","shadowColor","_shadowColor","typeName","_getTypeName","getClassName","accessibilityTag","_accessibilityTag","onAccessibilityTagChangedObservable","notifyObservers","host","_host","fontOffset","_fontOffset","offset","alpha","_alpha","_alphaSet","highlightLineWidth","_highlightLineWidth","isHighlighted","_isHighlighted","highlightColor","_highlightColor","scaleX","_scaleX","_markMatrixAsDirty","scaleY","_scaleY","rotation","_rotation","transformCenterY","_transformCenterY","transformCenterX","_transformCenterX","horizontalAlignment","_horizontalAlignment","verticalAlignment","_verticalAlignment","fixedRatio","_fixedRatio","fixedRatioMasterIsWidth","_fixedRatioMasterIsWidth","width","_width","toString","fromString","widthInPixels","getValueInPixel","_cachedParentMeasure","isNaN","height","_height","heightInPixels","fontFamily","_fontFamily","_resetFontCache","fontStyle","_fontStyle","fontWeight","_fontWeight","style","_style","onChangedObservable","remove","_styleObserver","add","_isFontSizeInPercentage","_fontSize","isPercentage","fontSizeInPixels","fontSizeToUse","isPixel","getValue","_tempParentMeasure","fontSize","color","_color","gradient","_gradient","zIndex","_zIndex","parent","_reOrderControl","notRenderable","_doNotRender","isVisible","_isVisible","onIsVisibleChangedObservable","isDirty","_isDirty","linkedMesh","_linkedMesh","descendantsOnlyPadding","_descendantsOnlyPadding","paddingLeft","_paddingLeft","paddingLeftInPixels","_paddingLeftInPixels","paddingRight","_paddingRight","paddingRightInPixels","_paddingRightInPixels","paddingTop","_paddingTop","paddingTopInPixels","_paddingTopInPixels","paddingBottom","_paddingBottom","paddingBottomInPixels","_paddingBottomInPixels","left","_left","leftInPixels","top","_top","topInPixels","linkOffsetX","_linkOffsetX","linkOffsetXInPixels","linkOffsetY","_linkOffsetY","linkOffsetYInPixels","centerX","_currentMeasure","centerY","isEnabled","_isEnabled","recursivelyFirePointerOut","control","pointer","_lastControlOver","_onPointerOut","children","undefined","forEach","onEnabledStateChangedObservable","disabledColor","_disabledColor","disabledColorItem","_disabledColorItem","constructor","name","Empty","_tempPaddingMeasure","UNITMODE_PIXEL","UNITMODE_PERCENTAGE","HORIZONTAL_ALIGNMENT_CENTER","VERTICAL_ALIGNMENT_CENTER","_wasDirty","_prevCurrentMeasureTransformedIntoGlobalSpace","_transformMatrix","Identity","_invertTransformMatrix","_transformedPosition","Zero","_isMatrixDirty","_fontSet","_dummyVector2","_downCount","_enterCount","_downPointerIds","_evaluatedParentMeasure","_rebuildLayout","_customData","_isClipped","_automaticSize","metadata","isHitTestVisible","isPointerBlocker","isFocusInvisible","useBitmapCache","hoverCursor","onWheelObservable","onPointerMoveObservable","onPointerOutObservable","onPointerDownObservable","onPointerUpObservable","onPointerClickObservable","onPointerEnterObservable","onDirtyObservable","onBeforeDrawObservable","onAfterDrawObservable","onDisposeObservable","animations","_tmpMeasureA","getAscendantOfClass","className","markAsDirty","force","markAllAsDirty","_markAllAsDirty","isAscendant","container","getLocalCoordinates","globalCoordinates","result","getLocalCoordinatesToRef","x","y","getParentLocalCoordinates","moveToVector3","position","scene","_rootContainer","Error","HORIZONTAL_ALIGNMENT_LEFT","VERTICAL_ALIGNMENT_TOP","globalViewport","_getGlobalViewport","projectedPosition","Project","IdentityReadOnly","getTransformMatrix","_moveToProjectedPosition","z","getDescendantsToRef","results","directDescendantsOnly","predicate","getDescendants","Array","linkWithMesh","mesh","index","_linkedControls","indexOf","splice","push","setPadding","right","bottom","setPaddingInPixels","oldLeft","oldTop","parentMeasure","_a","_processMeasures","getContext","newLeft","newTop","leftAndTopIgnoreAdaptiveScaling","ignoreAdaptiveScaling","Math","abs","_offsetLeft","_offsetTop","_flagDescendantsAsMatrixDirty","_intersectsRect","rect","context","_transform","_computeAdditionalOffsetX","_computeAdditionalOffsetY","invalidateRect","useInvalidateRectOptimization","transformToRef","CombineToRef","max","leftShadowOffset","min","rightShadowOffset","topShadowOffset","bottomShadowOffset","offsetX","offsetY","floor","ceil","_font","_prepareFont","_link","uniqueId","getScene","getUniqueId","translate","rotate","scale","_cachedOffsetX","_cachedOffsetY","ComposeToRef","invertToRef","_renderHighlight","save","strokeStyle","lineWidth","_renderHighlightSpecific","restore","strokeRect","_getColor","getCanvasGradient","_applyStates","useSmallestIdeal","font","fillStyle","AllowAlphaInheritance","globalAlpha","renderToIntermediateTexture","_layout","isEqualsTo","_numLayoutCalls","addAndTransformToRef","rebuildCount","_evaluateClippingState","copyFrom","_preMeasure","_measure","_postMeasure","_computeAlignment","_additionalProcessing","hasObservers","parentWidth","parentHeight","HORIZONTAL_ALIGNMENT_RIGHT","VERTICAL_ALIGNMENT_BOTTOM","_clipForChildren","_clip","invalidatedRectangle","beginPath","_ClipMeasure","intersection","clip","_render","_numRenderCalls","_cacheData","putImageData","_draw","getImageData","contains","transformCoordinates","_shouldBlockPointer","_processPicking","pi","type","pointerId","buttonIndex","deltaX","deltaY","_processObservables","_onPointerMove","target","coordinates","canNotify","_onPointerEnter","_onPointerDown","rootContainer","_capturedPointerIds","event","_onPointerUp","notifyClick","canNotifyClick","delete","_forcePointerUp","key","_onWheelScroll","_onCanvasBlur","copyFromFloats","POINTERMOVE","previousControlOver","POINTERDOWN","_registerLastControlDown","_lastPickedControl","POINTERUP","_lastControlDown","POINTERWHEEL","_getStyleProperty","propName","defaultValue","prop","_GetFontOffset","child","clone","serialization","controlType","Instantiate","cloned","parse","serializedObject","Parse","_parseFromContent","serializationObject","Serialize","AppendSerializedAnimations","animationIndex","length","parsedAnimation","internalClass","autoAnimate","beginAnimation","autoAnimateFrom","autoAnimateTo","autoAnimateLoop","autoAnimateSpeed","_b","dispose","clear","removeControl","_HORIZONTAL_ALIGNMENT_LEFT","_HORIZONTAL_ALIGNMENT_RIGHT","_HORIZONTAL_ALIGNMENT_CENTER","_VERTICAL_ALIGNMENT_TOP","_VERTICAL_ALIGNMENT_BOTTOM","_VERTICAL_ALIGNMENT_CENTER","_FontHeightSizes","engine","LastCreatedEngine","getFontOffset","drawEllipse","arc","PI","closePath","isReady","AddHeader","__decorate"],"sources":["../../../../../dev/gui/src/2D/controls/control.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/naming-convention */\r\n/* eslint-disable @typescript-eslint/no-unused-vars */\r\nimport type { Nullable } from \"core/types\";\r\nimport type { Observer } from \"core/Misc/observable\";\r\nimport { Observable } from \"core/Misc/observable\";\r\nimport { Vector2, Vector3, Matrix } from \"core/Maths/math.vector\";\r\nimport type { PointerInfoBase } from \"core/Events/pointerEvents\";\r\nimport { PointerEventTypes } from \"core/Events/pointerEvents\";\r\nimport { Logger } from \"core/Misc/logger\";\r\nimport { Tools } from \"core/Misc/tools\";\r\nimport type { TransformNode } from \"core/Meshes/transformNode\";\r\nimport type { Scene } from \"core/scene\";\r\n\r\nimport type { Container } from \"./container\";\r\nimport type { AdvancedDynamicTexture } from \"../advancedDynamicTexture\";\r\nimport { ValueAndUnit } from \"../valueAndUnit\";\r\nimport { Measure } from \"../measure\";\r\nimport type { Style } from \"../style\";\r\nimport { Matrix2D, Vector2WithInfo } from \"../math2D\";\r\nimport { GetClass, RegisterClass } from \"core/Misc/typeStore\";\r\nimport { SerializationHelper, serialize } from \"core/Misc/decorators\";\r\nimport type { ICanvasGradient, ICanvasRenderingContext } from \"core/Engines/ICanvas\";\r\nimport { EngineStore } from \"core/Engines/engineStore\";\r\nimport type { IAccessibilityTag } from \"core/IAccessibilityTag\";\r\nimport type { IPointerEvent } from \"core/Events/deviceInputEvents\";\r\nimport type { IAnimatable } from \"core/Animations/animatable.interface\";\r\nimport type { Animation } from \"core/Animations/animation\";\r\nimport type { BaseGradient } from \"./gradient/BaseGradient\";\r\n\r\n/**\r\n * Root class used for all 2D controls\r\n * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#controls\r\n */\r\nexport class Control implements IAnimatable {\r\n    /**\r\n     * Gets or sets a boolean indicating if alpha must be an inherited value (false by default)\r\n     */\r\n    public static AllowAlphaInheritance = false;\r\n\r\n    private _alpha = 1;\r\n    private _alphaSet = false;\r\n    private _zIndex = 0;\r\n    /** @internal */\r\n    public _host: AdvancedDynamicTexture;\r\n    /** Gets or sets the control parent */\r\n    public parent: Nullable<Container>;\r\n    /** @internal */\r\n    public _currentMeasure = Measure.Empty();\r\n    /** @internal */\r\n    public _tempPaddingMeasure = Measure.Empty();\r\n    private _fontFamily = \"\";\r\n    private _fontStyle = \"\";\r\n    private _fontWeight = \"\";\r\n    private _fontSize = new ValueAndUnit(18, ValueAndUnit.UNITMODE_PIXEL, false);\r\n    private _font: string;\r\n    /** @internal */\r\n    public _width = new ValueAndUnit(1, ValueAndUnit.UNITMODE_PERCENTAGE, false);\r\n    /** @internal */\r\n    public _height = new ValueAndUnit(1, ValueAndUnit.UNITMODE_PERCENTAGE, false);\r\n    /** @internal */\r\n    protected _fontOffset: { ascent: number; height: number; descent: number };\r\n    private _color = \"\";\r\n    private _style: Nullable<Style> = null;\r\n    private _styleObserver: Nullable<Observer<Style>>;\r\n    /** @internal */\r\n    protected _horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_CENTER;\r\n    /** @internal */\r\n    protected _verticalAlignment = Control.VERTICAL_ALIGNMENT_CENTER;\r\n    /** @internal */\r\n    protected _isDirty = true;\r\n    /** @internal */\r\n    protected _wasDirty = false;\r\n    /** @internal */\r\n    public _tempParentMeasure = Measure.Empty();\r\n    /** @internal */\r\n    public _prevCurrentMeasureTransformedIntoGlobalSpace = Measure.Empty();\r\n    /** @internal */\r\n    public _cachedParentMeasure = Measure.Empty();\r\n    private _descendantsOnlyPadding = false;\r\n    private _paddingLeft = new ValueAndUnit(0);\r\n    private _paddingRight = new ValueAndUnit(0);\r\n    private _paddingTop = new ValueAndUnit(0);\r\n    private _paddingBottom = new ValueAndUnit(0);\r\n    /** @internal */\r\n    public _left = new ValueAndUnit(0);\r\n    /** @internal */\r\n    public _top = new ValueAndUnit(0);\r\n    private _scaleX = 1.0;\r\n    private _scaleY = 1.0;\r\n    private _rotation = 0;\r\n    private _transformCenterX = 0.5;\r\n    private _transformCenterY = 0.5;\r\n    /** @internal */\r\n    public _transformMatrix = Matrix2D.Identity();\r\n    /** @internal */\r\n    protected _invertTransformMatrix = Matrix2D.Identity();\r\n    /** @internal */\r\n    protected _transformedPosition = Vector2.Zero();\r\n    private _isMatrixDirty = true;\r\n    private _cachedOffsetX: number;\r\n    private _cachedOffsetY: number;\r\n    private _isVisible = true;\r\n    private _isHighlighted = false;\r\n    private _highlightColor = \"#4affff\";\r\n    protected _highlightLineWidth = 2;\r\n    /** @internal */\r\n    public _linkedMesh: Nullable<TransformNode>;\r\n    private _fontSet = false;\r\n    private _dummyVector2 = Vector2.Zero();\r\n    private _downCount = 0;\r\n    private _enterCount = -1;\r\n    private _doNotRender = false;\r\n    private _downPointerIds: { [id: number]: boolean } = {};\r\n    private _evaluatedMeasure = new Measure(0, 0, 0, 0);\r\n    private _evaluatedParentMeasure = new Measure(0, 0, 0, 0);\r\n    protected _isEnabled = true;\r\n    protected _disabledColor = \"#9a9a9a\";\r\n    protected _disabledColorItem = \"#6a6a6a\";\r\n    protected _isReadOnly = false;\r\n    private _gradient: Nullable<BaseGradient> = null;\r\n    /** @internal */\r\n    protected _rebuildLayout = false;\r\n\r\n    /**\r\n     * Observable that fires when the control's enabled state changes\r\n     */\r\n    public onEnabledStateChangedObservable = new Observable<boolean>();\r\n\r\n    /** @internal */\r\n    public _customData: any = {};\r\n\r\n    /** @internal */\r\n    public _isClipped = false;\r\n\r\n    /** @internal */\r\n    public _automaticSize = false;\r\n\r\n    /** @internal */\r\n    public _tag: any;\r\n\r\n    /**\r\n     * Gets or sets the unique id of the node. Please note that this number will be updated when the control is added to a container\r\n     */\r\n    public uniqueId: number;\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if the control is readonly (default: false).\r\n     * A readonly control will still raise pointer events but will not react to them\r\n     */\r\n    public get isReadOnly() {\r\n        return this._isReadOnly;\r\n    }\r\n\r\n    public set isReadOnly(value: boolean) {\r\n        this._isReadOnly = value;\r\n    }\r\n\r\n    /**\r\n     * Gets the transformed measure, that is the bounding box of the control after applying all transformations\r\n     */\r\n    public get transformedMeasure(): Measure {\r\n        return this._evaluatedMeasure;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets an object used to store user defined information for the node\r\n     */\r\n    @serialize()\r\n    public metadata: any = null;\r\n\r\n    /** Gets or sets a boolean indicating if the control can be hit with pointer events */\r\n    @serialize()\r\n    public isHitTestVisible = true;\r\n    /** Gets or sets a boolean indicating if the control can block pointer events. False by default except on the following controls:\r\n     * * Button controls (Button, RadioButton, ToggleButton)\r\n     * * Checkbox\r\n     * * ColorPicker\r\n     * * InputText\r\n     * * Slider\r\n     */\r\n    @serialize()\r\n    public isPointerBlocker = false;\r\n    /** Gets or sets a boolean indicating if the control can be focusable */\r\n    @serialize()\r\n    public isFocusInvisible = false;\r\n\r\n    protected _clipChildren = true;\r\n    /**\r\n     * Sets/Gets a boolean indicating if the children are clipped to the current control bounds.\r\n     * Please note that not clipping children may generate issues with adt.useInvalidateRectOptimization so it is recommended to turn this optimization off if you want to use unclipped children\r\n     */\r\n    public set clipChildren(value: boolean) {\r\n        this._clipChildren = value;\r\n    }\r\n\r\n    @serialize()\r\n    public get clipChildren() {\r\n        return this._clipChildren;\r\n    }\r\n\r\n    protected _clipContent = true;\r\n    /**\r\n     * Sets/Gets a boolean indicating that control content must be clipped\r\n     * Please note that not clipping content may generate issues with adt.useInvalidateRectOptimization so it is recommended to turn this optimization off if you want to use unclipped children\r\n     */\r\n    public set clipContent(value: boolean) {\r\n        this._clipContent = value;\r\n    }\r\n\r\n    @serialize()\r\n    public get clipContent() {\r\n        return this._clipContent;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating that the current control should cache its rendering (useful when the control does not change often)\r\n     */\r\n    @serialize()\r\n    public useBitmapCache = false;\r\n\r\n    private _cacheData: Nullable<ImageData>;\r\n\r\n    private _shadowOffsetX = 0;\r\n    /** Gets or sets a value indicating the offset to apply on X axis to render the shadow */\r\n    @serialize()\r\n    public get shadowOffsetX() {\r\n        return this._shadowOffsetX;\r\n    }\r\n\r\n    public set shadowOffsetX(value: number) {\r\n        if (this._shadowOffsetX === value) {\r\n            return;\r\n        }\r\n\r\n        this._shadowOffsetX = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    private _shadowOffsetY = 0;\r\n    /** Gets or sets a value indicating the offset to apply on Y axis to render the shadow */\r\n    @serialize()\r\n    public get shadowOffsetY() {\r\n        return this._shadowOffsetY;\r\n    }\r\n\r\n    public set shadowOffsetY(value: number) {\r\n        if (this._shadowOffsetY === value) {\r\n            return;\r\n        }\r\n\r\n        this._shadowOffsetY = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    private _shadowBlur = 0;\r\n    private _previousShadowBlur = 0;\r\n    /** Gets or sets a value indicating the amount of blur to use to render the shadow */\r\n    @serialize()\r\n    public get shadowBlur() {\r\n        return this._shadowBlur;\r\n    }\r\n\r\n    public set shadowBlur(value: number) {\r\n        if (this._shadowBlur === value) {\r\n            return;\r\n        }\r\n\r\n        this._previousShadowBlur = this._shadowBlur;\r\n\r\n        this._shadowBlur = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    private _shadowColor = \"black\";\r\n    /** Gets or sets a value indicating the color of the shadow (black by default ie. \"#000\") */\r\n    @serialize()\r\n    public get shadowColor() {\r\n        return this._shadowColor;\r\n    }\r\n\r\n    public set shadowColor(value: string) {\r\n        if (this._shadowColor === value) {\r\n            return;\r\n        }\r\n\r\n        this._shadowColor = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the cursor to use when the control is hovered */\r\n    @serialize()\r\n    public hoverCursor = \"\";\r\n\r\n    /** @internal */\r\n    protected _linkOffsetX = new ValueAndUnit(0);\r\n    /** @internal */\r\n    protected _linkOffsetY = new ValueAndUnit(0);\r\n\r\n    // Properties\r\n\r\n    /** Gets the control type name */\r\n    public get typeName(): string {\r\n        return this._getTypeName();\r\n    }\r\n\r\n    /**\r\n     * Get the current class name of the control.\r\n     * @returns current class name\r\n     */\r\n    public getClassName(): string {\r\n        return this._getTypeName();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the accessibility tag to describe the control for accessibility purpose.\r\n     * By default, GUI controls already indicate accessibility info, but one can override the info using this tag.\r\n     */\r\n    public set accessibilityTag(value: Nullable<IAccessibilityTag>) {\r\n        this._accessibilityTag = value;\r\n        this.onAccessibilityTagChangedObservable.notifyObservers(value);\r\n    }\r\n\r\n    public get accessibilityTag() {\r\n        return this._accessibilityTag;\r\n    }\r\n\r\n    protected _accessibilityTag: Nullable<IAccessibilityTag> = null;\r\n\r\n    public onAccessibilityTagChangedObservable = new Observable<Nullable<IAccessibilityTag>>();\r\n\r\n    /**\r\n     * An event triggered when pointer wheel is scrolled\r\n     */\r\n    public onWheelObservable = new Observable<Vector2>();\r\n    /**\r\n     * An event triggered when the pointer moves over the control.\r\n     */\r\n    public onPointerMoveObservable = new Observable<Vector2>();\r\n\r\n    /**\r\n     * An event triggered when the pointer moves out of the control.\r\n     */\r\n    public onPointerOutObservable = new Observable<Control>();\r\n\r\n    /**\r\n     * An event triggered when the pointer taps the control\r\n     */\r\n    public onPointerDownObservable = new Observable<Vector2WithInfo>();\r\n\r\n    /**\r\n     * An event triggered when pointer up\r\n     */\r\n    public onPointerUpObservable = new Observable<Vector2WithInfo>();\r\n\r\n    /**\r\n     * An event triggered when a control is clicked on\r\n     */\r\n    public onPointerClickObservable = new Observable<Vector2WithInfo>();\r\n\r\n    /**\r\n     * An event triggered when pointer enters the control\r\n     */\r\n    public onPointerEnterObservable = new Observable<Control>();\r\n\r\n    /**\r\n     * An event triggered when the control is marked as dirty\r\n     */\r\n    public onDirtyObservable = new Observable<Control>();\r\n\r\n    /**\r\n     * An event triggered before drawing the control\r\n     */\r\n    public onBeforeDrawObservable = new Observable<Control>();\r\n\r\n    /**\r\n     * An event triggered after the control was drawn\r\n     */\r\n    public onAfterDrawObservable = new Observable<Control>();\r\n\r\n    /**\r\n     * An event triggered when the control has been disposed\r\n     */\r\n    public onDisposeObservable = new Observable<Control>();\r\n\r\n    /**\r\n     * An event triggered when the control isVisible is changed\r\n     */\r\n    public onIsVisibleChangedObservable = new Observable<boolean>();\r\n\r\n    /**\r\n     * Get the hosting AdvancedDynamicTexture\r\n     */\r\n    public get host(): AdvancedDynamicTexture {\r\n        return this._host;\r\n    }\r\n\r\n    /** Gets or set information about font offsets (used to render and align text) */\r\n    @serialize()\r\n    public get fontOffset(): { ascent: number; height: number; descent: number } {\r\n        return this._fontOffset;\r\n    }\r\n\r\n    public set fontOffset(offset: { ascent: number; height: number; descent: number }) {\r\n        this._fontOffset = offset;\r\n    }\r\n\r\n    /** Gets or sets alpha value for the control (1 means opaque and 0 means entirely transparent) */\r\n    @serialize()\r\n    public get alpha(): number {\r\n        return this._alpha;\r\n    }\r\n\r\n    public set alpha(value: number) {\r\n        if (this._alpha === value) {\r\n            return;\r\n        }\r\n        this._alphaSet = true;\r\n        this._alpha = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a number indicating size of stroke we want to highlight the control with (mostly for debugging purpose)\r\n     */\r\n    public get highlightLineWidth(): number {\r\n        return this._highlightLineWidth;\r\n    }\r\n\r\n    public set highlightLineWidth(value: number) {\r\n        if (this._highlightLineWidth === value) {\r\n            return;\r\n        }\r\n\r\n        this._highlightLineWidth = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating that we want to highlight the control (mostly for debugging purpose)\r\n     */\r\n    public get isHighlighted(): boolean {\r\n        return this._isHighlighted;\r\n    }\r\n\r\n    public set isHighlighted(value: boolean) {\r\n        if (this._isHighlighted === value) {\r\n            return;\r\n        }\r\n\r\n        this._isHighlighted = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a string defining the color to use for highlighting this control\r\n     */\r\n    public get highlightColor(): string {\r\n        return this._highlightColor;\r\n    }\r\n\r\n    public set highlightColor(value: string) {\r\n        if (this._highlightColor === value) {\r\n            return;\r\n        }\r\n\r\n        this._highlightColor = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets a value indicating the scale factor on X axis (1 by default)\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#rotation-and-scaling\r\n     */\r\n    @serialize()\r\n    public get scaleX(): number {\r\n        return this._scaleX;\r\n    }\r\n\r\n    public set scaleX(value: number) {\r\n        if (this._scaleX === value) {\r\n            return;\r\n        }\r\n\r\n        this._scaleX = value;\r\n        this._markAsDirty();\r\n        this._markMatrixAsDirty();\r\n    }\r\n\r\n    /** Gets or sets a value indicating the scale factor on Y axis (1 by default)\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#rotation-and-scaling\r\n     */\r\n    @serialize()\r\n    public get scaleY(): number {\r\n        return this._scaleY;\r\n    }\r\n\r\n    public set scaleY(value: number) {\r\n        if (this._scaleY === value) {\r\n            return;\r\n        }\r\n\r\n        this._scaleY = value;\r\n        this._markAsDirty();\r\n        this._markMatrixAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the rotation angle (0 by default)\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#rotation-and-scaling\r\n     */\r\n    @serialize()\r\n    public get rotation(): number {\r\n        return this._rotation;\r\n    }\r\n\r\n    public set rotation(value: number) {\r\n        if (this._rotation === value) {\r\n            return;\r\n        }\r\n\r\n        this._rotation = value;\r\n        this._markAsDirty();\r\n        this._markMatrixAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the transformation center on Y axis (0 by default)\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#rotation-and-scaling\r\n     */\r\n    @serialize()\r\n    public get transformCenterY(): number {\r\n        return this._transformCenterY;\r\n    }\r\n\r\n    public set transformCenterY(value: number) {\r\n        if (this._transformCenterY === value) {\r\n            return;\r\n        }\r\n\r\n        this._transformCenterY = value;\r\n        this._markAsDirty();\r\n        this._markMatrixAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the transformation center on X axis (0 by default)\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#rotation-and-scaling\r\n     */\r\n    @serialize()\r\n    public get transformCenterX(): number {\r\n        return this._transformCenterX;\r\n    }\r\n\r\n    public set transformCenterX(value: number) {\r\n        if (this._transformCenterX === value) {\r\n            return;\r\n        }\r\n\r\n        this._transformCenterX = value;\r\n        this._markAsDirty();\r\n        this._markMatrixAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the horizontal alignment\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#alignments\r\n     */\r\n    @serialize()\r\n    public get horizontalAlignment(): number {\r\n        return this._horizontalAlignment;\r\n    }\r\n\r\n    public set horizontalAlignment(value: number) {\r\n        if (this._horizontalAlignment === value) {\r\n            return;\r\n        }\r\n\r\n        this._horizontalAlignment = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the vertical alignment\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#alignments\r\n     */\r\n    @serialize()\r\n    public get verticalAlignment(): number {\r\n        return this._verticalAlignment;\r\n    }\r\n\r\n    public set verticalAlignment(value: number) {\r\n        if (this._verticalAlignment === value) {\r\n            return;\r\n        }\r\n\r\n        this._verticalAlignment = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    private _fixedRatio = 0;\r\n    public set fixedRatio(value: number) {\r\n        if (this._fixedRatio === value) {\r\n            return;\r\n        }\r\n\r\n        this._fixedRatio = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a fixed ratio for this control.\r\n     * When different from 0, the ratio is used to compute the \"second\" dimension.\r\n     * The first dimension used in the computation is the last one set (by setting width / widthInPixels or height / heightInPixels), and the\r\n     * second dimension is computed as first dimension * fixedRatio\r\n     */\r\n    @serialize()\r\n    public get fixedRatio(): number {\r\n        return this._fixedRatio;\r\n    }\r\n\r\n    private _fixedRatioMasterIsWidth = true;\r\n    set fixedRatioMasterIsWidth(value: boolean) {\r\n        if (this._fixedRatioMasterIsWidth === value) {\r\n            return;\r\n        }\r\n        this._fixedRatioMasterIsWidth = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating that the fixed ratio is set on the width instead of the height. True by default.\r\n     * When the height of a control is set, this property is changed to false.\r\n     */\r\n    @serialize()\r\n    get fixedRatioMasterIsWidth(): boolean {\r\n        return this._fixedRatioMasterIsWidth;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets control width\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#position-and-size\r\n     */\r\n    @serialize()\r\n    public get width(): string | number {\r\n        return this._width.toString(this._host);\r\n    }\r\n\r\n    public set width(value: string | number) {\r\n        this._fixedRatioMasterIsWidth = true;\r\n\r\n        if (this._width.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._width.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the control width in pixel\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#position-and-size\r\n     */\r\n    public get widthInPixels(): number {\r\n        return this._width.getValueInPixel(this._host, this._cachedParentMeasure.width);\r\n    }\r\n\r\n    public set widthInPixels(value: number) {\r\n        if (isNaN(value)) {\r\n            return;\r\n        }\r\n        this._fixedRatioMasterIsWidth = true;\r\n        this.width = value + \"px\";\r\n    }\r\n\r\n    /**\r\n     * Gets or sets control height\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#position-and-size\r\n     */\r\n    @serialize()\r\n    public get height(): string | number {\r\n        return this._height.toString(this._host);\r\n    }\r\n\r\n    public set height(value: string | number) {\r\n        this._fixedRatioMasterIsWidth = false;\r\n\r\n        if (this._height.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._height.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets control height in pixel\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#position-and-size\r\n     */\r\n    public get heightInPixels(): number {\r\n        return this._height.getValueInPixel(this._host, this._cachedParentMeasure.height);\r\n    }\r\n\r\n    public set heightInPixels(value: number) {\r\n        if (isNaN(value)) {\r\n            return;\r\n        }\r\n        this._fixedRatioMasterIsWidth = false;\r\n        this.height = value + \"px\";\r\n    }\r\n\r\n    /** Gets or set font family */\r\n    public get fontFamily(): string {\r\n        return this._fontFamily;\r\n    }\r\n\r\n    public set fontFamily(value: string) {\r\n        if (this._fontFamily === value) {\r\n            return;\r\n        }\r\n\r\n        this._fontFamily = value;\r\n        this._resetFontCache();\r\n    }\r\n\r\n    /** Gets or sets font style */\r\n    public get fontStyle(): string {\r\n        return this._fontStyle;\r\n    }\r\n\r\n    public set fontStyle(value: string) {\r\n        if (this._fontStyle === value) {\r\n            return;\r\n        }\r\n\r\n        this._fontStyle = value;\r\n        this._resetFontCache();\r\n    }\r\n\r\n    /** Gets or sets font weight */\r\n    public get fontWeight(): string {\r\n        return this._fontWeight;\r\n    }\r\n\r\n    public set fontWeight(value: string) {\r\n        if (this._fontWeight === value) {\r\n            return;\r\n        }\r\n\r\n        this._fontWeight = value;\r\n        this._resetFontCache();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets style\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#styles\r\n     */\r\n    @serialize()\r\n    public get style(): Nullable<Style> {\r\n        return this._style;\r\n    }\r\n\r\n    public set style(value: Nullable<Style>) {\r\n        if (this._style) {\r\n            this._style.onChangedObservable.remove(this._styleObserver);\r\n            this._styleObserver = null;\r\n        }\r\n\r\n        this._style = value;\r\n\r\n        if (this._style) {\r\n            this._styleObserver = this._style.onChangedObservable.add(() => {\r\n                this._markAsDirty();\r\n                this._resetFontCache();\r\n            });\r\n        }\r\n\r\n        this._markAsDirty();\r\n        this._resetFontCache();\r\n    }\r\n\r\n    /** @internal */\r\n    public get _isFontSizeInPercentage(): boolean {\r\n        return this._fontSize.isPercentage;\r\n    }\r\n\r\n    /** Gets or sets font size in pixels */\r\n    public get fontSizeInPixels(): number {\r\n        const fontSizeToUse = this._style ? this._style._fontSize : this._fontSize;\r\n\r\n        if (fontSizeToUse.isPixel) {\r\n            return fontSizeToUse.getValue(this._host);\r\n        }\r\n\r\n        return fontSizeToUse.getValueInPixel(this._host, this._tempParentMeasure.height || this._cachedParentMeasure.height);\r\n    }\r\n\r\n    public set fontSizeInPixels(value: number) {\r\n        if (isNaN(value)) {\r\n            return;\r\n        }\r\n        this.fontSize = value + \"px\";\r\n    }\r\n\r\n    /** Gets or sets font size */\r\n    public get fontSize(): string | number {\r\n        return this._fontSize.toString(this._host);\r\n    }\r\n\r\n    public set fontSize(value: string | number) {\r\n        if (this._fontSize.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._fontSize.fromString(value)) {\r\n            this._markAsDirty();\r\n            this._resetFontCache();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets foreground color */\r\n    @serialize()\r\n    public get color(): string {\r\n        return this._color;\r\n    }\r\n\r\n    public set color(value: string) {\r\n        if (this._color === value) {\r\n            return;\r\n        }\r\n\r\n        this._color = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets gradient. Setting a gradient will override the color */\r\n    @serialize()\r\n    public get gradient(): Nullable<BaseGradient> {\r\n        return this._gradient;\r\n    }\r\n\r\n    public set gradient(value: Nullable<BaseGradient>) {\r\n        if (this._gradient === value) {\r\n            return;\r\n        }\r\n\r\n        this._gradient = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets z index which is used to reorder controls on the z axis */\r\n    @serialize()\r\n    public get zIndex(): number {\r\n        return this._zIndex;\r\n    }\r\n\r\n    public set zIndex(value: number) {\r\n        if (this.zIndex === value) {\r\n            return;\r\n        }\r\n\r\n        this._zIndex = value;\r\n\r\n        if (this.parent) {\r\n            this.parent._reOrderControl(this);\r\n        }\r\n    }\r\n\r\n    /** Gets or sets a boolean indicating if the control can be rendered */\r\n    @serialize()\r\n    public get notRenderable(): boolean {\r\n        return this._doNotRender;\r\n    }\r\n\r\n    public set notRenderable(value: boolean) {\r\n        if (this._doNotRender === value) {\r\n            return;\r\n        }\r\n\r\n        this._doNotRender = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets a boolean indicating if the control is visible */\r\n    @serialize()\r\n    public get isVisible(): boolean {\r\n        return this._isVisible;\r\n    }\r\n\r\n    public set isVisible(value: boolean) {\r\n        if (this._isVisible === value) {\r\n            return;\r\n        }\r\n\r\n        this._isVisible = value;\r\n        this._markAsDirty(true);\r\n\r\n        this.onIsVisibleChangedObservable.notifyObservers(value);\r\n    }\r\n\r\n    /** Gets a boolean indicating that the control needs to update its rendering */\r\n    public get isDirty(): boolean {\r\n        return this._isDirty;\r\n    }\r\n\r\n    /**\r\n     * Gets the current linked mesh (or null if none)\r\n     */\r\n    public get linkedMesh(): Nullable<TransformNode> {\r\n        return this._linkedMesh;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a value indicating the padding should work like in CSS.\r\n     * Basically, it will add the padding amount on each side of the parent control for its children.\r\n     */\r\n    @serialize()\r\n    public get descendantsOnlyPadding(): boolean {\r\n        return this._descendantsOnlyPadding;\r\n    }\r\n\r\n    public set descendantsOnlyPadding(value: boolean) {\r\n        if (this._descendantsOnlyPadding === value) {\r\n            return;\r\n        }\r\n\r\n        this._descendantsOnlyPadding = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a value indicating the padding to use on the left of the control\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#position-and-size\r\n     */\r\n    @serialize()\r\n    public get paddingLeft(): string | number {\r\n        return this._paddingLeft.toString(this._host);\r\n    }\r\n\r\n    public set paddingLeft(value: string | number) {\r\n        if (this._paddingLeft.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a value indicating the padding in pixels to use on the left of the control\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#position-and-size\r\n     */\r\n    public get paddingLeftInPixels(): number {\r\n        return this._paddingLeft.getValueInPixel(this._host, this._cachedParentMeasure.width);\r\n    }\r\n\r\n    public set paddingLeftInPixels(value: number) {\r\n        if (isNaN(value)) {\r\n            return;\r\n        }\r\n        this.paddingLeft = value + \"px\";\r\n    }\r\n\r\n    /** @internal */\r\n    public get _paddingLeftInPixels(): number {\r\n        if (this._descendantsOnlyPadding) {\r\n            return 0;\r\n        }\r\n\r\n        return this.paddingLeftInPixels;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a value indicating the padding to use on the right of the control\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#position-and-size\r\n     */\r\n    @serialize()\r\n    public get paddingRight(): string | number {\r\n        return this._paddingRight.toString(this._host);\r\n    }\r\n\r\n    public set paddingRight(value: string | number) {\r\n        if (this._paddingRight.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a value indicating the padding in pixels to use on the right of the control\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#position-and-size\r\n     */\r\n    public get paddingRightInPixels(): number {\r\n        return this._paddingRight.getValueInPixel(this._host, this._cachedParentMeasure.width);\r\n    }\r\n\r\n    public set paddingRightInPixels(value: number) {\r\n        if (isNaN(value)) {\r\n            return;\r\n        }\r\n        this.paddingRight = value + \"px\";\r\n    }\r\n\r\n    /** @internal */\r\n    public get _paddingRightInPixels(): number {\r\n        if (this._descendantsOnlyPadding) {\r\n            return 0;\r\n        }\r\n\r\n        return this.paddingRightInPixels;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a value indicating the padding to use on the top of the control\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#position-and-size\r\n     */\r\n    @serialize()\r\n    public get paddingTop(): string | number {\r\n        return this._paddingTop.toString(this._host);\r\n    }\r\n\r\n    public set paddingTop(value: string | number) {\r\n        if (this._paddingTop.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a value indicating the padding in pixels to use on the top of the control\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#position-and-size\r\n     */\r\n    public get paddingTopInPixels(): number {\r\n        return this._paddingTop.getValueInPixel(this._host, this._cachedParentMeasure.height);\r\n    }\r\n\r\n    public set paddingTopInPixels(value: number) {\r\n        if (isNaN(value)) {\r\n            return;\r\n        }\r\n        this.paddingTop = value + \"px\";\r\n    }\r\n\r\n    /** @internal */\r\n    public get _paddingTopInPixels(): number {\r\n        if (this._descendantsOnlyPadding) {\r\n            return 0;\r\n        }\r\n\r\n        return this.paddingTopInPixels;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a value indicating the padding to use on the bottom of the control\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#position-and-size\r\n     */\r\n    @serialize()\r\n    public get paddingBottom(): string | number {\r\n        return this._paddingBottom.toString(this._host);\r\n    }\r\n\r\n    public set paddingBottom(value: string | number) {\r\n        if (this._paddingBottom.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a value indicating the padding in pixels to use on the bottom of the control\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#position-and-size\r\n     */\r\n    public get paddingBottomInPixels(): number {\r\n        return this._paddingBottom.getValueInPixel(this._host, this._cachedParentMeasure.height);\r\n    }\r\n\r\n    public set paddingBottomInPixels(value: number) {\r\n        if (isNaN(value)) {\r\n            return;\r\n        }\r\n        this.paddingBottom = value + \"px\";\r\n    }\r\n\r\n    /** @internal */\r\n    public get _paddingBottomInPixels(): number {\r\n        if (this._descendantsOnlyPadding) {\r\n            return 0;\r\n        }\r\n\r\n        return this.paddingBottomInPixels;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a value indicating the left coordinate of the control\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#position-and-size\r\n     */\r\n    @serialize()\r\n    public get left(): string | number {\r\n        return this._left.toString(this._host);\r\n    }\r\n\r\n    public set left(value: string | number) {\r\n        if (this._left.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a value indicating the left coordinate in pixels of the control\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#position-and-size\r\n     */\r\n    public get leftInPixels(): number {\r\n        return this._left.getValueInPixel(this._host, this._cachedParentMeasure.width);\r\n    }\r\n\r\n    public set leftInPixels(value: number) {\r\n        if (isNaN(value)) {\r\n            return;\r\n        }\r\n        this.left = value + \"px\";\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a value indicating the top coordinate of the control\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#position-and-size\r\n     */\r\n    @serialize()\r\n    public get top(): string | number {\r\n        return this._top.toString(this._host);\r\n    }\r\n\r\n    public set top(value: string | number) {\r\n        if (this._top.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a value indicating the top coordinate in pixels of the control\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#position-and-size\r\n     */\r\n    public get topInPixels(): number {\r\n        return this._top.getValueInPixel(this._host, this._cachedParentMeasure.height);\r\n    }\r\n\r\n    public set topInPixels(value: number) {\r\n        if (isNaN(value)) {\r\n            return;\r\n        }\r\n        this.top = value + \"px\";\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a value indicating the offset on X axis to the linked mesh\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#tracking-positions\r\n     */\r\n    @serialize()\r\n    public get linkOffsetX(): string | number {\r\n        return this._linkOffsetX.toString(this._host);\r\n    }\r\n\r\n    public set linkOffsetX(value: string | number) {\r\n        if (this._linkOffsetX.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a value indicating the offset in pixels on X axis to the linked mesh\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#tracking-positions\r\n     */\r\n    public get linkOffsetXInPixels(): number {\r\n        return this._linkOffsetX.getValueInPixel(this._host, this._cachedParentMeasure.width);\r\n    }\r\n\r\n    public set linkOffsetXInPixels(value: number) {\r\n        if (isNaN(value)) {\r\n            return;\r\n        }\r\n        this.linkOffsetX = value + \"px\";\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a value indicating the offset on Y axis to the linked mesh\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#tracking-positions\r\n     */\r\n    @serialize()\r\n    public get linkOffsetY(): string | number {\r\n        return this._linkOffsetY.toString(this._host);\r\n    }\r\n\r\n    public set linkOffsetY(value: string | number) {\r\n        if (this._linkOffsetY.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a value indicating the offset in pixels on Y axis to the linked mesh\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#tracking-positions\r\n     */\r\n    public get linkOffsetYInPixels(): number {\r\n        return this._linkOffsetY.getValueInPixel(this._host, this._cachedParentMeasure.height);\r\n    }\r\n\r\n    public set linkOffsetYInPixels(value: number) {\r\n        if (isNaN(value)) {\r\n            return;\r\n        }\r\n        this.linkOffsetY = value + \"px\";\r\n    }\r\n\r\n    /** Gets the center coordinate on X axis */\r\n    public get centerX(): number {\r\n        return this._currentMeasure.left + this._currentMeasure.width / 2;\r\n    }\r\n\r\n    /** Gets the center coordinate on Y axis */\r\n    public get centerY(): number {\r\n        return this._currentMeasure.top + this._currentMeasure.height / 2;\r\n    }\r\n\r\n    /** Gets or sets if control is Enabled */\r\n    @serialize()\r\n    public get isEnabled(): boolean {\r\n        return this._isEnabled;\r\n    }\r\n\r\n    public set isEnabled(value: boolean) {\r\n        if (this._isEnabled === value) {\r\n            return;\r\n        }\r\n\r\n        this._isEnabled = value;\r\n        this._markAsDirty();\r\n        // if this control or any of it's descendants are under a pointer, we need to fire a pointerOut event\r\n        const recursivelyFirePointerOut = (control: Control) => {\r\n            if (!control.host) {\r\n                return;\r\n            }\r\n            for (const pointer in control.host._lastControlOver) {\r\n                if (control === this.host._lastControlOver[pointer]) {\r\n                    control._onPointerOut(control, null, true);\r\n                    delete control.host._lastControlOver[pointer];\r\n                }\r\n            }\r\n            if ((control as Container).children !== undefined) {\r\n                (control as Container).children.forEach(recursivelyFirePointerOut);\r\n            }\r\n        };\r\n        recursivelyFirePointerOut(this);\r\n        this.onEnabledStateChangedObservable.notifyObservers(value);\r\n    }\r\n    /** Gets or sets background color of control if it's disabled. Only applies to Button class. */\r\n    @serialize()\r\n    public get disabledColor(): string {\r\n        return this._disabledColor;\r\n    }\r\n\r\n    public set disabledColor(value: string) {\r\n        if (this._disabledColor === value) {\r\n            return;\r\n        }\r\n\r\n        this._disabledColor = value;\r\n        this._markAsDirty();\r\n    }\r\n    /** Gets or sets front color of control if it's disabled. Only applies to Checkbox class. */\r\n    @serialize()\r\n    public get disabledColorItem(): string {\r\n        return this._disabledColorItem;\r\n    }\r\n\r\n    public set disabledColorItem(value: string) {\r\n        if (this._disabledColorItem === value) {\r\n            return;\r\n        }\r\n\r\n        this._disabledColorItem = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets/sets the overlap group of the control.\r\n     * Controls with overlapGroup set to a number can be deoverlapped.\r\n     * Controls with overlapGroup set to undefined are not deoverlapped.\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#deoverlapping\r\n     */\r\n    @serialize()\r\n    public overlapGroup?: number;\r\n    /**\r\n     * Gets/sets the deoverlap movement multiplier\r\n     */\r\n    @serialize()\r\n    public overlapDeltaMultiplier?: number;\r\n\r\n    /**\r\n     * Array of animations\r\n     */\r\n    animations: Nullable<Animation[]> = null;\r\n\r\n    // Functions\r\n\r\n    /**\r\n     * Creates a new control\r\n     * @param name defines the name of the control\r\n     */\r\n    constructor(\r\n        /** defines the name of the control */\r\n        public name?: string\r\n    ) {}\r\n\r\n    /** @internal */\r\n    protected _getTypeName(): string {\r\n        return \"Control\";\r\n    }\r\n\r\n    /**\r\n     * Gets the first ascendant in the hierarchy of the given type\r\n     * @param className defines the required type\r\n     * @returns the ascendant or null if not found\r\n     */\r\n    public getAscendantOfClass(className: string): Nullable<Control> {\r\n        if (!this.parent) {\r\n            return null;\r\n        }\r\n\r\n        if (this.parent.getClassName() === className) {\r\n            return this.parent;\r\n        }\r\n\r\n        return this.parent.getAscendantOfClass(className);\r\n    }\r\n\r\n    /**\r\n     * Mark control element as dirty\r\n     * @param force force non visible elements to be marked too\r\n     */\r\n    public markAsDirty(force = false): void {\r\n        this._markAsDirty(force);\r\n    }\r\n\r\n    /**\r\n     * Mark the element and its children as dirty\r\n     */\r\n    public markAllAsDirty(): void {\r\n        this._markAllAsDirty();\r\n    }\r\n\r\n    /** @internal */\r\n    public _resetFontCache(): void {\r\n        this._fontSet = true;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Determines if a container is an ascendant of the current control\r\n     * @param container defines the container to look for\r\n     * @returns true if the container is one of the ascendant of the control\r\n     */\r\n    public isAscendant(container: Control): boolean {\r\n        if (!this.parent) {\r\n            return false;\r\n        }\r\n\r\n        if (this.parent === container) {\r\n            return true;\r\n        }\r\n\r\n        return this.parent.isAscendant(container);\r\n    }\r\n\r\n    /**\r\n     * Gets coordinates in local control space\r\n     * @param globalCoordinates defines the coordinates to transform\r\n     * @returns the new coordinates in local space\r\n     */\r\n    public getLocalCoordinates(globalCoordinates: Vector2): Vector2 {\r\n        const result = Vector2.Zero();\r\n\r\n        this.getLocalCoordinatesToRef(globalCoordinates, result);\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Gets coordinates in local control space\r\n     * @param globalCoordinates defines the coordinates to transform\r\n     * @param result defines the target vector2 where to store the result\r\n     * @returns the current control\r\n     */\r\n    public getLocalCoordinatesToRef(globalCoordinates: Vector2, result: Vector2): Control {\r\n        result.x = globalCoordinates.x - this._currentMeasure.left;\r\n        result.y = globalCoordinates.y - this._currentMeasure.top;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Gets coordinates in parent local control space\r\n     * @param globalCoordinates defines the coordinates to transform\r\n     * @returns the new coordinates in parent local space\r\n     */\r\n    public getParentLocalCoordinates(globalCoordinates: Vector2): Vector2 {\r\n        const result = Vector2.Zero();\r\n\r\n        result.x = globalCoordinates.x - this._cachedParentMeasure.left;\r\n        result.y = globalCoordinates.y - this._cachedParentMeasure.top;\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Move the current control to a vector3 position projected onto the screen.\r\n     * @param position defines the target position\r\n     * @param scene defines the hosting scene\r\n     */\r\n    public moveToVector3(position: Vector3, scene: Scene): void {\r\n        if (!this._host || this.parent !== this._host._rootContainer) {\r\n            Tools.Error(\"Cannot move a control to a vector3 if the control is not at root level\");\r\n            return;\r\n        }\r\n\r\n        this.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        this.verticalAlignment = Control.VERTICAL_ALIGNMENT_TOP;\r\n\r\n        const globalViewport = this._host._getGlobalViewport();\r\n        const projectedPosition = Vector3.Project(position, Matrix.IdentityReadOnly, scene.getTransformMatrix(), globalViewport);\r\n\r\n        this._moveToProjectedPosition(projectedPosition);\r\n\r\n        if (projectedPosition.z < 0 || projectedPosition.z > 1) {\r\n            this.notRenderable = true;\r\n            return;\r\n        }\r\n        this.notRenderable = false;\r\n    }\r\n\r\n    /**\r\n     * Will store all controls that have this control as ascendant in a given array\r\n     * @param results defines the array where to store the descendants\r\n     * @param directDescendantsOnly defines if true only direct descendants of 'this' will be considered, if false direct and also indirect (children of children, an so on in a recursive manner) descendants of 'this' will be considered\r\n     * @param predicate defines an optional predicate that will be called on every evaluated child, the predicate must return true for a given child to be part of the result, otherwise it will be ignored\r\n     */\r\n    public getDescendantsToRef(results: Control[], directDescendantsOnly: boolean = false, predicate?: (control: Control) => boolean): void {\r\n        // Do nothing by default\r\n    }\r\n\r\n    /**\r\n     * Will return all controls that have this control as ascendant\r\n     * @param directDescendantsOnly defines if true only direct descendants of 'this' will be considered, if false direct and also indirect (children of children, an so on in a recursive manner) descendants of 'this' will be considered\r\n     * @param predicate defines an optional predicate that will be called on every evaluated child, the predicate must return true for a given child to be part of the result, otherwise it will be ignored\r\n     * @returns all child controls\r\n     */\r\n    public getDescendants(directDescendantsOnly?: boolean, predicate?: (control: Control) => boolean): Control[] {\r\n        const results = new Array<Control>();\r\n\r\n        this.getDescendantsToRef(results, directDescendantsOnly, predicate);\r\n\r\n        return results;\r\n    }\r\n\r\n    /**\r\n     * Link current control with a target mesh\r\n     * @param mesh defines the mesh to link with\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#tracking-positions\r\n     */\r\n    public linkWithMesh(mesh: Nullable<TransformNode>): void {\r\n        if (!this._host || (this.parent && this.parent !== this._host._rootContainer)) {\r\n            if (mesh) {\r\n                Tools.Error(\"Cannot link a control to a mesh if the control is not at root level\");\r\n            }\r\n            return;\r\n        }\r\n\r\n        const index = this._host._linkedControls.indexOf(this);\r\n        if (index !== -1) {\r\n            this._linkedMesh = mesh;\r\n            if (!mesh) {\r\n                this._host._linkedControls.splice(index, 1);\r\n            }\r\n            return;\r\n        } else if (!mesh) {\r\n            return;\r\n        }\r\n\r\n        this.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        this.verticalAlignment = Control.VERTICAL_ALIGNMENT_TOP;\r\n        this._linkedMesh = mesh;\r\n        this._host._linkedControls.push(this);\r\n    }\r\n\r\n    /**\r\n     * Shorthand function to set the top, right, bottom, and left padding values on the control.\r\n     * @param { string | number} paddingTop - The value of the top padding.\r\n     * @param { string | number} paddingRight - The value of the right padding. If omitted, top is used.\r\n     * @param { string | number} paddingBottom - The value of the bottom padding. If omitted, top is used.\r\n     * @param { string | number} paddingLeft - The value of the left padding. If omitted, right is used.\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#position-and-size\r\n     */\r\n    public setPadding(paddingTop: string | number, paddingRight?: string | number, paddingBottom?: string | number, paddingLeft?: string | number) {\r\n        const top = paddingTop;\r\n        const right = paddingRight ?? top;\r\n        const bottom = paddingBottom ?? top;\r\n        const left = paddingLeft ?? right;\r\n\r\n        this.paddingTop = top;\r\n        this.paddingRight = right;\r\n        this.paddingBottom = bottom;\r\n        this.paddingLeft = left;\r\n    }\r\n\r\n    /**\r\n     * Shorthand funtion to set the top, right, bottom, and left padding values in pixels on the control.\r\n     * @param { number} paddingTop - The value in pixels of the top padding.\r\n     * @param { number} paddingRight - The value in pixels of the right padding. If omitted, top is used.\r\n     * @param { number} paddingBottom - The value in pixels of the bottom padding. If omitted, top is used.\r\n     * @param { number} paddingLeft - The value in pixels of the left padding. If omitted, right is used.\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#position-and-size\r\n     */\r\n    public setPaddingInPixels(paddingTop: number, paddingRight?: number, paddingBottom?: number, paddingLeft?: number) {\r\n        const top = paddingTop;\r\n        const right = paddingRight ?? top;\r\n        const bottom = paddingBottom ?? top;\r\n        const left = paddingLeft ?? right;\r\n\r\n        this.paddingTopInPixels = top;\r\n        this.paddingRightInPixels = right;\r\n        this.paddingBottomInPixels = bottom;\r\n        this.paddingLeftInPixels = left;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _moveToProjectedPosition(projectedPosition: Vector3): void {\r\n        const oldLeft = this._left.getValue(this._host);\r\n        const oldTop = this._top.getValue(this._host);\r\n\r\n        const parentMeasure = this.parent?._currentMeasure;\r\n        if (parentMeasure) {\r\n            this._processMeasures(parentMeasure, this._host.getContext());\r\n        }\r\n\r\n        let newLeft = projectedPosition.x + this._linkOffsetX.getValue(this._host) - this._currentMeasure.width / 2;\r\n        let newTop = projectedPosition.y + this._linkOffsetY.getValue(this._host) - this._currentMeasure.height / 2;\r\n\r\n        const leftAndTopIgnoreAdaptiveScaling = this._left.ignoreAdaptiveScaling && this._top.ignoreAdaptiveScaling;\r\n        if (leftAndTopIgnoreAdaptiveScaling) {\r\n            if (Math.abs(newLeft - oldLeft) < 0.5) {\r\n                newLeft = oldLeft;\r\n            }\r\n\r\n            if (Math.abs(newTop - oldTop) < 0.5) {\r\n                newTop = oldTop;\r\n            }\r\n        }\r\n\r\n        if (!leftAndTopIgnoreAdaptiveScaling && oldLeft === newLeft && oldTop === newTop) {\r\n            return;\r\n        }\r\n\r\n        this.left = newLeft + \"px\";\r\n        this.top = newTop + \"px\";\r\n\r\n        this._left.ignoreAdaptiveScaling = true;\r\n        this._top.ignoreAdaptiveScaling = true;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _offsetLeft(offset: number) {\r\n        this._isDirty = true;\r\n        this._currentMeasure.left += offset;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _offsetTop(offset: number) {\r\n        this._isDirty = true;\r\n        this._currentMeasure.top += offset;\r\n    }\r\n\r\n    /** @internal */\r\n    public _markMatrixAsDirty(): void {\r\n        this._isMatrixDirty = true;\r\n        this._flagDescendantsAsMatrixDirty();\r\n    }\r\n\r\n    /** @internal */\r\n    public _flagDescendantsAsMatrixDirty(): void {\r\n        // No child\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _intersectsRect(rect: Measure, context?: ICanvasRenderingContext) {\r\n        // make sure we are transformed correctly before checking intersections. no-op if nothing is dirty.\r\n        this._transform(context);\r\n        if (this._evaluatedMeasure.left >= rect.left + rect.width) {\r\n            return false;\r\n        }\r\n\r\n        if (this._evaluatedMeasure.top >= rect.top + rect.height) {\r\n            return false;\r\n        }\r\n\r\n        if (this._evaluatedMeasure.left + this._evaluatedMeasure.width <= rect.left) {\r\n            return false;\r\n        }\r\n\r\n        if (this._evaluatedMeasure.top + this._evaluatedMeasure.height <= rect.top) {\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /** @internal */\r\n    protected _computeAdditionalOffsetX() {\r\n        return 0;\r\n    }\r\n\r\n    /** @internal */\r\n    protected _computeAdditionalOffsetY() {\r\n        return 0;\r\n    }\r\n\r\n    /** @internal */\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    public invalidateRect() {\r\n        this._transform();\r\n        if (this.host && this.host.useInvalidateRectOptimization) {\r\n            // Rotate by transform to get the measure transformed to global space\r\n            this._currentMeasure.transformToRef(this._transformMatrix, this._tmpMeasureA);\r\n            // get the boudning box of the current measure and last frames measure in global space and invalidate it\r\n            // the previous measure is used to properly clear a control that is scaled down\r\n            Measure.CombineToRef(this._tmpMeasureA, this._prevCurrentMeasureTransformedIntoGlobalSpace, this._tmpMeasureA);\r\n\r\n            // Expand rect based on shadows\r\n            const shadowOffsetX = this.shadowOffsetX;\r\n            const shadowOffsetY = this.shadowOffsetY;\r\n            const shadowBlur = Math.max(this._previousShadowBlur, this.shadowBlur);\r\n\r\n            const leftShadowOffset = Math.min(Math.min(shadowOffsetX, 0) - shadowBlur * 2, 0);\r\n            const rightShadowOffset = Math.max(Math.max(shadowOffsetX, 0) + shadowBlur * 2, 0);\r\n            const topShadowOffset = Math.min(Math.min(shadowOffsetY, 0) - shadowBlur * 2, 0);\r\n            const bottomShadowOffset = Math.max(Math.max(shadowOffsetY, 0) + shadowBlur * 2, 0);\r\n\r\n            const offsetX = this._computeAdditionalOffsetX();\r\n            const offsetY = this._computeAdditionalOffsetY();\r\n\r\n            this.host.invalidateRect(\r\n                Math.floor(this._tmpMeasureA.left + leftShadowOffset - offsetX),\r\n                Math.floor(this._tmpMeasureA.top + topShadowOffset - offsetY),\r\n                Math.ceil(this._tmpMeasureA.left + this._tmpMeasureA.width + rightShadowOffset + offsetX),\r\n                Math.ceil(this._tmpMeasureA.top + this._tmpMeasureA.height + bottomShadowOffset + offsetY)\r\n            );\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _markAsDirty(force = false): void {\r\n        if (!this._isVisible && !force) {\r\n            return;\r\n        }\r\n\r\n        this._isDirty = true;\r\n        this._markMatrixAsDirty();\r\n\r\n        // Redraw only this rectangle\r\n        if (this._host) {\r\n            this._host.markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** @internal */\r\n    public _markAllAsDirty(): void {\r\n        this._markAsDirty();\r\n\r\n        if (this._font) {\r\n            this._prepareFont();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _link(host: AdvancedDynamicTexture): void {\r\n        this._host = host;\r\n        if (this._host) {\r\n            this.uniqueId = this._host.getScene()!.getUniqueId();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    protected _transform(context?: ICanvasRenderingContext): void {\r\n        if (!this._isMatrixDirty && this._scaleX === 1 && this._scaleY === 1 && this._rotation === 0) {\r\n            return;\r\n        }\r\n\r\n        // postTranslate\r\n        const offsetX = this._currentMeasure.width * this._transformCenterX + this._currentMeasure.left;\r\n        const offsetY = this._currentMeasure.height * this._transformCenterY + this._currentMeasure.top;\r\n        if (context) {\r\n            context.translate(offsetX, offsetY);\r\n\r\n            // rotate\r\n            context.rotate(this._rotation);\r\n\r\n            // scale\r\n            context.scale(this._scaleX, this._scaleY);\r\n\r\n            // preTranslate\r\n            context.translate(-offsetX, -offsetY);\r\n        }\r\n        // Need to update matrices?\r\n        if (this._isMatrixDirty || this._cachedOffsetX !== offsetX || this._cachedOffsetY !== offsetY) {\r\n            this._cachedOffsetX = offsetX;\r\n            this._cachedOffsetY = offsetY;\r\n            this._isMatrixDirty = false;\r\n            this._flagDescendantsAsMatrixDirty();\r\n\r\n            Matrix2D.ComposeToRef(-offsetX, -offsetY, this._rotation, this._scaleX, this._scaleY, this.parent ? this.parent._transformMatrix : null, this._transformMatrix);\r\n\r\n            this._transformMatrix.invertToRef(this._invertTransformMatrix);\r\n            this._currentMeasure.transformToRef(this._transformMatrix, this._evaluatedMeasure);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _renderHighlight(context: ICanvasRenderingContext): void {\r\n        if (!this.isHighlighted) {\r\n            return;\r\n        }\r\n\r\n        context.save();\r\n        context.strokeStyle = this._highlightColor;\r\n        context.lineWidth = this._highlightLineWidth;\r\n\r\n        this._renderHighlightSpecific(context);\r\n        context.restore();\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _renderHighlightSpecific(context: ICanvasRenderingContext): void {\r\n        context.strokeRect(this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);\r\n    }\r\n\r\n    protected _getColor(context: ICanvasRenderingContext): string | ICanvasGradient {\r\n        return this.gradient ? this.gradient.getCanvasGradient(context) : this.color;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    protected _applyStates(context: ICanvasRenderingContext): void {\r\n        if (this._isFontSizeInPercentage) {\r\n            this._fontSet = true;\r\n        }\r\n\r\n        if (this._host && this._host.useSmallestIdeal && !this._font) {\r\n            this._fontSet = true;\r\n        }\r\n\r\n        if (this._fontSet) {\r\n            this._prepareFont();\r\n            this._fontSet = false;\r\n        }\r\n\r\n        if (this._font) {\r\n            context.font = this._font;\r\n        }\r\n\r\n        if (this._color || this.gradient) {\r\n            context.fillStyle = this._getColor(context);\r\n        }\r\n\r\n        if (Control.AllowAlphaInheritance) {\r\n            context.globalAlpha *= this._alpha;\r\n        } else if (this._alphaSet) {\r\n            context.globalAlpha = this.parent && !this.parent.renderToIntermediateTexture ? this.parent.alpha * this._alpha : this._alpha;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _layout(parentMeasure: Measure, context: ICanvasRenderingContext): boolean {\r\n        if (!this.isDirty && (!this.isVisible || this.notRenderable)) {\r\n            return false;\r\n        }\r\n\r\n        if (this._isDirty || !this._cachedParentMeasure.isEqualsTo(parentMeasure)) {\r\n            this.host._numLayoutCalls++;\r\n\r\n            this._currentMeasure.addAndTransformToRef(\r\n                this._transformMatrix,\r\n                -this._paddingLeftInPixels | 0,\r\n                -this._paddingTopInPixels | 0,\r\n                this._paddingRightInPixels | 0,\r\n                this._paddingBottomInPixels | 0,\r\n                this._prevCurrentMeasureTransformedIntoGlobalSpace\r\n            );\r\n\r\n            context.save();\r\n\r\n            this._applyStates(context);\r\n\r\n            let rebuildCount = 0;\r\n            do {\r\n                this._rebuildLayout = false;\r\n                this._processMeasures(parentMeasure, context);\r\n                rebuildCount++;\r\n            } while (this._rebuildLayout && rebuildCount < 3);\r\n\r\n            if (rebuildCount >= 3) {\r\n                Logger.Error(`Layout cycle detected in GUI (Control name=${this.name}, uniqueId=${this.uniqueId})`);\r\n            }\r\n\r\n            context.restore();\r\n            this.invalidateRect();\r\n            this._evaluateClippingState(parentMeasure);\r\n        }\r\n\r\n        this._wasDirty = this._isDirty;\r\n        this._isDirty = false;\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    protected _processMeasures(parentMeasure: Measure, context: ICanvasRenderingContext): void {\r\n        this._tempPaddingMeasure.copyFrom(parentMeasure);\r\n\r\n        // Apply padding if in correct mode\r\n        if (this.parent && this.parent.descendantsOnlyPadding) {\r\n            this._tempPaddingMeasure.left += this.parent.paddingLeftInPixels;\r\n            this._tempPaddingMeasure.top += this.parent.paddingTopInPixels;\r\n            this._tempPaddingMeasure.width -= this.parent.paddingLeftInPixels + this.parent.paddingRightInPixels;\r\n            this._tempPaddingMeasure.height -= this.parent.paddingTopInPixels + this.parent.paddingBottomInPixels;\r\n        }\r\n\r\n        this._currentMeasure.copyFrom(this._tempPaddingMeasure);\r\n\r\n        // Let children take some pre-measurement actions\r\n        this._preMeasure(this._tempPaddingMeasure, context);\r\n\r\n        this._measure();\r\n\r\n        // Let children take some post-measurement actions\r\n        this._postMeasure(this._tempPaddingMeasure, context);\r\n\r\n        this._computeAlignment(this._tempPaddingMeasure, context);\r\n\r\n        // Convert to int values\r\n        this._currentMeasure.left = this._currentMeasure.left | 0;\r\n        this._currentMeasure.top = this._currentMeasure.top | 0;\r\n        this._currentMeasure.width = this._currentMeasure.width | 0;\r\n        this._currentMeasure.height = this._currentMeasure.height | 0;\r\n\r\n        // Let children add more features\r\n        this._additionalProcessing(this._tempPaddingMeasure, context);\r\n\r\n        this._cachedParentMeasure.copyFrom(this._tempPaddingMeasure);\r\n\r\n        this._currentMeasure.transformToRef(this._transformMatrix, this._evaluatedMeasure);\r\n        if (this.onDirtyObservable.hasObservers()) {\r\n            this.onDirtyObservable.notifyObservers(this);\r\n        }\r\n    }\r\n\r\n    protected _evaluateClippingState(parentMeasure: Measure) {\r\n        // Since transformMatrix is used here, we need to have it freshly computed\r\n        this._transform();\r\n        this._currentMeasure.transformToRef(this._transformMatrix, this._evaluatedMeasure);\r\n        if (this.parent && this.parent.clipChildren) {\r\n            parentMeasure.transformToRef(this.parent._transformMatrix, this._evaluatedParentMeasure);\r\n            // Early clip\r\n            if (this._evaluatedMeasure.left > this._evaluatedParentMeasure.left + this._evaluatedParentMeasure.width) {\r\n                this._isClipped = true;\r\n                return;\r\n            }\r\n\r\n            if (this._evaluatedMeasure.left + this._evaluatedMeasure.width < this._evaluatedParentMeasure.left) {\r\n                this._isClipped = true;\r\n                return;\r\n            }\r\n\r\n            if (this._evaluatedMeasure.top > this._evaluatedParentMeasure.top + this._evaluatedParentMeasure.height) {\r\n                this._isClipped = true;\r\n                return;\r\n            }\r\n\r\n            if (this._evaluatedMeasure.top + this._evaluatedMeasure.height < this._evaluatedParentMeasure.top) {\r\n                this._isClipped = true;\r\n                return;\r\n            }\r\n        }\r\n\r\n        this._isClipped = false;\r\n    }\r\n\r\n    /** @internal */\r\n    public _measure(): void {\r\n        // Width / Height\r\n        if (this._width.isPixel) {\r\n            this._currentMeasure.width = this._width.getValue(this._host);\r\n        } else {\r\n            this._currentMeasure.width *= this._width.getValue(this._host);\r\n        }\r\n\r\n        if (this._height.isPixel) {\r\n            this._currentMeasure.height = this._height.getValue(this._host);\r\n        } else {\r\n            this._currentMeasure.height *= this._height.getValue(this._host);\r\n        }\r\n\r\n        if (this._fixedRatio !== 0) {\r\n            if (this._fixedRatioMasterIsWidth) {\r\n                this._currentMeasure.height = this._currentMeasure.width * this._fixedRatio;\r\n            } else {\r\n                this._currentMeasure.width = this._currentMeasure.height * this._fixedRatio;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    protected _computeAlignment(parentMeasure: Measure, context: ICanvasRenderingContext): void {\r\n        const width = this._currentMeasure.width;\r\n        const height = this._currentMeasure.height;\r\n\r\n        const parentWidth = parentMeasure.width;\r\n        const parentHeight = parentMeasure.height;\r\n\r\n        // Left / top\r\n        let x = 0;\r\n        let y = 0;\r\n\r\n        switch (this.horizontalAlignment) {\r\n            case Control.HORIZONTAL_ALIGNMENT_LEFT:\r\n                x = 0;\r\n                break;\r\n            case Control.HORIZONTAL_ALIGNMENT_RIGHT:\r\n                x = parentWidth - width;\r\n                break;\r\n            case Control.HORIZONTAL_ALIGNMENT_CENTER:\r\n                x = (parentWidth - width) / 2;\r\n                break;\r\n        }\r\n\r\n        switch (this.verticalAlignment) {\r\n            case Control.VERTICAL_ALIGNMENT_TOP:\r\n                y = 0;\r\n                break;\r\n            case Control.VERTICAL_ALIGNMENT_BOTTOM:\r\n                y = parentHeight - height;\r\n                break;\r\n            case Control.VERTICAL_ALIGNMENT_CENTER:\r\n                y = (parentHeight - height) / 2;\r\n                break;\r\n        }\r\n\r\n        if (!this.descendantsOnlyPadding) {\r\n            if (this._paddingLeft.isPixel) {\r\n                this._currentMeasure.left += this._paddingLeft.getValue(this._host);\r\n                this._currentMeasure.width -= this._paddingLeft.getValue(this._host);\r\n            } else {\r\n                this._currentMeasure.left += parentWidth * this._paddingLeft.getValue(this._host);\r\n                this._currentMeasure.width -= parentWidth * this._paddingLeft.getValue(this._host);\r\n            }\r\n\r\n            if (this._paddingRight.isPixel) {\r\n                this._currentMeasure.width -= this._paddingRight.getValue(this._host);\r\n            } else {\r\n                this._currentMeasure.width -= parentWidth * this._paddingRight.getValue(this._host);\r\n            }\r\n\r\n            if (this._paddingTop.isPixel) {\r\n                this._currentMeasure.top += this._paddingTop.getValue(this._host);\r\n                this._currentMeasure.height -= this._paddingTop.getValue(this._host);\r\n            } else {\r\n                this._currentMeasure.top += parentHeight * this._paddingTop.getValue(this._host);\r\n                this._currentMeasure.height -= parentHeight * this._paddingTop.getValue(this._host);\r\n            }\r\n\r\n            if (this._paddingBottom.isPixel) {\r\n                this._currentMeasure.height -= this._paddingBottom.getValue(this._host);\r\n            } else {\r\n                this._currentMeasure.height -= parentHeight * this._paddingBottom.getValue(this._host);\r\n            }\r\n        }\r\n\r\n        if (this._left.isPixel) {\r\n            this._currentMeasure.left += this._left.getValue(this._host);\r\n        } else {\r\n            this._currentMeasure.left += parentWidth * this._left.getValue(this._host);\r\n        }\r\n\r\n        if (this._top.isPixel) {\r\n            this._currentMeasure.top += this._top.getValue(this._host);\r\n        } else {\r\n            this._currentMeasure.top += parentHeight * this._top.getValue(this._host);\r\n        }\r\n\r\n        this._currentMeasure.left += x;\r\n        this._currentMeasure.top += y;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    protected _preMeasure(parentMeasure: Measure, context: ICanvasRenderingContext): void {\r\n        // Do nothing\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    protected _postMeasure(parentMeasure: Measure, context: ICanvasRenderingContext): void {\r\n        // Do nothing\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    protected _additionalProcessing(parentMeasure: Measure, context: ICanvasRenderingContext): void {\r\n        // Do nothing\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    protected _clipForChildren(context: ICanvasRenderingContext): void {\r\n        // DO nothing\r\n    }\r\n\r\n    private static _ClipMeasure = new Measure(0, 0, 0, 0);\r\n    private _tmpMeasureA = new Measure(0, 0, 0, 0);\r\n    private _clip(context: ICanvasRenderingContext, invalidatedRectangle?: Nullable<Measure>) {\r\n        context.beginPath();\r\n        Control._ClipMeasure.copyFrom(this._currentMeasure);\r\n        if (invalidatedRectangle) {\r\n            // Rotate the invalidated rect into the control's space\r\n            invalidatedRectangle.transformToRef(this._invertTransformMatrix, this._tmpMeasureA);\r\n\r\n            // Get the intersection of the rect in context space and the current context\r\n            const intersection = new Measure(0, 0, 0, 0);\r\n            intersection.left = Math.max(this._tmpMeasureA.left, this._currentMeasure.left);\r\n            intersection.top = Math.max(this._tmpMeasureA.top, this._currentMeasure.top);\r\n            intersection.width = Math.min(this._tmpMeasureA.left + this._tmpMeasureA.width, this._currentMeasure.left + this._currentMeasure.width) - intersection.left;\r\n            intersection.height = Math.min(this._tmpMeasureA.top + this._tmpMeasureA.height, this._currentMeasure.top + this._currentMeasure.height) - intersection.top;\r\n            Control._ClipMeasure.copyFrom(intersection);\r\n        }\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            const shadowOffsetX = this.shadowOffsetX;\r\n            const shadowOffsetY = this.shadowOffsetY;\r\n            const shadowBlur = this.shadowBlur;\r\n\r\n            const leftShadowOffset = Math.min(Math.min(shadowOffsetX, 0) - shadowBlur * 2, 0);\r\n            const rightShadowOffset = Math.max(Math.max(shadowOffsetX, 0) + shadowBlur * 2, 0);\r\n            const topShadowOffset = Math.min(Math.min(shadowOffsetY, 0) - shadowBlur * 2, 0);\r\n            const bottomShadowOffset = Math.max(Math.max(shadowOffsetY, 0) + shadowBlur * 2, 0);\r\n\r\n            context.rect(\r\n                Control._ClipMeasure.left + leftShadowOffset,\r\n                Control._ClipMeasure.top + topShadowOffset,\r\n                Control._ClipMeasure.width + rightShadowOffset - leftShadowOffset,\r\n                Control._ClipMeasure.height + bottomShadowOffset - topShadowOffset\r\n            );\r\n        } else {\r\n            context.rect(Control._ClipMeasure.left, Control._ClipMeasure.top, Control._ClipMeasure.width, Control._ClipMeasure.height);\r\n        }\r\n\r\n        context.clip();\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _render(context: ICanvasRenderingContext, invalidatedRectangle?: Nullable<Measure>): boolean {\r\n        if (!this.isVisible || this.notRenderable || this._isClipped) {\r\n            this._isDirty = false;\r\n            return false;\r\n        }\r\n\r\n        this.host._numRenderCalls++;\r\n\r\n        context.save();\r\n\r\n        this._applyStates(context);\r\n\r\n        // Transform\r\n        this._transform(context);\r\n\r\n        // Clip\r\n        if (this.clipContent) {\r\n            this._clip(context, invalidatedRectangle);\r\n        }\r\n\r\n        if (this.onBeforeDrawObservable.hasObservers()) {\r\n            this.onBeforeDrawObservable.notifyObservers(this);\r\n        }\r\n\r\n        if (this.useBitmapCache && !this._wasDirty && this._cacheData) {\r\n            context.putImageData(this._cacheData, this._currentMeasure.left, this._currentMeasure.top);\r\n        } else {\r\n            this._draw(context, invalidatedRectangle);\r\n        }\r\n\r\n        if (this.useBitmapCache && this._wasDirty) {\r\n            this._cacheData = context.getImageData(this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);\r\n        }\r\n\r\n        this._renderHighlight(context);\r\n\r\n        if (this.onAfterDrawObservable.hasObservers()) {\r\n            this.onAfterDrawObservable.notifyObservers(this);\r\n        }\r\n\r\n        context.restore();\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _draw(context: ICanvasRenderingContext, invalidatedRectangle?: Nullable<Measure>): void {\r\n        // Do nothing\r\n    }\r\n\r\n    /**\r\n     * Tests if a given coordinates belong to the current control\r\n     * @param x defines x coordinate to test\r\n     * @param y defines y coordinate to test\r\n     * @returns true if the coordinates are inside the control\r\n     */\r\n    public contains(x: number, y: number): boolean {\r\n        // Invert transform\r\n        this._invertTransformMatrix.transformCoordinates(x, y, this._transformedPosition);\r\n\r\n        x = this._transformedPosition.x;\r\n        y = this._transformedPosition.y;\r\n\r\n        // Check\r\n        if (x < this._currentMeasure.left) {\r\n            return false;\r\n        }\r\n\r\n        if (x > this._currentMeasure.left + this._currentMeasure.width) {\r\n            return false;\r\n        }\r\n\r\n        if (y < this._currentMeasure.top) {\r\n            return false;\r\n        }\r\n\r\n        if (y > this._currentMeasure.top + this._currentMeasure.height) {\r\n            return false;\r\n        }\r\n\r\n        if (this.isPointerBlocker) {\r\n            this._host._shouldBlockPointer = true;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _processPicking(x: number, y: number, pi: Nullable<PointerInfoBase>, type: number, pointerId: number, buttonIndex: number, deltaX?: number, deltaY?: number): boolean {\r\n        if (!this._isEnabled) {\r\n            return false;\r\n        }\r\n        if (!this.isHitTestVisible || !this.isVisible || this._doNotRender) {\r\n            return false;\r\n        }\r\n\r\n        if (!this.contains(x, y)) {\r\n            return false;\r\n        }\r\n\r\n        this._processObservables(type, x, y, pi, pointerId, buttonIndex, deltaX, deltaY);\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _onPointerMove(target: Control, coordinates: Vector2, pointerId: number, pi: Nullable<PointerInfoBase>): void {\r\n        const canNotify: boolean = this.onPointerMoveObservable.notifyObservers(coordinates, -1, target, this, pi);\r\n\r\n        if (canNotify && this.parent != null && !this.isPointerBlocker) {\r\n            this.parent._onPointerMove(target, coordinates, pointerId, pi);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _onPointerEnter(target: Control, pi: Nullable<PointerInfoBase>): boolean {\r\n        if (!this._isEnabled) {\r\n            return false;\r\n        }\r\n        if (this._enterCount > 0) {\r\n            return false;\r\n        }\r\n\r\n        if (this._enterCount === -1) {\r\n            // -1 is for touch input, we are now sure we are with a mouse or pencil\r\n            this._enterCount = 0;\r\n        }\r\n        this._enterCount++;\r\n\r\n        const canNotify: boolean = this.onPointerEnterObservable.notifyObservers(this, -1, target, this, pi);\r\n\r\n        if (canNotify && this.parent != null && !this.isPointerBlocker) {\r\n            this.parent._onPointerEnter(target, pi);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _onPointerOut(target: Control, pi: Nullable<PointerInfoBase>, force = false): void {\r\n        if (!force && (!this._isEnabled || target === this)) {\r\n            return;\r\n        }\r\n        this._enterCount = 0;\r\n\r\n        let canNotify: boolean = true;\r\n\r\n        if (!target.isAscendant(this)) {\r\n            canNotify = this.onPointerOutObservable.notifyObservers(this, -1, target, this, pi);\r\n        }\r\n\r\n        if (canNotify && this.parent != null && !this.isPointerBlocker) {\r\n            this.parent._onPointerOut(target, pi, force);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _onPointerDown(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number, pi: Nullable<PointerInfoBase>): boolean {\r\n        // Prevent pointerout to lose control context.\r\n        // Event redundancy is checked inside the function.\r\n        this._onPointerEnter(this, pi);\r\n\r\n        if (this._downCount !== 0) {\r\n            return false;\r\n        }\r\n\r\n        this._downCount++;\r\n\r\n        this._downPointerIds[pointerId] = true;\r\n\r\n        const canNotify: boolean = this.onPointerDownObservable.notifyObservers(new Vector2WithInfo(coordinates, buttonIndex), -1, target, this, pi);\r\n\r\n        if (canNotify && this.parent != null && !this.isPointerBlocker) {\r\n            this.parent._onPointerDown(target, coordinates, pointerId, buttonIndex, pi);\r\n        }\r\n\r\n        if (pi && this.uniqueId !== this._host.rootContainer.uniqueId) {\r\n            this._host._capturedPointerIds.add((pi.event as IPointerEvent).pointerId);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _onPointerUp(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number, notifyClick: boolean, pi?: Nullable<PointerInfoBase>): void {\r\n        if (!this._isEnabled) {\r\n            return;\r\n        }\r\n        this._downCount = 0;\r\n\r\n        delete this._downPointerIds[pointerId];\r\n\r\n        let canNotifyClick: boolean = notifyClick;\r\n        if (notifyClick && (this._enterCount > 0 || this._enterCount === -1)) {\r\n            canNotifyClick = this.onPointerClickObservable.notifyObservers(new Vector2WithInfo(coordinates, buttonIndex), -1, target, this, pi);\r\n        }\r\n        const canNotify: boolean = this.onPointerUpObservable.notifyObservers(new Vector2WithInfo(coordinates, buttonIndex), -1, target, this, pi);\r\n\r\n        if (canNotify && this.parent != null && !this.isPointerBlocker) {\r\n            this.parent._onPointerUp(target, coordinates, pointerId, buttonIndex, canNotifyClick, pi);\r\n        }\r\n\r\n        if (pi && this.uniqueId !== this._host.rootContainer.uniqueId) {\r\n            this._host._capturedPointerIds.delete((pi.event as IPointerEvent).pointerId);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _forcePointerUp(pointerId: Nullable<number> = null) {\r\n        if (pointerId !== null) {\r\n            this._onPointerUp(this, Vector2.Zero(), pointerId, 0, true);\r\n        } else {\r\n            for (const key in this._downPointerIds) {\r\n                this._onPointerUp(this, Vector2.Zero(), +key as number, 0, true);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _onWheelScroll(deltaX?: number, deltaY?: number): void {\r\n        if (!this._isEnabled) {\r\n            return;\r\n        }\r\n        const canNotify: boolean = this.onWheelObservable.notifyObservers(new Vector2(deltaX, deltaY));\r\n\r\n        if (canNotify && this.parent != null) {\r\n            this.parent._onWheelScroll(deltaX, deltaY);\r\n        }\r\n    }\r\n\r\n    /** @internal */\r\n    public _onCanvasBlur(): void {}\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _processObservables(\r\n        type: number,\r\n        x: number,\r\n        y: number,\r\n        pi: Nullable<PointerInfoBase>,\r\n        pointerId: number,\r\n        buttonIndex: number,\r\n        deltaX?: number,\r\n        deltaY?: number\r\n    ): boolean {\r\n        if (!this._isEnabled) {\r\n            return false;\r\n        }\r\n        this._dummyVector2.copyFromFloats(x, y);\r\n        if (type === PointerEventTypes.POINTERMOVE) {\r\n            this._onPointerMove(this, this._dummyVector2, pointerId, pi);\r\n\r\n            const previousControlOver = this._host._lastControlOver[pointerId];\r\n            if (previousControlOver && previousControlOver !== this) {\r\n                previousControlOver._onPointerOut(this, pi);\r\n            }\r\n\r\n            if (previousControlOver !== this) {\r\n                this._onPointerEnter(this, pi);\r\n            }\r\n\r\n            this._host._lastControlOver[pointerId] = this;\r\n            return true;\r\n        }\r\n\r\n        if (type === PointerEventTypes.POINTERDOWN) {\r\n            this._onPointerDown(this, this._dummyVector2, pointerId, buttonIndex, pi);\r\n            this._host._registerLastControlDown(this, pointerId);\r\n            this._host._lastPickedControl = this;\r\n            return true;\r\n        }\r\n\r\n        if (type === PointerEventTypes.POINTERUP) {\r\n            if (this._host._lastControlDown[pointerId]) {\r\n                this._host._lastControlDown[pointerId]._onPointerUp(this, this._dummyVector2, pointerId, buttonIndex, true, pi);\r\n            }\r\n            delete this._host._lastControlDown[pointerId];\r\n            return true;\r\n        }\r\n\r\n        if (type === PointerEventTypes.POINTERWHEEL) {\r\n            if (this._host._lastControlOver[pointerId]) {\r\n                this._host._lastControlOver[pointerId]._onWheelScroll(deltaX, deltaY);\r\n                return true;\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    private _getStyleProperty(propName: \"fontStyle\" | \"fontWeight\" | \"fontFamily\", defaultValue: string): string {\r\n        const prop = (this._style && this._style[propName]) ?? this[propName];\r\n        if (!prop && this.parent) {\r\n            return this.parent._getStyleProperty(propName, defaultValue);\r\n        } else if (!this.parent) {\r\n            return defaultValue;\r\n        } else {\r\n            return prop;\r\n        }\r\n    }\r\n\r\n    private _prepareFont() {\r\n        if (!this._font && !this._fontSet) {\r\n            return;\r\n        }\r\n\r\n        this._font =\r\n            this._getStyleProperty(\"fontStyle\", \"\") +\r\n            \" \" +\r\n            this._getStyleProperty(\"fontWeight\", \"\") +\r\n            \" \" +\r\n            this.fontSizeInPixels +\r\n            \"px \" +\r\n            this._getStyleProperty(\"fontFamily\", \"Arial\");\r\n\r\n        this._fontOffset = Control._GetFontOffset(this._font);\r\n\r\n        //children need to be refreshed\r\n        this.getDescendants().forEach((child) => child._markAllAsDirty());\r\n    }\r\n\r\n    /**\r\n     * Clones a control and its descendants\r\n     * @param host the texture where the control will be instantiated. Can be empty, in which case the control will be created on the same texture\r\n     * @returns the cloned control\r\n     */\r\n    public clone(host?: AdvancedDynamicTexture): Control {\r\n        const serialization: any = {};\r\n        this.serialize(serialization);\r\n\r\n        const controlType = Tools.Instantiate(\"BABYLON.GUI.\" + serialization.className);\r\n        const cloned = new controlType();\r\n        cloned.parse(serialization, host);\r\n\r\n        return cloned;\r\n    }\r\n\r\n    /**\r\n     * Parses a serialized object into this control\r\n     * @param serializedObject the object with the serialized properties\r\n     * @param host the texture where the control will be instantiated. Can be empty, in which case the control will be created on the same texture\r\n     * @returns this control\r\n     */\r\n    public parse(serializedObject: any, host?: AdvancedDynamicTexture): Control {\r\n        SerializationHelper.Parse(() => this, serializedObject, null);\r\n\r\n        this.name = serializedObject.name;\r\n\r\n        this._parseFromContent(serializedObject, host ?? this._host);\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Serializes the current control\r\n     * @param serializationObject defined the JSON serialized object\r\n     */\r\n    public serialize(serializationObject: any) {\r\n        SerializationHelper.Serialize(this, serializationObject);\r\n        serializationObject.name = this.name;\r\n        serializationObject.className = this.getClassName();\r\n\r\n        // Call prepareFont to guarantee the font is properly set before serializing\r\n        this._prepareFont();\r\n        if (this._font) {\r\n            serializationObject.fontFamily = this._fontFamily;\r\n            serializationObject.fontSize = this.fontSize;\r\n            serializationObject.fontWeight = this.fontWeight;\r\n            serializationObject.fontStyle = this.fontStyle;\r\n        }\r\n\r\n        if (this._gradient) {\r\n            serializationObject.gradient = {};\r\n            this._gradient.serialize(serializationObject.gradient);\r\n        }\r\n\r\n        // Animations\r\n        SerializationHelper.AppendSerializedAnimations(this, serializationObject);\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _parseFromContent(serializedObject: any, host: AdvancedDynamicTexture) {\r\n        if (serializedObject.fontFamily) {\r\n            this.fontFamily = serializedObject.fontFamily;\r\n        }\r\n\r\n        if (serializedObject.fontSize) {\r\n            this.fontSize = serializedObject.fontSize;\r\n        }\r\n\r\n        if (serializedObject.fontWeight) {\r\n            this.fontWeight = serializedObject.fontWeight;\r\n        }\r\n\r\n        if (serializedObject.fontStyle) {\r\n            this.fontStyle = serializedObject.fontStyle;\r\n        }\r\n\r\n        // Gradient\r\n        if (serializedObject.gradient) {\r\n            const className = Tools.Instantiate(\"BABYLON.GUI.\" + serializedObject.gradient.className);\r\n            this._gradient = new className();\r\n            this._gradient?.parse(serializedObject.gradient);\r\n        }\r\n\r\n        // Animations\r\n        if (serializedObject.animations) {\r\n            this.animations = [];\r\n            for (let animationIndex = 0; animationIndex < serializedObject.animations.length; animationIndex++) {\r\n                const parsedAnimation = serializedObject.animations[animationIndex];\r\n                const internalClass = GetClass(\"BABYLON.Animation\");\r\n                if (internalClass) {\r\n                    this.animations.push(internalClass.Parse(parsedAnimation));\r\n                }\r\n            }\r\n\r\n            if (serializedObject.autoAnimate && this._host && this._host.getScene()) {\r\n                this._host\r\n                    .getScene()!\r\n                    .beginAnimation(\r\n                        this,\r\n                        serializedObject.autoAnimateFrom,\r\n                        serializedObject.autoAnimateTo,\r\n                        serializedObject.autoAnimateLoop,\r\n                        serializedObject.autoAnimateSpeed || 1.0\r\n                    );\r\n            }\r\n        }\r\n\r\n        this.fixedRatioMasterIsWidth = serializedObject.fixedRatioMasterIsWidth ?? this.fixedRatioMasterIsWidth;\r\n    }\r\n\r\n    /** Releases associated resources */\r\n    public dispose() {\r\n        this.onDirtyObservable.clear();\r\n        this.onBeforeDrawObservable.clear();\r\n        this.onAfterDrawObservable.clear();\r\n        this.onPointerDownObservable.clear();\r\n        this.onPointerEnterObservable.clear();\r\n        this.onPointerMoveObservable.clear();\r\n        this.onPointerOutObservable.clear();\r\n        this.onPointerUpObservable.clear();\r\n        this.onPointerClickObservable.clear();\r\n        this.onWheelObservable.clear();\r\n\r\n        if (this._styleObserver && this._style) {\r\n            this._style.onChangedObservable.remove(this._styleObserver);\r\n            this._styleObserver = null;\r\n        }\r\n\r\n        if (this.parent) {\r\n            this.parent.removeControl(this);\r\n            this.parent = null;\r\n        }\r\n\r\n        if (this._host) {\r\n            const index = this._host._linkedControls.indexOf(this);\r\n            if (index > -1) {\r\n                this.linkWithMesh(null);\r\n            }\r\n        }\r\n\r\n        // Callback\r\n        this.onDisposeObservable.notifyObservers(this);\r\n        this.onDisposeObservable.clear();\r\n    }\r\n\r\n    // Statics\r\n    private static _HORIZONTAL_ALIGNMENT_LEFT = 0;\r\n    private static _HORIZONTAL_ALIGNMENT_RIGHT = 1;\r\n    private static _HORIZONTAL_ALIGNMENT_CENTER = 2;\r\n\r\n    private static _VERTICAL_ALIGNMENT_TOP = 0;\r\n    private static _VERTICAL_ALIGNMENT_BOTTOM = 1;\r\n    private static _VERTICAL_ALIGNMENT_CENTER = 2;\r\n\r\n    /** HORIZONTAL_ALIGNMENT_LEFT */\r\n    public static get HORIZONTAL_ALIGNMENT_LEFT(): number {\r\n        return Control._HORIZONTAL_ALIGNMENT_LEFT;\r\n    }\r\n\r\n    /** HORIZONTAL_ALIGNMENT_RIGHT */\r\n    public static get HORIZONTAL_ALIGNMENT_RIGHT(): number {\r\n        return Control._HORIZONTAL_ALIGNMENT_RIGHT;\r\n    }\r\n\r\n    /** HORIZONTAL_ALIGNMENT_CENTER */\r\n    public static get HORIZONTAL_ALIGNMENT_CENTER(): number {\r\n        return Control._HORIZONTAL_ALIGNMENT_CENTER;\r\n    }\r\n\r\n    /** VERTICAL_ALIGNMENT_TOP */\r\n    public static get VERTICAL_ALIGNMENT_TOP(): number {\r\n        return Control._VERTICAL_ALIGNMENT_TOP;\r\n    }\r\n\r\n    /** VERTICAL_ALIGNMENT_BOTTOM */\r\n    public static get VERTICAL_ALIGNMENT_BOTTOM(): number {\r\n        return Control._VERTICAL_ALIGNMENT_BOTTOM;\r\n    }\r\n\r\n    /** VERTICAL_ALIGNMENT_CENTER */\r\n    public static get VERTICAL_ALIGNMENT_CENTER(): number {\r\n        return Control._VERTICAL_ALIGNMENT_CENTER;\r\n    }\r\n\r\n    private static _FontHeightSizes: { [key: string]: { ascent: number; height: number; descent: number } } = {};\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public static _GetFontOffset(font: string): { ascent: number; height: number; descent: number } {\r\n        if (Control._FontHeightSizes[font]) {\r\n            return Control._FontHeightSizes[font];\r\n        }\r\n\r\n        const engine = EngineStore.LastCreatedEngine;\r\n        if (!engine) {\r\n            throw new Error(\"Invalid engine. Unable to create a canvas.\");\r\n        }\r\n\r\n        const result = engine.getFontOffset(font);\r\n        Control._FontHeightSizes[font] = result;\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Creates a Control from parsed data\r\n     * @param serializedObject defines parsed data\r\n     * @param host defines the hosting AdvancedDynamicTexture\r\n     * @returns a new Control\r\n     */\r\n    public static Parse(serializedObject: any, host: AdvancedDynamicTexture): Control {\r\n        const controlType = Tools.Instantiate(\"BABYLON.GUI.\" + serializedObject.className);\r\n        const control = SerializationHelper.Parse(() => new controlType(), serializedObject, null);\r\n\r\n        control.name = serializedObject.name;\r\n\r\n        control._parseFromContent(serializedObject, host);\r\n\r\n        return control;\r\n    }\r\n\r\n    public static AddHeader: (control: Control, text: string, size: string | number, options: { isHorizontal: boolean; controlFirst: boolean }) => any = () => {};\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    protected static drawEllipse(x: number, y: number, width: number, height: number, context: ICanvasRenderingContext): void {\r\n        context.translate(x, y);\r\n        context.scale(width, height);\r\n\r\n        context.beginPath();\r\n        context.arc(0, 0, 1, 0, 2 * Math.PI);\r\n        context.closePath();\r\n\r\n        context.scale(1 / width, 1 / height);\r\n        context.translate(-x, -y);\r\n    }\r\n\r\n    /**\r\n     * Returns true if the control is ready to be used\r\n     * @returns\r\n     */\r\n    public isReady(): boolean {\r\n        // Most controls are ready by default, so the default implementation is to return true\r\n        return true;\r\n    }\r\n}\r\nRegisterClass(\"BABYLON.GUI.Control\", Control);\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}