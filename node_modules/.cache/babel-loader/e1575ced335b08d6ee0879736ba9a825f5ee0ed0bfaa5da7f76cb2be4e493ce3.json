{"ast":null,"code":"/**\n * Enum used to define the mode for an animation group mask\n */\nexport var AnimationGroupMaskMode;\n(function (AnimationGroupMaskMode) {\n  /**\n   * The mask defines the animatable target names that should be included\n   */\n  AnimationGroupMaskMode[AnimationGroupMaskMode[\"Include\"] = 0] = \"Include\";\n  /**\n   * The mask defines the animatable target names in a \"exclude\" mode: all animatable targets will be animated except the ones defined in the mask\n   */\n  AnimationGroupMaskMode[AnimationGroupMaskMode[\"Exclude\"] = 1] = \"Exclude\";\n})(AnimationGroupMaskMode || (AnimationGroupMaskMode = {}));\n/**\n * Defines a mask used to filter animation targets.\n * If you apply a mask to an animation group (see the AnimationGroup.mask property), only the animations whose target names match the mask will play.\n * Note that a target is defined by its name (string). This means that the same mask can be used for several animation groups, provided that their targets are named in the same way.\n */\nexport class AnimationGroupMask {\n  /**\n   * Creates a new mask\n   * @param names The list of target names to add to the mask (optional)\n   * @param mode Defines the mode for the mask (default: AnimationGroupMaskMode.Include)\n   */\n  constructor(names,\n  /**\n   * Defines the mode for the mask\n   */\n  mode = AnimationGroupMaskMode.Include) {\n    this.mode = mode;\n    this._targetNames = new Set();\n    if (names) {\n      this.addTargetName(names);\n    }\n  }\n  /**\n   * Adds one or several target names to the mask\n   * @param name The name(s) to add to the mask\n   */\n  addTargetName(name) {\n    if (Array.isArray(name)) {\n      for (const n of name) {\n        this._targetNames.add(n);\n      }\n      return;\n    }\n    this._targetNames.add(name);\n  }\n  /**\n   * Removes one or several target names from the mask\n   * @param name The name(s) to remove from the mask\n   */\n  removeTargetName(name) {\n    if (Array.isArray(name)) {\n      for (const n of name) {\n        this._targetNames.delete(n);\n      }\n      return;\n    }\n    this._targetNames.delete(name);\n  }\n  /**\n   * Checks if the mask includes a target name.\n   * This method is intended to know if a given target name is included in the mask, not if the name is actually retained by the mask (see retainsTarget() instead).\n   * @param name The name to check with the mask\n   * @returns True if the mask includes the name, false otherwise\n   */\n  hasTarget(name) {\n    return this._targetNames.has(name);\n  }\n  /**\n   * Checks if the mask retains a target name.\n   * Note that in the \"Exclude\" mode, this will return false if the mask includes the name, and true otherwise!\n   * This method is intended to know if a given target name is retained by the mask, not if the name is in the list of target names.\n   * @param name The name to check with the mask\n   * @returns True if the mask retains the name, false otherwise\n   */\n  retainsTarget(name) {\n    return this._targetNames.has(name) === (this.mode === AnimationGroupMaskMode.Include);\n  }\n}","map":{"version":3,"names":["AnimationGroupMaskMode","AnimationGroupMask","constructor","names","mode","Include","_targetNames","Set","addTargetName","name","Array","isArray","n","add","removeTargetName","delete","hasTarget","has","retainsTarget"],"sources":["../../../../dev/core/src/Animations/animationGroupMask.ts"],"sourcesContent":["/**\r\n * Enum used to define the mode for an animation group mask\r\n */\r\nexport enum AnimationGroupMaskMode {\r\n    /**\r\n     * The mask defines the animatable target names that should be included\r\n     */\r\n    Include = 0,\r\n    /**\r\n     * The mask defines the animatable target names in a \"exclude\" mode: all animatable targets will be animated except the ones defined in the mask\r\n     */\r\n    Exclude = 1,\r\n}\r\n\r\n/**\r\n * Defines a mask used to filter animation targets.\r\n * If you apply a mask to an animation group (see the AnimationGroup.mask property), only the animations whose target names match the mask will play.\r\n * Note that a target is defined by its name (string). This means that the same mask can be used for several animation groups, provided that their targets are named in the same way.\r\n */\r\nexport class AnimationGroupMask {\r\n    /**\r\n     * The set of target names included in the mask. If mode is AnimationGroupMaskMode.Exclude, the targets in this set will be excluded from the mask instead.\r\n     */\r\n    private _targetNames: Set<String>;\r\n\r\n    /**\r\n     * Creates a new mask\r\n     * @param names The list of target names to add to the mask (optional)\r\n     * @param mode Defines the mode for the mask (default: AnimationGroupMaskMode.Include)\r\n     */\r\n    constructor(\r\n        names?: string[],\r\n        /**\r\n         * Defines the mode for the mask\r\n         */\r\n        public mode: AnimationGroupMaskMode = AnimationGroupMaskMode.Include\r\n    ) {\r\n        this._targetNames = new Set<String>();\r\n        if (names) {\r\n            this.addTargetName(names);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Adds one or several target names to the mask\r\n     * @param name The name(s) to add to the mask\r\n     */\r\n    public addTargetName(name: string | string[]): void {\r\n        if (Array.isArray(name)) {\r\n            for (const n of name) {\r\n                this._targetNames.add(n);\r\n            }\r\n            return;\r\n        }\r\n\r\n        this._targetNames.add(name);\r\n    }\r\n\r\n    /**\r\n     * Removes one or several target names from the mask\r\n     * @param name The name(s) to remove from the mask\r\n     */\r\n    public removeTargetName(name: string | string[]): void {\r\n        if (Array.isArray(name)) {\r\n            for (const n of name) {\r\n                this._targetNames.delete(n);\r\n            }\r\n            return;\r\n        }\r\n\r\n        this._targetNames.delete(name);\r\n    }\r\n\r\n    /**\r\n     * Checks if the mask includes a target name.\r\n     * This method is intended to know if a given target name is included in the mask, not if the name is actually retained by the mask (see retainsTarget() instead).\r\n     * @param name The name to check with the mask\r\n     * @returns True if the mask includes the name, false otherwise\r\n     */\r\n    public hasTarget(name: string): boolean {\r\n        return this._targetNames.has(name);\r\n    }\r\n\r\n    /**\r\n     * Checks if the mask retains a target name.\r\n     * Note that in the \"Exclude\" mode, this will return false if the mask includes the name, and true otherwise!\r\n     * This method is intended to know if a given target name is retained by the mask, not if the name is in the list of target names.\r\n     * @param name The name to check with the mask\r\n     * @returns True if the mask retains the name, false otherwise\r\n     */\r\n    public retainsTarget(name: string): boolean {\r\n        return this._targetNames.has(name) === (this.mode === AnimationGroupMaskMode.Include);\r\n    }\r\n}\r\n"],"mappings":"AAAA;;;AAGA,WAAYA,sBASX;AATD,WAAYA,sBAAsB;EAC9B;;;EAGAA,sBAAA,CAAAA,sBAAA,4BAAW;EACX;;;EAGAA,sBAAA,CAAAA,sBAAA,4BAAW;AACf,CAAC,EATWA,sBAAsB,KAAtBA,sBAAsB;AAWlC;;;;;AAKA,OAAM,MAAOC,kBAAkB;EAM3B;;;;;EAKAC,YACIC,KAAgB;EAChB;;;EAGOC,IAAA,GAA+BJ,sBAAsB,CAACK,OAAO;IAA7D,KAAAD,IAAI,GAAJA,IAAI;IAEX,IAAI,CAACE,YAAY,GAAG,IAAIC,GAAG,EAAU;IACrC,IAAIJ,KAAK,EAAE;MACP,IAAI,CAACK,aAAa,CAACL,KAAK,CAAC;;EAEjC;EAEA;;;;EAIOK,aAAaA,CAACC,IAAuB;IACxC,IAAIC,KAAK,CAACC,OAAO,CAACF,IAAI,CAAC,EAAE;MACrB,KAAK,MAAMG,CAAC,IAAIH,IAAI,EAAE;QAClB,IAAI,CAACH,YAAY,CAACO,GAAG,CAACD,CAAC,CAAC;;MAE5B;;IAGJ,IAAI,CAACN,YAAY,CAACO,GAAG,CAACJ,IAAI,CAAC;EAC/B;EAEA;;;;EAIOK,gBAAgBA,CAACL,IAAuB;IAC3C,IAAIC,KAAK,CAACC,OAAO,CAACF,IAAI,CAAC,EAAE;MACrB,KAAK,MAAMG,CAAC,IAAIH,IAAI,EAAE;QAClB,IAAI,CAACH,YAAY,CAACS,MAAM,CAACH,CAAC,CAAC;;MAE/B;;IAGJ,IAAI,CAACN,YAAY,CAACS,MAAM,CAACN,IAAI,CAAC;EAClC;EAEA;;;;;;EAMOO,SAASA,CAACP,IAAY;IACzB,OAAO,IAAI,CAACH,YAAY,CAACW,GAAG,CAACR,IAAI,CAAC;EACtC;EAEA;;;;;;;EAOOS,aAAaA,CAACT,IAAY;IAC7B,OAAO,IAAI,CAACH,YAAY,CAACW,GAAG,CAACR,IAAI,CAAC,MAAM,IAAI,CAACL,IAAI,KAAKJ,sBAAsB,CAACK,OAAO,CAAC;EACzF"},"metadata":{},"sourceType":"module","externalDependencies":[]}