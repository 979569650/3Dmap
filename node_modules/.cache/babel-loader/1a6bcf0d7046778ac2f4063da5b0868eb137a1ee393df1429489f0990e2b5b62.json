{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\n/** @internal */\nexport class WebGLHardwareTexture {\n  get underlyingResource() {\n    return this._webGLTexture;\n  }\n  constructor(existingTexture = null, context) {\n    // There can be multiple buffers for a single WebGL texture because different layers of a 2DArrayTexture / 3DTexture\n    // or different faces of a cube texture can be bound to different render targets at the same time.\n    this._MSAARenderBuffers = null;\n    this._context = context;\n    if (!existingTexture) {\n      existingTexture = context.createTexture();\n      if (!existingTexture) {\n        throw new Error(\"Unable to create webGL texture\");\n      }\n    }\n    this.set(existingTexture);\n  }\n  setUsage() {}\n  set(hardwareTexture) {\n    this._webGLTexture = hardwareTexture;\n  }\n  reset() {\n    this._webGLTexture = null;\n    this._MSAARenderBuffers = null;\n  }\n  addMSAARenderBuffer(buffer) {\n    if (!this._MSAARenderBuffers) {\n      this._MSAARenderBuffers = [];\n    }\n    this._MSAARenderBuffers.push(buffer);\n  }\n  releaseMSAARenderBuffers() {\n    if (this._MSAARenderBuffers) {\n      for (const buffer of this._MSAARenderBuffers) {\n        this._context.deleteRenderbuffer(buffer);\n      }\n      this._MSAARenderBuffers = null;\n    }\n  }\n  getMSAARenderBuffer(index = 0) {\n    var _a, _b;\n    return (_b = (_a = this._MSAARenderBuffers) === null || _a === void 0 ? void 0 : _a[index]) !== null && _b !== void 0 ? _b : null;\n  }\n  release() {\n    this.releaseMSAARenderBuffers();\n    if (this._webGLTexture) {\n      this._context.deleteTexture(this._webGLTexture);\n    }\n    this.reset();\n  }\n}","map":{"version":3,"names":["WebGLHardwareTexture","underlyingResource","_webGLTexture","constructor","existingTexture","context","_MSAARenderBuffers","_context","createTexture","Error","set","setUsage","hardwareTexture","reset","addMSAARenderBuffer","buffer","push","releaseMSAARenderBuffers","deleteRenderbuffer","getMSAARenderBuffer","index","_b","_a","release","deleteTexture"],"sources":["../../../../../dev/core/src/Engines/WebGL/webGLHardwareTexture.ts"],"sourcesContent":["import type { HardwareTextureWrapper } from \"../../Materials/Textures/hardwareTextureWrapper\";\r\nimport type { Nullable } from \"../../types\";\r\n\r\n/** @internal */\r\nexport class WebGLHardwareTexture implements HardwareTextureWrapper {\r\n    private _webGLTexture: WebGLTexture;\r\n    private _context: WebGLRenderingContext;\r\n\r\n    // There can be multiple buffers for a single WebGL texture because different layers of a 2DArrayTexture / 3DTexture\r\n    // or different faces of a cube texture can be bound to different render targets at the same time.\r\n    private _MSAARenderBuffers: Nullable<WebGLRenderbuffer[]> = null;\r\n\r\n    public get underlyingResource(): Nullable<WebGLTexture> {\r\n        return this._webGLTexture;\r\n    }\r\n\r\n    constructor(existingTexture: Nullable<WebGLTexture> = null, context: WebGLRenderingContext) {\r\n        this._context = context as WebGLRenderingContext;\r\n        if (!existingTexture) {\r\n            existingTexture = context.createTexture();\r\n            if (!existingTexture) {\r\n                throw new Error(\"Unable to create webGL texture\");\r\n            }\r\n        }\r\n        this.set(existingTexture);\r\n    }\r\n\r\n    public setUsage(): void {}\r\n\r\n    public set(hardwareTexture: WebGLTexture) {\r\n        this._webGLTexture = hardwareTexture;\r\n    }\r\n\r\n    public reset() {\r\n        this._webGLTexture = null as any;\r\n        this._MSAARenderBuffers = null;\r\n    }\r\n\r\n    public addMSAARenderBuffer(buffer: WebGLRenderbuffer) {\r\n        if (!this._MSAARenderBuffers) {\r\n            this._MSAARenderBuffers = [];\r\n        }\r\n        this._MSAARenderBuffers.push(buffer);\r\n    }\r\n\r\n    public releaseMSAARenderBuffers() {\r\n        if (this._MSAARenderBuffers) {\r\n            for (const buffer of this._MSAARenderBuffers) {\r\n                this._context.deleteRenderbuffer(buffer);\r\n            }\r\n            this._MSAARenderBuffers = null;\r\n        }\r\n    }\r\n\r\n    public getMSAARenderBuffer(index = 0) {\r\n        return this._MSAARenderBuffers?.[index] ?? null;\r\n    }\r\n\r\n    public release() {\r\n        this.releaseMSAARenderBuffers();\r\n\r\n        if (this._webGLTexture) {\r\n            this._context.deleteTexture(this._webGLTexture);\r\n        }\r\n        this.reset();\r\n    }\r\n}\r\n"],"mappings":";AAGA;AACA,OAAM,MAAOA,oBAAoB;EAQ7B,IAAWC,kBAAkBA,CAAA;IACzB,OAAO,IAAI,CAACC,aAAa;EAC7B;EAEAC,YAAYC,eAAA,GAA0C,IAAI,EAAEC,OAA8B;IAR1F;IACA;IACQ,KAAAC,kBAAkB,GAAkC,IAAI;IAO5D,IAAI,CAACC,QAAQ,GAAGF,OAAgC;IAChD,IAAI,CAACD,eAAe,EAAE;MAClBA,eAAe,GAAGC,OAAO,CAACG,aAAa,EAAE;MACzC,IAAI,CAACJ,eAAe,EAAE;QAClB,MAAM,IAAIK,KAAK,CAAC,gCAAgC,CAAC;;;IAGzD,IAAI,CAACC,GAAG,CAACN,eAAe,CAAC;EAC7B;EAEOO,QAAQA,CAAA,GAAU;EAElBD,GAAGA,CAACE,eAA6B;IACpC,IAAI,CAACV,aAAa,GAAGU,eAAe;EACxC;EAEOC,KAAKA,CAAA;IACR,IAAI,CAACX,aAAa,GAAG,IAAW;IAChC,IAAI,CAACI,kBAAkB,GAAG,IAAI;EAClC;EAEOQ,mBAAmBA,CAACC,MAAyB;IAChD,IAAI,CAAC,IAAI,CAACT,kBAAkB,EAAE;MAC1B,IAAI,CAACA,kBAAkB,GAAG,EAAE;;IAEhC,IAAI,CAACA,kBAAkB,CAACU,IAAI,CAACD,MAAM,CAAC;EACxC;EAEOE,wBAAwBA,CAAA;IAC3B,IAAI,IAAI,CAACX,kBAAkB,EAAE;MACzB,KAAK,MAAMS,MAAM,IAAI,IAAI,CAACT,kBAAkB,EAAE;QAC1C,IAAI,CAACC,QAAQ,CAACW,kBAAkB,CAACH,MAAM,CAAC;;MAE5C,IAAI,CAACT,kBAAkB,GAAG,IAAI;;EAEtC;EAEOa,mBAAmBA,CAACC,KAAK,GAAG,CAAC;;IAChC,OAAO,CAAAC,EAAA,IAAAC,EAAA,OAAI,CAAChB,kBAAkB,cAAAgB,EAAA,uBAAAA,EAAA,CAAGF,KAAK,CAAC,cAAAC,EAAA,cAAAA,EAAA,GAAI,IAAI;EACnD;EAEOE,OAAOA,CAAA;IACV,IAAI,CAACN,wBAAwB,EAAE;IAE/B,IAAI,IAAI,CAACf,aAAa,EAAE;MACpB,IAAI,CAACK,QAAQ,CAACiB,aAAa,CAAC,IAAI,CAACtB,aAAa,CAAC;;IAEnD,IAAI,CAACW,KAAK,EAAE;EAChB"},"metadata":{},"sourceType":"module","externalDependencies":[]}