{"ast":null,"code":"import { __decorate } from \"../../../tslib.es6.js\";\nimport { NodeMaterialBlock } from \"../nodeMaterialBlock.js\";\nimport { NodeMaterialBlockConnectionPointTypes } from \"../Enums/nodeMaterialBlockConnectionPointTypes.js\";\nimport { NodeMaterialBlockTargets } from \"../Enums/nodeMaterialBlockTargets.js\";\nimport { RegisterClass } from \"../../../Misc/typeStore.js\";\nimport { InputBlock } from \"./Input/inputBlock.js\";\nimport { MorphTargetsBlock } from \"./Vertex/morphTargetsBlock.js\";\nimport { PropertyTypeForEdition, editableInPropertyPage } from \"../../../Decorators/nodeDecorator.js\";\nexport var MeshAttributeExistsBlockTypes;\n(function (MeshAttributeExistsBlockTypes) {\n  MeshAttributeExistsBlockTypes[MeshAttributeExistsBlockTypes[\"None\"] = 0] = \"None\";\n  MeshAttributeExistsBlockTypes[MeshAttributeExistsBlockTypes[\"Normal\"] = 1] = \"Normal\";\n  MeshAttributeExistsBlockTypes[MeshAttributeExistsBlockTypes[\"Tangent\"] = 2] = \"Tangent\";\n  MeshAttributeExistsBlockTypes[MeshAttributeExistsBlockTypes[\"VertexColor\"] = 3] = \"VertexColor\";\n  MeshAttributeExistsBlockTypes[MeshAttributeExistsBlockTypes[\"UV1\"] = 4] = \"UV1\";\n  MeshAttributeExistsBlockTypes[MeshAttributeExistsBlockTypes[\"UV2\"] = 5] = \"UV2\";\n  MeshAttributeExistsBlockTypes[MeshAttributeExistsBlockTypes[\"UV3\"] = 6] = \"UV3\";\n  MeshAttributeExistsBlockTypes[MeshAttributeExistsBlockTypes[\"UV4\"] = 7] = \"UV4\";\n  MeshAttributeExistsBlockTypes[MeshAttributeExistsBlockTypes[\"UV5\"] = 8] = \"UV5\";\n  MeshAttributeExistsBlockTypes[MeshAttributeExistsBlockTypes[\"UV6\"] = 9] = \"UV6\";\n})(MeshAttributeExistsBlockTypes || (MeshAttributeExistsBlockTypes = {}));\n/**\n * Block used to check if Mesh attribute of specified type exists\n * and provide an alternative fallback input for to use in such case\n */\nexport class MeshAttributeExistsBlock extends NodeMaterialBlock {\n  /**\n   * Creates a new MeshAttributeExistsBlock\n   * @param name defines the block name\n   */\n  constructor(name) {\n    super(name, NodeMaterialBlockTargets.Neutral);\n    /**\n     * Defines which mesh attribute to use\n     */\n    this.attributeType = MeshAttributeExistsBlockTypes.None;\n    this.registerInput(\"input\", NodeMaterialBlockConnectionPointTypes.AutoDetect);\n    this.registerInput(\"fallback\", NodeMaterialBlockConnectionPointTypes.AutoDetect);\n    this.registerOutput(\"output\", NodeMaterialBlockConnectionPointTypes.BasedOnInput);\n    this._outputs[0]._typeConnectionSource = this._inputs[0];\n    this._linkConnectionTypes(0, 1);\n    // Try to auto determine attributeType\n    this._inputs[0].onConnectionObservable.add(other => {\n      var _a;\n      if (this.attributeType) {\n        // But only if not already specified\n        return;\n      }\n      const sourceBlock = other.ownerBlock;\n      if (sourceBlock instanceof InputBlock && sourceBlock.isAttribute) {\n        switch (sourceBlock.name) {\n          case \"color\":\n            this.attributeType = MeshAttributeExistsBlockTypes.VertexColor;\n            break;\n          case \"normal\":\n            this.attributeType = MeshAttributeExistsBlockTypes.Normal;\n            break;\n          case \"tangent\":\n            this.attributeType = MeshAttributeExistsBlockTypes.Tangent;\n            break;\n          case \"uv\":\n            this.attributeType = MeshAttributeExistsBlockTypes.UV1;\n            break;\n          case \"uv2\":\n            this.attributeType = MeshAttributeExistsBlockTypes.UV2;\n            break;\n          case \"uv3\":\n            this.attributeType = MeshAttributeExistsBlockTypes.UV3;\n            break;\n          case \"uv4\":\n            this.attributeType = MeshAttributeExistsBlockTypes.UV4;\n            break;\n          case \"uv5\":\n            this.attributeType = MeshAttributeExistsBlockTypes.UV5;\n            break;\n          case \"uv6\":\n            this.attributeType = MeshAttributeExistsBlockTypes.UV6;\n            break;\n        }\n      } else if (sourceBlock instanceof MorphTargetsBlock) {\n        switch ((_a = this.input.connectedPoint) === null || _a === void 0 ? void 0 : _a.name) {\n          case \"normalOutput\":\n            this.attributeType = MeshAttributeExistsBlockTypes.Normal;\n            break;\n          case \"tangentOutput\":\n            this.attributeType = MeshAttributeExistsBlockTypes.Tangent;\n            break;\n          case \"uvOutput\":\n            this.attributeType = MeshAttributeExistsBlockTypes.UV1;\n            break;\n        }\n      }\n    });\n  }\n  /**\n   * Gets the current class name\n   * @returns the class name\n   */\n  getClassName() {\n    return \"MeshAttributeExistsBlock\";\n  }\n  /**\n   * Gets the input component\n   */\n  get input() {\n    return this._inputs[0];\n  }\n  /**\n   * Gets the fallback component when speciefied attribute doesn't exist\n   */\n  get fallback() {\n    return this._inputs[1];\n  }\n  /**\n   * Gets the output component\n   */\n  get output() {\n    return this._outputs[0];\n  }\n  _buildBlock(state) {\n    super._buildBlock(state);\n    let attributeDefine = null;\n    switch (this.attributeType) {\n      case MeshAttributeExistsBlockTypes.VertexColor:\n        attributeDefine = \"VERTEXCOLOR_NME\";\n        break;\n      case MeshAttributeExistsBlockTypes.Normal:\n        attributeDefine = \"NORMAL\";\n        break;\n      case MeshAttributeExistsBlockTypes.Tangent:\n        attributeDefine = \"TANGENT\";\n        break;\n      case MeshAttributeExistsBlockTypes.UV1:\n        attributeDefine = \"UV1\";\n        break;\n      case MeshAttributeExistsBlockTypes.UV2:\n        attributeDefine = \"UV2\";\n        break;\n      case MeshAttributeExistsBlockTypes.UV3:\n        attributeDefine = \"UV3\";\n        break;\n      case MeshAttributeExistsBlockTypes.UV4:\n        attributeDefine = \"UV4\";\n        break;\n      case MeshAttributeExistsBlockTypes.UV5:\n        attributeDefine = \"UV5\";\n        break;\n      case MeshAttributeExistsBlockTypes.UV6:\n        attributeDefine = \"UV6\";\n        break;\n    }\n    const output = this._declareOutput(this.output, state);\n    if (attributeDefine) {\n      state.compilationString += `#ifdef ${attributeDefine}\\n`;\n    }\n    state.compilationString += `${output} = ${this.input.associatedVariableName};\\n`;\n    if (attributeDefine) {\n      state.compilationString += `#else\\n`;\n      state.compilationString += `${output} = ${this.fallback.associatedVariableName};\\n`;\n      state.compilationString += `#endif\\n`;\n    }\n    return this;\n  }\n  serialize() {\n    const serializationObject = super.serialize();\n    serializationObject.attributeType = this.attributeType;\n    return serializationObject;\n  }\n  _deserialize(serializationObject, scene, rootUrl) {\n    var _a;\n    super._deserialize(serializationObject, scene, rootUrl);\n    this.attributeType = (_a = serializationObject.attributeType) !== null && _a !== void 0 ? _a : MeshAttributeExistsBlockTypes.None;\n  }\n  _dumpPropertiesCode() {\n    let codeString = super._dumpPropertiesCode();\n    codeString += `${this._codeVariableName}.attributeType = ${this.attributeType};\\n`;\n    return codeString;\n  }\n}\n__decorate([editableInPropertyPage(\"Attribute lookup\", PropertyTypeForEdition.List, undefined, {\n  notifiers: {\n    update: true\n  },\n  options: [{\n    label: \"(None)\",\n    value: MeshAttributeExistsBlockTypes.None\n  }, {\n    label: \"Normal\",\n    value: MeshAttributeExistsBlockTypes.Normal\n  }, {\n    label: \"Tangent\",\n    value: MeshAttributeExistsBlockTypes.Tangent\n  }, {\n    label: \"Vertex Color\",\n    value: MeshAttributeExistsBlockTypes.VertexColor\n  }, {\n    label: \"UV1\",\n    value: MeshAttributeExistsBlockTypes.UV1\n  }, {\n    label: \"UV2\",\n    value: MeshAttributeExistsBlockTypes.UV2\n  }, {\n    label: \"UV3\",\n    value: MeshAttributeExistsBlockTypes.UV3\n  }, {\n    label: \"UV4\",\n    value: MeshAttributeExistsBlockTypes.UV4\n  }, {\n    label: \"UV5\",\n    value: MeshAttributeExistsBlockTypes.UV5\n  }, {\n    label: \"UV6\",\n    value: MeshAttributeExistsBlockTypes.UV6\n  }]\n})], MeshAttributeExistsBlock.prototype, \"attributeType\", void 0);\nRegisterClass(\"BABYLON.MeshAttributeExistsBlock\", MeshAttributeExistsBlock);","map":{"version":3,"names":["NodeMaterialBlock","NodeMaterialBlockConnectionPointTypes","NodeMaterialBlockTargets","RegisterClass","InputBlock","MorphTargetsBlock","PropertyTypeForEdition","editableInPropertyPage","MeshAttributeExistsBlockTypes","MeshAttributeExistsBlock","constructor","name","Neutral","attributeType","None","registerInput","AutoDetect","registerOutput","BasedOnInput","_outputs","_typeConnectionSource","_inputs","_linkConnectionTypes","onConnectionObservable","add","other","sourceBlock","ownerBlock","isAttribute","VertexColor","Normal","Tangent","UV1","UV2","UV3","UV4","UV5","UV6","_a","input","connectedPoint","getClassName","fallback","output","_buildBlock","state","attributeDefine","_declareOutput","compilationString","associatedVariableName","serialize","serializationObject","_deserialize","scene","rootUrl","_dumpPropertiesCode","codeString","_codeVariableName","__decorate","List","undefined","notifiers","update","options","label","value"],"sources":["../../../../../../dev/core/src/Materials/Node/Blocks/meshAttributeExistsBlock.ts"],"sourcesContent":["import { NodeMaterialBlock } from \"../nodeMaterialBlock\";\r\nimport { NodeMaterialBlockConnectionPointTypes } from \"../Enums/nodeMaterialBlockConnectionPointTypes\";\r\nimport type { NodeMaterialBuildState } from \"../nodeMaterialBuildState\";\r\nimport type { NodeMaterialConnectionPoint } from \"../nodeMaterialBlockConnectionPoint\";\r\nimport { NodeMaterialBlockTargets } from \"../Enums/nodeMaterialBlockTargets\";\r\nimport { RegisterClass } from \"../../../Misc/typeStore\";\r\nimport { InputBlock } from \"./Input/inputBlock\";\r\nimport { MorphTargetsBlock } from \"./Vertex/morphTargetsBlock\";\r\nimport { PropertyTypeForEdition, editableInPropertyPage } from \"../../../Decorators/nodeDecorator\";\r\nimport type { Scene } from \"core/scene\";\r\n\r\nexport enum MeshAttributeExistsBlockTypes {\r\n    None,\r\n    Normal,\r\n    Tangent,\r\n    VertexColor,\r\n    UV1,\r\n    UV2,\r\n    UV3,\r\n    UV4,\r\n    UV5,\r\n    UV6,\r\n}\r\n\r\n/**\r\n * Block used to check if Mesh attribute of specified type exists\r\n * and provide an alternative fallback input for to use in such case\r\n */\r\nexport class MeshAttributeExistsBlock extends NodeMaterialBlock {\r\n    /**\r\n     * Creates a new MeshAttributeExistsBlock\r\n     * @param name defines the block name\r\n     */\r\n    public constructor(name: string) {\r\n        super(name, NodeMaterialBlockTargets.Neutral);\r\n\r\n        this.registerInput(\"input\", NodeMaterialBlockConnectionPointTypes.AutoDetect);\r\n        this.registerInput(\"fallback\", NodeMaterialBlockConnectionPointTypes.AutoDetect);\r\n        this.registerOutput(\"output\", NodeMaterialBlockConnectionPointTypes.BasedOnInput);\r\n\r\n        this._outputs[0]._typeConnectionSource = this._inputs[0];\r\n        this._linkConnectionTypes(0, 1);\r\n\r\n        // Try to auto determine attributeType\r\n        this._inputs[0].onConnectionObservable.add((other) => {\r\n            if (this.attributeType) {\r\n                // But only if not already specified\r\n                return;\r\n            }\r\n            const sourceBlock = other.ownerBlock;\r\n            if (sourceBlock instanceof InputBlock && sourceBlock.isAttribute) {\r\n                switch (sourceBlock.name) {\r\n                    case \"color\":\r\n                        this.attributeType = MeshAttributeExistsBlockTypes.VertexColor;\r\n                        break;\r\n                    case \"normal\":\r\n                        this.attributeType = MeshAttributeExistsBlockTypes.Normal;\r\n                        break;\r\n                    case \"tangent\":\r\n                        this.attributeType = MeshAttributeExistsBlockTypes.Tangent;\r\n                        break;\r\n                    case \"uv\":\r\n                        this.attributeType = MeshAttributeExistsBlockTypes.UV1;\r\n                        break;\r\n                    case \"uv2\":\r\n                        this.attributeType = MeshAttributeExistsBlockTypes.UV2;\r\n                        break;\r\n                    case \"uv3\":\r\n                        this.attributeType = MeshAttributeExistsBlockTypes.UV3;\r\n                        break;\r\n                    case \"uv4\":\r\n                        this.attributeType = MeshAttributeExistsBlockTypes.UV4;\r\n                        break;\r\n                    case \"uv5\":\r\n                        this.attributeType = MeshAttributeExistsBlockTypes.UV5;\r\n                        break;\r\n                    case \"uv6\":\r\n                        this.attributeType = MeshAttributeExistsBlockTypes.UV6;\r\n                        break;\r\n                }\r\n            } else if (sourceBlock instanceof MorphTargetsBlock) {\r\n                switch (this.input.connectedPoint?.name) {\r\n                    case \"normalOutput\":\r\n                        this.attributeType = MeshAttributeExistsBlockTypes.Normal;\r\n                        break;\r\n                    case \"tangentOutput\":\r\n                        this.attributeType = MeshAttributeExistsBlockTypes.Tangent;\r\n                        break;\r\n                    case \"uvOutput\":\r\n                        this.attributeType = MeshAttributeExistsBlockTypes.UV1;\r\n                        break;\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Gets the current class name\r\n     * @returns the class name\r\n     */\r\n    public getClassName() {\r\n        return \"MeshAttributeExistsBlock\";\r\n    }\r\n\r\n    /**\r\n     * Defines which mesh attribute to use\r\n     */\r\n    @editableInPropertyPage(\"Attribute lookup\", PropertyTypeForEdition.List, undefined, {\r\n        notifiers: { update: true },\r\n        options: [\r\n            { label: \"(None)\", value: MeshAttributeExistsBlockTypes.None },\r\n            { label: \"Normal\", value: MeshAttributeExistsBlockTypes.Normal },\r\n            { label: \"Tangent\", value: MeshAttributeExistsBlockTypes.Tangent },\r\n            { label: \"Vertex Color\", value: MeshAttributeExistsBlockTypes.VertexColor },\r\n            { label: \"UV1\", value: MeshAttributeExistsBlockTypes.UV1 },\r\n            { label: \"UV2\", value: MeshAttributeExistsBlockTypes.UV2 },\r\n            { label: \"UV3\", value: MeshAttributeExistsBlockTypes.UV3 },\r\n            { label: \"UV4\", value: MeshAttributeExistsBlockTypes.UV4 },\r\n            { label: \"UV5\", value: MeshAttributeExistsBlockTypes.UV5 },\r\n            { label: \"UV6\", value: MeshAttributeExistsBlockTypes.UV6 },\r\n        ],\r\n    })\r\n    public attributeType = MeshAttributeExistsBlockTypes.None;\r\n\r\n    /**\r\n     * Gets the input component\r\n     */\r\n    public get input(): NodeMaterialConnectionPoint {\r\n        return this._inputs[0];\r\n    }\r\n\r\n    /**\r\n     * Gets the fallback component when speciefied attribute doesn't exist\r\n     */\r\n    public get fallback(): NodeMaterialConnectionPoint {\r\n        return this._inputs[1];\r\n    }\r\n\r\n    /**\r\n     * Gets the output component\r\n     */\r\n    public get output(): NodeMaterialConnectionPoint {\r\n        return this._outputs[0];\r\n    }\r\n\r\n    protected _buildBlock(state: NodeMaterialBuildState) {\r\n        super._buildBlock(state);\r\n\r\n        let attributeDefine: null | string = null;\r\n        switch (this.attributeType) {\r\n            case MeshAttributeExistsBlockTypes.VertexColor:\r\n                attributeDefine = \"VERTEXCOLOR_NME\";\r\n                break;\r\n            case MeshAttributeExistsBlockTypes.Normal:\r\n                attributeDefine = \"NORMAL\";\r\n                break;\r\n            case MeshAttributeExistsBlockTypes.Tangent:\r\n                attributeDefine = \"TANGENT\";\r\n                break;\r\n            case MeshAttributeExistsBlockTypes.UV1:\r\n                attributeDefine = \"UV1\";\r\n                break;\r\n            case MeshAttributeExistsBlockTypes.UV2:\r\n                attributeDefine = \"UV2\";\r\n                break;\r\n            case MeshAttributeExistsBlockTypes.UV3:\r\n                attributeDefine = \"UV3\";\r\n                break;\r\n            case MeshAttributeExistsBlockTypes.UV4:\r\n                attributeDefine = \"UV4\";\r\n                break;\r\n            case MeshAttributeExistsBlockTypes.UV5:\r\n                attributeDefine = \"UV5\";\r\n                break;\r\n            case MeshAttributeExistsBlockTypes.UV6:\r\n                attributeDefine = \"UV6\";\r\n                break;\r\n        }\r\n\r\n        const output = this._declareOutput(this.output, state);\r\n        if (attributeDefine) {\r\n            state.compilationString += `#ifdef ${attributeDefine}\\n`;\r\n        }\r\n\r\n        state.compilationString += `${output} = ${this.input.associatedVariableName};\\n`;\r\n\r\n        if (attributeDefine) {\r\n            state.compilationString += `#else\\n`;\r\n            state.compilationString += `${output} = ${this.fallback.associatedVariableName};\\n`;\r\n            state.compilationString += `#endif\\n`;\r\n        }\r\n        return this;\r\n    }\r\n\r\n    public serialize(): any {\r\n        const serializationObject = super.serialize();\r\n\r\n        serializationObject.attributeType = this.attributeType;\r\n\r\n        return serializationObject;\r\n    }\r\n\r\n    public _deserialize(serializationObject: any, scene: Scene, rootUrl: string) {\r\n        super._deserialize(serializationObject, scene, rootUrl);\r\n\r\n        this.attributeType = serializationObject.attributeType ?? MeshAttributeExistsBlockTypes.None;\r\n    }\r\n\r\n    protected _dumpPropertiesCode() {\r\n        let codeString = super._dumpPropertiesCode();\r\n\r\n        codeString += `${this._codeVariableName}.attributeType = ${this.attributeType};\\n`;\r\n\r\n        return codeString;\r\n    }\r\n}\r\n\r\nRegisterClass(\"BABYLON.MeshAttributeExistsBlock\", MeshAttributeExistsBlock);\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}