{"ast":null,"code":"import { CameraInputTypes } from \"../../Cameras/cameraInputsManager.js\";\nimport { Quaternion } from \"../../Maths/math.vector.js\";\nimport { Tools } from \"../../Misc/tools.js\";\nimport { FreeCameraInputsManager } from \"../../Cameras/freeCameraInputsManager.js\";\nimport { Observable } from \"../../Misc/observable.js\";\n/**\n * Add orientation input support to the input manager.\n * @param smoothFactor deviceOrientation smoothing. 0: no smoothing, 1: new data ignored, 0.9 recommended for smoothing\n * @returns the current input manager\n */\nFreeCameraInputsManager.prototype.addDeviceOrientation = function (smoothFactor) {\n  if (!this._deviceOrientationInput) {\n    this._deviceOrientationInput = new FreeCameraDeviceOrientationInput();\n    if (smoothFactor) {\n      this._deviceOrientationInput.smoothFactor = smoothFactor;\n    }\n    this.add(this._deviceOrientationInput);\n  }\n  return this;\n};\n/**\n * Takes information about the orientation of the device as reported by the deviceorientation event to orient the camera.\n * Screen rotation is taken into account.\n * @see https://doc.babylonjs.com/features/featuresDeepDive/cameras/customizingCameraInputs\n */\nexport class FreeCameraDeviceOrientationInput {\n  /**\n   * Can be used to detect if a device orientation sensor is available on a device\n   * @param timeout amount of time in milliseconds to wait for a response from the sensor (default: infinite)\n   * @returns a promise that will resolve on orientation change\n   */\n  static WaitForOrientationChangeAsync(timeout) {\n    return new Promise((res, rej) => {\n      let gotValue = false;\n      const eventHandler = () => {\n        window.removeEventListener(\"deviceorientation\", eventHandler);\n        gotValue = true;\n        res();\n      };\n      // If timeout is populated reject the promise\n      if (timeout) {\n        setTimeout(() => {\n          if (!gotValue) {\n            window.removeEventListener(\"deviceorientation\", eventHandler);\n            rej(\"WaitForOrientationChangeAsync timed out\");\n          }\n        }, timeout);\n      }\n      if (typeof DeviceOrientationEvent !== \"undefined\" && typeof DeviceOrientationEvent.requestPermission === \"function\") {\n        DeviceOrientationEvent.requestPermission().then(response => {\n          if (response == \"granted\") {\n            window.addEventListener(\"deviceorientation\", eventHandler);\n          } else {\n            Tools.Warn(\"Permission not granted.\");\n          }\n        }).catch(error => {\n          Tools.Error(error);\n        });\n      } else {\n        window.addEventListener(\"deviceorientation\", eventHandler);\n      }\n    });\n  }\n  /**\n   * Instantiates a new input\n   * @see https://doc.babylonjs.com/features/featuresDeepDive/cameras/customizingCameraInputs\n   */\n  constructor() {\n    this._screenOrientationAngle = 0;\n    this._screenQuaternion = new Quaternion();\n    this._alpha = 0;\n    this._beta = 0;\n    this._gamma = 0;\n    /** alpha+beta+gamma smoothing. 0: no smoothing, 1: new data ignored, 0.9 recommended for smoothing */\n    this.smoothFactor = 0;\n    /**\n     * @internal\n     */\n    this._onDeviceOrientationChangedObservable = new Observable();\n    this._orientationChanged = () => {\n      this._screenOrientationAngle = window.orientation !== undefined ? +window.orientation : window.screen.orientation && window.screen.orientation[\"angle\"] ? window.screen.orientation.angle : 0;\n      this._screenOrientationAngle = -Tools.ToRadians(this._screenOrientationAngle / 2);\n      this._screenQuaternion.copyFromFloats(0, Math.sin(this._screenOrientationAngle), 0, Math.cos(this._screenOrientationAngle));\n    };\n    this._deviceOrientation = evt => {\n      if (this.smoothFactor) {\n        this._alpha = evt.alpha !== null ? Tools.SmoothAngleChange(this._alpha, evt.alpha, this.smoothFactor) : 0;\n        this._beta = evt.beta !== null ? Tools.SmoothAngleChange(this._beta, evt.beta, this.smoothFactor) : 0;\n        this._gamma = evt.gamma !== null ? Tools.SmoothAngleChange(this._gamma, evt.gamma, this.smoothFactor) : 0;\n      } else {\n        this._alpha = evt.alpha !== null ? evt.alpha : 0;\n        this._beta = evt.beta !== null ? evt.beta : 0;\n        this._gamma = evt.gamma !== null ? evt.gamma : 0;\n      }\n      if (evt.alpha !== null) {\n        this._onDeviceOrientationChangedObservable.notifyObservers();\n      }\n    };\n    this._constantTranform = new Quaternion(-Math.sqrt(0.5), 0, 0, Math.sqrt(0.5));\n    this._orientationChanged();\n  }\n  /**\n   * Define the camera controlled by the input.\n   */\n  get camera() {\n    return this._camera;\n  }\n  set camera(camera) {\n    this._camera = camera;\n    if (this._camera != null && !this._camera.rotationQuaternion) {\n      this._camera.rotationQuaternion = new Quaternion();\n    }\n    if (this._camera) {\n      this._camera.onDisposeObservable.add(() => {\n        this._onDeviceOrientationChangedObservable.clear();\n      });\n    }\n  }\n  /**\n   * Attach the input controls to a specific dom element to get the input from.\n   */\n  attachControl() {\n    const hostWindow = this.camera.getScene().getEngine().getHostWindow();\n    if (hostWindow) {\n      const eventHandler = () => {\n        hostWindow.addEventListener(\"orientationchange\", this._orientationChanged);\n        hostWindow.addEventListener(\"deviceorientation\", this._deviceOrientation);\n        //In certain cases, the attach control is called AFTER orientation was changed,\n        //So this is needed.\n        this._orientationChanged();\n      };\n      if (typeof DeviceOrientationEvent !== \"undefined\" && typeof DeviceOrientationEvent.requestPermission === \"function\") {\n        DeviceOrientationEvent.requestPermission().then(response => {\n          if (response === \"granted\") {\n            eventHandler();\n          } else {\n            Tools.Warn(\"Permission not granted.\");\n          }\n        }).catch(error => {\n          Tools.Error(error);\n        });\n      } else {\n        eventHandler();\n      }\n    }\n  }\n  /**\n   * Detach the current controls from the specified dom element.\n   */\n  detachControl() {\n    window.removeEventListener(\"orientationchange\", this._orientationChanged);\n    window.removeEventListener(\"deviceorientation\", this._deviceOrientation);\n    this._alpha = 0;\n  }\n  /**\n   * Update the current camera state depending on the inputs that have been used this frame.\n   * This is a dynamically created lambda to avoid the performance penalty of looping for inputs in the render loop.\n   */\n  checkInputs() {\n    //if no device orientation provided, don't update the rotation.\n    //Only testing against alpha under the assumption thatnorientation will never be so exact when set.\n    if (!this._alpha) {\n      return;\n    }\n    Quaternion.RotationYawPitchRollToRef(Tools.ToRadians(this._alpha), Tools.ToRadians(this._beta), -Tools.ToRadians(this._gamma), this.camera.rotationQuaternion);\n    this._camera.rotationQuaternion.multiplyInPlace(this._screenQuaternion);\n    this._camera.rotationQuaternion.multiplyInPlace(this._constantTranform);\n    //Mirror on XY Plane\n    this._camera.rotationQuaternion.z *= -1;\n    this._camera.rotationQuaternion.w *= -1;\n  }\n  /**\n   * Gets the class name of the current input.\n   * @returns the class name\n   */\n  getClassName() {\n    return \"FreeCameraDeviceOrientationInput\";\n  }\n  /**\n   * Get the friendly name associated with the input class.\n   * @returns the input friendly name\n   */\n  getSimpleName() {\n    return \"deviceOrientation\";\n  }\n}\nCameraInputTypes[\"FreeCameraDeviceOrientationInput\"] = FreeCameraDeviceOrientationInput;","map":{"version":3,"names":["CameraInputTypes","Quaternion","Tools","FreeCameraInputsManager","Observable","prototype","addDeviceOrientation","smoothFactor","_deviceOrientationInput","FreeCameraDeviceOrientationInput","add","WaitForOrientationChangeAsync","timeout","Promise","res","rej","gotValue","eventHandler","window","removeEventListener","setTimeout","DeviceOrientationEvent","requestPermission","then","response","addEventListener","Warn","catch","error","Error","constructor","_screenOrientationAngle","_screenQuaternion","_alpha","_beta","_gamma","_onDeviceOrientationChangedObservable","_orientationChanged","orientation","undefined","screen","angle","ToRadians","copyFromFloats","Math","sin","cos","_deviceOrientation","evt","alpha","SmoothAngleChange","beta","gamma","notifyObservers","_constantTranform","sqrt","camera","_camera","rotationQuaternion","onDisposeObservable","clear","attachControl","hostWindow","getScene","getEngine","getHostWindow","detachControl","checkInputs","RotationYawPitchRollToRef","multiplyInPlace","z","w","getClassName","getSimpleName"],"sources":["../../../../../dev/core/src/Cameras/Inputs/freeCameraDeviceOrientationInput.ts"],"sourcesContent":["import type { Nullable } from \"../../types\";\r\nimport type { ICameraInput } from \"../../Cameras/cameraInputsManager\";\r\nimport { CameraInputTypes } from \"../../Cameras/cameraInputsManager\";\r\nimport type { FreeCamera } from \"../../Cameras/freeCamera\";\r\nimport { Quaternion } from \"../../Maths/math.vector\";\r\nimport { Tools } from \"../../Misc/tools\";\r\nimport { FreeCameraInputsManager } from \"../../Cameras/freeCameraInputsManager\";\r\nimport { Observable } from \"../../Misc/observable\";\r\n\r\n// Module augmentation to abstract orientation inputs from camera.\r\ndeclare module \"../../Cameras/freeCameraInputsManager\" {\r\n    export interface FreeCameraInputsManager {\r\n        /**\r\n         * @internal\r\n         */\r\n        _deviceOrientationInput: Nullable<FreeCameraDeviceOrientationInput>;\r\n        /**\r\n         * Add orientation input support to the input manager.\r\n         * @param smoothFactor deviceOrientation smoothing. 0: no smoothing, 1: new data ignored, 0.9 recommended for smoothing\r\n         * @returns the current input manager\r\n         */\r\n        addDeviceOrientation(smoothFactor?: number): FreeCameraInputsManager;\r\n    }\r\n}\r\n\r\n/**\r\n * Add orientation input support to the input manager.\r\n * @param smoothFactor deviceOrientation smoothing. 0: no smoothing, 1: new data ignored, 0.9 recommended for smoothing\r\n * @returns the current input manager\r\n */\r\nFreeCameraInputsManager.prototype.addDeviceOrientation = function (smoothFactor?: number): FreeCameraInputsManager {\r\n    if (!this._deviceOrientationInput) {\r\n        this._deviceOrientationInput = new FreeCameraDeviceOrientationInput();\r\n        if (smoothFactor) {\r\n            this._deviceOrientationInput.smoothFactor = smoothFactor;\r\n        }\r\n        this.add(this._deviceOrientationInput);\r\n    }\r\n\r\n    return this;\r\n};\r\n\r\n/**\r\n * Takes information about the orientation of the device as reported by the deviceorientation event to orient the camera.\r\n * Screen rotation is taken into account.\r\n * @see https://doc.babylonjs.com/features/featuresDeepDive/cameras/customizingCameraInputs\r\n */\r\nexport class FreeCameraDeviceOrientationInput implements ICameraInput<FreeCamera> {\r\n    private _camera: FreeCamera;\r\n\r\n    private _screenOrientationAngle: number = 0;\r\n\r\n    private _constantTranform: Quaternion;\r\n    private _screenQuaternion: Quaternion = new Quaternion();\r\n\r\n    private _alpha: number = 0;\r\n    private _beta: number = 0;\r\n    private _gamma: number = 0;\r\n\r\n    /** alpha+beta+gamma smoothing. 0: no smoothing, 1: new data ignored, 0.9 recommended for smoothing */\r\n    public smoothFactor: number = 0;\r\n\r\n    /**\r\n     * Can be used to detect if a device orientation sensor is available on a device\r\n     * @param timeout amount of time in milliseconds to wait for a response from the sensor (default: infinite)\r\n     * @returns a promise that will resolve on orientation change\r\n     */\r\n    public static WaitForOrientationChangeAsync(timeout?: number): Promise<void> {\r\n        return new Promise((res, rej) => {\r\n            let gotValue = false;\r\n            const eventHandler = () => {\r\n                window.removeEventListener(\"deviceorientation\", eventHandler);\r\n                gotValue = true;\r\n                res();\r\n            };\r\n\r\n            // If timeout is populated reject the promise\r\n            if (timeout) {\r\n                setTimeout(() => {\r\n                    if (!gotValue) {\r\n                        window.removeEventListener(\"deviceorientation\", eventHandler);\r\n                        rej(\"WaitForOrientationChangeAsync timed out\");\r\n                    }\r\n                }, timeout);\r\n            }\r\n\r\n            if (typeof DeviceOrientationEvent !== \"undefined\" && typeof (<any>DeviceOrientationEvent).requestPermission === \"function\") {\r\n                (<any>DeviceOrientationEvent)\r\n                    .requestPermission()\r\n                    .then((response: string) => {\r\n                        if (response == \"granted\") {\r\n                            window.addEventListener(\"deviceorientation\", eventHandler);\r\n                        } else {\r\n                            Tools.Warn(\"Permission not granted.\");\r\n                        }\r\n                    })\r\n                    .catch((error: any) => {\r\n                        Tools.Error(error);\r\n                    });\r\n            } else {\r\n                window.addEventListener(\"deviceorientation\", eventHandler);\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _onDeviceOrientationChangedObservable = new Observable<void>();\r\n    /**\r\n     * Instantiates a new input\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/cameras/customizingCameraInputs\r\n     */\r\n    constructor() {\r\n        this._constantTranform = new Quaternion(-Math.sqrt(0.5), 0, 0, Math.sqrt(0.5));\r\n        this._orientationChanged();\r\n    }\r\n\r\n    /**\r\n     * Define the camera controlled by the input.\r\n     */\r\n    public get camera(): FreeCamera {\r\n        return this._camera;\r\n    }\r\n\r\n    public set camera(camera: FreeCamera) {\r\n        this._camera = camera;\r\n        if (this._camera != null && !this._camera.rotationQuaternion) {\r\n            this._camera.rotationQuaternion = new Quaternion();\r\n        }\r\n        if (this._camera) {\r\n            this._camera.onDisposeObservable.add(() => {\r\n                this._onDeviceOrientationChangedObservable.clear();\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Attach the input controls to a specific dom element to get the input from.\r\n     */\r\n    public attachControl(): void {\r\n        const hostWindow = this.camera.getScene().getEngine().getHostWindow();\r\n\r\n        if (hostWindow) {\r\n            const eventHandler = () => {\r\n                hostWindow!.addEventListener(\"orientationchange\", this._orientationChanged);\r\n                hostWindow!.addEventListener(\"deviceorientation\", this._deviceOrientation);\r\n                //In certain cases, the attach control is called AFTER orientation was changed,\r\n                //So this is needed.\r\n                this._orientationChanged();\r\n            };\r\n            if (typeof DeviceOrientationEvent !== \"undefined\" && typeof (<any>DeviceOrientationEvent).requestPermission === \"function\") {\r\n                (<any>DeviceOrientationEvent)\r\n                    .requestPermission()\r\n                    .then((response: string) => {\r\n                        if (response === \"granted\") {\r\n                            eventHandler();\r\n                        } else {\r\n                            Tools.Warn(\"Permission not granted.\");\r\n                        }\r\n                    })\r\n                    .catch((error: any) => {\r\n                        Tools.Error(error);\r\n                    });\r\n            } else {\r\n                eventHandler();\r\n            }\r\n        }\r\n    }\r\n\r\n    private _orientationChanged = () => {\r\n        this._screenOrientationAngle =\r\n            <any>window.orientation !== undefined\r\n                ? +(<any>window.orientation)\r\n                : (<any>window.screen).orientation && (<any>window.screen).orientation[\"angle\"]\r\n                ? (<any>window.screen).orientation.angle\r\n                : 0;\r\n        this._screenOrientationAngle = -Tools.ToRadians(this._screenOrientationAngle / 2);\r\n        this._screenQuaternion.copyFromFloats(0, Math.sin(this._screenOrientationAngle), 0, Math.cos(this._screenOrientationAngle));\r\n    };\r\n\r\n    private _deviceOrientation = (evt: DeviceOrientationEvent) => {\r\n        if (this.smoothFactor) {\r\n            this._alpha = evt.alpha !== null ? Tools.SmoothAngleChange(this._alpha, evt.alpha, this.smoothFactor) : 0;\r\n            this._beta = evt.beta !== null ? Tools.SmoothAngleChange(this._beta, evt.beta, this.smoothFactor) : 0;\r\n            this._gamma = evt.gamma !== null ? Tools.SmoothAngleChange(this._gamma, evt.gamma, this.smoothFactor) : 0;\r\n        } else {\r\n            this._alpha = evt.alpha !== null ? evt.alpha : 0;\r\n            this._beta = evt.beta !== null ? evt.beta : 0;\r\n            this._gamma = evt.gamma !== null ? evt.gamma : 0;\r\n        }\r\n\r\n        if (evt.alpha !== null) {\r\n            this._onDeviceOrientationChangedObservable.notifyObservers();\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Detach the current controls from the specified dom element.\r\n     */\r\n    public detachControl(): void {\r\n        window.removeEventListener(\"orientationchange\", this._orientationChanged);\r\n        window.removeEventListener(\"deviceorientation\", this._deviceOrientation);\r\n        this._alpha = 0;\r\n    }\r\n\r\n    /**\r\n     * Update the current camera state depending on the inputs that have been used this frame.\r\n     * This is a dynamically created lambda to avoid the performance penalty of looping for inputs in the render loop.\r\n     */\r\n    public checkInputs(): void {\r\n        //if no device orientation provided, don't update the rotation.\r\n        //Only testing against alpha under the assumption thatnorientation will never be so exact when set.\r\n        if (!this._alpha) {\r\n            return;\r\n        }\r\n        Quaternion.RotationYawPitchRollToRef(Tools.ToRadians(this._alpha), Tools.ToRadians(this._beta), -Tools.ToRadians(this._gamma), this.camera.rotationQuaternion);\r\n        this._camera.rotationQuaternion.multiplyInPlace(this._screenQuaternion);\r\n        this._camera.rotationQuaternion.multiplyInPlace(this._constantTranform);\r\n        //Mirror on XY Plane\r\n        this._camera.rotationQuaternion.z *= -1;\r\n        this._camera.rotationQuaternion.w *= -1;\r\n    }\r\n\r\n    /**\r\n     * Gets the class name of the current input.\r\n     * @returns the class name\r\n     */\r\n    public getClassName(): string {\r\n        return \"FreeCameraDeviceOrientationInput\";\r\n    }\r\n\r\n    /**\r\n     * Get the friendly name associated with the input class.\r\n     * @returns the input friendly name\r\n     */\r\n    public getSimpleName(): string {\r\n        return \"deviceOrientation\";\r\n    }\r\n}\r\n\r\n(<any>CameraInputTypes)[\"FreeCameraDeviceOrientationInput\"] = FreeCameraDeviceOrientationInput;\r\n"],"mappings":"AAEA,SAASA,gBAAgB,QAAQ,sCAAoC;AAErE,SAASC,UAAU,QAAQ,4BAA0B;AACrD,SAASC,KAAK,QAAQ,qBAAmB;AACzC,SAASC,uBAAuB,QAAQ,0CAAwC;AAChF,SAASC,UAAU,QAAQ,0BAAwB;AAkBnD;;;;;AAKAD,uBAAuB,CAACE,SAAS,CAACC,oBAAoB,GAAG,UAAUC,YAAqB;EACpF,IAAI,CAAC,IAAI,CAACC,uBAAuB,EAAE;IAC/B,IAAI,CAACA,uBAAuB,GAAG,IAAIC,gCAAgC,EAAE;IACrE,IAAIF,YAAY,EAAE;MACd,IAAI,CAACC,uBAAuB,CAACD,YAAY,GAAGA,YAAY;;IAE5D,IAAI,CAACG,GAAG,CAAC,IAAI,CAACF,uBAAuB,CAAC;;EAG1C,OAAO,IAAI;AACf,CAAC;AAED;;;;;AAKA,OAAM,MAAOC,gCAAgC;EAezC;;;;;EAKO,OAAOE,6BAA6BA,CAACC,OAAgB;IACxD,OAAO,IAAIC,OAAO,CAAC,CAACC,GAAG,EAAEC,GAAG,KAAI;MAC5B,IAAIC,QAAQ,GAAG,KAAK;MACpB,MAAMC,YAAY,GAAGA,CAAA,KAAK;QACtBC,MAAM,CAACC,mBAAmB,CAAC,mBAAmB,EAAEF,YAAY,CAAC;QAC7DD,QAAQ,GAAG,IAAI;QACfF,GAAG,EAAE;MACT,CAAC;MAED;MACA,IAAIF,OAAO,EAAE;QACTQ,UAAU,CAAC,MAAK;UACZ,IAAI,CAACJ,QAAQ,EAAE;YACXE,MAAM,CAACC,mBAAmB,CAAC,mBAAmB,EAAEF,YAAY,CAAC;YAC7DF,GAAG,CAAC,yCAAyC,CAAC;;QAEtD,CAAC,EAAEH,OAAO,CAAC;;MAGf,IAAI,OAAOS,sBAAsB,KAAK,WAAW,IAAI,OAAaA,sBAAuB,CAACC,iBAAiB,KAAK,UAAU,EAAE;QAClHD,sBAAuB,CACxBC,iBAAiB,EAAE,CACnBC,IAAI,CAAEC,QAAgB,IAAI;UACvB,IAAIA,QAAQ,IAAI,SAAS,EAAE;YACvBN,MAAM,CAACO,gBAAgB,CAAC,mBAAmB,EAAER,YAAY,CAAC;WAC7D,MAAM;YACHf,KAAK,CAACwB,IAAI,CAAC,yBAAyB,CAAC;;QAE7C,CAAC,CAAC,CACDC,KAAK,CAAEC,KAAU,IAAI;UAClB1B,KAAK,CAAC2B,KAAK,CAACD,KAAK,CAAC;QACtB,CAAC,CAAC;OACT,MAAM;QACHV,MAAM,CAACO,gBAAgB,CAAC,mBAAmB,EAAER,YAAY,CAAC;;IAElE,CAAC,CAAC;EACN;EAMA;;;;EAIAa,YAAA;IA/DQ,KAAAC,uBAAuB,GAAW,CAAC;IAGnC,KAAAC,iBAAiB,GAAe,IAAI/B,UAAU,EAAE;IAEhD,KAAAgC,MAAM,GAAW,CAAC;IAClB,KAAAC,KAAK,GAAW,CAAC;IACjB,KAAAC,MAAM,GAAW,CAAC;IAE1B;IACO,KAAA5B,YAAY,GAAW,CAAC;IA6C/B;;;IAGO,KAAA6B,qCAAqC,GAAG,IAAIhC,UAAU,EAAQ;IA8D7D,KAAAiC,mBAAmB,GAAG,MAAK;MAC/B,IAAI,CAACN,uBAAuB,GACnBb,MAAM,CAACoB,WAAW,KAAKC,SAAS,GAC/B,CAAOrB,MAAM,CAACoB,WAAY,GACpBpB,MAAM,CAACsB,MAAO,CAACF,WAAW,IAAUpB,MAAM,CAACsB,MAAO,CAACF,WAAW,CAAC,OAAO,CAAC,GACvEpB,MAAM,CAACsB,MAAO,CAACF,WAAW,CAACG,KAAK,GACtC,CAAC;MACX,IAAI,CAACV,uBAAuB,GAAG,CAAC7B,KAAK,CAACwC,SAAS,CAAC,IAAI,CAACX,uBAAuB,GAAG,CAAC,CAAC;MACjF,IAAI,CAACC,iBAAiB,CAACW,cAAc,CAAC,CAAC,EAAEC,IAAI,CAACC,GAAG,CAAC,IAAI,CAACd,uBAAuB,CAAC,EAAE,CAAC,EAAEa,IAAI,CAACE,GAAG,CAAC,IAAI,CAACf,uBAAuB,CAAC,CAAC;IAC/H,CAAC;IAEO,KAAAgB,kBAAkB,GAAIC,GAA2B,IAAI;MACzD,IAAI,IAAI,CAACzC,YAAY,EAAE;QACnB,IAAI,CAAC0B,MAAM,GAAGe,GAAG,CAACC,KAAK,KAAK,IAAI,GAAG/C,KAAK,CAACgD,iBAAiB,CAAC,IAAI,CAACjB,MAAM,EAAEe,GAAG,CAACC,KAAK,EAAE,IAAI,CAAC1C,YAAY,CAAC,GAAG,CAAC;QACzG,IAAI,CAAC2B,KAAK,GAAGc,GAAG,CAACG,IAAI,KAAK,IAAI,GAAGjD,KAAK,CAACgD,iBAAiB,CAAC,IAAI,CAAChB,KAAK,EAAEc,GAAG,CAACG,IAAI,EAAE,IAAI,CAAC5C,YAAY,CAAC,GAAG,CAAC;QACrG,IAAI,CAAC4B,MAAM,GAAGa,GAAG,CAACI,KAAK,KAAK,IAAI,GAAGlD,KAAK,CAACgD,iBAAiB,CAAC,IAAI,CAACf,MAAM,EAAEa,GAAG,CAACI,KAAK,EAAE,IAAI,CAAC7C,YAAY,CAAC,GAAG,CAAC;OAC5G,MAAM;QACH,IAAI,CAAC0B,MAAM,GAAGe,GAAG,CAACC,KAAK,KAAK,IAAI,GAAGD,GAAG,CAACC,KAAK,GAAG,CAAC;QAChD,IAAI,CAACf,KAAK,GAAGc,GAAG,CAACG,IAAI,KAAK,IAAI,GAAGH,GAAG,CAACG,IAAI,GAAG,CAAC;QAC7C,IAAI,CAAChB,MAAM,GAAGa,GAAG,CAACI,KAAK,KAAK,IAAI,GAAGJ,GAAG,CAACI,KAAK,GAAG,CAAC;;MAGpD,IAAIJ,GAAG,CAACC,KAAK,KAAK,IAAI,EAAE;QACpB,IAAI,CAACb,qCAAqC,CAACiB,eAAe,EAAE;;IAEpE,CAAC;IAjFG,IAAI,CAACC,iBAAiB,GAAG,IAAIrD,UAAU,CAAC,CAAC2C,IAAI,CAACW,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,CAAC,EAAEX,IAAI,CAACW,IAAI,CAAC,GAAG,CAAC,CAAC;IAC9E,IAAI,CAAClB,mBAAmB,EAAE;EAC9B;EAEA;;;EAGA,IAAWmB,MAAMA,CAAA;IACb,OAAO,IAAI,CAACC,OAAO;EACvB;EAEA,IAAWD,MAAMA,CAACA,MAAkB;IAChC,IAAI,CAACC,OAAO,GAAGD,MAAM;IACrB,IAAI,IAAI,CAACC,OAAO,IAAI,IAAI,IAAI,CAAC,IAAI,CAACA,OAAO,CAACC,kBAAkB,EAAE;MAC1D,IAAI,CAACD,OAAO,CAACC,kBAAkB,GAAG,IAAIzD,UAAU,EAAE;;IAEtD,IAAI,IAAI,CAACwD,OAAO,EAAE;MACd,IAAI,CAACA,OAAO,CAACE,mBAAmB,CAACjD,GAAG,CAAC,MAAK;QACtC,IAAI,CAAC0B,qCAAqC,CAACwB,KAAK,EAAE;MACtD,CAAC,CAAC;;EAEV;EAEA;;;EAGOC,aAAaA,CAAA;IAChB,MAAMC,UAAU,GAAG,IAAI,CAACN,MAAM,CAACO,QAAQ,EAAE,CAACC,SAAS,EAAE,CAACC,aAAa,EAAE;IAErE,IAAIH,UAAU,EAAE;MACZ,MAAM7C,YAAY,GAAGA,CAAA,KAAK;QACtB6C,UAAW,CAACrC,gBAAgB,CAAC,mBAAmB,EAAE,IAAI,CAACY,mBAAmB,CAAC;QAC3EyB,UAAW,CAACrC,gBAAgB,CAAC,mBAAmB,EAAE,IAAI,CAACsB,kBAAkB,CAAC;QAC1E;QACA;QACA,IAAI,CAACV,mBAAmB,EAAE;MAC9B,CAAC;MACD,IAAI,OAAOhB,sBAAsB,KAAK,WAAW,IAAI,OAAaA,sBAAuB,CAACC,iBAAiB,KAAK,UAAU,EAAE;QAClHD,sBAAuB,CACxBC,iBAAiB,EAAE,CACnBC,IAAI,CAAEC,QAAgB,IAAI;UACvB,IAAIA,QAAQ,KAAK,SAAS,EAAE;YACxBP,YAAY,EAAE;WACjB,MAAM;YACHf,KAAK,CAACwB,IAAI,CAAC,yBAAyB,CAAC;;QAE7C,CAAC,CAAC,CACDC,KAAK,CAAEC,KAAU,IAAI;UAClB1B,KAAK,CAAC2B,KAAK,CAACD,KAAK,CAAC;QACtB,CAAC,CAAC;OACT,MAAM;QACHX,YAAY,EAAE;;;EAG1B;EA6BA;;;EAGOiD,aAAaA,CAAA;IAChBhD,MAAM,CAACC,mBAAmB,CAAC,mBAAmB,EAAE,IAAI,CAACkB,mBAAmB,CAAC;IACzEnB,MAAM,CAACC,mBAAmB,CAAC,mBAAmB,EAAE,IAAI,CAAC4B,kBAAkB,CAAC;IACxE,IAAI,CAACd,MAAM,GAAG,CAAC;EACnB;EAEA;;;;EAIOkC,WAAWA,CAAA;IACd;IACA;IACA,IAAI,CAAC,IAAI,CAAClC,MAAM,EAAE;MACd;;IAEJhC,UAAU,CAACmE,yBAAyB,CAAClE,KAAK,CAACwC,SAAS,CAAC,IAAI,CAACT,MAAM,CAAC,EAAE/B,KAAK,CAACwC,SAAS,CAAC,IAAI,CAACR,KAAK,CAAC,EAAE,CAAChC,KAAK,CAACwC,SAAS,CAAC,IAAI,CAACP,MAAM,CAAC,EAAE,IAAI,CAACqB,MAAM,CAACE,kBAAkB,CAAC;IAC9J,IAAI,CAACD,OAAO,CAACC,kBAAkB,CAACW,eAAe,CAAC,IAAI,CAACrC,iBAAiB,CAAC;IACvE,IAAI,CAACyB,OAAO,CAACC,kBAAkB,CAACW,eAAe,CAAC,IAAI,CAACf,iBAAiB,CAAC;IACvE;IACA,IAAI,CAACG,OAAO,CAACC,kBAAkB,CAACY,CAAC,IAAI,CAAC,CAAC;IACvC,IAAI,CAACb,OAAO,CAACC,kBAAkB,CAACa,CAAC,IAAI,CAAC,CAAC;EAC3C;EAEA;;;;EAIOC,YAAYA,CAAA;IACf,OAAO,kCAAkC;EAC7C;EAEA;;;;EAIOC,aAAaA,CAAA;IAChB,OAAO,mBAAmB;EAC9B;;AAGEzE,gBAAiB,CAAC,kCAAkC,CAAC,GAAGS,gCAAgC"},"metadata":{},"sourceType":"module","externalDependencies":[]}