{"ast":null,"code":"import \"core-js/modules/es.typed-array.to-reversed.js\";\nimport \"core-js/modules/es.typed-array.to-sorted.js\";\nimport \"core-js/modules/es.typed-array.with.js\";\nimport { Vector2 } from \"@babylonjs/core/Maths/math.vector.js\";\nimport { Epsilon } from \"@babylonjs/core/Maths/math.constants.js\";\n/**\n * Class used to transport Vector2 information for pointer events\n */\nexport class Vector2WithInfo extends Vector2 {\n  /**\n   * Creates a new Vector2WithInfo\n   * @param source defines the vector2 data to transport\n   * @param buttonIndex defines the current mouse button index\n   */\n  constructor(source, /** defines the current mouse button index */\n  buttonIndex = 0) {\n    super(source.x, source.y);\n    this.buttonIndex = buttonIndex;\n  }\n}\n/** Class used to provide 2D matrix features */\nexport class Matrix2D {\n  /**\n   * Creates a new matrix\n   * @param m00 defines value for (0, 0)\n   * @param m01 defines value for (0, 1)\n   * @param m10 defines value for (1, 0)\n   * @param m11 defines value for (1, 1)\n   * @param m20 defines value for (2, 0)\n   * @param m21 defines value for (2, 1)\n   */\n  constructor(m00, m01, m10, m11, m20, m21) {\n    /** Gets the internal array of 6 floats used to store matrix data */\n    this.m = new Float32Array(6);\n    this.fromValues(m00, m01, m10, m11, m20, m21);\n  }\n  /**\n   * Fills the matrix from direct values\n   * @param m00 defines value for (0, 0)\n   * @param m01 defines value for (0, 1)\n   * @param m10 defines value for (1, 0)\n   * @param m11 defines value for (1, 1)\n   * @param m20 defines value for (2, 0)\n   * @param m21 defines value for (2, 1)\n   * @returns the current modified matrix\n   */\n  fromValues(m00, m01, m10, m11, m20, m21) {\n    this.m[0] = m00;\n    this.m[1] = m01;\n    this.m[2] = m10;\n    this.m[3] = m11;\n    this.m[4] = m20;\n    this.m[5] = m21;\n    return this;\n  }\n  /**\n   * Gets matrix determinant\n   * @returns the determinant\n   */\n  determinant() {\n    return this.m[0] * this.m[3] - this.m[1] * this.m[2];\n  }\n  /**\n   * Inverses the matrix and stores it in a target matrix\n   * @param result defines the target matrix\n   * @returns the current matrix\n   */\n  invertToRef(result) {\n    const l0 = this.m[0];\n    const l1 = this.m[1];\n    const l2 = this.m[2];\n    const l3 = this.m[3];\n    const l4 = this.m[4];\n    const l5 = this.m[5];\n    const det = this.determinant();\n    if (det < Epsilon * Epsilon) {\n      result.m[0] = 0;\n      result.m[1] = 0;\n      result.m[2] = 0;\n      result.m[3] = 0;\n      result.m[4] = 0;\n      result.m[5] = 0;\n      return this;\n    }\n    const detDiv = 1 / det;\n    const det4 = l2 * l5 - l3 * l4;\n    const det5 = l1 * l4 - l0 * l5;\n    result.m[0] = l3 * detDiv;\n    result.m[1] = -l1 * detDiv;\n    result.m[2] = -l2 * detDiv;\n    result.m[3] = l0 * detDiv;\n    result.m[4] = det4 * detDiv;\n    result.m[5] = det5 * detDiv;\n    return this;\n  }\n  /**\n   * Multiplies the current matrix with another one\n   * @param other defines the second operand\n   * @param result defines the target matrix\n   * @returns the current matrix\n   */\n  multiplyToRef(other, result) {\n    const l0 = this.m[0];\n    const l1 = this.m[1];\n    const l2 = this.m[2];\n    const l3 = this.m[3];\n    const l4 = this.m[4];\n    const l5 = this.m[5];\n    const r0 = other.m[0];\n    const r1 = other.m[1];\n    const r2 = other.m[2];\n    const r3 = other.m[3];\n    const r4 = other.m[4];\n    const r5 = other.m[5];\n    result.m[0] = l0 * r0 + l1 * r2;\n    result.m[1] = l0 * r1 + l1 * r3;\n    result.m[2] = l2 * r0 + l3 * r2;\n    result.m[3] = l2 * r1 + l3 * r3;\n    result.m[4] = l4 * r0 + l5 * r2 + r4;\n    result.m[5] = l4 * r1 + l5 * r3 + r5;\n    return this;\n  }\n  /**\n   * Applies the current matrix to a set of 2 floats and stores the result in a vector2\n   * @param x defines the x coordinate to transform\n   * @param y defines the x coordinate to transform\n   * @param result defines the target vector2\n   * @returns the current matrix\n   */\n  transformCoordinates(x, y, result) {\n    result.x = x * this.m[0] + y * this.m[2] + this.m[4];\n    result.y = x * this.m[1] + y * this.m[3] + this.m[5];\n    return this;\n  }\n  // Statics\n  /**\n   * Creates an identity matrix\n   * @returns a new matrix\n   */\n  static Identity() {\n    return new Matrix2D(1, 0, 0, 1, 0, 0);\n  }\n  /**\n   * Creates an identity matrix and stores it in a target matrix\n   * @param result defines the target matrix\n   */\n  static IdentityToRef(result) {\n    result.m[0] = 1;\n    result.m[1] = 0;\n    result.m[2] = 0;\n    result.m[3] = 1;\n    result.m[4] = 0;\n    result.m[5] = 0;\n  }\n  /**\n   * Creates a translation matrix and stores it in a target matrix\n   * @param x defines the x coordinate of the translation\n   * @param y defines the y coordinate of the translation\n   * @param result defines the target matrix\n   */\n  static TranslationToRef(x, y, result) {\n    result.fromValues(1, 0, 0, 1, x, y);\n  }\n  /**\n   * Creates a scaling matrix and stores it in a target matrix\n   * @param x defines the x coordinate of the scaling\n   * @param y defines the y coordinate of the scaling\n   * @param result defines the target matrix\n   */\n  static ScalingToRef(x, y, result) {\n    result.fromValues(x, 0, 0, y, 0, 0);\n  }\n  /**\n   * Creates a rotation matrix and stores it in a target matrix\n   * @param angle defines the rotation angle\n   * @param result defines the target matrix\n   */\n  static RotationToRef(angle, result) {\n    const s = Math.sin(angle);\n    const c = Math.cos(angle);\n    result.fromValues(c, s, -s, c, 0, 0);\n  }\n  /**\n   * Composes a matrix from translation, rotation, scaling and parent matrix and stores it in a target matrix\n   * @param tx defines the x coordinate of the translation\n   * @param ty defines the y coordinate of the translation\n   * @param angle defines the rotation angle\n   * @param scaleX defines the x coordinate of the scaling\n   * @param scaleY defines the y coordinate of the scaling\n   * @param parentMatrix defines the parent matrix to multiply by (can be null)\n   * @param result defines the target matrix\n   */\n  static ComposeToRef(tx, ty, angle, scaleX, scaleY, parentMatrix, result) {\n    Matrix2D.TranslationToRef(tx, ty, Matrix2D._TempPreTranslationMatrix);\n    Matrix2D.ScalingToRef(scaleX, scaleY, Matrix2D._TempScalingMatrix);\n    Matrix2D.RotationToRef(angle, Matrix2D._TempRotationMatrix);\n    Matrix2D.TranslationToRef(-tx, -ty, Matrix2D._TempPostTranslationMatrix);\n    Matrix2D._TempPreTranslationMatrix.multiplyToRef(Matrix2D._TempScalingMatrix, Matrix2D._TempCompose0);\n    Matrix2D._TempCompose0.multiplyToRef(Matrix2D._TempRotationMatrix, Matrix2D._TempCompose1);\n    if (parentMatrix) {\n      Matrix2D._TempCompose1.multiplyToRef(Matrix2D._TempPostTranslationMatrix, Matrix2D._TempCompose2);\n      Matrix2D._TempCompose2.multiplyToRef(parentMatrix, result);\n    } else {\n      Matrix2D._TempCompose1.multiplyToRef(Matrix2D._TempPostTranslationMatrix, result);\n    }\n  }\n}\nMatrix2D._TempPreTranslationMatrix = Matrix2D.Identity();\nMatrix2D._TempPostTranslationMatrix = Matrix2D.Identity();\nMatrix2D._TempRotationMatrix = Matrix2D.Identity();\nMatrix2D._TempScalingMatrix = Matrix2D.Identity();\nMatrix2D._TempCompose0 = Matrix2D.Identity();\nMatrix2D._TempCompose1 = Matrix2D.Identity();\nMatrix2D._TempCompose2 = Matrix2D.Identity();\n/**\n * Useful math functions\n */\nexport class MathTools {\n  /**\n   * Rounds a number to the nearest multiple of a given precision\n   * @param value the value to be rounded\n   * @param precision the multiple to which the value will be rounded. Default is 100 (2 decimal digits)\n   * @returns\n   */\n  static Round(value, precision = MathTools.DefaultRoundingPrecision) {\n    return Math.round(value * precision) / precision;\n  }\n}\n/**\n * Default rounding precision for GUI elements. It should be\n * set to a power of ten, where the exponent means the number\n * of decimal digits to round to, i.e, 100 means 2 decimal digits,\n * 1000 means 3 decimal digits, etc. Default is 100 (2 decimal digits).\n */\nMathTools.DefaultRoundingPrecision = 100;","map":{"version":3,"names":["Vector2","Epsilon","Vector2WithInfo","constructor","source","buttonIndex","x","y","Matrix2D","m00","m01","m10","m11","m20","m21","m","Float32Array","fromValues","determinant","invertToRef","result","l0","l1","l2","l3","l4","l5","det","detDiv","det4","det5","multiplyToRef","other","r0","r1","r2","r3","r4","r5","transformCoordinates","Identity","IdentityToRef","TranslationToRef","ScalingToRef","RotationToRef","angle","s","Math","sin","c","cos","ComposeToRef","tx","ty","scaleX","scaleY","parentMatrix","_TempPreTranslationMatrix","_TempScalingMatrix","_TempRotationMatrix","_TempPostTranslationMatrix","_TempCompose0","_TempCompose1","_TempCompose2","MathTools","Round","value","precision","DefaultRoundingPrecision","round"],"sources":["../../../../dev/gui/src/2D/math2D.ts"],"sourcesContent":["import type { Nullable } from \"core/types\";\r\nimport { Vector2 } from \"core/Maths/math.vector\";\r\nimport { Epsilon } from \"core/Maths/math.constants\";\r\n\r\n/**\r\n * Class used to transport Vector2 information for pointer events\r\n */\r\nexport class Vector2WithInfo extends Vector2 {\r\n    /**\r\n     * Creates a new Vector2WithInfo\r\n     * @param source defines the vector2 data to transport\r\n     * @param buttonIndex defines the current mouse button index\r\n     */\r\n    public constructor(\r\n        source: Vector2,\r\n        /** defines the current mouse button index */\r\n        public buttonIndex: number = 0\r\n    ) {\r\n        super(source.x, source.y);\r\n    }\r\n}\r\n\r\n/** Class used to provide 2D matrix features */\r\nexport class Matrix2D {\r\n    /** Gets the internal array of 6 floats used to store matrix data */\r\n    public m = new Float32Array(6);\r\n\r\n    /**\r\n     * Creates a new matrix\r\n     * @param m00 defines value for (0, 0)\r\n     * @param m01 defines value for (0, 1)\r\n     * @param m10 defines value for (1, 0)\r\n     * @param m11 defines value for (1, 1)\r\n     * @param m20 defines value for (2, 0)\r\n     * @param m21 defines value for (2, 1)\r\n     */\r\n    constructor(m00: number, m01: number, m10: number, m11: number, m20: number, m21: number) {\r\n        this.fromValues(m00, m01, m10, m11, m20, m21);\r\n    }\r\n\r\n    /**\r\n     * Fills the matrix from direct values\r\n     * @param m00 defines value for (0, 0)\r\n     * @param m01 defines value for (0, 1)\r\n     * @param m10 defines value for (1, 0)\r\n     * @param m11 defines value for (1, 1)\r\n     * @param m20 defines value for (2, 0)\r\n     * @param m21 defines value for (2, 1)\r\n     * @returns the current modified matrix\r\n     */\r\n    public fromValues(m00: number, m01: number, m10: number, m11: number, m20: number, m21: number): Matrix2D {\r\n        this.m[0] = m00;\r\n        this.m[1] = m01;\r\n        this.m[2] = m10;\r\n        this.m[3] = m11;\r\n        this.m[4] = m20;\r\n        this.m[5] = m21;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Gets matrix determinant\r\n     * @returns the determinant\r\n     */\r\n    public determinant(): number {\r\n        return this.m[0] * this.m[3] - this.m[1] * this.m[2];\r\n    }\r\n\r\n    /**\r\n     * Inverses the matrix and stores it in a target matrix\r\n     * @param result defines the target matrix\r\n     * @returns the current matrix\r\n     */\r\n    public invertToRef(result: Matrix2D): Matrix2D {\r\n        const l0 = this.m[0];\r\n        const l1 = this.m[1];\r\n        const l2 = this.m[2];\r\n        const l3 = this.m[3];\r\n        const l4 = this.m[4];\r\n        const l5 = this.m[5];\r\n\r\n        const det = this.determinant();\r\n        if (det < Epsilon * Epsilon) {\r\n            result.m[0] = 0;\r\n            result.m[1] = 0;\r\n            result.m[2] = 0;\r\n            result.m[3] = 0;\r\n            result.m[4] = 0;\r\n            result.m[5] = 0;\r\n            return this;\r\n        }\r\n\r\n        const detDiv = 1 / det;\r\n\r\n        const det4 = l2 * l5 - l3 * l4;\r\n        const det5 = l1 * l4 - l0 * l5;\r\n\r\n        result.m[0] = l3 * detDiv;\r\n        result.m[1] = -l1 * detDiv;\r\n        result.m[2] = -l2 * detDiv;\r\n        result.m[3] = l0 * detDiv;\r\n        result.m[4] = det4 * detDiv;\r\n        result.m[5] = det5 * detDiv;\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Multiplies the current matrix with another one\r\n     * @param other defines the second operand\r\n     * @param result defines the target matrix\r\n     * @returns the current matrix\r\n     */\r\n    public multiplyToRef(other: Matrix2D, result: Matrix2D): Matrix2D {\r\n        const l0 = this.m[0];\r\n        const l1 = this.m[1];\r\n        const l2 = this.m[2];\r\n        const l3 = this.m[3];\r\n        const l4 = this.m[4];\r\n        const l5 = this.m[5];\r\n\r\n        const r0 = other.m[0];\r\n        const r1 = other.m[1];\r\n        const r2 = other.m[2];\r\n        const r3 = other.m[3];\r\n        const r4 = other.m[4];\r\n        const r5 = other.m[5];\r\n\r\n        result.m[0] = l0 * r0 + l1 * r2;\r\n        result.m[1] = l0 * r1 + l1 * r3;\r\n        result.m[2] = l2 * r0 + l3 * r2;\r\n        result.m[3] = l2 * r1 + l3 * r3;\r\n        result.m[4] = l4 * r0 + l5 * r2 + r4;\r\n        result.m[5] = l4 * r1 + l5 * r3 + r5;\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Applies the current matrix to a set of 2 floats and stores the result in a vector2\r\n     * @param x defines the x coordinate to transform\r\n     * @param y defines the x coordinate to transform\r\n     * @param result defines the target vector2\r\n     * @returns the current matrix\r\n     */\r\n    public transformCoordinates(x: number, y: number, result: Vector2): Matrix2D {\r\n        result.x = x * this.m[0] + y * this.m[2] + this.m[4];\r\n        result.y = x * this.m[1] + y * this.m[3] + this.m[5];\r\n\r\n        return this;\r\n    }\r\n\r\n    // Statics\r\n    /**\r\n     * Creates an identity matrix\r\n     * @returns a new matrix\r\n     */\r\n    public static Identity(): Matrix2D {\r\n        return new Matrix2D(1, 0, 0, 1, 0, 0);\r\n    }\r\n\r\n    /**\r\n     * Creates an identity matrix and stores it in a target matrix\r\n     * @param result defines the target matrix\r\n     */\r\n    public static IdentityToRef(result: Matrix2D): void {\r\n        result.m[0] = 1;\r\n        result.m[1] = 0;\r\n        result.m[2] = 0;\r\n        result.m[3] = 1;\r\n        result.m[4] = 0;\r\n        result.m[5] = 0;\r\n    }\r\n\r\n    /**\r\n     * Creates a translation matrix and stores it in a target matrix\r\n     * @param x defines the x coordinate of the translation\r\n     * @param y defines the y coordinate of the translation\r\n     * @param result defines the target matrix\r\n     */\r\n    public static TranslationToRef(x: number, y: number, result: Matrix2D): void {\r\n        result.fromValues(1, 0, 0, 1, x, y);\r\n    }\r\n\r\n    /**\r\n     * Creates a scaling matrix and stores it in a target matrix\r\n     * @param x defines the x coordinate of the scaling\r\n     * @param y defines the y coordinate of the scaling\r\n     * @param result defines the target matrix\r\n     */\r\n    public static ScalingToRef(x: number, y: number, result: Matrix2D): void {\r\n        result.fromValues(x, 0, 0, y, 0, 0);\r\n    }\r\n\r\n    /**\r\n     * Creates a rotation matrix and stores it in a target matrix\r\n     * @param angle defines the rotation angle\r\n     * @param result defines the target matrix\r\n     */\r\n    public static RotationToRef(angle: number, result: Matrix2D): void {\r\n        const s = Math.sin(angle);\r\n        const c = Math.cos(angle);\r\n\r\n        result.fromValues(c, s, -s, c, 0, 0);\r\n    }\r\n\r\n    private static _TempPreTranslationMatrix = Matrix2D.Identity();\r\n    private static _TempPostTranslationMatrix = Matrix2D.Identity();\r\n    private static _TempRotationMatrix = Matrix2D.Identity();\r\n    private static _TempScalingMatrix = Matrix2D.Identity();\r\n    private static _TempCompose0 = Matrix2D.Identity();\r\n    private static _TempCompose1 = Matrix2D.Identity();\r\n    private static _TempCompose2 = Matrix2D.Identity();\r\n\r\n    /**\r\n     * Composes a matrix from translation, rotation, scaling and parent matrix and stores it in a target matrix\r\n     * @param tx defines the x coordinate of the translation\r\n     * @param ty defines the y coordinate of the translation\r\n     * @param angle defines the rotation angle\r\n     * @param scaleX defines the x coordinate of the scaling\r\n     * @param scaleY defines the y coordinate of the scaling\r\n     * @param parentMatrix defines the parent matrix to multiply by (can be null)\r\n     * @param result defines the target matrix\r\n     */\r\n    public static ComposeToRef(tx: number, ty: number, angle: number, scaleX: number, scaleY: number, parentMatrix: Nullable<Matrix2D>, result: Matrix2D): void {\r\n        Matrix2D.TranslationToRef(tx, ty, Matrix2D._TempPreTranslationMatrix);\r\n\r\n        Matrix2D.ScalingToRef(scaleX, scaleY, Matrix2D._TempScalingMatrix);\r\n\r\n        Matrix2D.RotationToRef(angle, Matrix2D._TempRotationMatrix);\r\n\r\n        Matrix2D.TranslationToRef(-tx, -ty, Matrix2D._TempPostTranslationMatrix);\r\n\r\n        Matrix2D._TempPreTranslationMatrix.multiplyToRef(Matrix2D._TempScalingMatrix, Matrix2D._TempCompose0);\r\n        Matrix2D._TempCompose0.multiplyToRef(Matrix2D._TempRotationMatrix, Matrix2D._TempCompose1);\r\n        if (parentMatrix) {\r\n            Matrix2D._TempCompose1.multiplyToRef(Matrix2D._TempPostTranslationMatrix, Matrix2D._TempCompose2);\r\n            Matrix2D._TempCompose2.multiplyToRef(parentMatrix, result);\r\n        } else {\r\n            Matrix2D._TempCompose1.multiplyToRef(Matrix2D._TempPostTranslationMatrix, result);\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * Useful math functions\r\n */\r\nexport class MathTools {\r\n    /**\r\n     * Default rounding precision for GUI elements. It should be\r\n     * set to a power of ten, where the exponent means the number\r\n     * of decimal digits to round to, i.e, 100 means 2 decimal digits,\r\n     * 1000 means 3 decimal digits, etc. Default is 100 (2 decimal digits).\r\n     */\r\n    public static DefaultRoundingPrecision = 100;\r\n\r\n    /**\r\n     * Rounds a number to the nearest multiple of a given precision\r\n     * @param value the value to be rounded\r\n     * @param precision the multiple to which the value will be rounded. Default is 100 (2 decimal digits)\r\n     * @returns\r\n     */\r\n    public static Round(value: number, precision: number = MathTools.DefaultRoundingPrecision): number {\r\n        return Math.round(value * precision) / precision;\r\n    }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}