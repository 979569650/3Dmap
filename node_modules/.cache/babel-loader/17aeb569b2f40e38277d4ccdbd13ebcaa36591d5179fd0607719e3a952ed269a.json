{"ast":null,"code":"import { VertexData } from \"../../mesh.vertexData.js\";\nimport { RegisterClass } from \"../../../Misc/typeStore.js\";\nimport { NodeGeometryBlockConnectionPointTypes } from \"../Enums/nodeGeometryConnectionPointTypes.js\";\nimport { NodeGeometryBlock } from \"../nodeGeometryBlock.js\";\n/**\n * Block used to recompute normals for a geometry\n */\nexport class ComputeNormalsBlock extends NodeGeometryBlock {\n  /**\n   * Creates a new ComputeNormalsBlock\n   * @param name defines the block name\n   */\n  constructor(name) {\n    super(name);\n    this.registerInput(\"geometry\", NodeGeometryBlockConnectionPointTypes.Geometry);\n    this.registerOutput(\"output\", NodeGeometryBlockConnectionPointTypes.Geometry);\n  }\n  /**\n   * Gets the current class name\n   * @returns the class name\n   */\n  getClassName() {\n    return \"ComputeNormalsBlock\";\n  }\n  /**\n   * Gets the geometry component\n   */\n  get geometry() {\n    return this._inputs[0];\n  }\n  /**\n   * Gets the output component\n   */\n  get output() {\n    return this._outputs[0];\n  }\n  _buildBlock() {\n    this.output._storedFunction = state => {\n      if (!this.geometry.isConnected) {\n        return null;\n      }\n      const vertexData = this.geometry.getConnectedValue(state);\n      if (!vertexData.normals) {\n        vertexData.normals = [];\n      }\n      VertexData.ComputeNormals(vertexData.positions, vertexData.indices, vertexData.normals);\n      return vertexData;\n    };\n  }\n}\nRegisterClass(\"BABYLON.ComputeNormalsBlock\", ComputeNormalsBlock);","map":{"version":3,"names":["VertexData","RegisterClass","NodeGeometryBlockConnectionPointTypes","NodeGeometryBlock","ComputeNormalsBlock","constructor","name","registerInput","Geometry","registerOutput","getClassName","geometry","_inputs","output","_outputs","_buildBlock","_storedFunction","state","isConnected","vertexData","getConnectedValue","normals","ComputeNormals","positions","indices"],"sources":["../../../../../../dev/core/src/Meshes/Node/Blocks/computeNormalsBlock.ts"],"sourcesContent":["import { VertexData } from \"core/Meshes/mesh.vertexData\";\r\nimport { RegisterClass } from \"../../../Misc/typeStore\";\r\nimport { NodeGeometryBlockConnectionPointTypes } from \"../Enums/nodeGeometryConnectionPointTypes\";\r\nimport { NodeGeometryBlock } from \"../nodeGeometryBlock\";\r\nimport type { NodeGeometryConnectionPoint } from \"../nodeGeometryBlockConnectionPoint\";\r\n/**\r\n * Block used to recompute normals for a geometry\r\n */\r\nexport class ComputeNormalsBlock extends NodeGeometryBlock {\r\n    /**\r\n     * Creates a new ComputeNormalsBlock\r\n     * @param name defines the block name\r\n     */\r\n    public constructor(name: string) {\r\n        super(name);\r\n\r\n        this.registerInput(\"geometry\", NodeGeometryBlockConnectionPointTypes.Geometry);\r\n        this.registerOutput(\"output\", NodeGeometryBlockConnectionPointTypes.Geometry);\r\n    }\r\n\r\n    /**\r\n     * Gets the current class name\r\n     * @returns the class name\r\n     */\r\n    public getClassName() {\r\n        return \"ComputeNormalsBlock\";\r\n    }\r\n\r\n    /**\r\n     * Gets the geometry component\r\n     */\r\n    public get geometry(): NodeGeometryConnectionPoint {\r\n        return this._inputs[0];\r\n    }\r\n\r\n    /**\r\n     * Gets the output component\r\n     */\r\n    public get output(): NodeGeometryConnectionPoint {\r\n        return this._outputs[0];\r\n    }\r\n\r\n    protected _buildBlock() {\r\n        this.output._storedFunction = (state) => {\r\n            if (!this.geometry.isConnected) {\r\n                return null;\r\n            }\r\n\r\n            const vertexData = this.geometry.getConnectedValue(state);\r\n            if (!vertexData.normals) {\r\n                vertexData.normals = [];\r\n            }\r\n\r\n            VertexData.ComputeNormals(vertexData.positions, vertexData.indices, vertexData.normals);\r\n\r\n            return vertexData;\r\n        };\r\n    }\r\n}\r\n\r\nRegisterClass(\"BABYLON.ComputeNormalsBlock\", ComputeNormalsBlock);\r\n"],"mappings":"AAAA,SAASA,UAAU,QAAE;AACrB,SAASC,aAAa,QAAQ,4BAA0B;AACxD,SAASC,qCAAqC,QAAQ,8CAA4C;AAClG,SAASC,iBAAiB,QAAQ,yBAAuB;AAEzD;;;AAGA,OAAM,MAAOC,mBAAoB,SAAQD,iBAAiB;EACtD;;;;EAIAE,YAAmBC,IAAY;IAC3B,KAAK,CAACA,IAAI,CAAC;IAEX,IAAI,CAACC,aAAa,CAAC,UAAU,EAAEL,qCAAqC,CAACM,QAAQ,CAAC;IAC9E,IAAI,CAACC,cAAc,CAAC,QAAQ,EAAEP,qCAAqC,CAACM,QAAQ,CAAC;EACjF;EAEA;;;;EAIOE,YAAYA,CAAA;IACf,OAAO,qBAAqB;EAChC;EAEA;;;EAGA,IAAWC,QAAQA,CAAA;IACf,OAAO,IAAI,CAACC,OAAO,CAAC,CAAC,CAAC;EAC1B;EAEA;;;EAGA,IAAWC,MAAMA,CAAA;IACb,OAAO,IAAI,CAACC,QAAQ,CAAC,CAAC,CAAC;EAC3B;EAEUC,WAAWA,CAAA;IACjB,IAAI,CAACF,MAAM,CAACG,eAAe,GAAIC,KAAK,IAAI;MACpC,IAAI,CAAC,IAAI,CAACN,QAAQ,CAACO,WAAW,EAAE;QAC5B,OAAO,IAAI;;MAGf,MAAMC,UAAU,GAAG,IAAI,CAACR,QAAQ,CAACS,iBAAiB,CAACH,KAAK,CAAC;MACzD,IAAI,CAACE,UAAU,CAACE,OAAO,EAAE;QACrBF,UAAU,CAACE,OAAO,GAAG,EAAE;;MAG3BrB,UAAU,CAACsB,cAAc,CAACH,UAAU,CAACI,SAAS,EAAEJ,UAAU,CAACK,OAAO,EAAEL,UAAU,CAACE,OAAO,CAAC;MAEvF,OAAOF,UAAU;IACrB,CAAC;EACL;;AAGJlB,aAAa,CAAC,6BAA6B,EAAEG,mBAAmB,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}