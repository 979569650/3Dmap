{"ast":null,"code":"import { ShaderLanguage } from \"../Materials/shaderLanguage.js\";\n/**\n * Defines the shader related stores and directory\n */\nexport class ShaderStore {\n  /**\n   * Gets the shaders repository path for a given shader language\n   * @param shaderLanguage the shader language\n   * @returns the path to the shaders repository\n   */\n  static GetShadersRepository(shaderLanguage = ShaderLanguage.GLSL) {\n    return shaderLanguage === ShaderLanguage.GLSL ? ShaderStore.ShadersRepository : ShaderStore.ShadersRepositoryWGSL;\n  }\n  /**\n   * Gets the shaders store of a given shader language\n   * @param shaderLanguage the shader language\n   * @returns the shaders store\n   */\n  static GetShadersStore(shaderLanguage = ShaderLanguage.GLSL) {\n    return shaderLanguage === ShaderLanguage.GLSL ? ShaderStore.ShadersStore : ShaderStore.ShadersStoreWGSL;\n  }\n  /**\n   * Gets the include shaders store of a given shader language\n   * @param shaderLanguage the shader language\n   * @returns the include shaders store\n   */\n  static GetIncludesShadersStore(shaderLanguage = ShaderLanguage.GLSL) {\n    return shaderLanguage === ShaderLanguage.GLSL ? ShaderStore.IncludesShadersStore : ShaderStore.IncludesShadersStoreWGSL;\n  }\n}\n/**\n * Gets or sets the relative url used to load shaders if using the engine in non-minified mode\n */\nShaderStore.ShadersRepository = \"src/Shaders/\";\n/**\n * Store of each shader (The can be looked up using effect.key)\n */\nShaderStore.ShadersStore = {};\n/**\n * Store of each included file for a shader (The can be looked up using effect.key)\n */\nShaderStore.IncludesShadersStore = {};\n/**\n * Gets or sets the relative url used to load shaders (WGSL) if using the engine in non-minified mode\n */\nShaderStore.ShadersRepositoryWGSL = \"src/ShadersWGSL/\";\n/**\n * Store of each shader  (WGSL)\n */\nShaderStore.ShadersStoreWGSL = {};\n/**\n * Store of each included file for a shader (WGSL)\n */\nShaderStore.IncludesShadersStoreWGSL = {};","map":{"version":3,"names":["ShaderLanguage","ShaderStore","GetShadersRepository","shaderLanguage","GLSL","ShadersRepository","ShadersRepositoryWGSL","GetShadersStore","ShadersStore","ShadersStoreWGSL","GetIncludesShadersStore","IncludesShadersStore","IncludesShadersStoreWGSL"],"sources":["../../../../dev/core/src/Engines/shaderStore.ts"],"sourcesContent":["import { ShaderLanguage } from \"../Materials/shaderLanguage\";\r\n\r\n/**\r\n * Defines the shader related stores and directory\r\n */\r\nexport class ShaderStore {\r\n    /**\r\n     * Gets or sets the relative url used to load shaders if using the engine in non-minified mode\r\n     */\r\n    public static ShadersRepository = \"src/Shaders/\";\r\n    /**\r\n     * Store of each shader (The can be looked up using effect.key)\r\n     */\r\n    public static ShadersStore: { [key: string]: string } = {};\r\n    /**\r\n     * Store of each included file for a shader (The can be looked up using effect.key)\r\n     */\r\n    public static IncludesShadersStore: { [key: string]: string } = {};\r\n\r\n    /**\r\n     * Gets or sets the relative url used to load shaders (WGSL) if using the engine in non-minified mode\r\n     */\r\n    public static ShadersRepositoryWGSL = \"src/ShadersWGSL/\";\r\n    /**\r\n     * Store of each shader  (WGSL)\r\n     */\r\n    public static ShadersStoreWGSL: { [key: string]: string } = {};\r\n    /**\r\n     * Store of each included file for a shader (WGSL)\r\n     */\r\n    public static IncludesShadersStoreWGSL: { [key: string]: string } = {};\r\n\r\n    /**\r\n     * Gets the shaders repository path for a given shader language\r\n     * @param shaderLanguage the shader language\r\n     * @returns the path to the shaders repository\r\n     */\r\n    public static GetShadersRepository(shaderLanguage = ShaderLanguage.GLSL): string {\r\n        return shaderLanguage === ShaderLanguage.GLSL ? ShaderStore.ShadersRepository : ShaderStore.ShadersRepositoryWGSL;\r\n    }\r\n\r\n    /**\r\n     * Gets the shaders store of a given shader language\r\n     * @param shaderLanguage the shader language\r\n     * @returns the shaders store\r\n     */\r\n    public static GetShadersStore(shaderLanguage = ShaderLanguage.GLSL): { [key: string]: string } {\r\n        return shaderLanguage === ShaderLanguage.GLSL ? ShaderStore.ShadersStore : ShaderStore.ShadersStoreWGSL;\r\n    }\r\n\r\n    /**\r\n     * Gets the include shaders store of a given shader language\r\n     * @param shaderLanguage the shader language\r\n     * @returns the include shaders store\r\n     */\r\n    public static GetIncludesShadersStore(shaderLanguage = ShaderLanguage.GLSL): { [key: string]: string } {\r\n        return shaderLanguage === ShaderLanguage.GLSL ? ShaderStore.IncludesShadersStore : ShaderStore.IncludesShadersStoreWGSL;\r\n    }\r\n}\r\n"],"mappings":"AAAA,SAASA,cAAc,QAAQ,gCAA8B;AAE7D;;;AAGA,OAAM,MAAOC,WAAW;EA2BpB;;;;;EAKO,OAAOC,oBAAoBA,CAACC,cAAc,GAAGH,cAAc,CAACI,IAAI;IACnE,OAAOD,cAAc,KAAKH,cAAc,CAACI,IAAI,GAAGH,WAAW,CAACI,iBAAiB,GAAGJ,WAAW,CAACK,qBAAqB;EACrH;EAEA;;;;;EAKO,OAAOC,eAAeA,CAACJ,cAAc,GAAGH,cAAc,CAACI,IAAI;IAC9D,OAAOD,cAAc,KAAKH,cAAc,CAACI,IAAI,GAAGH,WAAW,CAACO,YAAY,GAAGP,WAAW,CAACQ,gBAAgB;EAC3G;EAEA;;;;;EAKO,OAAOC,uBAAuBA,CAACP,cAAc,GAAGH,cAAc,CAACI,IAAI;IACtE,OAAOD,cAAc,KAAKH,cAAc,CAACI,IAAI,GAAGH,WAAW,CAACU,oBAAoB,GAAGV,WAAW,CAACW,wBAAwB;EAC3H;;AAnDA;;;AAGcX,WAAA,CAAAI,iBAAiB,GAAG,cAAc;AAChD;;;AAGcJ,WAAA,CAAAO,YAAY,GAA8B,EAAE;AAC1D;;;AAGcP,WAAA,CAAAU,oBAAoB,GAA8B,EAAE;AAElE;;;AAGcV,WAAA,CAAAK,qBAAqB,GAAG,kBAAkB;AACxD;;;AAGcL,WAAA,CAAAQ,gBAAgB,GAA8B,EAAE;AAC9D;;;AAGcR,WAAA,CAAAW,wBAAwB,GAA8B,EAAE"},"metadata":{},"sourceType":"module","externalDependencies":[]}