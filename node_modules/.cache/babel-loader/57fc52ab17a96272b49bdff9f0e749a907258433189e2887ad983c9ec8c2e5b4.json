{"ast":null,"code":"import { __decorate } from \"../../tslib.es6.js\";\nimport { serialize } from \"../../Misc/decorators.js\";\nimport { CameraInputTypes } from \"../../Cameras/cameraInputsManager.js\";\nimport { Matrix, Vector3, Vector2 } from \"../../Maths/math.vector.js\";\nimport { Gamepad } from \"../../Gamepads/gamepad.js\";\n/**\n * Manage the gamepad inputs to control a free camera.\n * @see https://doc.babylonjs.com/features/featuresDeepDive/cameras/customizingCameraInputs\n */\nexport class FreeCameraGamepadInput {\n  constructor() {\n    /**\n     * Defines the gamepad rotation sensibility.\n     * This is the threshold from when rotation starts to be accounted for to prevent jittering.\n     */\n    this.gamepadAngularSensibility = 200;\n    /**\n     * Defines the gamepad move sensibility.\n     * This is the threshold from when moving starts to be accounted for for to prevent jittering.\n     */\n    this.gamepadMoveSensibility = 40;\n    /**\n     * Defines the minimum value at which any analog stick input is ignored.\n     * Note: This value should only be a value between 0 and 1.\n     */\n    this.deadzoneDelta = 0.1;\n    this._yAxisScale = 1.0;\n    this._cameraTransform = Matrix.Identity();\n    this._deltaTransform = Vector3.Zero();\n    this._vector3 = Vector3.Zero();\n    this._vector2 = Vector2.Zero();\n  }\n  /**\n   * Gets or sets a boolean indicating that Yaxis (for right stick) should be inverted\n   */\n  get invertYAxis() {\n    return this._yAxisScale !== 1.0;\n  }\n  set invertYAxis(value) {\n    this._yAxisScale = value ? -1.0 : 1.0;\n  }\n  /**\n   * Attach the input controls to a specific dom element to get the input from.\n   */\n  attachControl() {\n    const manager = this.camera.getScene().gamepadManager;\n    this._onGamepadConnectedObserver = manager.onGamepadConnectedObservable.add(gamepad => {\n      if (gamepad.type !== Gamepad.POSE_ENABLED) {\n        // prioritize XBOX gamepads.\n        if (!this.gamepad || gamepad.type === Gamepad.XBOX) {\n          this.gamepad = gamepad;\n        }\n      }\n    });\n    this._onGamepadDisconnectedObserver = manager.onGamepadDisconnectedObservable.add(gamepad => {\n      if (this.gamepad === gamepad) {\n        this.gamepad = null;\n      }\n    });\n    // check if there are already other controllers connected\n    this.gamepad = manager.getGamepadByType(Gamepad.XBOX);\n    // if no xbox controller was found, but there are gamepad controllers, take the first one\n    if (!this.gamepad && manager.gamepads.length) {\n      this.gamepad = manager.gamepads[0];\n    }\n  }\n  /**\n   * Detach the current controls from the specified dom element.\n   */\n  detachControl() {\n    this.camera.getScene().gamepadManager.onGamepadConnectedObservable.remove(this._onGamepadConnectedObserver);\n    this.camera.getScene().gamepadManager.onGamepadDisconnectedObservable.remove(this._onGamepadDisconnectedObserver);\n    this.gamepad = null;\n  }\n  /**\n   * Update the current camera state depending on the inputs that have been used this frame.\n   * This is a dynamically created lambda to avoid the performance penalty of looping for inputs in the render loop.\n   */\n  checkInputs() {\n    if (this.gamepad && this.gamepad.leftStick) {\n      const camera = this.camera;\n      const lsValues = this.gamepad.leftStick;\n      if (this.gamepadMoveSensibility !== 0) {\n        lsValues.x = Math.abs(lsValues.x) > this.deadzoneDelta ? lsValues.x / this.gamepadMoveSensibility : 0;\n        lsValues.y = Math.abs(lsValues.y) > this.deadzoneDelta ? lsValues.y / this.gamepadMoveSensibility : 0;\n      }\n      let rsValues = this.gamepad.rightStick;\n      if (rsValues && this.gamepadAngularSensibility !== 0) {\n        rsValues.x = Math.abs(rsValues.x) > this.deadzoneDelta ? rsValues.x / this.gamepadAngularSensibility : 0;\n        rsValues.y = (Math.abs(rsValues.y) > this.deadzoneDelta ? rsValues.y / this.gamepadAngularSensibility : 0) * this._yAxisScale;\n      } else {\n        rsValues = {\n          x: 0,\n          y: 0\n        };\n      }\n      if (!camera.rotationQuaternion) {\n        Matrix.RotationYawPitchRollToRef(camera.rotation.y, camera.rotation.x, 0, this._cameraTransform);\n      } else {\n        camera.rotationQuaternion.toRotationMatrix(this._cameraTransform);\n      }\n      const speed = camera._computeLocalCameraSpeed() * 50.0;\n      this._vector3.copyFromFloats(lsValues.x * speed, 0, -lsValues.y * speed);\n      Vector3.TransformCoordinatesToRef(this._vector3, this._cameraTransform, this._deltaTransform);\n      camera.cameraDirection.addInPlace(this._deltaTransform);\n      this._vector2.copyFromFloats(rsValues.y, rsValues.x);\n      camera.cameraRotation.addInPlace(this._vector2);\n    }\n  }\n  /**\n   * Gets the class name of the current input.\n   * @returns the class name\n   */\n  getClassName() {\n    return \"FreeCameraGamepadInput\";\n  }\n  /**\n   * Get the friendly name associated with the input class.\n   * @returns the input friendly name\n   */\n  getSimpleName() {\n    return \"gamepad\";\n  }\n}\n__decorate([serialize()], FreeCameraGamepadInput.prototype, \"gamepadAngularSensibility\", void 0);\n__decorate([serialize()], FreeCameraGamepadInput.prototype, \"gamepadMoveSensibility\", void 0);\nCameraInputTypes[\"FreeCameraGamepadInput\"] = FreeCameraGamepadInput;","map":{"version":3,"names":["serialize","CameraInputTypes","Matrix","Vector3","Vector2","Gamepad","FreeCameraGamepadInput","constructor","gamepadAngularSensibility","gamepadMoveSensibility","deadzoneDelta","_yAxisScale","_cameraTransform","Identity","_deltaTransform","Zero","_vector3","_vector2","invertYAxis","value","attachControl","manager","camera","getScene","gamepadManager","_onGamepadConnectedObserver","onGamepadConnectedObservable","add","gamepad","type","POSE_ENABLED","XBOX","_onGamepadDisconnectedObserver","onGamepadDisconnectedObservable","getGamepadByType","gamepads","length","detachControl","remove","checkInputs","leftStick","lsValues","x","Math","abs","y","rsValues","rightStick","rotationQuaternion","RotationYawPitchRollToRef","rotation","toRotationMatrix","speed","_computeLocalCameraSpeed","copyFromFloats","TransformCoordinatesToRef","cameraDirection","addInPlace","cameraRotation","getClassName","getSimpleName","__decorate"],"sources":["../../../../../dev/core/src/Cameras/Inputs/freeCameraGamepadInput.ts"],"sourcesContent":["import { serialize } from \"../../Misc/decorators\";\r\nimport type { Observer } from \"../../Misc/observable\";\r\nimport type { Nullable } from \"../../types\";\r\nimport type { ICameraInput } from \"../../Cameras/cameraInputsManager\";\r\nimport { CameraInputTypes } from \"../../Cameras/cameraInputsManager\";\r\nimport type { FreeCamera } from \"../../Cameras/freeCamera\";\r\nimport { Matrix, Vector3, Vector2 } from \"../../Maths/math.vector\";\r\nimport { Gamepad } from \"../../Gamepads/gamepad\";\r\n\r\n/**\r\n * Manage the gamepad inputs to control a free camera.\r\n * @see https://doc.babylonjs.com/features/featuresDeepDive/cameras/customizingCameraInputs\r\n */\r\nexport class FreeCameraGamepadInput implements ICameraInput<FreeCamera> {\r\n    /**\r\n     * Define the camera the input is attached to.\r\n     */\r\n    public camera: FreeCamera;\r\n\r\n    /**\r\n     * Define the Gamepad controlling the input\r\n     */\r\n    public gamepad: Nullable<Gamepad>;\r\n\r\n    /**\r\n     * Defines the gamepad rotation sensibility.\r\n     * This is the threshold from when rotation starts to be accounted for to prevent jittering.\r\n     */\r\n    @serialize()\r\n    public gamepadAngularSensibility = 200;\r\n\r\n    /**\r\n     * Defines the gamepad move sensibility.\r\n     * This is the threshold from when moving starts to be accounted for for to prevent jittering.\r\n     */\r\n    @serialize()\r\n    public gamepadMoveSensibility = 40;\r\n\r\n    /**\r\n     * Defines the minimum value at which any analog stick input is ignored.\r\n     * Note: This value should only be a value between 0 and 1.\r\n     */\r\n    public deadzoneDelta = 0.1;\r\n\r\n    private _yAxisScale = 1.0;\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating that Yaxis (for right stick) should be inverted\r\n     */\r\n    public get invertYAxis() {\r\n        return this._yAxisScale !== 1.0;\r\n    }\r\n\r\n    public set invertYAxis(value: boolean) {\r\n        this._yAxisScale = value ? -1.0 : 1.0;\r\n    }\r\n\r\n    // private members\r\n    private _onGamepadConnectedObserver: Nullable<Observer<Gamepad>>;\r\n    private _onGamepadDisconnectedObserver: Nullable<Observer<Gamepad>>;\r\n    private _cameraTransform: Matrix = Matrix.Identity();\r\n    private _deltaTransform: Vector3 = Vector3.Zero();\r\n    private _vector3: Vector3 = Vector3.Zero();\r\n    private _vector2: Vector2 = Vector2.Zero();\r\n\r\n    /**\r\n     * Attach the input controls to a specific dom element to get the input from.\r\n     */\r\n    public attachControl(): void {\r\n        const manager = this.camera.getScene().gamepadManager;\r\n        this._onGamepadConnectedObserver = manager.onGamepadConnectedObservable.add((gamepad) => {\r\n            if (gamepad.type !== Gamepad.POSE_ENABLED) {\r\n                // prioritize XBOX gamepads.\r\n                if (!this.gamepad || gamepad.type === Gamepad.XBOX) {\r\n                    this.gamepad = gamepad;\r\n                }\r\n            }\r\n        });\r\n\r\n        this._onGamepadDisconnectedObserver = manager.onGamepadDisconnectedObservable.add((gamepad) => {\r\n            if (this.gamepad === gamepad) {\r\n                this.gamepad = null;\r\n            }\r\n        });\r\n\r\n        // check if there are already other controllers connected\r\n        this.gamepad = manager.getGamepadByType(Gamepad.XBOX);\r\n        // if no xbox controller was found, but there are gamepad controllers, take the first one\r\n        if (!this.gamepad && manager.gamepads.length) {\r\n            this.gamepad = manager.gamepads[0];\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Detach the current controls from the specified dom element.\r\n     */\r\n    public detachControl(): void {\r\n        this.camera.getScene().gamepadManager.onGamepadConnectedObservable.remove(this._onGamepadConnectedObserver);\r\n        this.camera.getScene().gamepadManager.onGamepadDisconnectedObservable.remove(this._onGamepadDisconnectedObserver);\r\n        this.gamepad = null;\r\n    }\r\n\r\n    /**\r\n     * Update the current camera state depending on the inputs that have been used this frame.\r\n     * This is a dynamically created lambda to avoid the performance penalty of looping for inputs in the render loop.\r\n     */\r\n    public checkInputs(): void {\r\n        if (this.gamepad && this.gamepad.leftStick) {\r\n            const camera = this.camera;\r\n            const lsValues = this.gamepad.leftStick;\r\n            if (this.gamepadMoveSensibility !== 0) {\r\n                lsValues.x = Math.abs(lsValues.x) > this.deadzoneDelta ? lsValues.x / this.gamepadMoveSensibility : 0;\r\n                lsValues.y = Math.abs(lsValues.y) > this.deadzoneDelta ? lsValues.y / this.gamepadMoveSensibility : 0;\r\n            }\r\n\r\n            let rsValues = this.gamepad.rightStick;\r\n            if (rsValues && this.gamepadAngularSensibility !== 0) {\r\n                rsValues.x = Math.abs(rsValues.x) > this.deadzoneDelta ? rsValues.x / this.gamepadAngularSensibility : 0;\r\n                rsValues.y = (Math.abs(rsValues.y) > this.deadzoneDelta ? rsValues.y / this.gamepadAngularSensibility : 0) * this._yAxisScale;\r\n            } else {\r\n                rsValues = { x: 0, y: 0 };\r\n            }\r\n\r\n            if (!camera.rotationQuaternion) {\r\n                Matrix.RotationYawPitchRollToRef(camera.rotation.y, camera.rotation.x, 0, this._cameraTransform);\r\n            } else {\r\n                camera.rotationQuaternion.toRotationMatrix(this._cameraTransform);\r\n            }\r\n\r\n            const speed = camera._computeLocalCameraSpeed() * 50.0;\r\n            this._vector3.copyFromFloats(lsValues.x * speed, 0, -lsValues.y * speed);\r\n\r\n            Vector3.TransformCoordinatesToRef(this._vector3, this._cameraTransform, this._deltaTransform);\r\n            camera.cameraDirection.addInPlace(this._deltaTransform);\r\n            this._vector2.copyFromFloats(rsValues.y, rsValues.x);\r\n            camera.cameraRotation.addInPlace(this._vector2);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets the class name of the current input.\r\n     * @returns the class name\r\n     */\r\n    public getClassName(): string {\r\n        return \"FreeCameraGamepadInput\";\r\n    }\r\n\r\n    /**\r\n     * Get the friendly name associated with the input class.\r\n     * @returns the input friendly name\r\n     */\r\n    public getSimpleName(): string {\r\n        return \"gamepad\";\r\n    }\r\n}\r\n\r\n(<any>CameraInputTypes)[\"FreeCameraGamepadInput\"] = FreeCameraGamepadInput;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}