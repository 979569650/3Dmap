{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { __decorate } from \"../../tslib.es6.js\";\nimport { serialize, serializeAsTexture, expandToProperty } from \"../../Misc/decorators.js\";\nimport { MaterialFlags } from \"../materialFlags.js\";\nimport { MaterialHelper } from \"../../Materials/materialHelper.js\";\nimport { MaterialPluginBase } from \"../materialPluginBase.js\";\nimport { MaterialDefines } from \"../materialDefines.js\";\n/**\n * @internal\n */\nexport class MaterialIridescenceDefines extends MaterialDefines {\n  constructor() {\n    super(...arguments);\n    this.IRIDESCENCE = false;\n    this.IRIDESCENCE_TEXTURE = false;\n    this.IRIDESCENCE_TEXTUREDIRECTUV = 0;\n    this.IRIDESCENCE_THICKNESS_TEXTURE = false;\n    this.IRIDESCENCE_THICKNESS_TEXTUREDIRECTUV = 0;\n    this.IRIDESCENCE_USE_THICKNESS_FROM_MAINTEXTURE = false;\n  }\n}\n/**\n * Plugin that implements the iridescence (thin film) component of the PBR material\n */\nexport class PBRIridescenceConfiguration extends MaterialPluginBase {\n  /** @internal */\n  _markAllSubMeshesAsTexturesDirty() {\n    this._enable(this._isEnabled);\n    this._internalMarkAllSubMeshesAsTexturesDirty();\n  }\n  constructor(material, addToPluginList = true) {\n    super(material, \"PBRIridescence\", 110, new MaterialIridescenceDefines(), addToPluginList);\n    this._isEnabled = false;\n    /**\n     * Defines if the iridescence is enabled in the material.\n     */\n    this.isEnabled = false;\n    /**\n     * Defines the iridescence layer strength (between 0 and 1) it defaults to 1.\n     */\n    this.intensity = 1;\n    /**\n     * Defines the minimum thickness of the thin-film layer given in nanometers (nm).\n     */\n    this.minimumThickness = PBRIridescenceConfiguration._DefaultMinimumThickness;\n    /**\n     * Defines the maximum thickness of the thin-film layer given in nanometers (nm). This will be the thickness used if not thickness texture has been set.\n     */\n    this.maximumThickness = PBRIridescenceConfiguration._DefaultMaximumThickness;\n    /**\n     * Defines the maximum thickness of the thin-film layer given in nanometers (nm).\n     */\n    this.indexOfRefraction = PBRIridescenceConfiguration._DefaultIndexOfRefraction;\n    this._texture = null;\n    /**\n     * Stores the iridescence intensity in a texture (red channel)\n     */\n    this.texture = null;\n    this._thicknessTexture = null;\n    /**\n     * Stores the iridescence thickness in a texture (green channel)\n     */\n    this.thicknessTexture = null;\n    this._internalMarkAllSubMeshesAsTexturesDirty = material._dirtyCallbacks[1];\n  }\n  isReadyForSubMesh(defines, scene) {\n    if (!this._isEnabled) {\n      return true;\n    }\n    if (defines._areTexturesDirty) {\n      if (scene.texturesEnabled) {\n        if (this._texture && MaterialFlags.IridescenceTextureEnabled) {\n          if (!this._texture.isReadyOrNotBlocking()) {\n            return false;\n          }\n        }\n        if (this._thicknessTexture && MaterialFlags.IridescenceTextureEnabled) {\n          if (!this._thicknessTexture.isReadyOrNotBlocking()) {\n            return false;\n          }\n        }\n      }\n    }\n    return true;\n  }\n  prepareDefinesBeforeAttributes(defines, scene) {\n    var _a;\n    if (this._isEnabled) {\n      defines.IRIDESCENCE = true;\n      defines.IRIDESCENCE_USE_THICKNESS_FROM_MAINTEXTURE = this._texture !== null && this._texture._texture === ((_a = this._thicknessTexture) === null || _a === void 0 ? void 0 : _a._texture) && this._texture.checkTransformsAreIdentical(this._thicknessTexture);\n      if (defines._areTexturesDirty) {\n        if (scene.texturesEnabled) {\n          if (this._texture && MaterialFlags.IridescenceTextureEnabled) {\n            MaterialHelper.PrepareDefinesForMergedUV(this._texture, defines, \"IRIDESCENCE_TEXTURE\");\n          } else {\n            defines.IRIDESCENCE_TEXTURE = false;\n          }\n          if (!defines.IRIDESCENCE_USE_THICKNESS_FROM_MAINTEXTURE && this._thicknessTexture && MaterialFlags.IridescenceTextureEnabled) {\n            MaterialHelper.PrepareDefinesForMergedUV(this._thicknessTexture, defines, \"IRIDESCENCE_THICKNESS_TEXTURE\");\n          } else {\n            defines.IRIDESCENCE_THICKNESS_TEXTURE = false;\n          }\n        }\n      }\n    } else {\n      defines.IRIDESCENCE = false;\n      defines.IRIDESCENCE_TEXTURE = false;\n      defines.IRIDESCENCE_THICKNESS_TEXTURE = false;\n      defines.IRIDESCENCE_USE_THICKNESS_FROM_MAINTEXTURE = false;\n      defines.IRIDESCENCE_TEXTUREDIRECTUV = 0;\n      defines.IRIDESCENCE_THICKNESS_TEXTUREDIRECTUV = 0;\n    }\n  }\n  bindForSubMesh(uniformBuffer, scene, engine, subMesh) {\n    var _a, _b, _c, _d, _e, _f, _g, _h;\n    if (!this._isEnabled) {\n      return;\n    }\n    const defines = subMesh.materialDefines;\n    const isFrozen = this._material.isFrozen;\n    const identicalTextures = defines.IRIDESCENCE_USE_THICKNESS_FROM_MAINTEXTURE;\n    if (!uniformBuffer.useUbo || !isFrozen || !uniformBuffer.isSync) {\n      if (identicalTextures && MaterialFlags.IridescenceTextureEnabled) {\n        uniformBuffer.updateFloat4(\"vIridescenceInfos\", this._texture.coordinatesIndex, this._texture.level, -1, -1);\n        MaterialHelper.BindTextureMatrix(this._texture, uniformBuffer, \"iridescence\");\n      } else if ((this._texture || this._thicknessTexture) && MaterialFlags.IridescenceTextureEnabled) {\n        uniformBuffer.updateFloat4(\"vIridescenceInfos\", (_b = (_a = this._texture) === null || _a === void 0 ? void 0 : _a.coordinatesIndex) !== null && _b !== void 0 ? _b : 0, (_d = (_c = this._texture) === null || _c === void 0 ? void 0 : _c.level) !== null && _d !== void 0 ? _d : 0, (_f = (_e = this._thicknessTexture) === null || _e === void 0 ? void 0 : _e.coordinatesIndex) !== null && _f !== void 0 ? _f : 0, (_h = (_g = this._thicknessTexture) === null || _g === void 0 ? void 0 : _g.level) !== null && _h !== void 0 ? _h : 0);\n        if (this._texture) {\n          MaterialHelper.BindTextureMatrix(this._texture, uniformBuffer, \"iridescence\");\n        }\n        if (this._thicknessTexture && !identicalTextures && !defines.IRIDESCENCE_USE_THICKNESS_FROM_MAINTEXTURE) {\n          MaterialHelper.BindTextureMatrix(this._thicknessTexture, uniformBuffer, \"iridescenceThickness\");\n        }\n      }\n      // Clear Coat General params\n      uniformBuffer.updateFloat4(\"vIridescenceParams\", this.intensity, this.indexOfRefraction, this.minimumThickness, this.maximumThickness);\n    }\n    // Textures\n    if (scene.texturesEnabled) {\n      if (this._texture && MaterialFlags.IridescenceTextureEnabled) {\n        uniformBuffer.setTexture(\"iridescenceSampler\", this._texture);\n      }\n      if (this._thicknessTexture && !identicalTextures && !defines.IRIDESCENCE_USE_THICKNESS_FROM_MAINTEXTURE && MaterialFlags.IridescenceTextureEnabled) {\n        uniformBuffer.setTexture(\"iridescenceThicknessSampler\", this._thicknessTexture);\n      }\n    }\n  }\n  hasTexture(texture) {\n    if (this._texture === texture) {\n      return true;\n    }\n    if (this._thicknessTexture === texture) {\n      return true;\n    }\n    return false;\n  }\n  getActiveTextures(activeTextures) {\n    if (this._texture) {\n      activeTextures.push(this._texture);\n    }\n    if (this._thicknessTexture) {\n      activeTextures.push(this._thicknessTexture);\n    }\n  }\n  getAnimatables(animatables) {\n    if (this._texture && this._texture.animations && this._texture.animations.length > 0) {\n      animatables.push(this._texture);\n    }\n    if (this._thicknessTexture && this._thicknessTexture.animations && this._thicknessTexture.animations.length > 0) {\n      animatables.push(this._thicknessTexture);\n    }\n  }\n  dispose(forceDisposeTextures) {\n    var _a, _b;\n    if (forceDisposeTextures) {\n      (_a = this._texture) === null || _a === void 0 ? void 0 : _a.dispose();\n      (_b = this._thicknessTexture) === null || _b === void 0 ? void 0 : _b.dispose();\n    }\n  }\n  getClassName() {\n    return \"PBRIridescenceConfiguration\";\n  }\n  addFallbacks(defines, fallbacks, currentRank) {\n    if (defines.IRIDESCENCE) {\n      fallbacks.addFallback(currentRank++, \"IRIDESCENCE\");\n    }\n    return currentRank;\n  }\n  getSamplers(samplers) {\n    samplers.push(\"iridescenceSampler\", \"iridescenceThicknessSampler\");\n  }\n  getUniforms() {\n    return {\n      ubo: [{\n        name: \"vIridescenceParams\",\n        size: 4,\n        type: \"vec4\"\n      }, {\n        name: \"vIridescenceInfos\",\n        size: 4,\n        type: \"vec4\"\n      }, {\n        name: \"iridescenceMatrix\",\n        size: 16,\n        type: \"mat4\"\n      }, {\n        name: \"iridescenceThicknessMatrix\",\n        size: 16,\n        type: \"mat4\"\n      }]\n    };\n  }\n}\n/**\n * The default minimum thickness of the thin-film layer given in nanometers (nm).\n * Defaults to 100 nm.\n * @internal\n */\nPBRIridescenceConfiguration._DefaultMinimumThickness = 100;\n/**\n * The default maximum thickness of the thin-film layer given in nanometers (nm).\n * Defaults to 400 nm.\n * @internal\n */\nPBRIridescenceConfiguration._DefaultMaximumThickness = 400;\n/**\n * The default index of refraction of the thin-film layer.\n * Defaults to 1.3\n * @internal\n */\nPBRIridescenceConfiguration._DefaultIndexOfRefraction = 1.3;\n__decorate([serialize(), expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")], PBRIridescenceConfiguration.prototype, \"isEnabled\", void 0);\n__decorate([serialize()], PBRIridescenceConfiguration.prototype, \"intensity\", void 0);\n__decorate([serialize()], PBRIridescenceConfiguration.prototype, \"minimumThickness\", void 0);\n__decorate([serialize()], PBRIridescenceConfiguration.prototype, \"maximumThickness\", void 0);\n__decorate([serialize()], PBRIridescenceConfiguration.prototype, \"indexOfRefraction\", void 0);\n__decorate([serializeAsTexture(), expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")], PBRIridescenceConfiguration.prototype, \"texture\", void 0);\n__decorate([serializeAsTexture(), expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")], PBRIridescenceConfiguration.prototype, \"thicknessTexture\", void 0);","map":{"version":3,"names":["serialize","serializeAsTexture","expandToProperty","MaterialFlags","MaterialHelper","MaterialPluginBase","MaterialDefines","MaterialIridescenceDefines","constructor","IRIDESCENCE","IRIDESCENCE_TEXTURE","IRIDESCENCE_TEXTUREDIRECTUV","IRIDESCENCE_THICKNESS_TEXTURE","IRIDESCENCE_THICKNESS_TEXTUREDIRECTUV","IRIDESCENCE_USE_THICKNESS_FROM_MAINTEXTURE","PBRIridescenceConfiguration","_markAllSubMeshesAsTexturesDirty","_enable","_isEnabled","_internalMarkAllSubMeshesAsTexturesDirty","material","addToPluginList","isEnabled","intensity","minimumThickness","_DefaultMinimumThickness","maximumThickness","_DefaultMaximumThickness","indexOfRefraction","_DefaultIndexOfRefraction","_texture","texture","_thicknessTexture","thicknessTexture","_dirtyCallbacks","isReadyForSubMesh","defines","scene","_areTexturesDirty","texturesEnabled","IridescenceTextureEnabled","isReadyOrNotBlocking","prepareDefinesBeforeAttributes","_a","checkTransformsAreIdentical","PrepareDefinesForMergedUV","bindForSubMesh","uniformBuffer","engine","subMesh","materialDefines","isFrozen","_material","identicalTextures","useUbo","isSync","updateFloat4","coordinatesIndex","level","BindTextureMatrix","_b","_d","_c","_f","_e","_h","_g","setTexture","hasTexture","getActiveTextures","activeTextures","push","getAnimatables","animatables","animations","length","dispose","forceDisposeTextures","getClassName","addFallbacks","fallbacks","currentRank","addFallback","getSamplers","samplers","getUniforms","ubo","name","size","type","__decorate"],"sources":["../../../../../dev/core/src/Materials/PBR/pbrIridescenceConfiguration.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/naming-convention */\r\nimport type { Nullable } from \"../../types\";\r\nimport { serialize, serializeAsTexture, expandToProperty } from \"../../Misc/decorators\";\r\nimport type { BaseTexture } from \"../../Materials/Textures/baseTexture\";\r\nimport { MaterialFlags } from \"../materialFlags\";\r\nimport type { UniformBuffer } from \"../../Materials/uniformBuffer\";\r\nimport { MaterialHelper } from \"../../Materials/materialHelper\";\r\nimport type { IAnimatable } from \"../../Animations/animatable.interface\";\r\nimport type { EffectFallbacks } from \"../effectFallbacks\";\r\nimport type { SubMesh } from \"../../Meshes/subMesh\";\r\nimport { Constants } from \"../../Engines/constants\";\r\nimport { MaterialPluginBase } from \"../materialPluginBase\";\r\nimport { MaterialDefines } from \"../materialDefines\";\r\n\r\nimport type { Engine } from \"../../Engines/engine\";\r\nimport type { Scene } from \"../../scene\";\r\nimport type { PBRBaseMaterial } from \"./pbrBaseMaterial\";\r\n\r\n/**\r\n * @internal\r\n */\r\nexport class MaterialIridescenceDefines extends MaterialDefines {\r\n    public IRIDESCENCE = false;\r\n    public IRIDESCENCE_TEXTURE = false;\r\n    public IRIDESCENCE_TEXTUREDIRECTUV = 0;\r\n    public IRIDESCENCE_THICKNESS_TEXTURE = false;\r\n    public IRIDESCENCE_THICKNESS_TEXTUREDIRECTUV = 0;\r\n    public IRIDESCENCE_USE_THICKNESS_FROM_MAINTEXTURE = false;\r\n}\r\n\r\n/**\r\n * Plugin that implements the iridescence (thin film) component of the PBR material\r\n */\r\nexport class PBRIridescenceConfiguration extends MaterialPluginBase {\r\n    protected _material: PBRBaseMaterial;\r\n\r\n    /**\r\n     * The default minimum thickness of the thin-film layer given in nanometers (nm).\r\n     * Defaults to 100 nm.\r\n     * @internal\r\n     */\r\n    public static readonly _DefaultMinimumThickness = 100;\r\n\r\n    /**\r\n     * The default maximum thickness of the thin-film layer given in nanometers (nm).\r\n     * Defaults to 400 nm.\r\n     * @internal\r\n     */\r\n    public static readonly _DefaultMaximumThickness = 400;\r\n\r\n    /**\r\n     * The default index of refraction of the thin-film layer.\r\n     * Defaults to 1.3\r\n     * @internal\r\n     */\r\n    public static readonly _DefaultIndexOfRefraction = 1.3;\r\n\r\n    private _isEnabled = false;\r\n    /**\r\n     * Defines if the iridescence is enabled in the material.\r\n     */\r\n    @serialize()\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public isEnabled = false;\r\n\r\n    /**\r\n     * Defines the iridescence layer strength (between 0 and 1) it defaults to 1.\r\n     */\r\n    @serialize()\r\n    public intensity: number = 1;\r\n\r\n    /**\r\n     * Defines the minimum thickness of the thin-film layer given in nanometers (nm).\r\n     */\r\n    @serialize()\r\n    public minimumThickness: number = PBRIridescenceConfiguration._DefaultMinimumThickness;\r\n\r\n    /**\r\n     * Defines the maximum thickness of the thin-film layer given in nanometers (nm). This will be the thickness used if not thickness texture has been set.\r\n     */\r\n    @serialize()\r\n    public maximumThickness: number = PBRIridescenceConfiguration._DefaultMaximumThickness;\r\n\r\n    /**\r\n     * Defines the maximum thickness of the thin-film layer given in nanometers (nm).\r\n     */\r\n    @serialize()\r\n    public indexOfRefraction: number = PBRIridescenceConfiguration._DefaultIndexOfRefraction;\r\n\r\n    private _texture: Nullable<BaseTexture> = null;\r\n    /**\r\n     * Stores the iridescence intensity in a texture (red channel)\r\n     */\r\n    @serializeAsTexture()\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public texture: Nullable<BaseTexture> = null;\r\n\r\n    private _thicknessTexture: Nullable<BaseTexture> = null;\r\n    /**\r\n     * Stores the iridescence thickness in a texture (green channel)\r\n     */\r\n    @serializeAsTexture()\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public thicknessTexture: Nullable<BaseTexture> = null;\r\n\r\n    /** @internal */\r\n    private _internalMarkAllSubMeshesAsTexturesDirty: () => void;\r\n\r\n    /** @internal */\r\n    public _markAllSubMeshesAsTexturesDirty(): void {\r\n        this._enable(this._isEnabled);\r\n        this._internalMarkAllSubMeshesAsTexturesDirty();\r\n    }\r\n\r\n    constructor(material: PBRBaseMaterial, addToPluginList = true) {\r\n        super(material, \"PBRIridescence\", 110, new MaterialIridescenceDefines(), addToPluginList);\r\n\r\n        this._internalMarkAllSubMeshesAsTexturesDirty = material._dirtyCallbacks[Constants.MATERIAL_TextureDirtyFlag];\r\n    }\r\n\r\n    public isReadyForSubMesh(defines: MaterialIridescenceDefines, scene: Scene): boolean {\r\n        if (!this._isEnabled) {\r\n            return true;\r\n        }\r\n\r\n        if (defines._areTexturesDirty) {\r\n            if (scene.texturesEnabled) {\r\n                if (this._texture && MaterialFlags.IridescenceTextureEnabled) {\r\n                    if (!this._texture.isReadyOrNotBlocking()) {\r\n                        return false;\r\n                    }\r\n                }\r\n\r\n                if (this._thicknessTexture && MaterialFlags.IridescenceTextureEnabled) {\r\n                    if (!this._thicknessTexture.isReadyOrNotBlocking()) {\r\n                        return false;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    public prepareDefinesBeforeAttributes(defines: MaterialIridescenceDefines, scene: Scene): void {\r\n        if (this._isEnabled) {\r\n            defines.IRIDESCENCE = true;\r\n            defines.IRIDESCENCE_USE_THICKNESS_FROM_MAINTEXTURE =\r\n                this._texture !== null && this._texture._texture === this._thicknessTexture?._texture && this._texture.checkTransformsAreIdentical(this._thicknessTexture);\r\n\r\n            if (defines._areTexturesDirty) {\r\n                if (scene.texturesEnabled) {\r\n                    if (this._texture && MaterialFlags.IridescenceTextureEnabled) {\r\n                        MaterialHelper.PrepareDefinesForMergedUV(this._texture, defines, \"IRIDESCENCE_TEXTURE\");\r\n                    } else {\r\n                        defines.IRIDESCENCE_TEXTURE = false;\r\n                    }\r\n\r\n                    if (!defines.IRIDESCENCE_USE_THICKNESS_FROM_MAINTEXTURE && this._thicknessTexture && MaterialFlags.IridescenceTextureEnabled) {\r\n                        MaterialHelper.PrepareDefinesForMergedUV(this._thicknessTexture, defines, \"IRIDESCENCE_THICKNESS_TEXTURE\");\r\n                    } else {\r\n                        defines.IRIDESCENCE_THICKNESS_TEXTURE = false;\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            defines.IRIDESCENCE = false;\r\n            defines.IRIDESCENCE_TEXTURE = false;\r\n            defines.IRIDESCENCE_THICKNESS_TEXTURE = false;\r\n            defines.IRIDESCENCE_USE_THICKNESS_FROM_MAINTEXTURE = false;\r\n            defines.IRIDESCENCE_TEXTUREDIRECTUV = 0;\r\n            defines.IRIDESCENCE_THICKNESS_TEXTUREDIRECTUV = 0;\r\n        }\r\n    }\r\n\r\n    public bindForSubMesh(uniformBuffer: UniformBuffer, scene: Scene, engine: Engine, subMesh: SubMesh): void {\r\n        if (!this._isEnabled) {\r\n            return;\r\n        }\r\n\r\n        const defines = subMesh!.materialDefines as unknown as MaterialIridescenceDefines;\r\n\r\n        const isFrozen = this._material.isFrozen;\r\n\r\n        const identicalTextures = defines.IRIDESCENCE_USE_THICKNESS_FROM_MAINTEXTURE;\r\n\r\n        if (!uniformBuffer.useUbo || !isFrozen || !uniformBuffer.isSync) {\r\n            if (identicalTextures && MaterialFlags.IridescenceTextureEnabled) {\r\n                uniformBuffer.updateFloat4(\"vIridescenceInfos\", this._texture!.coordinatesIndex, this._texture!.level, -1, -1);\r\n                MaterialHelper.BindTextureMatrix(this._texture!, uniformBuffer, \"iridescence\");\r\n            } else if ((this._texture || this._thicknessTexture) && MaterialFlags.IridescenceTextureEnabled) {\r\n                uniformBuffer.updateFloat4(\r\n                    \"vIridescenceInfos\",\r\n                    this._texture?.coordinatesIndex ?? 0,\r\n                    this._texture?.level ?? 0,\r\n                    this._thicknessTexture?.coordinatesIndex ?? 0,\r\n                    this._thicknessTexture?.level ?? 0\r\n                );\r\n                if (this._texture) {\r\n                    MaterialHelper.BindTextureMatrix(this._texture, uniformBuffer, \"iridescence\");\r\n                }\r\n                if (this._thicknessTexture && !identicalTextures && !defines.IRIDESCENCE_USE_THICKNESS_FROM_MAINTEXTURE) {\r\n                    MaterialHelper.BindTextureMatrix(this._thicknessTexture, uniformBuffer, \"iridescenceThickness\");\r\n                }\r\n            }\r\n\r\n            // Clear Coat General params\r\n            uniformBuffer.updateFloat4(\"vIridescenceParams\", this.intensity, this.indexOfRefraction, this.minimumThickness, this.maximumThickness);\r\n        }\r\n\r\n        // Textures\r\n        if (scene.texturesEnabled) {\r\n            if (this._texture && MaterialFlags.IridescenceTextureEnabled) {\r\n                uniformBuffer.setTexture(\"iridescenceSampler\", this._texture);\r\n            }\r\n\r\n            if (this._thicknessTexture && !identicalTextures && !defines.IRIDESCENCE_USE_THICKNESS_FROM_MAINTEXTURE && MaterialFlags.IridescenceTextureEnabled) {\r\n                uniformBuffer.setTexture(\"iridescenceThicknessSampler\", this._thicknessTexture);\r\n            }\r\n        }\r\n    }\r\n\r\n    public hasTexture(texture: BaseTexture): boolean {\r\n        if (this._texture === texture) {\r\n            return true;\r\n        }\r\n\r\n        if (this._thicknessTexture === texture) {\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    public getActiveTextures(activeTextures: BaseTexture[]): void {\r\n        if (this._texture) {\r\n            activeTextures.push(this._texture);\r\n        }\r\n\r\n        if (this._thicknessTexture) {\r\n            activeTextures.push(this._thicknessTexture);\r\n        }\r\n    }\r\n\r\n    public getAnimatables(animatables: IAnimatable[]): void {\r\n        if (this._texture && this._texture.animations && this._texture.animations.length > 0) {\r\n            animatables.push(this._texture);\r\n        }\r\n\r\n        if (this._thicknessTexture && this._thicknessTexture.animations && this._thicknessTexture.animations.length > 0) {\r\n            animatables.push(this._thicknessTexture);\r\n        }\r\n    }\r\n\r\n    public dispose(forceDisposeTextures?: boolean): void {\r\n        if (forceDisposeTextures) {\r\n            this._texture?.dispose();\r\n            this._thicknessTexture?.dispose();\r\n        }\r\n    }\r\n\r\n    public getClassName(): string {\r\n        return \"PBRIridescenceConfiguration\";\r\n    }\r\n\r\n    public addFallbacks(defines: MaterialIridescenceDefines, fallbacks: EffectFallbacks, currentRank: number): number {\r\n        if (defines.IRIDESCENCE) {\r\n            fallbacks.addFallback(currentRank++, \"IRIDESCENCE\");\r\n        }\r\n        return currentRank;\r\n    }\r\n\r\n    public getSamplers(samplers: string[]): void {\r\n        samplers.push(\"iridescenceSampler\", \"iridescenceThicknessSampler\");\r\n    }\r\n\r\n    public getUniforms(): { ubo?: Array<{ name: string; size: number; type: string }>; vertex?: string; fragment?: string } {\r\n        return {\r\n            ubo: [\r\n                { name: \"vIridescenceParams\", size: 4, type: \"vec4\" },\r\n                { name: \"vIridescenceInfos\", size: 4, type: \"vec4\" },\r\n                { name: \"iridescenceMatrix\", size: 16, type: \"mat4\" },\r\n                { name: \"iridescenceThicknessMatrix\", size: 16, type: \"mat4\" },\r\n            ],\r\n        };\r\n    }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}