{"ast":null,"code":"import { Engine } from \"../../engine.js\";\nimport { WebGPUEngine } from \"../../webgpuEngine.js\";\nWebGPUEngine.prototype.setAlphaMode = function (mode, noDepthWriteChange = false) {\n  if (this._alphaMode === mode && (mode === 0 && !this._alphaState.alphaBlend || mode !== 0 && this._alphaState.alphaBlend)) {\n    if (!noDepthWriteChange) {\n      // Make sure we still have the correct depth mask according to the alpha mode (a transparent material could have forced writting to the depth buffer, for instance)\n      const depthMask = mode === 0;\n      if (this.depthCullingState.depthMask !== depthMask) {\n        this.setDepthWrite(depthMask);\n        this._cacheRenderPipeline.setDepthWriteEnabled(depthMask);\n      }\n    }\n    return;\n  }\n  switch (mode) {\n    case 0:\n      this._alphaState.alphaBlend = false;\n      break;\n    case 7:\n      this._alphaState.setAlphaBlendFunctionParameters(1, 771, 1, 1);\n      this._alphaState.alphaBlend = true;\n      break;\n    case 8:\n      this._alphaState.setAlphaBlendFunctionParameters(1, 771, 1, 771);\n      this._alphaState.alphaBlend = true;\n      break;\n    case 2:\n      this._alphaState.setAlphaBlendFunctionParameters(770, 771, 1, 1);\n      this._alphaState.alphaBlend = true;\n      break;\n    case 6:\n      this._alphaState.setAlphaBlendFunctionParameters(1, 1, 0, 1);\n      this._alphaState.alphaBlend = true;\n      break;\n    case 1:\n      this._alphaState.setAlphaBlendFunctionParameters(770, 1, 0, 1);\n      this._alphaState.alphaBlend = true;\n      break;\n    case 3:\n      this._alphaState.setAlphaBlendFunctionParameters(0, 769, 1, 1);\n      this._alphaState.alphaBlend = true;\n      break;\n    case 4:\n      this._alphaState.setAlphaBlendFunctionParameters(774, 0, 1, 1);\n      this._alphaState.alphaBlend = true;\n      break;\n    case 5:\n      this._alphaState.setAlphaBlendFunctionParameters(770, 769, 1, 1);\n      this._alphaState.alphaBlend = true;\n      break;\n    case 9:\n      this._alphaState.setAlphaBlendFunctionParameters(32769, 32770, 32771, 32772);\n      this._alphaState.alphaBlend = true;\n      break;\n    case 10:\n      this._alphaState.setAlphaBlendFunctionParameters(1, 769, 1, 771);\n      this._alphaState.alphaBlend = true;\n      break;\n    case 11:\n      this._alphaState.setAlphaBlendFunctionParameters(1, 1, 1, 1);\n      this._alphaState.alphaBlend = true;\n      break;\n    case 12:\n      this._alphaState.setAlphaBlendFunctionParameters(772, 1, 0, 0);\n      this._alphaState.alphaBlend = true;\n      break;\n    case 13:\n      this._alphaState.setAlphaBlendFunctionParameters(775, 769, 773, 771);\n      this._alphaState.alphaBlend = true;\n      break;\n    case 14:\n      this._alphaState.setAlphaBlendFunctionParameters(1, 771, 1, 771);\n      this._alphaState.alphaBlend = true;\n      break;\n    case 15:\n      this._alphaState.setAlphaBlendFunctionParameters(1, 1, 1, 0);\n      this._alphaState.alphaBlend = true;\n      break;\n    case 16:\n      this._alphaState.setAlphaBlendFunctionParameters(775, 769, 0, 1);\n      this._alphaState.alphaBlend = true;\n      break;\n    case 17:\n      // Same as ALPHA_COMBINE but accumulates (1 - alpha) values in the alpha channel for a later readout in order independant transparency\n      this._alphaState.setAlphaBlendFunctionParameters(770, 771, 1, 771);\n      this._alphaState.alphaBlend = true;\n      break;\n  }\n  if (!noDepthWriteChange) {\n    this.setDepthWrite(mode === Engine.ALPHA_DISABLE);\n    this._cacheRenderPipeline.setDepthWriteEnabled(mode === Engine.ALPHA_DISABLE);\n  }\n  this._alphaMode = mode;\n  this._cacheRenderPipeline.setAlphaBlendEnabled(this._alphaState.alphaBlend);\n  this._cacheRenderPipeline.setAlphaBlendFactors(this._alphaState._blendFunctionParameters, this._alphaState._blendEquationParameters);\n};\nWebGPUEngine.prototype.setAlphaEquation = function (equation) {\n  Engine.prototype.setAlphaEquation.call(this, equation);\n  this._cacheRenderPipeline.setAlphaBlendFactors(this._alphaState._blendFunctionParameters, this._alphaState._blendEquationParameters);\n};","map":{"version":3,"names":["Engine","WebGPUEngine","prototype","setAlphaMode","mode","noDepthWriteChange","_alphaMode","_alphaState","alphaBlend","depthMask","depthCullingState","setDepthWrite","_cacheRenderPipeline","setDepthWriteEnabled","setAlphaBlendFunctionParameters","ALPHA_DISABLE","setAlphaBlendEnabled","setAlphaBlendFactors","_blendFunctionParameters","_blendEquationParameters","setAlphaEquation","equation","call"],"sources":["../../../../../../dev/core/src/Engines/WebGPU/Extensions/engine.alpha.ts"],"sourcesContent":["import { Constants } from \"../../constants\";\r\nimport { Engine } from \"../../engine\";\r\nimport { WebGPUEngine } from \"../../webgpuEngine\";\r\n\r\nWebGPUEngine.prototype.setAlphaMode = function (mode: number, noDepthWriteChange: boolean = false): void {\r\n    if (this._alphaMode === mode && ((mode === Constants.ALPHA_DISABLE && !this._alphaState.alphaBlend) || (mode !== Constants.ALPHA_DISABLE && this._alphaState.alphaBlend))) {\r\n        if (!noDepthWriteChange) {\r\n            // Make sure we still have the correct depth mask according to the alpha mode (a transparent material could have forced writting to the depth buffer, for instance)\r\n            const depthMask = mode === Constants.ALPHA_DISABLE;\r\n            if (this.depthCullingState.depthMask !== depthMask) {\r\n                this.setDepthWrite(depthMask);\r\n                this._cacheRenderPipeline.setDepthWriteEnabled(depthMask);\r\n            }\r\n        }\r\n        return;\r\n    }\r\n\r\n    switch (mode) {\r\n        case Constants.ALPHA_DISABLE:\r\n            this._alphaState.alphaBlend = false;\r\n            break;\r\n        case Constants.ALPHA_PREMULTIPLIED:\r\n            this._alphaState.setAlphaBlendFunctionParameters(1, Constants.GL_ALPHA_FUNCTION_ONE_MINUS_SRC_ALPHA, 1, 1);\r\n            this._alphaState.alphaBlend = true;\r\n            break;\r\n        case Constants.ALPHA_PREMULTIPLIED_PORTERDUFF:\r\n            this._alphaState.setAlphaBlendFunctionParameters(1, Constants.GL_ALPHA_FUNCTION_ONE_MINUS_SRC_ALPHA, 1, Constants.GL_ALPHA_FUNCTION_ONE_MINUS_SRC_ALPHA);\r\n            this._alphaState.alphaBlend = true;\r\n            break;\r\n        case Constants.ALPHA_COMBINE:\r\n            this._alphaState.setAlphaBlendFunctionParameters(Constants.GL_ALPHA_FUNCTION_SRC_ALPHA, Constants.GL_ALPHA_FUNCTION_ONE_MINUS_SRC_ALPHA, 1, 1);\r\n            this._alphaState.alphaBlend = true;\r\n            break;\r\n        case Constants.ALPHA_ONEONE:\r\n            this._alphaState.setAlphaBlendFunctionParameters(1, 1, 0, 1);\r\n            this._alphaState.alphaBlend = true;\r\n            break;\r\n        case Constants.ALPHA_ADD:\r\n            this._alphaState.setAlphaBlendFunctionParameters(Constants.GL_ALPHA_FUNCTION_SRC_ALPHA, 1, 0, 1);\r\n            this._alphaState.alphaBlend = true;\r\n            break;\r\n        case Constants.ALPHA_SUBTRACT:\r\n            this._alphaState.setAlphaBlendFunctionParameters(0, Constants.GL_ALPHA_FUNCTION_ONE_MINUS_SRC_COLOR, 1, 1);\r\n            this._alphaState.alphaBlend = true;\r\n            break;\r\n        case Constants.ALPHA_MULTIPLY:\r\n            this._alphaState.setAlphaBlendFunctionParameters(Constants.GL_ALPHA_FUNCTION_DST_COLOR, 0, 1, 1);\r\n            this._alphaState.alphaBlend = true;\r\n            break;\r\n        case Constants.ALPHA_MAXIMIZED:\r\n            this._alphaState.setAlphaBlendFunctionParameters(Constants.GL_ALPHA_FUNCTION_SRC_ALPHA, Constants.GL_ALPHA_FUNCTION_ONE_MINUS_SRC_COLOR, 1, 1);\r\n            this._alphaState.alphaBlend = true;\r\n            break;\r\n        case Constants.ALPHA_INTERPOLATE:\r\n            this._alphaState.setAlphaBlendFunctionParameters(\r\n                Constants.GL_ALPHA_FUNCTION_CONSTANT_COLOR,\r\n                Constants.GL_ALPHA_FUNCTION_ONE_MINUS_CONSTANT_COLOR,\r\n                Constants.GL_ALPHA_FUNCTION_CONSTANT_ALPHA,\r\n                Constants.GL_ALPHA_FUNCTION_ONE_MINUS_CONSTANT_ALPHA\r\n            );\r\n            this._alphaState.alphaBlend = true;\r\n            break;\r\n        case Constants.ALPHA_SCREENMODE:\r\n            this._alphaState.setAlphaBlendFunctionParameters(1, Constants.GL_ALPHA_FUNCTION_ONE_MINUS_SRC_COLOR, 1, Constants.GL_ALPHA_FUNCTION_ONE_MINUS_SRC_ALPHA);\r\n            this._alphaState.alphaBlend = true;\r\n            break;\r\n        case Constants.ALPHA_ONEONE_ONEONE:\r\n            this._alphaState.setAlphaBlendFunctionParameters(1, 1, 1, 1);\r\n            this._alphaState.alphaBlend = true;\r\n            break;\r\n        case Constants.ALPHA_ALPHATOCOLOR:\r\n            this._alphaState.setAlphaBlendFunctionParameters(Constants.GL_ALPHA_FUNCTION_DST_ALPHA, 1, 0, 0);\r\n            this._alphaState.alphaBlend = true;\r\n            break;\r\n        case Constants.ALPHA_REVERSEONEMINUS:\r\n            this._alphaState.setAlphaBlendFunctionParameters(\r\n                Constants.GL_ALPHA_FUNCTION_ONE_MINUS_DST_COLOR,\r\n                Constants.GL_ALPHA_FUNCTION_ONE_MINUS_SRC_COLOR,\r\n                Constants.GL_ALPHA_FUNCTION_ONE_MINUS_DST_ALPHA,\r\n                Constants.GL_ALPHA_FUNCTION_ONE_MINUS_SRC_ALPHA\r\n            );\r\n            this._alphaState.alphaBlend = true;\r\n            break;\r\n        case Constants.ALPHA_SRC_DSTONEMINUSSRCALPHA:\r\n            this._alphaState.setAlphaBlendFunctionParameters(1, Constants.GL_ALPHA_FUNCTION_ONE_MINUS_SRC_ALPHA, 1, Constants.GL_ALPHA_FUNCTION_ONE_MINUS_SRC_ALPHA);\r\n            this._alphaState.alphaBlend = true;\r\n            break;\r\n        case Constants.ALPHA_ONEONE_ONEZERO:\r\n            this._alphaState.setAlphaBlendFunctionParameters(1, 1, 1, 0);\r\n            this._alphaState.alphaBlend = true;\r\n            break;\r\n        case Constants.ALPHA_EXCLUSION:\r\n            this._alphaState.setAlphaBlendFunctionParameters(Constants.GL_ALPHA_FUNCTION_ONE_MINUS_DST_COLOR, Constants.GL_ALPHA_FUNCTION_ONE_MINUS_SRC_COLOR, 0, 1);\r\n            this._alphaState.alphaBlend = true;\r\n            break;\r\n        case Constants.ALPHA_LAYER_ACCUMULATE:\r\n            // Same as ALPHA_COMBINE but accumulates (1 - alpha) values in the alpha channel for a later readout in order independant transparency\r\n            this._alphaState.setAlphaBlendFunctionParameters(\r\n                Constants.GL_ALPHA_FUNCTION_SRC_ALPHA,\r\n                Constants.GL_ALPHA_FUNCTION_ONE_MINUS_SRC_ALPHA,\r\n                1,\r\n                Constants.GL_ALPHA_FUNCTION_ONE_MINUS_SRC_ALPHA\r\n            );\r\n            this._alphaState.alphaBlend = true;\r\n            break;\r\n    }\r\n    if (!noDepthWriteChange) {\r\n        this.setDepthWrite(mode === Engine.ALPHA_DISABLE);\r\n        this._cacheRenderPipeline.setDepthWriteEnabled(mode === Engine.ALPHA_DISABLE);\r\n    }\r\n    this._alphaMode = mode;\r\n    this._cacheRenderPipeline.setAlphaBlendEnabled(this._alphaState.alphaBlend);\r\n    this._cacheRenderPipeline.setAlphaBlendFactors(this._alphaState._blendFunctionParameters, this._alphaState._blendEquationParameters);\r\n};\r\n\r\nWebGPUEngine.prototype.setAlphaEquation = function (equation: number): void {\r\n    Engine.prototype.setAlphaEquation.call(this, equation);\r\n\r\n    this._cacheRenderPipeline.setAlphaBlendFactors(this._alphaState._blendFunctionParameters, this._alphaState._blendEquationParameters);\r\n};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}