{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport * as WebGPUConstants from \"./webgpuConstants.js\";\n/** @internal */\nexport class WebGPUQuerySet {\n  get querySet() {\n    return this._querySet;\n  }\n  constructor(count, type, device, bufferManager, canUseMultipleBuffers = true, label) {\n    this._dstBuffers = [];\n    this._device = device;\n    this._bufferManager = bufferManager;\n    this._count = count;\n    this._canUseMultipleBuffers = canUseMultipleBuffers;\n    this._querySet = device.createQuerySet({\n      label,\n      type,\n      count\n    });\n    this._queryBuffer = bufferManager.createRawBuffer(8 * count, WebGPUConstants.BufferUsage.QueryResolve | WebGPUConstants.BufferUsage.CopySrc, undefined, \"QueryBuffer\");\n    if (!canUseMultipleBuffers) {\n      this._dstBuffers.push(this._bufferManager.createRawBuffer(8 * this._count, WebGPUConstants.BufferUsage.MapRead | WebGPUConstants.BufferUsage.CopyDst, undefined, \"QueryBufferNoMultipleBuffers\"));\n    }\n  }\n  _getBuffer(firstQuery, queryCount) {\n    if (!this._canUseMultipleBuffers && this._dstBuffers.length === 0) {\n      return null;\n    }\n    const encoderResult = this._device.createCommandEncoder();\n    let buffer;\n    if (this._dstBuffers.length === 0) {\n      buffer = this._bufferManager.createRawBuffer(8 * this._count, WebGPUConstants.BufferUsage.MapRead | WebGPUConstants.BufferUsage.CopyDst, undefined, \"QueryBufferAdditionalBuffer\");\n    } else {\n      buffer = this._dstBuffers[this._dstBuffers.length - 1];\n      this._dstBuffers.length--;\n    }\n    encoderResult.resolveQuerySet(this._querySet, firstQuery, queryCount, this._queryBuffer, 0);\n    encoderResult.copyBufferToBuffer(this._queryBuffer, 0, buffer, 0, 8 * queryCount);\n    this._device.queue.submit([encoderResult.finish()]);\n    return buffer;\n  }\n  async readValues(firstQuery = 0, queryCount = 1) {\n    const buffer = this._getBuffer(firstQuery, queryCount);\n    if (buffer === null) {\n      return null;\n    }\n    await buffer.mapAsync(WebGPUConstants.MapMode.Read);\n    const arrayBuf = new BigUint64Array(buffer.getMappedRange()).slice();\n    buffer.unmap();\n    this._dstBuffers[this._dstBuffers.length] = buffer;\n    return arrayBuf;\n  }\n  async readValue(firstQuery = 0) {\n    const buffer = this._getBuffer(firstQuery, 1);\n    if (buffer === null) {\n      return null;\n    }\n    await buffer.mapAsync(WebGPUConstants.MapMode.Read);\n    const arrayBuf = new BigUint64Array(buffer.getMappedRange());\n    const value = Number(arrayBuf[0]);\n    buffer.unmap();\n    this._dstBuffers[this._dstBuffers.length] = buffer;\n    return value;\n  }\n  async readTwoValuesAndSubtract(firstQuery = 0) {\n    const buffer = this._getBuffer(firstQuery, 2);\n    if (buffer === null) {\n      return null;\n    }\n    await buffer.mapAsync(WebGPUConstants.MapMode.Read);\n    const arrayBuf = new BigUint64Array(buffer.getMappedRange());\n    const value = Number(arrayBuf[1] - arrayBuf[0]);\n    buffer.unmap();\n    this._dstBuffers[this._dstBuffers.length] = buffer;\n    return value;\n  }\n  dispose() {\n    this._querySet.destroy();\n    this._bufferManager.releaseBuffer(this._queryBuffer);\n    for (let i = 0; i < this._dstBuffers.length; ++i) {\n      this._bufferManager.releaseBuffer(this._dstBuffers[i]);\n    }\n  }\n}","map":{"version":3,"names":["WebGPUConstants","WebGPUQuerySet","querySet","_querySet","constructor","count","type","device","bufferManager","canUseMultipleBuffers","label","_dstBuffers","_device","_bufferManager","_count","_canUseMultipleBuffers","createQuerySet","_queryBuffer","createRawBuffer","BufferUsage","QueryResolve","CopySrc","undefined","push","MapRead","CopyDst","_getBuffer","firstQuery","queryCount","length","encoderResult","createCommandEncoder","buffer","resolveQuerySet","copyBufferToBuffer","queue","submit","finish","readValues","mapAsync","MapMode","Read","arrayBuf","BigUint64Array","getMappedRange","slice","unmap","readValue","value","Number","readTwoValuesAndSubtract","dispose","destroy","releaseBuffer","i"],"sources":["../../../../../dev/core/src/Engines/WebGPU/webgpuQuerySet.ts"],"sourcesContent":["import type { WebGPUBufferManager } from \"./webgpuBufferManager\";\r\nimport * as WebGPUConstants from \"./webgpuConstants\";\r\nimport type { QueryType } from \"./webgpuConstants\";\r\n\r\n/** @internal */\r\nexport class WebGPUQuerySet {\r\n    private _device: GPUDevice;\r\n    private _bufferManager: WebGPUBufferManager;\r\n\r\n    private _count: number;\r\n    private _canUseMultipleBuffers: boolean;\r\n    private _querySet: GPUQuerySet;\r\n    private _queryBuffer: GPUBuffer;\r\n    private _dstBuffers: GPUBuffer[] = [];\r\n\r\n    public get querySet(): GPUQuerySet {\r\n        return this._querySet;\r\n    }\r\n\r\n    constructor(count: number, type: QueryType, device: GPUDevice, bufferManager: WebGPUBufferManager, canUseMultipleBuffers = true, label?: string) {\r\n        this._device = device;\r\n        this._bufferManager = bufferManager;\r\n        this._count = count;\r\n        this._canUseMultipleBuffers = canUseMultipleBuffers;\r\n\r\n        this._querySet = device.createQuerySet({\r\n            label,\r\n            type,\r\n            count,\r\n        });\r\n\r\n        this._queryBuffer = bufferManager.createRawBuffer(8 * count, WebGPUConstants.BufferUsage.QueryResolve | WebGPUConstants.BufferUsage.CopySrc, undefined, \"QueryBuffer\");\r\n\r\n        if (!canUseMultipleBuffers) {\r\n            this._dstBuffers.push(\r\n                this._bufferManager.createRawBuffer(\r\n                    8 * this._count,\r\n                    WebGPUConstants.BufferUsage.MapRead | WebGPUConstants.BufferUsage.CopyDst,\r\n                    undefined,\r\n                    \"QueryBufferNoMultipleBuffers\"\r\n                )\r\n            );\r\n        }\r\n    }\r\n\r\n    private _getBuffer(firstQuery: number, queryCount: number): GPUBuffer | null {\r\n        if (!this._canUseMultipleBuffers && this._dstBuffers.length === 0) {\r\n            return null;\r\n        }\r\n\r\n        const encoderResult = this._device.createCommandEncoder();\r\n\r\n        let buffer: GPUBuffer;\r\n        if (this._dstBuffers.length === 0) {\r\n            buffer = this._bufferManager.createRawBuffer(\r\n                8 * this._count,\r\n                WebGPUConstants.BufferUsage.MapRead | WebGPUConstants.BufferUsage.CopyDst,\r\n                undefined,\r\n                \"QueryBufferAdditionalBuffer\"\r\n            );\r\n        } else {\r\n            buffer = this._dstBuffers[this._dstBuffers.length - 1];\r\n            this._dstBuffers.length--;\r\n        }\r\n\r\n        encoderResult.resolveQuerySet(this._querySet, firstQuery, queryCount, this._queryBuffer, 0);\r\n        encoderResult.copyBufferToBuffer(this._queryBuffer, 0, buffer, 0, 8 * queryCount);\r\n\r\n        this._device.queue.submit([encoderResult.finish()]);\r\n\r\n        return buffer;\r\n    }\r\n\r\n    public async readValues(firstQuery = 0, queryCount = 1): Promise<BigUint64Array | null> {\r\n        const buffer = this._getBuffer(firstQuery, queryCount);\r\n        if (buffer === null) {\r\n            return null;\r\n        }\r\n\r\n        await buffer.mapAsync(WebGPUConstants.MapMode.Read);\r\n\r\n        const arrayBuf = new BigUint64Array(buffer.getMappedRange()).slice();\r\n\r\n        buffer.unmap();\r\n\r\n        this._dstBuffers[this._dstBuffers.length] = buffer;\r\n\r\n        return arrayBuf;\r\n    }\r\n\r\n    public async readValue(firstQuery = 0): Promise<number | null> {\r\n        const buffer = this._getBuffer(firstQuery, 1);\r\n        if (buffer === null) {\r\n            return null;\r\n        }\r\n\r\n        await buffer.mapAsync(WebGPUConstants.MapMode.Read);\r\n\r\n        const arrayBuf = new BigUint64Array(buffer.getMappedRange());\r\n        const value = Number(arrayBuf[0]);\r\n\r\n        buffer.unmap();\r\n\r\n        this._dstBuffers[this._dstBuffers.length] = buffer;\r\n\r\n        return value;\r\n    }\r\n\r\n    public async readTwoValuesAndSubtract(firstQuery = 0): Promise<number | null> {\r\n        const buffer = this._getBuffer(firstQuery, 2);\r\n        if (buffer === null) {\r\n            return null;\r\n        }\r\n\r\n        await buffer.mapAsync(WebGPUConstants.MapMode.Read);\r\n\r\n        const arrayBuf = new BigUint64Array(buffer.getMappedRange());\r\n        const value = Number(arrayBuf[1] - arrayBuf[0]);\r\n\r\n        buffer.unmap();\r\n\r\n        this._dstBuffers[this._dstBuffers.length] = buffer;\r\n\r\n        return value;\r\n    }\r\n\r\n    public dispose() {\r\n        this._querySet.destroy();\r\n        this._bufferManager.releaseBuffer(this._queryBuffer);\r\n        for (let i = 0; i < this._dstBuffers.length; ++i) {\r\n            this._bufferManager.releaseBuffer(this._dstBuffers[i]);\r\n        }\r\n    }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}