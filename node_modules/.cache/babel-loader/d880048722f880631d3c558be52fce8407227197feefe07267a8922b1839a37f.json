{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { __decorate } from \"@babylonjs/core/tslib.es6.js\";\nimport { SerializationHelper, serialize } from \"@babylonjs/core/Misc/decorators.js\";\nimport { Vector4 } from \"@babylonjs/core/Maths/math.vector.js\";\nimport { Texture } from \"@babylonjs/core/Materials/Textures/texture.js\";\nimport { MaterialDefines } from \"@babylonjs/core/Materials/materialDefines.js\";\nimport { MaterialHelper } from \"@babylonjs/core/Materials/materialHelper.js\";\nimport { PushMaterial } from \"@babylonjs/core/Materials/pushMaterial.js\";\nimport { VertexBuffer } from \"@babylonjs/core/Buffers/buffer.js\";\nimport { RegisterClass } from \"@babylonjs/core/Misc/typeStore.js\";\nimport { Color4 } from \"@babylonjs/core/Maths/math.color.js\";\nimport { EffectFallbacks } from \"@babylonjs/core/Materials/effectFallbacks.js\";\nimport { Constants } from \"@babylonjs/core/Engines/constants.js\";\nimport \"./shaders/mrdlBackplate.fragment.js\";\nimport \"./shaders/mrdlBackplate.vertex.js\";\n/** @internal */\nclass MRDLBackplateMaterialDefines extends MaterialDefines {\n  constructor() {\n    super();\n    /*\n        \"IRIDESCENCE_ENABLE\", \"SMOOTH_EDGES\"\n    */\n    this.IRIDESCENCE_ENABLE = true;\n    this.SMOOTH_EDGES = true;\n    this._needNormals = true;\n    this.rebuild();\n  }\n}\n/**\n * Class used to render backplate material with MRDL\n */\nexport class MRDLBackplateMaterial extends PushMaterial {\n  constructor(name, scene) {\n    super(name, scene);\n    /**\n     * Gets or sets the corner radius on the backplate. If this value is changed, update the lineWidth to match.\n     */\n    this.radius = 0.3;\n    /**\n     * Gets or sets the line width of the backplate.\n     */\n    this.lineWidth = 0.003;\n    /**\n     * Gets or sets whether to use absolute sizes when calculating effects on the backplate.\n     * Since desktop and VR/AR have different relative sizes, it's usually best to keep this false.\n     */\n    this.absoluteSizes = false;\n    /** @internal */\n    this._filterWidth = 1;\n    /**\n     * Gets or sets the base color of the backplate.\n     */\n    this.baseColor = new Color4(0, 0, 0, 1);\n    /**\n     * Gets or sets the line color of the backplate.\n     */\n    this.lineColor = new Color4(0.2, 0.262745, 0.4, 1);\n    /**\n     * Gets or sets the top left Radii Multiplier.\n     */\n    this.radiusTopLeft = 1.0;\n    /**\n     * Gets or sets the top left Radii Multiplier.\n     */\n    this.radiusTopRight = 1.0;\n    /**\n     * Gets or sets the top left Radii Multiplier.\n     */\n    this.radiusBottomLeft = 1.0;\n    /**\n     * Gets or sets the top left Radii Multiplier.\n     */\n    this.radiusBottomRight = 1.0;\n    /** @internal */\n    this._rate = 0;\n    /**\n     * Gets or sets the color of the highlights on the backplate line.\n     */\n    this.highlightColor = new Color4(0.239216, 0.435294, 0.827451, 1);\n    /**\n     * Gets or sets the width of the highlights on the backplate line.\n     */\n    this.highlightWidth = 0;\n    /** @internal */\n    this._highlightTransform = new Vector4(1, 1, 0, 0);\n    /** @internal */\n    this._highlight = 1;\n    /**\n     * Gets or sets the intensity of the iridescence effect.\n     */\n    this.iridescenceIntensity = 0.45;\n    /**\n     * Gets or sets the intensity of the iridescence effect on the backplate edges.\n     */\n    this.iridescenceEdgeIntensity = 1;\n    /**\n     * Gets or sets the Tint of the iridescence effect on the backplate.\n     */\n    this.iridescenceTint = new Color4(1, 1, 1, 1);\n    /** @internal */\n    this._angle = -45;\n    /**\n     * Gets or sets the opacity of the backplate (0.0 - 1.0).\n     */\n    this.fadeOut = 1;\n    /** @internal */\n    this._reflected = true;\n    /** @internal */\n    this._frequency = 1;\n    /** @internal */\n    this._verticalOffset = 0;\n    /**\n     * Gets or sets the gradient color effect on the backplate.\n     */\n    this.gradientColor = new Color4(0.74902, 0.74902, 0.74902, 1);\n    /**\n     * Gets or sets the top left gradient color effect on the backplate.\n     */\n    this.topLeftGradientColor = new Color4(0.00784314, 0.294118, 0.580392, 1);\n    /**\n     * Gets or sets the top right gradient color effect on the backplate.\n     */\n    this.topRightGradientColor = new Color4(0.305882, 0, 1, 1);\n    /**\n     * Gets or sets the bottom left gradient color effect on the backplate.\n     */\n    this.bottomLeftGradientColor = new Color4(0.133333, 0.258824, 0.992157, 1);\n    /**\n     * Gets or sets the bottom right gradient color effect on the backplate.\n     */\n    this.bottomRightGradientColor = new Color4(0.176471, 0.176471, 0.619608, 1);\n    /**\n     * Gets or sets the edge width of the backplate.\n     */\n    this.edgeWidth = 0.5;\n    /**\n     * Gets or sets the edge width of the backplate.\n     */\n    this.edgePower = 1;\n    /**\n     * Gets or sets the edge width of the backplate.\n     */\n    this.edgeLineGradientBlend = 0.5;\n    this.alphaMode = Constants.ALPHA_DISABLE;\n    this.backFaceCulling = false;\n    this._iridescentMapTexture = new Texture(MRDLBackplateMaterial.IRIDESCENT_MAP_TEXTURE_URL, this.getScene(), true, false, Texture.NEAREST_SAMPLINGMODE);\n  }\n  needAlphaBlending() {\n    return false;\n  }\n  needAlphaTesting() {\n    return false;\n  }\n  getAlphaTestTexture() {\n    return null;\n  }\n  // Methods\n  isReadyForSubMesh(mesh, subMesh) {\n    if (this.isFrozen) {\n      if (subMesh.effect && subMesh.effect._wasPreviouslyReady) {\n        return true;\n      }\n    }\n    if (!subMesh.materialDefines) {\n      subMesh.materialDefines = new MRDLBackplateMaterialDefines();\n    }\n    const defines = subMesh.materialDefines;\n    const scene = this.getScene();\n    if (this._isReadyForSubMesh(subMesh)) {\n      return true;\n    }\n    const engine = scene.getEngine();\n    // Attribs\n    MaterialHelper.PrepareDefinesForAttributes(mesh, defines, false, false);\n    // Get correct effect\n    if (defines.isDirty) {\n      defines.markAsProcessed();\n      scene.resetCachedMaterial();\n      // Fallbacks\n      const fallbacks = new EffectFallbacks();\n      if (defines.FOG) {\n        fallbacks.addFallback(1, \"FOG\");\n      }\n      MaterialHelper.HandleFallbacksForShadows(defines, fallbacks);\n      defines.IMAGEPROCESSINGPOSTPROCESS = scene.imageProcessingConfiguration.applyByPostProcess;\n      //Attributes\n      const attribs = [VertexBuffer.PositionKind];\n      if (defines.NORMAL) {\n        attribs.push(VertexBuffer.NormalKind);\n      }\n      if (defines.UV1) {\n        attribs.push(VertexBuffer.UVKind);\n      }\n      if (defines.UV2) {\n        attribs.push(VertexBuffer.UV2Kind);\n      }\n      if (defines.VERTEXCOLOR) {\n        attribs.push(VertexBuffer.ColorKind);\n      }\n      if (defines.TANGENT) {\n        attribs.push(VertexBuffer.TangentKind);\n      }\n      MaterialHelper.PrepareAttributesForInstances(attribs, defines);\n      // Legacy browser patch\n      const shaderName = \"mrdlBackplate\";\n      const join = defines.toString();\n      const uniforms = [\"world\", \"viewProjection\", \"cameraPosition\", \"_Radius_\", \"_Line_Width_\", \"_Absolute_Sizes_\", \"_Filter_Width_\", \"_Base_Color_\", \"_Line_Color_\", \"_Radius_Top_Left_\", \"_Radius_Top_Right_\", \"_Radius_Bottom_Left_\", \"_Radius_Bottom_Right_\", \"_Rate_\", \"_Highlight_Color_\", \"_Highlight_Width_\", \"_Highlight_Transform_\", \"_Highlight_\", \"_Iridescence_Intensity_\", \"_Iridescence_Edge_Intensity_\", \"_Iridescence_Tint_\", \"_Iridescent_Map_\", \"_Angle_\", \"_Reflected_\", \"_Frequency_\", \"_Vertical_Offset_\", \"_Gradient_Color_\", \"_Top_Left_\", \"_Top_Right_\", \"_Bottom_Left_\", \"_Bottom_Right_\", \"_Edge_Width_\", \"_Edge_Power_\", \"_Line_Gradient_Blend_\", \"_Fade_Out_\"];\n      const samplers = [\"_Iridescent_Map_\"];\n      const uniformBuffers = new Array();\n      MaterialHelper.PrepareUniformsAndSamplersList({\n        uniformsNames: uniforms,\n        uniformBuffersNames: uniformBuffers,\n        samplers: samplers,\n        defines: defines,\n        maxSimultaneousLights: 4\n      });\n      subMesh.setEffect(scene.getEngine().createEffect(shaderName, {\n        attributes: attribs,\n        uniformsNames: uniforms,\n        uniformBuffersNames: uniformBuffers,\n        samplers: samplers,\n        defines: join,\n        fallbacks: fallbacks,\n        onCompiled: this.onCompiled,\n        onError: this.onError,\n        indexParameters: {\n          maxSimultaneousLights: 4\n        }\n      }, engine), defines);\n    }\n    if (!subMesh.effect || !subMesh.effect.isReady()) {\n      return false;\n    }\n    defines._renderId = scene.getRenderId();\n    subMesh.effect._wasPreviouslyReady = true;\n    return true;\n  }\n  bindForSubMesh(world, mesh, subMesh) {\n    const defines = subMesh.materialDefines;\n    if (!defines) {\n      return;\n    }\n    const effect = subMesh.effect;\n    if (!effect) {\n      return;\n    }\n    this._activeEffect = effect;\n    // Matrices\n    this.bindOnlyWorldMatrix(world);\n    this._activeEffect.setMatrix(\"viewProjection\", this.getScene().getTransformMatrix());\n    this._activeEffect.setVector3(\"cameraPosition\", this.getScene().activeCamera.position);\n    // \"Round Rect\"\n    this._activeEffect.setFloat(\"_Radius_\", this.radius);\n    this._activeEffect.setFloat(\"_Line_Width_\", this.lineWidth);\n    this._activeEffect.setFloat(\"_Absolute_Sizes_\", this.absoluteSizes ? 1.0 : 0.0);\n    this._activeEffect.setFloat(\"_Filter_Width_\", this._filterWidth);\n    this._activeEffect.setDirectColor4(\"_Base_Color_\", this.baseColor);\n    this._activeEffect.setDirectColor4(\"_Line_Color_\", this.lineColor);\n    // \"Radii Multipliers\"\n    this._activeEffect.setFloat(\"_Radius_Top_Left_\", this.radiusTopLeft);\n    this._activeEffect.setFloat(\"_Radius_Top_Right_\", this.radiusTopRight);\n    this._activeEffect.setFloat(\"_Radius_Bottom_Left_\", this.radiusBottomLeft);\n    this._activeEffect.setFloat(\"_Radius_Bottom_Right_\", this.radiusBottomRight);\n    // \"Line Highlight\"\n    this._activeEffect.setFloat(\"_Rate_\", this._rate);\n    this._activeEffect.setDirectColor4(\"_Highlight_Color_\", this.highlightColor);\n    this._activeEffect.setFloat(\"_Highlight_Width_\", this.highlightWidth);\n    this._activeEffect.setVector4(\"_Highlight_Transform_\", this._highlightTransform);\n    this._activeEffect.setFloat(\"_Highlight_\", this._highlight);\n    // \"Iridescence\"\n    //define IRIDESCENCE_ENABLE true;\n    this._activeEffect.setFloat(\"_Iridescence_Intensity_\", this.iridescenceIntensity);\n    this._activeEffect.setFloat(\"_Iridescence_Edge_Intensity_\", this.iridescenceEdgeIntensity);\n    this._activeEffect.setDirectColor4(\"_Iridescence_Tint_\", this.iridescenceTint);\n    this._activeEffect.setTexture(\"_Iridescent_Map_\", this._iridescentMapTexture);\n    this._activeEffect.setFloat(\"_Angle_\", this._angle);\n    this._activeEffect.setFloat(\"_Reflected_\", this._reflected ? 1.0 : 0.0);\n    this._activeEffect.setFloat(\"_Frequency_\", this._frequency);\n    this._activeEffect.setFloat(\"_Vertical_Offset_\", this._verticalOffset);\n    // \"Gradient\"\n    this._activeEffect.setDirectColor4(\"_Gradient_Color_\", this.gradientColor);\n    this._activeEffect.setDirectColor4(\"_Top_Left_\", this.topLeftGradientColor);\n    this._activeEffect.setDirectColor4(\"_Top_Right_\", this.topRightGradientColor);\n    this._activeEffect.setDirectColor4(\"_Bottom_Left_\", this.bottomLeftGradientColor);\n    this._activeEffect.setDirectColor4(\"_Bottom_Right_\", this.bottomRightGradientColor);\n    //define EDGE_ONLY false;\n    this._activeEffect.setFloat(\"_Edge_Width_\", this.edgeWidth);\n    this._activeEffect.setFloat(\"_Edge_Power_\", this.edgePower);\n    this._activeEffect.setFloat(\"_Line_Gradient_Blend_\", this.edgeLineGradientBlend);\n    // \"Fade\"\n    this._activeEffect.setFloat(\"_Fade_Out_\", this.fadeOut);\n    // \"Antialiasing\"\n    //define SMOOTH_EDGES true;\n    this._afterBind(mesh, this._activeEffect);\n  }\n  /**\n   * Get the list of animatables in the material.\n   * @returns the list of animatables object used in the material\n   */\n  getAnimatables() {\n    return [];\n  }\n  dispose(forceDisposeEffect) {\n    super.dispose(forceDisposeEffect);\n  }\n  clone(name) {\n    return SerializationHelper.Clone(() => new MRDLBackplateMaterial(name, this.getScene()), this);\n  }\n  serialize() {\n    const serializationObject = super.serialize();\n    serializationObject.customType = \"BABYLON.MRDLBackplateMaterial\";\n    return serializationObject;\n  }\n  getClassName() {\n    return \"MRDLBackplateMaterial\";\n  }\n  // Statics\n  static Parse(source, scene, rootUrl) {\n    return SerializationHelper.Parse(() => new MRDLBackplateMaterial(source.name, scene), source, scene, rootUrl);\n  }\n}\n/**\n * URL pointing to the texture used to define the coloring for the Iridescent Map effect.\n */\nMRDLBackplateMaterial.IRIDESCENT_MAP_TEXTURE_URL = \"https://assets.babylonjs.com/meshes/MRTK/MRDL/mrtk-mrdl-backplate-iridescence.png\";\n__decorate([serialize()], MRDLBackplateMaterial.prototype, \"radius\", void 0);\n__decorate([serialize()], MRDLBackplateMaterial.prototype, \"lineWidth\", void 0);\n__decorate([serialize()], MRDLBackplateMaterial.prototype, \"absoluteSizes\", void 0);\n__decorate([serialize()], MRDLBackplateMaterial.prototype, \"baseColor\", void 0);\n__decorate([serialize()], MRDLBackplateMaterial.prototype, \"lineColor\", void 0);\n__decorate([serialize()], MRDLBackplateMaterial.prototype, \"radiusTopLeft\", void 0);\n__decorate([serialize()], MRDLBackplateMaterial.prototype, \"radiusTopRight\", void 0);\n__decorate([serialize()], MRDLBackplateMaterial.prototype, \"radiusBottomLeft\", void 0);\n__decorate([serialize()], MRDLBackplateMaterial.prototype, \"radiusBottomRight\", void 0);\n__decorate([serialize()], MRDLBackplateMaterial.prototype, \"highlightColor\", void 0);\n__decorate([serialize()], MRDLBackplateMaterial.prototype, \"highlightWidth\", void 0);\n__decorate([serialize()], MRDLBackplateMaterial.prototype, \"iridescenceIntensity\", void 0);\n__decorate([serialize()], MRDLBackplateMaterial.prototype, \"iridescenceEdgeIntensity\", void 0);\n__decorate([serialize()], MRDLBackplateMaterial.prototype, \"iridescenceTint\", void 0);\n__decorate([serialize()], MRDLBackplateMaterial.prototype, \"fadeOut\", void 0);\n__decorate([serialize()], MRDLBackplateMaterial.prototype, \"gradientColor\", void 0);\n__decorate([serialize()], MRDLBackplateMaterial.prototype, \"topLeftGradientColor\", void 0);\n__decorate([serialize()], MRDLBackplateMaterial.prototype, \"topRightGradientColor\", void 0);\n__decorate([serialize()], MRDLBackplateMaterial.prototype, \"bottomLeftGradientColor\", void 0);\n__decorate([serialize()], MRDLBackplateMaterial.prototype, \"bottomRightGradientColor\", void 0);\n__decorate([serialize()], MRDLBackplateMaterial.prototype, \"edgeWidth\", void 0);\n__decorate([serialize()], MRDLBackplateMaterial.prototype, \"edgePower\", void 0);\n__decorate([serialize()], MRDLBackplateMaterial.prototype, \"edgeLineGradientBlend\", void 0);\nRegisterClass(\"BABYLON.GUI.MRDLBackplateMaterial\", MRDLBackplateMaterial);","map":{"version":3,"names":["SerializationHelper","serialize","Vector4","Texture","MaterialDefines","MaterialHelper","PushMaterial","VertexBuffer","RegisterClass","Color4","EffectFallbacks","Constants","MRDLBackplateMaterialDefines","constructor","IRIDESCENCE_ENABLE","SMOOTH_EDGES","_needNormals","rebuild","MRDLBackplateMaterial","name","scene","radius","lineWidth","absoluteSizes","_filterWidth","baseColor","lineColor","radiusTopLeft","radiusTopRight","radiusBottomLeft","radiusBottomRight","_rate","highlightColor","highlightWidth","_highlightTransform","_highlight","iridescenceIntensity","iridescenceEdgeIntensity","iridescenceTint","_angle","fadeOut","_reflected","_frequency","_verticalOffset","gradientColor","topLeftGradientColor","topRightGradientColor","bottomLeftGradientColor","bottomRightGradientColor","edgeWidth","edgePower","edgeLineGradientBlend","alphaMode","ALPHA_DISABLE","backFaceCulling","_iridescentMapTexture","IRIDESCENT_MAP_TEXTURE_URL","getScene","NEAREST_SAMPLINGMODE","needAlphaBlending","needAlphaTesting","getAlphaTestTexture","isReadyForSubMesh","mesh","subMesh","isFrozen","effect","_wasPreviouslyReady","materialDefines","defines","_isReadyForSubMesh","engine","getEngine","PrepareDefinesForAttributes","isDirty","markAsProcessed","resetCachedMaterial","fallbacks","FOG","addFallback","HandleFallbacksForShadows","IMAGEPROCESSINGPOSTPROCESS","imageProcessingConfiguration","applyByPostProcess","attribs","PositionKind","NORMAL","push","NormalKind","UV1","UVKind","UV2","UV2Kind","VERTEXCOLOR","ColorKind","TANGENT","TangentKind","PrepareAttributesForInstances","shaderName","join","toString","uniforms","samplers","uniformBuffers","Array","PrepareUniformsAndSamplersList","uniformsNames","uniformBuffersNames","maxSimultaneousLights","setEffect","createEffect","attributes","onCompiled","onError","indexParameters","isReady","_renderId","getRenderId","bindForSubMesh","world","_activeEffect","bindOnlyWorldMatrix","setMatrix","getTransformMatrix","setVector3","activeCamera","position","setFloat","setDirectColor4","setVector4","setTexture","_afterBind","getAnimatables","dispose","forceDisposeEffect","clone","Clone","serializationObject","customType","getClassName","Parse","source","rootUrl","__decorate"],"sources":["../../../../../../dev/gui/src/3D/materials/mrdl/mrdlBackplateMaterial.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/naming-convention */\r\nimport type { Nullable } from \"core/types\";\r\nimport { SerializationHelper, serialize } from \"core/Misc/decorators\";\r\nimport type { Matrix } from \"core/Maths/math.vector\";\r\nimport { Vector4 } from \"core/Maths/math.vector\";\r\nimport type { IAnimatable } from \"core/Animations/animatable.interface\";\r\nimport type { BaseTexture } from \"core/Materials/Textures/baseTexture\";\r\nimport { Texture } from \"core/Materials/Textures/texture\";\r\nimport { MaterialDefines } from \"core/Materials/materialDefines\";\r\nimport { MaterialHelper } from \"core/Materials/materialHelper\";\r\nimport type { IEffectCreationOptions } from \"core/Materials/effect\";\r\nimport { PushMaterial } from \"core/Materials/pushMaterial\";\r\nimport { VertexBuffer } from \"core/Buffers/buffer\";\r\nimport type { AbstractMesh } from \"core/Meshes/abstractMesh\";\r\nimport type { SubMesh } from \"core/Meshes/subMesh\";\r\nimport type { Mesh } from \"core/Meshes/mesh\";\r\nimport type { Scene } from \"core/scene\";\r\nimport { RegisterClass } from \"core/Misc/typeStore\";\r\nimport { Color4 } from \"core/Maths/math.color\";\r\nimport { EffectFallbacks } from \"core/Materials/effectFallbacks\";\r\nimport { Constants } from \"core/Engines/constants\";\r\n\r\nimport \"./shaders/mrdlBackplate.fragment\";\r\nimport \"./shaders/mrdlBackplate.vertex\";\r\n\r\n/** @internal */\r\nclass MRDLBackplateMaterialDefines extends MaterialDefines {\r\n    /*\r\n        \"IRIDESCENCE_ENABLE\", \"SMOOTH_EDGES\"\r\n    */\r\n    public IRIDESCENCE_ENABLE = true;\r\n    public SMOOTH_EDGES = true;\r\n\r\n    constructor() {\r\n        super();\r\n        this._needNormals = true;\r\n        this.rebuild();\r\n    }\r\n}\r\n\r\n/**\r\n * Class used to render backplate material with MRDL\r\n */\r\nexport class MRDLBackplateMaterial extends PushMaterial {\r\n    /**\r\n     * URL pointing to the texture used to define the coloring for the Iridescent Map effect.\r\n     */\r\n    public static IRIDESCENT_MAP_TEXTURE_URL = \"https://assets.babylonjs.com/meshes/MRTK/MRDL/mrtk-mrdl-backplate-iridescence.png\";\r\n    private _iridescentMapTexture: Texture;\r\n\r\n    /**\r\n     * Gets or sets the corner radius on the backplate. If this value is changed, update the lineWidth to match.\r\n     */\r\n    @serialize()\r\n    public radius = 0.3;\r\n\r\n    /**\r\n     * Gets or sets the line width of the backplate.\r\n     */\r\n    @serialize()\r\n    public lineWidth = 0.003;\r\n\r\n    /**\r\n     * Gets or sets whether to use absolute sizes when calculating effects on the backplate.\r\n     * Since desktop and VR/AR have different relative sizes, it's usually best to keep this false.\r\n     */\r\n    @serialize()\r\n    public absoluteSizes = false;\r\n\r\n    /** @internal */\r\n    public _filterWidth = 1;\r\n\r\n    /**\r\n     * Gets or sets the base color of the backplate.\r\n     */\r\n    @serialize()\r\n    public baseColor = new Color4(0, 0, 0, 1);\r\n\r\n    /**\r\n     * Gets or sets the line color of the backplate.\r\n     */\r\n    @serialize()\r\n    public lineColor = new Color4(0.2, 0.262745, 0.4, 1);\r\n\r\n    /**\r\n     * Gets or sets the top left Radii Multiplier.\r\n     */\r\n    @serialize()\r\n    public radiusTopLeft = 1.0;\r\n\r\n    /**\r\n     * Gets or sets the top left Radii Multiplier.\r\n     */\r\n    @serialize()\r\n    public radiusTopRight = 1.0;\r\n\r\n    /**\r\n     * Gets or sets the top left Radii Multiplier.\r\n     */\r\n    @serialize()\r\n    public radiusBottomLeft = 1.0;\r\n\r\n    /**\r\n     * Gets or sets the top left Radii Multiplier.\r\n     */\r\n    @serialize()\r\n    public radiusBottomRight = 1.0;\r\n\r\n    /** @internal */\r\n    public _rate = 0;\r\n\r\n    /**\r\n     * Gets or sets the color of the highlights on the backplate line.\r\n     */\r\n    @serialize()\r\n    public highlightColor = new Color4(0.239216, 0.435294, 0.827451, 1);\r\n\r\n    /**\r\n     * Gets or sets the width of the highlights on the backplate line.\r\n     */\r\n    @serialize()\r\n    public highlightWidth = 0;\r\n\r\n    /** @internal */\r\n    public _highlightTransform = new Vector4(1, 1, 0, 0);\r\n\r\n    /** @internal */\r\n    public _highlight = 1;\r\n\r\n    /**\r\n     * Gets or sets the intensity of the iridescence effect.\r\n     */\r\n    @serialize()\r\n    public iridescenceIntensity = 0.45;\r\n\r\n    /**\r\n     * Gets or sets the intensity of the iridescence effect on the backplate edges.\r\n     */\r\n    @serialize()\r\n    public iridescenceEdgeIntensity = 1;\r\n\r\n    /**\r\n     * Gets or sets the Tint of the iridescence effect on the backplate.\r\n     */\r\n    @serialize()\r\n    public iridescenceTint = new Color4(1, 1, 1, 1);\r\n\r\n    /** @internal */\r\n    public _angle = -45;\r\n\r\n    /**\r\n     * Gets or sets the opacity of the backplate (0.0 - 1.0).\r\n     */\r\n    @serialize()\r\n    public fadeOut = 1;\r\n\r\n    /** @internal */\r\n    public _reflected = true;\r\n\r\n    /** @internal */\r\n    public _frequency = 1;\r\n\r\n    /** @internal */\r\n    public _verticalOffset = 0;\r\n\r\n    /**\r\n     * Gets or sets the gradient color effect on the backplate.\r\n     */\r\n    @serialize()\r\n    public gradientColor = new Color4(0.74902, 0.74902, 0.74902, 1);\r\n\r\n    /**\r\n     * Gets or sets the top left gradient color effect on the backplate.\r\n     */\r\n    @serialize()\r\n    public topLeftGradientColor = new Color4(0.00784314, 0.294118, 0.580392, 1);\r\n\r\n    /**\r\n     * Gets or sets the top right gradient color effect on the backplate.\r\n     */\r\n    @serialize()\r\n    public topRightGradientColor = new Color4(0.305882, 0, 1, 1);\r\n\r\n    /**\r\n     * Gets or sets the bottom left gradient color effect on the backplate.\r\n     */\r\n    @serialize()\r\n    public bottomLeftGradientColor = new Color4(0.133333, 0.258824, 0.992157, 1);\r\n\r\n    /**\r\n     * Gets or sets the bottom right gradient color effect on the backplate.\r\n     */\r\n    @serialize()\r\n    public bottomRightGradientColor = new Color4(0.176471, 0.176471, 0.619608, 1);\r\n\r\n    /**\r\n     * Gets or sets the edge width of the backplate.\r\n     */\r\n    @serialize()\r\n    public edgeWidth = 0.5;\r\n\r\n    /**\r\n     * Gets or sets the edge width of the backplate.\r\n     */\r\n    @serialize()\r\n    public edgePower = 1;\r\n\r\n    /**\r\n     * Gets or sets the edge width of the backplate.\r\n     */\r\n    @serialize()\r\n    public edgeLineGradientBlend = 0.5;\r\n\r\n    constructor(name: string, scene?: Scene) {\r\n        super(name, scene);\r\n        this.alphaMode = Constants.ALPHA_DISABLE;\r\n        this.backFaceCulling = false;\r\n\r\n        this._iridescentMapTexture = new Texture(MRDLBackplateMaterial.IRIDESCENT_MAP_TEXTURE_URL, this.getScene(), true, false, Texture.NEAREST_SAMPLINGMODE);\r\n    }\r\n\r\n    public needAlphaBlending(): boolean {\r\n        return false;\r\n    }\r\n\r\n    public needAlphaTesting(): boolean {\r\n        return false;\r\n    }\r\n\r\n    public getAlphaTestTexture(): Nullable<BaseTexture> {\r\n        return null;\r\n    }\r\n\r\n    // Methods\r\n    public isReadyForSubMesh(mesh: AbstractMesh, subMesh: SubMesh): boolean {\r\n        if (this.isFrozen) {\r\n            if (subMesh.effect && subMesh.effect._wasPreviouslyReady) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        if (!subMesh.materialDefines) {\r\n            subMesh.materialDefines = new MRDLBackplateMaterialDefines();\r\n        }\r\n\r\n        const defines = <MRDLBackplateMaterialDefines>subMesh.materialDefines;\r\n        const scene = this.getScene();\r\n\r\n        if (this._isReadyForSubMesh(subMesh)) {\r\n            return true;\r\n        }\r\n\r\n        const engine = scene.getEngine();\r\n\r\n        // Attribs\r\n        MaterialHelper.PrepareDefinesForAttributes(mesh, defines, false, false);\r\n\r\n        // Get correct effect\r\n        if (defines.isDirty) {\r\n            defines.markAsProcessed();\r\n\r\n            scene.resetCachedMaterial();\r\n\r\n            // Fallbacks\r\n            const fallbacks = new EffectFallbacks();\r\n            if (defines.FOG) {\r\n                fallbacks.addFallback(1, \"FOG\");\r\n            }\r\n\r\n            MaterialHelper.HandleFallbacksForShadows(defines, fallbacks);\r\n\r\n            defines.IMAGEPROCESSINGPOSTPROCESS = scene.imageProcessingConfiguration.applyByPostProcess;\r\n\r\n            //Attributes\r\n            const attribs = [VertexBuffer.PositionKind];\r\n\r\n            if (defines.NORMAL) {\r\n                attribs.push(VertexBuffer.NormalKind);\r\n            }\r\n\r\n            if (defines.UV1) {\r\n                attribs.push(VertexBuffer.UVKind);\r\n            }\r\n\r\n            if (defines.UV2) {\r\n                attribs.push(VertexBuffer.UV2Kind);\r\n            }\r\n\r\n            if (defines.VERTEXCOLOR) {\r\n                attribs.push(VertexBuffer.ColorKind);\r\n            }\r\n\r\n            if (defines.TANGENT) {\r\n                attribs.push(VertexBuffer.TangentKind);\r\n            }\r\n\r\n            MaterialHelper.PrepareAttributesForInstances(attribs, defines);\r\n\r\n            // Legacy browser patch\r\n            const shaderName = \"mrdlBackplate\";\r\n            const join = defines.toString();\r\n\r\n            const uniforms = [\r\n                \"world\",\r\n                \"viewProjection\",\r\n                \"cameraPosition\",\r\n                \"_Radius_\",\r\n                \"_Line_Width_\",\r\n                \"_Absolute_Sizes_\",\r\n                \"_Filter_Width_\",\r\n                \"_Base_Color_\",\r\n                \"_Line_Color_\",\r\n                \"_Radius_Top_Left_\",\r\n                \"_Radius_Top_Right_\",\r\n                \"_Radius_Bottom_Left_\",\r\n                \"_Radius_Bottom_Right_\",\r\n                \"_Rate_\",\r\n                \"_Highlight_Color_\",\r\n                \"_Highlight_Width_\",\r\n                \"_Highlight_Transform_\",\r\n                \"_Highlight_\",\r\n                \"_Iridescence_Intensity_\",\r\n                \"_Iridescence_Edge_Intensity_\",\r\n                \"_Iridescence_Tint_\",\r\n                \"_Iridescent_Map_\",\r\n                \"_Angle_\",\r\n                \"_Reflected_\",\r\n                \"_Frequency_\",\r\n                \"_Vertical_Offset_\",\r\n                \"_Gradient_Color_\",\r\n                \"_Top_Left_\",\r\n                \"_Top_Right_\",\r\n                \"_Bottom_Left_\",\r\n                \"_Bottom_Right_\",\r\n                \"_Edge_Width_\",\r\n                \"_Edge_Power_\",\r\n                \"_Line_Gradient_Blend_\",\r\n                \"_Fade_Out_\",\r\n            ];\r\n            const samplers: string[] = [\"_Iridescent_Map_\"];\r\n            const uniformBuffers = new Array<string>();\r\n\r\n            MaterialHelper.PrepareUniformsAndSamplersList(<IEffectCreationOptions>{\r\n                uniformsNames: uniforms,\r\n                uniformBuffersNames: uniformBuffers,\r\n                samplers: samplers,\r\n                defines: defines,\r\n                maxSimultaneousLights: 4,\r\n            });\r\n\r\n            subMesh.setEffect(\r\n                scene.getEngine().createEffect(\r\n                    shaderName,\r\n                    <IEffectCreationOptions>{\r\n                        attributes: attribs,\r\n                        uniformsNames: uniforms,\r\n                        uniformBuffersNames: uniformBuffers,\r\n                        samplers: samplers,\r\n                        defines: join,\r\n                        fallbacks: fallbacks,\r\n                        onCompiled: this.onCompiled,\r\n                        onError: this.onError,\r\n                        indexParameters: { maxSimultaneousLights: 4 },\r\n                    },\r\n                    engine\r\n                ),\r\n                defines\r\n            );\r\n        }\r\n        if (!subMesh.effect || !subMesh.effect.isReady()) {\r\n            return false;\r\n        }\r\n\r\n        defines._renderId = scene.getRenderId();\r\n        subMesh.effect._wasPreviouslyReady = true;\r\n\r\n        return true;\r\n    }\r\n\r\n    public bindForSubMesh(world: Matrix, mesh: Mesh, subMesh: SubMesh): void {\r\n        const defines = <MRDLBackplateMaterialDefines>subMesh.materialDefines;\r\n        if (!defines) {\r\n            return;\r\n        }\r\n\r\n        const effect = subMesh.effect;\r\n        if (!effect) {\r\n            return;\r\n        }\r\n\r\n        this._activeEffect = effect;\r\n\r\n        // Matrices\r\n        this.bindOnlyWorldMatrix(world);\r\n        this._activeEffect.setMatrix(\"viewProjection\", this.getScene().getTransformMatrix());\r\n        this._activeEffect.setVector3(\"cameraPosition\", this.getScene().activeCamera!.position);\r\n\r\n        // \"Round Rect\"\r\n        this._activeEffect.setFloat(\"_Radius_\", this.radius);\r\n        this._activeEffect.setFloat(\"_Line_Width_\", this.lineWidth);\r\n        this._activeEffect.setFloat(\"_Absolute_Sizes_\", this.absoluteSizes ? 1.0 : 0.0);\r\n        this._activeEffect.setFloat(\"_Filter_Width_\", this._filterWidth);\r\n        this._activeEffect.setDirectColor4(\"_Base_Color_\", this.baseColor);\r\n        this._activeEffect.setDirectColor4(\"_Line_Color_\", this.lineColor);\r\n\r\n        // \"Radii Multipliers\"\r\n        this._activeEffect.setFloat(\"_Radius_Top_Left_\", this.radiusTopLeft);\r\n        this._activeEffect.setFloat(\"_Radius_Top_Right_\", this.radiusTopRight);\r\n        this._activeEffect.setFloat(\"_Radius_Bottom_Left_\", this.radiusBottomLeft);\r\n        this._activeEffect.setFloat(\"_Radius_Bottom_Right_\", this.radiusBottomRight);\r\n\r\n        // \"Line Highlight\"\r\n        this._activeEffect.setFloat(\"_Rate_\", this._rate);\r\n        this._activeEffect.setDirectColor4(\"_Highlight_Color_\", this.highlightColor);\r\n        this._activeEffect.setFloat(\"_Highlight_Width_\", this.highlightWidth);\r\n        this._activeEffect.setVector4(\"_Highlight_Transform_\", this._highlightTransform);\r\n        this._activeEffect.setFloat(\"_Highlight_\", this._highlight);\r\n\r\n        // \"Iridescence\"\r\n        //define IRIDESCENCE_ENABLE true;\r\n        this._activeEffect.setFloat(\"_Iridescence_Intensity_\", this.iridescenceIntensity);\r\n        this._activeEffect.setFloat(\"_Iridescence_Edge_Intensity_\", this.iridescenceEdgeIntensity);\r\n        this._activeEffect.setDirectColor4(\"_Iridescence_Tint_\", this.iridescenceTint);\r\n        this._activeEffect.setTexture(\"_Iridescent_Map_\", this._iridescentMapTexture);\r\n        this._activeEffect.setFloat(\"_Angle_\", this._angle);\r\n        this._activeEffect.setFloat(\"_Reflected_\", this._reflected ? 1.0 : 0.0);\r\n        this._activeEffect.setFloat(\"_Frequency_\", this._frequency);\r\n        this._activeEffect.setFloat(\"_Vertical_Offset_\", this._verticalOffset);\r\n\r\n        // \"Gradient\"\r\n        this._activeEffect.setDirectColor4(\"_Gradient_Color_\", this.gradientColor);\r\n        this._activeEffect.setDirectColor4(\"_Top_Left_\", this.topLeftGradientColor);\r\n        this._activeEffect.setDirectColor4(\"_Top_Right_\", this.topRightGradientColor);\r\n        this._activeEffect.setDirectColor4(\"_Bottom_Left_\", this.bottomLeftGradientColor);\r\n        this._activeEffect.setDirectColor4(\"_Bottom_Right_\", this.bottomRightGradientColor);\r\n        //define EDGE_ONLY false;\r\n        this._activeEffect.setFloat(\"_Edge_Width_\", this.edgeWidth);\r\n        this._activeEffect.setFloat(\"_Edge_Power_\", this.edgePower);\r\n        this._activeEffect.setFloat(\"_Line_Gradient_Blend_\", this.edgeLineGradientBlend);\r\n\r\n        // \"Fade\"\r\n        this._activeEffect.setFloat(\"_Fade_Out_\", this.fadeOut);\r\n\r\n        // \"Antialiasing\"\r\n        //define SMOOTH_EDGES true;\r\n\r\n        this._afterBind(mesh, this._activeEffect);\r\n    }\r\n\r\n    /**\r\n     * Get the list of animatables in the material.\r\n     * @returns the list of animatables object used in the material\r\n     */\r\n    public getAnimatables(): IAnimatable[] {\r\n        return [];\r\n    }\r\n\r\n    public dispose(forceDisposeEffect?: boolean): void {\r\n        super.dispose(forceDisposeEffect);\r\n    }\r\n\r\n    public clone(name: string): MRDLBackplateMaterial {\r\n        return SerializationHelper.Clone(() => new MRDLBackplateMaterial(name, this.getScene()), this);\r\n    }\r\n\r\n    public serialize(): any {\r\n        const serializationObject = super.serialize();\r\n        serializationObject.customType = \"BABYLON.MRDLBackplateMaterial\";\r\n        return serializationObject;\r\n    }\r\n\r\n    public getClassName(): string {\r\n        return \"MRDLBackplateMaterial\";\r\n    }\r\n\r\n    // Statics\r\n    public static Parse(source: any, scene: Scene, rootUrl: string): MRDLBackplateMaterial {\r\n        return SerializationHelper.Parse(() => new MRDLBackplateMaterial(source.name, scene), source, scene, rootUrl);\r\n    }\r\n}\r\n\r\nRegisterClass(\"BABYLON.GUI.MRDLBackplateMaterial\", MRDLBackplateMaterial);\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}