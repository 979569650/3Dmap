{"ast":null,"code":"import { CreateBox } from \"@babylonjs/core/Meshes/Builders/boxBuilder.js\";\nimport { FluentBackplateMaterial } from \"../materials/fluentBackplate/fluentBackplateMaterial.js\";\nimport { Control3D } from \"./control3D.js\";\nimport { SceneLoader } from \"@babylonjs/core/Loading/sceneLoader.js\";\n/**\n * Class used to create a holographic backplate in 3D\n * @since 5.0.0\n */\nexport class HolographicBackplate extends Control3D {\n  /**\n   * Rendering ground id of the backplate mesh.\n   */\n  set renderingGroupId(id) {\n    this._model.renderingGroupId = id;\n  }\n  get renderingGroupId() {\n    return this._model.renderingGroupId;\n  }\n  /**\n   * Gets the material used by the backplate\n   */\n  get material() {\n    return this._material;\n  }\n  /**\n   * Gets a boolean indicating if this backplate shares its material with other HolographicBackplates\n   */\n  get shareMaterials() {\n    return this._shareMaterials;\n  }\n  /**\n   * Creates a new holographic backplate\n   * @param name defines the control name\n   * @param _shareMaterials\n   */\n  constructor(name, _shareMaterials = true) {\n    super(name);\n    this._shareMaterials = _shareMaterials;\n  }\n  _getTypeName() {\n    return \"HolographicBackplate\";\n  }\n  // Mesh association\n  _createNode(scene) {\n    var _a;\n    const collisionMesh = CreateBox(((_a = this.name) !== null && _a !== void 0 ? _a : \"HolographicBackplate\") + \"_CollisionMesh\", {\n      width: 1.0,\n      height: 1.0,\n      depth: 1.0\n    }, scene);\n    collisionMesh.isPickable = true;\n    collisionMesh.visibility = 0;\n    SceneLoader.ImportMeshAsync(undefined, HolographicBackplate.MODEL_BASE_URL, HolographicBackplate.MODEL_FILENAME, scene).then(result => {\n      const importedModel = result.meshes[1];\n      importedModel.name = `${this.name}_frontPlate`;\n      importedModel.isPickable = false;\n      importedModel.parent = collisionMesh;\n      if (this._material) {\n        importedModel.material = this._material;\n      }\n      this._model = importedModel;\n    });\n    return collisionMesh;\n  }\n  _createMaterial(mesh) {\n    this._material = new FluentBackplateMaterial(this.name + \" Material\", mesh.getScene());\n  }\n  _affectMaterial(mesh) {\n    // Back\n    if (this._shareMaterials) {\n      if (!this._host._touchSharedMaterials[\"fluentBackplateMaterial\"]) {\n        this._createMaterial(mesh);\n        this._host._touchSharedMaterials[\"fluentBackplateMaterial\"] = this._material;\n      } else {\n        this._material = this._host._touchSharedMaterials[\"fluentBackplateMaterial\"];\n      }\n    } else {\n      this._createMaterial(mesh);\n    }\n  }\n  /**\n   * Releases all associated resources\n   */\n  dispose() {\n    super.dispose(); // will dispose main mesh ie. back plate\n    if (!this.shareMaterials) {\n      this._material.dispose();\n    }\n    this._model.dispose();\n  }\n}\n/**\n * Base Url for the button model.\n */\nHolographicBackplate.MODEL_BASE_URL = \"https://assets.babylonjs.com/meshes/MRTK/\";\n/**\n * File name for the button model.\n */\nHolographicBackplate.MODEL_FILENAME = \"mrtk-fluent-backplate.glb\";","map":{"version":3,"names":["CreateBox","FluentBackplateMaterial","Control3D","SceneLoader","HolographicBackplate","renderingGroupId","id","_model","material","_material","shareMaterials","_shareMaterials","constructor","name","_getTypeName","_createNode","scene","collisionMesh","_a","width","height","depth","isPickable","visibility","ImportMeshAsync","undefined","MODEL_BASE_URL","MODEL_FILENAME","then","result","importedModel","meshes","parent","_createMaterial","mesh","getScene","_affectMaterial","_host","_touchSharedMaterials","dispose"],"sources":["../../../../../dev/gui/src/3D/controls/holographicBackplate.ts"],"sourcesContent":["import type { TransformNode } from \"core/Meshes/transformNode\";\r\nimport type { Mesh } from \"core/Meshes/mesh\";\r\nimport { CreateBox } from \"core/Meshes/Builders/boxBuilder\";\r\nimport type { Scene } from \"core/scene\";\r\nimport { FluentBackplateMaterial } from \"../materials/fluentBackplate/fluentBackplateMaterial\";\r\nimport { Control3D } from \"./control3D\";\r\nimport { SceneLoader } from \"core/Loading/sceneLoader\";\r\nimport type { AbstractMesh } from \"core/Meshes/abstractMesh\";\r\n\r\n/**\r\n * Class used to create a holographic backplate in 3D\r\n * @since 5.0.0\r\n */\r\nexport class HolographicBackplate extends Control3D {\r\n    /**\r\n     * Base Url for the button model.\r\n     */\r\n    public static MODEL_BASE_URL: string = \"https://assets.babylonjs.com/meshes/MRTK/\";\r\n    /**\r\n     * File name for the button model.\r\n     */\r\n    public static MODEL_FILENAME: string = \"mrtk-fluent-backplate.glb\";\r\n\r\n    private _model: AbstractMesh;\r\n    private _material: FluentBackplateMaterial;\r\n\r\n    /**\r\n     * Rendering ground id of the backplate mesh.\r\n     */\r\n    public set renderingGroupId(id: number) {\r\n        this._model.renderingGroupId = id;\r\n    }\r\n    public get renderingGroupId(): number {\r\n        return this._model.renderingGroupId;\r\n    }\r\n\r\n    /**\r\n     * Gets the material used by the backplate\r\n     */\r\n    public get material(): FluentBackplateMaterial {\r\n        return this._material;\r\n    }\r\n\r\n    /**\r\n     * Gets a boolean indicating if this backplate shares its material with other HolographicBackplates\r\n     */\r\n    public get shareMaterials(): boolean {\r\n        return this._shareMaterials;\r\n    }\r\n\r\n    /**\r\n     * Creates a new holographic backplate\r\n     * @param name defines the control name\r\n     * @param _shareMaterials\r\n     */\r\n    constructor(name?: string, private _shareMaterials = true) {\r\n        super(name);\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"HolographicBackplate\";\r\n    }\r\n\r\n    // Mesh association\r\n    protected _createNode(scene: Scene): TransformNode {\r\n        const collisionMesh = CreateBox(\r\n            (this.name ?? \"HolographicBackplate\") + \"_CollisionMesh\",\r\n            {\r\n                width: 1.0,\r\n                height: 1.0,\r\n                depth: 1.0,\r\n            },\r\n            scene\r\n        );\r\n        collisionMesh.isPickable = true;\r\n        collisionMesh.visibility = 0;\r\n\r\n        SceneLoader.ImportMeshAsync(undefined, HolographicBackplate.MODEL_BASE_URL, HolographicBackplate.MODEL_FILENAME, scene).then((result) => {\r\n            const importedModel = result.meshes[1];\r\n            importedModel.name = `${this.name}_frontPlate`;\r\n            importedModel.isPickable = false;\r\n            importedModel.parent = collisionMesh;\r\n            if (this._material) {\r\n                importedModel.material = this._material;\r\n            }\r\n            this._model = importedModel;\r\n        });\r\n\r\n        return collisionMesh;\r\n    }\r\n\r\n    private _createMaterial(mesh: Mesh) {\r\n        this._material = new FluentBackplateMaterial(this.name + \" Material\", mesh.getScene());\r\n    }\r\n\r\n    protected _affectMaterial(mesh: Mesh) {\r\n        // Back\r\n        if (this._shareMaterials) {\r\n            if (!this._host._touchSharedMaterials[\"fluentBackplateMaterial\"]) {\r\n                this._createMaterial(mesh);\r\n                this._host._touchSharedMaterials[\"fluentBackplateMaterial\"] = this._material;\r\n            } else {\r\n                this._material = this._host._touchSharedMaterials[\"fluentBackplateMaterial\"] as FluentBackplateMaterial;\r\n            }\r\n        } else {\r\n            this._createMaterial(mesh);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Releases all associated resources\r\n     */\r\n    public dispose() {\r\n        super.dispose(); // will dispose main mesh ie. back plate\r\n\r\n        if (!this.shareMaterials) {\r\n            this._material.dispose();\r\n        }\r\n\r\n        this._model.dispose();\r\n    }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}