{"ast":null,"code":"import { ContentDisplay3D } from \"./contentDisplay3D.js\";\nimport { TouchHolographicButton } from \"./touchHolographicButton.js\";\nimport { AdvancedDynamicTexture } from \"../../2D/advancedDynamicTexture.js\";\nimport { Control } from \"../../2D/controls/control.js\";\nimport { TextBlock, TextWrapping } from \"../../2D/controls/textBlock.js\";\nimport { DefaultBehavior } from \"../behaviors/defaultBehavior.js\";\nimport { SlateGizmo } from \"../gizmos/slateGizmo.js\";\nimport { FluentMaterial } from \"../materials/fluent/fluentMaterial.js\";\nimport { FluentBackplateMaterial } from \"../materials/fluentBackplate/fluentBackplateMaterial.js\";\nimport { PointerDragBehavior } from \"@babylonjs/core/Behaviors/Meshes/pointerDragBehavior.js\";\nimport { Vector4 } from \"@babylonjs/core/Maths/math.js\";\nimport { Epsilon } from \"@babylonjs/core/Maths/math.constants.js\";\nimport { Scalar } from \"@babylonjs/core/Maths/math.scalar.js\";\nimport { Quaternion, Vector2, Vector3 } from \"@babylonjs/core/Maths/math.vector.js\";\nimport { Viewport } from \"@babylonjs/core/Maths/math.viewport.js\";\nimport { CreateBox } from \"@babylonjs/core/Meshes/Builders/boxBuilder.js\";\nimport { CreatePlane } from \"@babylonjs/core/Meshes/Builders/planeBuilder.js\";\nimport { Mesh } from \"@babylonjs/core/Meshes/mesh.js\";\nimport { VertexData } from \"@babylonjs/core/Meshes/mesh.vertexData.js\";\n/**\n * Class used to create a holographic slate\n * @since 5.0.0\n */\nexport class HolographicSlate extends ContentDisplay3D {\n  /**\n   * Regroups all mesh behaviors for the slate\n   */\n  get defaultBehavior() {\n    return this._defaultBehavior;\n  }\n  /**\n   * 2D dimensions of the slate\n   */\n  get dimensions() {\n    return this._dimensions;\n  }\n  set dimensions(value) {\n    //clamp, respecting ratios\n    let scale = 1.0;\n    if (value.x < this.minDimensions.x || value.y < this.minDimensions.y) {\n      const newRatio = value.x / value.y;\n      const minRatio = this.minDimensions.x / this.minDimensions.y;\n      if (minRatio > newRatio) {\n        // We just need to make sure the x-val is greater than the min\n        scale = this.minDimensions.x / value.x;\n      } else {\n        // We just need to make sure the y-val is greater than the min\n        scale = this.minDimensions.y / value.y;\n      }\n    }\n    this._dimensions.copyFrom(value).scaleInPlace(scale);\n    this._updatePivot();\n    this._positionElements();\n  }\n  /**\n   * Height of the title bar component\n   */\n  get titleBarHeight() {\n    return this._titleBarHeight;\n  }\n  set titleBarHeight(value) {\n    this._titleBarHeight = value;\n  }\n  /**\n   * Rendering ground id of all the meshes\n   */\n  set renderingGroupId(id) {\n    this._titleBar.renderingGroupId = id;\n    this._titleBarTitle.renderingGroupId = id;\n    this._contentPlate.renderingGroupId = id;\n    this._backPlate.renderingGroupId = id;\n  }\n  get renderingGroupId() {\n    return this._titleBar.renderingGroupId;\n  }\n  /**\n   * The title text displayed at the top of the slate\n   */\n  set title(title) {\n    this._titleText = title;\n    if (this._titleTextComponent) {\n      this._titleTextComponent.text = title;\n    }\n  }\n  get title() {\n    return this._titleText;\n  }\n  /**\n   * Creates a new slate\n   * @param name defines the control name\n   */\n  constructor(name) {\n    super(name);\n    /**\n     * Margin between title bar and contentplate\n     */\n    this.titleBarMargin = 0.005;\n    /**\n     * Origin in local coordinates (top left corner)\n     */\n    this.origin = new Vector3(0, 0, 0);\n    this._dimensions = new Vector2(21.875, 12.5);\n    this._titleBarHeight = 0.625;\n    this._titleText = \"\";\n    this._contentScaleRatio = 1;\n    /**\n     * Minimum dimensions of the slate\n     */\n    this.minDimensions = new Vector2(15.625, 6.25);\n    /**\n     * Default dimensions of the slate\n     */\n    this.defaultDimensions = this._dimensions.clone();\n    this._followButton = new TouchHolographicButton(\"followButton\" + this.name);\n    this._followButton.isToggleButton = true;\n    this._closeButton = new TouchHolographicButton(\"closeButton\" + this.name);\n    this._contentViewport = new Viewport(0, 0, 1, 1);\n    this._contentDragBehavior = new PointerDragBehavior({\n      dragPlaneNormal: new Vector3(0, 0, -1)\n    });\n  }\n  /**\n   * Apply the facade texture (created from the content property).\n   * This function can be overloaded by child classes\n   * @param facadeTexture defines the AdvancedDynamicTexture to use\n   */\n  _applyFacade(facadeTexture) {\n    this._contentMaterial.albedoTexture = facadeTexture;\n    this._resetContentPositionAndZoom();\n    this._applyContentViewport();\n    facadeTexture.attachToMesh(this._contentPlate, true);\n  }\n  _addControl(control) {\n    control._host = this._host;\n    if (this._host.utilityLayer) {\n      control._prepareNode(this._host.utilityLayer.utilityLayerScene);\n    }\n  }\n  _getTypeName() {\n    return \"HolographicSlate\";\n  }\n  /**\n   * @internal\n   */\n  _positionElements() {\n    const followButton = this._followButton;\n    const closeButton = this._closeButton;\n    const titleBar = this._titleBar;\n    const titleBarTitle = this._titleBarTitle;\n    const contentPlate = this._contentPlate;\n    const backPlate = this._backPlate;\n    if (followButton && closeButton && titleBar) {\n      closeButton.scaling.setAll(this.titleBarHeight);\n      followButton.scaling.setAll(this.titleBarHeight);\n      closeButton.position.copyFromFloats(this.dimensions.x - this.titleBarHeight / 2, -this.titleBarHeight / 2, 0).addInPlace(this.origin);\n      followButton.position.copyFromFloats(this.dimensions.x - 3 * this.titleBarHeight / 2, -this.titleBarHeight / 2, 0).addInPlace(this.origin);\n      const contentPlateHeight = this.dimensions.y - this.titleBarHeight - this.titleBarMargin;\n      const rightHandScene = contentPlate.getScene().useRightHandedSystem;\n      titleBar.scaling.set(this.dimensions.x, this.titleBarHeight, Epsilon);\n      titleBarTitle.scaling.set(this.dimensions.x - 2 * this.titleBarHeight, this.titleBarHeight, Epsilon);\n      contentPlate.scaling.copyFromFloats(this.dimensions.x, contentPlateHeight, Epsilon);\n      backPlate.scaling.copyFromFloats(this.dimensions.x, contentPlateHeight, Epsilon);\n      titleBar.position.copyFromFloats(this.dimensions.x / 2, -(this.titleBarHeight / 2), 0).addInPlace(this.origin);\n      titleBarTitle.position.copyFromFloats(this.dimensions.x / 2 - this.titleBarHeight, -(this.titleBarHeight / 2), rightHandScene ? Epsilon : -Epsilon).addInPlace(this.origin);\n      contentPlate.position.copyFromFloats(this.dimensions.x / 2, -(this.titleBarHeight + this.titleBarMargin + contentPlateHeight / 2), 0).addInPlace(this.origin);\n      backPlate.position.copyFromFloats(this.dimensions.x / 2, -(this.titleBarHeight + this.titleBarMargin + contentPlateHeight / 2), rightHandScene ? -Epsilon : Epsilon).addInPlace(this.origin);\n      // Update the title's AdvancedDynamicTexture scale to avoid visual stretching\n      this._titleTextComponent.host.scaleTo(HolographicSlate._DEFAULT_TEXT_RESOLUTION_Y * titleBarTitle.scaling.x / titleBarTitle.scaling.y, HolographicSlate._DEFAULT_TEXT_RESOLUTION_Y);\n      const aspectRatio = this.dimensions.x / contentPlateHeight;\n      this._contentViewport.width = this._contentScaleRatio;\n      this._contentViewport.height = this._contentScaleRatio / aspectRatio;\n      this._applyContentViewport();\n      if (this._gizmo) {\n        this._gizmo.updateBoundingBox();\n      }\n    }\n  }\n  _applyContentViewport() {\n    var _a;\n    if (((_a = this._contentPlate) === null || _a === void 0 ? void 0 : _a.material) && this._contentPlate.material.albedoTexture) {\n      const tex = this._contentPlate.material.albedoTexture;\n      tex.uScale = this._contentScaleRatio;\n      tex.vScale = this._contentScaleRatio / this._contentViewport.width * this._contentViewport.height;\n      tex.uOffset = this._contentViewport.x;\n      tex.vOffset = this._contentViewport.y;\n    }\n  }\n  _resetContentPositionAndZoom() {\n    this._contentViewport.x = 0;\n    this._contentViewport.y = 1 - this._contentViewport.height / this._contentViewport.width;\n    this._contentScaleRatio = 1;\n  }\n  /**\n   * @internal\n   */\n  _updatePivot() {\n    if (!this.mesh) {\n      return;\n    }\n    // Update pivot point so it is at the center of geometry\n    // As origin is topleft corner in 2D, dimensions are calculated towards bottom right corner, thus y axis is downwards\n    const center = new Vector3(this.dimensions.x * 0.5, -this.dimensions.y * 0.5, Epsilon);\n    center.addInPlace(this.origin);\n    center.z = 0;\n    const origin = new Vector3(0, 0, 0);\n    Vector3.TransformCoordinatesToRef(origin, this.mesh.computeWorldMatrix(true), origin);\n    this.mesh.setPivotPoint(center);\n    const origin2 = new Vector3(0, 0, 0);\n    Vector3.TransformCoordinatesToRef(origin2, this.mesh.computeWorldMatrix(true), origin2);\n    this.mesh.position.addInPlace(origin).subtractInPlace(origin2);\n  }\n  // Mesh association\n  _createNode(scene) {\n    const node = new Mesh(\"slate_\" + this.name, scene);\n    this._titleBar = CreateBox(\"titleBar_\" + this.name, {\n      size: 1\n    }, scene);\n    this._titleBarTitle = CreatePlane(\"titleText_\" + this.name, {\n      size: 1\n    }, scene);\n    this._titleBarTitle.parent = node;\n    this._titleBarTitle.isPickable = false;\n    const adt = AdvancedDynamicTexture.CreateForMesh(this._titleBarTitle);\n    this._titleTextComponent = new TextBlock(\"titleText_\" + this.name, this._titleText);\n    this._titleTextComponent.textWrapping = TextWrapping.Ellipsis;\n    this._titleTextComponent.textHorizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\n    this._titleTextComponent.color = \"white\";\n    this._titleTextComponent.fontSize = HolographicSlate._DEFAULT_TEXT_RESOLUTION_Y / 2;\n    this._titleTextComponent.paddingLeft = HolographicSlate._DEFAULT_TEXT_RESOLUTION_Y / 4;\n    adt.addControl(this._titleTextComponent);\n    if (scene.useRightHandedSystem) {\n      const faceUV = new Vector4(0, 0, 1, 1);\n      this._contentPlate = CreatePlane(\"contentPlate_\" + this.name, {\n        size: 1,\n        sideOrientation: VertexData.BACKSIDE,\n        frontUVs: faceUV\n      }, scene);\n      this._backPlate = CreatePlane(\"backPlate_\" + this.name, {\n        size: 1,\n        sideOrientation: VertexData.FRONTSIDE\n      }, scene);\n    } else {\n      const faceUV = new Vector4(0, 0, 1, 1);\n      this._contentPlate = CreatePlane(\"contentPlate_\" + this.name, {\n        size: 1,\n        sideOrientation: VertexData.FRONTSIDE,\n        frontUVs: faceUV\n      }, scene);\n      this._backPlate = CreatePlane(\"backPlate_\" + this.name, {\n        size: 1,\n        sideOrientation: VertexData.BACKSIDE\n      }, scene);\n    }\n    this._titleBar.parent = node;\n    this._titleBar.isNearGrabbable = true;\n    this._contentPlate.parent = node;\n    this._backPlate.parent = node;\n    this._attachContentPlateBehavior();\n    this._addControl(this._followButton);\n    this._addControl(this._closeButton);\n    const followButton = this._followButton;\n    const closeButton = this._closeButton;\n    followButton.node.parent = node;\n    closeButton.node.parent = node;\n    this._positionElements();\n    this._followButton.imageUrl = HolographicSlate.ASSETS_BASE_URL + HolographicSlate.FOLLOW_ICON_FILENAME;\n    this._closeButton.imageUrl = HolographicSlate.ASSETS_BASE_URL + HolographicSlate.CLOSE_ICON_FILENAME;\n    this._followButton.isBackplateVisible = false;\n    this._closeButton.isBackplateVisible = false;\n    this._followButton.onToggleObservable.add(isToggled => {\n      this._defaultBehavior.followBehaviorEnabled = isToggled;\n      if (this._defaultBehavior.followBehaviorEnabled) {\n        this._defaultBehavior.followBehavior.recenter();\n      }\n    });\n    this._closeButton.onPointerClickObservable.add(() => {\n      this.dispose();\n    });\n    node.rotationQuaternion = Quaternion.Identity();\n    node.isVisible = false;\n    return node;\n  }\n  _attachContentPlateBehavior() {\n    this._contentDragBehavior.attach(this._contentPlate);\n    this._contentDragBehavior.moveAttached = false;\n    this._contentDragBehavior.useObjectOrientationForDragging = true;\n    this._contentDragBehavior.updateDragPlane = false;\n    const origin = new Vector3();\n    const worldDimensions = new Vector3();\n    const upWorld = new Vector3();\n    const rightWorld = new Vector3();\n    const projectedOffset = new Vector2();\n    let startViewport;\n    let worldMatrix;\n    this._contentDragBehavior.onDragStartObservable.add(event => {\n      if (!this.node) {\n        return;\n      }\n      startViewport = this._contentViewport.clone();\n      worldMatrix = this.node.computeWorldMatrix(true);\n      origin.copyFrom(event.dragPlanePoint);\n      worldDimensions.set(this.dimensions.x, this.dimensions.y, Epsilon);\n      worldDimensions.y -= this.titleBarHeight + this.titleBarMargin;\n      Vector3.TransformNormalToRef(worldDimensions, worldMatrix, worldDimensions);\n      upWorld.copyFromFloats(0, 1, 0);\n      Vector3.TransformNormalToRef(upWorld, worldMatrix, upWorld);\n      rightWorld.copyFromFloats(1, 0, 0);\n      Vector3.TransformNormalToRef(rightWorld, worldMatrix, rightWorld);\n      upWorld.normalize();\n      upWorld.scaleInPlace(1 / Vector3.Dot(upWorld, worldDimensions));\n      rightWorld.normalize();\n      rightWorld.scaleInPlace(1 / Vector3.Dot(rightWorld, worldDimensions));\n    });\n    const offset = new Vector3();\n    this._contentDragBehavior.onDragObservable.add(event => {\n      offset.copyFrom(event.dragPlanePoint);\n      offset.subtractInPlace(origin);\n      projectedOffset.copyFromFloats(Vector3.Dot(offset, rightWorld), Vector3.Dot(offset, upWorld));\n      // By default, content takes full width available and height is cropped to keep aspect ratio\n      this._contentViewport.x = Scalar.Clamp(startViewport.x - offset.x, 0, 1 - this._contentViewport.width * this._contentScaleRatio);\n      this._contentViewport.y = Scalar.Clamp(startViewport.y - offset.y, 0, 1 - this._contentViewport.height * this._contentScaleRatio);\n      this._applyContentViewport();\n    });\n  }\n  _affectMaterial(mesh) {\n    // TODO share materials\n    this._titleBarMaterial = new FluentBackplateMaterial(`${this.name} plateMaterial`, mesh.getScene());\n    this._contentMaterial = new FluentMaterial(`${this.name} contentMaterial`, mesh.getScene());\n    this._contentMaterial.renderBorders = true;\n    this._backMaterial = new FluentBackplateMaterial(`${this.name} backPlate`, mesh.getScene());\n    this._backMaterial.lineWidth = Epsilon;\n    this._backMaterial.radius = 0.005;\n    this._backMaterial.backFaceCulling = true;\n    this._titleBar.material = this._titleBarMaterial;\n    this._contentPlate.material = this._contentMaterial;\n    this._backPlate.material = this._backMaterial;\n    this._resetContent();\n    this._applyContentViewport();\n  }\n  /**\n   * @internal*\n   */\n  _prepareNode(scene) {\n    super._prepareNode(scene);\n    this._gizmo = new SlateGizmo(this._host.utilityLayer);\n    this._gizmo.attachedSlate = this;\n    this._defaultBehavior = new DefaultBehavior();\n    this._defaultBehavior.attach(this.node, [this._titleBar]);\n    this._defaultBehavior.sixDofDragBehavior.onDragStartObservable.add(() => {\n      this._followButton.isToggled = false;\n    });\n    this._positionChangedObserver = this._defaultBehavior.sixDofDragBehavior.onPositionChangedObservable.add(() => {\n      this._gizmo.updateBoundingBox();\n    });\n    this._updatePivot();\n    this.resetDefaultAspectAndPose(false);\n  }\n  /**\n   * Resets the aspect and pose of the slate so it is right in front of the active camera, facing towards it.\n   * @param resetAspect Should the slate's dimensions/aspect ratio be reset as well\n   */\n  resetDefaultAspectAndPose(resetAspect = true) {\n    if (!this._host || !this._host.utilityLayer || !this.node) {\n      return;\n    }\n    const scene = this._host.utilityLayer.utilityLayerScene;\n    const camera = scene.activeCamera;\n    if (camera) {\n      const worldMatrix = camera.getWorldMatrix();\n      const backward = Vector3.TransformNormal(Vector3.Backward(scene.useRightHandedSystem), worldMatrix);\n      this.origin.setAll(0);\n      this._gizmo.updateBoundingBox();\n      const pivot = this.node.getAbsolutePivotPoint();\n      this.node.position.copyFrom(camera.position).subtractInPlace(backward).subtractInPlace(pivot);\n      this.node.rotationQuaternion = Quaternion.FromLookDirectionLH(backward, new Vector3(0, 1, 0));\n      if (resetAspect) {\n        this.dimensions = this.defaultDimensions;\n      }\n    }\n  }\n  /**\n   * Releases all associated resources\n   */\n  dispose() {\n    super.dispose();\n    this._titleBarMaterial.dispose();\n    this._contentMaterial.dispose();\n    this._titleBar.dispose();\n    this._titleBarTitle.dispose();\n    this._contentPlate.dispose();\n    this._backPlate.dispose();\n    this._followButton.dispose();\n    this._closeButton.dispose();\n    this._host.onPickedPointChangedObservable.remove(this._pickedPointObserver);\n    this._defaultBehavior.sixDofDragBehavior.onPositionChangedObservable.remove(this._positionChangedObserver);\n    this._defaultBehavior.detach();\n    this._gizmo.dispose();\n    this._contentDragBehavior.detach();\n  }\n}\n/**\n * Base Url for the assets.\n */\nHolographicSlate.ASSETS_BASE_URL = \"https://assets.babylonjs.com/meshes/MRTK/\";\n/**\n * File name for the close icon.\n */\nHolographicSlate.CLOSE_ICON_FILENAME = \"IconClose.png\";\n/**\n * File name for the close icon.\n */\nHolographicSlate.FOLLOW_ICON_FILENAME = \"IconFollowMe.png\";\nHolographicSlate._DEFAULT_TEXT_RESOLUTION_Y = 102.4;","map":{"version":3,"names":["ContentDisplay3D","TouchHolographicButton","AdvancedDynamicTexture","Control","TextBlock","TextWrapping","DefaultBehavior","SlateGizmo","FluentMaterial","FluentBackplateMaterial","PointerDragBehavior","Vector4","Epsilon","Scalar","Quaternion","Vector2","Vector3","Viewport","CreateBox","CreatePlane","Mesh","VertexData","HolographicSlate","defaultBehavior","_defaultBehavior","dimensions","_dimensions","value","scale","x","minDimensions","y","newRatio","minRatio","copyFrom","scaleInPlace","_updatePivot","_positionElements","titleBarHeight","_titleBarHeight","renderingGroupId","id","_titleBar","_titleBarTitle","_contentPlate","_backPlate","title","_titleText","_titleTextComponent","text","constructor","name","titleBarMargin","origin","_contentScaleRatio","defaultDimensions","clone","_followButton","isToggleButton","_closeButton","_contentViewport","_contentDragBehavior","dragPlaneNormal","_applyFacade","facadeTexture","_contentMaterial","albedoTexture","_resetContentPositionAndZoom","_applyContentViewport","attachToMesh","_addControl","control","_host","utilityLayer","_prepareNode","utilityLayerScene","_getTypeName","followButton","closeButton","titleBar","titleBarTitle","contentPlate","backPlate","scaling","setAll","position","copyFromFloats","addInPlace","contentPlateHeight","rightHandScene","getScene","useRightHandedSystem","set","host","scaleTo","_DEFAULT_TEXT_RESOLUTION_Y","aspectRatio","width","height","_gizmo","updateBoundingBox","_a","material","tex","uScale","vScale","uOffset","vOffset","mesh","center","z","TransformCoordinatesToRef","computeWorldMatrix","setPivotPoint","origin2","subtractInPlace","_createNode","scene","node","size","parent","isPickable","adt","CreateForMesh","textWrapping","Ellipsis","textHorizontalAlignment","HORIZONTAL_ALIGNMENT_LEFT","color","fontSize","paddingLeft","addControl","faceUV","sideOrientation","BACKSIDE","frontUVs","FRONTSIDE","isNearGrabbable","_attachContentPlateBehavior","imageUrl","ASSETS_BASE_URL","FOLLOW_ICON_FILENAME","CLOSE_ICON_FILENAME","isBackplateVisible","onToggleObservable","add","isToggled","followBehaviorEnabled","followBehavior","recenter","onPointerClickObservable","dispose","rotationQuaternion","Identity","isVisible","attach","moveAttached","useObjectOrientationForDragging","updateDragPlane","worldDimensions","upWorld","rightWorld","projectedOffset","startViewport","worldMatrix","onDragStartObservable","event","dragPlanePoint","TransformNormalToRef","normalize","Dot","offset","onDragObservable","Clamp","_affectMaterial","_titleBarMaterial","renderBorders","_backMaterial","lineWidth","radius","backFaceCulling","_resetContent","attachedSlate","sixDofDragBehavior","_positionChangedObserver","onPositionChangedObservable","resetDefaultAspectAndPose","resetAspect","camera","activeCamera","getWorldMatrix","backward","TransformNormal","Backward","pivot","getAbsolutePivotPoint","FromLookDirectionLH","onPickedPointChangedObservable","remove","_pickedPointObserver","detach"],"sources":["../../../../../dev/gui/src/3D/controls/holographicSlate.ts"],"sourcesContent":["import { ContentDisplay3D } from \"./contentDisplay3D\";\r\nimport type { Control3D } from \"./control3D\";\r\nimport { TouchHolographicButton } from \"./touchHolographicButton\";\r\nimport { AdvancedDynamicTexture } from \"../../2D/advancedDynamicTexture\";\r\nimport { Control } from \"../../2D/controls/control\";\r\nimport { TextBlock, TextWrapping } from \"../../2D/controls/textBlock\";\r\nimport { DefaultBehavior } from \"../behaviors/defaultBehavior\";\r\nimport { SlateGizmo } from \"../gizmos/slateGizmo\";\r\nimport { FluentMaterial } from \"../materials/fluent/fluentMaterial\";\r\nimport { FluentBackplateMaterial } from \"../materials/fluentBackplate/fluentBackplateMaterial\";\r\nimport { PointerDragBehavior } from \"core/Behaviors/Meshes/pointerDragBehavior\";\r\nimport type { Texture } from \"core/Materials/Textures/texture\";\r\nimport { Vector4 } from \"core/Maths/math\";\r\nimport { Epsilon } from \"core/Maths/math.constants\";\r\nimport { Scalar } from \"core/Maths/math.scalar\";\r\nimport type { Matrix } from \"core/Maths/math.vector\";\r\nimport { Quaternion, Vector2, Vector3 } from \"core/Maths/math.vector\";\r\nimport { Viewport } from \"core/Maths/math.viewport\";\r\nimport type { AbstractMesh } from \"core/Meshes/abstractMesh\";\r\nimport { CreateBox } from \"core/Meshes/Builders/boxBuilder\";\r\nimport { CreatePlane } from \"core/Meshes/Builders/planeBuilder\";\r\nimport type { TransformNode } from \"core/Meshes/transformNode\";\r\nimport { Mesh } from \"core/Meshes/mesh\";\r\nimport { VertexData } from \"core/Meshes/mesh.vertexData\";\r\nimport type { Observer } from \"core/Misc/observable\";\r\nimport type { Scene } from \"core/scene\";\r\nimport type { Nullable } from \"core/types\";\r\n\r\n/**\r\n * Class used to create a holographic slate\r\n * @since 5.0.0\r\n */\r\nexport class HolographicSlate extends ContentDisplay3D {\r\n    /**\r\n     * Base Url for the assets.\r\n     */\r\n    public static ASSETS_BASE_URL: string = \"https://assets.babylonjs.com/meshes/MRTK/\";\r\n    /**\r\n     * File name for the close icon.\r\n     */\r\n    public static CLOSE_ICON_FILENAME: string = \"IconClose.png\";\r\n    /**\r\n     * File name for the close icon.\r\n     */\r\n    public static FOLLOW_ICON_FILENAME: string = \"IconFollowMe.png\";\r\n\r\n    private static _DEFAULT_TEXT_RESOLUTION_Y = 102.4;\r\n\r\n    /**\r\n     * Margin between title bar and contentplate\r\n     */\r\n    public titleBarMargin = 0.005;\r\n\r\n    /**\r\n     * Origin in local coordinates (top left corner)\r\n     */\r\n    public origin = new Vector3(0, 0, 0);\r\n\r\n    private _dimensions = new Vector2(21.875, 12.5);\r\n    private _titleBarHeight = 0.625;\r\n\r\n    private _titleBarMaterial: FluentBackplateMaterial;\r\n    private _backMaterial: FluentBackplateMaterial;\r\n    private _contentMaterial: FluentMaterial;\r\n    private _pickedPointObserver: Nullable<Observer<Nullable<Vector3>>>;\r\n    private _positionChangedObserver: Nullable<Observer<{ position: Vector3 }>>;\r\n\r\n    private _titleText = \"\";\r\n    private _titleTextComponent: TextBlock;\r\n\r\n    private _contentViewport: Viewport;\r\n    private _contentDragBehavior: PointerDragBehavior;\r\n\r\n    private _defaultBehavior: DefaultBehavior;\r\n    /**\r\n     * Regroups all mesh behaviors for the slate\r\n     */\r\n    public get defaultBehavior(): DefaultBehavior {\r\n        return this._defaultBehavior;\r\n    }\r\n\r\n    /** @internal */\r\n    public _gizmo: SlateGizmo;\r\n\r\n    protected _titleBar: Mesh;\r\n    protected _titleBarTitle: Mesh;\r\n    protected _contentPlate: Mesh;\r\n    protected _backPlate: Mesh;\r\n    /** @internal */\r\n    public _followButton: TouchHolographicButton;\r\n    protected _closeButton: TouchHolographicButton;\r\n    protected _contentScaleRatio = 1;\r\n\r\n    /**\r\n     * 2D dimensions of the slate\r\n     */\r\n    public get dimensions() {\r\n        return this._dimensions;\r\n    }\r\n    public set dimensions(value) {\r\n        //clamp, respecting ratios\r\n        let scale = 1.0;\r\n        if (value.x < this.minDimensions.x || value.y < this.minDimensions.y) {\r\n            const newRatio = value.x / value.y;\r\n            const minRatio = this.minDimensions.x / this.minDimensions.y;\r\n            if (minRatio > newRatio) {\r\n                // We just need to make sure the x-val is greater than the min\r\n                scale = this.minDimensions.x / value.x;\r\n            } else {\r\n                // We just need to make sure the y-val is greater than the min\r\n                scale = this.minDimensions.y / value.y;\r\n            }\r\n        }\r\n\r\n        this._dimensions.copyFrom(value).scaleInPlace(scale);\r\n        this._updatePivot();\r\n        this._positionElements();\r\n    }\r\n\r\n    /**\r\n     * Minimum dimensions of the slate\r\n     */\r\n    public minDimensions = new Vector2(15.625, 6.25);\r\n\r\n    /**\r\n     * Default dimensions of the slate\r\n     */\r\n    public readonly defaultDimensions = this._dimensions.clone();\r\n\r\n    /**\r\n     * Height of the title bar component\r\n     */\r\n    public get titleBarHeight() {\r\n        return this._titleBarHeight;\r\n    }\r\n    public set titleBarHeight(value) {\r\n        this._titleBarHeight = value;\r\n    }\r\n\r\n    /**\r\n     * Rendering ground id of all the meshes\r\n     */\r\n    public set renderingGroupId(id: number) {\r\n        this._titleBar.renderingGroupId = id;\r\n        this._titleBarTitle.renderingGroupId = id;\r\n        this._contentPlate.renderingGroupId = id;\r\n        this._backPlate.renderingGroupId = id;\r\n    }\r\n    public get renderingGroupId(): number {\r\n        return this._titleBar.renderingGroupId;\r\n    }\r\n\r\n    /**\r\n     * The title text displayed at the top of the slate\r\n     */\r\n    public set title(title: string) {\r\n        this._titleText = title;\r\n        if (this._titleTextComponent) {\r\n            this._titleTextComponent.text = title;\r\n        }\r\n    }\r\n    public get title() {\r\n        return this._titleText;\r\n    }\r\n\r\n    /**\r\n     * Creates a new slate\r\n     * @param name defines the control name\r\n     */\r\n    constructor(name?: string) {\r\n        super(name);\r\n\r\n        this._followButton = new TouchHolographicButton(\"followButton\" + this.name);\r\n        this._followButton.isToggleButton = true;\r\n        this._closeButton = new TouchHolographicButton(\"closeButton\" + this.name);\r\n\r\n        this._contentViewport = new Viewport(0, 0, 1, 1);\r\n        this._contentDragBehavior = new PointerDragBehavior({\r\n            dragPlaneNormal: new Vector3(0, 0, -1),\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Apply the facade texture (created from the content property).\r\n     * This function can be overloaded by child classes\r\n     * @param facadeTexture defines the AdvancedDynamicTexture to use\r\n     */\r\n    protected _applyFacade(facadeTexture: AdvancedDynamicTexture) {\r\n        this._contentMaterial.albedoTexture = facadeTexture;\r\n        this._resetContentPositionAndZoom();\r\n        this._applyContentViewport();\r\n\r\n        facadeTexture.attachToMesh(this._contentPlate, true);\r\n    }\r\n\r\n    private _addControl(control: Control3D): void {\r\n        control._host = this._host;\r\n        if (this._host.utilityLayer) {\r\n            control._prepareNode(this._host.utilityLayer.utilityLayerScene);\r\n        }\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"HolographicSlate\";\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _positionElements() {\r\n        const followButton = this._followButton;\r\n        const closeButton = this._closeButton;\r\n        const titleBar = this._titleBar;\r\n        const titleBarTitle = this._titleBarTitle;\r\n        const contentPlate = this._contentPlate;\r\n        const backPlate = this._backPlate;\r\n\r\n        if (followButton && closeButton && titleBar) {\r\n            closeButton.scaling.setAll(this.titleBarHeight);\r\n            followButton.scaling.setAll(this.titleBarHeight);\r\n            closeButton.position.copyFromFloats(this.dimensions.x - this.titleBarHeight / 2, -this.titleBarHeight / 2, 0).addInPlace(this.origin);\r\n            followButton.position.copyFromFloats(this.dimensions.x - (3 * this.titleBarHeight) / 2, -this.titleBarHeight / 2, 0).addInPlace(this.origin);\r\n\r\n            const contentPlateHeight = this.dimensions.y - this.titleBarHeight - this.titleBarMargin;\r\n            const rightHandScene = contentPlate.getScene().useRightHandedSystem;\r\n\r\n            titleBar.scaling.set(this.dimensions.x, this.titleBarHeight, Epsilon);\r\n            titleBarTitle.scaling.set(this.dimensions.x - 2 * this.titleBarHeight, this.titleBarHeight, Epsilon);\r\n            contentPlate.scaling.copyFromFloats(this.dimensions.x, contentPlateHeight, Epsilon);\r\n            backPlate.scaling.copyFromFloats(this.dimensions.x, contentPlateHeight, Epsilon);\r\n\r\n            titleBar.position.copyFromFloats(this.dimensions.x / 2, -(this.titleBarHeight / 2), 0).addInPlace(this.origin);\r\n            titleBarTitle.position\r\n                .copyFromFloats(this.dimensions.x / 2 - this.titleBarHeight, -(this.titleBarHeight / 2), rightHandScene ? Epsilon : -Epsilon)\r\n                .addInPlace(this.origin);\r\n            contentPlate.position.copyFromFloats(this.dimensions.x / 2, -(this.titleBarHeight + this.titleBarMargin + contentPlateHeight / 2), 0).addInPlace(this.origin);\r\n            backPlate.position\r\n                .copyFromFloats(this.dimensions.x / 2, -(this.titleBarHeight + this.titleBarMargin + contentPlateHeight / 2), rightHandScene ? -Epsilon : Epsilon)\r\n                .addInPlace(this.origin);\r\n\r\n            // Update the title's AdvancedDynamicTexture scale to avoid visual stretching\r\n            this._titleTextComponent.host.scaleTo(\r\n                (HolographicSlate._DEFAULT_TEXT_RESOLUTION_Y * titleBarTitle.scaling.x) / titleBarTitle.scaling.y,\r\n                HolographicSlate._DEFAULT_TEXT_RESOLUTION_Y\r\n            );\r\n\r\n            const aspectRatio = this.dimensions.x / contentPlateHeight;\r\n            this._contentViewport.width = this._contentScaleRatio;\r\n            this._contentViewport.height = this._contentScaleRatio / aspectRatio;\r\n\r\n            this._applyContentViewport();\r\n            if (this._gizmo) {\r\n                this._gizmo.updateBoundingBox();\r\n            }\r\n        }\r\n    }\r\n\r\n    private _applyContentViewport() {\r\n        if (this._contentPlate?.material && (this._contentPlate.material as FluentMaterial).albedoTexture) {\r\n            const tex = (this._contentPlate.material as FluentMaterial).albedoTexture as Texture;\r\n            tex.uScale = this._contentScaleRatio;\r\n            tex.vScale = (this._contentScaleRatio / this._contentViewport.width) * this._contentViewport.height;\r\n            tex.uOffset = this._contentViewport.x;\r\n            tex.vOffset = this._contentViewport.y;\r\n        }\r\n    }\r\n\r\n    private _resetContentPositionAndZoom() {\r\n        this._contentViewport.x = 0;\r\n        this._contentViewport.y = 1 - this._contentViewport.height / this._contentViewport.width;\r\n        this._contentScaleRatio = 1;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _updatePivot() {\r\n        if (!this.mesh) {\r\n            return;\r\n        }\r\n\r\n        // Update pivot point so it is at the center of geometry\r\n        // As origin is topleft corner in 2D, dimensions are calculated towards bottom right corner, thus y axis is downwards\r\n        const center = new Vector3(this.dimensions.x * 0.5, -this.dimensions.y * 0.5, Epsilon);\r\n        center.addInPlace(this.origin);\r\n        center.z = 0;\r\n\r\n        const origin = new Vector3(0, 0, 0);\r\n        Vector3.TransformCoordinatesToRef(origin, this.mesh.computeWorldMatrix(true), origin);\r\n        this.mesh.setPivotPoint(center);\r\n        const origin2 = new Vector3(0, 0, 0);\r\n        Vector3.TransformCoordinatesToRef(origin2, this.mesh.computeWorldMatrix(true), origin2);\r\n        this.mesh.position.addInPlace(origin).subtractInPlace(origin2);\r\n    }\r\n\r\n    // Mesh association\r\n    protected _createNode(scene: Scene): TransformNode {\r\n        const node = new Mesh(\"slate_\" + this.name, scene);\r\n\r\n        this._titleBar = CreateBox(\"titleBar_\" + this.name, { size: 1 }, scene);\r\n        this._titleBarTitle = CreatePlane(\"titleText_\" + this.name, { size: 1 }, scene);\r\n        this._titleBarTitle.parent = node;\r\n        this._titleBarTitle.isPickable = false;\r\n\r\n        const adt = AdvancedDynamicTexture.CreateForMesh(this._titleBarTitle);\r\n        this._titleTextComponent = new TextBlock(\"titleText_\" + this.name, this._titleText);\r\n        this._titleTextComponent.textWrapping = TextWrapping.Ellipsis;\r\n        this._titleTextComponent.textHorizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        this._titleTextComponent.color = \"white\";\r\n        this._titleTextComponent.fontSize = HolographicSlate._DEFAULT_TEXT_RESOLUTION_Y / 2;\r\n        this._titleTextComponent.paddingLeft = HolographicSlate._DEFAULT_TEXT_RESOLUTION_Y / 4;\r\n        adt.addControl(this._titleTextComponent);\r\n\r\n        if (scene.useRightHandedSystem) {\r\n            const faceUV = new Vector4(0, 0, 1, 1);\r\n            this._contentPlate = CreatePlane(\"contentPlate_\" + this.name, { size: 1, sideOrientation: VertexData.BACKSIDE, frontUVs: faceUV }, scene);\r\n            this._backPlate = CreatePlane(\"backPlate_\" + this.name, { size: 1, sideOrientation: VertexData.FRONTSIDE }, scene);\r\n        } else {\r\n            const faceUV = new Vector4(0, 0, 1, 1);\r\n            this._contentPlate = CreatePlane(\"contentPlate_\" + this.name, { size: 1, sideOrientation: VertexData.FRONTSIDE, frontUVs: faceUV }, scene);\r\n            this._backPlate = CreatePlane(\"backPlate_\" + this.name, { size: 1, sideOrientation: VertexData.BACKSIDE }, scene);\r\n        }\r\n\r\n        this._titleBar.parent = node;\r\n        this._titleBar.isNearGrabbable = true;\r\n        this._contentPlate.parent = node;\r\n        this._backPlate.parent = node;\r\n        this._attachContentPlateBehavior();\r\n\r\n        this._addControl(this._followButton);\r\n        this._addControl(this._closeButton);\r\n\r\n        const followButton = this._followButton;\r\n        const closeButton = this._closeButton;\r\n\r\n        followButton.node!.parent = node;\r\n        closeButton.node!.parent = node;\r\n\r\n        this._positionElements();\r\n\r\n        this._followButton.imageUrl = HolographicSlate.ASSETS_BASE_URL + HolographicSlate.FOLLOW_ICON_FILENAME;\r\n        this._closeButton.imageUrl = HolographicSlate.ASSETS_BASE_URL + HolographicSlate.CLOSE_ICON_FILENAME;\r\n\r\n        this._followButton.isBackplateVisible = false;\r\n        this._closeButton.isBackplateVisible = false;\r\n\r\n        this._followButton.onToggleObservable.add((isToggled) => {\r\n            this._defaultBehavior.followBehaviorEnabled = isToggled;\r\n            if (this._defaultBehavior.followBehaviorEnabled) {\r\n                this._defaultBehavior.followBehavior.recenter();\r\n            }\r\n        });\r\n\r\n        this._closeButton.onPointerClickObservable.add(() => {\r\n            this.dispose();\r\n        });\r\n\r\n        node.rotationQuaternion = Quaternion.Identity();\r\n        node.isVisible = false;\r\n\r\n        return node;\r\n    }\r\n\r\n    private _attachContentPlateBehavior() {\r\n        this._contentDragBehavior.attach(this._contentPlate);\r\n        this._contentDragBehavior.moveAttached = false;\r\n        this._contentDragBehavior.useObjectOrientationForDragging = true;\r\n        this._contentDragBehavior.updateDragPlane = false;\r\n\r\n        const origin = new Vector3();\r\n        const worldDimensions = new Vector3();\r\n        const upWorld = new Vector3();\r\n        const rightWorld = new Vector3();\r\n        const projectedOffset = new Vector2();\r\n        let startViewport: Viewport;\r\n        let worldMatrix: Matrix;\r\n\r\n        this._contentDragBehavior.onDragStartObservable.add((event) => {\r\n            if (!this.node) {\r\n                return;\r\n            }\r\n            startViewport = this._contentViewport.clone();\r\n            worldMatrix = this.node.computeWorldMatrix(true);\r\n\r\n            origin.copyFrom(event.dragPlanePoint);\r\n            worldDimensions.set(this.dimensions.x, this.dimensions.y, Epsilon);\r\n            worldDimensions.y -= this.titleBarHeight + this.titleBarMargin;\r\n            Vector3.TransformNormalToRef(worldDimensions, worldMatrix, worldDimensions);\r\n            upWorld.copyFromFloats(0, 1, 0);\r\n            Vector3.TransformNormalToRef(upWorld, worldMatrix, upWorld);\r\n            rightWorld.copyFromFloats(1, 0, 0);\r\n            Vector3.TransformNormalToRef(rightWorld, worldMatrix, rightWorld);\r\n            upWorld.normalize();\r\n            upWorld.scaleInPlace(1 / Vector3.Dot(upWorld, worldDimensions));\r\n            rightWorld.normalize();\r\n            rightWorld.scaleInPlace(1 / Vector3.Dot(rightWorld, worldDimensions));\r\n        });\r\n\r\n        const offset = new Vector3();\r\n        this._contentDragBehavior.onDragObservable.add((event) => {\r\n            offset.copyFrom(event.dragPlanePoint);\r\n            offset.subtractInPlace(origin);\r\n            projectedOffset.copyFromFloats(Vector3.Dot(offset, rightWorld), Vector3.Dot(offset, upWorld));\r\n\r\n            // By default, content takes full width available and height is cropped to keep aspect ratio\r\n            this._contentViewport.x = Scalar.Clamp(startViewport.x - offset.x, 0, 1 - this._contentViewport.width * this._contentScaleRatio);\r\n            this._contentViewport.y = Scalar.Clamp(startViewport.y - offset.y, 0, 1 - this._contentViewport.height * this._contentScaleRatio);\r\n            this._applyContentViewport();\r\n        });\r\n    }\r\n\r\n    protected _affectMaterial(mesh: AbstractMesh) {\r\n        // TODO share materials\r\n        this._titleBarMaterial = new FluentBackplateMaterial(`${this.name} plateMaterial`, mesh.getScene());\r\n\r\n        this._contentMaterial = new FluentMaterial(`${this.name} contentMaterial`, mesh.getScene());\r\n        this._contentMaterial.renderBorders = true;\r\n\r\n        this._backMaterial = new FluentBackplateMaterial(`${this.name} backPlate`, mesh.getScene());\r\n        this._backMaterial.lineWidth = Epsilon;\r\n        this._backMaterial.radius = 0.005;\r\n        this._backMaterial.backFaceCulling = true;\r\n\r\n        this._titleBar.material = this._titleBarMaterial;\r\n        this._contentPlate.material = this._contentMaterial;\r\n        this._backPlate.material = this._backMaterial;\r\n\r\n        this._resetContent();\r\n        this._applyContentViewport();\r\n    }\r\n\r\n    /**\r\n     * @internal*\r\n     */\r\n    public _prepareNode(scene: Scene): void {\r\n        super._prepareNode(scene);\r\n        this._gizmo = new SlateGizmo(this._host.utilityLayer!);\r\n        this._gizmo.attachedSlate = this;\r\n        this._defaultBehavior = new DefaultBehavior();\r\n        this._defaultBehavior.attach(this.node as Mesh, [this._titleBar]);\r\n        this._defaultBehavior.sixDofDragBehavior.onDragStartObservable.add(() => {\r\n            this._followButton.isToggled = false;\r\n        });\r\n\r\n        this._positionChangedObserver = this._defaultBehavior.sixDofDragBehavior.onPositionChangedObservable.add(() => {\r\n            this._gizmo.updateBoundingBox();\r\n        });\r\n\r\n        this._updatePivot();\r\n        this.resetDefaultAspectAndPose(false);\r\n    }\r\n\r\n    /**\r\n     * Resets the aspect and pose of the slate so it is right in front of the active camera, facing towards it.\r\n     * @param resetAspect Should the slate's dimensions/aspect ratio be reset as well\r\n     */\r\n    public resetDefaultAspectAndPose(resetAspect: boolean = true) {\r\n        if (!this._host || !this._host.utilityLayer || !this.node) {\r\n            return;\r\n        }\r\n        const scene = this._host.utilityLayer.utilityLayerScene;\r\n        const camera = scene.activeCamera;\r\n        if (camera) {\r\n            const worldMatrix = camera.getWorldMatrix();\r\n            const backward = Vector3.TransformNormal(Vector3.Backward(scene.useRightHandedSystem), worldMatrix);\r\n            this.origin.setAll(0);\r\n            this._gizmo.updateBoundingBox();\r\n            const pivot = this.node.getAbsolutePivotPoint();\r\n            this.node.position.copyFrom(camera.position).subtractInPlace(backward).subtractInPlace(pivot);\r\n            this.node.rotationQuaternion = Quaternion.FromLookDirectionLH(backward, new Vector3(0, 1, 0));\r\n\r\n            if (resetAspect) {\r\n                this.dimensions = this.defaultDimensions;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Releases all associated resources\r\n     */\r\n    public dispose() {\r\n        super.dispose();\r\n        this._titleBarMaterial.dispose();\r\n        this._contentMaterial.dispose();\r\n\r\n        this._titleBar.dispose();\r\n        this._titleBarTitle.dispose();\r\n        this._contentPlate.dispose();\r\n        this._backPlate.dispose();\r\n\r\n        this._followButton.dispose();\r\n        this._closeButton.dispose();\r\n\r\n        this._host.onPickedPointChangedObservable.remove(this._pickedPointObserver);\r\n        this._defaultBehavior.sixDofDragBehavior.onPositionChangedObservable.remove(this._positionChangedObserver);\r\n\r\n        this._defaultBehavior.detach();\r\n        this._gizmo.dispose();\r\n        this._contentDragBehavior.detach();\r\n    }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}