{"ast":null,"code":"import \"core-js/modules/es.typed-array.to-reversed.js\";\nimport \"core-js/modules/es.typed-array.to-sorted.js\";\nimport \"core-js/modules/es.typed-array.with.js\";\nimport { Matrix, Quaternion, TmpVectors, Vector3 } from \"../../../../Maths/math.vector.js\";\nimport { FlowGraphBinaryOperationBlock } from \"../flowGraphBinaryOperationBlock.js\";\nimport { RichTypeAny, RichTypeMatrix, RichTypeNumber, RichTypeQuaternion, RichTypeVector3 } from \"../../../flowGraphRichTypes.js\";\nimport { FlowGraphUnaryOperationBlock } from \"../flowGraphUnaryOperationBlock.js\";\nimport { FlowGraphBlock } from \"../../../flowGraphBlock.js\";\nimport { RegisterClass } from \"../../../../Misc/typeStore.js\";\nconst ADDNAME = \"FGAddMatrixBlock\";\n/**\n * Adds two matrices together.\n * @experimental\n */\nexport class FlowGraphAddMatrixBlock extends FlowGraphBinaryOperationBlock {\n  constructor(config) {\n    super(RichTypeMatrix, RichTypeMatrix, RichTypeMatrix, (left, right) => left.addToRef(right, this._cachedMatrix), ADDNAME, config);\n    this._cachedMatrix = Matrix.Zero();\n  }\n}\nRegisterClass(ADDNAME, FlowGraphAddMatrixBlock);\nconst ADDNUMBERNAME = \"FGAddMatrixAndNumberBlock\";\n/**\n * Adds a matrix and a number together.\n * @experimental\n */\nexport class FlowGraphAddMatrixAndNumberBlock extends FlowGraphBinaryOperationBlock {\n  constructor(config) {\n    super(RichTypeMatrix, RichTypeNumber, RichTypeMatrix, (left, right) => {\n      for (let i = 0; i < left.m.length; i++) {\n        this._cachedArray[i] = left.m[i] + right;\n      }\n      return Matrix.FromArrayToRef(this._cachedArray, 0, this._cachedMatrix);\n    }, ADDNUMBERNAME, config);\n    this._cachedArray = new Float32Array(16);\n    this._cachedMatrix = Matrix.Zero();\n  }\n}\nRegisterClass(ADDNUMBERNAME, FlowGraphAddMatrixAndNumberBlock);\nconst SUBNAME = \"FGSubtractMatrixBlock\";\n/**\n * Subtracts two matrices.\n * @experimental\n */\nexport class FlowGraphSubtractMatrixBlock extends FlowGraphBinaryOperationBlock {\n  constructor(config) {\n    super(RichTypeMatrix, RichTypeMatrix, RichTypeMatrix, (left, right) => left.addToRef(right.scaleToRef(-1, TmpVectors.Matrix[0]), this._cachedMatrix), SUBNAME, config);\n    this._cachedMatrix = Matrix.Zero();\n  }\n}\nRegisterClass(SUBNAME, FlowGraphSubtractMatrixBlock);\nconst SUBNUMBERNAME = \"FGSubtractMatrixAndNumberBlock\";\n/**\n * Subtracts a matrix and a number together.\n * @experimental\n */\nexport class FlowGraphSubtractMatrixAndNumberBlock extends FlowGraphBinaryOperationBlock {\n  constructor(config) {\n    super(RichTypeMatrix, RichTypeNumber, RichTypeMatrix, (left, right) => {\n      for (let i = 0; i < left.m.length; i++) {\n        this._cachedArray[i] = left.m[i] - right;\n      }\n      return Matrix.FromArrayToRef(this._cachedArray, 0, this._cachedMatrix);\n    }, SUBNUMBERNAME, config);\n    this._cachedArray = new Float32Array(16);\n    this._cachedMatrix = Matrix.Zero();\n  }\n}\nRegisterClass(SUBNUMBERNAME, FlowGraphSubtractMatrixAndNumberBlock);\nconst MULNAME = \"FGMultiplyMatrixBlock\";\n/**\n * Multiplies two matrices together.\n * @experimental\n */\nexport class FlowGraphMultiplyMatrixBlock extends FlowGraphBinaryOperationBlock {\n  constructor(config) {\n    super(RichTypeMatrix, RichTypeMatrix, RichTypeMatrix, (left, right) => left.multiplyToRef(right, this._cachedMatrix), MULNAME, config);\n    this._cachedMatrix = Matrix.Zero();\n  }\n}\nRegisterClass(MULNAME, FlowGraphMultiplyMatrixBlock);\nconst DIVIDENAME = \"FGDivideMatrixBlock\";\n/**\n * Divides two matrices.\n * @experimental\n */\nexport class FlowGraphDivideMatrixBlock extends FlowGraphBinaryOperationBlock {\n  constructor(config) {\n    super(RichTypeMatrix, RichTypeMatrix, RichTypeMatrix, (left, right) => left.multiplyToRef(right.invertToRef(TmpVectors.Matrix[0]), this._cachedResultMatrix), DIVIDENAME, config);\n    this._cachedResultMatrix = Matrix.Zero();\n  }\n}\nRegisterClass(DIVIDENAME, FlowGraphDivideMatrixBlock);\nconst DIVIDENUMBERNAME = \"FGDivideMatrixAndNumberBlock\";\n/**\n * Divides a matrix and a number together.\n * @experimental\n */\nexport class FlowGraphDivideMatrixAndNumberBlock extends FlowGraphBinaryOperationBlock {\n  constructor(config) {\n    super(RichTypeMatrix, RichTypeNumber, RichTypeMatrix, (left, right) => {\n      for (let i = 0; i < left.m.length; i++) {\n        this._cachedArray[i] = left.m[i] / right;\n      }\n      return Matrix.FromArrayToRef(this._cachedArray, 0, this._cachedMatrix);\n    }, DIVIDENUMBERNAME, config);\n    this._cachedArray = new Float32Array(16);\n    this._cachedMatrix = Matrix.Zero();\n  }\n}\nRegisterClass(DIVIDENUMBERNAME, FlowGraphDivideMatrixAndNumberBlock);\nconst SCALENAME = \"FGScaleMatrixBlock\";\n/**\n * Scales a matrix by a number.\n * @experimental\n */\nexport class FlowGraphScaleMatrixBlock extends FlowGraphBinaryOperationBlock {\n  constructor(config) {\n    super(RichTypeMatrix, RichTypeNumber, RichTypeMatrix, (left, right) => left.scaleToRef(right, this._cachedMatrix), SCALENAME, config);\n    this._cachedMatrix = Matrix.Zero();\n  }\n}\nRegisterClass(SCALENAME, FlowGraphScaleMatrixBlock);\nconst CLAMPNAME = \"FGClampMatrixBlock\";\n/**\n * Clamps each value in a matrix between a minimum and maximum value.\n * @experimental\n */\nexport class FlowGraphClampMatrixBlock extends FlowGraphBlock {\n  constructor(config) {\n    super(config);\n    this._cachedArray = new Float32Array(16);\n    this._cachedMatrix = Matrix.Identity();\n    this.input = this._registerDataInput(\"input\", RichTypeMatrix);\n    this.min = this._registerDataInput(\"min\", RichTypeNumber);\n    this.max = this._registerDataInput(\"max\", RichTypeNumber);\n    this.output = this._registerDataOutput(\"output\", RichTypeMatrix);\n  }\n  _updateOutputs(_context) {\n    const input = this.input.getValue(_context);\n    const min = this.min.getValue(_context);\n    const max = this.max.getValue(_context);\n    for (let i = 0; i < input.m.length; i++) {\n      this._cachedArray[i] = Math.min(Math.max(input.m[i], min), max);\n    }\n    Matrix.FromArrayToRef(this._cachedArray, 0, this._cachedMatrix);\n    this.output.setValue(this._cachedMatrix, _context);\n  }\n  getClassName() {\n    return CLAMPNAME;\n  }\n}\nRegisterClass(CLAMPNAME, FlowGraphClampMatrixBlock);\nconst DECOMPOSENAME = \"FGDecomposeMatrixBlock\";\n/**\n * Decomposes a matrix into its translation, rotation and scale components.\n * @experimental\n */\nexport class FlowGraphDecomposeMatrixBlock extends FlowGraphBlock {\n  constructor(config) {\n    super(config);\n    this._cachedTranslation = new Vector3();\n    this._cachedRotation = new Quaternion();\n    this._cachedScale = new Vector3();\n    this.input = this._registerDataInput(\"input\", RichTypeMatrix);\n    this.translation = this._registerDataOutput(\"translation\", RichTypeVector3);\n    this.rotation = this._registerDataOutput(\"rotation\", RichTypeQuaternion);\n    this.scale = this._registerDataOutput(\"scale\", RichTypeVector3);\n  }\n  _updateOutputs(_context) {\n    const input = this.input.getValue(_context);\n    input.decompose(this._cachedScale, this._cachedRotation, this._cachedTranslation);\n    this.translation.setValue(this._cachedTranslation, _context);\n    this.rotation.setValue(this._cachedRotation, _context);\n    this.scale.setValue(this._cachedScale, _context);\n  }\n  getClassName() {\n    return DECOMPOSENAME;\n  }\n}\nRegisterClass(DECOMPOSENAME, FlowGraphDecomposeMatrixBlock);\nconst COMPOSENAME = \"FGComposeMatrixBlock\";\n/**\n * Composes a matrix from its translation, rotation and scale components.\n * @experimental\n */\nexport class FlowGraphComposeMatrixBlock extends FlowGraphBlock {\n  constructor(config) {\n    super(config);\n    this._cachedMatrix = new Matrix();\n    this.output = this._registerDataOutput(\"input\", RichTypeMatrix);\n    this.translation = this._registerDataInput(\"translation\", RichTypeVector3);\n    this.rotation = this._registerDataInput(\"rotation\", RichTypeQuaternion);\n    this.scale = this._registerDataInput(\"scale\", RichTypeVector3);\n  }\n  _updateOutputs(_context) {\n    const translation = this.translation.getValue(_context);\n    const rotation = this.rotation.getValue(_context);\n    const scale = this.scale.getValue(_context);\n    Matrix.ComposeToRef(scale, rotation, translation, this._cachedMatrix);\n    this.output.setValue(this._cachedMatrix, _context);\n  }\n  getClassName() {\n    return COMPOSENAME;\n  }\n}\nRegisterClass(COMPOSENAME, FlowGraphComposeMatrixBlock);\nconst QUATERNIONTOROTNAME = \"FGQuaternionToRotationMatrixBlock\";\n/**\n * Converts a quaternion to a rotation matrix.\n * @experimental\n */\nexport class FlowGraphQuaternionToRotationMatrixBlock extends FlowGraphUnaryOperationBlock {\n  constructor(config) {\n    super(RichTypeQuaternion, RichTypeMatrix, value => Matrix.FromQuaternionToRef(value, this._cachedMatrix), QUATERNIONTOROTNAME, config);\n    this._cachedMatrix = new Matrix();\n  }\n}\nRegisterClass(QUATERNIONTOROTNAME, FlowGraphQuaternionToRotationMatrixBlock);\nconst GETTRANSFORMNAME = \"FGGetTransformationMatrixBlock\";\n/**\n * Given the Transform Nodes A and B, gives the matrix required\n * to transform coordinates from A's local space to B's local space.\n */\nexport class FlowGraphGetTransformationMatrixBlock extends FlowGraphBinaryOperationBlock {\n  constructor(config) {\n    super(RichTypeAny, RichTypeAny, RichTypeMatrix, (left, right) => {\n      const aMatrix = left.getWorldMatrix();\n      const bMatrix = right.getWorldMatrix();\n      const inverseB = bMatrix.invertToRef(TmpVectors.Matrix[0]);\n      const result = inverseB.multiplyToRef(aMatrix, this._cachedResult);\n      return result;\n    }, GETTRANSFORMNAME, config);\n    this._cachedResult = Matrix.Zero();\n  }\n}\nRegisterClass(GETTRANSFORMNAME, FlowGraphGetTransformationMatrixBlock);","map":{"version":3,"names":["Matrix","Quaternion","TmpVectors","Vector3","FlowGraphBinaryOperationBlock","RichTypeAny","RichTypeMatrix","RichTypeNumber","RichTypeQuaternion","RichTypeVector3","FlowGraphUnaryOperationBlock","FlowGraphBlock","RegisterClass","ADDNAME","FlowGraphAddMatrixBlock","constructor","config","left","right","addToRef","_cachedMatrix","Zero","ADDNUMBERNAME","FlowGraphAddMatrixAndNumberBlock","i","m","length","_cachedArray","FromArrayToRef","Float32Array","SUBNAME","FlowGraphSubtractMatrixBlock","scaleToRef","SUBNUMBERNAME","FlowGraphSubtractMatrixAndNumberBlock","MULNAME","FlowGraphMultiplyMatrixBlock","multiplyToRef","DIVIDENAME","FlowGraphDivideMatrixBlock","invertToRef","_cachedResultMatrix","DIVIDENUMBERNAME","FlowGraphDivideMatrixAndNumberBlock","SCALENAME","FlowGraphScaleMatrixBlock","CLAMPNAME","FlowGraphClampMatrixBlock","Identity","input","_registerDataInput","min","max","output","_registerDataOutput","_updateOutputs","_context","getValue","Math","setValue","getClassName","DECOMPOSENAME","FlowGraphDecomposeMatrixBlock","_cachedTranslation","_cachedRotation","_cachedScale","translation","rotation","scale","decompose","COMPOSENAME","FlowGraphComposeMatrixBlock","ComposeToRef","QUATERNIONTOROTNAME","FlowGraphQuaternionToRotationMatrixBlock","value","FromQuaternionToRef","GETTRANSFORMNAME","FlowGraphGetTransformationMatrixBlock","aMatrix","getWorldMatrix","bMatrix","inverseB","result","_cachedResult"],"sources":["../../../../../../../dev/core/src/FlowGraph/Blocks/Data/Math/flowGraphMatrixBlocks.ts"],"sourcesContent":["import { Matrix, Quaternion, TmpVectors, Vector3 } from \"../../../../Maths/math.vector\";\r\nimport { FlowGraphBinaryOperationBlock } from \"../flowGraphBinaryOperationBlock\";\r\nimport { RichTypeAny, RichTypeMatrix, RichTypeNumber, RichTypeQuaternion, RichTypeVector3 } from \"../../../flowGraphRichTypes\";\r\nimport { FlowGraphUnaryOperationBlock } from \"../flowGraphUnaryOperationBlock\";\r\nimport type { IFlowGraphBlockConfiguration } from \"../../../flowGraphBlock\";\r\nimport { FlowGraphBlock } from \"../../../flowGraphBlock\";\r\nimport type { FlowGraphDataConnection } from \"../../../flowGraphDataConnection\";\r\nimport type { FlowGraphContext } from \"../../../flowGraphContext\";\r\nimport type { TransformNode } from \"../../../../Meshes/transformNode\";\r\nimport { RegisterClass } from \"../../../../Misc/typeStore\";\r\n\r\nconst ADDNAME = \"FGAddMatrixBlock\";\r\n/**\r\n * Adds two matrices together.\r\n * @experimental\r\n */\r\nexport class FlowGraphAddMatrixBlock extends FlowGraphBinaryOperationBlock<Matrix, Matrix, Matrix> {\r\n    private _cachedMatrix: Matrix = Matrix.Zero();\r\n    constructor(config?: IFlowGraphBlockConfiguration) {\r\n        super(RichTypeMatrix, RichTypeMatrix, RichTypeMatrix, (left, right) => left.addToRef(right, this._cachedMatrix), ADDNAME, config);\r\n    }\r\n}\r\nRegisterClass(ADDNAME, FlowGraphAddMatrixBlock);\r\n\r\nconst ADDNUMBERNAME = \"FGAddMatrixAndNumberBlock\";\r\n/**\r\n * Adds a matrix and a number together.\r\n * @experimental\r\n */\r\nexport class FlowGraphAddMatrixAndNumberBlock extends FlowGraphBinaryOperationBlock<Matrix, number, Matrix> {\r\n    private _cachedArray: Float32Array = new Float32Array(16);\r\n    private _cachedMatrix: Matrix = Matrix.Zero();\r\n    constructor(config?: IFlowGraphBlockConfiguration) {\r\n        super(\r\n            RichTypeMatrix,\r\n            RichTypeNumber,\r\n            RichTypeMatrix,\r\n            (left, right) => {\r\n                for (let i = 0; i < left.m.length; i++) {\r\n                    this._cachedArray[i] = left.m[i] + right;\r\n                }\r\n                return Matrix.FromArrayToRef(this._cachedArray, 0, this._cachedMatrix);\r\n            },\r\n            ADDNUMBERNAME,\r\n            config\r\n        );\r\n    }\r\n}\r\nRegisterClass(ADDNUMBERNAME, FlowGraphAddMatrixAndNumberBlock);\r\n\r\nconst SUBNAME = \"FGSubtractMatrixBlock\";\r\n/**\r\n * Subtracts two matrices.\r\n * @experimental\r\n */\r\nexport class FlowGraphSubtractMatrixBlock extends FlowGraphBinaryOperationBlock<Matrix, Matrix, Matrix> {\r\n    private _cachedMatrix: Matrix = Matrix.Zero();\r\n    constructor(config?: IFlowGraphBlockConfiguration) {\r\n        super(RichTypeMatrix, RichTypeMatrix, RichTypeMatrix, (left, right) => left.addToRef(right.scaleToRef(-1, TmpVectors.Matrix[0]), this._cachedMatrix), SUBNAME, config);\r\n    }\r\n}\r\nRegisterClass(SUBNAME, FlowGraphSubtractMatrixBlock);\r\n\r\nconst SUBNUMBERNAME = \"FGSubtractMatrixAndNumberBlock\";\r\n/**\r\n * Subtracts a matrix and a number together.\r\n * @experimental\r\n */\r\nexport class FlowGraphSubtractMatrixAndNumberBlock extends FlowGraphBinaryOperationBlock<Matrix, number, Matrix> {\r\n    private _cachedArray: Float32Array = new Float32Array(16);\r\n    private _cachedMatrix: Matrix = Matrix.Zero();\r\n    constructor(config?: IFlowGraphBlockConfiguration) {\r\n        super(\r\n            RichTypeMatrix,\r\n            RichTypeNumber,\r\n            RichTypeMatrix,\r\n            (left, right) => {\r\n                for (let i = 0; i < left.m.length; i++) {\r\n                    this._cachedArray[i] = left.m[i] - right;\r\n                }\r\n                return Matrix.FromArrayToRef(this._cachedArray, 0, this._cachedMatrix);\r\n            },\r\n            SUBNUMBERNAME,\r\n            config\r\n        );\r\n    }\r\n}\r\nRegisterClass(SUBNUMBERNAME, FlowGraphSubtractMatrixAndNumberBlock);\r\n\r\nconst MULNAME = \"FGMultiplyMatrixBlock\";\r\n/**\r\n * Multiplies two matrices together.\r\n * @experimental\r\n */\r\nexport class FlowGraphMultiplyMatrixBlock extends FlowGraphBinaryOperationBlock<Matrix, Matrix, Matrix> {\r\n    private _cachedMatrix: Matrix = Matrix.Zero();\r\n    constructor(config?: IFlowGraphBlockConfiguration) {\r\n        super(RichTypeMatrix, RichTypeMatrix, RichTypeMatrix, (left, right) => left.multiplyToRef(right, this._cachedMatrix), MULNAME, config);\r\n    }\r\n}\r\nRegisterClass(MULNAME, FlowGraphMultiplyMatrixBlock);\r\n\r\nconst DIVIDENAME = \"FGDivideMatrixBlock\";\r\n/**\r\n * Divides two matrices.\r\n * @experimental\r\n */\r\nexport class FlowGraphDivideMatrixBlock extends FlowGraphBinaryOperationBlock<Matrix, Matrix, Matrix> {\r\n    private _cachedResultMatrix: Matrix = Matrix.Zero();\r\n    constructor(config?: IFlowGraphBlockConfiguration) {\r\n        super(\r\n            RichTypeMatrix,\r\n            RichTypeMatrix,\r\n            RichTypeMatrix,\r\n            (left, right) => left.multiplyToRef(right.invertToRef(TmpVectors.Matrix[0]), this._cachedResultMatrix),\r\n            DIVIDENAME,\r\n            config\r\n        );\r\n    }\r\n}\r\nRegisterClass(DIVIDENAME, FlowGraphDivideMatrixBlock);\r\n\r\nconst DIVIDENUMBERNAME = \"FGDivideMatrixAndNumberBlock\";\r\n/**\r\n * Divides a matrix and a number together.\r\n * @experimental\r\n */\r\nexport class FlowGraphDivideMatrixAndNumberBlock extends FlowGraphBinaryOperationBlock<Matrix, number, Matrix> {\r\n    private _cachedArray: Float32Array = new Float32Array(16);\r\n    private _cachedMatrix: Matrix = Matrix.Zero();\r\n    constructor(config?: IFlowGraphBlockConfiguration) {\r\n        super(\r\n            RichTypeMatrix,\r\n            RichTypeNumber,\r\n            RichTypeMatrix,\r\n            (left, right) => {\r\n                for (let i = 0; i < left.m.length; i++) {\r\n                    this._cachedArray[i] = left.m[i] / right;\r\n                }\r\n                return Matrix.FromArrayToRef(this._cachedArray, 0, this._cachedMatrix);\r\n            },\r\n            DIVIDENUMBERNAME,\r\n            config\r\n        );\r\n    }\r\n}\r\nRegisterClass(DIVIDENUMBERNAME, FlowGraphDivideMatrixAndNumberBlock);\r\n\r\nconst SCALENAME = \"FGScaleMatrixBlock\";\r\n/**\r\n * Scales a matrix by a number.\r\n * @experimental\r\n */\r\nexport class FlowGraphScaleMatrixBlock extends FlowGraphBinaryOperationBlock<Matrix, number, Matrix> {\r\n    private _cachedMatrix = Matrix.Zero();\r\n    constructor(config?: IFlowGraphBlockConfiguration) {\r\n        super(RichTypeMatrix, RichTypeNumber, RichTypeMatrix, (left, right) => left.scaleToRef(right, this._cachedMatrix), SCALENAME, config);\r\n    }\r\n}\r\nRegisterClass(SCALENAME, FlowGraphScaleMatrixBlock);\r\n\r\nconst CLAMPNAME = \"FGClampMatrixBlock\";\r\n/**\r\n * Clamps each value in a matrix between a minimum and maximum value.\r\n * @experimental\r\n */\r\nexport class FlowGraphClampMatrixBlock extends FlowGraphBlock {\r\n    /**\r\n     * Input connection: The matrix to clamp.\r\n     */\r\n    public readonly input: FlowGraphDataConnection<Matrix>;\r\n    /**\r\n     * Output connection: The clamped matrix.\r\n     */\r\n    public readonly output: FlowGraphDataConnection<Matrix>;\r\n    /**\r\n     * Input connection: The minimum value.\r\n     */\r\n    public readonly min: FlowGraphDataConnection<number>;\r\n    /**\r\n     * Input connection: The maximum value.\r\n     */\r\n    public readonly max: FlowGraphDataConnection<number>;\r\n    private _cachedArray: Float32Array = new Float32Array(16);\r\n    private _cachedMatrix: Matrix = Matrix.Identity();\r\n    constructor(config?: IFlowGraphBlockConfiguration) {\r\n        super(config);\r\n\r\n        this.input = this._registerDataInput(\"input\", RichTypeMatrix);\r\n        this.min = this._registerDataInput(\"min\", RichTypeNumber);\r\n        this.max = this._registerDataInput(\"max\", RichTypeNumber);\r\n        this.output = this._registerDataOutput(\"output\", RichTypeMatrix);\r\n    }\r\n\r\n    public _updateOutputs(_context: FlowGraphContext): void {\r\n        const input = this.input.getValue(_context);\r\n        const min = this.min.getValue(_context);\r\n        const max = this.max.getValue(_context);\r\n\r\n        for (let i = 0; i < input.m.length; i++) {\r\n            this._cachedArray[i] = Math.min(Math.max(input.m[i], min), max);\r\n        }\r\n\r\n        Matrix.FromArrayToRef(this._cachedArray, 0, this._cachedMatrix);\r\n        this.output.setValue(this._cachedMatrix, _context);\r\n    }\r\n\r\n    public getClassName(): string {\r\n        return CLAMPNAME;\r\n    }\r\n}\r\nRegisterClass(CLAMPNAME, FlowGraphClampMatrixBlock);\r\n\r\nconst DECOMPOSENAME = \"FGDecomposeMatrixBlock\";\r\n/**\r\n * Decomposes a matrix into its translation, rotation and scale components.\r\n * @experimental\r\n */\r\nexport class FlowGraphDecomposeMatrixBlock extends FlowGraphBlock {\r\n    /**\r\n     * Input connection: The matrix to decompose.\r\n     */\r\n    public readonly input: FlowGraphDataConnection<Matrix>;\r\n    /**\r\n     * Output connection: The translation component of the matrix.\r\n     */\r\n    public readonly translation: FlowGraphDataConnection<Vector3>;\r\n    /**\r\n     * Output connection: The rotation component of the matrix.\r\n     */\r\n    public readonly rotation: FlowGraphDataConnection<Quaternion>;\r\n    /**\r\n     * Output connection: The scale component of the matrix.\r\n     */\r\n    public readonly scale: FlowGraphDataConnection<Vector3>;\r\n\r\n    private _cachedTranslation = new Vector3();\r\n    private _cachedRotation = new Quaternion();\r\n    private _cachedScale = new Vector3();\r\n\r\n    public constructor(config?: IFlowGraphBlockConfiguration) {\r\n        super(config);\r\n\r\n        this.input = this._registerDataInput(\"input\", RichTypeMatrix);\r\n        this.translation = this._registerDataOutput(\"translation\", RichTypeVector3);\r\n        this.rotation = this._registerDataOutput(\"rotation\", RichTypeQuaternion);\r\n        this.scale = this._registerDataOutput(\"scale\", RichTypeVector3);\r\n    }\r\n\r\n    public _updateOutputs(_context: FlowGraphContext): void {\r\n        const input = this.input.getValue(_context);\r\n\r\n        input.decompose(this._cachedScale, this._cachedRotation, this._cachedTranslation);\r\n\r\n        this.translation.setValue(this._cachedTranslation, _context);\r\n        this.rotation.setValue(this._cachedRotation, _context);\r\n        this.scale.setValue(this._cachedScale, _context);\r\n    }\r\n\r\n    public getClassName(): string {\r\n        return DECOMPOSENAME;\r\n    }\r\n}\r\nRegisterClass(DECOMPOSENAME, FlowGraphDecomposeMatrixBlock);\r\n\r\nconst COMPOSENAME = \"FGComposeMatrixBlock\";\r\n/**\r\n * Composes a matrix from its translation, rotation and scale components.\r\n * @experimental\r\n */\r\nexport class FlowGraphComposeMatrixBlock extends FlowGraphBlock {\r\n    /**\r\n     * Output connection: The matrix to compose.\r\n     */\r\n    public readonly output: FlowGraphDataConnection<Matrix>;\r\n    /**\r\n     * Input connection: The translation component of the matrix.\r\n     */\r\n    public readonly translation: FlowGraphDataConnection<Vector3>;\r\n    /**\r\n     * Input connection: The rotation component of the matrix.\r\n     */\r\n    public readonly rotation: FlowGraphDataConnection<Quaternion>;\r\n    /**\r\n     * Input connection: The scale component of the matrix.\r\n     */\r\n    public readonly scale: FlowGraphDataConnection<Vector3>;\r\n\r\n    private _cachedMatrix = new Matrix();\r\n\r\n    public constructor(config?: IFlowGraphBlockConfiguration) {\r\n        super(config);\r\n\r\n        this.output = this._registerDataOutput(\"input\", RichTypeMatrix);\r\n        this.translation = this._registerDataInput(\"translation\", RichTypeVector3);\r\n        this.rotation = this._registerDataInput(\"rotation\", RichTypeQuaternion);\r\n        this.scale = this._registerDataInput(\"scale\", RichTypeVector3);\r\n    }\r\n\r\n    public _updateOutputs(_context: FlowGraphContext): void {\r\n        const translation = this.translation.getValue(_context);\r\n        const rotation = this.rotation.getValue(_context);\r\n        const scale = this.scale.getValue(_context);\r\n\r\n        Matrix.ComposeToRef(scale, rotation, translation, this._cachedMatrix);\r\n\r\n        this.output.setValue(this._cachedMatrix, _context);\r\n    }\r\n\r\n    public getClassName(): string {\r\n        return COMPOSENAME;\r\n    }\r\n}\r\nRegisterClass(COMPOSENAME, FlowGraphComposeMatrixBlock);\r\n\r\nconst QUATERNIONTOROTNAME = \"FGQuaternionToRotationMatrixBlock\";\r\n/**\r\n * Converts a quaternion to a rotation matrix.\r\n * @experimental\r\n */\r\nexport class FlowGraphQuaternionToRotationMatrixBlock extends FlowGraphUnaryOperationBlock<Quaternion, Matrix> {\r\n    private _cachedMatrix = new Matrix();\r\n    constructor(config?: IFlowGraphBlockConfiguration) {\r\n        super(RichTypeQuaternion, RichTypeMatrix, (value) => Matrix.FromQuaternionToRef(value, this._cachedMatrix), QUATERNIONTOROTNAME, config);\r\n    }\r\n}\r\nRegisterClass(QUATERNIONTOROTNAME, FlowGraphQuaternionToRotationMatrixBlock);\r\n\r\nconst GETTRANSFORMNAME = \"FGGetTransformationMatrixBlock\";\r\n/**\r\n * Given the Transform Nodes A and B, gives the matrix required\r\n * to transform coordinates from A's local space to B's local space.\r\n */\r\nexport class FlowGraphGetTransformationMatrixBlock extends FlowGraphBinaryOperationBlock<TransformNode, TransformNode, Matrix> {\r\n    private _cachedResult: Matrix = Matrix.Zero();\r\n    constructor(config?: IFlowGraphBlockConfiguration) {\r\n        super(\r\n            RichTypeAny,\r\n            RichTypeAny,\r\n            RichTypeMatrix,\r\n            (left: TransformNode, right: TransformNode) => {\r\n                const aMatrix = left.getWorldMatrix();\r\n                const bMatrix = right.getWorldMatrix();\r\n\r\n                const inverseB = bMatrix.invertToRef(TmpVectors.Matrix[0]);\r\n                const result = inverseB.multiplyToRef(aMatrix, this._cachedResult);\r\n                return result;\r\n            },\r\n            GETTRANSFORMNAME,\r\n            config\r\n        );\r\n    }\r\n}\r\nRegisterClass(GETTRANSFORMNAME, FlowGraphGetTransformationMatrixBlock);\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}