{"ast":null,"code":"import \"core-js/modules/es.typed-array.to-reversed.js\";\nimport \"core-js/modules/es.typed-array.to-sorted.js\";\nimport \"core-js/modules/es.typed-array.with.js\";\nimport { ThinEngine } from \"../Engines/thinEngine.js\";\nimport { EffectRenderer, EffectWrapper } from \"../Materials/effectRenderer.js\";\nimport { Tools } from \"./tools.js\";\nimport { passPixelShader } from \"../Shaders/pass.fragment.js\";\nimport { Scalar } from \"../Maths/math.scalar.js\";\n/**\n * Class containing a set of static utilities functions to dump data from a canvas\n */\nexport class DumpTools {\n  static _CreateDumpRenderer() {\n    if (!DumpTools._DumpToolsEngine) {\n      let canvas;\n      let engine = null;\n      const options = {\n        preserveDrawingBuffer: true,\n        depth: false,\n        stencil: false,\n        alpha: true,\n        premultipliedAlpha: false,\n        antialias: false,\n        failIfMajorPerformanceCaveat: false\n      };\n      try {\n        canvas = new OffscreenCanvas(100, 100); // will be resized later\n        engine = new ThinEngine(canvas, false, options);\n      } catch (e) {\n        // The browser either does not support OffscreenCanvas or WebGL context in OffscreenCanvas, fallback on a regular canvas\n        canvas = document.createElement(\"canvas\");\n        engine = new ThinEngine(canvas, false, options);\n      }\n      engine.getCaps().parallelShaderCompile = undefined;\n      const renderer = new EffectRenderer(engine);\n      const wrapper = new EffectWrapper({\n        engine,\n        name: passPixelShader.name,\n        fragmentShader: passPixelShader.shader,\n        samplerNames: [\"textureSampler\"]\n      });\n      DumpTools._DumpToolsEngine = {\n        canvas,\n        engine,\n        renderer,\n        wrapper\n      };\n    }\n    return DumpTools._DumpToolsEngine;\n  }\n  /**\n   * Dumps the current bound framebuffer\n   * @param width defines the rendering width\n   * @param height defines the rendering height\n   * @param engine defines the hosting engine\n   * @param successCallback defines the callback triggered once the data are available\n   * @param mimeType defines the mime type of the result\n   * @param fileName defines the filename to download. If present, the result will automatically be downloaded\n   * @param quality The quality of the image if lossy mimeType is used (e.g. image/jpeg, image/webp). See {@link https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement/toBlob | HTMLCanvasElement.toBlob()}'s `quality` parameter.\n   * @returns a void promise\n   */\n  static async DumpFramebuffer(width, height, engine, successCallback, mimeType = \"image/png\", fileName, quality) {\n    // Read the contents of the framebuffer\n    const bufferView = await engine.readPixels(0, 0, width, height);\n    const data = new Uint8Array(bufferView.buffer);\n    DumpTools.DumpData(width, height, data, successCallback, mimeType, fileName, true, undefined, quality);\n  }\n  /**\n   * Dumps an array buffer\n   * @param width defines the rendering width\n   * @param height defines the rendering height\n   * @param data the data array\n   * @param mimeType defines the mime type of the result\n   * @param fileName defines the filename to download. If present, the result will automatically be downloaded\n   * @param invertY true to invert the picture in the Y dimension\n   * @param toArrayBuffer true to convert the data to an ArrayBuffer (encoded as `mimeType`) instead of a base64 string\n   * @param quality The quality of the image if lossy mimeType is used (e.g. image/jpeg, image/webp). See {@link https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement/toBlob | HTMLCanvasElement.toBlob()}'s `quality` parameter.\n   * @returns a promise that resolve to the final data\n   */\n  static DumpDataAsync(width, height, data, mimeType = \"image/png\", fileName, invertY = false, toArrayBuffer = false, quality) {\n    return new Promise(resolve => {\n      DumpTools.DumpData(width, height, data, result => resolve(result), mimeType, fileName, invertY, toArrayBuffer, quality);\n    });\n  }\n  /**\n   * Dumps an array buffer\n   * @param width defines the rendering width\n   * @param height defines the rendering height\n   * @param data the data array\n   * @param successCallback defines the callback triggered once the data are available\n   * @param mimeType defines the mime type of the result\n   * @param fileName defines the filename to download. If present, the result will automatically be downloaded\n   * @param invertY true to invert the picture in the Y dimension\n   * @param toArrayBuffer true to convert the data to an ArrayBuffer (encoded as `mimeType`) instead of a base64 string\n   * @param quality The quality of the image if lossy mimeType is used (e.g. image/jpeg, image/webp). See {@link https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement/toBlob | HTMLCanvasElement.toBlob()}'s `quality` parameter.\n   */\n  static DumpData(width, height, data, successCallback, mimeType = \"image/png\", fileName, invertY = false, toArrayBuffer = false, quality) {\n    const renderer = DumpTools._CreateDumpRenderer();\n    renderer.engine.setSize(width, height, true);\n    // Convert if data are float32\n    if (data instanceof Float32Array) {\n      const data2 = new Uint8Array(data.length);\n      let n = data.length;\n      while (n--) {\n        const v = data[n];\n        data2[n] = Math.round(Scalar.Clamp(v) * 255);\n      }\n      data = data2;\n    }\n    // Create the image\n    const texture = renderer.engine.createRawTexture(data, width, height, 5, false, !invertY, 1);\n    renderer.renderer.setViewport();\n    renderer.renderer.applyEffectWrapper(renderer.wrapper);\n    renderer.wrapper.effect._bindTexture(\"textureSampler\", texture);\n    renderer.renderer.draw();\n    if (toArrayBuffer) {\n      Tools.ToBlob(renderer.canvas, blob => {\n        const fileReader = new FileReader();\n        fileReader.onload = event => {\n          const arrayBuffer = event.target.result;\n          if (successCallback) {\n            successCallback(arrayBuffer);\n          }\n        };\n        fileReader.readAsArrayBuffer(blob);\n      }, mimeType, quality);\n    } else {\n      Tools.EncodeScreenshotCanvasData(renderer.canvas, successCallback, mimeType, fileName, quality);\n    }\n    texture.dispose();\n  }\n  /**\n   * Dispose the dump tools associated resources\n   */\n  static Dispose() {\n    if (DumpTools._DumpToolsEngine) {\n      DumpTools._DumpToolsEngine.wrapper.dispose();\n      DumpTools._DumpToolsEngine.renderer.dispose();\n      DumpTools._DumpToolsEngine.engine.dispose();\n    }\n    DumpTools._DumpToolsEngine = null;\n  }\n}\n/**\n * This will be executed automatically for UMD and es5.\n * If esm dev wants the side effects to execute they will have to run it manually\n * Once we build native modules those need to be exported.\n * @internal\n */\nconst initSideEffects = () => {\n  // References the dependencies.\n  Tools.DumpData = DumpTools.DumpData;\n  Tools.DumpDataAsync = DumpTools.DumpDataAsync;\n  Tools.DumpFramebuffer = DumpTools.DumpFramebuffer;\n};\ninitSideEffects();","map":{"version":3,"names":["ThinEngine","EffectRenderer","EffectWrapper","Tools","passPixelShader","Scalar","DumpTools","_CreateDumpRenderer","_DumpToolsEngine","canvas","engine","options","preserveDrawingBuffer","depth","stencil","alpha","premultipliedAlpha","antialias","failIfMajorPerformanceCaveat","OffscreenCanvas","e","document","createElement","getCaps","parallelShaderCompile","undefined","renderer","wrapper","name","fragmentShader","shader","samplerNames","DumpFramebuffer","width","height","successCallback","mimeType","fileName","quality","bufferView","readPixels","data","Uint8Array","buffer","DumpData","DumpDataAsync","invertY","toArrayBuffer","Promise","resolve","result","setSize","Float32Array","data2","length","n","v","Math","round","Clamp","texture","createRawTexture","setViewport","applyEffectWrapper","effect","_bindTexture","draw","ToBlob","blob","fileReader","FileReader","onload","event","arrayBuffer","target","readAsArrayBuffer","EncodeScreenshotCanvasData","dispose","Dispose","initSideEffects"],"sources":["../../../../dev/core/src/Misc/dumpTools.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-unused-vars */\r\nimport { _WarnImport } from \"./devTools\";\r\nimport type { Engine } from \"../Engines/engine\";\r\n\r\nimport { ThinEngine } from \"../Engines/thinEngine\";\r\nimport { Constants } from \"../Engines/constants\";\r\nimport { EffectRenderer, EffectWrapper } from \"../Materials/effectRenderer\";\r\nimport { Tools } from \"./tools\";\r\nimport type { Nullable } from \"../types\";\r\n\r\nimport { passPixelShader } from \"../Shaders/pass.fragment\";\r\nimport { Scalar } from \"../Maths/math.scalar\";\r\n\r\ntype DumpToolsEngine = {\r\n    canvas: HTMLCanvasElement | OffscreenCanvas;\r\n    engine: ThinEngine;\r\n    renderer: EffectRenderer;\r\n    wrapper: EffectWrapper;\r\n};\r\n\r\n/**\r\n * Class containing a set of static utilities functions to dump data from a canvas\r\n */\r\nexport class DumpTools {\r\n    private static _DumpToolsEngine: Nullable<DumpToolsEngine>;\r\n\r\n    private static _CreateDumpRenderer(): DumpToolsEngine {\r\n        if (!DumpTools._DumpToolsEngine) {\r\n            let canvas: HTMLCanvasElement | OffscreenCanvas;\r\n            let engine: Nullable<ThinEngine> = null;\r\n            const options = {\r\n                preserveDrawingBuffer: true,\r\n                depth: false,\r\n                stencil: false,\r\n                alpha: true,\r\n                premultipliedAlpha: false,\r\n                antialias: false,\r\n                failIfMajorPerformanceCaveat: false,\r\n            };\r\n            try {\r\n                canvas = new OffscreenCanvas(100, 100); // will be resized later\r\n                engine = new ThinEngine(canvas, false, options);\r\n            } catch (e) {\r\n                // The browser either does not support OffscreenCanvas or WebGL context in OffscreenCanvas, fallback on a regular canvas\r\n                canvas = document.createElement(\"canvas\");\r\n                engine = new ThinEngine(canvas, false, options);\r\n            }\r\n            engine.getCaps().parallelShaderCompile = undefined;\r\n            const renderer = new EffectRenderer(engine);\r\n            const wrapper = new EffectWrapper({\r\n                engine,\r\n                name: passPixelShader.name,\r\n                fragmentShader: passPixelShader.shader,\r\n                samplerNames: [\"textureSampler\"],\r\n            });\r\n            DumpTools._DumpToolsEngine = {\r\n                canvas,\r\n                engine,\r\n                renderer,\r\n                wrapper,\r\n            };\r\n        }\r\n        return DumpTools._DumpToolsEngine!;\r\n    }\r\n\r\n    /**\r\n     * Dumps the current bound framebuffer\r\n     * @param width defines the rendering width\r\n     * @param height defines the rendering height\r\n     * @param engine defines the hosting engine\r\n     * @param successCallback defines the callback triggered once the data are available\r\n     * @param mimeType defines the mime type of the result\r\n     * @param fileName defines the filename to download. If present, the result will automatically be downloaded\r\n     * @param quality The quality of the image if lossy mimeType is used (e.g. image/jpeg, image/webp). See {@link https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement/toBlob | HTMLCanvasElement.toBlob()}'s `quality` parameter.\r\n     * @returns a void promise\r\n     */\r\n    public static async DumpFramebuffer(\r\n        width: number,\r\n        height: number,\r\n        engine: Engine,\r\n        successCallback?: (data: string) => void,\r\n        mimeType = \"image/png\",\r\n        fileName?: string,\r\n        quality?: number\r\n    ) {\r\n        // Read the contents of the framebuffer\r\n        const bufferView = await engine.readPixels(0, 0, width, height);\r\n\r\n        const data = new Uint8Array(bufferView.buffer);\r\n\r\n        DumpTools.DumpData(width, height, data, successCallback as (data: string | ArrayBuffer) => void, mimeType, fileName, true, undefined, quality);\r\n    }\r\n\r\n    /**\r\n     * Dumps an array buffer\r\n     * @param width defines the rendering width\r\n     * @param height defines the rendering height\r\n     * @param data the data array\r\n     * @param mimeType defines the mime type of the result\r\n     * @param fileName defines the filename to download. If present, the result will automatically be downloaded\r\n     * @param invertY true to invert the picture in the Y dimension\r\n     * @param toArrayBuffer true to convert the data to an ArrayBuffer (encoded as `mimeType`) instead of a base64 string\r\n     * @param quality The quality of the image if lossy mimeType is used (e.g. image/jpeg, image/webp). See {@link https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement/toBlob | HTMLCanvasElement.toBlob()}'s `quality` parameter.\r\n     * @returns a promise that resolve to the final data\r\n     */\r\n    public static DumpDataAsync(\r\n        width: number,\r\n        height: number,\r\n        data: ArrayBufferView,\r\n        mimeType = \"image/png\",\r\n        fileName?: string,\r\n        invertY = false,\r\n        toArrayBuffer = false,\r\n        quality?: number\r\n    ): Promise<string | ArrayBuffer> {\r\n        return new Promise((resolve) => {\r\n            DumpTools.DumpData(width, height, data, (result) => resolve(result), mimeType, fileName, invertY, toArrayBuffer, quality);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Dumps an array buffer\r\n     * @param width defines the rendering width\r\n     * @param height defines the rendering height\r\n     * @param data the data array\r\n     * @param successCallback defines the callback triggered once the data are available\r\n     * @param mimeType defines the mime type of the result\r\n     * @param fileName defines the filename to download. If present, the result will automatically be downloaded\r\n     * @param invertY true to invert the picture in the Y dimension\r\n     * @param toArrayBuffer true to convert the data to an ArrayBuffer (encoded as `mimeType`) instead of a base64 string\r\n     * @param quality The quality of the image if lossy mimeType is used (e.g. image/jpeg, image/webp). See {@link https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement/toBlob | HTMLCanvasElement.toBlob()}'s `quality` parameter.\r\n     */\r\n    public static DumpData(\r\n        width: number,\r\n        height: number,\r\n        data: ArrayBufferView,\r\n        successCallback?: (data: string | ArrayBuffer) => void,\r\n        mimeType = \"image/png\",\r\n        fileName?: string,\r\n        invertY = false,\r\n        toArrayBuffer = false,\r\n        quality?: number\r\n    ) {\r\n        const renderer = DumpTools._CreateDumpRenderer();\r\n        renderer.engine.setSize(width, height, true);\r\n\r\n        // Convert if data are float32\r\n        if (data instanceof Float32Array) {\r\n            const data2 = new Uint8Array(data.length);\r\n            let n = data.length;\r\n            while (n--) {\r\n                const v = data[n];\r\n                data2[n] = Math.round(Scalar.Clamp(v) * 255);\r\n            }\r\n            data = data2;\r\n        }\r\n\r\n        // Create the image\r\n        const texture = renderer.engine.createRawTexture(data, width, height, Constants.TEXTUREFORMAT_RGBA, false, !invertY, Constants.TEXTURE_NEAREST_NEAREST);\r\n\r\n        renderer.renderer.setViewport();\r\n        renderer.renderer.applyEffectWrapper(renderer.wrapper);\r\n        renderer.wrapper.effect._bindTexture(\"textureSampler\", texture);\r\n        renderer.renderer.draw();\r\n\r\n        if (toArrayBuffer) {\r\n            Tools.ToBlob(\r\n                renderer.canvas,\r\n                (blob) => {\r\n                    const fileReader = new FileReader();\r\n                    fileReader.onload = (event: any) => {\r\n                        const arrayBuffer = event.target!.result as ArrayBuffer;\r\n                        if (successCallback) {\r\n                            successCallback(arrayBuffer);\r\n                        }\r\n                    };\r\n                    fileReader.readAsArrayBuffer(blob!);\r\n                },\r\n                mimeType,\r\n                quality\r\n            );\r\n        } else {\r\n            Tools.EncodeScreenshotCanvasData(renderer.canvas, successCallback, mimeType, fileName, quality);\r\n        }\r\n\r\n        texture.dispose();\r\n    }\r\n\r\n    /**\r\n     * Dispose the dump tools associated resources\r\n     */\r\n    public static Dispose() {\r\n        if (DumpTools._DumpToolsEngine) {\r\n            DumpTools._DumpToolsEngine.wrapper.dispose();\r\n            DumpTools._DumpToolsEngine.renderer.dispose();\r\n            DumpTools._DumpToolsEngine.engine.dispose();\r\n        }\r\n        DumpTools._DumpToolsEngine = null;\r\n    }\r\n}\r\n\r\n/**\r\n * This will be executed automatically for UMD and es5.\r\n * If esm dev wants the side effects to execute they will have to run it manually\r\n * Once we build native modules those need to be exported.\r\n * @internal\r\n */\r\nconst initSideEffects = () => {\r\n    // References the dependencies.\r\n    Tools.DumpData = DumpTools.DumpData;\r\n    Tools.DumpDataAsync = DumpTools.DumpDataAsync;\r\n    Tools.DumpFramebuffer = DumpTools.DumpFramebuffer;\r\n};\r\n\r\ninitSideEffects();\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}