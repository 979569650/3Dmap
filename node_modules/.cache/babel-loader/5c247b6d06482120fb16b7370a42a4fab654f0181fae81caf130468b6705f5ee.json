{"ast":null,"code":"import { Observable } from \"../Misc/observable.js\";\nimport { TransformNode } from \"../Meshes/transformNode.js\";\nimport { Mesh } from \"../Meshes/mesh.js\";\nimport { CreateCylinder } from \"../Meshes/Builders/cylinderBuilder.js\";\nimport { PointerDragBehavior } from \"../Behaviors/Meshes/pointerDragBehavior.js\";\nimport { Gizmo } from \"./gizmo.js\";\nimport { UtilityLayerRenderer } from \"../Rendering/utilityLayerRenderer.js\";\nimport { StandardMaterial } from \"../Materials/standardMaterial.js\";\nimport { Color3 } from \"../Maths/math.color.js\";\nimport { TmpVectors } from \"../Maths/math.vector.js\";\n/**\n * Single axis drag gizmo\n */\nexport class AxisDragGizmo extends Gizmo {\n  /** Default material used to render when gizmo is not disabled or hovered */\n  get coloredMaterial() {\n    return this._coloredMaterial;\n  }\n  /** Material used to render when gizmo is hovered with mouse*/\n  get hoverMaterial() {\n    return this._hoverMaterial;\n  }\n  /** Material used to render when gizmo is disabled. typically grey.*/\n  get disableMaterial() {\n    return this._disableMaterial;\n  }\n  /**\n   * @internal\n   */\n  static _CreateArrow(scene, material, thickness = 1, isCollider = false) {\n    const arrow = new TransformNode(\"arrow\", scene);\n    const cylinder = CreateCylinder(\"cylinder\", {\n      diameterTop: 0,\n      height: 0.075,\n      diameterBottom: 0.0375 * (1 + (thickness - 1) / 4),\n      tessellation: 96\n    }, scene);\n    const line = CreateCylinder(\"cylinder\", {\n      diameterTop: 0.005 * thickness,\n      height: 0.275,\n      diameterBottom: 0.005 * thickness,\n      tessellation: 96\n    }, scene);\n    // Position arrow pointing in its drag axis\n    cylinder.parent = arrow;\n    cylinder.material = material;\n    cylinder.rotation.x = Math.PI / 2;\n    cylinder.position.z += 0.3;\n    line.parent = arrow;\n    line.material = material;\n    line.position.z += 0.275 / 2;\n    line.rotation.x = Math.PI / 2;\n    if (isCollider) {\n      line.visibility = 0;\n      cylinder.visibility = 0;\n    }\n    return arrow;\n  }\n  /**\n   * @internal\n   */\n  static _CreateArrowInstance(scene, arrow) {\n    const instance = new TransformNode(\"arrow\", scene);\n    for (const mesh of arrow.getChildMeshes()) {\n      const childInstance = mesh.createInstance(mesh.name);\n      childInstance.parent = instance;\n    }\n    return instance;\n  }\n  /**\n   * Creates an AxisDragGizmo\n   * @param dragAxis The axis which the gizmo will be able to drag on\n   * @param color The color of the gizmo\n   * @param gizmoLayer The utility layer the gizmo will be added to\n   * @param parent\n   * @param thickness display gizmo axis thickness\n   */\n  constructor(dragAxis, color = Color3.Gray(), gizmoLayer = UtilityLayerRenderer.DefaultUtilityLayer, parent = null, thickness = 1) {\n    var _a;\n    super(gizmoLayer);\n    this._pointerObserver = null;\n    /**\n     * Drag distance in babylon units that the gizmo will snap to when dragged (Default: 0)\n     */\n    this.snapDistance = 0;\n    /**\n     * Event that fires each time the gizmo snaps to a new location.\n     * * snapDistance is the the change in distance\n     */\n    this.onSnapObservable = new Observable();\n    this._isEnabled = true;\n    this._parent = null;\n    this._dragging = false;\n    this._parent = parent;\n    // Create Material\n    this._coloredMaterial = new StandardMaterial(\"\", gizmoLayer.utilityLayerScene);\n    this._coloredMaterial.diffuseColor = color;\n    this._coloredMaterial.specularColor = color.subtract(new Color3(0.1, 0.1, 0.1));\n    this._hoverMaterial = new StandardMaterial(\"\", gizmoLayer.utilityLayerScene);\n    this._hoverMaterial.diffuseColor = Color3.Yellow();\n    this._disableMaterial = new StandardMaterial(\"\", gizmoLayer.utilityLayerScene);\n    this._disableMaterial.diffuseColor = Color3.Gray();\n    this._disableMaterial.alpha = 0.4;\n    // Build Mesh + Collider\n    const arrow = AxisDragGizmo._CreateArrow(gizmoLayer.utilityLayerScene, this._coloredMaterial, thickness);\n    const collider = AxisDragGizmo._CreateArrow(gizmoLayer.utilityLayerScene, this._coloredMaterial, thickness + 4, true);\n    // Add to Root Node\n    this._gizmoMesh = new Mesh(\"\", gizmoLayer.utilityLayerScene);\n    this._gizmoMesh.addChild(arrow);\n    this._gizmoMesh.addChild(collider);\n    this._gizmoMesh.lookAt(this._rootMesh.position.add(dragAxis));\n    this._gizmoMesh.scaling.scaleInPlace(1 / 3);\n    this._gizmoMesh.parent = this._rootMesh;\n    let currentSnapDragDistance = 0;\n    const tmpSnapEvent = {\n      snapDistance: 0\n    };\n    // Add drag behavior to handle events when the gizmo is dragged\n    this.dragBehavior = new PointerDragBehavior({\n      dragAxis: dragAxis\n    });\n    this.dragBehavior.moveAttached = false;\n    this.dragBehavior.updateDragPlane = false;\n    this._rootMesh.addBehavior(this.dragBehavior);\n    this.dragBehavior.onDragObservable.add(event => {\n      if (this.attachedNode) {\n        // Keep world translation and use it to update world transform\n        // if the node has parent, the local transform properties (position, rotation, scale)\n        // will be recomputed in _matrixChanged function\n        let matrixChanged = false;\n        // Snapping logic\n        if (this.snapDistance == 0) {\n          this.attachedNode.getWorldMatrix().getTranslationToRef(TmpVectors.Vector3[2]);\n          TmpVectors.Vector3[2].addInPlace(event.delta);\n          if (this.dragBehavior.validateDrag(TmpVectors.Vector3[2])) {\n            if (this.attachedNode.position) {\n              // Required for nodes like lights\n              this.attachedNode.position.addInPlaceFromFloats(event.delta.x, event.delta.y, event.delta.z);\n            }\n            // use _worldMatrix to not force a matrix update when calling GetWorldMatrix especially with Cameras\n            this.attachedNode.getWorldMatrix().addTranslationFromFloats(event.delta.x, event.delta.y, event.delta.z);\n            this.attachedNode.updateCache();\n            matrixChanged = true;\n          }\n        } else {\n          currentSnapDragDistance += event.dragDistance;\n          if (Math.abs(currentSnapDragDistance) > this.snapDistance) {\n            const dragSteps = Math.floor(Math.abs(currentSnapDragDistance) / this.snapDistance);\n            currentSnapDragDistance = currentSnapDragDistance % this.snapDistance;\n            event.delta.normalizeToRef(TmpVectors.Vector3[1]);\n            TmpVectors.Vector3[1].scaleInPlace(this.snapDistance * dragSteps);\n            this.attachedNode.getWorldMatrix().getTranslationToRef(TmpVectors.Vector3[2]);\n            TmpVectors.Vector3[2].addInPlace(TmpVectors.Vector3[1]);\n            if (this.dragBehavior.validateDrag(TmpVectors.Vector3[2])) {\n              this.attachedNode.getWorldMatrix().addTranslationFromFloats(TmpVectors.Vector3[1].x, TmpVectors.Vector3[1].y, TmpVectors.Vector3[1].z);\n              this.attachedNode.updateCache();\n              tmpSnapEvent.snapDistance = this.snapDistance * dragSteps;\n              this.onSnapObservable.notifyObservers(tmpSnapEvent);\n              matrixChanged = true;\n            }\n          }\n        }\n        if (matrixChanged) {\n          this._matrixChanged();\n        }\n      }\n    });\n    this.dragBehavior.onDragStartObservable.add(() => {\n      this._dragging = true;\n    });\n    this.dragBehavior.onDragEndObservable.add(() => {\n      this._dragging = false;\n    });\n    const light = gizmoLayer._getSharedGizmoLight();\n    light.includedOnlyMeshes = light.includedOnlyMeshes.concat(this._rootMesh.getChildMeshes(false));\n    const cache = {\n      gizmoMeshes: arrow.getChildMeshes(),\n      colliderMeshes: collider.getChildMeshes(),\n      material: this._coloredMaterial,\n      hoverMaterial: this._hoverMaterial,\n      disableMaterial: this._disableMaterial,\n      active: false,\n      dragBehavior: this.dragBehavior\n    };\n    (_a = this._parent) === null || _a === void 0 ? void 0 : _a.addToAxisCache(collider, cache);\n    this._pointerObserver = gizmoLayer.utilityLayerScene.onPointerObservable.add(pointerInfo => {\n      var _a;\n      if (this._customMeshSet) {\n        return;\n      }\n      this._isHovered = !!(cache.colliderMeshes.indexOf((_a = pointerInfo === null || pointerInfo === void 0 ? void 0 : pointerInfo.pickInfo) === null || _a === void 0 ? void 0 : _a.pickedMesh) != -1);\n      if (!this._parent) {\n        const material = this.dragBehavior.enabled ? this._isHovered || this._dragging ? this._hoverMaterial : this._coloredMaterial : this._disableMaterial;\n        this._setGizmoMeshMaterial(cache.gizmoMeshes, material);\n      }\n    });\n    this.dragBehavior.onEnabledObservable.add(newState => {\n      this._setGizmoMeshMaterial(cache.gizmoMeshes, newState ? cache.material : cache.disableMaterial);\n    });\n  }\n  _attachedNodeChanged(value) {\n    if (this.dragBehavior) {\n      this.dragBehavior.enabled = value ? true : false;\n    }\n  }\n  /**\n   * If the gizmo is enabled\n   */\n  set isEnabled(value) {\n    this._isEnabled = value;\n    if (!value) {\n      this.attachedMesh = null;\n      this.attachedNode = null;\n    } else {\n      if (this._parent) {\n        this.attachedMesh = this._parent.attachedMesh;\n        this.attachedNode = this._parent.attachedNode;\n      }\n    }\n  }\n  get isEnabled() {\n    return this._isEnabled;\n  }\n  /**\n   * Disposes of the gizmo\n   */\n  dispose() {\n    this.onSnapObservable.clear();\n    this.gizmoLayer.utilityLayerScene.onPointerObservable.remove(this._pointerObserver);\n    this.dragBehavior.detach();\n    if (this._gizmoMesh) {\n      this._gizmoMesh.dispose();\n    }\n    [this._coloredMaterial, this._hoverMaterial, this._disableMaterial].forEach(matl => {\n      if (matl) {\n        matl.dispose();\n      }\n    });\n    super.dispose();\n  }\n}","map":{"version":3,"names":["Observable","TransformNode","Mesh","CreateCylinder","PointerDragBehavior","Gizmo","UtilityLayerRenderer","StandardMaterial","Color3","TmpVectors","AxisDragGizmo","coloredMaterial","_coloredMaterial","hoverMaterial","_hoverMaterial","disableMaterial","_disableMaterial","_CreateArrow","scene","material","thickness","isCollider","arrow","cylinder","diameterTop","height","diameterBottom","tessellation","line","parent","rotation","x","Math","PI","position","z","visibility","_CreateArrowInstance","instance","mesh","getChildMeshes","childInstance","createInstance","name","constructor","dragAxis","color","Gray","gizmoLayer","DefaultUtilityLayer","_pointerObserver","snapDistance","onSnapObservable","_isEnabled","_parent","_dragging","utilityLayerScene","diffuseColor","specularColor","subtract","Yellow","alpha","collider","_gizmoMesh","addChild","lookAt","_rootMesh","add","scaling","scaleInPlace","currentSnapDragDistance","tmpSnapEvent","dragBehavior","moveAttached","updateDragPlane","addBehavior","onDragObservable","event","attachedNode","matrixChanged","getWorldMatrix","getTranslationToRef","Vector3","addInPlace","delta","validateDrag","addInPlaceFromFloats","y","addTranslationFromFloats","updateCache","dragDistance","abs","dragSteps","floor","normalizeToRef","notifyObservers","_matrixChanged","onDragStartObservable","onDragEndObservable","light","_getSharedGizmoLight","includedOnlyMeshes","concat","cache","gizmoMeshes","colliderMeshes","active","_a","addToAxisCache","onPointerObservable","pointerInfo","_customMeshSet","_isHovered","indexOf","pickInfo","pickedMesh","enabled","_setGizmoMeshMaterial","onEnabledObservable","newState","_attachedNodeChanged","value","isEnabled","attachedMesh","dispose","clear","remove","detach","forEach","matl"],"sources":["../../../../dev/core/src/Gizmos/axisDragGizmo.ts"],"sourcesContent":["import type { Observer } from \"../Misc/observable\";\r\nimport { Observable } from \"../Misc/observable\";\r\nimport type { Nullable } from \"../types\";\r\nimport type { PointerInfo } from \"../Events/pointerEvents\";\r\nimport type { Vector3 } from \"../Maths/math.vector\";\r\nimport { TransformNode } from \"../Meshes/transformNode\";\r\nimport type { Node } from \"../node\";\r\nimport { Mesh } from \"../Meshes/mesh\";\r\nimport { CreateCylinder } from \"../Meshes/Builders/cylinderBuilder\";\r\nimport { PointerDragBehavior } from \"../Behaviors/Meshes/pointerDragBehavior\";\r\nimport type { GizmoAxisCache, IGizmo } from \"./gizmo\";\r\nimport { Gizmo } from \"./gizmo\";\r\nimport { UtilityLayerRenderer } from \"../Rendering/utilityLayerRenderer\";\r\nimport { StandardMaterial } from \"../Materials/standardMaterial\";\r\nimport type { Scene } from \"../scene\";\r\nimport type { PositionGizmo } from \"./positionGizmo\";\r\nimport { Color3 } from \"../Maths/math.color\";\r\nimport { TmpVectors } from \"../Maths/math.vector\";\r\n/**\r\n * Interface for axis drag gizmo\r\n */\r\nexport interface IAxisDragGizmo extends IGizmo {\r\n    /** Drag behavior responsible for the gizmos dragging interactions */\r\n    dragBehavior: PointerDragBehavior;\r\n    /** Drag distance in babylon units that the gizmo will snap to when dragged */\r\n    snapDistance: number;\r\n    /**\r\n     * Event that fires each time the gizmo snaps to a new location.\r\n     * * snapDistance is the change in distance\r\n     */\r\n    onSnapObservable: Observable<{ snapDistance: number }>;\r\n    /** If the gizmo is enabled */\r\n    isEnabled: boolean;\r\n\r\n    /** Default material used to render when gizmo is not disabled or hovered */\r\n    coloredMaterial: StandardMaterial;\r\n    /** Material used to render when gizmo is hovered with mouse*/\r\n    hoverMaterial: StandardMaterial;\r\n    /** Material used to render when gizmo is disabled. typically grey.*/\r\n    disableMaterial: StandardMaterial;\r\n}\r\n\r\n/**\r\n * Single axis drag gizmo\r\n */\r\nexport class AxisDragGizmo extends Gizmo implements IAxisDragGizmo {\r\n    /**\r\n     * Drag behavior responsible for the gizmos dragging interactions\r\n     */\r\n    public dragBehavior: PointerDragBehavior;\r\n    protected _pointerObserver: Nullable<Observer<PointerInfo>> = null;\r\n    /**\r\n     * Drag distance in babylon units that the gizmo will snap to when dragged (Default: 0)\r\n     */\r\n    public snapDistance = 0;\r\n    /**\r\n     * Event that fires each time the gizmo snaps to a new location.\r\n     * * snapDistance is the the change in distance\r\n     */\r\n    public onSnapObservable = new Observable<{ snapDistance: number }>();\r\n\r\n    protected _isEnabled: boolean = true;\r\n    protected _parent: Nullable<PositionGizmo> = null;\r\n\r\n    protected _gizmoMesh: Mesh;\r\n    protected _coloredMaterial: StandardMaterial;\r\n    protected _hoverMaterial: StandardMaterial;\r\n    protected _disableMaterial: StandardMaterial;\r\n    protected _dragging: boolean = false;\r\n\r\n    /** Default material used to render when gizmo is not disabled or hovered */\r\n    public get coloredMaterial() {\r\n        return this._coloredMaterial;\r\n    }\r\n\r\n    /** Material used to render when gizmo is hovered with mouse*/\r\n    public get hoverMaterial() {\r\n        return this._hoverMaterial;\r\n    }\r\n\r\n    /** Material used to render when gizmo is disabled. typically grey.*/\r\n    public get disableMaterial() {\r\n        return this._disableMaterial;\r\n    }\r\n    /**\r\n     * @internal\r\n     */\r\n    public static _CreateArrow(scene: Scene, material: StandardMaterial, thickness: number = 1, isCollider = false): TransformNode {\r\n        const arrow = new TransformNode(\"arrow\", scene);\r\n        const cylinder = CreateCylinder(\"cylinder\", { diameterTop: 0, height: 0.075, diameterBottom: 0.0375 * (1 + (thickness - 1) / 4), tessellation: 96 }, scene);\r\n        const line = CreateCylinder(\"cylinder\", { diameterTop: 0.005 * thickness, height: 0.275, diameterBottom: 0.005 * thickness, tessellation: 96 }, scene);\r\n\r\n        // Position arrow pointing in its drag axis\r\n        cylinder.parent = arrow;\r\n        cylinder.material = material;\r\n        cylinder.rotation.x = Math.PI / 2;\r\n        cylinder.position.z += 0.3;\r\n\r\n        line.parent = arrow;\r\n        line.material = material;\r\n        line.position.z += 0.275 / 2;\r\n        line.rotation.x = Math.PI / 2;\r\n\r\n        if (isCollider) {\r\n            line.visibility = 0;\r\n            cylinder.visibility = 0;\r\n        }\r\n        return arrow;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public static _CreateArrowInstance(scene: Scene, arrow: TransformNode): TransformNode {\r\n        const instance = new TransformNode(\"arrow\", scene);\r\n        for (const mesh of arrow.getChildMeshes()) {\r\n            const childInstance = (mesh as Mesh).createInstance(mesh.name);\r\n            childInstance.parent = instance;\r\n        }\r\n        return instance;\r\n    }\r\n\r\n    /**\r\n     * Creates an AxisDragGizmo\r\n     * @param dragAxis The axis which the gizmo will be able to drag on\r\n     * @param color The color of the gizmo\r\n     * @param gizmoLayer The utility layer the gizmo will be added to\r\n     * @param parent\r\n     * @param thickness display gizmo axis thickness\r\n     */\r\n    constructor(\r\n        dragAxis: Vector3,\r\n        color: Color3 = Color3.Gray(),\r\n        gizmoLayer: UtilityLayerRenderer = UtilityLayerRenderer.DefaultUtilityLayer,\r\n        parent: Nullable<PositionGizmo> = null,\r\n        thickness: number = 1\r\n    ) {\r\n        super(gizmoLayer);\r\n        this._parent = parent;\r\n\r\n        // Create Material\r\n        this._coloredMaterial = new StandardMaterial(\"\", gizmoLayer.utilityLayerScene);\r\n        this._coloredMaterial.diffuseColor = color;\r\n        this._coloredMaterial.specularColor = color.subtract(new Color3(0.1, 0.1, 0.1));\r\n\r\n        this._hoverMaterial = new StandardMaterial(\"\", gizmoLayer.utilityLayerScene);\r\n        this._hoverMaterial.diffuseColor = Color3.Yellow();\r\n\r\n        this._disableMaterial = new StandardMaterial(\"\", gizmoLayer.utilityLayerScene);\r\n        this._disableMaterial.diffuseColor = Color3.Gray();\r\n        this._disableMaterial.alpha = 0.4;\r\n\r\n        // Build Mesh + Collider\r\n        const arrow = AxisDragGizmo._CreateArrow(gizmoLayer.utilityLayerScene, this._coloredMaterial, thickness);\r\n        const collider = AxisDragGizmo._CreateArrow(gizmoLayer.utilityLayerScene, this._coloredMaterial, thickness + 4, true);\r\n\r\n        // Add to Root Node\r\n        this._gizmoMesh = new Mesh(\"\", gizmoLayer.utilityLayerScene);\r\n        this._gizmoMesh.addChild(arrow as Mesh);\r\n        this._gizmoMesh.addChild(collider as Mesh);\r\n\r\n        this._gizmoMesh.lookAt(this._rootMesh.position.add(dragAxis));\r\n        this._gizmoMesh.scaling.scaleInPlace(1 / 3);\r\n        this._gizmoMesh.parent = this._rootMesh;\r\n\r\n        let currentSnapDragDistance = 0;\r\n        const tmpSnapEvent = { snapDistance: 0 };\r\n        // Add drag behavior to handle events when the gizmo is dragged\r\n        this.dragBehavior = new PointerDragBehavior({ dragAxis: dragAxis });\r\n        this.dragBehavior.moveAttached = false;\r\n        this.dragBehavior.updateDragPlane = false;\r\n        this._rootMesh.addBehavior(this.dragBehavior);\r\n\r\n        this.dragBehavior.onDragObservable.add((event) => {\r\n            if (this.attachedNode) {\r\n                // Keep world translation and use it to update world transform\r\n                // if the node has parent, the local transform properties (position, rotation, scale)\r\n                // will be recomputed in _matrixChanged function\r\n\r\n                let matrixChanged: boolean = false;\r\n                // Snapping logic\r\n                if (this.snapDistance == 0) {\r\n                    this.attachedNode.getWorldMatrix().getTranslationToRef(TmpVectors.Vector3[2]);\r\n                    TmpVectors.Vector3[2].addInPlace(event.delta);\r\n                    if (this.dragBehavior.validateDrag(TmpVectors.Vector3[2])) {\r\n                        if ((this.attachedNode as any).position) {\r\n                            // Required for nodes like lights\r\n                            (this.attachedNode as any).position.addInPlaceFromFloats(event.delta.x, event.delta.y, event.delta.z);\r\n                        }\r\n\r\n                        // use _worldMatrix to not force a matrix update when calling GetWorldMatrix especially with Cameras\r\n                        this.attachedNode.getWorldMatrix().addTranslationFromFloats(event.delta.x, event.delta.y, event.delta.z);\r\n                        this.attachedNode.updateCache();\r\n                        matrixChanged = true;\r\n                    }\r\n                } else {\r\n                    currentSnapDragDistance += event.dragDistance;\r\n                    if (Math.abs(currentSnapDragDistance) > this.snapDistance) {\r\n                        const dragSteps = Math.floor(Math.abs(currentSnapDragDistance) / this.snapDistance);\r\n                        currentSnapDragDistance = currentSnapDragDistance % this.snapDistance;\r\n                        event.delta.normalizeToRef(TmpVectors.Vector3[1]);\r\n                        TmpVectors.Vector3[1].scaleInPlace(this.snapDistance * dragSteps);\r\n\r\n                        this.attachedNode.getWorldMatrix().getTranslationToRef(TmpVectors.Vector3[2]);\r\n                        TmpVectors.Vector3[2].addInPlace(TmpVectors.Vector3[1]);\r\n                        if (this.dragBehavior.validateDrag(TmpVectors.Vector3[2])) {\r\n                            this.attachedNode.getWorldMatrix().addTranslationFromFloats(TmpVectors.Vector3[1].x, TmpVectors.Vector3[1].y, TmpVectors.Vector3[1].z);\r\n                            this.attachedNode.updateCache();\r\n                            tmpSnapEvent.snapDistance = this.snapDistance * dragSteps;\r\n                            this.onSnapObservable.notifyObservers(tmpSnapEvent);\r\n                            matrixChanged = true;\r\n                        }\r\n                    }\r\n                }\r\n                if (matrixChanged) {\r\n                    this._matrixChanged();\r\n                }\r\n            }\r\n        });\r\n        this.dragBehavior.onDragStartObservable.add(() => {\r\n            this._dragging = true;\r\n        });\r\n        this.dragBehavior.onDragEndObservable.add(() => {\r\n            this._dragging = false;\r\n        });\r\n\r\n        const light = gizmoLayer._getSharedGizmoLight();\r\n        light.includedOnlyMeshes = light.includedOnlyMeshes.concat(this._rootMesh.getChildMeshes(false));\r\n\r\n        const cache: GizmoAxisCache = {\r\n            gizmoMeshes: arrow.getChildMeshes() as Mesh[],\r\n            colliderMeshes: collider.getChildMeshes() as Mesh[],\r\n            material: this._coloredMaterial,\r\n            hoverMaterial: this._hoverMaterial,\r\n            disableMaterial: this._disableMaterial,\r\n            active: false,\r\n            dragBehavior: this.dragBehavior,\r\n        };\r\n        this._parent?.addToAxisCache(collider as Mesh, cache);\r\n\r\n        this._pointerObserver = gizmoLayer.utilityLayerScene.onPointerObservable.add((pointerInfo) => {\r\n            if (this._customMeshSet) {\r\n                return;\r\n            }\r\n            this._isHovered = !!(cache.colliderMeshes.indexOf(<Mesh>pointerInfo?.pickInfo?.pickedMesh) != -1);\r\n            if (!this._parent) {\r\n                const material = this.dragBehavior.enabled ? (this._isHovered || this._dragging ? this._hoverMaterial : this._coloredMaterial) : this._disableMaterial;\r\n                this._setGizmoMeshMaterial(cache.gizmoMeshes, material);\r\n            }\r\n        });\r\n\r\n        this.dragBehavior.onEnabledObservable.add((newState) => {\r\n            this._setGizmoMeshMaterial(cache.gizmoMeshes, newState ? cache.material : cache.disableMaterial);\r\n        });\r\n    }\r\n    protected _attachedNodeChanged(value: Nullable<Node>) {\r\n        if (this.dragBehavior) {\r\n            this.dragBehavior.enabled = value ? true : false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * If the gizmo is enabled\r\n     */\r\n    public set isEnabled(value: boolean) {\r\n        this._isEnabled = value;\r\n        if (!value) {\r\n            this.attachedMesh = null;\r\n            this.attachedNode = null;\r\n        } else {\r\n            if (this._parent) {\r\n                this.attachedMesh = this._parent.attachedMesh;\r\n                this.attachedNode = this._parent.attachedNode;\r\n            }\r\n        }\r\n    }\r\n    public get isEnabled(): boolean {\r\n        return this._isEnabled;\r\n    }\r\n\r\n    /**\r\n     * Disposes of the gizmo\r\n     */\r\n    public dispose() {\r\n        this.onSnapObservable.clear();\r\n        this.gizmoLayer.utilityLayerScene.onPointerObservable.remove(this._pointerObserver);\r\n        this.dragBehavior.detach();\r\n        if (this._gizmoMesh) {\r\n            this._gizmoMesh.dispose();\r\n        }\r\n        [this._coloredMaterial, this._hoverMaterial, this._disableMaterial].forEach((matl) => {\r\n            if (matl) {\r\n                matl.dispose();\r\n            }\r\n        });\r\n        super.dispose();\r\n    }\r\n}\r\n"],"mappings":"AACA,SAASA,UAAU,QAAQ,uBAAqB;AAIhD,SAASC,aAAa,QAAQ,4BAA0B;AAExD,SAASC,IAAI,QAAQ,mBAAiB;AACtC,SAASC,cAAc,QAAQ,uCAAqC;AACpE,SAASC,mBAAmB,QAAQ,4CAA0C;AAE9E,SAASC,KAAK,QAAQ,YAAU;AAChC,SAASC,oBAAoB,QAAQ,sCAAoC;AACzE,SAASC,gBAAgB,QAAQ,kCAAgC;AAGjE,SAASC,MAAM,QAAQ,wBAAsB;AAC7C,SAASC,UAAU,QAAQ,yBAAuB;AAyBlD;;;AAGA,OAAM,MAAOC,aAAc,SAAQL,KAAK;EAyBpC;EACA,IAAWM,eAAeA,CAAA;IACtB,OAAO,IAAI,CAACC,gBAAgB;EAChC;EAEA;EACA,IAAWC,aAAaA,CAAA;IACpB,OAAO,IAAI,CAACC,cAAc;EAC9B;EAEA;EACA,IAAWC,eAAeA,CAAA;IACtB,OAAO,IAAI,CAACC,gBAAgB;EAChC;EACA;;;EAGO,OAAOC,YAAYA,CAACC,KAAY,EAAEC,QAA0B,EAAEC,SAAA,GAAoB,CAAC,EAAEC,UAAU,GAAG,KAAK;IAC1G,MAAMC,KAAK,GAAG,IAAIrB,aAAa,CAAC,OAAO,EAAEiB,KAAK,CAAC;IAC/C,MAAMK,QAAQ,GAAGpB,cAAc,CAAC,UAAU,EAAE;MAAEqB,WAAW,EAAE,CAAC;MAAEC,MAAM,EAAE,KAAK;MAAEC,cAAc,EAAE,MAAM,IAAI,CAAC,GAAG,CAACN,SAAS,GAAG,CAAC,IAAI,CAAC,CAAC;MAAEO,YAAY,EAAE;IAAE,CAAE,EAAET,KAAK,CAAC;IAC3J,MAAMU,IAAI,GAAGzB,cAAc,CAAC,UAAU,EAAE;MAAEqB,WAAW,EAAE,KAAK,GAAGJ,SAAS;MAAEK,MAAM,EAAE,KAAK;MAAEC,cAAc,EAAE,KAAK,GAAGN,SAAS;MAAEO,YAAY,EAAE;IAAE,CAAE,EAAET,KAAK,CAAC;IAEtJ;IACAK,QAAQ,CAACM,MAAM,GAAGP,KAAK;IACvBC,QAAQ,CAACJ,QAAQ,GAAGA,QAAQ;IAC5BI,QAAQ,CAACO,QAAQ,CAACC,CAAC,GAAGC,IAAI,CAACC,EAAE,GAAG,CAAC;IACjCV,QAAQ,CAACW,QAAQ,CAACC,CAAC,IAAI,GAAG;IAE1BP,IAAI,CAACC,MAAM,GAAGP,KAAK;IACnBM,IAAI,CAACT,QAAQ,GAAGA,QAAQ;IACxBS,IAAI,CAACM,QAAQ,CAACC,CAAC,IAAI,KAAK,GAAG,CAAC;IAC5BP,IAAI,CAACE,QAAQ,CAACC,CAAC,GAAGC,IAAI,CAACC,EAAE,GAAG,CAAC;IAE7B,IAAIZ,UAAU,EAAE;MACZO,IAAI,CAACQ,UAAU,GAAG,CAAC;MACnBb,QAAQ,CAACa,UAAU,GAAG,CAAC;;IAE3B,OAAOd,KAAK;EAChB;EAEA;;;EAGO,OAAOe,oBAAoBA,CAACnB,KAAY,EAAEI,KAAoB;IACjE,MAAMgB,QAAQ,GAAG,IAAIrC,aAAa,CAAC,OAAO,EAAEiB,KAAK,CAAC;IAClD,KAAK,MAAMqB,IAAI,IAAIjB,KAAK,CAACkB,cAAc,EAAE,EAAE;MACvC,MAAMC,aAAa,GAAIF,IAAa,CAACG,cAAc,CAACH,IAAI,CAACI,IAAI,CAAC;MAC9DF,aAAa,CAACZ,MAAM,GAAGS,QAAQ;;IAEnC,OAAOA,QAAQ;EACnB;EAEA;;;;;;;;EAQAM,YACIC,QAAiB,EACjBC,KAAA,GAAgBtC,MAAM,CAACuC,IAAI,EAAE,EAC7BC,UAAA,GAAmC1C,oBAAoB,CAAC2C,mBAAmB,EAC3EpB,MAAA,GAAkC,IAAI,EACtCT,SAAA,GAAoB,CAAC;;IAErB,KAAK,CAAC4B,UAAU,CAAC;IAvFX,KAAAE,gBAAgB,GAAoC,IAAI;IAClE;;;IAGO,KAAAC,YAAY,GAAG,CAAC;IACvB;;;;IAIO,KAAAC,gBAAgB,GAAG,IAAIpD,UAAU,EAA4B;IAE1D,KAAAqD,UAAU,GAAY,IAAI;IAC1B,KAAAC,OAAO,GAA4B,IAAI;IAMvC,KAAAC,SAAS,GAAY,KAAK;IAsEhC,IAAI,CAACD,OAAO,GAAGzB,MAAM;IAErB;IACA,IAAI,CAACjB,gBAAgB,GAAG,IAAIL,gBAAgB,CAAC,EAAE,EAAEyC,UAAU,CAACQ,iBAAiB,CAAC;IAC9E,IAAI,CAAC5C,gBAAgB,CAAC6C,YAAY,GAAGX,KAAK;IAC1C,IAAI,CAAClC,gBAAgB,CAAC8C,aAAa,GAAGZ,KAAK,CAACa,QAAQ,CAAC,IAAInD,MAAM,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC;IAE/E,IAAI,CAACM,cAAc,GAAG,IAAIP,gBAAgB,CAAC,EAAE,EAAEyC,UAAU,CAACQ,iBAAiB,CAAC;IAC5E,IAAI,CAAC1C,cAAc,CAAC2C,YAAY,GAAGjD,MAAM,CAACoD,MAAM,EAAE;IAElD,IAAI,CAAC5C,gBAAgB,GAAG,IAAIT,gBAAgB,CAAC,EAAE,EAAEyC,UAAU,CAACQ,iBAAiB,CAAC;IAC9E,IAAI,CAACxC,gBAAgB,CAACyC,YAAY,GAAGjD,MAAM,CAACuC,IAAI,EAAE;IAClD,IAAI,CAAC/B,gBAAgB,CAAC6C,KAAK,GAAG,GAAG;IAEjC;IACA,MAAMvC,KAAK,GAAGZ,aAAa,CAACO,YAAY,CAAC+B,UAAU,CAACQ,iBAAiB,EAAE,IAAI,CAAC5C,gBAAgB,EAAEQ,SAAS,CAAC;IACxG,MAAM0C,QAAQ,GAAGpD,aAAa,CAACO,YAAY,CAAC+B,UAAU,CAACQ,iBAAiB,EAAE,IAAI,CAAC5C,gBAAgB,EAAEQ,SAAS,GAAG,CAAC,EAAE,IAAI,CAAC;IAErH;IACA,IAAI,CAAC2C,UAAU,GAAG,IAAI7D,IAAI,CAAC,EAAE,EAAE8C,UAAU,CAACQ,iBAAiB,CAAC;IAC5D,IAAI,CAACO,UAAU,CAACC,QAAQ,CAAC1C,KAAa,CAAC;IACvC,IAAI,CAACyC,UAAU,CAACC,QAAQ,CAACF,QAAgB,CAAC;IAE1C,IAAI,CAACC,UAAU,CAACE,MAAM,CAAC,IAAI,CAACC,SAAS,CAAChC,QAAQ,CAACiC,GAAG,CAACtB,QAAQ,CAAC,CAAC;IAC7D,IAAI,CAACkB,UAAU,CAACK,OAAO,CAACC,YAAY,CAAC,CAAC,GAAG,CAAC,CAAC;IAC3C,IAAI,CAACN,UAAU,CAAClC,MAAM,GAAG,IAAI,CAACqC,SAAS;IAEvC,IAAII,uBAAuB,GAAG,CAAC;IAC/B,MAAMC,YAAY,GAAG;MAAEpB,YAAY,EAAE;IAAC,CAAE;IACxC;IACA,IAAI,CAACqB,YAAY,GAAG,IAAIpE,mBAAmB,CAAC;MAAEyC,QAAQ,EAAEA;IAAQ,CAAE,CAAC;IACnE,IAAI,CAAC2B,YAAY,CAACC,YAAY,GAAG,KAAK;IACtC,IAAI,CAACD,YAAY,CAACE,eAAe,GAAG,KAAK;IACzC,IAAI,CAACR,SAAS,CAACS,WAAW,CAAC,IAAI,CAACH,YAAY,CAAC;IAE7C,IAAI,CAACA,YAAY,CAACI,gBAAgB,CAACT,GAAG,CAAEU,KAAK,IAAI;MAC7C,IAAI,IAAI,CAACC,YAAY,EAAE;QACnB;QACA;QACA;QAEA,IAAIC,aAAa,GAAY,KAAK;QAClC;QACA,IAAI,IAAI,CAAC5B,YAAY,IAAI,CAAC,EAAE;UACxB,IAAI,CAAC2B,YAAY,CAACE,cAAc,EAAE,CAACC,mBAAmB,CAACxE,UAAU,CAACyE,OAAO,CAAC,CAAC,CAAC,CAAC;UAC7EzE,UAAU,CAACyE,OAAO,CAAC,CAAC,CAAC,CAACC,UAAU,CAACN,KAAK,CAACO,KAAK,CAAC;UAC7C,IAAI,IAAI,CAACZ,YAAY,CAACa,YAAY,CAAC5E,UAAU,CAACyE,OAAO,CAAC,CAAC,CAAC,CAAC,EAAE;YACvD,IAAK,IAAI,CAACJ,YAAoB,CAAC5C,QAAQ,EAAE;cACrC;cACC,IAAI,CAAC4C,YAAoB,CAAC5C,QAAQ,CAACoD,oBAAoB,CAACT,KAAK,CAACO,KAAK,CAACrD,CAAC,EAAE8C,KAAK,CAACO,KAAK,CAACG,CAAC,EAAEV,KAAK,CAACO,KAAK,CAACjD,CAAC,CAAC;;YAGzG;YACA,IAAI,CAAC2C,YAAY,CAACE,cAAc,EAAE,CAACQ,wBAAwB,CAACX,KAAK,CAACO,KAAK,CAACrD,CAAC,EAAE8C,KAAK,CAACO,KAAK,CAACG,CAAC,EAAEV,KAAK,CAACO,KAAK,CAACjD,CAAC,CAAC;YACxG,IAAI,CAAC2C,YAAY,CAACW,WAAW,EAAE;YAC/BV,aAAa,GAAG,IAAI;;SAE3B,MAAM;UACHT,uBAAuB,IAAIO,KAAK,CAACa,YAAY;UAC7C,IAAI1D,IAAI,CAAC2D,GAAG,CAACrB,uBAAuB,CAAC,GAAG,IAAI,CAACnB,YAAY,EAAE;YACvD,MAAMyC,SAAS,GAAG5D,IAAI,CAAC6D,KAAK,CAAC7D,IAAI,CAAC2D,GAAG,CAACrB,uBAAuB,CAAC,GAAG,IAAI,CAACnB,YAAY,CAAC;YACnFmB,uBAAuB,GAAGA,uBAAuB,GAAG,IAAI,CAACnB,YAAY;YACrE0B,KAAK,CAACO,KAAK,CAACU,cAAc,CAACrF,UAAU,CAACyE,OAAO,CAAC,CAAC,CAAC,CAAC;YACjDzE,UAAU,CAACyE,OAAO,CAAC,CAAC,CAAC,CAACb,YAAY,CAAC,IAAI,CAAClB,YAAY,GAAGyC,SAAS,CAAC;YAEjE,IAAI,CAACd,YAAY,CAACE,cAAc,EAAE,CAACC,mBAAmB,CAACxE,UAAU,CAACyE,OAAO,CAAC,CAAC,CAAC,CAAC;YAC7EzE,UAAU,CAACyE,OAAO,CAAC,CAAC,CAAC,CAACC,UAAU,CAAC1E,UAAU,CAACyE,OAAO,CAAC,CAAC,CAAC,CAAC;YACvD,IAAI,IAAI,CAACV,YAAY,CAACa,YAAY,CAAC5E,UAAU,CAACyE,OAAO,CAAC,CAAC,CAAC,CAAC,EAAE;cACvD,IAAI,CAACJ,YAAY,CAACE,cAAc,EAAE,CAACQ,wBAAwB,CAAC/E,UAAU,CAACyE,OAAO,CAAC,CAAC,CAAC,CAACnD,CAAC,EAAEtB,UAAU,CAACyE,OAAO,CAAC,CAAC,CAAC,CAACK,CAAC,EAAE9E,UAAU,CAACyE,OAAO,CAAC,CAAC,CAAC,CAAC/C,CAAC,CAAC;cACtI,IAAI,CAAC2C,YAAY,CAACW,WAAW,EAAE;cAC/BlB,YAAY,CAACpB,YAAY,GAAG,IAAI,CAACA,YAAY,GAAGyC,SAAS;cACzD,IAAI,CAACxC,gBAAgB,CAAC2C,eAAe,CAACxB,YAAY,CAAC;cACnDQ,aAAa,GAAG,IAAI;;;;QAIhC,IAAIA,aAAa,EAAE;UACf,IAAI,CAACiB,cAAc,EAAE;;;IAGjC,CAAC,CAAC;IACF,IAAI,CAACxB,YAAY,CAACyB,qBAAqB,CAAC9B,GAAG,CAAC,MAAK;MAC7C,IAAI,CAACZ,SAAS,GAAG,IAAI;IACzB,CAAC,CAAC;IACF,IAAI,CAACiB,YAAY,CAAC0B,mBAAmB,CAAC/B,GAAG,CAAC,MAAK;MAC3C,IAAI,CAACZ,SAAS,GAAG,KAAK;IAC1B,CAAC,CAAC;IAEF,MAAM4C,KAAK,GAAGnD,UAAU,CAACoD,oBAAoB,EAAE;IAC/CD,KAAK,CAACE,kBAAkB,GAAGF,KAAK,CAACE,kBAAkB,CAACC,MAAM,CAAC,IAAI,CAACpC,SAAS,CAAC1B,cAAc,CAAC,KAAK,CAAC,CAAC;IAEhG,MAAM+D,KAAK,GAAmB;MAC1BC,WAAW,EAAElF,KAAK,CAACkB,cAAc,EAAY;MAC7CiE,cAAc,EAAE3C,QAAQ,CAACtB,cAAc,EAAY;MACnDrB,QAAQ,EAAE,IAAI,CAACP,gBAAgB;MAC/BC,aAAa,EAAE,IAAI,CAACC,cAAc;MAClCC,eAAe,EAAE,IAAI,CAACC,gBAAgB;MACtC0F,MAAM,EAAE,KAAK;MACblC,YAAY,EAAE,IAAI,CAACA;KACtB;IACD,CAAAmC,EAAA,OAAI,CAACrD,OAAO,cAAAqD,EAAA,uBAAAA,EAAA,CAAEC,cAAc,CAAC9C,QAAgB,EAAEyC,KAAK,CAAC;IAErD,IAAI,CAACrD,gBAAgB,GAAGF,UAAU,CAACQ,iBAAiB,CAACqD,mBAAmB,CAAC1C,GAAG,CAAE2C,WAAW,IAAI;;MACzF,IAAI,IAAI,CAACC,cAAc,EAAE;QACrB;;MAEJ,IAAI,CAACC,UAAU,GAAG,CAAC,EAAET,KAAK,CAACE,cAAc,CAACQ,OAAO,CAAO,CAAAN,EAAA,GAAAG,WAAW,aAAXA,WAAW,uBAAXA,WAAW,CAAEI,QAAQ,cAAAP,EAAA,uBAAAA,EAAA,CAAEQ,UAAU,CAAC,IAAI,CAAC,CAAC,CAAC;MACjG,IAAI,CAAC,IAAI,CAAC7D,OAAO,EAAE;QACf,MAAMnC,QAAQ,GAAG,IAAI,CAACqD,YAAY,CAAC4C,OAAO,GAAI,IAAI,CAACJ,UAAU,IAAI,IAAI,CAACzD,SAAS,GAAG,IAAI,CAACzC,cAAc,GAAG,IAAI,CAACF,gBAAgB,GAAI,IAAI,CAACI,gBAAgB;QACtJ,IAAI,CAACqG,qBAAqB,CAACd,KAAK,CAACC,WAAW,EAAErF,QAAQ,CAAC;;IAE/D,CAAC,CAAC;IAEF,IAAI,CAACqD,YAAY,CAAC8C,mBAAmB,CAACnD,GAAG,CAAEoD,QAAQ,IAAI;MACnD,IAAI,CAACF,qBAAqB,CAACd,KAAK,CAACC,WAAW,EAAEe,QAAQ,GAAGhB,KAAK,CAACpF,QAAQ,GAAGoF,KAAK,CAACxF,eAAe,CAAC;IACpG,CAAC,CAAC;EACN;EACUyG,oBAAoBA,CAACC,KAAqB;IAChD,IAAI,IAAI,CAACjD,YAAY,EAAE;MACnB,IAAI,CAACA,YAAY,CAAC4C,OAAO,GAAGK,KAAK,GAAG,IAAI,GAAG,KAAK;;EAExD;EAEA;;;EAGA,IAAWC,SAASA,CAACD,KAAc;IAC/B,IAAI,CAACpE,UAAU,GAAGoE,KAAK;IACvB,IAAI,CAACA,KAAK,EAAE;MACR,IAAI,CAACE,YAAY,GAAG,IAAI;MACxB,IAAI,CAAC7C,YAAY,GAAG,IAAI;KAC3B,MAAM;MACH,IAAI,IAAI,CAACxB,OAAO,EAAE;QACd,IAAI,CAACqE,YAAY,GAAG,IAAI,CAACrE,OAAO,CAACqE,YAAY;QAC7C,IAAI,CAAC7C,YAAY,GAAG,IAAI,CAACxB,OAAO,CAACwB,YAAY;;;EAGzD;EACA,IAAW4C,SAASA,CAAA;IAChB,OAAO,IAAI,CAACrE,UAAU;EAC1B;EAEA;;;EAGOuE,OAAOA,CAAA;IACV,IAAI,CAACxE,gBAAgB,CAACyE,KAAK,EAAE;IAC7B,IAAI,CAAC7E,UAAU,CAACQ,iBAAiB,CAACqD,mBAAmB,CAACiB,MAAM,CAAC,IAAI,CAAC5E,gBAAgB,CAAC;IACnF,IAAI,CAACsB,YAAY,CAACuD,MAAM,EAAE;IAC1B,IAAI,IAAI,CAAChE,UAAU,EAAE;MACjB,IAAI,CAACA,UAAU,CAAC6D,OAAO,EAAE;;IAE7B,CAAC,IAAI,CAAChH,gBAAgB,EAAE,IAAI,CAACE,cAAc,EAAE,IAAI,CAACE,gBAAgB,CAAC,CAACgH,OAAO,CAAEC,IAAI,IAAI;MACjF,IAAIA,IAAI,EAAE;QACNA,IAAI,CAACL,OAAO,EAAE;;IAEtB,CAAC,CAAC;IACF,KAAK,CAACA,OAAO,EAAE;EACnB"},"metadata":{},"sourceType":"module","externalDependencies":[]}