{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { Observable } from \"../Misc/observable.js\";\nimport { InternalTexture, InternalTextureSource } from \"../Materials/Textures/internalTexture.js\";\nimport { IsDocumentAvailable, IsWindowObjectExist } from \"../Misc/domManagement.js\";\nimport { EngineStore } from \"./engineStore.js\";\nimport { _WarnImport } from \"../Misc/devTools.js\";\nimport { ThinEngine } from \"./thinEngine.js\";\nimport { PerformanceMonitor } from \"../Misc/performanceMonitor.js\";\nimport { PerfCounter } from \"../Misc/perfCounter.js\";\nimport { WebGLDataBuffer } from \"../Meshes/WebGL/webGLDataBuffer.js\";\nimport { Logger } from \"../Misc/logger.js\";\nimport { WebGLHardwareTexture } from \"./WebGL/webGLHardwareTexture.js\";\nimport \"./Extensions/engine.alpha.js\";\nimport \"./Extensions/engine.readTexture.js\";\nimport \"./Extensions/engine.dynamicBuffer.js\";\n/**\n * The engine class is responsible for interfacing with all lower-level APIs such as WebGL and Audio\n */\nexport class Engine extends ThinEngine {\n  /**\n   * Returns the current npm package of the sdk\n   */\n  // Not mixed with Version for tooling purpose.\n  static get NpmPackage() {\n    return ThinEngine.NpmPackage;\n  }\n  /**\n   * Returns the current version of the framework\n   */\n  static get Version() {\n    return ThinEngine.Version;\n  }\n  /** Gets the list of created engines */\n  static get Instances() {\n    return EngineStore.Instances;\n  }\n  /**\n   * Gets the latest created engine\n   */\n  static get LastCreatedEngine() {\n    return EngineStore.LastCreatedEngine;\n  }\n  /**\n   * Gets the latest created scene\n   */\n  static get LastCreatedScene() {\n    return EngineStore.LastCreatedScene;\n  }\n  /** @internal */\n  /**\n   * Engine abstraction for loading and creating an image bitmap from a given source string.\n   * @param imageSource source to load the image from.\n   * @param options An object that sets options for the image's extraction.\n   * @returns ImageBitmap.\n   */\n  _createImageBitmapFromSource(imageSource, options) {\n    const promise = new Promise((resolve, reject) => {\n      const image = new Image();\n      image.onload = () => {\n        image.decode().then(() => {\n          this.createImageBitmap(image, options).then(imageBitmap => {\n            resolve(imageBitmap);\n          });\n        });\n      };\n      image.onerror = () => {\n        reject(`Error loading image ${image.src}`);\n      };\n      image.src = imageSource;\n    });\n    return promise;\n  }\n  /**\n   * Engine abstraction for createImageBitmap\n   * @param image source for image\n   * @param options An object that sets options for the image's extraction.\n   * @returns ImageBitmap\n   */\n  createImageBitmap(image, options) {\n    return createImageBitmap(image, options);\n  }\n  /**\n   * Resize an image and returns the image data as an uint8array\n   * @param image image to resize\n   * @param bufferWidth destination buffer width\n   * @param bufferHeight destination buffer height\n   * @returns an uint8array containing RGBA values of bufferWidth * bufferHeight size\n   */\n  resizeImageBitmap(image, bufferWidth, bufferHeight) {\n    const canvas = this.createCanvas(bufferWidth, bufferHeight);\n    const context = canvas.getContext(\"2d\");\n    if (!context) {\n      throw new Error(\"Unable to get 2d context for resizeImageBitmap\");\n    }\n    context.drawImage(image, 0, 0);\n    // Create VertexData from map data\n    // Cast is due to wrong definition in lib.d.ts from ts 1.3 - https://github.com/Microsoft/TypeScript/issues/949\n    const buffer = context.getImageData(0, 0, bufferWidth, bufferHeight).data;\n    return buffer;\n  }\n  /**\n   * Will flag all materials in all scenes in all engines as dirty to trigger new shader compilation\n   * @param flag defines which part of the materials must be marked as dirty\n   * @param predicate defines a predicate used to filter which materials should be affected\n   */\n  static MarkAllMaterialsAsDirty(flag, predicate) {\n    for (let engineIndex = 0; engineIndex < Engine.Instances.length; engineIndex++) {\n      const engine = Engine.Instances[engineIndex];\n      for (let sceneIndex = 0; sceneIndex < engine.scenes.length; sceneIndex++) {\n        engine.scenes[sceneIndex].markAllMaterialsAsDirty(flag, predicate);\n      }\n    }\n  }\n  /**\n   * Method called to create the default loading screen.\n   * This can be overridden in your own app.\n   * @param canvas The rendering canvas element\n   * @returns The loading screen\n   */\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  static DefaultLoadingScreenFactory(canvas) {\n    throw _WarnImport(\"LoadingScreen\");\n  }\n  get _supportsHardwareTextureRescaling() {\n    return !!Engine._RescalePostProcessFactory;\n  }\n  /**\n   * Gets the performance monitor attached to this engine\n   * @see https://doc.babylonjs.com/features/featuresDeepDive/scene/optimize_your_scene#engineinstrumentation\n   */\n  get performanceMonitor() {\n    return this._performanceMonitor;\n  }\n  /**\n   * (WebGPU only) True (default) to be in compatibility mode, meaning rendering all existing scenes without artifacts (same rendering than WebGL).\n   * Setting the property to false will improve performances but may not work in some scenes if some precautions are not taken.\n   * See https://doc.babylonjs.com/setup/support/webGPU/webGPUOptimization/webGPUNonCompatibilityMode for more details\n   */\n  get compatibilityMode() {\n    return this._compatibilityMode;\n  }\n  set compatibilityMode(mode) {\n    // not supported in WebGL\n    this._compatibilityMode = true;\n  }\n  // Events\n  /**\n   * Gets the HTML element used to attach event listeners\n   * @returns a HTML element\n   */\n  getInputElement() {\n    return this._renderingCanvas;\n  }\n  /**\n   * Creates a new engine\n   * @param canvasOrContext defines the canvas or WebGL context to use for rendering. If you provide a WebGL context, Babylon.js will not hook events on the canvas (like pointers, keyboards, etc...) so no event observables will be available. This is mostly used when Babylon.js is used as a plugin on a system which already used the WebGL context\n   * @param antialias defines enable antialiasing (default: false)\n   * @param options defines further options to be sent to the getContext() function\n   * @param adaptToDeviceRatio defines whether to adapt to the device's viewport characteristics (default: false)\n   */\n  constructor(canvasOrContext, antialias, options, adaptToDeviceRatio = false) {\n    super(canvasOrContext, antialias, options, adaptToDeviceRatio);\n    // Members\n    /**\n     * Gets or sets a boolean to enable/disable IndexedDB support and avoid XHR on .manifest\n     **/\n    this.enableOfflineSupport = false;\n    /**\n     * Gets or sets a boolean to enable/disable checking manifest if IndexedDB support is enabled (js will always consider the database is up to date)\n     **/\n    this.disableManifestCheck = false;\n    /**\n     * Gets or sets a boolean to enable/disable the context menu (right-click) from appearing on the main canvas\n     */\n    this.disableContextMenu = true;\n    /**\n     * Gets the list of created scenes\n     */\n    this.scenes = new Array();\n    /** @internal */\n    this._virtualScenes = new Array();\n    /**\n     * Event raised when a new scene is created\n     */\n    this.onNewSceneAddedObservable = new Observable();\n    /**\n     * Gets the list of created postprocesses\n     */\n    this.postProcesses = new Array();\n    /**\n     * Gets a boolean indicating if the pointer is currently locked\n     */\n    this.isPointerLock = false;\n    // Observables\n    /**\n     * Observable event triggered each time the rendering canvas is resized\n     */\n    this.onResizeObservable = new Observable();\n    /**\n     * Observable event triggered each time the canvas loses focus\n     */\n    this.onCanvasBlurObservable = new Observable();\n    /**\n     * Observable event triggered each time the canvas gains focus\n     */\n    this.onCanvasFocusObservable = new Observable();\n    /**\n     * Observable event triggered each time the canvas receives pointerout event\n     */\n    this.onCanvasPointerOutObservable = new Observable();\n    /**\n     * Observable raised when the engine begins a new frame\n     */\n    this.onBeginFrameObservable = new Observable();\n    /**\n     * If set, will be used to request the next animation frame for the render loop\n     */\n    this.customAnimationFrameRequester = null;\n    /**\n     * Observable raised when the engine ends the current frame\n     */\n    this.onEndFrameObservable = new Observable();\n    /**\n     * Observable raised when the engine is about to compile a shader\n     */\n    this.onBeforeShaderCompilationObservable = new Observable();\n    /**\n     * Observable raised when the engine has just compiled a shader\n     */\n    this.onAfterShaderCompilationObservable = new Observable();\n    // Deterministic lockstepMaxSteps\n    this._deterministicLockstep = false;\n    this._lockstepMaxSteps = 4;\n    this._timeStep = 1 / 60;\n    // FPS\n    this._fps = 60;\n    this._deltaTime = 0;\n    /** @internal */\n    this._drawCalls = new PerfCounter();\n    /** Gets or sets the tab index to set to the rendering canvas. 1 is the minimum value to set to be able to capture keyboard events */\n    this.canvasTabIndex = 1;\n    /**\n     * Turn this value on if you want to pause FPS computation when in background\n     */\n    this.disablePerformanceMonitorInBackground = false;\n    this._performanceMonitor = new PerformanceMonitor();\n    this._compatibilityMode = true;\n    /**\n     * Gets or sets the current render pass id\n     */\n    this.currentRenderPassId = 0;\n    this._renderPassNames = [\"main\"];\n    Engine.Instances.push(this);\n    if (!canvasOrContext) {\n      return;\n    }\n    this._features.supportRenderPasses = true;\n    options = this._creationOptions;\n    if (canvasOrContext.getContext) {\n      const canvas = canvasOrContext;\n      this._sharedInit(canvas);\n    }\n  }\n  _initGLContext() {\n    super._initGLContext();\n    this._rescalePostProcess = null;\n  }\n  /**\n   * Shared initialization across engines types.\n   * @param canvas The canvas associated with this instance of the engine.\n   */\n  _sharedInit(canvas) {\n    super._sharedInit(canvas);\n    this._onCanvasFocus = () => {\n      this.onCanvasFocusObservable.notifyObservers(this);\n    };\n    this._onCanvasBlur = () => {\n      this.onCanvasBlurObservable.notifyObservers(this);\n    };\n    this._onCanvasContextMenu = evt => {\n      if (this.disableContextMenu) {\n        evt.preventDefault();\n      }\n    };\n    canvas.addEventListener(\"focus\", this._onCanvasFocus);\n    canvas.addEventListener(\"blur\", this._onCanvasBlur);\n    canvas.addEventListener(\"contextmenu\", this._onCanvasContextMenu);\n    this._onBlur = () => {\n      if (this.disablePerformanceMonitorInBackground) {\n        this._performanceMonitor.disable();\n      }\n      this._windowIsBackground = true;\n    };\n    this._onFocus = () => {\n      if (this.disablePerformanceMonitorInBackground) {\n        this._performanceMonitor.enable();\n      }\n      this._windowIsBackground = false;\n    };\n    this._onCanvasPointerOut = ev => {\n      // Check that the element at the point of the pointer out isn't the canvas and if it isn't, notify observers\n      // Note: This is a workaround for a bug with Safari\n      if (document.elementFromPoint(ev.clientX, ev.clientY) !== canvas) {\n        this.onCanvasPointerOutObservable.notifyObservers(ev);\n      }\n    };\n    const hostWindow = this.getHostWindow(); // it calls IsWindowObjectExist()\n    if (hostWindow && typeof hostWindow.addEventListener === \"function\") {\n      hostWindow.addEventListener(\"blur\", this._onBlur);\n      hostWindow.addEventListener(\"focus\", this._onFocus);\n    }\n    canvas.addEventListener(\"pointerout\", this._onCanvasPointerOut);\n    if (!this._creationOptions.doNotHandleTouchAction) {\n      this._disableTouchAction();\n    }\n    // Create Audio Engine if needed.\n    if (!Engine.audioEngine && this._creationOptions.audioEngine && Engine.AudioEngineFactory) {\n      Engine.audioEngine = Engine.AudioEngineFactory(this.getRenderingCanvas(), this.getAudioContext(), this.getAudioDestination());\n    }\n    if (IsDocumentAvailable()) {\n      // Fullscreen\n      this._onFullscreenChange = () => {\n        this.isFullscreen = !!document.fullscreenElement;\n        // Pointer lock\n        if (this.isFullscreen && this._pointerLockRequested && canvas) {\n          Engine._RequestPointerlock(canvas);\n        }\n      };\n      document.addEventListener(\"fullscreenchange\", this._onFullscreenChange, false);\n      document.addEventListener(\"webkitfullscreenchange\", this._onFullscreenChange, false);\n      // Pointer lock\n      this._onPointerLockChange = () => {\n        this.isPointerLock = document.pointerLockElement === canvas;\n      };\n      document.addEventListener(\"pointerlockchange\", this._onPointerLockChange, false);\n      document.addEventListener(\"webkitpointerlockchange\", this._onPointerLockChange, false);\n    }\n    this.enableOfflineSupport = Engine.OfflineProviderFactory !== undefined;\n    this._deterministicLockstep = !!this._creationOptions.deterministicLockstep;\n    this._lockstepMaxSteps = this._creationOptions.lockstepMaxSteps || 0;\n    this._timeStep = this._creationOptions.timeStep || 1 / 60;\n  }\n  /** @internal */\n  _verifyPointerLock() {\n    var _a;\n    (_a = this._onPointerLockChange) === null || _a === void 0 ? void 0 : _a.call(this);\n  }\n  /**\n   * Gets current aspect ratio\n   * @param viewportOwner defines the camera to use to get the aspect ratio\n   * @param useScreen defines if screen size must be used (or the current render target if any)\n   * @returns a number defining the aspect ratio\n   */\n  getAspectRatio(viewportOwner, useScreen = false) {\n    const viewport = viewportOwner.viewport;\n    return this.getRenderWidth(useScreen) * viewport.width / (this.getRenderHeight(useScreen) * viewport.height);\n  }\n  /**\n   * Gets current screen aspect ratio\n   * @returns a number defining the aspect ratio\n   */\n  getScreenAspectRatio() {\n    return this.getRenderWidth(true) / this.getRenderHeight(true);\n  }\n  /**\n   * Gets the client rect of the HTML canvas attached with the current webGL context\n   * @returns a client rectangle\n   */\n  getRenderingCanvasClientRect() {\n    if (!this._renderingCanvas) {\n      return null;\n    }\n    return this._renderingCanvas.getBoundingClientRect();\n  }\n  /**\n   * Gets the client rect of the HTML element used for events\n   * @returns a client rectangle\n   */\n  getInputElementClientRect() {\n    if (!this._renderingCanvas) {\n      return null;\n    }\n    return this.getInputElement().getBoundingClientRect();\n  }\n  /**\n   * Gets a boolean indicating that the engine is running in deterministic lock step mode\n   * @see https://doc.babylonjs.com/features/featuresDeepDive/animation/advanced_animations#deterministic-lockstep\n   * @returns true if engine is in deterministic lock step mode\n   */\n  isDeterministicLockStep() {\n    return this._deterministicLockstep;\n  }\n  /**\n   * Gets the max steps when engine is running in deterministic lock step\n   * @see https://doc.babylonjs.com/features/featuresDeepDive/animation/advanced_animations#deterministic-lockstep\n   * @returns the max steps\n   */\n  getLockstepMaxSteps() {\n    return this._lockstepMaxSteps;\n  }\n  /**\n   * Returns the time in ms between steps when using deterministic lock step.\n   * @returns time step in (ms)\n   */\n  getTimeStep() {\n    return this._timeStep * 1000;\n  }\n  /**\n   * Force the mipmap generation for the given render target texture\n   * @param texture defines the render target texture to use\n   * @param unbind defines whether or not to unbind the texture after generation. Defaults to true.\n   */\n  generateMipMapsForCubemap(texture, unbind = true) {\n    if (texture.generateMipMaps) {\n      const gl = this._gl;\n      this._bindTextureDirectly(gl.TEXTURE_CUBE_MAP, texture, true);\n      gl.generateMipmap(gl.TEXTURE_CUBE_MAP);\n      if (unbind) {\n        this._bindTextureDirectly(gl.TEXTURE_CUBE_MAP, null);\n      }\n    }\n  }\n  /** States */\n  /**\n   * Gets a boolean indicating if depth writing is enabled\n   * @returns the current depth writing state\n   */\n  getDepthWrite() {\n    return this._depthCullingState.depthMask;\n  }\n  /**\n   * Enable or disable depth writing\n   * @param enable defines the state to set\n   */\n  setDepthWrite(enable) {\n    this._depthCullingState.depthMask = enable;\n  }\n  /**\n   * Gets a boolean indicating if stencil buffer is enabled\n   * @returns the current stencil buffer state\n   */\n  getStencilBuffer() {\n    return this._stencilState.stencilTest;\n  }\n  /**\n   * Enable or disable the stencil buffer\n   * @param enable defines if the stencil buffer must be enabled or disabled\n   */\n  setStencilBuffer(enable) {\n    this._stencilState.stencilTest = enable;\n  }\n  /**\n   * Gets the current stencil mask\n   * @returns a number defining the new stencil mask to use\n   */\n  getStencilMask() {\n    return this._stencilState.stencilMask;\n  }\n  /**\n   * Sets the current stencil mask\n   * @param mask defines the new stencil mask to use\n   */\n  setStencilMask(mask) {\n    this._stencilState.stencilMask = mask;\n  }\n  /**\n   * Gets the current stencil function\n   * @returns a number defining the stencil function to use\n   */\n  getStencilFunction() {\n    return this._stencilState.stencilFunc;\n  }\n  /**\n   * Gets the current stencil reference value\n   * @returns a number defining the stencil reference value to use\n   */\n  getStencilFunctionReference() {\n    return this._stencilState.stencilFuncRef;\n  }\n  /**\n   * Gets the current stencil mask\n   * @returns a number defining the stencil mask to use\n   */\n  getStencilFunctionMask() {\n    return this._stencilState.stencilFuncMask;\n  }\n  /**\n   * Sets the current stencil function\n   * @param stencilFunc defines the new stencil function to use\n   */\n  setStencilFunction(stencilFunc) {\n    this._stencilState.stencilFunc = stencilFunc;\n  }\n  /**\n   * Sets the current stencil reference\n   * @param reference defines the new stencil reference to use\n   */\n  setStencilFunctionReference(reference) {\n    this._stencilState.stencilFuncRef = reference;\n  }\n  /**\n   * Sets the current stencil mask\n   * @param mask defines the new stencil mask to use\n   */\n  setStencilFunctionMask(mask) {\n    this._stencilState.stencilFuncMask = mask;\n  }\n  /**\n   * Gets the current stencil operation when stencil fails\n   * @returns a number defining stencil operation to use when stencil fails\n   */\n  getStencilOperationFail() {\n    return this._stencilState.stencilOpStencilFail;\n  }\n  /**\n   * Gets the current stencil operation when depth fails\n   * @returns a number defining stencil operation to use when depth fails\n   */\n  getStencilOperationDepthFail() {\n    return this._stencilState.stencilOpDepthFail;\n  }\n  /**\n   * Gets the current stencil operation when stencil passes\n   * @returns a number defining stencil operation to use when stencil passes\n   */\n  getStencilOperationPass() {\n    return this._stencilState.stencilOpStencilDepthPass;\n  }\n  /**\n   * Sets the stencil operation to use when stencil fails\n   * @param operation defines the stencil operation to use when stencil fails\n   */\n  setStencilOperationFail(operation) {\n    this._stencilState.stencilOpStencilFail = operation;\n  }\n  /**\n   * Sets the stencil operation to use when depth fails\n   * @param operation defines the stencil operation to use when depth fails\n   */\n  setStencilOperationDepthFail(operation) {\n    this._stencilState.stencilOpDepthFail = operation;\n  }\n  /**\n   * Sets the stencil operation to use when stencil passes\n   * @param operation defines the stencil operation to use when stencil passes\n   */\n  setStencilOperationPass(operation) {\n    this._stencilState.stencilOpStencilDepthPass = operation;\n  }\n  /**\n   * Sets a boolean indicating if the dithering state is enabled or disabled\n   * @param value defines the dithering state\n   */\n  setDitheringState(value) {\n    if (value) {\n      this._gl.enable(this._gl.DITHER);\n    } else {\n      this._gl.disable(this._gl.DITHER);\n    }\n  }\n  /**\n   * Sets a boolean indicating if the rasterizer state is enabled or disabled\n   * @param value defines the rasterizer state\n   */\n  setRasterizerState(value) {\n    if (value) {\n      this._gl.disable(this._gl.RASTERIZER_DISCARD);\n    } else {\n      this._gl.enable(this._gl.RASTERIZER_DISCARD);\n    }\n  }\n  /**\n   * Gets the current depth function\n   * @returns a number defining the depth function\n   */\n  getDepthFunction() {\n    return this._depthCullingState.depthFunc;\n  }\n  /**\n   * Sets the current depth function\n   * @param depthFunc defines the function to use\n   */\n  setDepthFunction(depthFunc) {\n    this._depthCullingState.depthFunc = depthFunc;\n  }\n  /**\n   * Sets the current depth function to GREATER\n   */\n  setDepthFunctionToGreater() {\n    this.setDepthFunction(516);\n  }\n  /**\n   * Sets the current depth function to GEQUAL\n   */\n  setDepthFunctionToGreaterOrEqual() {\n    this.setDepthFunction(518);\n  }\n  /**\n   * Sets the current depth function to LESS\n   */\n  setDepthFunctionToLess() {\n    this.setDepthFunction(513);\n  }\n  /**\n   * Sets the current depth function to LEQUAL\n   */\n  setDepthFunctionToLessOrEqual() {\n    this.setDepthFunction(515);\n  }\n  /**\n   * Caches the the state of the stencil buffer\n   */\n  cacheStencilState() {\n    this._cachedStencilBuffer = this.getStencilBuffer();\n    this._cachedStencilFunction = this.getStencilFunction();\n    this._cachedStencilMask = this.getStencilMask();\n    this._cachedStencilOperationPass = this.getStencilOperationPass();\n    this._cachedStencilOperationFail = this.getStencilOperationFail();\n    this._cachedStencilOperationDepthFail = this.getStencilOperationDepthFail();\n    this._cachedStencilReference = this.getStencilFunctionReference();\n  }\n  /**\n   * Restores the state of the stencil buffer\n   */\n  restoreStencilState() {\n    this.setStencilFunction(this._cachedStencilFunction);\n    this.setStencilMask(this._cachedStencilMask);\n    this.setStencilBuffer(this._cachedStencilBuffer);\n    this.setStencilOperationPass(this._cachedStencilOperationPass);\n    this.setStencilOperationFail(this._cachedStencilOperationFail);\n    this.setStencilOperationDepthFail(this._cachedStencilOperationDepthFail);\n    this.setStencilFunctionReference(this._cachedStencilReference);\n  }\n  /**\n   * Directly set the WebGL Viewport\n   * @param x defines the x coordinate of the viewport (in screen space)\n   * @param y defines the y coordinate of the viewport (in screen space)\n   * @param width defines the width of the viewport (in screen space)\n   * @param height defines the height of the viewport (in screen space)\n   * @returns the current viewport Object (if any) that is being replaced by this call. You can restore this viewport later on to go back to the original state\n   */\n  setDirectViewport(x, y, width, height) {\n    const currentViewport = this._cachedViewport;\n    this._cachedViewport = null;\n    this._viewport(x, y, width, height);\n    return currentViewport;\n  }\n  /**\n   * Executes a scissor clear (ie. a clear on a specific portion of the screen)\n   * @param x defines the x-coordinate of the bottom left corner of the clear rectangle\n   * @param y defines the y-coordinate of the corner of the clear rectangle\n   * @param width defines the width of the clear rectangle\n   * @param height defines the height of the clear rectangle\n   * @param clearColor defines the clear color\n   */\n  scissorClear(x, y, width, height, clearColor) {\n    this.enableScissor(x, y, width, height);\n    this.clear(clearColor, true, true, true);\n    this.disableScissor();\n  }\n  /**\n   * Enable scissor test on a specific rectangle (ie. render will only be executed on a specific portion of the screen)\n   * @param x defines the x-coordinate of the bottom left corner of the clear rectangle\n   * @param y defines the y-coordinate of the corner of the clear rectangle\n   * @param width defines the width of the clear rectangle\n   * @param height defines the height of the clear rectangle\n   */\n  enableScissor(x, y, width, height) {\n    const gl = this._gl;\n    // Change state\n    gl.enable(gl.SCISSOR_TEST);\n    gl.scissor(x, y, width, height);\n  }\n  /**\n   * Disable previously set scissor test rectangle\n   */\n  disableScissor() {\n    const gl = this._gl;\n    gl.disable(gl.SCISSOR_TEST);\n  }\n  /**\n   * @internal\n   */\n  _reportDrawCall(numDrawCalls = 1) {\n    this._drawCalls.addCount(numDrawCalls, false);\n  }\n  /**\n   * @internal\n   */\n  _loadFileAsync(url, offlineProvider, useArrayBuffer) {\n    return new Promise((resolve, reject) => {\n      this._loadFile(url, data => {\n        resolve(data);\n      }, undefined, offlineProvider, useArrayBuffer, (request, exception) => {\n        reject(exception);\n      });\n    });\n  }\n  /**\n   * Gets the source code of the vertex shader associated with a specific webGL program\n   * @param program defines the program to use\n   * @returns a string containing the source code of the vertex shader associated with the program\n   */\n  getVertexShaderSource(program) {\n    const shaders = this._gl.getAttachedShaders(program);\n    if (!shaders) {\n      return null;\n    }\n    return this._gl.getShaderSource(shaders[0]);\n  }\n  /**\n   * Gets the source code of the fragment shader associated with a specific webGL program\n   * @param program defines the program to use\n   * @returns a string containing the source code of the fragment shader associated with the program\n   */\n  getFragmentShaderSource(program) {\n    const shaders = this._gl.getAttachedShaders(program);\n    if (!shaders) {\n      return null;\n    }\n    return this._gl.getShaderSource(shaders[1]);\n  }\n  /**\n   * Sets a depth stencil texture from a render target to the according uniform.\n   * @param channel The texture channel\n   * @param uniform The uniform to set\n   * @param texture The render target texture containing the depth stencil texture to apply\n   * @param name The texture name\n   */\n  setDepthStencilTexture(channel, uniform, texture, name) {\n    if (channel === undefined) {\n      return;\n    }\n    if (uniform) {\n      this._boundUniforms[channel] = uniform;\n    }\n    if (!texture || !texture.depthStencilTexture) {\n      this._setTexture(channel, null, undefined, undefined, name);\n    } else {\n      this._setTexture(channel, texture, false, true, name);\n    }\n  }\n  /**\n   * Sets a texture to the webGL context from a postprocess\n   * @param channel defines the channel to use\n   * @param postProcess defines the source postprocess\n   * @param name name of the channel\n   */\n  setTextureFromPostProcess(channel, postProcess, name) {\n    var _a;\n    let postProcessInput = null;\n    if (postProcess) {\n      if (postProcess._forcedOutputTexture) {\n        postProcessInput = postProcess._forcedOutputTexture;\n      } else if (postProcess._textures.data[postProcess._currentRenderTextureInd]) {\n        postProcessInput = postProcess._textures.data[postProcess._currentRenderTextureInd];\n      }\n    }\n    this._bindTexture(channel, (_a = postProcessInput === null || postProcessInput === void 0 ? void 0 : postProcessInput.texture) !== null && _a !== void 0 ? _a : null, name);\n  }\n  /**\n   * Binds the output of the passed in post process to the texture channel specified\n   * @param channel The channel the texture should be bound to\n   * @param postProcess The post process which's output should be bound\n   * @param name name of the channel\n   */\n  setTextureFromPostProcessOutput(channel, postProcess, name) {\n    var _a, _b;\n    this._bindTexture(channel, (_b = (_a = postProcess === null || postProcess === void 0 ? void 0 : postProcess._outputTexture) === null || _a === void 0 ? void 0 : _a.texture) !== null && _b !== void 0 ? _b : null, name);\n  }\n  _rebuildBuffers() {\n    // Index / Vertex\n    for (const scene of this.scenes) {\n      scene.resetCachedMaterial();\n      scene._rebuildGeometries();\n      scene._rebuildTextures();\n    }\n    for (const scene of this._virtualScenes) {\n      scene.resetCachedMaterial();\n      scene._rebuildGeometries();\n      scene._rebuildTextures();\n    }\n    super._rebuildBuffers();\n  }\n  /** @internal */\n  _renderFrame() {\n    for (let index = 0; index < this._activeRenderLoops.length; index++) {\n      const renderFunction = this._activeRenderLoops[index];\n      renderFunction();\n    }\n  }\n  _cancelFrame() {\n    if (this._renderingQueueLaunched && this.customAnimationFrameRequester) {\n      this._renderingQueueLaunched = false;\n      const {\n        cancelAnimationFrame\n      } = this.customAnimationFrameRequester;\n      if (cancelAnimationFrame) {\n        cancelAnimationFrame(this.customAnimationFrameRequester.requestID);\n      }\n    } else {\n      super._cancelFrame();\n    }\n  }\n  _renderLoop() {\n    if (!this._contextWasLost) {\n      let shouldRender = true;\n      if (this.isDisposed || !this.renderEvenInBackground && this._windowIsBackground) {\n        shouldRender = false;\n      }\n      if (shouldRender) {\n        // Start new frame\n        this.beginFrame();\n        // Child canvases\n        if (!this._renderViews()) {\n          // Main frame\n          this._renderFrame();\n        }\n        // Present\n        this.endFrame();\n      }\n    }\n    if (this._activeRenderLoops.length > 0) {\n      // Register new frame\n      if (this.customAnimationFrameRequester) {\n        this.customAnimationFrameRequester.requestID = this._queueNewFrame(this.customAnimationFrameRequester.renderFunction || this._boundRenderFunction, this.customAnimationFrameRequester);\n        this._frameHandler = this.customAnimationFrameRequester.requestID;\n      } else {\n        this._frameHandler = this._queueNewFrame(this._boundRenderFunction, this.getHostWindow());\n      }\n    } else {\n      this._renderingQueueLaunched = false;\n    }\n  }\n  /** @internal */\n  _renderViews() {\n    return false;\n  }\n  /**\n   * Toggle full screen mode\n   * @param requestPointerLock defines if a pointer lock should be requested from the user\n   */\n  switchFullscreen(requestPointerLock) {\n    if (this.isFullscreen) {\n      this.exitFullscreen();\n    } else {\n      this.enterFullscreen(requestPointerLock);\n    }\n  }\n  /**\n   * Enters full screen mode\n   * @param requestPointerLock defines if a pointer lock should be requested from the user\n   */\n  enterFullscreen(requestPointerLock) {\n    if (!this.isFullscreen) {\n      this._pointerLockRequested = requestPointerLock;\n      if (this._renderingCanvas) {\n        Engine._RequestFullscreen(this._renderingCanvas);\n      }\n    }\n  }\n  /**\n   * Exits full screen mode\n   */\n  exitFullscreen() {\n    if (this.isFullscreen) {\n      Engine._ExitFullscreen();\n    }\n  }\n  /**\n   * Enters Pointerlock mode\n   */\n  enterPointerlock() {\n    if (this._renderingCanvas) {\n      Engine._RequestPointerlock(this._renderingCanvas);\n    }\n  }\n  /**\n   * Exits Pointerlock mode\n   */\n  exitPointerlock() {\n    Engine._ExitPointerlock();\n  }\n  /**\n   * Begin a new frame\n   */\n  beginFrame() {\n    this._measureFps();\n    this.onBeginFrameObservable.notifyObservers(this);\n    super.beginFrame();\n  }\n  /**\n   * End the current frame\n   */\n  endFrame() {\n    super.endFrame();\n    this.onEndFrameObservable.notifyObservers(this);\n  }\n  /**\n   * Force a specific size of the canvas\n   * @param width defines the new canvas' width\n   * @param height defines the new canvas' height\n   * @param forceSetSize true to force setting the sizes of the underlying canvas\n   * @returns true if the size was changed\n   */\n  setSize(width, height, forceSetSize = false) {\n    if (!this._renderingCanvas) {\n      return false;\n    }\n    if (!super.setSize(width, height, forceSetSize)) {\n      return false;\n    }\n    if (this.scenes) {\n      for (let index = 0; index < this.scenes.length; index++) {\n        const scene = this.scenes[index];\n        for (let camIndex = 0; camIndex < scene.cameras.length; camIndex++) {\n          const cam = scene.cameras[camIndex];\n          cam._currentRenderId = 0;\n        }\n      }\n      if (this.onResizeObservable.hasObservers()) {\n        this.onResizeObservable.notifyObservers(this);\n      }\n    }\n    return true;\n  }\n  _deletePipelineContext(pipelineContext) {\n    const webGLPipelineContext = pipelineContext;\n    if (webGLPipelineContext && webGLPipelineContext.program) {\n      if (webGLPipelineContext.transformFeedback) {\n        this.deleteTransformFeedback(webGLPipelineContext.transformFeedback);\n        webGLPipelineContext.transformFeedback = null;\n      }\n    }\n    super._deletePipelineContext(pipelineContext);\n  }\n  createShaderProgram(pipelineContext, vertexCode, fragmentCode, defines, context, transformFeedbackVaryings = null) {\n    context = context || this._gl;\n    this.onBeforeShaderCompilationObservable.notifyObservers(this);\n    const program = super.createShaderProgram(pipelineContext, vertexCode, fragmentCode, defines, context, transformFeedbackVaryings);\n    this.onAfterShaderCompilationObservable.notifyObservers(this);\n    return program;\n  }\n  _createShaderProgram(pipelineContext, vertexShader, fragmentShader, context, transformFeedbackVaryings = null) {\n    const shaderProgram = context.createProgram();\n    pipelineContext.program = shaderProgram;\n    if (!shaderProgram) {\n      throw new Error(\"Unable to create program\");\n    }\n    context.attachShader(shaderProgram, vertexShader);\n    context.attachShader(shaderProgram, fragmentShader);\n    if (this.webGLVersion > 1 && transformFeedbackVaryings) {\n      const transformFeedback = this.createTransformFeedback();\n      this.bindTransformFeedback(transformFeedback);\n      this.setTranformFeedbackVaryings(shaderProgram, transformFeedbackVaryings);\n      pipelineContext.transformFeedback = transformFeedback;\n    }\n    context.linkProgram(shaderProgram);\n    if (this.webGLVersion > 1 && transformFeedbackVaryings) {\n      this.bindTransformFeedback(null);\n    }\n    pipelineContext.context = context;\n    pipelineContext.vertexShader = vertexShader;\n    pipelineContext.fragmentShader = fragmentShader;\n    if (!pipelineContext.isParallelCompiled) {\n      this._finalizePipelineContext(pipelineContext);\n    }\n    return shaderProgram;\n  }\n  /**\n   * @internal\n   */\n  _releaseTexture(texture) {\n    super._releaseTexture(texture);\n  }\n  /**\n   * @internal\n   */\n  _releaseRenderTargetWrapper(rtWrapper) {\n    super._releaseRenderTargetWrapper(rtWrapper);\n    // Set output texture of post process to null if the framebuffer has been released/disposed\n    this.scenes.forEach(scene => {\n      scene.postProcesses.forEach(postProcess => {\n        if (postProcess._outputTexture === rtWrapper) {\n          postProcess._outputTexture = null;\n        }\n      });\n      scene.cameras.forEach(camera => {\n        camera._postProcesses.forEach(postProcess => {\n          if (postProcess) {\n            if (postProcess._outputTexture === rtWrapper) {\n              postProcess._outputTexture = null;\n            }\n          }\n        });\n      });\n    });\n  }\n  /**\n   * Gets the names of the render passes that are currently created\n   * @returns list of the render pass names\n   */\n  getRenderPassNames() {\n    return this._renderPassNames;\n  }\n  /**\n   * Gets the name of the current render pass\n   * @returns name of the current render pass\n   */\n  getCurrentRenderPassName() {\n    return this._renderPassNames[this.currentRenderPassId];\n  }\n  /**\n   * Creates a render pass id\n   * @param name Name of the render pass (for debug purpose only)\n   * @returns the id of the new render pass\n   */\n  createRenderPassId(name) {\n    // Note: render pass id == 0 is always for the main render pass\n    const id = ++Engine._RenderPassIdCounter;\n    this._renderPassNames[id] = name !== null && name !== void 0 ? name : \"NONAME\";\n    return id;\n  }\n  /**\n   * Releases a render pass id\n   * @param id id of the render pass to release\n   */\n  releaseRenderPassId(id) {\n    this._renderPassNames[id] = undefined;\n    for (let s = 0; s < this.scenes.length; ++s) {\n      const scene = this.scenes[s];\n      for (let m = 0; m < scene.meshes.length; ++m) {\n        const mesh = scene.meshes[m];\n        if (mesh.subMeshes) {\n          for (let b = 0; b < mesh.subMeshes.length; ++b) {\n            const subMesh = mesh.subMeshes[b];\n            subMesh._removeDrawWrapper(id);\n          }\n        }\n      }\n    }\n  }\n  /**\n   * @internal\n   * Rescales a texture\n   * @param source input texture\n   * @param destination destination texture\n   * @param scene scene to use to render the resize\n   * @param internalFormat format to use when resizing\n   * @param onComplete callback to be called when resize has completed\n   */\n  _rescaleTexture(source, destination, scene, internalFormat, onComplete) {\n    this._gl.texParameteri(this._gl.TEXTURE_2D, this._gl.TEXTURE_MAG_FILTER, this._gl.LINEAR);\n    this._gl.texParameteri(this._gl.TEXTURE_2D, this._gl.TEXTURE_MIN_FILTER, this._gl.LINEAR);\n    this._gl.texParameteri(this._gl.TEXTURE_2D, this._gl.TEXTURE_WRAP_S, this._gl.CLAMP_TO_EDGE);\n    this._gl.texParameteri(this._gl.TEXTURE_2D, this._gl.TEXTURE_WRAP_T, this._gl.CLAMP_TO_EDGE);\n    const rtt = this.createRenderTargetTexture({\n      width: destination.width,\n      height: destination.height\n    }, {\n      generateMipMaps: false,\n      type: 0,\n      samplingMode: 2,\n      generateDepthBuffer: false,\n      generateStencilBuffer: false\n    });\n    if (!this._rescalePostProcess && Engine._RescalePostProcessFactory) {\n      this._rescalePostProcess = Engine._RescalePostProcessFactory(this);\n    }\n    if (this._rescalePostProcess) {\n      this._rescalePostProcess.externalTextureSamplerBinding = true;\n      this._rescalePostProcess.getEffect().executeWhenCompiled(() => {\n        this._rescalePostProcess.onApply = function (effect) {\n          effect._bindTexture(\"textureSampler\", source);\n        };\n        let hostingScene = scene;\n        if (!hostingScene) {\n          hostingScene = this.scenes[this.scenes.length - 1];\n        }\n        hostingScene.postProcessManager.directRender([this._rescalePostProcess], rtt, true);\n        this._bindTextureDirectly(this._gl.TEXTURE_2D, destination, true);\n        this._gl.copyTexImage2D(this._gl.TEXTURE_2D, 0, internalFormat, 0, 0, destination.width, destination.height, 0);\n        this.unBindFramebuffer(rtt);\n        rtt.dispose();\n        if (onComplete) {\n          onComplete();\n        }\n      });\n    }\n  }\n  // FPS\n  /**\n   * Gets the current framerate\n   * @returns a number representing the framerate\n   */\n  getFps() {\n    return this._fps;\n  }\n  /**\n   * Gets the time spent between current and previous frame\n   * @returns a number representing the delta time in ms\n   */\n  getDeltaTime() {\n    return this._deltaTime;\n  }\n  _measureFps() {\n    this._performanceMonitor.sampleFrame();\n    this._fps = this._performanceMonitor.averageFPS;\n    this._deltaTime = this._performanceMonitor.instantaneousFrameTime || 0;\n  }\n  /**\n   * Wraps an external web gl texture in a Babylon texture.\n   * @param texture defines the external texture\n   * @param hasMipMaps defines whether the external texture has mip maps (default: false)\n   * @param samplingMode defines the sampling mode for the external texture (default: 3)\n   * @param width defines the width for the external texture (default: 0)\n   * @param height defines the height for the external texture (default: 0)\n   * @returns the babylon internal texture\n   */\n  wrapWebGLTexture(texture, hasMipMaps = false, samplingMode = 3, width = 0, height = 0) {\n    const hardwareTexture = new WebGLHardwareTexture(texture, this._gl);\n    const internalTexture = new InternalTexture(this, InternalTextureSource.Unknown, true);\n    internalTexture._hardwareTexture = hardwareTexture;\n    internalTexture.baseWidth = width;\n    internalTexture.baseHeight = height;\n    internalTexture.width = width;\n    internalTexture.height = height;\n    internalTexture.isReady = true;\n    internalTexture.useMipMaps = hasMipMaps;\n    this.updateTextureSamplingMode(samplingMode, internalTexture);\n    return internalTexture;\n  }\n  /**\n   * @internal\n   */\n  _uploadImageToTexture(texture, image, faceIndex = 0, lod = 0) {\n    const gl = this._gl;\n    const textureType = this._getWebGLTextureType(texture.type);\n    const format = this._getInternalFormat(texture.format);\n    const internalFormat = this._getRGBABufferInternalSizedFormat(texture.type, format);\n    const bindTarget = texture.isCube ? gl.TEXTURE_CUBE_MAP : gl.TEXTURE_2D;\n    this._bindTextureDirectly(bindTarget, texture, true);\n    this._unpackFlipY(texture.invertY);\n    let target = gl.TEXTURE_2D;\n    if (texture.isCube) {\n      target = gl.TEXTURE_CUBE_MAP_POSITIVE_X + faceIndex;\n    }\n    gl.texImage2D(target, lod, internalFormat, format, textureType, image);\n    this._bindTextureDirectly(bindTarget, null, true);\n  }\n  /**\n   * Updates a depth texture Comparison Mode and Function.\n   * If the comparison Function is equal to 0, the mode will be set to none.\n   * Otherwise, this only works in webgl 2 and requires a shadow sampler in the shader.\n   * @param texture The texture to set the comparison function for\n   * @param comparisonFunction The comparison function to set, 0 if no comparison required\n   */\n  updateTextureComparisonFunction(texture, comparisonFunction) {\n    if (this.webGLVersion === 1) {\n      Logger.Error(\"WebGL 1 does not support texture comparison.\");\n      return;\n    }\n    const gl = this._gl;\n    if (texture.isCube) {\n      this._bindTextureDirectly(this._gl.TEXTURE_CUBE_MAP, texture, true);\n      if (comparisonFunction === 0) {\n        gl.texParameteri(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_COMPARE_FUNC, 515);\n        gl.texParameteri(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_COMPARE_MODE, gl.NONE);\n      } else {\n        gl.texParameteri(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_COMPARE_FUNC, comparisonFunction);\n        gl.texParameteri(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_COMPARE_MODE, gl.COMPARE_REF_TO_TEXTURE);\n      }\n      this._bindTextureDirectly(this._gl.TEXTURE_CUBE_MAP, null);\n    } else {\n      this._bindTextureDirectly(this._gl.TEXTURE_2D, texture, true);\n      if (comparisonFunction === 0) {\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_COMPARE_FUNC, 515);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_COMPARE_MODE, gl.NONE);\n      } else {\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_COMPARE_FUNC, comparisonFunction);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_COMPARE_MODE, gl.COMPARE_REF_TO_TEXTURE);\n      }\n      this._bindTextureDirectly(this._gl.TEXTURE_2D, null);\n    }\n    texture._comparisonFunction = comparisonFunction;\n  }\n  /**\n   * Creates a webGL buffer to use with instantiation\n   * @param capacity defines the size of the buffer\n   * @returns the webGL buffer\n   */\n  createInstancesBuffer(capacity) {\n    const buffer = this._gl.createBuffer();\n    if (!buffer) {\n      throw new Error(\"Unable to create instance buffer\");\n    }\n    const result = new WebGLDataBuffer(buffer);\n    result.capacity = capacity;\n    this.bindArrayBuffer(result);\n    this._gl.bufferData(this._gl.ARRAY_BUFFER, capacity, this._gl.DYNAMIC_DRAW);\n    result.references = 1;\n    return result;\n  }\n  /**\n   * Delete a webGL buffer used with instantiation\n   * @param buffer defines the webGL buffer to delete\n   */\n  deleteInstancesBuffer(buffer) {\n    this._gl.deleteBuffer(buffer);\n  }\n  _clientWaitAsync(sync, flags = 0, intervalms = 10) {\n    const gl = this._gl;\n    return new Promise((resolve, reject) => {\n      const check = () => {\n        const res = gl.clientWaitSync(sync, flags, 0);\n        if (res == gl.WAIT_FAILED) {\n          reject();\n          return;\n        }\n        if (res == gl.TIMEOUT_EXPIRED) {\n          setTimeout(check, intervalms);\n          return;\n        }\n        resolve();\n      };\n      check();\n    });\n  }\n  /**\n   * @internal\n   */\n  _readPixelsAsync(x, y, w, h, format, type, outputBuffer) {\n    if (this._webGLVersion < 2) {\n      throw new Error(\"_readPixelsAsync only work on WebGL2+\");\n    }\n    const gl = this._gl;\n    const buf = gl.createBuffer();\n    gl.bindBuffer(gl.PIXEL_PACK_BUFFER, buf);\n    gl.bufferData(gl.PIXEL_PACK_BUFFER, outputBuffer.byteLength, gl.STREAM_READ);\n    gl.readPixels(x, y, w, h, format, type, 0);\n    gl.bindBuffer(gl.PIXEL_PACK_BUFFER, null);\n    const sync = gl.fenceSync(gl.SYNC_GPU_COMMANDS_COMPLETE, 0);\n    if (!sync) {\n      return null;\n    }\n    gl.flush();\n    return this._clientWaitAsync(sync, 0, 10).then(() => {\n      gl.deleteSync(sync);\n      gl.bindBuffer(gl.PIXEL_PACK_BUFFER, buf);\n      gl.getBufferSubData(gl.PIXEL_PACK_BUFFER, 0, outputBuffer);\n      gl.bindBuffer(gl.PIXEL_PACK_BUFFER, null);\n      gl.deleteBuffer(buf);\n      return outputBuffer;\n    });\n  }\n  dispose() {\n    this.hideLoadingUI();\n    this.onNewSceneAddedObservable.clear();\n    // Release postProcesses\n    while (this.postProcesses.length) {\n      this.postProcesses[0].dispose();\n    }\n    // Rescale PP\n    if (this._rescalePostProcess) {\n      this._rescalePostProcess.dispose();\n    }\n    // Release scenes\n    while (this.scenes.length) {\n      this.scenes[0].dispose();\n    }\n    while (this._virtualScenes.length) {\n      this._virtualScenes[0].dispose();\n    }\n    // Release audio engine\n    if (EngineStore.Instances.length === 1 && Engine.audioEngine) {\n      Engine.audioEngine.dispose();\n      Engine.audioEngine = null;\n    }\n    // Events\n    const hostWindow = this.getHostWindow(); // it calls IsWindowObjectExist()\n    if (hostWindow && typeof hostWindow.removeEventListener === \"function\") {\n      hostWindow.removeEventListener(\"blur\", this._onBlur);\n      hostWindow.removeEventListener(\"focus\", this._onFocus);\n    }\n    if (this._renderingCanvas) {\n      this._renderingCanvas.removeEventListener(\"focus\", this._onCanvasFocus);\n      this._renderingCanvas.removeEventListener(\"blur\", this._onCanvasBlur);\n      this._renderingCanvas.removeEventListener(\"pointerout\", this._onCanvasPointerOut);\n      this._renderingCanvas.removeEventListener(\"contextmenu\", this._onCanvasContextMenu);\n    }\n    if (IsDocumentAvailable()) {\n      document.removeEventListener(\"fullscreenchange\", this._onFullscreenChange);\n      document.removeEventListener(\"mozfullscreenchange\", this._onFullscreenChange);\n      document.removeEventListener(\"webkitfullscreenchange\", this._onFullscreenChange);\n      document.removeEventListener(\"msfullscreenchange\", this._onFullscreenChange);\n      document.removeEventListener(\"pointerlockchange\", this._onPointerLockChange);\n      document.removeEventListener(\"mspointerlockchange\", this._onPointerLockChange);\n      document.removeEventListener(\"mozpointerlockchange\", this._onPointerLockChange);\n      document.removeEventListener(\"webkitpointerlockchange\", this._onPointerLockChange);\n    }\n    super.dispose();\n    // Remove from Instances\n    const index = EngineStore.Instances.indexOf(this);\n    if (index >= 0) {\n      EngineStore.Instances.splice(index, 1);\n    }\n    // no more engines left in the engine store? Notify!\n    if (!Engine.Instances.length) {\n      EngineStore.OnEnginesDisposedObservable.notifyObservers(this);\n    }\n    // Observables\n    this.onResizeObservable.clear();\n    this.onCanvasBlurObservable.clear();\n    this.onCanvasFocusObservable.clear();\n    this.onCanvasPointerOutObservable.clear();\n    this.onBeginFrameObservable.clear();\n    this.onEndFrameObservable.clear();\n  }\n  _disableTouchAction() {\n    if (!this._renderingCanvas || !this._renderingCanvas.setAttribute) {\n      return;\n    }\n    this._renderingCanvas.setAttribute(\"touch-action\", \"none\");\n    this._renderingCanvas.style.touchAction = \"none\";\n    this._renderingCanvas.style.webkitTapHighlightColor = \"transparent\";\n  }\n  // Loading screen\n  /**\n   * Display the loading screen\n   * @see https://doc.babylonjs.com/features/featuresDeepDive/scene/customLoadingScreen\n   */\n  displayLoadingUI() {\n    if (!IsWindowObjectExist()) {\n      return;\n    }\n    const loadingScreen = this.loadingScreen;\n    if (loadingScreen) {\n      loadingScreen.displayLoadingUI();\n    }\n  }\n  /**\n   * Hide the loading screen\n   * @see https://doc.babylonjs.com/features/featuresDeepDive/scene/customLoadingScreen\n   */\n  hideLoadingUI() {\n    if (!IsWindowObjectExist()) {\n      return;\n    }\n    const loadingScreen = this._loadingScreen;\n    if (loadingScreen) {\n      loadingScreen.hideLoadingUI();\n    }\n  }\n  /**\n   * Gets the current loading screen object\n   * @see https://doc.babylonjs.com/features/featuresDeepDive/scene/customLoadingScreen\n   */\n  get loadingScreen() {\n    if (!this._loadingScreen && this._renderingCanvas) {\n      this._loadingScreen = Engine.DefaultLoadingScreenFactory(this._renderingCanvas);\n    }\n    return this._loadingScreen;\n  }\n  /**\n   * Sets the current loading screen object\n   * @see https://doc.babylonjs.com/features/featuresDeepDive/scene/customLoadingScreen\n   */\n  set loadingScreen(loadingScreen) {\n    this._loadingScreen = loadingScreen;\n  }\n  /**\n   * Sets the current loading screen text\n   * @see https://doc.babylonjs.com/features/featuresDeepDive/scene/customLoadingScreen\n   */\n  set loadingUIText(text) {\n    this.loadingScreen.loadingUIText = text;\n  }\n  /**\n   * Sets the current loading screen background color\n   * @see https://doc.babylonjs.com/features/featuresDeepDive/scene/customLoadingScreen\n   */\n  set loadingUIBackgroundColor(color) {\n    this.loadingScreen.loadingUIBackgroundColor = color;\n  }\n  /**\n   * creates and returns a new video element\n   * @param constraints video constraints\n   * @returns video element\n   */\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  createVideoElement(constraints) {\n    return document.createElement(\"video\");\n  }\n  /** Pointerlock and fullscreen */\n  /**\n   * Ask the browser to promote the current element to pointerlock mode\n   * @param element defines the DOM element to promote\n   */\n  static _RequestPointerlock(element) {\n    if (element.requestPointerLock) {\n      // In some browsers, requestPointerLock returns a promise.\n      // Handle possible rejections to avoid an unhandled top-level exception.\n      const promise = element.requestPointerLock();\n      if (promise instanceof Promise) promise.then(() => {\n        element.focus();\n      }).catch(() => {});else element.focus();\n    }\n  }\n  /**\n   * Asks the browser to exit pointerlock mode\n   */\n  static _ExitPointerlock() {\n    if (document.exitPointerLock) {\n      document.exitPointerLock();\n    }\n  }\n  /**\n   * Ask the browser to promote the current element to fullscreen rendering mode\n   * @param element defines the DOM element to promote\n   */\n  static _RequestFullscreen(element) {\n    const requestFunction = element.requestFullscreen || element.webkitRequestFullscreen;\n    if (!requestFunction) {\n      return;\n    }\n    requestFunction.call(element);\n  }\n  /**\n   * Asks the browser to exit fullscreen mode\n   */\n  static _ExitFullscreen() {\n    const anyDoc = document;\n    if (document.exitFullscreen) {\n      document.exitFullscreen();\n    } else if (anyDoc.webkitCancelFullScreen) {\n      anyDoc.webkitCancelFullScreen();\n    }\n  }\n  /**\n   * Get Font size information\n   * @param font font name\n   * @returns an object containing ascent, height and descent\n   */\n  getFontOffset(font) {\n    const text = document.createElement(\"span\");\n    text.innerHTML = \"Hg\";\n    text.setAttribute(\"style\", `font: ${font} !important`);\n    const block = document.createElement(\"div\");\n    block.style.display = \"inline-block\";\n    block.style.width = \"1px\";\n    block.style.height = \"0px\";\n    block.style.verticalAlign = \"bottom\";\n    const div = document.createElement(\"div\");\n    div.style.whiteSpace = \"nowrap\";\n    div.appendChild(text);\n    div.appendChild(block);\n    document.body.appendChild(div);\n    let fontAscent = 0;\n    let fontHeight = 0;\n    try {\n      fontHeight = block.getBoundingClientRect().top - text.getBoundingClientRect().top;\n      block.style.verticalAlign = \"baseline\";\n      fontAscent = block.getBoundingClientRect().top - text.getBoundingClientRect().top;\n    } finally {\n      document.body.removeChild(div);\n    }\n    return {\n      ascent: fontAscent,\n      height: fontHeight,\n      descent: fontHeight - fontAscent\n    };\n  }\n}\n// Const statics\n/** Defines that alpha blending is disabled */\nEngine.ALPHA_DISABLE = 0;\n/** Defines that alpha blending to SRC ALPHA * SRC + DEST */\nEngine.ALPHA_ADD = 1;\n/** Defines that alpha blending to SRC ALPHA * SRC + (1 - SRC ALPHA) * DEST */\nEngine.ALPHA_COMBINE = 2;\n/** Defines that alpha blending to DEST - SRC * DEST */\nEngine.ALPHA_SUBTRACT = 3;\n/** Defines that alpha blending to SRC * DEST */\nEngine.ALPHA_MULTIPLY = 4;\n/** Defines that alpha blending to SRC ALPHA * SRC + (1 - SRC) * DEST */\nEngine.ALPHA_MAXIMIZED = 5;\n/** Defines that alpha blending to SRC + DEST */\nEngine.ALPHA_ONEONE = 6;\n/** Defines that alpha blending to SRC + (1 - SRC ALPHA) * DEST */\nEngine.ALPHA_PREMULTIPLIED = 7;\n/**\n * Defines that alpha blending to SRC + (1 - SRC ALPHA) * DEST\n * Alpha will be set to (1 - SRC ALPHA) * DEST ALPHA\n */\nEngine.ALPHA_PREMULTIPLIED_PORTERDUFF = 8;\n/** Defines that alpha blending to CST * SRC + (1 - CST) * DEST */\nEngine.ALPHA_INTERPOLATE = 9;\n/**\n * Defines that alpha blending to SRC + (1 - SRC) * DEST\n * Alpha will be set to SRC ALPHA + (1 - SRC ALPHA) * DEST ALPHA\n */\nEngine.ALPHA_SCREENMODE = 10;\n/** Defines that the resource is not delayed*/\nEngine.DELAYLOADSTATE_NONE = 0;\n/** Defines that the resource was successfully delay loaded */\nEngine.DELAYLOADSTATE_LOADED = 1;\n/** Defines that the resource is currently delay loading */\nEngine.DELAYLOADSTATE_LOADING = 2;\n/** Defines that the resource is delayed and has not started loading */\nEngine.DELAYLOADSTATE_NOTLOADED = 4;\n// Depht or Stencil test Constants.\n/** Passed to depthFunction or stencilFunction to specify depth or stencil tests will never pass. i.e. Nothing will be drawn */\nEngine.NEVER = 512;\n/** Passed to depthFunction or stencilFunction to specify depth or stencil tests will always pass. i.e. Pixels will be drawn in the order they are drawn */\nEngine.ALWAYS = 519;\n/** Passed to depthFunction or stencilFunction to specify depth or stencil tests will pass if the new depth value is less than the stored value */\nEngine.LESS = 513;\n/** Passed to depthFunction or stencilFunction to specify depth or stencil tests will pass if the new depth value is equals to the stored value */\nEngine.EQUAL = 514;\n/** Passed to depthFunction or stencilFunction to specify depth or stencil tests will pass if the new depth value is less than or equal to the stored value */\nEngine.LEQUAL = 515;\n/** Passed to depthFunction or stencilFunction to specify depth or stencil tests will pass if the new depth value is greater than the stored value */\nEngine.GREATER = 516;\n/** Passed to depthFunction or stencilFunction to specify depth or stencil tests will pass if the new depth value is greater than or equal to the stored value */\nEngine.GEQUAL = 518;\n/** Passed to depthFunction or stencilFunction to specify depth or stencil tests will pass if the new depth value is not equal to the stored value */\nEngine.NOTEQUAL = 517;\n// Stencil Actions Constants.\n/** Passed to stencilOperation to specify that stencil value must be kept */\nEngine.KEEP = 7680;\n/** Passed to stencilOperation to specify that stencil value must be replaced */\nEngine.REPLACE = 7681;\n/** Passed to stencilOperation to specify that stencil value must be incremented */\nEngine.INCR = 7682;\n/** Passed to stencilOperation to specify that stencil value must be decremented */\nEngine.DECR = 7683;\n/** Passed to stencilOperation to specify that stencil value must be inverted */\nEngine.INVERT = 5386;\n/** Passed to stencilOperation to specify that stencil value must be incremented with wrapping */\nEngine.INCR_WRAP = 34055;\n/** Passed to stencilOperation to specify that stencil value must be decremented with wrapping */\nEngine.DECR_WRAP = 34056;\n/** Texture is not repeating outside of 0..1 UVs */\nEngine.TEXTURE_CLAMP_ADDRESSMODE = 0;\n/** Texture is repeating outside of 0..1 UVs */\nEngine.TEXTURE_WRAP_ADDRESSMODE = 1;\n/** Texture is repeating and mirrored */\nEngine.TEXTURE_MIRROR_ADDRESSMODE = 2;\n/** ALPHA */\nEngine.TEXTUREFORMAT_ALPHA = 0;\n/** LUMINANCE */\nEngine.TEXTUREFORMAT_LUMINANCE = 1;\n/** LUMINANCE_ALPHA */\nEngine.TEXTUREFORMAT_LUMINANCE_ALPHA = 2;\n/** RGB */\nEngine.TEXTUREFORMAT_RGB = 4;\n/** RGBA */\nEngine.TEXTUREFORMAT_RGBA = 5;\n/** RED */\nEngine.TEXTUREFORMAT_RED = 6;\n/** RED (2nd reference) */\nEngine.TEXTUREFORMAT_R = 6;\n/** RG */\nEngine.TEXTUREFORMAT_RG = 7;\n/** RED_INTEGER */\nEngine.TEXTUREFORMAT_RED_INTEGER = 8;\n/** RED_INTEGER (2nd reference) */\nEngine.TEXTUREFORMAT_R_INTEGER = 8;\n/** RG_INTEGER */\nEngine.TEXTUREFORMAT_RG_INTEGER = 9;\n/** RGB_INTEGER */\nEngine.TEXTUREFORMAT_RGB_INTEGER = 10;\n/** RGBA_INTEGER */\nEngine.TEXTUREFORMAT_RGBA_INTEGER = 11;\n/** UNSIGNED_BYTE */\nEngine.TEXTURETYPE_UNSIGNED_BYTE = 0;\n/** UNSIGNED_BYTE (2nd reference) */\nEngine.TEXTURETYPE_UNSIGNED_INT = 0;\n/** FLOAT */\nEngine.TEXTURETYPE_FLOAT = 1;\n/** HALF_FLOAT */\nEngine.TEXTURETYPE_HALF_FLOAT = 2;\n/** BYTE */\nEngine.TEXTURETYPE_BYTE = 3;\n/** SHORT */\nEngine.TEXTURETYPE_SHORT = 4;\n/** UNSIGNED_SHORT */\nEngine.TEXTURETYPE_UNSIGNED_SHORT = 5;\n/** INT */\nEngine.TEXTURETYPE_INT = 6;\n/** UNSIGNED_INT */\nEngine.TEXTURETYPE_UNSIGNED_INTEGER = 7;\n/** UNSIGNED_SHORT_4_4_4_4 */\nEngine.TEXTURETYPE_UNSIGNED_SHORT_4_4_4_4 = 8;\n/** UNSIGNED_SHORT_5_5_5_1 */\nEngine.TEXTURETYPE_UNSIGNED_SHORT_5_5_5_1 = 9;\n/** UNSIGNED_SHORT_5_6_5 */\nEngine.TEXTURETYPE_UNSIGNED_SHORT_5_6_5 = 10;\n/** UNSIGNED_INT_2_10_10_10_REV */\nEngine.TEXTURETYPE_UNSIGNED_INT_2_10_10_10_REV = 11;\n/** UNSIGNED_INT_24_8 */\nEngine.TEXTURETYPE_UNSIGNED_INT_24_8 = 12;\n/** UNSIGNED_INT_10F_11F_11F_REV */\nEngine.TEXTURETYPE_UNSIGNED_INT_10F_11F_11F_REV = 13;\n/** UNSIGNED_INT_5_9_9_9_REV */\nEngine.TEXTURETYPE_UNSIGNED_INT_5_9_9_9_REV = 14;\n/** FLOAT_32_UNSIGNED_INT_24_8_REV */\nEngine.TEXTURETYPE_FLOAT_32_UNSIGNED_INT_24_8_REV = 15;\n/** nearest is mag = nearest and min = nearest and mip = none */\nEngine.TEXTURE_NEAREST_SAMPLINGMODE = 1;\n/** Bilinear is mag = linear and min = linear and mip = nearest */\nEngine.TEXTURE_BILINEAR_SAMPLINGMODE = 2;\n/** Trilinear is mag = linear and min = linear and mip = linear */\nEngine.TEXTURE_TRILINEAR_SAMPLINGMODE = 3;\n/** nearest is mag = nearest and min = nearest and mip = linear */\nEngine.TEXTURE_NEAREST_NEAREST_MIPLINEAR = 8;\n/** Bilinear is mag = linear and min = linear and mip = nearest */\nEngine.TEXTURE_LINEAR_LINEAR_MIPNEAREST = 11;\n/** Trilinear is mag = linear and min = linear and mip = linear */\nEngine.TEXTURE_LINEAR_LINEAR_MIPLINEAR = 3;\n/** mag = nearest and min = nearest and mip = nearest */\nEngine.TEXTURE_NEAREST_NEAREST_MIPNEAREST = 4;\n/** mag = nearest and min = linear and mip = nearest */\nEngine.TEXTURE_NEAREST_LINEAR_MIPNEAREST = 5;\n/** mag = nearest and min = linear and mip = linear */\nEngine.TEXTURE_NEAREST_LINEAR_MIPLINEAR = 6;\n/** mag = nearest and min = linear and mip = none */\nEngine.TEXTURE_NEAREST_LINEAR = 7;\n/** mag = nearest and min = nearest and mip = none */\nEngine.TEXTURE_NEAREST_NEAREST = 1;\n/** mag = linear and min = nearest and mip = nearest */\nEngine.TEXTURE_LINEAR_NEAREST_MIPNEAREST = 9;\n/** mag = linear and min = nearest and mip = linear */\nEngine.TEXTURE_LINEAR_NEAREST_MIPLINEAR = 10;\n/** mag = linear and min = linear and mip = none */\nEngine.TEXTURE_LINEAR_LINEAR = 2;\n/** mag = linear and min = nearest and mip = none */\nEngine.TEXTURE_LINEAR_NEAREST = 12;\n/** Explicit coordinates mode */\nEngine.TEXTURE_EXPLICIT_MODE = 0;\n/** Spherical coordinates mode */\nEngine.TEXTURE_SPHERICAL_MODE = 1;\n/** Planar coordinates mode */\nEngine.TEXTURE_PLANAR_MODE = 2;\n/** Cubic coordinates mode */\nEngine.TEXTURE_CUBIC_MODE = 3;\n/** Projection coordinates mode */\nEngine.TEXTURE_PROJECTION_MODE = 4;\n/** Skybox coordinates mode */\nEngine.TEXTURE_SKYBOX_MODE = 5;\n/** Inverse Cubic coordinates mode */\nEngine.TEXTURE_INVCUBIC_MODE = 6;\n/** Equirectangular coordinates mode */\nEngine.TEXTURE_EQUIRECTANGULAR_MODE = 7;\n/** Equirectangular Fixed coordinates mode */\nEngine.TEXTURE_FIXED_EQUIRECTANGULAR_MODE = 8;\n/** Equirectangular Fixed Mirrored coordinates mode */\nEngine.TEXTURE_FIXED_EQUIRECTANGULAR_MIRRORED_MODE = 9;\n// Texture rescaling mode\n/** Defines that texture rescaling will use a floor to find the closer power of 2 size */\nEngine.SCALEMODE_FLOOR = 1;\n/** Defines that texture rescaling will look for the nearest power of 2 size */\nEngine.SCALEMODE_NEAREST = 2;\n/** Defines that texture rescaling will use a ceil to find the closer power of 2 size */\nEngine.SCALEMODE_CEILING = 3;\n/**\n * Method called to create the default rescale post process on each engine.\n */\nEngine._RescalePostProcessFactory = null;\n// eslint-disable-next-line @typescript-eslint/naming-convention\nEngine._RenderPassIdCounter = 0;","map":{"version":3,"names":["Observable","InternalTexture","InternalTextureSource","IsDocumentAvailable","IsWindowObjectExist","EngineStore","_WarnImport","ThinEngine","PerformanceMonitor","PerfCounter","WebGLDataBuffer","Logger","WebGLHardwareTexture","Engine","NpmPackage","Version","Instances","LastCreatedEngine","LastCreatedScene","_createImageBitmapFromSource","imageSource","options","promise","Promise","resolve","reject","image","Image","onload","decode","then","createImageBitmap","imageBitmap","onerror","src","resizeImageBitmap","bufferWidth","bufferHeight","canvas","createCanvas","context","getContext","Error","drawImage","buffer","getImageData","data","MarkAllMaterialsAsDirty","flag","predicate","engineIndex","length","engine","sceneIndex","scenes","markAllMaterialsAsDirty","DefaultLoadingScreenFactory","_supportsHardwareTextureRescaling","_RescalePostProcessFactory","performanceMonitor","_performanceMonitor","compatibilityMode","_compatibilityMode","mode","getInputElement","_renderingCanvas","constructor","canvasOrContext","antialias","adaptToDeviceRatio","enableOfflineSupport","disableManifestCheck","disableContextMenu","Array","_virtualScenes","onNewSceneAddedObservable","postProcesses","isPointerLock","onResizeObservable","onCanvasBlurObservable","onCanvasFocusObservable","onCanvasPointerOutObservable","onBeginFrameObservable","customAnimationFrameRequester","onEndFrameObservable","onBeforeShaderCompilationObservable","onAfterShaderCompilationObservable","_deterministicLockstep","_lockstepMaxSteps","_timeStep","_fps","_deltaTime","_drawCalls","canvasTabIndex","disablePerformanceMonitorInBackground","currentRenderPassId","_renderPassNames","push","_features","supportRenderPasses","_creationOptions","_sharedInit","_initGLContext","_rescalePostProcess","_onCanvasFocus","notifyObservers","_onCanvasBlur","_onCanvasContextMenu","evt","preventDefault","addEventListener","_onBlur","disable","_windowIsBackground","_onFocus","enable","_onCanvasPointerOut","ev","document","elementFromPoint","clientX","clientY","hostWindow","getHostWindow","doNotHandleTouchAction","_disableTouchAction","audioEngine","AudioEngineFactory","getRenderingCanvas","getAudioContext","getAudioDestination","_onFullscreenChange","isFullscreen","fullscreenElement","_pointerLockRequested","_RequestPointerlock","_onPointerLockChange","pointerLockElement","OfflineProviderFactory","undefined","deterministicLockstep","lockstepMaxSteps","timeStep","_verifyPointerLock","_a","call","getAspectRatio","viewportOwner","useScreen","viewport","getRenderWidth","width","getRenderHeight","height","getScreenAspectRatio","getRenderingCanvasClientRect","getBoundingClientRect","getInputElementClientRect","isDeterministicLockStep","getLockstepMaxSteps","getTimeStep","generateMipMapsForCubemap","texture","unbind","generateMipMaps","gl","_gl","_bindTextureDirectly","TEXTURE_CUBE_MAP","generateMipmap","getDepthWrite","_depthCullingState","depthMask","setDepthWrite","getStencilBuffer","_stencilState","stencilTest","setStencilBuffer","getStencilMask","stencilMask","setStencilMask","mask","getStencilFunction","stencilFunc","getStencilFunctionReference","stencilFuncRef","getStencilFunctionMask","stencilFuncMask","setStencilFunction","setStencilFunctionReference","reference","setStencilFunctionMask","getStencilOperationFail","stencilOpStencilFail","getStencilOperationDepthFail","stencilOpDepthFail","getStencilOperationPass","stencilOpStencilDepthPass","setStencilOperationFail","operation","setStencilOperationDepthFail","setStencilOperationPass","setDitheringState","value","DITHER","setRasterizerState","RASTERIZER_DISCARD","getDepthFunction","depthFunc","setDepthFunction","setDepthFunctionToGreater","setDepthFunctionToGreaterOrEqual","setDepthFunctionToLess","setDepthFunctionToLessOrEqual","cacheStencilState","_cachedStencilBuffer","_cachedStencilFunction","_cachedStencilMask","_cachedStencilOperationPass","_cachedStencilOperationFail","_cachedStencilOperationDepthFail","_cachedStencilReference","restoreStencilState","setDirectViewport","x","y","currentViewport","_cachedViewport","_viewport","scissorClear","clearColor","enableScissor","clear","disableScissor","SCISSOR_TEST","scissor","_reportDrawCall","numDrawCalls","addCount","_loadFileAsync","url","offlineProvider","useArrayBuffer","_loadFile","request","exception","getVertexShaderSource","program","shaders","getAttachedShaders","getShaderSource","getFragmentShaderSource","setDepthStencilTexture","channel","uniform","name","_boundUniforms","depthStencilTexture","_setTexture","setTextureFromPostProcess","postProcess","postProcessInput","_forcedOutputTexture","_textures","_currentRenderTextureInd","_bindTexture","setTextureFromPostProcessOutput","_b","_outputTexture","_rebuildBuffers","scene","resetCachedMaterial","_rebuildGeometries","_rebuildTextures","_renderFrame","index","_activeRenderLoops","renderFunction","_cancelFrame","_renderingQueueLaunched","cancelAnimationFrame","requestID","_renderLoop","_contextWasLost","shouldRender","isDisposed","renderEvenInBackground","beginFrame","_renderViews","endFrame","_queueNewFrame","_boundRenderFunction","_frameHandler","switchFullscreen","requestPointerLock","exitFullscreen","enterFullscreen","_RequestFullscreen","_ExitFullscreen","enterPointerlock","exitPointerlock","_ExitPointerlock","_measureFps","setSize","forceSetSize","camIndex","cameras","cam","_currentRenderId","hasObservers","_deletePipelineContext","pipelineContext","webGLPipelineContext","transformFeedback","deleteTransformFeedback","createShaderProgram","vertexCode","fragmentCode","defines","transformFeedbackVaryings","_createShaderProgram","vertexShader","fragmentShader","shaderProgram","createProgram","attachShader","webGLVersion","createTransformFeedback","bindTransformFeedback","setTranformFeedbackVaryings","linkProgram","isParallelCompiled","_finalizePipelineContext","_releaseTexture","_releaseRenderTargetWrapper","rtWrapper","forEach","camera","_postProcesses","getRenderPassNames","getCurrentRenderPassName","createRenderPassId","id","_RenderPassIdCounter","releaseRenderPassId","s","m","meshes","mesh","subMeshes","b","subMesh","_removeDrawWrapper","_rescaleTexture","source","destination","internalFormat","onComplete","texParameteri","TEXTURE_2D","TEXTURE_MAG_FILTER","LINEAR","TEXTURE_MIN_FILTER","TEXTURE_WRAP_S","CLAMP_TO_EDGE","TEXTURE_WRAP_T","rtt","createRenderTargetTexture","type","samplingMode","generateDepthBuffer","generateStencilBuffer","externalTextureSamplerBinding","getEffect","executeWhenCompiled","onApply","effect","hostingScene","postProcessManager","directRender","copyTexImage2D","unBindFramebuffer","dispose","getFps","getDeltaTime","sampleFrame","averageFPS","instantaneousFrameTime","wrapWebGLTexture","hasMipMaps","hardwareTexture","internalTexture","Unknown","_hardwareTexture","baseWidth","baseHeight","isReady","useMipMaps","updateTextureSamplingMode","_uploadImageToTexture","faceIndex","lod","textureType","_getWebGLTextureType","format","_getInternalFormat","_getRGBABufferInternalSizedFormat","bindTarget","isCube","_unpackFlipY","invertY","target","TEXTURE_CUBE_MAP_POSITIVE_X","texImage2D","updateTextureComparisonFunction","comparisonFunction","TEXTURE_COMPARE_FUNC","TEXTURE_COMPARE_MODE","NONE","COMPARE_REF_TO_TEXTURE","_comparisonFunction","createInstancesBuffer","capacity","createBuffer","result","bindArrayBuffer","bufferData","ARRAY_BUFFER","DYNAMIC_DRAW","references","deleteInstancesBuffer","deleteBuffer","_clientWaitAsync","sync","flags","intervalms","check","res","clientWaitSync","WAIT_FAILED","TIMEOUT_EXPIRED","setTimeout","_readPixelsAsync","w","h","outputBuffer","_webGLVersion","buf","bindBuffer","PIXEL_PACK_BUFFER","byteLength","STREAM_READ","readPixels","fenceSync","SYNC_GPU_COMMANDS_COMPLETE","flush","deleteSync","getBufferSubData","hideLoadingUI","removeEventListener","indexOf","splice","OnEnginesDisposedObservable","setAttribute","style","touchAction","webkitTapHighlightColor","displayLoadingUI","loadingScreen","_loadingScreen","loadingUIText","text","loadingUIBackgroundColor","color","createVideoElement","constraints","createElement","element","focus","catch","exitPointerLock","requestFunction","requestFullscreen","webkitRequestFullscreen","anyDoc","webkitCancelFullScreen","getFontOffset","font","innerHTML","block","display","verticalAlign","div","whiteSpace","appendChild","body","fontAscent","fontHeight","top","removeChild","ascent","descent","ALPHA_DISABLE","ALPHA_ADD","ALPHA_COMBINE","ALPHA_SUBTRACT","ALPHA_MULTIPLY","ALPHA_MAXIMIZED","ALPHA_ONEONE","ALPHA_PREMULTIPLIED","ALPHA_PREMULTIPLIED_PORTERDUFF","ALPHA_INTERPOLATE","ALPHA_SCREENMODE","DELAYLOADSTATE_NONE","DELAYLOADSTATE_LOADED","DELAYLOADSTATE_LOADING","DELAYLOADSTATE_NOTLOADED","NEVER","ALWAYS","LESS","EQUAL","LEQUAL","GREATER","GEQUAL","NOTEQUAL","KEEP","REPLACE","INCR","DECR","INVERT","INCR_WRAP","DECR_WRAP","TEXTURE_CLAMP_ADDRESSMODE","TEXTURE_WRAP_ADDRESSMODE","TEXTURE_MIRROR_ADDRESSMODE","TEXTUREFORMAT_ALPHA","TEXTUREFORMAT_LUMINANCE","TEXTUREFORMAT_LUMINANCE_ALPHA","TEXTUREFORMAT_RGB","TEXTUREFORMAT_RGBA","TEXTUREFORMAT_RED","TEXTUREFORMAT_R","TEXTUREFORMAT_RG","TEXTUREFORMAT_RED_INTEGER","TEXTUREFORMAT_R_INTEGER","TEXTUREFORMAT_RG_INTEGER","TEXTUREFORMAT_RGB_INTEGER","TEXTUREFORMAT_RGBA_INTEGER","TEXTURETYPE_UNSIGNED_BYTE","TEXTURETYPE_UNSIGNED_INT","TEXTURETYPE_FLOAT","TEXTURETYPE_HALF_FLOAT","TEXTURETYPE_BYTE","TEXTURETYPE_SHORT","TEXTURETYPE_UNSIGNED_SHORT","TEXTURETYPE_INT","TEXTURETYPE_UNSIGNED_INTEGER","TEXTURETYPE_UNSIGNED_SHORT_4_4_4_4","TEXTURETYPE_UNSIGNED_SHORT_5_5_5_1","TEXTURETYPE_UNSIGNED_SHORT_5_6_5","TEXTURETYPE_UNSIGNED_INT_2_10_10_10_REV","TEXTURETYPE_UNSIGNED_INT_24_8","TEXTURETYPE_UNSIGNED_INT_10F_11F_11F_REV","TEXTURETYPE_UNSIGNED_INT_5_9_9_9_REV","TEXTURETYPE_FLOAT_32_UNSIGNED_INT_24_8_REV","TEXTURE_NEAREST_SAMPLINGMODE","TEXTURE_BILINEAR_SAMPLINGMODE","TEXTURE_TRILINEAR_SAMPLINGMODE","TEXTURE_NEAREST_NEAREST_MIPLINEAR","TEXTURE_LINEAR_LINEAR_MIPNEAREST","TEXTURE_LINEAR_LINEAR_MIPLINEAR","TEXTURE_NEAREST_NEAREST_MIPNEAREST","TEXTURE_NEAREST_LINEAR_MIPNEAREST","TEXTURE_NEAREST_LINEAR_MIPLINEAR","TEXTURE_NEAREST_LINEAR","TEXTURE_NEAREST_NEAREST","TEXTURE_LINEAR_NEAREST_MIPNEAREST","TEXTURE_LINEAR_NEAREST_MIPLINEAR","TEXTURE_LINEAR_LINEAR","TEXTURE_LINEAR_NEAREST","TEXTURE_EXPLICIT_MODE","TEXTURE_SPHERICAL_MODE","TEXTURE_PLANAR_MODE","TEXTURE_CUBIC_MODE","TEXTURE_PROJECTION_MODE","TEXTURE_SKYBOX_MODE","TEXTURE_INVCUBIC_MODE","TEXTURE_EQUIRECTANGULAR_MODE","TEXTURE_FIXED_EQUIRECTANGULAR_MODE","TEXTURE_FIXED_EQUIRECTANGULAR_MIRRORED_MODE","SCALEMODE_FLOOR","SCALEMODE_NEAREST","SCALEMODE_CEILING"],"sources":["../../../../dev/core/src/Engines/engine.ts"],"sourcesContent":["import { Observable } from \"../Misc/observable\";\r\nimport type { Nullable } from \"../types\";\r\nimport type { Scene } from \"../scene\";\r\nimport { InternalTexture, InternalTextureSource } from \"../Materials/Textures/internalTexture\";\r\nimport type { IOfflineProvider } from \"../Offline/IOfflineProvider\";\r\nimport type { ILoadingScreen } from \"../Loading/loadingScreen\";\r\nimport { IsDocumentAvailable, IsWindowObjectExist } from \"../Misc/domManagement\";\r\nimport { EngineStore } from \"./engineStore\";\r\nimport { _WarnImport } from \"../Misc/devTools\";\r\nimport type { WebGLPipelineContext } from \"./WebGL/webGLPipelineContext\";\r\nimport type { IPipelineContext } from \"./IPipelineContext\";\r\nimport type { ICustomAnimationFrameRequester } from \"../Misc/customAnimationFrameRequester\";\r\nimport type { EngineOptions } from \"./thinEngine\";\r\nimport { ThinEngine } from \"./thinEngine\";\r\nimport { Constants } from \"./constants\";\r\nimport type { IViewportLike, IColor4Like } from \"../Maths/math.like\";\r\nimport type { RenderTargetTexture } from \"../Materials/Textures/renderTargetTexture\";\r\nimport { PerformanceMonitor } from \"../Misc/performanceMonitor\";\r\nimport type { DataBuffer } from \"../Buffers/dataBuffer\";\r\nimport { PerfCounter } from \"../Misc/perfCounter\";\r\nimport { WebGLDataBuffer } from \"../Meshes/WebGL/webGLDataBuffer\";\r\nimport { Logger } from \"../Misc/logger\";\r\nimport type { RenderTargetWrapper } from \"./renderTargetWrapper\";\r\nimport { WebGLHardwareTexture } from \"./WebGL/webGLHardwareTexture\";\r\n\r\nimport \"./Extensions/engine.alpha\";\r\nimport \"./Extensions/engine.readTexture\";\r\nimport \"./Extensions/engine.dynamicBuffer\";\r\nimport type { IAudioEngine } from \"../Audio/Interfaces/IAudioEngine\";\r\n\r\nimport type { Material } from \"../Materials/material\";\r\nimport type { PostProcess } from \"../PostProcesses/postProcess\";\r\n\r\n/**\r\n * Defines the interface used by objects containing a viewport (like a camera)\r\n */\r\ninterface IViewportOwnerLike {\r\n    /**\r\n     * Gets or sets the viewport\r\n     */\r\n    viewport: IViewportLike;\r\n}\r\n\r\n/**\r\n * The engine class is responsible for interfacing with all lower-level APIs such as WebGL and Audio\r\n */\r\nexport class Engine extends ThinEngine {\r\n    // Const statics\r\n\r\n    /** Defines that alpha blending is disabled */\r\n    public static readonly ALPHA_DISABLE = Constants.ALPHA_DISABLE;\r\n    /** Defines that alpha blending to SRC ALPHA * SRC + DEST */\r\n    public static readonly ALPHA_ADD = Constants.ALPHA_ADD;\r\n    /** Defines that alpha blending to SRC ALPHA * SRC + (1 - SRC ALPHA) * DEST */\r\n    public static readonly ALPHA_COMBINE = Constants.ALPHA_COMBINE;\r\n    /** Defines that alpha blending to DEST - SRC * DEST */\r\n    public static readonly ALPHA_SUBTRACT = Constants.ALPHA_SUBTRACT;\r\n    /** Defines that alpha blending to SRC * DEST */\r\n    public static readonly ALPHA_MULTIPLY = Constants.ALPHA_MULTIPLY;\r\n    /** Defines that alpha blending to SRC ALPHA * SRC + (1 - SRC) * DEST */\r\n    public static readonly ALPHA_MAXIMIZED = Constants.ALPHA_MAXIMIZED;\r\n    /** Defines that alpha blending to SRC + DEST */\r\n    public static readonly ALPHA_ONEONE = Constants.ALPHA_ONEONE;\r\n    /** Defines that alpha blending to SRC + (1 - SRC ALPHA) * DEST */\r\n    public static readonly ALPHA_PREMULTIPLIED = Constants.ALPHA_PREMULTIPLIED;\r\n    /**\r\n     * Defines that alpha blending to SRC + (1 - SRC ALPHA) * DEST\r\n     * Alpha will be set to (1 - SRC ALPHA) * DEST ALPHA\r\n     */\r\n    public static readonly ALPHA_PREMULTIPLIED_PORTERDUFF = Constants.ALPHA_PREMULTIPLIED_PORTERDUFF;\r\n    /** Defines that alpha blending to CST * SRC + (1 - CST) * DEST */\r\n    public static readonly ALPHA_INTERPOLATE = Constants.ALPHA_INTERPOLATE;\r\n    /**\r\n     * Defines that alpha blending to SRC + (1 - SRC) * DEST\r\n     * Alpha will be set to SRC ALPHA + (1 - SRC ALPHA) * DEST ALPHA\r\n     */\r\n    public static readonly ALPHA_SCREENMODE = Constants.ALPHA_SCREENMODE;\r\n\r\n    /** Defines that the resource is not delayed*/\r\n    public static readonly DELAYLOADSTATE_NONE = Constants.DELAYLOADSTATE_NONE;\r\n    /** Defines that the resource was successfully delay loaded */\r\n    public static readonly DELAYLOADSTATE_LOADED = Constants.DELAYLOADSTATE_LOADED;\r\n    /** Defines that the resource is currently delay loading */\r\n    public static readonly DELAYLOADSTATE_LOADING = Constants.DELAYLOADSTATE_LOADING;\r\n    /** Defines that the resource is delayed and has not started loading */\r\n    public static readonly DELAYLOADSTATE_NOTLOADED = Constants.DELAYLOADSTATE_NOTLOADED;\r\n\r\n    // Depht or Stencil test Constants.\r\n    /** Passed to depthFunction or stencilFunction to specify depth or stencil tests will never pass. i.e. Nothing will be drawn */\r\n    public static readonly NEVER = Constants.NEVER;\r\n    /** Passed to depthFunction or stencilFunction to specify depth or stencil tests will always pass. i.e. Pixels will be drawn in the order they are drawn */\r\n    public static readonly ALWAYS = Constants.ALWAYS;\r\n    /** Passed to depthFunction or stencilFunction to specify depth or stencil tests will pass if the new depth value is less than the stored value */\r\n    public static readonly LESS = Constants.LESS;\r\n    /** Passed to depthFunction or stencilFunction to specify depth or stencil tests will pass if the new depth value is equals to the stored value */\r\n    public static readonly EQUAL = Constants.EQUAL;\r\n    /** Passed to depthFunction or stencilFunction to specify depth or stencil tests will pass if the new depth value is less than or equal to the stored value */\r\n    public static readonly LEQUAL = Constants.LEQUAL;\r\n    /** Passed to depthFunction or stencilFunction to specify depth or stencil tests will pass if the new depth value is greater than the stored value */\r\n    public static readonly GREATER = Constants.GREATER;\r\n    /** Passed to depthFunction or stencilFunction to specify depth or stencil tests will pass if the new depth value is greater than or equal to the stored value */\r\n    public static readonly GEQUAL = Constants.GEQUAL;\r\n    /** Passed to depthFunction or stencilFunction to specify depth or stencil tests will pass if the new depth value is not equal to the stored value */\r\n    public static readonly NOTEQUAL = Constants.NOTEQUAL;\r\n\r\n    // Stencil Actions Constants.\r\n    /** Passed to stencilOperation to specify that stencil value must be kept */\r\n    public static readonly KEEP = Constants.KEEP;\r\n    /** Passed to stencilOperation to specify that stencil value must be replaced */\r\n    public static readonly REPLACE = Constants.REPLACE;\r\n    /** Passed to stencilOperation to specify that stencil value must be incremented */\r\n    public static readonly INCR = Constants.INCR;\r\n    /** Passed to stencilOperation to specify that stencil value must be decremented */\r\n    public static readonly DECR = Constants.DECR;\r\n    /** Passed to stencilOperation to specify that stencil value must be inverted */\r\n    public static readonly INVERT = Constants.INVERT;\r\n    /** Passed to stencilOperation to specify that stencil value must be incremented with wrapping */\r\n    public static readonly INCR_WRAP = Constants.INCR_WRAP;\r\n    /** Passed to stencilOperation to specify that stencil value must be decremented with wrapping */\r\n    public static readonly DECR_WRAP = Constants.DECR_WRAP;\r\n\r\n    /** Texture is not repeating outside of 0..1 UVs */\r\n    public static readonly TEXTURE_CLAMP_ADDRESSMODE = Constants.TEXTURE_CLAMP_ADDRESSMODE;\r\n    /** Texture is repeating outside of 0..1 UVs */\r\n    public static readonly TEXTURE_WRAP_ADDRESSMODE = Constants.TEXTURE_WRAP_ADDRESSMODE;\r\n    /** Texture is repeating and mirrored */\r\n    public static readonly TEXTURE_MIRROR_ADDRESSMODE = Constants.TEXTURE_MIRROR_ADDRESSMODE;\r\n\r\n    /** ALPHA */\r\n    public static readonly TEXTUREFORMAT_ALPHA = Constants.TEXTUREFORMAT_ALPHA;\r\n    /** LUMINANCE */\r\n    public static readonly TEXTUREFORMAT_LUMINANCE = Constants.TEXTUREFORMAT_LUMINANCE;\r\n    /** LUMINANCE_ALPHA */\r\n    public static readonly TEXTUREFORMAT_LUMINANCE_ALPHA = Constants.TEXTUREFORMAT_LUMINANCE_ALPHA;\r\n    /** RGB */\r\n    public static readonly TEXTUREFORMAT_RGB = Constants.TEXTUREFORMAT_RGB;\r\n    /** RGBA */\r\n    public static readonly TEXTUREFORMAT_RGBA = Constants.TEXTUREFORMAT_RGBA;\r\n    /** RED */\r\n    public static readonly TEXTUREFORMAT_RED = Constants.TEXTUREFORMAT_RED;\r\n    /** RED (2nd reference) */\r\n    public static readonly TEXTUREFORMAT_R = Constants.TEXTUREFORMAT_R;\r\n    /** RG */\r\n    public static readonly TEXTUREFORMAT_RG = Constants.TEXTUREFORMAT_RG;\r\n    /** RED_INTEGER */\r\n    public static readonly TEXTUREFORMAT_RED_INTEGER = Constants.TEXTUREFORMAT_RED_INTEGER;\r\n    /** RED_INTEGER (2nd reference) */\r\n    public static readonly TEXTUREFORMAT_R_INTEGER = Constants.TEXTUREFORMAT_R_INTEGER;\r\n    /** RG_INTEGER */\r\n    public static readonly TEXTUREFORMAT_RG_INTEGER = Constants.TEXTUREFORMAT_RG_INTEGER;\r\n    /** RGB_INTEGER */\r\n    public static readonly TEXTUREFORMAT_RGB_INTEGER = Constants.TEXTUREFORMAT_RGB_INTEGER;\r\n    /** RGBA_INTEGER */\r\n    public static readonly TEXTUREFORMAT_RGBA_INTEGER = Constants.TEXTUREFORMAT_RGBA_INTEGER;\r\n\r\n    /** UNSIGNED_BYTE */\r\n    public static readonly TEXTURETYPE_UNSIGNED_BYTE = Constants.TEXTURETYPE_UNSIGNED_BYTE;\r\n    /** UNSIGNED_BYTE (2nd reference) */\r\n    public static readonly TEXTURETYPE_UNSIGNED_INT = Constants.TEXTURETYPE_UNSIGNED_INT;\r\n    /** FLOAT */\r\n    public static readonly TEXTURETYPE_FLOAT = Constants.TEXTURETYPE_FLOAT;\r\n    /** HALF_FLOAT */\r\n    public static readonly TEXTURETYPE_HALF_FLOAT = Constants.TEXTURETYPE_HALF_FLOAT;\r\n    /** BYTE */\r\n    public static readonly TEXTURETYPE_BYTE = Constants.TEXTURETYPE_BYTE;\r\n    /** SHORT */\r\n    public static readonly TEXTURETYPE_SHORT = Constants.TEXTURETYPE_SHORT;\r\n    /** UNSIGNED_SHORT */\r\n    public static readonly TEXTURETYPE_UNSIGNED_SHORT = Constants.TEXTURETYPE_UNSIGNED_SHORT;\r\n    /** INT */\r\n    public static readonly TEXTURETYPE_INT = Constants.TEXTURETYPE_INT;\r\n    /** UNSIGNED_INT */\r\n    public static readonly TEXTURETYPE_UNSIGNED_INTEGER = Constants.TEXTURETYPE_UNSIGNED_INTEGER;\r\n    /** UNSIGNED_SHORT_4_4_4_4 */\r\n    public static readonly TEXTURETYPE_UNSIGNED_SHORT_4_4_4_4 = Constants.TEXTURETYPE_UNSIGNED_SHORT_4_4_4_4;\r\n    /** UNSIGNED_SHORT_5_5_5_1 */\r\n    public static readonly TEXTURETYPE_UNSIGNED_SHORT_5_5_5_1 = Constants.TEXTURETYPE_UNSIGNED_SHORT_5_5_5_1;\r\n    /** UNSIGNED_SHORT_5_6_5 */\r\n    public static readonly TEXTURETYPE_UNSIGNED_SHORT_5_6_5 = Constants.TEXTURETYPE_UNSIGNED_SHORT_5_6_5;\r\n    /** UNSIGNED_INT_2_10_10_10_REV */\r\n    public static readonly TEXTURETYPE_UNSIGNED_INT_2_10_10_10_REV = Constants.TEXTURETYPE_UNSIGNED_INT_2_10_10_10_REV;\r\n    /** UNSIGNED_INT_24_8 */\r\n    public static readonly TEXTURETYPE_UNSIGNED_INT_24_8 = Constants.TEXTURETYPE_UNSIGNED_INT_24_8;\r\n    /** UNSIGNED_INT_10F_11F_11F_REV */\r\n    public static readonly TEXTURETYPE_UNSIGNED_INT_10F_11F_11F_REV = Constants.TEXTURETYPE_UNSIGNED_INT_10F_11F_11F_REV;\r\n    /** UNSIGNED_INT_5_9_9_9_REV */\r\n    public static readonly TEXTURETYPE_UNSIGNED_INT_5_9_9_9_REV = Constants.TEXTURETYPE_UNSIGNED_INT_5_9_9_9_REV;\r\n    /** FLOAT_32_UNSIGNED_INT_24_8_REV */\r\n    public static readonly TEXTURETYPE_FLOAT_32_UNSIGNED_INT_24_8_REV = Constants.TEXTURETYPE_FLOAT_32_UNSIGNED_INT_24_8_REV;\r\n\r\n    /** nearest is mag = nearest and min = nearest and mip = none */\r\n    public static readonly TEXTURE_NEAREST_SAMPLINGMODE = Constants.TEXTURE_NEAREST_SAMPLINGMODE;\r\n    /** Bilinear is mag = linear and min = linear and mip = nearest */\r\n    public static readonly TEXTURE_BILINEAR_SAMPLINGMODE = Constants.TEXTURE_BILINEAR_SAMPLINGMODE;\r\n    /** Trilinear is mag = linear and min = linear and mip = linear */\r\n    public static readonly TEXTURE_TRILINEAR_SAMPLINGMODE = Constants.TEXTURE_TRILINEAR_SAMPLINGMODE;\r\n    /** nearest is mag = nearest and min = nearest and mip = linear */\r\n    public static readonly TEXTURE_NEAREST_NEAREST_MIPLINEAR = Constants.TEXTURE_NEAREST_NEAREST_MIPLINEAR;\r\n    /** Bilinear is mag = linear and min = linear and mip = nearest */\r\n    public static readonly TEXTURE_LINEAR_LINEAR_MIPNEAREST = Constants.TEXTURE_LINEAR_LINEAR_MIPNEAREST;\r\n    /** Trilinear is mag = linear and min = linear and mip = linear */\r\n    public static readonly TEXTURE_LINEAR_LINEAR_MIPLINEAR = Constants.TEXTURE_LINEAR_LINEAR_MIPLINEAR;\r\n    /** mag = nearest and min = nearest and mip = nearest */\r\n    public static readonly TEXTURE_NEAREST_NEAREST_MIPNEAREST = Constants.TEXTURE_NEAREST_NEAREST_MIPNEAREST;\r\n    /** mag = nearest and min = linear and mip = nearest */\r\n    public static readonly TEXTURE_NEAREST_LINEAR_MIPNEAREST = Constants.TEXTURE_NEAREST_LINEAR_MIPNEAREST;\r\n    /** mag = nearest and min = linear and mip = linear */\r\n    public static readonly TEXTURE_NEAREST_LINEAR_MIPLINEAR = Constants.TEXTURE_NEAREST_LINEAR_MIPLINEAR;\r\n    /** mag = nearest and min = linear and mip = none */\r\n    public static readonly TEXTURE_NEAREST_LINEAR = Constants.TEXTURE_NEAREST_LINEAR;\r\n    /** mag = nearest and min = nearest and mip = none */\r\n    public static readonly TEXTURE_NEAREST_NEAREST = Constants.TEXTURE_NEAREST_NEAREST;\r\n    /** mag = linear and min = nearest and mip = nearest */\r\n    public static readonly TEXTURE_LINEAR_NEAREST_MIPNEAREST = Constants.TEXTURE_LINEAR_NEAREST_MIPNEAREST;\r\n    /** mag = linear and min = nearest and mip = linear */\r\n    public static readonly TEXTURE_LINEAR_NEAREST_MIPLINEAR = Constants.TEXTURE_LINEAR_NEAREST_MIPLINEAR;\r\n    /** mag = linear and min = linear and mip = none */\r\n    public static readonly TEXTURE_LINEAR_LINEAR = Constants.TEXTURE_LINEAR_LINEAR;\r\n    /** mag = linear and min = nearest and mip = none */\r\n    public static readonly TEXTURE_LINEAR_NEAREST = Constants.TEXTURE_LINEAR_NEAREST;\r\n\r\n    /** Explicit coordinates mode */\r\n    public static readonly TEXTURE_EXPLICIT_MODE = Constants.TEXTURE_EXPLICIT_MODE;\r\n    /** Spherical coordinates mode */\r\n    public static readonly TEXTURE_SPHERICAL_MODE = Constants.TEXTURE_SPHERICAL_MODE;\r\n    /** Planar coordinates mode */\r\n    public static readonly TEXTURE_PLANAR_MODE = Constants.TEXTURE_PLANAR_MODE;\r\n    /** Cubic coordinates mode */\r\n    public static readonly TEXTURE_CUBIC_MODE = Constants.TEXTURE_CUBIC_MODE;\r\n    /** Projection coordinates mode */\r\n    public static readonly TEXTURE_PROJECTION_MODE = Constants.TEXTURE_PROJECTION_MODE;\r\n    /** Skybox coordinates mode */\r\n    public static readonly TEXTURE_SKYBOX_MODE = Constants.TEXTURE_SKYBOX_MODE;\r\n    /** Inverse Cubic coordinates mode */\r\n    public static readonly TEXTURE_INVCUBIC_MODE = Constants.TEXTURE_INVCUBIC_MODE;\r\n    /** Equirectangular coordinates mode */\r\n    public static readonly TEXTURE_EQUIRECTANGULAR_MODE = Constants.TEXTURE_EQUIRECTANGULAR_MODE;\r\n    /** Equirectangular Fixed coordinates mode */\r\n    public static readonly TEXTURE_FIXED_EQUIRECTANGULAR_MODE = Constants.TEXTURE_FIXED_EQUIRECTANGULAR_MODE;\r\n    /** Equirectangular Fixed Mirrored coordinates mode */\r\n    public static readonly TEXTURE_FIXED_EQUIRECTANGULAR_MIRRORED_MODE = Constants.TEXTURE_FIXED_EQUIRECTANGULAR_MIRRORED_MODE;\r\n\r\n    // Texture rescaling mode\r\n    /** Defines that texture rescaling will use a floor to find the closer power of 2 size */\r\n    public static readonly SCALEMODE_FLOOR = Constants.SCALEMODE_FLOOR;\r\n    /** Defines that texture rescaling will look for the nearest power of 2 size */\r\n    public static readonly SCALEMODE_NEAREST = Constants.SCALEMODE_NEAREST;\r\n    /** Defines that texture rescaling will use a ceil to find the closer power of 2 size */\r\n    public static readonly SCALEMODE_CEILING = Constants.SCALEMODE_CEILING;\r\n\r\n    /**\r\n     * Returns the current npm package of the sdk\r\n     */\r\n    // Not mixed with Version for tooling purpose.\r\n    public static get NpmPackage(): string {\r\n        return ThinEngine.NpmPackage;\r\n    }\r\n\r\n    /**\r\n     * Returns the current version of the framework\r\n     */\r\n    public static get Version(): string {\r\n        return ThinEngine.Version;\r\n    }\r\n\r\n    /** Gets the list of created engines */\r\n    public static get Instances(): Engine[] {\r\n        return EngineStore.Instances;\r\n    }\r\n\r\n    /**\r\n     * Gets the latest created engine\r\n     */\r\n    public static get LastCreatedEngine(): Nullable<Engine> {\r\n        return EngineStore.LastCreatedEngine;\r\n    }\r\n\r\n    /**\r\n     * Gets the latest created scene\r\n     */\r\n    public static get LastCreatedScene(): Nullable<Scene> {\r\n        return EngineStore.LastCreatedScene;\r\n    }\r\n\r\n    /** @internal */\r\n    /**\r\n     * Engine abstraction for loading and creating an image bitmap from a given source string.\r\n     * @param imageSource source to load the image from.\r\n     * @param options An object that sets options for the image's extraction.\r\n     * @returns ImageBitmap.\r\n     */\r\n    public _createImageBitmapFromSource(imageSource: string, options?: ImageBitmapOptions): Promise<ImageBitmap> {\r\n        const promise = new Promise<ImageBitmap>((resolve, reject) => {\r\n            const image = new Image();\r\n            image.onload = () => {\r\n                image.decode().then(() => {\r\n                    this.createImageBitmap(image, options).then((imageBitmap) => {\r\n                        resolve(imageBitmap);\r\n                    });\r\n                });\r\n            };\r\n            image.onerror = () => {\r\n                reject(`Error loading image ${image.src}`);\r\n            };\r\n\r\n            image.src = imageSource;\r\n        });\r\n\r\n        return promise;\r\n    }\r\n\r\n    /**\r\n     * Engine abstraction for createImageBitmap\r\n     * @param image source for image\r\n     * @param options An object that sets options for the image's extraction.\r\n     * @returns ImageBitmap\r\n     */\r\n    public createImageBitmap(image: ImageBitmapSource, options?: ImageBitmapOptions): Promise<ImageBitmap> {\r\n        return createImageBitmap(image, options);\r\n    }\r\n\r\n    /**\r\n     * Resize an image and returns the image data as an uint8array\r\n     * @param image image to resize\r\n     * @param bufferWidth destination buffer width\r\n     * @param bufferHeight destination buffer height\r\n     * @returns an uint8array containing RGBA values of bufferWidth * bufferHeight size\r\n     */\r\n    public resizeImageBitmap(image: HTMLImageElement | ImageBitmap, bufferWidth: number, bufferHeight: number): Uint8Array {\r\n        const canvas = this.createCanvas(bufferWidth, bufferHeight);\r\n        const context = canvas.getContext(\"2d\");\r\n\r\n        if (!context) {\r\n            throw new Error(\"Unable to get 2d context for resizeImageBitmap\");\r\n        }\r\n\r\n        context.drawImage(image, 0, 0);\r\n\r\n        // Create VertexData from map data\r\n        // Cast is due to wrong definition in lib.d.ts from ts 1.3 - https://github.com/Microsoft/TypeScript/issues/949\r\n        const buffer = <Uint8Array>(<any>context.getImageData(0, 0, bufferWidth, bufferHeight).data);\r\n        return buffer;\r\n    }\r\n\r\n    /**\r\n     * Will flag all materials in all scenes in all engines as dirty to trigger new shader compilation\r\n     * @param flag defines which part of the materials must be marked as dirty\r\n     * @param predicate defines a predicate used to filter which materials should be affected\r\n     */\r\n    public static MarkAllMaterialsAsDirty(flag: number, predicate?: (mat: Material) => boolean): void {\r\n        for (let engineIndex = 0; engineIndex < Engine.Instances.length; engineIndex++) {\r\n            const engine = Engine.Instances[engineIndex];\r\n\r\n            for (let sceneIndex = 0; sceneIndex < engine.scenes.length; sceneIndex++) {\r\n                engine.scenes[sceneIndex].markAllMaterialsAsDirty(flag, predicate);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Method called to create the default loading screen.\r\n     * This can be overridden in your own app.\r\n     * @param canvas The rendering canvas element\r\n     * @returns The loading screen\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    public static DefaultLoadingScreenFactory(canvas: HTMLCanvasElement): ILoadingScreen {\r\n        throw _WarnImport(\"LoadingScreen\");\r\n    }\r\n\r\n    /**\r\n     * Method called to create the default rescale post process on each engine.\r\n     */\r\n    public static _RescalePostProcessFactory: Nullable<(engine: Engine) => PostProcess> = null;\r\n\r\n    // Members\r\n\r\n    /**\r\n     * Gets or sets a boolean to enable/disable IndexedDB support and avoid XHR on .manifest\r\n     **/\r\n    public enableOfflineSupport = false;\r\n\r\n    /**\r\n     * Gets or sets a boolean to enable/disable checking manifest if IndexedDB support is enabled (js will always consider the database is up to date)\r\n     **/\r\n    public disableManifestCheck = false;\r\n\r\n    /**\r\n     * Gets or sets a boolean to enable/disable the context menu (right-click) from appearing on the main canvas\r\n     */\r\n    public disableContextMenu: boolean = true;\r\n\r\n    /**\r\n     * Gets the list of created scenes\r\n     */\r\n    public scenes = new Array<Scene>();\r\n\r\n    /** @internal */\r\n    public _virtualScenes = new Array<Scene>();\r\n\r\n    /**\r\n     * Event raised when a new scene is created\r\n     */\r\n    public onNewSceneAddedObservable = new Observable<Scene>();\r\n\r\n    /**\r\n     * Gets the list of created postprocesses\r\n     */\r\n    public postProcesses = new Array<PostProcess>();\r\n\r\n    /**\r\n     * Gets a boolean indicating if the pointer is currently locked\r\n     */\r\n    public isPointerLock = false;\r\n\r\n    // Observables\r\n\r\n    /**\r\n     * Observable event triggered each time the rendering canvas is resized\r\n     */\r\n    public onResizeObservable = new Observable<Engine>();\r\n\r\n    /**\r\n     * Observable event triggered each time the canvas loses focus\r\n     */\r\n    public onCanvasBlurObservable = new Observable<Engine>();\r\n\r\n    /**\r\n     * Observable event triggered each time the canvas gains focus\r\n     */\r\n    public onCanvasFocusObservable = new Observable<Engine>();\r\n\r\n    /**\r\n     * Observable event triggered each time the canvas receives pointerout event\r\n     */\r\n    public onCanvasPointerOutObservable = new Observable<PointerEvent>();\r\n\r\n    /**\r\n     * Observable raised when the engine begins a new frame\r\n     */\r\n    public onBeginFrameObservable = new Observable<Engine>();\r\n\r\n    /**\r\n     * If set, will be used to request the next animation frame for the render loop\r\n     */\r\n    public customAnimationFrameRequester: Nullable<ICustomAnimationFrameRequester> = null;\r\n\r\n    /**\r\n     * Observable raised when the engine ends the current frame\r\n     */\r\n    public onEndFrameObservable = new Observable<Engine>();\r\n\r\n    /**\r\n     * Observable raised when the engine is about to compile a shader\r\n     */\r\n    public onBeforeShaderCompilationObservable = new Observable<Engine>();\r\n\r\n    /**\r\n     * Observable raised when the engine has just compiled a shader\r\n     */\r\n    public onAfterShaderCompilationObservable = new Observable<Engine>();\r\n\r\n    /**\r\n     * Gets the audio engine\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/audio/playingSoundsMusic\r\n     * @ignorenaming\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    public static audioEngine: Nullable<IAudioEngine>;\r\n\r\n    /**\r\n     * Default AudioEngine factory responsible of creating the Audio Engine.\r\n     * By default, this will create a BabylonJS Audio Engine if the workload has been embedded.\r\n     */\r\n    public static AudioEngineFactory: (\r\n        hostElement: Nullable<HTMLElement>,\r\n        audioContext: Nullable<AudioContext>,\r\n        audioDestination: Nullable<AudioDestinationNode | MediaStreamAudioDestinationNode>\r\n    ) => IAudioEngine;\r\n\r\n    /**\r\n     * Default offline support factory responsible of creating a tool used to store data locally.\r\n     * By default, this will create a Database object if the workload has been embedded.\r\n     */\r\n    public static OfflineProviderFactory: (urlToScene: string, callbackManifestChecked: (checked: boolean) => any, disableManifestCheck: boolean) => IOfflineProvider;\r\n\r\n    private _loadingScreen: ILoadingScreen;\r\n    private _pointerLockRequested: boolean;\r\n    private _rescalePostProcess: Nullable<PostProcess>;\r\n\r\n    // Deterministic lockstepMaxSteps\r\n    protected _deterministicLockstep: boolean = false;\r\n    protected _lockstepMaxSteps: number = 4;\r\n    protected _timeStep: number = 1 / 60;\r\n\r\n    protected get _supportsHardwareTextureRescaling() {\r\n        return !!Engine._RescalePostProcessFactory;\r\n    }\r\n\r\n    // FPS\r\n    private _fps = 60;\r\n    private _deltaTime = 0;\r\n\r\n    /** @internal */\r\n    public _drawCalls = new PerfCounter();\r\n\r\n    /** Gets or sets the tab index to set to the rendering canvas. 1 is the minimum value to set to be able to capture keyboard events */\r\n    public canvasTabIndex = 1;\r\n\r\n    /**\r\n     * Turn this value on if you want to pause FPS computation when in background\r\n     */\r\n    public disablePerformanceMonitorInBackground = false;\r\n\r\n    private _performanceMonitor = new PerformanceMonitor();\r\n    /**\r\n     * Gets the performance monitor attached to this engine\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/scene/optimize_your_scene#engineinstrumentation\r\n     */\r\n    public get performanceMonitor(): PerformanceMonitor {\r\n        return this._performanceMonitor;\r\n    }\r\n\r\n    // Focus\r\n    private _onFocus: () => void;\r\n    private _onBlur: () => void;\r\n    private _onCanvasPointerOut: (event: PointerEvent) => void;\r\n    private _onCanvasBlur: () => void;\r\n    private _onCanvasFocus: () => void;\r\n    private _onCanvasContextMenu: (evt: Event) => void;\r\n\r\n    private _onFullscreenChange: () => void;\r\n    private _onPointerLockChange: () => void;\r\n\r\n    protected _compatibilityMode = true;\r\n\r\n    /**\r\n     * (WebGPU only) True (default) to be in compatibility mode, meaning rendering all existing scenes without artifacts (same rendering than WebGL).\r\n     * Setting the property to false will improve performances but may not work in some scenes if some precautions are not taken.\r\n     * See https://doc.babylonjs.com/setup/support/webGPU/webGPUOptimization/webGPUNonCompatibilityMode for more details\r\n     */\r\n    public get compatibilityMode() {\r\n        return this._compatibilityMode;\r\n    }\r\n\r\n    public set compatibilityMode(mode: boolean) {\r\n        // not supported in WebGL\r\n        this._compatibilityMode = true;\r\n    }\r\n\r\n    // Events\r\n\r\n    /**\r\n     * Gets the HTML element used to attach event listeners\r\n     * @returns a HTML element\r\n     */\r\n    public getInputElement(): Nullable<HTMLElement> {\r\n        return this._renderingCanvas;\r\n    }\r\n\r\n    /**\r\n     * Creates a new engine\r\n     * @param canvasOrContext defines the canvas or WebGL context to use for rendering. If you provide a WebGL context, Babylon.js will not hook events on the canvas (like pointers, keyboards, etc...) so no event observables will be available. This is mostly used when Babylon.js is used as a plugin on a system which already used the WebGL context\r\n     * @param antialias defines enable antialiasing (default: false)\r\n     * @param options defines further options to be sent to the getContext() function\r\n     * @param adaptToDeviceRatio defines whether to adapt to the device's viewport characteristics (default: false)\r\n     */\r\n    constructor(\r\n        canvasOrContext: Nullable<HTMLCanvasElement | OffscreenCanvas | WebGLRenderingContext | WebGL2RenderingContext>,\r\n        antialias?: boolean,\r\n        options?: EngineOptions,\r\n        adaptToDeviceRatio: boolean = false\r\n    ) {\r\n        super(canvasOrContext, antialias, options, adaptToDeviceRatio);\r\n\r\n        Engine.Instances.push(this);\r\n\r\n        if (!canvasOrContext) {\r\n            return;\r\n        }\r\n\r\n        this._features.supportRenderPasses = true;\r\n\r\n        options = this._creationOptions;\r\n\r\n        if ((<any>canvasOrContext).getContext) {\r\n            const canvas = <HTMLCanvasElement>canvasOrContext;\r\n\r\n            this._sharedInit(canvas);\r\n        }\r\n    }\r\n\r\n    protected _initGLContext(): void {\r\n        super._initGLContext();\r\n\r\n        this._rescalePostProcess = null;\r\n    }\r\n\r\n    /**\r\n     * Shared initialization across engines types.\r\n     * @param canvas The canvas associated with this instance of the engine.\r\n     */\r\n    protected _sharedInit(canvas: HTMLCanvasElement) {\r\n        super._sharedInit(canvas);\r\n\r\n        this._onCanvasFocus = () => {\r\n            this.onCanvasFocusObservable.notifyObservers(this);\r\n        };\r\n\r\n        this._onCanvasBlur = () => {\r\n            this.onCanvasBlurObservable.notifyObservers(this);\r\n        };\r\n\r\n        this._onCanvasContextMenu = (evt: Event) => {\r\n            if (this.disableContextMenu) {\r\n                evt.preventDefault();\r\n            }\r\n        };\r\n\r\n        canvas.addEventListener(\"focus\", this._onCanvasFocus);\r\n        canvas.addEventListener(\"blur\", this._onCanvasBlur);\r\n        canvas.addEventListener(\"contextmenu\", this._onCanvasContextMenu);\r\n\r\n        this._onBlur = () => {\r\n            if (this.disablePerformanceMonitorInBackground) {\r\n                this._performanceMonitor.disable();\r\n            }\r\n            this._windowIsBackground = true;\r\n        };\r\n\r\n        this._onFocus = () => {\r\n            if (this.disablePerformanceMonitorInBackground) {\r\n                this._performanceMonitor.enable();\r\n            }\r\n            this._windowIsBackground = false;\r\n        };\r\n\r\n        this._onCanvasPointerOut = (ev) => {\r\n            // Check that the element at the point of the pointer out isn't the canvas and if it isn't, notify observers\r\n            // Note: This is a workaround for a bug with Safari\r\n            if (document.elementFromPoint(ev.clientX, ev.clientY) !== canvas) {\r\n                this.onCanvasPointerOutObservable.notifyObservers(ev);\r\n            }\r\n        };\r\n\r\n        const hostWindow = this.getHostWindow(); // it calls IsWindowObjectExist()\r\n        if (hostWindow && typeof hostWindow.addEventListener === \"function\") {\r\n            hostWindow.addEventListener(\"blur\", this._onBlur);\r\n            hostWindow.addEventListener(\"focus\", this._onFocus);\r\n        }\r\n\r\n        canvas.addEventListener(\"pointerout\", this._onCanvasPointerOut);\r\n\r\n        if (!this._creationOptions.doNotHandleTouchAction) {\r\n            this._disableTouchAction();\r\n        }\r\n\r\n        // Create Audio Engine if needed.\r\n        if (!Engine.audioEngine && this._creationOptions.audioEngine && Engine.AudioEngineFactory) {\r\n            Engine.audioEngine = Engine.AudioEngineFactory(this.getRenderingCanvas(), this.getAudioContext(), this.getAudioDestination());\r\n        }\r\n        if (IsDocumentAvailable()) {\r\n            // Fullscreen\r\n            this._onFullscreenChange = () => {\r\n                this.isFullscreen = !!document.fullscreenElement;\r\n\r\n                // Pointer lock\r\n                if (this.isFullscreen && this._pointerLockRequested && canvas) {\r\n                    Engine._RequestPointerlock(canvas);\r\n                }\r\n            };\r\n\r\n            document.addEventListener(\"fullscreenchange\", this._onFullscreenChange, false);\r\n            document.addEventListener(\"webkitfullscreenchange\", this._onFullscreenChange, false);\r\n\r\n            // Pointer lock\r\n            this._onPointerLockChange = () => {\r\n                this.isPointerLock = document.pointerLockElement === canvas;\r\n            };\r\n\r\n            document.addEventListener(\"pointerlockchange\", this._onPointerLockChange, false);\r\n            document.addEventListener(\"webkitpointerlockchange\", this._onPointerLockChange, false);\r\n        }\r\n\r\n        this.enableOfflineSupport = Engine.OfflineProviderFactory !== undefined;\r\n\r\n        this._deterministicLockstep = !!this._creationOptions.deterministicLockstep;\r\n        this._lockstepMaxSteps = this._creationOptions.lockstepMaxSteps || 0;\r\n        this._timeStep = this._creationOptions.timeStep || 1 / 60;\r\n    }\r\n\r\n    /** @internal */\r\n    public _verifyPointerLock(): void {\r\n        this._onPointerLockChange?.();\r\n    }\r\n\r\n    /**\r\n     * Gets current aspect ratio\r\n     * @param viewportOwner defines the camera to use to get the aspect ratio\r\n     * @param useScreen defines if screen size must be used (or the current render target if any)\r\n     * @returns a number defining the aspect ratio\r\n     */\r\n    public getAspectRatio(viewportOwner: IViewportOwnerLike, useScreen = false): number {\r\n        const viewport = viewportOwner.viewport;\r\n        return (this.getRenderWidth(useScreen) * viewport.width) / (this.getRenderHeight(useScreen) * viewport.height);\r\n    }\r\n\r\n    /**\r\n     * Gets current screen aspect ratio\r\n     * @returns a number defining the aspect ratio\r\n     */\r\n    public getScreenAspectRatio(): number {\r\n        return this.getRenderWidth(true) / this.getRenderHeight(true);\r\n    }\r\n\r\n    /**\r\n     * Gets the client rect of the HTML canvas attached with the current webGL context\r\n     * @returns a client rectangle\r\n     */\r\n    public getRenderingCanvasClientRect(): Nullable<ClientRect> {\r\n        if (!this._renderingCanvas) {\r\n            return null;\r\n        }\r\n        return this._renderingCanvas.getBoundingClientRect();\r\n    }\r\n\r\n    /**\r\n     * Gets the client rect of the HTML element used for events\r\n     * @returns a client rectangle\r\n     */\r\n    public getInputElementClientRect(): Nullable<ClientRect> {\r\n        if (!this._renderingCanvas) {\r\n            return null;\r\n        }\r\n        return this.getInputElement()!.getBoundingClientRect();\r\n    }\r\n\r\n    /**\r\n     * Gets a boolean indicating that the engine is running in deterministic lock step mode\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/animation/advanced_animations#deterministic-lockstep\r\n     * @returns true if engine is in deterministic lock step mode\r\n     */\r\n    public isDeterministicLockStep(): boolean {\r\n        return this._deterministicLockstep;\r\n    }\r\n\r\n    /**\r\n     * Gets the max steps when engine is running in deterministic lock step\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/animation/advanced_animations#deterministic-lockstep\r\n     * @returns the max steps\r\n     */\r\n    public getLockstepMaxSteps(): number {\r\n        return this._lockstepMaxSteps;\r\n    }\r\n\r\n    /**\r\n     * Returns the time in ms between steps when using deterministic lock step.\r\n     * @returns time step in (ms)\r\n     */\r\n    public getTimeStep(): number {\r\n        return this._timeStep * 1000;\r\n    }\r\n\r\n    /**\r\n     * Force the mipmap generation for the given render target texture\r\n     * @param texture defines the render target texture to use\r\n     * @param unbind defines whether or not to unbind the texture after generation. Defaults to true.\r\n     */\r\n    public generateMipMapsForCubemap(texture: InternalTexture, unbind = true) {\r\n        if (texture.generateMipMaps) {\r\n            const gl = this._gl;\r\n            this._bindTextureDirectly(gl.TEXTURE_CUBE_MAP, texture, true);\r\n            gl.generateMipmap(gl.TEXTURE_CUBE_MAP);\r\n            if (unbind) {\r\n                this._bindTextureDirectly(gl.TEXTURE_CUBE_MAP, null);\r\n            }\r\n        }\r\n    }\r\n\r\n    /** States */\r\n\r\n    /**\r\n     * Gets a boolean indicating if depth writing is enabled\r\n     * @returns the current depth writing state\r\n     */\r\n    public getDepthWrite(): boolean {\r\n        return this._depthCullingState.depthMask;\r\n    }\r\n\r\n    /**\r\n     * Enable or disable depth writing\r\n     * @param enable defines the state to set\r\n     */\r\n    public setDepthWrite(enable: boolean): void {\r\n        this._depthCullingState.depthMask = enable;\r\n    }\r\n\r\n    /**\r\n     * Gets a boolean indicating if stencil buffer is enabled\r\n     * @returns the current stencil buffer state\r\n     */\r\n    public getStencilBuffer(): boolean {\r\n        return this._stencilState.stencilTest;\r\n    }\r\n\r\n    /**\r\n     * Enable or disable the stencil buffer\r\n     * @param enable defines if the stencil buffer must be enabled or disabled\r\n     */\r\n    public setStencilBuffer(enable: boolean): void {\r\n        this._stencilState.stencilTest = enable;\r\n    }\r\n\r\n    /**\r\n     * Gets the current stencil mask\r\n     * @returns a number defining the new stencil mask to use\r\n     */\r\n    public getStencilMask(): number {\r\n        return this._stencilState.stencilMask;\r\n    }\r\n\r\n    /**\r\n     * Sets the current stencil mask\r\n     * @param mask defines the new stencil mask to use\r\n     */\r\n    public setStencilMask(mask: number): void {\r\n        this._stencilState.stencilMask = mask;\r\n    }\r\n\r\n    /**\r\n     * Gets the current stencil function\r\n     * @returns a number defining the stencil function to use\r\n     */\r\n    public getStencilFunction(): number {\r\n        return this._stencilState.stencilFunc;\r\n    }\r\n\r\n    /**\r\n     * Gets the current stencil reference value\r\n     * @returns a number defining the stencil reference value to use\r\n     */\r\n    public getStencilFunctionReference(): number {\r\n        return this._stencilState.stencilFuncRef;\r\n    }\r\n\r\n    /**\r\n     * Gets the current stencil mask\r\n     * @returns a number defining the stencil mask to use\r\n     */\r\n    public getStencilFunctionMask(): number {\r\n        return this._stencilState.stencilFuncMask;\r\n    }\r\n\r\n    /**\r\n     * Sets the current stencil function\r\n     * @param stencilFunc defines the new stencil function to use\r\n     */\r\n    public setStencilFunction(stencilFunc: number) {\r\n        this._stencilState.stencilFunc = stencilFunc;\r\n    }\r\n\r\n    /**\r\n     * Sets the current stencil reference\r\n     * @param reference defines the new stencil reference to use\r\n     */\r\n    public setStencilFunctionReference(reference: number) {\r\n        this._stencilState.stencilFuncRef = reference;\r\n    }\r\n\r\n    /**\r\n     * Sets the current stencil mask\r\n     * @param mask defines the new stencil mask to use\r\n     */\r\n    public setStencilFunctionMask(mask: number) {\r\n        this._stencilState.stencilFuncMask = mask;\r\n    }\r\n\r\n    /**\r\n     * Gets the current stencil operation when stencil fails\r\n     * @returns a number defining stencil operation to use when stencil fails\r\n     */\r\n    public getStencilOperationFail(): number {\r\n        return this._stencilState.stencilOpStencilFail;\r\n    }\r\n\r\n    /**\r\n     * Gets the current stencil operation when depth fails\r\n     * @returns a number defining stencil operation to use when depth fails\r\n     */\r\n    public getStencilOperationDepthFail(): number {\r\n        return this._stencilState.stencilOpDepthFail;\r\n    }\r\n\r\n    /**\r\n     * Gets the current stencil operation when stencil passes\r\n     * @returns a number defining stencil operation to use when stencil passes\r\n     */\r\n    public getStencilOperationPass(): number {\r\n        return this._stencilState.stencilOpStencilDepthPass;\r\n    }\r\n\r\n    /**\r\n     * Sets the stencil operation to use when stencil fails\r\n     * @param operation defines the stencil operation to use when stencil fails\r\n     */\r\n    public setStencilOperationFail(operation: number): void {\r\n        this._stencilState.stencilOpStencilFail = operation;\r\n    }\r\n\r\n    /**\r\n     * Sets the stencil operation to use when depth fails\r\n     * @param operation defines the stencil operation to use when depth fails\r\n     */\r\n    public setStencilOperationDepthFail(operation: number): void {\r\n        this._stencilState.stencilOpDepthFail = operation;\r\n    }\r\n\r\n    /**\r\n     * Sets the stencil operation to use when stencil passes\r\n     * @param operation defines the stencil operation to use when stencil passes\r\n     */\r\n    public setStencilOperationPass(operation: number): void {\r\n        this._stencilState.stencilOpStencilDepthPass = operation;\r\n    }\r\n\r\n    /**\r\n     * Sets a boolean indicating if the dithering state is enabled or disabled\r\n     * @param value defines the dithering state\r\n     */\r\n    public setDitheringState(value: boolean): void {\r\n        if (value) {\r\n            this._gl.enable(this._gl.DITHER);\r\n        } else {\r\n            this._gl.disable(this._gl.DITHER);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sets a boolean indicating if the rasterizer state is enabled or disabled\r\n     * @param value defines the rasterizer state\r\n     */\r\n    public setRasterizerState(value: boolean): void {\r\n        if (value) {\r\n            this._gl.disable(this._gl.RASTERIZER_DISCARD);\r\n        } else {\r\n            this._gl.enable(this._gl.RASTERIZER_DISCARD);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets the current depth function\r\n     * @returns a number defining the depth function\r\n     */\r\n    public getDepthFunction(): Nullable<number> {\r\n        return this._depthCullingState.depthFunc;\r\n    }\r\n\r\n    /**\r\n     * Sets the current depth function\r\n     * @param depthFunc defines the function to use\r\n     */\r\n    public setDepthFunction(depthFunc: number) {\r\n        this._depthCullingState.depthFunc = depthFunc;\r\n    }\r\n\r\n    /**\r\n     * Sets the current depth function to GREATER\r\n     */\r\n    public setDepthFunctionToGreater(): void {\r\n        this.setDepthFunction(Constants.GREATER);\r\n    }\r\n\r\n    /**\r\n     * Sets the current depth function to GEQUAL\r\n     */\r\n    public setDepthFunctionToGreaterOrEqual(): void {\r\n        this.setDepthFunction(Constants.GEQUAL);\r\n    }\r\n\r\n    /**\r\n     * Sets the current depth function to LESS\r\n     */\r\n    public setDepthFunctionToLess(): void {\r\n        this.setDepthFunction(Constants.LESS);\r\n    }\r\n\r\n    /**\r\n     * Sets the current depth function to LEQUAL\r\n     */\r\n    public setDepthFunctionToLessOrEqual(): void {\r\n        this.setDepthFunction(Constants.LEQUAL);\r\n    }\r\n\r\n    private _cachedStencilBuffer: boolean;\r\n    private _cachedStencilFunction: number;\r\n    private _cachedStencilMask: number;\r\n    private _cachedStencilOperationPass: number;\r\n    private _cachedStencilOperationFail: number;\r\n    private _cachedStencilOperationDepthFail: number;\r\n    private _cachedStencilReference: number;\r\n\r\n    /**\r\n     * Caches the the state of the stencil buffer\r\n     */\r\n    public cacheStencilState() {\r\n        this._cachedStencilBuffer = this.getStencilBuffer();\r\n        this._cachedStencilFunction = this.getStencilFunction();\r\n        this._cachedStencilMask = this.getStencilMask();\r\n        this._cachedStencilOperationPass = this.getStencilOperationPass();\r\n        this._cachedStencilOperationFail = this.getStencilOperationFail();\r\n        this._cachedStencilOperationDepthFail = this.getStencilOperationDepthFail();\r\n        this._cachedStencilReference = this.getStencilFunctionReference();\r\n    }\r\n\r\n    /**\r\n     * Restores the state of the stencil buffer\r\n     */\r\n    public restoreStencilState() {\r\n        this.setStencilFunction(this._cachedStencilFunction);\r\n        this.setStencilMask(this._cachedStencilMask);\r\n        this.setStencilBuffer(this._cachedStencilBuffer);\r\n        this.setStencilOperationPass(this._cachedStencilOperationPass);\r\n        this.setStencilOperationFail(this._cachedStencilOperationFail);\r\n        this.setStencilOperationDepthFail(this._cachedStencilOperationDepthFail);\r\n        this.setStencilFunctionReference(this._cachedStencilReference);\r\n    }\r\n\r\n    /**\r\n     * Directly set the WebGL Viewport\r\n     * @param x defines the x coordinate of the viewport (in screen space)\r\n     * @param y defines the y coordinate of the viewport (in screen space)\r\n     * @param width defines the width of the viewport (in screen space)\r\n     * @param height defines the height of the viewport (in screen space)\r\n     * @returns the current viewport Object (if any) that is being replaced by this call. You can restore this viewport later on to go back to the original state\r\n     */\r\n    public setDirectViewport(x: number, y: number, width: number, height: number): Nullable<IViewportLike> {\r\n        const currentViewport = this._cachedViewport;\r\n        this._cachedViewport = null;\r\n\r\n        this._viewport(x, y, width, height);\r\n\r\n        return currentViewport;\r\n    }\r\n\r\n    /**\r\n     * Executes a scissor clear (ie. a clear on a specific portion of the screen)\r\n     * @param x defines the x-coordinate of the bottom left corner of the clear rectangle\r\n     * @param y defines the y-coordinate of the corner of the clear rectangle\r\n     * @param width defines the width of the clear rectangle\r\n     * @param height defines the height of the clear rectangle\r\n     * @param clearColor defines the clear color\r\n     */\r\n    public scissorClear(x: number, y: number, width: number, height: number, clearColor: IColor4Like): void {\r\n        this.enableScissor(x, y, width, height);\r\n        this.clear(clearColor, true, true, true);\r\n        this.disableScissor();\r\n    }\r\n\r\n    /**\r\n     * Enable scissor test on a specific rectangle (ie. render will only be executed on a specific portion of the screen)\r\n     * @param x defines the x-coordinate of the bottom left corner of the clear rectangle\r\n     * @param y defines the y-coordinate of the corner of the clear rectangle\r\n     * @param width defines the width of the clear rectangle\r\n     * @param height defines the height of the clear rectangle\r\n     */\r\n    public enableScissor(x: number, y: number, width: number, height: number): void {\r\n        const gl = this._gl;\r\n\r\n        // Change state\r\n        gl.enable(gl.SCISSOR_TEST);\r\n        gl.scissor(x, y, width, height);\r\n    }\r\n\r\n    /**\r\n     * Disable previously set scissor test rectangle\r\n     */\r\n    public disableScissor() {\r\n        const gl = this._gl;\r\n\r\n        gl.disable(gl.SCISSOR_TEST);\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _reportDrawCall(numDrawCalls = 1) {\r\n        this._drawCalls.addCount(numDrawCalls, false);\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _loadFileAsync(url: string, offlineProvider?: IOfflineProvider, useArrayBuffer?: boolean): Promise<string | ArrayBuffer> {\r\n        return new Promise((resolve, reject) => {\r\n            this._loadFile(\r\n                url,\r\n                (data) => {\r\n                    resolve(data);\r\n                },\r\n                undefined,\r\n                offlineProvider,\r\n                useArrayBuffer,\r\n                (request, exception) => {\r\n                    reject(exception);\r\n                }\r\n            );\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Gets the source code of the vertex shader associated with a specific webGL program\r\n     * @param program defines the program to use\r\n     * @returns a string containing the source code of the vertex shader associated with the program\r\n     */\r\n    public getVertexShaderSource(program: WebGLProgram): Nullable<string> {\r\n        const shaders = this._gl.getAttachedShaders(program);\r\n\r\n        if (!shaders) {\r\n            return null;\r\n        }\r\n\r\n        return this._gl.getShaderSource(shaders[0]);\r\n    }\r\n\r\n    /**\r\n     * Gets the source code of the fragment shader associated with a specific webGL program\r\n     * @param program defines the program to use\r\n     * @returns a string containing the source code of the fragment shader associated with the program\r\n     */\r\n    public getFragmentShaderSource(program: WebGLProgram): Nullable<string> {\r\n        const shaders = this._gl.getAttachedShaders(program);\r\n\r\n        if (!shaders) {\r\n            return null;\r\n        }\r\n\r\n        return this._gl.getShaderSource(shaders[1]);\r\n    }\r\n\r\n    /**\r\n     * Sets a depth stencil texture from a render target to the according uniform.\r\n     * @param channel The texture channel\r\n     * @param uniform The uniform to set\r\n     * @param texture The render target texture containing the depth stencil texture to apply\r\n     * @param name The texture name\r\n     */\r\n    public setDepthStencilTexture(channel: number, uniform: Nullable<WebGLUniformLocation>, texture: Nullable<RenderTargetTexture>, name?: string): void {\r\n        if (channel === undefined) {\r\n            return;\r\n        }\r\n\r\n        if (uniform) {\r\n            this._boundUniforms[channel] = uniform;\r\n        }\r\n\r\n        if (!texture || !texture.depthStencilTexture) {\r\n            this._setTexture(channel, null, undefined, undefined, name);\r\n        } else {\r\n            this._setTexture(channel, texture, false, true, name);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sets a texture to the webGL context from a postprocess\r\n     * @param channel defines the channel to use\r\n     * @param postProcess defines the source postprocess\r\n     * @param name name of the channel\r\n     */\r\n    public setTextureFromPostProcess(channel: number, postProcess: Nullable<PostProcess>, name: string): void {\r\n        let postProcessInput = null;\r\n        if (postProcess) {\r\n            if (postProcess._forcedOutputTexture) {\r\n                postProcessInput = postProcess._forcedOutputTexture;\r\n            } else if (postProcess._textures.data[postProcess._currentRenderTextureInd]) {\r\n                postProcessInput = postProcess._textures.data[postProcess._currentRenderTextureInd];\r\n            }\r\n        }\r\n\r\n        this._bindTexture(channel, postProcessInput?.texture ?? null, name);\r\n    }\r\n\r\n    /**\r\n     * Binds the output of the passed in post process to the texture channel specified\r\n     * @param channel The channel the texture should be bound to\r\n     * @param postProcess The post process which's output should be bound\r\n     * @param name name of the channel\r\n     */\r\n    public setTextureFromPostProcessOutput(channel: number, postProcess: Nullable<PostProcess>, name: string): void {\r\n        this._bindTexture(channel, postProcess?._outputTexture?.texture ?? null, name);\r\n    }\r\n\r\n    protected _rebuildBuffers(): void {\r\n        // Index / Vertex\r\n        for (const scene of this.scenes) {\r\n            scene.resetCachedMaterial();\r\n            scene._rebuildGeometries();\r\n            scene._rebuildTextures();\r\n        }\r\n\r\n        for (const scene of this._virtualScenes) {\r\n            scene.resetCachedMaterial();\r\n            scene._rebuildGeometries();\r\n            scene._rebuildTextures();\r\n        }\r\n\r\n        super._rebuildBuffers();\r\n    }\r\n\r\n    /** @internal */\r\n    public _renderFrame() {\r\n        for (let index = 0; index < this._activeRenderLoops.length; index++) {\r\n            const renderFunction = this._activeRenderLoops[index];\r\n\r\n            renderFunction();\r\n        }\r\n    }\r\n\r\n    protected _cancelFrame() {\r\n        if (this._renderingQueueLaunched && this.customAnimationFrameRequester) {\r\n            this._renderingQueueLaunched = false;\r\n            const { cancelAnimationFrame } = this.customAnimationFrameRequester;\r\n            if (cancelAnimationFrame) {\r\n                cancelAnimationFrame(this.customAnimationFrameRequester.requestID);\r\n            }\r\n        } else {\r\n            super._cancelFrame();\r\n        }\r\n    }\r\n\r\n    public _renderLoop(): void {\r\n        if (!this._contextWasLost) {\r\n            let shouldRender = true;\r\n            if (this.isDisposed || (!this.renderEvenInBackground && this._windowIsBackground)) {\r\n                shouldRender = false;\r\n            }\r\n\r\n            if (shouldRender) {\r\n                // Start new frame\r\n                this.beginFrame();\r\n\r\n                // Child canvases\r\n                if (!this._renderViews()) {\r\n                    // Main frame\r\n                    this._renderFrame();\r\n                }\r\n\r\n                // Present\r\n                this.endFrame();\r\n            }\r\n        }\r\n\r\n        if (this._activeRenderLoops.length > 0) {\r\n            // Register new frame\r\n            if (this.customAnimationFrameRequester) {\r\n                this.customAnimationFrameRequester.requestID = this._queueNewFrame(\r\n                    this.customAnimationFrameRequester.renderFunction || this._boundRenderFunction,\r\n                    this.customAnimationFrameRequester\r\n                );\r\n                this._frameHandler = this.customAnimationFrameRequester.requestID;\r\n            } else {\r\n                this._frameHandler = this._queueNewFrame(this._boundRenderFunction, this.getHostWindow());\r\n            }\r\n        } else {\r\n            this._renderingQueueLaunched = false;\r\n        }\r\n    }\r\n\r\n    /** @internal */\r\n    public _renderViews() {\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Toggle full screen mode\r\n     * @param requestPointerLock defines if a pointer lock should be requested from the user\r\n     */\r\n    public switchFullscreen(requestPointerLock: boolean): void {\r\n        if (this.isFullscreen) {\r\n            this.exitFullscreen();\r\n        } else {\r\n            this.enterFullscreen(requestPointerLock);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Enters full screen mode\r\n     * @param requestPointerLock defines if a pointer lock should be requested from the user\r\n     */\r\n    public enterFullscreen(requestPointerLock: boolean): void {\r\n        if (!this.isFullscreen) {\r\n            this._pointerLockRequested = requestPointerLock;\r\n            if (this._renderingCanvas) {\r\n                Engine._RequestFullscreen(this._renderingCanvas);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Exits full screen mode\r\n     */\r\n    public exitFullscreen(): void {\r\n        if (this.isFullscreen) {\r\n            Engine._ExitFullscreen();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Enters Pointerlock mode\r\n     */\r\n    public enterPointerlock(): void {\r\n        if (this._renderingCanvas) {\r\n            Engine._RequestPointerlock(this._renderingCanvas);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Exits Pointerlock mode\r\n     */\r\n    public exitPointerlock(): void {\r\n        Engine._ExitPointerlock();\r\n    }\r\n\r\n    /**\r\n     * Begin a new frame\r\n     */\r\n    public beginFrame(): void {\r\n        this._measureFps();\r\n\r\n        this.onBeginFrameObservable.notifyObservers(this);\r\n        super.beginFrame();\r\n    }\r\n\r\n    /**\r\n     * End the current frame\r\n     */\r\n    public endFrame(): void {\r\n        super.endFrame();\r\n\r\n        this.onEndFrameObservable.notifyObservers(this);\r\n    }\r\n\r\n    /**\r\n     * Force a specific size of the canvas\r\n     * @param width defines the new canvas' width\r\n     * @param height defines the new canvas' height\r\n     * @param forceSetSize true to force setting the sizes of the underlying canvas\r\n     * @returns true if the size was changed\r\n     */\r\n    public setSize(width: number, height: number, forceSetSize = false): boolean {\r\n        if (!this._renderingCanvas) {\r\n            return false;\r\n        }\r\n\r\n        if (!super.setSize(width, height, forceSetSize)) {\r\n            return false;\r\n        }\r\n\r\n        if (this.scenes) {\r\n            for (let index = 0; index < this.scenes.length; index++) {\r\n                const scene = this.scenes[index];\r\n\r\n                for (let camIndex = 0; camIndex < scene.cameras.length; camIndex++) {\r\n                    const cam = scene.cameras[camIndex];\r\n\r\n                    cam._currentRenderId = 0;\r\n                }\r\n            }\r\n\r\n            if (this.onResizeObservable.hasObservers()) {\r\n                this.onResizeObservable.notifyObservers(this);\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    public _deletePipelineContext(pipelineContext: IPipelineContext): void {\r\n        const webGLPipelineContext = pipelineContext as WebGLPipelineContext;\r\n        if (webGLPipelineContext && webGLPipelineContext.program) {\r\n            if (webGLPipelineContext.transformFeedback) {\r\n                this.deleteTransformFeedback(webGLPipelineContext.transformFeedback);\r\n                webGLPipelineContext.transformFeedback = null;\r\n            }\r\n        }\r\n        super._deletePipelineContext(pipelineContext);\r\n    }\r\n\r\n    public createShaderProgram(\r\n        pipelineContext: IPipelineContext,\r\n        vertexCode: string,\r\n        fragmentCode: string,\r\n        defines: Nullable<string>,\r\n        context?: WebGLRenderingContext,\r\n        transformFeedbackVaryings: Nullable<string[]> = null\r\n    ): WebGLProgram {\r\n        context = context || this._gl;\r\n\r\n        this.onBeforeShaderCompilationObservable.notifyObservers(this);\r\n\r\n        const program = super.createShaderProgram(pipelineContext, vertexCode, fragmentCode, defines, context, transformFeedbackVaryings);\r\n        this.onAfterShaderCompilationObservable.notifyObservers(this);\r\n\r\n        return program;\r\n    }\r\n\r\n    protected _createShaderProgram(\r\n        pipelineContext: WebGLPipelineContext,\r\n        vertexShader: WebGLShader,\r\n        fragmentShader: WebGLShader,\r\n        context: WebGLRenderingContext,\r\n        transformFeedbackVaryings: Nullable<string[]> = null\r\n    ): WebGLProgram {\r\n        const shaderProgram = context.createProgram();\r\n        pipelineContext.program = shaderProgram;\r\n\r\n        if (!shaderProgram) {\r\n            throw new Error(\"Unable to create program\");\r\n        }\r\n\r\n        context.attachShader(shaderProgram, vertexShader);\r\n        context.attachShader(shaderProgram, fragmentShader);\r\n\r\n        if (this.webGLVersion > 1 && transformFeedbackVaryings) {\r\n            const transformFeedback = this.createTransformFeedback();\r\n\r\n            this.bindTransformFeedback(transformFeedback);\r\n            this.setTranformFeedbackVaryings(shaderProgram, transformFeedbackVaryings);\r\n            pipelineContext.transformFeedback = transformFeedback;\r\n        }\r\n\r\n        context.linkProgram(shaderProgram);\r\n\r\n        if (this.webGLVersion > 1 && transformFeedbackVaryings) {\r\n            this.bindTransformFeedback(null);\r\n        }\r\n\r\n        pipelineContext.context = context;\r\n        pipelineContext.vertexShader = vertexShader;\r\n        pipelineContext.fragmentShader = fragmentShader;\r\n\r\n        if (!pipelineContext.isParallelCompiled) {\r\n            this._finalizePipelineContext(pipelineContext);\r\n        }\r\n\r\n        return shaderProgram;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _releaseTexture(texture: InternalTexture): void {\r\n        super._releaseTexture(texture);\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _releaseRenderTargetWrapper(rtWrapper: RenderTargetWrapper): void {\r\n        super._releaseRenderTargetWrapper(rtWrapper);\r\n\r\n        // Set output texture of post process to null if the framebuffer has been released/disposed\r\n        this.scenes.forEach((scene) => {\r\n            scene.postProcesses.forEach((postProcess) => {\r\n                if (postProcess._outputTexture === rtWrapper) {\r\n                    postProcess._outputTexture = null;\r\n                }\r\n            });\r\n            scene.cameras.forEach((camera) => {\r\n                camera._postProcesses.forEach((postProcess) => {\r\n                    if (postProcess) {\r\n                        if (postProcess._outputTexture === rtWrapper) {\r\n                            postProcess._outputTexture = null;\r\n                        }\r\n                    }\r\n                });\r\n            });\r\n        });\r\n    }\r\n\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    protected static _RenderPassIdCounter = 0;\r\n    /**\r\n     * Gets or sets the current render pass id\r\n     */\r\n    public currentRenderPassId = Constants.RENDERPASS_MAIN;\r\n\r\n    private _renderPassNames: string[] = [\"main\"];\r\n    /**\r\n     * Gets the names of the render passes that are currently created\r\n     * @returns list of the render pass names\r\n     */\r\n    public getRenderPassNames(): string[] {\r\n        return this._renderPassNames;\r\n    }\r\n\r\n    /**\r\n     * Gets the name of the current render pass\r\n     * @returns name of the current render pass\r\n     */\r\n    public getCurrentRenderPassName(): string {\r\n        return this._renderPassNames[this.currentRenderPassId];\r\n    }\r\n\r\n    /**\r\n     * Creates a render pass id\r\n     * @param name Name of the render pass (for debug purpose only)\r\n     * @returns the id of the new render pass\r\n     */\r\n    public createRenderPassId(name?: string) {\r\n        // Note: render pass id == 0 is always for the main render pass\r\n        const id = ++Engine._RenderPassIdCounter;\r\n        this._renderPassNames[id] = name ?? \"NONAME\";\r\n        return id;\r\n    }\r\n\r\n    /**\r\n     * Releases a render pass id\r\n     * @param id id of the render pass to release\r\n     */\r\n    public releaseRenderPassId(id: number): void {\r\n        this._renderPassNames[id] = undefined as any;\r\n\r\n        for (let s = 0; s < this.scenes.length; ++s) {\r\n            const scene = this.scenes[s];\r\n            for (let m = 0; m < scene.meshes.length; ++m) {\r\n                const mesh = scene.meshes[m];\r\n                if (mesh.subMeshes) {\r\n                    for (let b = 0; b < mesh.subMeshes.length; ++b) {\r\n                        const subMesh = mesh.subMeshes[b];\r\n                        subMesh._removeDrawWrapper(id);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * Rescales a texture\r\n     * @param source input texture\r\n     * @param destination destination texture\r\n     * @param scene scene to use to render the resize\r\n     * @param internalFormat format to use when resizing\r\n     * @param onComplete callback to be called when resize has completed\r\n     */\r\n    public _rescaleTexture(source: InternalTexture, destination: InternalTexture, scene: Nullable<any>, internalFormat: number, onComplete: () => void): void {\r\n        this._gl.texParameteri(this._gl.TEXTURE_2D, this._gl.TEXTURE_MAG_FILTER, this._gl.LINEAR);\r\n        this._gl.texParameteri(this._gl.TEXTURE_2D, this._gl.TEXTURE_MIN_FILTER, this._gl.LINEAR);\r\n        this._gl.texParameteri(this._gl.TEXTURE_2D, this._gl.TEXTURE_WRAP_S, this._gl.CLAMP_TO_EDGE);\r\n        this._gl.texParameteri(this._gl.TEXTURE_2D, this._gl.TEXTURE_WRAP_T, this._gl.CLAMP_TO_EDGE);\r\n\r\n        const rtt = this.createRenderTargetTexture(\r\n            {\r\n                width: destination.width,\r\n                height: destination.height,\r\n            },\r\n            {\r\n                generateMipMaps: false,\r\n                type: Constants.TEXTURETYPE_UNSIGNED_INT,\r\n                samplingMode: Constants.TEXTURE_BILINEAR_SAMPLINGMODE,\r\n                generateDepthBuffer: false,\r\n                generateStencilBuffer: false,\r\n            }\r\n        );\r\n\r\n        if (!this._rescalePostProcess && Engine._RescalePostProcessFactory) {\r\n            this._rescalePostProcess = Engine._RescalePostProcessFactory(this);\r\n        }\r\n\r\n        if (this._rescalePostProcess) {\r\n            this._rescalePostProcess.externalTextureSamplerBinding = true;\r\n            this._rescalePostProcess.getEffect().executeWhenCompiled(() => {\r\n                this._rescalePostProcess!.onApply = function (effect) {\r\n                    effect._bindTexture(\"textureSampler\", source);\r\n                };\r\n\r\n                let hostingScene: Scene = scene;\r\n\r\n                if (!hostingScene) {\r\n                    hostingScene = this.scenes[this.scenes.length - 1];\r\n                }\r\n                hostingScene.postProcessManager.directRender([this._rescalePostProcess!], rtt, true);\r\n\r\n                this._bindTextureDirectly(this._gl.TEXTURE_2D, destination, true);\r\n                this._gl.copyTexImage2D(this._gl.TEXTURE_2D, 0, internalFormat, 0, 0, destination.width, destination.height, 0);\r\n\r\n                this.unBindFramebuffer(rtt);\r\n                rtt.dispose();\r\n\r\n                if (onComplete) {\r\n                    onComplete();\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    // FPS\r\n\r\n    /**\r\n     * Gets the current framerate\r\n     * @returns a number representing the framerate\r\n     */\r\n    public getFps(): number {\r\n        return this._fps;\r\n    }\r\n\r\n    /**\r\n     * Gets the time spent between current and previous frame\r\n     * @returns a number representing the delta time in ms\r\n     */\r\n    public getDeltaTime(): number {\r\n        return this._deltaTime;\r\n    }\r\n\r\n    private _measureFps(): void {\r\n        this._performanceMonitor.sampleFrame();\r\n        this._fps = this._performanceMonitor.averageFPS;\r\n        this._deltaTime = this._performanceMonitor.instantaneousFrameTime || 0;\r\n    }\r\n\r\n    /**\r\n     * Wraps an external web gl texture in a Babylon texture.\r\n     * @param texture defines the external texture\r\n     * @param hasMipMaps defines whether the external texture has mip maps (default: false)\r\n     * @param samplingMode defines the sampling mode for the external texture (default: Constants.TEXTURE_TRILINEAR_SAMPLINGMODE)\r\n     * @param width defines the width for the external texture (default: 0)\r\n     * @param height defines the height for the external texture (default: 0)\r\n     * @returns the babylon internal texture\r\n     */\r\n    public wrapWebGLTexture(\r\n        texture: WebGLTexture,\r\n        hasMipMaps: boolean = false,\r\n        samplingMode: number = Constants.TEXTURE_TRILINEAR_SAMPLINGMODE,\r\n        width: number = 0,\r\n        height: number = 0\r\n    ): InternalTexture {\r\n        const hardwareTexture = new WebGLHardwareTexture(texture, this._gl);\r\n        const internalTexture = new InternalTexture(this, InternalTextureSource.Unknown, true);\r\n        internalTexture._hardwareTexture = hardwareTexture;\r\n        internalTexture.baseWidth = width;\r\n        internalTexture.baseHeight = height;\r\n        internalTexture.width = width;\r\n        internalTexture.height = height;\r\n        internalTexture.isReady = true;\r\n        internalTexture.useMipMaps = hasMipMaps;\r\n        this.updateTextureSamplingMode(samplingMode, internalTexture);\r\n        return internalTexture;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _uploadImageToTexture(texture: InternalTexture, image: HTMLImageElement | ImageBitmap, faceIndex: number = 0, lod: number = 0) {\r\n        const gl = this._gl;\r\n\r\n        const textureType = this._getWebGLTextureType(texture.type);\r\n        const format = this._getInternalFormat(texture.format);\r\n        const internalFormat = this._getRGBABufferInternalSizedFormat(texture.type, format);\r\n\r\n        const bindTarget = texture.isCube ? gl.TEXTURE_CUBE_MAP : gl.TEXTURE_2D;\r\n\r\n        this._bindTextureDirectly(bindTarget, texture, true);\r\n        this._unpackFlipY(texture.invertY);\r\n\r\n        let target: GLenum = gl.TEXTURE_2D;\r\n        if (texture.isCube) {\r\n            target = gl.TEXTURE_CUBE_MAP_POSITIVE_X + faceIndex;\r\n        }\r\n\r\n        gl.texImage2D(target, lod, internalFormat, format, textureType, image);\r\n        this._bindTextureDirectly(bindTarget, null, true);\r\n    }\r\n\r\n    /**\r\n     * Updates a depth texture Comparison Mode and Function.\r\n     * If the comparison Function is equal to 0, the mode will be set to none.\r\n     * Otherwise, this only works in webgl 2 and requires a shadow sampler in the shader.\r\n     * @param texture The texture to set the comparison function for\r\n     * @param comparisonFunction The comparison function to set, 0 if no comparison required\r\n     */\r\n    public updateTextureComparisonFunction(texture: InternalTexture, comparisonFunction: number): void {\r\n        if (this.webGLVersion === 1) {\r\n            Logger.Error(\"WebGL 1 does not support texture comparison.\");\r\n            return;\r\n        }\r\n\r\n        const gl = this._gl;\r\n\r\n        if (texture.isCube) {\r\n            this._bindTextureDirectly(this._gl.TEXTURE_CUBE_MAP, texture, true);\r\n\r\n            if (comparisonFunction === 0) {\r\n                gl.texParameteri(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_COMPARE_FUNC, Constants.LEQUAL);\r\n                gl.texParameteri(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_COMPARE_MODE, gl.NONE);\r\n            } else {\r\n                gl.texParameteri(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_COMPARE_FUNC, comparisonFunction);\r\n                gl.texParameteri(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_COMPARE_MODE, gl.COMPARE_REF_TO_TEXTURE);\r\n            }\r\n\r\n            this._bindTextureDirectly(this._gl.TEXTURE_CUBE_MAP, null);\r\n        } else {\r\n            this._bindTextureDirectly(this._gl.TEXTURE_2D, texture, true);\r\n\r\n            if (comparisonFunction === 0) {\r\n                gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_COMPARE_FUNC, Constants.LEQUAL);\r\n                gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_COMPARE_MODE, gl.NONE);\r\n            } else {\r\n                gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_COMPARE_FUNC, comparisonFunction);\r\n                gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_COMPARE_MODE, gl.COMPARE_REF_TO_TEXTURE);\r\n            }\r\n\r\n            this._bindTextureDirectly(this._gl.TEXTURE_2D, null);\r\n        }\r\n\r\n        texture._comparisonFunction = comparisonFunction;\r\n    }\r\n\r\n    /**\r\n     * Creates a webGL buffer to use with instantiation\r\n     * @param capacity defines the size of the buffer\r\n     * @returns the webGL buffer\r\n     */\r\n    public createInstancesBuffer(capacity: number): DataBuffer {\r\n        const buffer = this._gl.createBuffer();\r\n\r\n        if (!buffer) {\r\n            throw new Error(\"Unable to create instance buffer\");\r\n        }\r\n\r\n        const result = new WebGLDataBuffer(buffer);\r\n        result.capacity = capacity;\r\n\r\n        this.bindArrayBuffer(result);\r\n        this._gl.bufferData(this._gl.ARRAY_BUFFER, capacity, this._gl.DYNAMIC_DRAW);\r\n\r\n        result.references = 1;\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Delete a webGL buffer used with instantiation\r\n     * @param buffer defines the webGL buffer to delete\r\n     */\r\n    public deleteInstancesBuffer(buffer: WebGLBuffer): void {\r\n        this._gl.deleteBuffer(buffer);\r\n    }\r\n\r\n    private _clientWaitAsync(sync: WebGLSync, flags = 0, intervalms = 10): Promise<void> {\r\n        const gl = <WebGL2RenderingContext>(this._gl as any);\r\n        return new Promise((resolve, reject) => {\r\n            const check = () => {\r\n                const res = gl.clientWaitSync(sync, flags, 0);\r\n                if (res == gl.WAIT_FAILED) {\r\n                    reject();\r\n                    return;\r\n                }\r\n                if (res == gl.TIMEOUT_EXPIRED) {\r\n                    setTimeout(check, intervalms);\r\n                    return;\r\n                }\r\n                resolve();\r\n            };\r\n\r\n            check();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _readPixelsAsync(x: number, y: number, w: number, h: number, format: number, type: number, outputBuffer: ArrayBufferView) {\r\n        if (this._webGLVersion < 2) {\r\n            throw new Error(\"_readPixelsAsync only work on WebGL2+\");\r\n        }\r\n\r\n        const gl = <WebGL2RenderingContext>(this._gl as any);\r\n        const buf = gl.createBuffer();\r\n        gl.bindBuffer(gl.PIXEL_PACK_BUFFER, buf);\r\n        gl.bufferData(gl.PIXEL_PACK_BUFFER, outputBuffer.byteLength, gl.STREAM_READ);\r\n        gl.readPixels(x, y, w, h, format, type, 0);\r\n        gl.bindBuffer(gl.PIXEL_PACK_BUFFER, null);\r\n\r\n        const sync = gl.fenceSync(gl.SYNC_GPU_COMMANDS_COMPLETE, 0);\r\n        if (!sync) {\r\n            return null;\r\n        }\r\n\r\n        gl.flush();\r\n\r\n        return this._clientWaitAsync(sync, 0, 10).then(() => {\r\n            gl.deleteSync(sync);\r\n\r\n            gl.bindBuffer(gl.PIXEL_PACK_BUFFER, buf);\r\n            gl.getBufferSubData(gl.PIXEL_PACK_BUFFER, 0, outputBuffer);\r\n            gl.bindBuffer(gl.PIXEL_PACK_BUFFER, null);\r\n            gl.deleteBuffer(buf);\r\n\r\n            return outputBuffer;\r\n        });\r\n    }\r\n\r\n    public dispose(): void {\r\n        this.hideLoadingUI();\r\n\r\n        this.onNewSceneAddedObservable.clear();\r\n\r\n        // Release postProcesses\r\n        while (this.postProcesses.length) {\r\n            this.postProcesses[0].dispose();\r\n        }\r\n\r\n        // Rescale PP\r\n        if (this._rescalePostProcess) {\r\n            this._rescalePostProcess.dispose();\r\n        }\r\n\r\n        // Release scenes\r\n        while (this.scenes.length) {\r\n            this.scenes[0].dispose();\r\n        }\r\n\r\n        while (this._virtualScenes.length) {\r\n            this._virtualScenes[0].dispose();\r\n        }\r\n\r\n        // Release audio engine\r\n        if (EngineStore.Instances.length === 1 && Engine.audioEngine) {\r\n            Engine.audioEngine.dispose();\r\n            Engine.audioEngine = null;\r\n        }\r\n\r\n        // Events\r\n        const hostWindow = this.getHostWindow(); // it calls IsWindowObjectExist()\r\n        if (hostWindow && typeof hostWindow.removeEventListener === \"function\") {\r\n            hostWindow.removeEventListener(\"blur\", this._onBlur);\r\n            hostWindow.removeEventListener(\"focus\", this._onFocus);\r\n        }\r\n\r\n        if (this._renderingCanvas) {\r\n            this._renderingCanvas.removeEventListener(\"focus\", this._onCanvasFocus);\r\n            this._renderingCanvas.removeEventListener(\"blur\", this._onCanvasBlur);\r\n            this._renderingCanvas.removeEventListener(\"pointerout\", this._onCanvasPointerOut);\r\n            this._renderingCanvas.removeEventListener(\"contextmenu\", this._onCanvasContextMenu);\r\n        }\r\n\r\n        if (IsDocumentAvailable()) {\r\n            document.removeEventListener(\"fullscreenchange\", this._onFullscreenChange);\r\n            document.removeEventListener(\"mozfullscreenchange\", this._onFullscreenChange);\r\n            document.removeEventListener(\"webkitfullscreenchange\", this._onFullscreenChange);\r\n            document.removeEventListener(\"msfullscreenchange\", this._onFullscreenChange);\r\n            document.removeEventListener(\"pointerlockchange\", this._onPointerLockChange);\r\n            document.removeEventListener(\"mspointerlockchange\", this._onPointerLockChange);\r\n            document.removeEventListener(\"mozpointerlockchange\", this._onPointerLockChange);\r\n            document.removeEventListener(\"webkitpointerlockchange\", this._onPointerLockChange);\r\n        }\r\n\r\n        super.dispose();\r\n\r\n        // Remove from Instances\r\n        const index = EngineStore.Instances.indexOf(this);\r\n\r\n        if (index >= 0) {\r\n            EngineStore.Instances.splice(index, 1);\r\n        }\r\n\r\n        // no more engines left in the engine store? Notify!\r\n        if (!Engine.Instances.length) {\r\n            EngineStore.OnEnginesDisposedObservable.notifyObservers(this);\r\n        }\r\n\r\n        // Observables\r\n        this.onResizeObservable.clear();\r\n        this.onCanvasBlurObservable.clear();\r\n        this.onCanvasFocusObservable.clear();\r\n        this.onCanvasPointerOutObservable.clear();\r\n        this.onBeginFrameObservable.clear();\r\n        this.onEndFrameObservable.clear();\r\n    }\r\n\r\n    private _disableTouchAction(): void {\r\n        if (!this._renderingCanvas || !this._renderingCanvas.setAttribute) {\r\n            return;\r\n        }\r\n\r\n        this._renderingCanvas.setAttribute(\"touch-action\", \"none\");\r\n        this._renderingCanvas.style.touchAction = \"none\";\r\n        (this._renderingCanvas.style as any).webkitTapHighlightColor = \"transparent\";\r\n    }\r\n\r\n    // Loading screen\r\n\r\n    /**\r\n     * Display the loading screen\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/scene/customLoadingScreen\r\n     */\r\n    public displayLoadingUI(): void {\r\n        if (!IsWindowObjectExist()) {\r\n            return;\r\n        }\r\n        const loadingScreen = this.loadingScreen;\r\n        if (loadingScreen) {\r\n            loadingScreen.displayLoadingUI();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Hide the loading screen\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/scene/customLoadingScreen\r\n     */\r\n    public hideLoadingUI(): void {\r\n        if (!IsWindowObjectExist()) {\r\n            return;\r\n        }\r\n        const loadingScreen = this._loadingScreen;\r\n        if (loadingScreen) {\r\n            loadingScreen.hideLoadingUI();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets the current loading screen object\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/scene/customLoadingScreen\r\n     */\r\n    public get loadingScreen(): ILoadingScreen {\r\n        if (!this._loadingScreen && this._renderingCanvas) {\r\n            this._loadingScreen = Engine.DefaultLoadingScreenFactory(this._renderingCanvas);\r\n        }\r\n        return this._loadingScreen;\r\n    }\r\n\r\n    /**\r\n     * Sets the current loading screen object\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/scene/customLoadingScreen\r\n     */\r\n    public set loadingScreen(loadingScreen: ILoadingScreen) {\r\n        this._loadingScreen = loadingScreen;\r\n    }\r\n\r\n    /**\r\n     * Sets the current loading screen text\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/scene/customLoadingScreen\r\n     */\r\n    public set loadingUIText(text: string) {\r\n        this.loadingScreen.loadingUIText = text;\r\n    }\r\n\r\n    /**\r\n     * Sets the current loading screen background color\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/scene/customLoadingScreen\r\n     */\r\n    public set loadingUIBackgroundColor(color: string) {\r\n        this.loadingScreen.loadingUIBackgroundColor = color;\r\n    }\r\n\r\n    /**\r\n     * creates and returns a new video element\r\n     * @param constraints video constraints\r\n     * @returns video element\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    public createVideoElement(constraints: MediaTrackConstraints): any {\r\n        return document.createElement(\"video\");\r\n    }\r\n\r\n    /** Pointerlock and fullscreen */\r\n\r\n    /**\r\n     * Ask the browser to promote the current element to pointerlock mode\r\n     * @param element defines the DOM element to promote\r\n     */\r\n    static _RequestPointerlock(element: HTMLElement): void {\r\n        if (element.requestPointerLock) {\r\n            // In some browsers, requestPointerLock returns a promise.\r\n            // Handle possible rejections to avoid an unhandled top-level exception.\r\n            const promise: unknown = element.requestPointerLock();\r\n            if (promise instanceof Promise)\r\n                promise\r\n                    .then(() => {\r\n                        element.focus();\r\n                    })\r\n                    .catch(() => {});\r\n            else element.focus();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Asks the browser to exit pointerlock mode\r\n     */\r\n    static _ExitPointerlock(): void {\r\n        if (document.exitPointerLock) {\r\n            document.exitPointerLock();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Ask the browser to promote the current element to fullscreen rendering mode\r\n     * @param element defines the DOM element to promote\r\n     */\r\n    static _RequestFullscreen(element: HTMLElement): void {\r\n        const requestFunction = element.requestFullscreen || (<any>element).webkitRequestFullscreen;\r\n        if (!requestFunction) {\r\n            return;\r\n        }\r\n        requestFunction.call(element);\r\n    }\r\n\r\n    /**\r\n     * Asks the browser to exit fullscreen mode\r\n     */\r\n    static _ExitFullscreen(): void {\r\n        const anyDoc = document as any;\r\n\r\n        if (document.exitFullscreen) {\r\n            document.exitFullscreen();\r\n        } else if (anyDoc.webkitCancelFullScreen) {\r\n            anyDoc.webkitCancelFullScreen();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Get Font size information\r\n     * @param font font name\r\n     * @returns an object containing ascent, height and descent\r\n     */\r\n    public getFontOffset(font: string): { ascent: number; height: number; descent: number } {\r\n        const text = document.createElement(\"span\");\r\n        text.innerHTML = \"Hg\";\r\n        text.setAttribute(\"style\", `font: ${font} !important`);\r\n\r\n        const block = document.createElement(\"div\");\r\n        block.style.display = \"inline-block\";\r\n        block.style.width = \"1px\";\r\n        block.style.height = \"0px\";\r\n        block.style.verticalAlign = \"bottom\";\r\n\r\n        const div = document.createElement(\"div\");\r\n        div.style.whiteSpace = \"nowrap\";\r\n        div.appendChild(text);\r\n        div.appendChild(block);\r\n\r\n        document.body.appendChild(div);\r\n\r\n        let fontAscent = 0;\r\n        let fontHeight = 0;\r\n        try {\r\n            fontHeight = block.getBoundingClientRect().top - text.getBoundingClientRect().top;\r\n            block.style.verticalAlign = \"baseline\";\r\n            fontAscent = block.getBoundingClientRect().top - text.getBoundingClientRect().top;\r\n        } finally {\r\n            document.body.removeChild(div);\r\n        }\r\n        return { ascent: fontAscent, height: fontHeight, descent: fontHeight - fontAscent };\r\n    }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}