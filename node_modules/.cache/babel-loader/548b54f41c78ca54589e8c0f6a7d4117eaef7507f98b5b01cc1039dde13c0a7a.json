{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { NodeMaterialBlock } from \"../../nodeMaterialBlock.js\";\nimport { NodeMaterialBlockConnectionPointTypes } from \"../../Enums/nodeMaterialBlockConnectionPointTypes.js\";\nimport { NodeMaterialBlockTargets } from \"../../Enums/nodeMaterialBlockTargets.js\";\nimport { InputBlock } from \"../Input/inputBlock.js\";\nimport { RegisterClass } from \"../../../../Misc/typeStore.js\";\nimport { Texture } from \"../../../Textures/texture.js\";\n/**\n * Base block used for the particle texture\n */\nexport class ParticleTextureBlock extends NodeMaterialBlock {\n  /**\n   * Create a new ParticleTextureBlock\n   * @param name defines the block name\n   */\n  constructor(name) {\n    super(name, NodeMaterialBlockTargets.Fragment);\n    this._samplerName = \"diffuseSampler\";\n    /**\n     * Gets or sets a boolean indicating if content needs to be converted to gamma space\n     */\n    this.convertToGammaSpace = false;\n    /**\n     * Gets or sets a boolean indicating if content needs to be converted to linear space\n     */\n    this.convertToLinearSpace = false;\n    this._isUnique = false;\n    this.registerInput(\"uv\", NodeMaterialBlockConnectionPointTypes.AutoDetect, false, NodeMaterialBlockTargets.VertexAndFragment);\n    this.registerOutput(\"rgba\", NodeMaterialBlockConnectionPointTypes.Color4, NodeMaterialBlockTargets.Neutral);\n    this.registerOutput(\"rgb\", NodeMaterialBlockConnectionPointTypes.Color3, NodeMaterialBlockTargets.Neutral);\n    this.registerOutput(\"r\", NodeMaterialBlockConnectionPointTypes.Float, NodeMaterialBlockTargets.Neutral);\n    this.registerOutput(\"g\", NodeMaterialBlockConnectionPointTypes.Float, NodeMaterialBlockTargets.Neutral);\n    this.registerOutput(\"b\", NodeMaterialBlockConnectionPointTypes.Float, NodeMaterialBlockTargets.Neutral);\n    this.registerOutput(\"a\", NodeMaterialBlockConnectionPointTypes.Float, NodeMaterialBlockTargets.Neutral);\n    this._inputs[0].addExcludedConnectionPointFromAllowedTypes(NodeMaterialBlockConnectionPointTypes.Vector2 | NodeMaterialBlockConnectionPointTypes.Vector3 | NodeMaterialBlockConnectionPointTypes.Vector4);\n  }\n  /**\n   * Gets the current class name\n   * @returns the class name\n   */\n  getClassName() {\n    return \"ParticleTextureBlock\";\n  }\n  /**\n   * Gets the uv input component\n   */\n  get uv() {\n    return this._inputs[0];\n  }\n  /**\n   * Gets the rgba output component\n   */\n  get rgba() {\n    return this._outputs[0];\n  }\n  /**\n   * Gets the rgb output component\n   */\n  get rgb() {\n    return this._outputs[1];\n  }\n  /**\n   * Gets the r output component\n   */\n  get r() {\n    return this._outputs[2];\n  }\n  /**\n   * Gets the g output component\n   */\n  get g() {\n    return this._outputs[3];\n  }\n  /**\n   * Gets the b output component\n   */\n  get b() {\n    return this._outputs[4];\n  }\n  /**\n   * Gets the a output component\n   */\n  get a() {\n    return this._outputs[5];\n  }\n  /**\n   * Initialize the block and prepare the context for build\n   * @param state defines the state that will be used for the build\n   */\n  initialize(state) {\n    state._excludeVariableName(\"diffuseSampler\");\n  }\n  autoConfigure(material, additionalFilteringInfo = () => true) {\n    if (!this.uv.isConnected) {\n      let uvInput = material.getInputBlockByPredicate(b => b.isAttribute && b.name === \"particle_uv\" && additionalFilteringInfo(b));\n      if (!uvInput) {\n        uvInput = new InputBlock(\"uv\");\n        uvInput.setAsAttribute(\"particle_uv\");\n      }\n      uvInput.output.connectTo(this.uv);\n    }\n  }\n  prepareDefines(mesh, nodeMaterial, defines) {\n    defines.setValue(this._linearDefineName, this.convertToGammaSpace, true);\n    defines.setValue(this._gammaDefineName, this.convertToLinearSpace, true);\n  }\n  isReady() {\n    if (this.texture && !this.texture.isReadyOrNotBlocking()) {\n      return false;\n    }\n    return true;\n  }\n  _writeOutput(state, output, swizzle) {\n    state.compilationString += `${this._declareOutput(output, state)} = ${this._tempTextureRead}.${swizzle};\\n`;\n    state.compilationString += `#ifdef ${this._linearDefineName}\\n`;\n    state.compilationString += `${output.associatedVariableName} = toGammaSpace(${output.associatedVariableName});\\n`;\n    state.compilationString += `#endif\\n`;\n    state.compilationString += `#ifdef ${this._gammaDefineName}\\n`;\n    state.compilationString += `${output.associatedVariableName} = toLinearSpace(${output.associatedVariableName});\\n`;\n    state.compilationString += `#endif\\n`;\n  }\n  _buildBlock(state) {\n    super._buildBlock(state);\n    if (state.target === NodeMaterialBlockTargets.Vertex) {\n      return;\n    }\n    this._tempTextureRead = state._getFreeVariableName(\"tempTextureRead\");\n    state._emit2DSampler(this._samplerName);\n    state.sharedData.blockingBlocks.push(this);\n    state.sharedData.textureBlocks.push(this);\n    state.sharedData.blocksWithDefines.push(this);\n    this._linearDefineName = state._getFreeDefineName(\"ISLINEAR\");\n    this._gammaDefineName = state._getFreeDefineName(\"ISGAMMA\");\n    const comments = `//${this.name}`;\n    state._emitFunctionFromInclude(\"helperFunctions\", comments);\n    state.compilationString += `vec4 ${this._tempTextureRead} = texture2D(${this._samplerName}, ${this.uv.associatedVariableName});\\n`;\n    for (const output of this._outputs) {\n      if (output.hasEndpoints) {\n        this._writeOutput(state, output, output.name);\n      }\n    }\n    return this;\n  }\n  serialize() {\n    const serializationObject = super.serialize();\n    serializationObject.convertToGammaSpace = this.convertToGammaSpace;\n    serializationObject.convertToLinearSpace = this.convertToLinearSpace;\n    if (this.texture && !this.texture.isRenderTarget) {\n      serializationObject.texture = this.texture.serialize();\n    }\n    return serializationObject;\n  }\n  _deserialize(serializationObject, scene, rootUrl) {\n    super._deserialize(serializationObject, scene, rootUrl);\n    this.convertToGammaSpace = serializationObject.convertToGammaSpace;\n    this.convertToLinearSpace = !!serializationObject.convertToLinearSpace;\n    if (serializationObject.texture) {\n      rootUrl = serializationObject.texture.url.indexOf(\"data:\") === 0 ? \"\" : rootUrl;\n      this.texture = Texture.Parse(serializationObject.texture, scene, rootUrl);\n    }\n  }\n}\nRegisterClass(\"BABYLON.ParticleTextureBlock\", ParticleTextureBlock);","map":{"version":3,"names":["NodeMaterialBlock","NodeMaterialBlockConnectionPointTypes","NodeMaterialBlockTargets","InputBlock","RegisterClass","Texture","ParticleTextureBlock","constructor","name","Fragment","_samplerName","convertToGammaSpace","convertToLinearSpace","_isUnique","registerInput","AutoDetect","VertexAndFragment","registerOutput","Color4","Neutral","Color3","Float","_inputs","addExcludedConnectionPointFromAllowedTypes","Vector2","Vector3","Vector4","getClassName","uv","rgba","_outputs","rgb","r","g","b","a","initialize","state","_excludeVariableName","autoConfigure","material","additionalFilteringInfo","isConnected","uvInput","getInputBlockByPredicate","isAttribute","setAsAttribute","output","connectTo","prepareDefines","mesh","nodeMaterial","defines","setValue","_linearDefineName","_gammaDefineName","isReady","texture","isReadyOrNotBlocking","_writeOutput","swizzle","compilationString","_declareOutput","_tempTextureRead","associatedVariableName","_buildBlock","target","Vertex","_getFreeVariableName","_emit2DSampler","sharedData","blockingBlocks","push","textureBlocks","blocksWithDefines","_getFreeDefineName","comments","_emitFunctionFromInclude","hasEndpoints","serialize","serializationObject","isRenderTarget","_deserialize","scene","rootUrl","url","indexOf","Parse"],"sources":["../../../../../../../dev/core/src/Materials/Node/Blocks/Particle/particleTextureBlock.ts"],"sourcesContent":["import { NodeMaterialBlock } from \"../../nodeMaterialBlock\";\r\nimport { NodeMaterialBlockConnectionPointTypes } from \"../../Enums/nodeMaterialBlockConnectionPointTypes\";\r\nimport type { NodeMaterialBuildState } from \"../../nodeMaterialBuildState\";\r\nimport { NodeMaterialBlockTargets } from \"../../Enums/nodeMaterialBlockTargets\";\r\nimport type { NodeMaterialConnectionPoint } from \"../../nodeMaterialBlockConnectionPoint\";\r\nimport type { AbstractMesh } from \"../../../../Meshes/abstractMesh\";\r\nimport type { NodeMaterialDefines } from \"../../nodeMaterial\";\r\nimport { InputBlock } from \"../Input/inputBlock\";\r\nimport type { BaseTexture } from \"../../../Textures/baseTexture\";\r\nimport type { Nullable } from \"../../../../types\";\r\nimport { RegisterClass } from \"../../../../Misc/typeStore\";\r\nimport { Texture } from \"../../../Textures/texture\";\r\nimport type { Scene } from \"../../../../scene\";\r\n\r\nimport type { NodeMaterial } from \"../../nodeMaterial\";\r\n\r\n/**\r\n * Base block used for the particle texture\r\n */\r\nexport class ParticleTextureBlock extends NodeMaterialBlock {\r\n    private _samplerName = \"diffuseSampler\";\r\n    private _linearDefineName: string;\r\n    private _gammaDefineName: string;\r\n    private _tempTextureRead: string;\r\n\r\n    /**\r\n     * Gets or sets the texture associated with the node\r\n     */\r\n    public texture: Nullable<BaseTexture>;\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if content needs to be converted to gamma space\r\n     */\r\n    public convertToGammaSpace = false;\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if content needs to be converted to linear space\r\n     */\r\n    public convertToLinearSpace = false;\r\n\r\n    /**\r\n     * Create a new ParticleTextureBlock\r\n     * @param name defines the block name\r\n     */\r\n    public constructor(name: string) {\r\n        super(name, NodeMaterialBlockTargets.Fragment);\r\n\r\n        this._isUnique = false;\r\n\r\n        this.registerInput(\"uv\", NodeMaterialBlockConnectionPointTypes.AutoDetect, false, NodeMaterialBlockTargets.VertexAndFragment);\r\n\r\n        this.registerOutput(\"rgba\", NodeMaterialBlockConnectionPointTypes.Color4, NodeMaterialBlockTargets.Neutral);\r\n        this.registerOutput(\"rgb\", NodeMaterialBlockConnectionPointTypes.Color3, NodeMaterialBlockTargets.Neutral);\r\n        this.registerOutput(\"r\", NodeMaterialBlockConnectionPointTypes.Float, NodeMaterialBlockTargets.Neutral);\r\n        this.registerOutput(\"g\", NodeMaterialBlockConnectionPointTypes.Float, NodeMaterialBlockTargets.Neutral);\r\n        this.registerOutput(\"b\", NodeMaterialBlockConnectionPointTypes.Float, NodeMaterialBlockTargets.Neutral);\r\n        this.registerOutput(\"a\", NodeMaterialBlockConnectionPointTypes.Float, NodeMaterialBlockTargets.Neutral);\r\n\r\n        this._inputs[0].addExcludedConnectionPointFromAllowedTypes(\r\n            NodeMaterialBlockConnectionPointTypes.Vector2 | NodeMaterialBlockConnectionPointTypes.Vector3 | NodeMaterialBlockConnectionPointTypes.Vector4\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Gets the current class name\r\n     * @returns the class name\r\n     */\r\n    public getClassName() {\r\n        return \"ParticleTextureBlock\";\r\n    }\r\n\r\n    /**\r\n     * Gets the uv input component\r\n     */\r\n    public get uv(): NodeMaterialConnectionPoint {\r\n        return this._inputs[0];\r\n    }\r\n\r\n    /**\r\n     * Gets the rgba output component\r\n     */\r\n    public get rgba(): NodeMaterialConnectionPoint {\r\n        return this._outputs[0];\r\n    }\r\n\r\n    /**\r\n     * Gets the rgb output component\r\n     */\r\n    public get rgb(): NodeMaterialConnectionPoint {\r\n        return this._outputs[1];\r\n    }\r\n\r\n    /**\r\n     * Gets the r output component\r\n     */\r\n    public get r(): NodeMaterialConnectionPoint {\r\n        return this._outputs[2];\r\n    }\r\n\r\n    /**\r\n     * Gets the g output component\r\n     */\r\n    public get g(): NodeMaterialConnectionPoint {\r\n        return this._outputs[3];\r\n    }\r\n\r\n    /**\r\n     * Gets the b output component\r\n     */\r\n    public get b(): NodeMaterialConnectionPoint {\r\n        return this._outputs[4];\r\n    }\r\n\r\n    /**\r\n     * Gets the a output component\r\n     */\r\n    public get a(): NodeMaterialConnectionPoint {\r\n        return this._outputs[5];\r\n    }\r\n\r\n    /**\r\n     * Initialize the block and prepare the context for build\r\n     * @param state defines the state that will be used for the build\r\n     */\r\n    public initialize(state: NodeMaterialBuildState) {\r\n        state._excludeVariableName(\"diffuseSampler\");\r\n    }\r\n\r\n    public autoConfigure(material: NodeMaterial, additionalFilteringInfo: (node: NodeMaterialBlock) => boolean = () => true) {\r\n        if (!this.uv.isConnected) {\r\n            let uvInput = material.getInputBlockByPredicate((b) => b.isAttribute && b.name === \"particle_uv\" && additionalFilteringInfo(b));\r\n\r\n            if (!uvInput) {\r\n                uvInput = new InputBlock(\"uv\");\r\n                uvInput.setAsAttribute(\"particle_uv\");\r\n            }\r\n            uvInput.output.connectTo(this.uv);\r\n        }\r\n    }\r\n\r\n    public prepareDefines(mesh: AbstractMesh, nodeMaterial: NodeMaterial, defines: NodeMaterialDefines) {\r\n        defines.setValue(this._linearDefineName, this.convertToGammaSpace, true);\r\n        defines.setValue(this._gammaDefineName, this.convertToLinearSpace, true);\r\n    }\r\n\r\n    public isReady() {\r\n        if (this.texture && !this.texture.isReadyOrNotBlocking()) {\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    private _writeOutput(state: NodeMaterialBuildState, output: NodeMaterialConnectionPoint, swizzle: string) {\r\n        state.compilationString += `${this._declareOutput(output, state)} = ${this._tempTextureRead}.${swizzle};\\n`;\r\n\r\n        state.compilationString += `#ifdef ${this._linearDefineName}\\n`;\r\n        state.compilationString += `${output.associatedVariableName} = toGammaSpace(${output.associatedVariableName});\\n`;\r\n        state.compilationString += `#endif\\n`;\r\n\r\n        state.compilationString += `#ifdef ${this._gammaDefineName}\\n`;\r\n        state.compilationString += `${output.associatedVariableName} = toLinearSpace(${output.associatedVariableName});\\n`;\r\n        state.compilationString += `#endif\\n`;\r\n    }\r\n\r\n    protected _buildBlock(state: NodeMaterialBuildState) {\r\n        super._buildBlock(state);\r\n\r\n        if (state.target === NodeMaterialBlockTargets.Vertex) {\r\n            return;\r\n        }\r\n\r\n        this._tempTextureRead = state._getFreeVariableName(\"tempTextureRead\");\r\n\r\n        state._emit2DSampler(this._samplerName);\r\n\r\n        state.sharedData.blockingBlocks.push(this);\r\n        state.sharedData.textureBlocks.push(this);\r\n        state.sharedData.blocksWithDefines.push(this);\r\n\r\n        this._linearDefineName = state._getFreeDefineName(\"ISLINEAR\");\r\n        this._gammaDefineName = state._getFreeDefineName(\"ISGAMMA\");\r\n\r\n        const comments = `//${this.name}`;\r\n        state._emitFunctionFromInclude(\"helperFunctions\", comments);\r\n\r\n        state.compilationString += `vec4 ${this._tempTextureRead} = texture2D(${this._samplerName}, ${this.uv.associatedVariableName});\\n`;\r\n\r\n        for (const output of this._outputs) {\r\n            if (output.hasEndpoints) {\r\n                this._writeOutput(state, output, output.name);\r\n            }\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    public serialize(): any {\r\n        const serializationObject = super.serialize();\r\n\r\n        serializationObject.convertToGammaSpace = this.convertToGammaSpace;\r\n        serializationObject.convertToLinearSpace = this.convertToLinearSpace;\r\n        if (this.texture && !this.texture.isRenderTarget) {\r\n            serializationObject.texture = this.texture.serialize();\r\n        }\r\n\r\n        return serializationObject;\r\n    }\r\n\r\n    public _deserialize(serializationObject: any, scene: Scene, rootUrl: string) {\r\n        super._deserialize(serializationObject, scene, rootUrl);\r\n\r\n        this.convertToGammaSpace = serializationObject.convertToGammaSpace;\r\n        this.convertToLinearSpace = !!serializationObject.convertToLinearSpace;\r\n\r\n        if (serializationObject.texture) {\r\n            rootUrl = serializationObject.texture.url.indexOf(\"data:\") === 0 ? \"\" : rootUrl;\r\n            this.texture = Texture.Parse(serializationObject.texture, scene, rootUrl) as Texture;\r\n        }\r\n    }\r\n}\r\n\r\nRegisterClass(\"BABYLON.ParticleTextureBlock\", ParticleTextureBlock);\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}