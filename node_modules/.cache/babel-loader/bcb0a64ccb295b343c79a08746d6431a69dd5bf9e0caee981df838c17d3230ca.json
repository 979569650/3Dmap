{"ast":null,"code":"/** @internal */\nexport class TextWrapper {\n  get text() {\n    return this._characters ? this._characters.join(\"\") : this._text;\n  }\n  set text(txt) {\n    this._text = txt;\n    this._characters = Array.from && Array.from(txt);\n  }\n  get length() {\n    return this._characters ? this._characters.length : this._text.length;\n  }\n  removePart(idxStart, idxEnd, insertTxt) {\n    this._text = this._text.slice(0, idxStart) + (insertTxt ? insertTxt : \"\") + this._text.slice(idxEnd);\n    if (this._characters) {\n      const newCharacters = insertTxt ? Array.from(insertTxt) : [];\n      this._characters.splice(idxStart, idxEnd - idxStart, ...newCharacters);\n    }\n  }\n  charAt(idx) {\n    return this._characters ? this._characters[idx] : this._text.charAt(idx);\n  }\n  substr(from, length) {\n    if (this._characters) {\n      if (isNaN(from)) {\n        from = 0;\n      } else if (from >= 0) {\n        from = Math.min(from, this._characters.length);\n      } else {\n        from = this._characters.length + Math.max(from, -this._characters.length);\n      }\n      if (length === undefined) {\n        length = this._characters.length - from;\n      } else if (isNaN(length)) {\n        length = 0;\n      } else if (length < 0) {\n        length = 0;\n      }\n      const temp = [];\n      while (--length >= 0) {\n        temp[length] = this._characters[from + length];\n      }\n      return temp.join(\"\");\n    }\n    return this._text.substr(from, length);\n  }\n  substring(from, to) {\n    if (this._characters) {\n      if (isNaN(from)) {\n        from = 0;\n      } else if (from > this._characters.length) {\n        from = this._characters.length;\n      } else if (from < 0) {\n        from = 0;\n      }\n      if (to === undefined) {\n        to = this._characters.length;\n      } else if (isNaN(to)) {\n        to = 0;\n      } else if (to > this._characters.length) {\n        to = this._characters.length;\n      } else if (to < 0) {\n        to = 0;\n      }\n      const temp = [];\n      let idx = 0;\n      while (from < to) {\n        temp[idx++] = this._characters[from++];\n      }\n      return temp.join(\"\");\n    }\n    return this._text.substring(from, to);\n  }\n  isWord(index) {\n    const rWord = /\\w/g;\n    return this._characters ? this._characters[index].search(rWord) !== -1 : this._text.search(rWord) !== -1;\n  }\n}","map":{"version":3,"names":["TextWrapper","text","_characters","join","_text","txt","Array","from","length","removePart","idxStart","idxEnd","insertTxt","slice","newCharacters","splice","charAt","idx","substr","isNaN","Math","min","max","undefined","temp","substring","to","isWord","index","rWord","search"],"sources":["../../../../../dev/gui/src/2D/controls/textWrapper.ts"],"sourcesContent":["/** @internal */\r\nexport class TextWrapper {\r\n    private _text: string;\r\n    private _characters: string[] | undefined;\r\n\r\n    public get text(): string {\r\n        return this._characters ? this._characters.join(\"\") : this._text;\r\n    }\r\n\r\n    public set text(txt: string) {\r\n        this._text = txt;\r\n        this._characters = Array.from && Array.from(txt);\r\n    }\r\n\r\n    public get length(): number {\r\n        return this._characters ? this._characters.length : this._text.length;\r\n    }\r\n\r\n    public removePart(idxStart: number, idxEnd: number, insertTxt?: string): void {\r\n        this._text = this._text.slice(0, idxStart) + (insertTxt ? insertTxt : \"\") + this._text.slice(idxEnd);\r\n        if (this._characters) {\r\n            const newCharacters = insertTxt ? Array.from(insertTxt) : [];\r\n            this._characters.splice(idxStart, idxEnd - idxStart, ...newCharacters);\r\n        }\r\n    }\r\n\r\n    public charAt(idx: number): string {\r\n        return this._characters ? this._characters[idx] : this._text.charAt(idx);\r\n    }\r\n\r\n    public substr(from: number, length?: number): string {\r\n        if (this._characters) {\r\n            if (isNaN(from)) {\r\n                from = 0;\r\n            } else if (from >= 0) {\r\n                from = Math.min(from, this._characters.length);\r\n            } else {\r\n                from = this._characters.length + Math.max(from, -this._characters.length);\r\n            }\r\n            if (length === undefined) {\r\n                length = this._characters.length - from;\r\n            } else if (isNaN(length)) {\r\n                length = 0;\r\n            } else if (length < 0) {\r\n                length = 0;\r\n            }\r\n            const temp = [];\r\n            while (--length >= 0) {\r\n                temp[length] = this._characters[from + length];\r\n            }\r\n            return temp.join(\"\");\r\n        }\r\n\r\n        return this._text.substr(from, length);\r\n    }\r\n\r\n    public substring(from: number, to?: number): string {\r\n        if (this._characters) {\r\n            if (isNaN(from)) {\r\n                from = 0;\r\n            } else if (from > this._characters.length) {\r\n                from = this._characters.length;\r\n            } else if (from < 0) {\r\n                from = 0;\r\n            }\r\n            if (to === undefined) {\r\n                to = this._characters.length;\r\n            } else if (isNaN(to)) {\r\n                to = 0;\r\n            } else if (to > this._characters.length) {\r\n                to = this._characters.length;\r\n            } else if (to < 0) {\r\n                to = 0;\r\n            }\r\n            const temp = [];\r\n            let idx = 0;\r\n            while (from < to) {\r\n                temp[idx++] = this._characters[from++];\r\n            }\r\n            return temp.join(\"\");\r\n        }\r\n\r\n        return this._text.substring(from, to);\r\n    }\r\n\r\n    public isWord(index: number): boolean {\r\n        const rWord = /\\w/g;\r\n        return this._characters ? this._characters[index].search(rWord) !== -1 : this._text.search(rWord) !== -1;\r\n    }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}