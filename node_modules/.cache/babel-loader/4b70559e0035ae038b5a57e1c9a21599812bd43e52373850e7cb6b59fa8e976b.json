{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { __decorate } from \"../../../../tslib.es6.js\";\nimport { NodeMaterialBlock } from \"../../nodeMaterialBlock.js\";\nimport { NodeMaterialBlockConnectionPointTypes } from \"../../Enums/nodeMaterialBlockConnectionPointTypes.js\";\nimport { NodeMaterialBlockTargets } from \"../../Enums/nodeMaterialBlockTargets.js\";\nimport { NodeMaterialConnectionPointDirection } from \"../../nodeMaterialBlockConnectionPoint.js\";\nimport { RegisterClass } from \"../../../../Misc/typeStore.js\";\nimport { InputBlock } from \"../Input/inputBlock.js\";\nimport { editableInPropertyPage, PropertyTypeForEdition } from \"../../../../Decorators/nodeDecorator.js\";\nimport { NodeMaterialConnectionPointCustomObject } from \"../../nodeMaterialConnectionPointCustomObject.js\";\nimport { TBNBlock } from \"./TBNBlock.js\";\nimport \"../../../../Shaders/ShadersInclude/bumpFragmentMainFunctions.js\";\nimport \"../../../../Shaders/ShadersInclude/bumpFragmentFunctions.js\";\nimport \"../../../../Shaders/ShadersInclude/bumpFragment.js\";\n/**\n * Block used to perturb normals based on a normal map\n */\nexport class PerturbNormalBlock extends NodeMaterialBlock {\n  /**\n   * Create a new PerturbNormalBlock\n   * @param name defines the block name\n   */\n  constructor(name) {\n    super(name, NodeMaterialBlockTargets.Fragment);\n    this._tangentSpaceParameterName = \"\";\n    this._tangentCorrectionFactorName = \"\";\n    this._worldMatrixName = \"\";\n    /** Gets or sets a boolean indicating that normal should be inverted on X axis */\n    this.invertX = false;\n    /** Gets or sets a boolean indicating that normal should be inverted on Y axis */\n    this.invertY = false;\n    /** Gets or sets a boolean indicating that parallax occlusion should be enabled */\n    this.useParallaxOcclusion = false;\n    /** Gets or sets a boolean indicating that sampling mode is in Object space */\n    this.useObjectSpaceNormalMap = false;\n    this._isUnique = true;\n    // Vertex\n    this.registerInput(\"worldPosition\", NodeMaterialBlockConnectionPointTypes.Vector4, false);\n    this.registerInput(\"worldNormal\", NodeMaterialBlockConnectionPointTypes.Vector4, false);\n    this.registerInput(\"worldTangent\", NodeMaterialBlockConnectionPointTypes.Vector4, true);\n    this.registerInput(\"uv\", NodeMaterialBlockConnectionPointTypes.Vector2, false);\n    this.registerInput(\"normalMapColor\", NodeMaterialBlockConnectionPointTypes.Color3, false);\n    this.registerInput(\"strength\", NodeMaterialBlockConnectionPointTypes.Float, false);\n    this.registerInput(\"viewDirection\", NodeMaterialBlockConnectionPointTypes.Vector3, true);\n    this.registerInput(\"parallaxScale\", NodeMaterialBlockConnectionPointTypes.Float, true);\n    this.registerInput(\"parallaxHeight\", NodeMaterialBlockConnectionPointTypes.Float, true);\n    this.registerInput(\"TBN\", NodeMaterialBlockConnectionPointTypes.Object, true, NodeMaterialBlockTargets.VertexAndFragment, new NodeMaterialConnectionPointCustomObject(\"TBN\", this, NodeMaterialConnectionPointDirection.Input, TBNBlock, \"TBNBlock\"));\n    this.registerInput(\"world\", NodeMaterialBlockConnectionPointTypes.Matrix, true);\n    // Fragment\n    this.registerOutput(\"output\", NodeMaterialBlockConnectionPointTypes.Vector4);\n    this.registerOutput(\"uvOffset\", NodeMaterialBlockConnectionPointTypes.Vector2);\n  }\n  /**\n   * Gets the current class name\n   * @returns the class name\n   */\n  getClassName() {\n    return \"PerturbNormalBlock\";\n  }\n  /**\n   * Gets the world position input component\n   */\n  get worldPosition() {\n    return this._inputs[0];\n  }\n  /**\n   * Gets the world normal input component\n   */\n  get worldNormal() {\n    return this._inputs[1];\n  }\n  /**\n   * Gets the world tangent input component\n   */\n  get worldTangent() {\n    return this._inputs[2];\n  }\n  /**\n   * Gets the uv input component\n   */\n  get uv() {\n    return this._inputs[3];\n  }\n  /**\n   * Gets the normal map color input component\n   */\n  get normalMapColor() {\n    return this._inputs[4];\n  }\n  /**\n   * Gets the strength input component\n   */\n  get strength() {\n    return this._inputs[5];\n  }\n  /**\n   * Gets the view direction input component\n   */\n  get viewDirection() {\n    return this._inputs[6];\n  }\n  /**\n   * Gets the parallax scale input component\n   */\n  get parallaxScale() {\n    return this._inputs[7];\n  }\n  /**\n   * Gets the parallax height input component\n   */\n  get parallaxHeight() {\n    return this._inputs[8];\n  }\n  /**\n   * Gets the TBN input component\n   */\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  get TBN() {\n    return this._inputs[9];\n  }\n  /**\n   * Gets the World input component\n   */\n  get world() {\n    return this._inputs[10];\n  }\n  /**\n   * Gets the output component\n   */\n  get output() {\n    return this._outputs[0];\n  }\n  /**\n   * Gets the uv offset output component\n   */\n  get uvOffset() {\n    return this._outputs[1];\n  }\n  prepareDefines(mesh, nodeMaterial, defines) {\n    const normalSamplerName = this.normalMapColor.connectedPoint._ownerBlock.samplerName;\n    const useParallax = this.viewDirection.isConnected && (this.useParallaxOcclusion && normalSamplerName || !this.useParallaxOcclusion && this.parallaxHeight.isConnected);\n    defines.setValue(\"BUMP\", true);\n    defines.setValue(\"PARALLAX\", useParallax, true);\n    defines.setValue(\"PARALLAX_RHS\", nodeMaterial.getScene().useRightHandedSystem, true);\n    defines.setValue(\"PARALLAXOCCLUSION\", this.useParallaxOcclusion, true);\n    defines.setValue(\"OBJECTSPACE_NORMALMAP\", this.useObjectSpaceNormalMap, true);\n  }\n  bind(effect, nodeMaterial, mesh) {\n    if (nodeMaterial.getScene()._mirroredCameraPosition) {\n      effect.setFloat2(this._tangentSpaceParameterName, this.invertX ? 1.0 : -1.0, this.invertY ? 1.0 : -1.0);\n    } else {\n      effect.setFloat2(this._tangentSpaceParameterName, this.invertX ? -1.0 : 1.0, this.invertY ? -1.0 : 1.0);\n    }\n    if (mesh) {\n      effect.setFloat(this._tangentCorrectionFactorName, mesh.getWorldMatrix().determinant() < 0 ? -1 : 1);\n      if (this.useObjectSpaceNormalMap && !this.world.isConnected) {\n        // World default to the mesh world matrix\n        effect.setMatrix(this._worldMatrixName, mesh.getWorldMatrix());\n      }\n    }\n  }\n  autoConfigure(material, additionalFilteringInfo = () => true) {\n    if (!this.uv.isConnected) {\n      let uvInput = material.getInputBlockByPredicate(b => b.isAttribute && b.name === \"uv\" && additionalFilteringInfo(b));\n      if (!uvInput) {\n        uvInput = new InputBlock(\"uv\");\n        uvInput.setAsAttribute();\n      }\n      uvInput.output.connectTo(this.uv);\n    }\n    if (!this.strength.isConnected) {\n      const strengthInput = new InputBlock(\"strength\");\n      strengthInput.value = 1.0;\n      strengthInput.output.connectTo(this.strength);\n    }\n  }\n  _buildBlock(state) {\n    super._buildBlock(state);\n    const comments = `//${this.name}`;\n    const uv = this.uv;\n    const worldPosition = this.worldPosition;\n    const worldNormal = this.worldNormal;\n    const worldTangent = this.worldTangent;\n    state.sharedData.blocksWithDefines.push(this);\n    state.sharedData.bindableBlocks.push(this);\n    this._tangentSpaceParameterName = state._getFreeDefineName(\"tangentSpaceParameter\");\n    state._emitUniformFromString(this._tangentSpaceParameterName, \"vec2\");\n    this._tangentCorrectionFactorName = state._getFreeDefineName(\"tangentCorrectionFactor\");\n    state._emitUniformFromString(this._tangentCorrectionFactorName, \"float\");\n    this._worldMatrixName = state._getFreeDefineName(\"perturbNormalWorldMatrix\");\n    state._emitUniformFromString(this._worldMatrixName, \"mat4\");\n    let normalSamplerName = null;\n    if (this.normalMapColor.connectedPoint) {\n      normalSamplerName = this.normalMapColor.connectedPoint._ownerBlock.samplerName;\n    }\n    const useParallax = this.viewDirection.isConnected && (this.useParallaxOcclusion && normalSamplerName || !this.useParallaxOcclusion && this.parallaxHeight.isConnected);\n    const replaceForParallaxInfos = !this.parallaxScale.isConnectedToInputBlock ? \"0.05\" : this.parallaxScale.connectInputBlock.isConstant ? state._emitFloat(this.parallaxScale.connectInputBlock.value) : this.parallaxScale.associatedVariableName;\n    const replaceForBumpInfos = this.strength.isConnectedToInputBlock && this.strength.connectInputBlock.isConstant ? `\\n#if !defined(NORMALXYSCALE)\\n1.0/\\n#endif\\n${state._emitFloat(this.strength.connectInputBlock.value)}` : `\\n#if !defined(NORMALXYSCALE)\\n1.0/\\n#endif\\n${this.strength.associatedVariableName}`;\n    state._emitExtension(\"derivatives\", \"#extension GL_OES_standard_derivatives : enable\");\n    const tangentReplaceString = {\n      search: /defined\\(TANGENT\\)/g,\n      replace: worldTangent.isConnected ? \"defined(TANGENT)\" : \"defined(IGNORE)\"\n    };\n    const tbnVarying = {\n      search: /varying mat3 vTBN;/g,\n      replace: \"\"\n    };\n    const normalMatrixReplaceString = {\n      search: /uniform mat4 normalMatrix;/g,\n      replace: \"\"\n    };\n    const TBN = this.TBN;\n    if (TBN.isConnected) {\n      state.compilationString += `\n            #ifdef TBNBLOCK\n            mat3 vTBN = ${TBN.associatedVariableName};\n            #endif\n            `;\n    } else if (worldTangent.isConnected) {\n      state.compilationString += `vec3 tbnNormal = normalize(${worldNormal.associatedVariableName}.xyz);\\n`;\n      state.compilationString += `vec3 tbnTangent = normalize(${worldTangent.associatedVariableName}.xyz);\\n`;\n      state.compilationString += `vec3 tbnBitangent = cross(tbnNormal, tbnTangent) * ${this._tangentCorrectionFactorName};\\n`;\n      state.compilationString += `mat3 vTBN = mat3(tbnTangent, tbnBitangent, tbnNormal);\\n`;\n    }\n    state._emitFunctionFromInclude(\"bumpFragmentMainFunctions\", comments, {\n      replaceStrings: [tangentReplaceString, tbnVarying, normalMatrixReplaceString]\n    });\n    state._emitFunctionFromInclude(\"bumpFragmentFunctions\", comments, {\n      replaceStrings: [{\n        search: /#include<samplerFragmentDeclaration>\\(_DEFINENAME_,BUMP,_VARYINGNAME_,Bump,_SAMPLERNAME_,bump\\)/g,\n        replace: \"\"\n      }, {\n        search: /uniform sampler2D bumpSampler;/g,\n        replace: \"\"\n      }, {\n        search: /vec2 parallaxOcclusion\\(vec3 vViewDirCoT,vec3 vNormalCoT,vec2 texCoord,float parallaxScale\\)/g,\n        replace: \"#define inline\\nvec2 parallaxOcclusion(vec3 vViewDirCoT, vec3 vNormalCoT, vec2 texCoord, float parallaxScale, sampler2D bumpSampler)\"\n      }, {\n        search: /vec2 parallaxOffset\\(vec3 viewDir,float heightScale\\)/g,\n        replace: \"vec2 parallaxOffset(vec3 viewDir, float heightScale, float height_)\"\n      }, {\n        search: /texture2D\\(bumpSampler,vBumpUV\\)\\.w/g,\n        replace: \"height_\"\n      }]\n    });\n    const uvForPerturbNormal = !useParallax || !normalSamplerName ? this.normalMapColor.associatedVariableName : `texture2D(${normalSamplerName}, ${uv.associatedVariableName} + uvOffset).xyz`;\n    state.compilationString += this._declareOutput(this.output, state) + \" = vec4(0.);\\n\";\n    state.compilationString += state._emitCodeFromInclude(\"bumpFragment\", comments, {\n      replaceStrings: [{\n        search: /texture2D\\(bumpSampler,vBumpUV\\)/g,\n        replace: `${uvForPerturbNormal}`\n      }, {\n        search: /#define CUSTOM_FRAGMENT_BUMP_FRAGMENT/g,\n        replace: `mat4 normalMatrix = toNormalMatrix(${this.world.isConnected ? this.world.associatedVariableName : this._worldMatrixName});`\n      }, {\n        search: /perturbNormal\\(TBN,texture2D\\(bumpSampler,vBumpUV\\+uvOffset\\).xyz,vBumpInfos.y\\)/g,\n        replace: `perturbNormal(TBN, ${uvForPerturbNormal}, vBumpInfos.y)`\n      }, {\n        search: /parallaxOcclusion\\(invTBN\\*-viewDirectionW,invTBN\\*normalW,vBumpUV,vBumpInfos.z\\)/g,\n        replace: `parallaxOcclusion((invTBN * -viewDirectionW), (invTBN * normalW), vBumpUV, vBumpInfos.z, ${useParallax && this.useParallaxOcclusion ? normalSamplerName : \"bumpSampler\"})`\n      }, {\n        search: /parallaxOffset\\(invTBN\\*viewDirectionW,vBumpInfos\\.z\\)/g,\n        replace: `parallaxOffset(invTBN * viewDirectionW, vBumpInfos.z, ${useParallax ? this.parallaxHeight.associatedVariableName : \"0.\"})`\n      }, {\n        search: /vTangentSpaceParams/g,\n        replace: this._tangentSpaceParameterName\n      }, {\n        search: /vBumpInfos.y/g,\n        replace: replaceForBumpInfos\n      }, {\n        search: /vBumpInfos.z/g,\n        replace: replaceForParallaxInfos\n      }, {\n        search: /vBumpUV/g,\n        replace: uv.associatedVariableName\n      }, {\n        search: /vPositionW/g,\n        replace: worldPosition.associatedVariableName + \".xyz\"\n      }, {\n        search: /normalW=/g,\n        replace: this.output.associatedVariableName + \".xyz = \"\n      }, {\n        search: /mat3\\(normalMatrix\\)\\*normalW/g,\n        replace: \"mat3(normalMatrix) * \" + this.output.associatedVariableName + \".xyz\"\n      }, {\n        search: /normalW/g,\n        replace: worldNormal.associatedVariableName + \".xyz\"\n      }, {\n        search: /viewDirectionW/g,\n        replace: useParallax ? this.viewDirection.associatedVariableName : \"vec3(0.)\"\n      }, tangentReplaceString]\n    });\n    return this;\n  }\n  _dumpPropertiesCode() {\n    let codeString = super._dumpPropertiesCode() + `${this._codeVariableName}.invertX = ${this.invertX};\\n`;\n    codeString += `${this._codeVariableName}.invertY = ${this.invertY};\\n`;\n    codeString += `${this._codeVariableName}.useParallaxOcclusion = ${this.useParallaxOcclusion};\\n`;\n    codeString += `${this._codeVariableName}.useObjectSpaceNormalMap = ${this.useObjectSpaceNormalMap};\\n`;\n    return codeString;\n  }\n  serialize() {\n    const serializationObject = super.serialize();\n    serializationObject.invertX = this.invertX;\n    serializationObject.invertY = this.invertY;\n    serializationObject.useParallaxOcclusion = this.useParallaxOcclusion;\n    serializationObject.useObjectSpaceNormalMap = this.useObjectSpaceNormalMap;\n    return serializationObject;\n  }\n  _deserialize(serializationObject, scene, rootUrl) {\n    super._deserialize(serializationObject, scene, rootUrl);\n    this.invertX = serializationObject.invertX;\n    this.invertY = serializationObject.invertY;\n    this.useParallaxOcclusion = !!serializationObject.useParallaxOcclusion;\n    this.useObjectSpaceNormalMap = !!serializationObject.useObjectSpaceNormalMap;\n  }\n}\n__decorate([editableInPropertyPage(\"Invert X axis\", PropertyTypeForEdition.Boolean, \"PROPERTIES\", {\n  notifiers: {\n    update: false\n  }\n})], PerturbNormalBlock.prototype, \"invertX\", void 0);\n__decorate([editableInPropertyPage(\"Invert Y axis\", PropertyTypeForEdition.Boolean, \"PROPERTIES\", {\n  notifiers: {\n    update: false\n  }\n})], PerturbNormalBlock.prototype, \"invertY\", void 0);\n__decorate([editableInPropertyPage(\"Use parallax occlusion\", PropertyTypeForEdition.Boolean)], PerturbNormalBlock.prototype, \"useParallaxOcclusion\", void 0);\n__decorate([editableInPropertyPage(\"Object Space Mode\", PropertyTypeForEdition.Boolean, \"PROPERTIES\", {\n  notifiers: {\n    update: false\n  }\n})], PerturbNormalBlock.prototype, \"useObjectSpaceNormalMap\", void 0);\nRegisterClass(\"BABYLON.PerturbNormalBlock\", PerturbNormalBlock);","map":{"version":3,"names":["NodeMaterialBlock","NodeMaterialBlockConnectionPointTypes","NodeMaterialBlockTargets","NodeMaterialConnectionPointDirection","RegisterClass","InputBlock","editableInPropertyPage","PropertyTypeForEdition","NodeMaterialConnectionPointCustomObject","TBNBlock","PerturbNormalBlock","constructor","name","Fragment","_tangentSpaceParameterName","_tangentCorrectionFactorName","_worldMatrixName","invertX","invertY","useParallaxOcclusion","useObjectSpaceNormalMap","_isUnique","registerInput","Vector4","Vector2","Color3","Float","Vector3","Object","VertexAndFragment","Input","Matrix","registerOutput","getClassName","worldPosition","_inputs","worldNormal","worldTangent","uv","normalMapColor","strength","viewDirection","parallaxScale","parallaxHeight","TBN","world","output","_outputs","uvOffset","prepareDefines","mesh","nodeMaterial","defines","normalSamplerName","connectedPoint","_ownerBlock","samplerName","useParallax","isConnected","setValue","getScene","useRightHandedSystem","bind","effect","_mirroredCameraPosition","setFloat2","setFloat","getWorldMatrix","determinant","setMatrix","autoConfigure","material","additionalFilteringInfo","uvInput","getInputBlockByPredicate","b","isAttribute","setAsAttribute","connectTo","strengthInput","value","_buildBlock","state","comments","sharedData","blocksWithDefines","push","bindableBlocks","_getFreeDefineName","_emitUniformFromString","replaceForParallaxInfos","isConnectedToInputBlock","connectInputBlock","isConstant","_emitFloat","associatedVariableName","replaceForBumpInfos","_emitExtension","tangentReplaceString","search","replace","tbnVarying","normalMatrixReplaceString","compilationString","_emitFunctionFromInclude","replaceStrings","uvForPerturbNormal","_declareOutput","_emitCodeFromInclude","_dumpPropertiesCode","codeString","_codeVariableName","serialize","serializationObject","_deserialize","scene","rootUrl","__decorate","Boolean","notifiers","update"],"sources":["../../../../../../../dev/core/src/Materials/Node/Blocks/Fragment/perturbNormalBlock.ts"],"sourcesContent":["import { NodeMaterialBlock } from \"../../nodeMaterialBlock\";\r\nimport { NodeMaterialBlockConnectionPointTypes } from \"../../Enums/nodeMaterialBlockConnectionPointTypes\";\r\nimport type { NodeMaterialBuildState } from \"../../nodeMaterialBuildState\";\r\nimport { NodeMaterialBlockTargets } from \"../../Enums/nodeMaterialBlockTargets\";\r\nimport type { NodeMaterialConnectionPoint } from \"../../nodeMaterialBlockConnectionPoint\";\r\nimport { NodeMaterialConnectionPointDirection } from \"../../nodeMaterialBlockConnectionPoint\";\r\nimport { RegisterClass } from \"../../../../Misc/typeStore\";\r\nimport type { NodeMaterial, NodeMaterialDefines } from \"../../nodeMaterial\";\r\nimport type { AbstractMesh } from \"../../../../Meshes/abstractMesh\";\r\nimport type { Mesh } from \"../../../../Meshes/mesh\";\r\nimport { InputBlock } from \"../Input/inputBlock\";\r\nimport type { Effect } from \"../../../effect\";\r\nimport type { Scene } from \"../../../../scene\";\r\nimport { editableInPropertyPage, PropertyTypeForEdition } from \"../../../../Decorators/nodeDecorator\";\r\nimport type { TextureBlock } from \"../Dual/textureBlock\";\r\nimport { NodeMaterialConnectionPointCustomObject } from \"../../nodeMaterialConnectionPointCustomObject\";\r\nimport { TBNBlock } from \"./TBNBlock\";\r\n\r\nimport \"../../../../Shaders/ShadersInclude/bumpFragmentMainFunctions\";\r\nimport \"../../../../Shaders/ShadersInclude/bumpFragmentFunctions\";\r\nimport \"../../../../Shaders/ShadersInclude/bumpFragment\";\r\n\r\n/**\r\n * Block used to perturb normals based on a normal map\r\n */\r\nexport class PerturbNormalBlock extends NodeMaterialBlock {\r\n    private _tangentSpaceParameterName = \"\";\r\n    private _tangentCorrectionFactorName = \"\";\r\n    private _worldMatrixName = \"\";\r\n\r\n    /** Gets or sets a boolean indicating that normal should be inverted on X axis */\r\n    @editableInPropertyPage(\"Invert X axis\", PropertyTypeForEdition.Boolean, \"PROPERTIES\", { notifiers: { update: false } })\r\n    public invertX = false;\r\n    /** Gets or sets a boolean indicating that normal should be inverted on Y axis */\r\n    @editableInPropertyPage(\"Invert Y axis\", PropertyTypeForEdition.Boolean, \"PROPERTIES\", { notifiers: { update: false } })\r\n    public invertY = false;\r\n    /** Gets or sets a boolean indicating that parallax occlusion should be enabled */\r\n    @editableInPropertyPage(\"Use parallax occlusion\", PropertyTypeForEdition.Boolean)\r\n    public useParallaxOcclusion = false;\r\n    /** Gets or sets a boolean indicating that sampling mode is in Object space */\r\n    @editableInPropertyPage(\"Object Space Mode\", PropertyTypeForEdition.Boolean, \"PROPERTIES\", { notifiers: { update: false } })\r\n    public useObjectSpaceNormalMap = false;\r\n\r\n    /**\r\n     * Create a new PerturbNormalBlock\r\n     * @param name defines the block name\r\n     */\r\n    public constructor(name: string) {\r\n        super(name, NodeMaterialBlockTargets.Fragment);\r\n\r\n        this._isUnique = true;\r\n\r\n        // Vertex\r\n        this.registerInput(\"worldPosition\", NodeMaterialBlockConnectionPointTypes.Vector4, false);\r\n        this.registerInput(\"worldNormal\", NodeMaterialBlockConnectionPointTypes.Vector4, false);\r\n        this.registerInput(\"worldTangent\", NodeMaterialBlockConnectionPointTypes.Vector4, true);\r\n        this.registerInput(\"uv\", NodeMaterialBlockConnectionPointTypes.Vector2, false);\r\n        this.registerInput(\"normalMapColor\", NodeMaterialBlockConnectionPointTypes.Color3, false);\r\n        this.registerInput(\"strength\", NodeMaterialBlockConnectionPointTypes.Float, false);\r\n        this.registerInput(\"viewDirection\", NodeMaterialBlockConnectionPointTypes.Vector3, true);\r\n        this.registerInput(\"parallaxScale\", NodeMaterialBlockConnectionPointTypes.Float, true);\r\n        this.registerInput(\"parallaxHeight\", NodeMaterialBlockConnectionPointTypes.Float, true);\r\n        this.registerInput(\r\n            \"TBN\",\r\n            NodeMaterialBlockConnectionPointTypes.Object,\r\n            true,\r\n            NodeMaterialBlockTargets.VertexAndFragment,\r\n            new NodeMaterialConnectionPointCustomObject(\"TBN\", this, NodeMaterialConnectionPointDirection.Input, TBNBlock, \"TBNBlock\")\r\n        );\r\n        this.registerInput(\"world\", NodeMaterialBlockConnectionPointTypes.Matrix, true);\r\n\r\n        // Fragment\r\n        this.registerOutput(\"output\", NodeMaterialBlockConnectionPointTypes.Vector4);\r\n        this.registerOutput(\"uvOffset\", NodeMaterialBlockConnectionPointTypes.Vector2);\r\n    }\r\n\r\n    /**\r\n     * Gets the current class name\r\n     * @returns the class name\r\n     */\r\n    public getClassName() {\r\n        return \"PerturbNormalBlock\";\r\n    }\r\n\r\n    /**\r\n     * Gets the world position input component\r\n     */\r\n    public get worldPosition(): NodeMaterialConnectionPoint {\r\n        return this._inputs[0];\r\n    }\r\n\r\n    /**\r\n     * Gets the world normal input component\r\n     */\r\n    public get worldNormal(): NodeMaterialConnectionPoint {\r\n        return this._inputs[1];\r\n    }\r\n\r\n    /**\r\n     * Gets the world tangent input component\r\n     */\r\n    public get worldTangent(): NodeMaterialConnectionPoint {\r\n        return this._inputs[2];\r\n    }\r\n\r\n    /**\r\n     * Gets the uv input component\r\n     */\r\n    public get uv(): NodeMaterialConnectionPoint {\r\n        return this._inputs[3];\r\n    }\r\n\r\n    /**\r\n     * Gets the normal map color input component\r\n     */\r\n    public get normalMapColor(): NodeMaterialConnectionPoint {\r\n        return this._inputs[4];\r\n    }\r\n\r\n    /**\r\n     * Gets the strength input component\r\n     */\r\n    public get strength(): NodeMaterialConnectionPoint {\r\n        return this._inputs[5];\r\n    }\r\n\r\n    /**\r\n     * Gets the view direction input component\r\n     */\r\n    public get viewDirection(): NodeMaterialConnectionPoint {\r\n        return this._inputs[6];\r\n    }\r\n\r\n    /**\r\n     * Gets the parallax scale input component\r\n     */\r\n    public get parallaxScale(): NodeMaterialConnectionPoint {\r\n        return this._inputs[7];\r\n    }\r\n\r\n    /**\r\n     * Gets the parallax height input component\r\n     */\r\n    public get parallaxHeight(): NodeMaterialConnectionPoint {\r\n        return this._inputs[8];\r\n    }\r\n\r\n    /**\r\n     * Gets the TBN input component\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    public get TBN(): NodeMaterialConnectionPoint {\r\n        return this._inputs[9];\r\n    }\r\n\r\n    /**\r\n     * Gets the World input component\r\n     */\r\n    public get world(): NodeMaterialConnectionPoint {\r\n        return this._inputs[10];\r\n    }\r\n\r\n    /**\r\n     * Gets the output component\r\n     */\r\n    public get output(): NodeMaterialConnectionPoint {\r\n        return this._outputs[0];\r\n    }\r\n\r\n    /**\r\n     * Gets the uv offset output component\r\n     */\r\n    public get uvOffset(): NodeMaterialConnectionPoint {\r\n        return this._outputs[1];\r\n    }\r\n\r\n    public prepareDefines(mesh: AbstractMesh, nodeMaterial: NodeMaterial, defines: NodeMaterialDefines) {\r\n        const normalSamplerName = (this.normalMapColor.connectedPoint!._ownerBlock as TextureBlock).samplerName;\r\n        const useParallax = this.viewDirection.isConnected && ((this.useParallaxOcclusion && normalSamplerName) || (!this.useParallaxOcclusion && this.parallaxHeight.isConnected));\r\n\r\n        defines.setValue(\"BUMP\", true);\r\n        defines.setValue(\"PARALLAX\", useParallax, true);\r\n        defines.setValue(\"PARALLAX_RHS\", nodeMaterial.getScene().useRightHandedSystem, true);\r\n        defines.setValue(\"PARALLAXOCCLUSION\", this.useParallaxOcclusion, true);\r\n        defines.setValue(\"OBJECTSPACE_NORMALMAP\", this.useObjectSpaceNormalMap, true);\r\n    }\r\n\r\n    public bind(effect: Effect, nodeMaterial: NodeMaterial, mesh?: Mesh) {\r\n        if (nodeMaterial.getScene()._mirroredCameraPosition) {\r\n            effect.setFloat2(this._tangentSpaceParameterName, this.invertX ? 1.0 : -1.0, this.invertY ? 1.0 : -1.0);\r\n        } else {\r\n            effect.setFloat2(this._tangentSpaceParameterName, this.invertX ? -1.0 : 1.0, this.invertY ? -1.0 : 1.0);\r\n        }\r\n\r\n        if (mesh) {\r\n            effect.setFloat(this._tangentCorrectionFactorName, mesh.getWorldMatrix().determinant() < 0 ? -1 : 1);\r\n\r\n            if (this.useObjectSpaceNormalMap && !this.world.isConnected) {\r\n                // World default to the mesh world matrix\r\n                effect.setMatrix(this._worldMatrixName, mesh.getWorldMatrix());\r\n            }\r\n        }\r\n    }\r\n\r\n    public autoConfigure(material: NodeMaterial, additionalFilteringInfo: (node: NodeMaterialBlock) => boolean = () => true) {\r\n        if (!this.uv.isConnected) {\r\n            let uvInput = material.getInputBlockByPredicate((b) => b.isAttribute && b.name === \"uv\" && additionalFilteringInfo(b));\r\n\r\n            if (!uvInput) {\r\n                uvInput = new InputBlock(\"uv\");\r\n                uvInput.setAsAttribute();\r\n            }\r\n            uvInput.output.connectTo(this.uv);\r\n        }\r\n\r\n        if (!this.strength.isConnected) {\r\n            const strengthInput = new InputBlock(\"strength\");\r\n            strengthInput.value = 1.0;\r\n            strengthInput.output.connectTo(this.strength);\r\n        }\r\n    }\r\n\r\n    protected _buildBlock(state: NodeMaterialBuildState) {\r\n        super._buildBlock(state);\r\n\r\n        const comments = `//${this.name}`;\r\n        const uv = this.uv;\r\n        const worldPosition = this.worldPosition;\r\n        const worldNormal = this.worldNormal;\r\n        const worldTangent = this.worldTangent;\r\n\r\n        state.sharedData.blocksWithDefines.push(this);\r\n        state.sharedData.bindableBlocks.push(this);\r\n\r\n        this._tangentSpaceParameterName = state._getFreeDefineName(\"tangentSpaceParameter\");\r\n\r\n        state._emitUniformFromString(this._tangentSpaceParameterName, \"vec2\");\r\n\r\n        this._tangentCorrectionFactorName = state._getFreeDefineName(\"tangentCorrectionFactor\");\r\n\r\n        state._emitUniformFromString(this._tangentCorrectionFactorName, \"float\");\r\n\r\n        this._worldMatrixName = state._getFreeDefineName(\"perturbNormalWorldMatrix\");\r\n\r\n        state._emitUniformFromString(this._worldMatrixName, \"mat4\");\r\n\r\n        let normalSamplerName = null;\r\n        if (this.normalMapColor.connectedPoint) {\r\n            normalSamplerName = (this.normalMapColor.connectedPoint!._ownerBlock as TextureBlock).samplerName;\r\n        }\r\n        const useParallax = this.viewDirection.isConnected && ((this.useParallaxOcclusion && normalSamplerName) || (!this.useParallaxOcclusion && this.parallaxHeight.isConnected));\r\n\r\n        const replaceForParallaxInfos = !this.parallaxScale.isConnectedToInputBlock\r\n            ? \"0.05\"\r\n            : this.parallaxScale.connectInputBlock!.isConstant\r\n            ? state._emitFloat(this.parallaxScale.connectInputBlock!.value)\r\n            : this.parallaxScale.associatedVariableName;\r\n\r\n        const replaceForBumpInfos =\r\n            this.strength.isConnectedToInputBlock && this.strength.connectInputBlock!.isConstant\r\n                ? `\\n#if !defined(NORMALXYSCALE)\\n1.0/\\n#endif\\n${state._emitFloat(this.strength.connectInputBlock!.value)}`\r\n                : `\\n#if !defined(NORMALXYSCALE)\\n1.0/\\n#endif\\n${this.strength.associatedVariableName}`;\r\n\r\n        state._emitExtension(\"derivatives\", \"#extension GL_OES_standard_derivatives : enable\");\r\n\r\n        const tangentReplaceString = { search: /defined\\(TANGENT\\)/g, replace: worldTangent.isConnected ? \"defined(TANGENT)\" : \"defined(IGNORE)\" };\r\n        const tbnVarying = { search: /varying mat3 vTBN;/g, replace: \"\" };\r\n        const normalMatrixReplaceString = { search: /uniform mat4 normalMatrix;/g, replace: \"\" };\r\n\r\n        const TBN = this.TBN;\r\n        if (TBN.isConnected) {\r\n            state.compilationString += `\r\n            #ifdef TBNBLOCK\r\n            mat3 vTBN = ${TBN.associatedVariableName};\r\n            #endif\r\n            `;\r\n        } else if (worldTangent.isConnected) {\r\n            state.compilationString += `vec3 tbnNormal = normalize(${worldNormal.associatedVariableName}.xyz);\\n`;\r\n            state.compilationString += `vec3 tbnTangent = normalize(${worldTangent.associatedVariableName}.xyz);\\n`;\r\n            state.compilationString += `vec3 tbnBitangent = cross(tbnNormal, tbnTangent) * ${this._tangentCorrectionFactorName};\\n`;\r\n            state.compilationString += `mat3 vTBN = mat3(tbnTangent, tbnBitangent, tbnNormal);\\n`;\r\n        }\r\n\r\n        state._emitFunctionFromInclude(\"bumpFragmentMainFunctions\", comments, {\r\n            replaceStrings: [tangentReplaceString, tbnVarying, normalMatrixReplaceString],\r\n        });\r\n\r\n        state._emitFunctionFromInclude(\"bumpFragmentFunctions\", comments, {\r\n            replaceStrings: [\r\n                { search: /#include<samplerFragmentDeclaration>\\(_DEFINENAME_,BUMP,_VARYINGNAME_,Bump,_SAMPLERNAME_,bump\\)/g, replace: \"\" },\r\n                { search: /uniform sampler2D bumpSampler;/g, replace: \"\" },\r\n                {\r\n                    search: /vec2 parallaxOcclusion\\(vec3 vViewDirCoT,vec3 vNormalCoT,vec2 texCoord,float parallaxScale\\)/g,\r\n                    replace: \"#define inline\\nvec2 parallaxOcclusion(vec3 vViewDirCoT, vec3 vNormalCoT, vec2 texCoord, float parallaxScale, sampler2D bumpSampler)\",\r\n                },\r\n                { search: /vec2 parallaxOffset\\(vec3 viewDir,float heightScale\\)/g, replace: \"vec2 parallaxOffset(vec3 viewDir, float heightScale, float height_)\" },\r\n                { search: /texture2D\\(bumpSampler,vBumpUV\\)\\.w/g, replace: \"height_\" },\r\n            ],\r\n        });\r\n\r\n        const uvForPerturbNormal =\r\n            !useParallax || !normalSamplerName ? this.normalMapColor.associatedVariableName : `texture2D(${normalSamplerName}, ${uv.associatedVariableName} + uvOffset).xyz`;\r\n\r\n        state.compilationString += this._declareOutput(this.output, state) + \" = vec4(0.);\\n\";\r\n        state.compilationString += state._emitCodeFromInclude(\"bumpFragment\", comments, {\r\n            replaceStrings: [\r\n                { search: /texture2D\\(bumpSampler,vBumpUV\\)/g, replace: `${uvForPerturbNormal}` },\r\n                {\r\n                    search: /#define CUSTOM_FRAGMENT_BUMP_FRAGMENT/g,\r\n                    replace: `mat4 normalMatrix = toNormalMatrix(${this.world.isConnected ? this.world.associatedVariableName : this._worldMatrixName});`,\r\n                },\r\n                { search: /perturbNormal\\(TBN,texture2D\\(bumpSampler,vBumpUV\\+uvOffset\\).xyz,vBumpInfos.y\\)/g, replace: `perturbNormal(TBN, ${uvForPerturbNormal}, vBumpInfos.y)` },\r\n                {\r\n                    search: /parallaxOcclusion\\(invTBN\\*-viewDirectionW,invTBN\\*normalW,vBumpUV,vBumpInfos.z\\)/g,\r\n                    replace: `parallaxOcclusion((invTBN * -viewDirectionW), (invTBN * normalW), vBumpUV, vBumpInfos.z, ${\r\n                        useParallax && this.useParallaxOcclusion ? normalSamplerName : \"bumpSampler\"\r\n                    })`,\r\n                },\r\n                {\r\n                    search: /parallaxOffset\\(invTBN\\*viewDirectionW,vBumpInfos\\.z\\)/g,\r\n                    replace: `parallaxOffset(invTBN * viewDirectionW, vBumpInfos.z, ${useParallax ? this.parallaxHeight.associatedVariableName : \"0.\"})`,\r\n                },\r\n                { search: /vTangentSpaceParams/g, replace: this._tangentSpaceParameterName },\r\n                { search: /vBumpInfos.y/g, replace: replaceForBumpInfos },\r\n                { search: /vBumpInfos.z/g, replace: replaceForParallaxInfos },\r\n                { search: /vBumpUV/g, replace: uv.associatedVariableName },\r\n                { search: /vPositionW/g, replace: worldPosition.associatedVariableName + \".xyz\" },\r\n                { search: /normalW=/g, replace: this.output.associatedVariableName + \".xyz = \" },\r\n                { search: /mat3\\(normalMatrix\\)\\*normalW/g, replace: \"mat3(normalMatrix) * \" + this.output.associatedVariableName + \".xyz\" },\r\n                { search: /normalW/g, replace: worldNormal.associatedVariableName + \".xyz\" },\r\n                { search: /viewDirectionW/g, replace: useParallax ? this.viewDirection.associatedVariableName : \"vec3(0.)\" },\r\n                tangentReplaceString,\r\n            ],\r\n        });\r\n\r\n        return this;\r\n    }\r\n\r\n    protected _dumpPropertiesCode() {\r\n        let codeString = super._dumpPropertiesCode() + `${this._codeVariableName}.invertX = ${this.invertX};\\n`;\r\n\r\n        codeString += `${this._codeVariableName}.invertY = ${this.invertY};\\n`;\r\n        codeString += `${this._codeVariableName}.useParallaxOcclusion = ${this.useParallaxOcclusion};\\n`;\r\n        codeString += `${this._codeVariableName}.useObjectSpaceNormalMap = ${this.useObjectSpaceNormalMap};\\n`;\r\n\r\n        return codeString;\r\n    }\r\n\r\n    public serialize(): any {\r\n        const serializationObject = super.serialize();\r\n\r\n        serializationObject.invertX = this.invertX;\r\n        serializationObject.invertY = this.invertY;\r\n        serializationObject.useParallaxOcclusion = this.useParallaxOcclusion;\r\n        serializationObject.useObjectSpaceNormalMap = this.useObjectSpaceNormalMap;\r\n\r\n        return serializationObject;\r\n    }\r\n\r\n    public _deserialize(serializationObject: any, scene: Scene, rootUrl: string) {\r\n        super._deserialize(serializationObject, scene, rootUrl);\r\n\r\n        this.invertX = serializationObject.invertX;\r\n        this.invertY = serializationObject.invertY;\r\n        this.useParallaxOcclusion = !!serializationObject.useParallaxOcclusion;\r\n        this.useObjectSpaceNormalMap = !!serializationObject.useObjectSpaceNormalMap;\r\n    }\r\n}\r\n\r\nRegisterClass(\"BABYLON.PerturbNormalBlock\", PerturbNormalBlock);\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}