{"ast":null,"code":"import { FlowGraphEventBlock } from \"../../flowGraphEventBlock.js\";\nimport { RegisterClass } from \"../../../Misc/typeStore.js\";\n/**\n * @experimental\n * Block that triggers when a scene is ready.\n */\nexport class FlowGraphSceneReadyEventBlock extends FlowGraphEventBlock {\n  /**\n   * @internal\n   */\n  _preparePendingTasks(context) {\n    if (!context._getExecutionVariable(this, \"sceneReadyObserver\")) {\n      const scene = context.configuration.scene;\n      const contextObserver = scene.onReadyObservable.add(() => {\n        this._execute(context);\n      });\n      context._setExecutionVariable(this, \"sceneReadyObserver\", contextObserver);\n    }\n  }\n  /**\n   * @internal\n   */\n  _cancelPendingTasks(context) {\n    const contextObserver = context._getExecutionVariable(this, \"sceneReadyObserver\");\n    const scene = context.configuration.scene;\n    scene.onReadyObservable.remove(contextObserver);\n    context._deleteExecutionVariable(this, \"sceneReadyObserver\");\n  }\n  getClassName() {\n    return \"FGSceneReadyEventBlock\";\n  }\n}\nRegisterClass(\"FGSceneReadyEventBlock\", FlowGraphSceneReadyEventBlock);","map":{"version":3,"names":["FlowGraphEventBlock","RegisterClass","FlowGraphSceneReadyEventBlock","_preparePendingTasks","context","_getExecutionVariable","scene","configuration","contextObserver","onReadyObservable","add","_execute","_setExecutionVariable","_cancelPendingTasks","remove","_deleteExecutionVariable","getClassName"],"sources":["../../../../../../dev/core/src/FlowGraph/Blocks/Event/flowGraphSceneReadyEventBlock.ts"],"sourcesContent":["import { FlowGraphEventBlock } from \"../../flowGraphEventBlock\";\r\nimport type { FlowGraphContext } from \"core/FlowGraph/flowGraphContext\";\r\nimport { RegisterClass } from \"../../../Misc/typeStore\";\r\n/**\r\n * @experimental\r\n * Block that triggers when a scene is ready.\r\n */\r\nexport class FlowGraphSceneReadyEventBlock extends FlowGraphEventBlock {\r\n    /**\r\n     * @internal\r\n     */\r\n    public _preparePendingTasks(context: FlowGraphContext): void {\r\n        if (!context._getExecutionVariable(this, \"sceneReadyObserver\")) {\r\n            const scene = context.configuration.scene;\r\n            const contextObserver = scene.onReadyObservable.add(() => {\r\n                this._execute(context);\r\n            });\r\n            context._setExecutionVariable(this, \"sceneReadyObserver\", contextObserver);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _cancelPendingTasks(context: FlowGraphContext) {\r\n        const contextObserver = context._getExecutionVariable(this, \"sceneReadyObserver\");\r\n        const scene = context.configuration.scene;\r\n        scene.onReadyObservable.remove(contextObserver);\r\n        context._deleteExecutionVariable(this, \"sceneReadyObserver\");\r\n    }\r\n\r\n    public getClassName() {\r\n        return \"FGSceneReadyEventBlock\";\r\n    }\r\n}\r\nRegisterClass(\"FGSceneReadyEventBlock\", FlowGraphSceneReadyEventBlock);\r\n"],"mappings":"AAAA,SAASA,mBAAmB,QAAQ,8BAA4B;AAEhE,SAASC,aAAa,QAAQ,4BAA0B;AACxD;;;;AAIA,OAAM,MAAOC,6BAA8B,SAAQF,mBAAmB;EAClE;;;EAGOG,oBAAoBA,CAACC,OAAyB;IACjD,IAAI,CAACA,OAAO,CAACC,qBAAqB,CAAC,IAAI,EAAE,oBAAoB,CAAC,EAAE;MAC5D,MAAMC,KAAK,GAAGF,OAAO,CAACG,aAAa,CAACD,KAAK;MACzC,MAAME,eAAe,GAAGF,KAAK,CAACG,iBAAiB,CAACC,GAAG,CAAC,MAAK;QACrD,IAAI,CAACC,QAAQ,CAACP,OAAO,CAAC;MAC1B,CAAC,CAAC;MACFA,OAAO,CAACQ,qBAAqB,CAAC,IAAI,EAAE,oBAAoB,EAAEJ,eAAe,CAAC;;EAElF;EAEA;;;EAGOK,mBAAmBA,CAACT,OAAyB;IAChD,MAAMI,eAAe,GAAGJ,OAAO,CAACC,qBAAqB,CAAC,IAAI,EAAE,oBAAoB,CAAC;IACjF,MAAMC,KAAK,GAAGF,OAAO,CAACG,aAAa,CAACD,KAAK;IACzCA,KAAK,CAACG,iBAAiB,CAACK,MAAM,CAACN,eAAe,CAAC;IAC/CJ,OAAO,CAACW,wBAAwB,CAAC,IAAI,EAAE,oBAAoB,CAAC;EAChE;EAEOC,YAAYA,CAAA;IACf,OAAO,wBAAwB;EACnC;;AAEJf,aAAa,CAAC,wBAAwB,EAAEC,6BAA6B,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}