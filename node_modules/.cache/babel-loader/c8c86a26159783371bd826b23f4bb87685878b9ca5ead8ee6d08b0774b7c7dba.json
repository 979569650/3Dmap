{"ast":null,"code":"import { Observable } from \"../Misc/observable.js\";\nimport { Gamepad } from \"./gamepad.js\";\n/**\n * Defines supported buttons for DualShock compatible gamepads\n */\nexport var DualShockButton;\n(function (DualShockButton) {\n  /** Cross */\n  DualShockButton[DualShockButton[\"Cross\"] = 0] = \"Cross\";\n  /** Circle */\n  DualShockButton[DualShockButton[\"Circle\"] = 1] = \"Circle\";\n  /** Square */\n  DualShockButton[DualShockButton[\"Square\"] = 2] = \"Square\";\n  /** Triangle */\n  DualShockButton[DualShockButton[\"Triangle\"] = 3] = \"Triangle\";\n  /** L1 */\n  DualShockButton[DualShockButton[\"L1\"] = 4] = \"L1\";\n  /** R1 */\n  DualShockButton[DualShockButton[\"R1\"] = 5] = \"R1\";\n  /** Share */\n  DualShockButton[DualShockButton[\"Share\"] = 8] = \"Share\";\n  /** Options */\n  DualShockButton[DualShockButton[\"Options\"] = 9] = \"Options\";\n  /** Left stick */\n  DualShockButton[DualShockButton[\"LeftStick\"] = 10] = \"LeftStick\";\n  /** Right stick */\n  DualShockButton[DualShockButton[\"RightStick\"] = 11] = \"RightStick\";\n})(DualShockButton || (DualShockButton = {}));\n/** Defines values for DualShock DPad  */\nexport var DualShockDpad;\n(function (DualShockDpad) {\n  /** Up */\n  DualShockDpad[DualShockDpad[\"Up\"] = 12] = \"Up\";\n  /** Down */\n  DualShockDpad[DualShockDpad[\"Down\"] = 13] = \"Down\";\n  /** Left */\n  DualShockDpad[DualShockDpad[\"Left\"] = 14] = \"Left\";\n  /** Right */\n  DualShockDpad[DualShockDpad[\"Right\"] = 15] = \"Right\";\n})(DualShockDpad || (DualShockDpad = {}));\n/**\n * Defines a DualShock gamepad\n */\nexport class DualShockPad extends Gamepad {\n  /**\n   * Creates a new DualShock gamepad object\n   * @param id defines the id of this gamepad\n   * @param index defines its index\n   * @param gamepad defines the internal HTML gamepad object\n   */\n  constructor(id, index, gamepad) {\n    super(id.replace(\"STANDARD GAMEPAD\", \"SONY PLAYSTATION DUALSHOCK\"), index, gamepad, 0, 1, 2, 3);\n    this._leftTrigger = 0;\n    this._rightTrigger = 0;\n    /** Observable raised when a button is pressed */\n    this.onButtonDownObservable = new Observable();\n    /** Observable raised when a button is released */\n    this.onButtonUpObservable = new Observable();\n    /** Observable raised when a pad is pressed */\n    this.onPadDownObservable = new Observable();\n    /** Observable raised when a pad is released */\n    this.onPadUpObservable = new Observable();\n    this._buttonCross = 0;\n    this._buttonCircle = 0;\n    this._buttonSquare = 0;\n    this._buttonTriangle = 0;\n    this._buttonShare = 0;\n    this._buttonOptions = 0;\n    this._buttonL1 = 0;\n    this._buttonR1 = 0;\n    this._buttonLeftStick = 0;\n    this._buttonRightStick = 0;\n    this._dPadUp = 0;\n    this._dPadDown = 0;\n    this._dPadLeft = 0;\n    this._dPadRight = 0;\n    this.type = Gamepad.DUALSHOCK;\n  }\n  /**\n   * Defines the callback to call when left trigger is pressed\n   * @param callback defines the callback to use\n   */\n  onlefttriggerchanged(callback) {\n    this._onlefttriggerchanged = callback;\n  }\n  /**\n   * Defines the callback to call when right trigger is pressed\n   * @param callback defines the callback to use\n   */\n  onrighttriggerchanged(callback) {\n    this._onrighttriggerchanged = callback;\n  }\n  /**\n   * Gets the left trigger value\n   */\n  get leftTrigger() {\n    return this._leftTrigger;\n  }\n  /**\n   * Sets the left trigger value\n   */\n  set leftTrigger(newValue) {\n    if (this._onlefttriggerchanged && this._leftTrigger !== newValue) {\n      this._onlefttriggerchanged(newValue);\n    }\n    this._leftTrigger = newValue;\n  }\n  /**\n   * Gets the right trigger value\n   */\n  get rightTrigger() {\n    return this._rightTrigger;\n  }\n  /**\n   * Sets the right trigger value\n   */\n  set rightTrigger(newValue) {\n    if (this._onrighttriggerchanged && this._rightTrigger !== newValue) {\n      this._onrighttriggerchanged(newValue);\n    }\n    this._rightTrigger = newValue;\n  }\n  /**\n   * Defines the callback to call when a button is pressed\n   * @param callback defines the callback to use\n   */\n  onbuttondown(callback) {\n    this._onbuttondown = callback;\n  }\n  /**\n   * Defines the callback to call when a button is released\n   * @param callback defines the callback to use\n   */\n  onbuttonup(callback) {\n    this._onbuttonup = callback;\n  }\n  /**\n   * Defines the callback to call when a pad is pressed\n   * @param callback defines the callback to use\n   */\n  ondpaddown(callback) {\n    this._ondpaddown = callback;\n  }\n  /**\n   * Defines the callback to call when a pad is released\n   * @param callback defines the callback to use\n   */\n  ondpadup(callback) {\n    this._ondpadup = callback;\n  }\n  _setButtonValue(newValue, currentValue, buttonType) {\n    if (newValue !== currentValue) {\n      if (newValue === 1) {\n        if (this._onbuttondown) {\n          this._onbuttondown(buttonType);\n        }\n        this.onButtonDownObservable.notifyObservers(buttonType);\n      }\n      if (newValue === 0) {\n        if (this._onbuttonup) {\n          this._onbuttonup(buttonType);\n        }\n        this.onButtonUpObservable.notifyObservers(buttonType);\n      }\n    }\n    return newValue;\n  }\n  _setDPadValue(newValue, currentValue, buttonType) {\n    if (newValue !== currentValue) {\n      if (newValue === 1) {\n        if (this._ondpaddown) {\n          this._ondpaddown(buttonType);\n        }\n        this.onPadDownObservable.notifyObservers(buttonType);\n      }\n      if (newValue === 0) {\n        if (this._ondpadup) {\n          this._ondpadup(buttonType);\n        }\n        this.onPadUpObservable.notifyObservers(buttonType);\n      }\n    }\n    return newValue;\n  }\n  /**\n   * Gets the value of the `Cross` button\n   */\n  get buttonCross() {\n    return this._buttonCross;\n  }\n  /**\n   * Sets the value of the `Cross` button\n   */\n  set buttonCross(value) {\n    this._buttonCross = this._setButtonValue(value, this._buttonCross, DualShockButton.Cross);\n  }\n  /**\n   * Gets the value of the `Circle` button\n   */\n  get buttonCircle() {\n    return this._buttonCircle;\n  }\n  /**\n   * Sets the value of the `Circle` button\n   */\n  set buttonCircle(value) {\n    this._buttonCircle = this._setButtonValue(value, this._buttonCircle, DualShockButton.Circle);\n  }\n  /**\n   * Gets the value of the `Square` button\n   */\n  get buttonSquare() {\n    return this._buttonSquare;\n  }\n  /**\n   * Sets the value of the `Square` button\n   */\n  set buttonSquare(value) {\n    this._buttonSquare = this._setButtonValue(value, this._buttonSquare, DualShockButton.Square);\n  }\n  /**\n   * Gets the value of the `Triangle` button\n   */\n  get buttonTriangle() {\n    return this._buttonTriangle;\n  }\n  /**\n   * Sets the value of the `Triangle` button\n   */\n  set buttonTriangle(value) {\n    this._buttonTriangle = this._setButtonValue(value, this._buttonTriangle, DualShockButton.Triangle);\n  }\n  /**\n   * Gets the value of the `Options` button\n   */\n  get buttonOptions() {\n    return this._buttonOptions;\n  }\n  /**\n   * Sets the value of the `Options` button\n   */\n  set buttonOptions(value) {\n    this._buttonOptions = this._setButtonValue(value, this._buttonOptions, DualShockButton.Options);\n  }\n  /**\n   * Gets the value of the `Share` button\n   */\n  get buttonShare() {\n    return this._buttonShare;\n  }\n  /**\n   * Sets the value of the `Share` button\n   */\n  set buttonShare(value) {\n    this._buttonShare = this._setButtonValue(value, this._buttonShare, DualShockButton.Share);\n  }\n  /**\n   * Gets the value of the `L1` button\n   */\n  get buttonL1() {\n    return this._buttonL1;\n  }\n  /**\n   * Sets the value of the `L1` button\n   */\n  set buttonL1(value) {\n    this._buttonL1 = this._setButtonValue(value, this._buttonL1, DualShockButton.L1);\n  }\n  /**\n   * Gets the value of the `R1` button\n   */\n  get buttonR1() {\n    return this._buttonR1;\n  }\n  /**\n   * Sets the value of the `R1` button\n   */\n  set buttonR1(value) {\n    this._buttonR1 = this._setButtonValue(value, this._buttonR1, DualShockButton.R1);\n  }\n  /**\n   * Gets the value of the Left joystick\n   */\n  get buttonLeftStick() {\n    return this._buttonLeftStick;\n  }\n  /**\n   * Sets the value of the Left joystick\n   */\n  set buttonLeftStick(value) {\n    this._buttonLeftStick = this._setButtonValue(value, this._buttonLeftStick, DualShockButton.LeftStick);\n  }\n  /**\n   * Gets the value of the Right joystick\n   */\n  get buttonRightStick() {\n    return this._buttonRightStick;\n  }\n  /**\n   * Sets the value of the Right joystick\n   */\n  set buttonRightStick(value) {\n    this._buttonRightStick = this._setButtonValue(value, this._buttonRightStick, DualShockButton.RightStick);\n  }\n  /**\n   * Gets the value of D-pad up\n   */\n  get dPadUp() {\n    return this._dPadUp;\n  }\n  /**\n   * Sets the value of D-pad up\n   */\n  set dPadUp(value) {\n    this._dPadUp = this._setDPadValue(value, this._dPadUp, DualShockDpad.Up);\n  }\n  /**\n   * Gets the value of D-pad down\n   */\n  get dPadDown() {\n    return this._dPadDown;\n  }\n  /**\n   * Sets the value of D-pad down\n   */\n  set dPadDown(value) {\n    this._dPadDown = this._setDPadValue(value, this._dPadDown, DualShockDpad.Down);\n  }\n  /**\n   * Gets the value of D-pad left\n   */\n  get dPadLeft() {\n    return this._dPadLeft;\n  }\n  /**\n   * Sets the value of D-pad left\n   */\n  set dPadLeft(value) {\n    this._dPadLeft = this._setDPadValue(value, this._dPadLeft, DualShockDpad.Left);\n  }\n  /**\n   * Gets the value of D-pad right\n   */\n  get dPadRight() {\n    return this._dPadRight;\n  }\n  /**\n   * Sets the value of D-pad right\n   */\n  set dPadRight(value) {\n    this._dPadRight = this._setDPadValue(value, this._dPadRight, DualShockDpad.Right);\n  }\n  /**\n   * Force the gamepad to synchronize with device values\n   */\n  update() {\n    super.update();\n    this.buttonCross = this.browserGamepad.buttons[0].value;\n    this.buttonCircle = this.browserGamepad.buttons[1].value;\n    this.buttonSquare = this.browserGamepad.buttons[2].value;\n    this.buttonTriangle = this.browserGamepad.buttons[3].value;\n    this.buttonL1 = this.browserGamepad.buttons[4].value;\n    this.buttonR1 = this.browserGamepad.buttons[5].value;\n    this.leftTrigger = this.browserGamepad.buttons[6].value;\n    this.rightTrigger = this.browserGamepad.buttons[7].value;\n    this.buttonShare = this.browserGamepad.buttons[8].value;\n    this.buttonOptions = this.browserGamepad.buttons[9].value;\n    this.buttonLeftStick = this.browserGamepad.buttons[10].value;\n    this.buttonRightStick = this.browserGamepad.buttons[11].value;\n    this.dPadUp = this.browserGamepad.buttons[12].value;\n    this.dPadDown = this.browserGamepad.buttons[13].value;\n    this.dPadLeft = this.browserGamepad.buttons[14].value;\n    this.dPadRight = this.browserGamepad.buttons[15].value;\n  }\n  /**\n   * Disposes the gamepad\n   */\n  dispose() {\n    super.dispose();\n    this.onButtonDownObservable.clear();\n    this.onButtonUpObservable.clear();\n    this.onPadDownObservable.clear();\n    this.onPadUpObservable.clear();\n  }\n}","map":{"version":3,"names":["Observable","Gamepad","DualShockButton","DualShockDpad","DualShockPad","constructor","id","index","gamepad","replace","_leftTrigger","_rightTrigger","onButtonDownObservable","onButtonUpObservable","onPadDownObservable","onPadUpObservable","_buttonCross","_buttonCircle","_buttonSquare","_buttonTriangle","_buttonShare","_buttonOptions","_buttonL1","_buttonR1","_buttonLeftStick","_buttonRightStick","_dPadUp","_dPadDown","_dPadLeft","_dPadRight","type","DUALSHOCK","onlefttriggerchanged","callback","_onlefttriggerchanged","onrighttriggerchanged","_onrighttriggerchanged","leftTrigger","newValue","rightTrigger","onbuttondown","_onbuttondown","onbuttonup","_onbuttonup","ondpaddown","_ondpaddown","ondpadup","_ondpadup","_setButtonValue","currentValue","buttonType","notifyObservers","_setDPadValue","buttonCross","value","Cross","buttonCircle","Circle","buttonSquare","Square","buttonTriangle","Triangle","buttonOptions","Options","buttonShare","Share","buttonL1","L1","buttonR1","R1","buttonLeftStick","LeftStick","buttonRightStick","RightStick","dPadUp","Up","dPadDown","Down","dPadLeft","Left","dPadRight","Right","update","browserGamepad","buttons","dispose","clear"],"sources":["../../../../dev/core/src/Gamepads/dualShockGamepad.ts"],"sourcesContent":["import { Observable } from \"../Misc/observable\";\r\nimport { Gamepad } from \"./gamepad\";\r\n\r\n/**\r\n * Defines supported buttons for DualShock compatible gamepads\r\n */\r\nexport enum DualShockButton {\r\n    /** Cross */\r\n    Cross = 0,\r\n    /** Circle */\r\n    Circle = 1,\r\n    /** Square */\r\n    Square = 2,\r\n    /** Triangle */\r\n    Triangle = 3,\r\n    /** L1 */\r\n    L1 = 4,\r\n    /** R1 */\r\n    R1 = 5,\r\n    /** Share */\r\n    Share = 8,\r\n    /** Options */\r\n    Options = 9,\r\n    /** Left stick */\r\n    LeftStick = 10,\r\n    /** Right stick */\r\n    RightStick = 11,\r\n}\r\n\r\n/** Defines values for DualShock DPad  */\r\nexport enum DualShockDpad {\r\n    /** Up */\r\n    Up = 12,\r\n    /** Down */\r\n    Down = 13,\r\n    /** Left */\r\n    Left = 14,\r\n    /** Right */\r\n    Right = 15,\r\n}\r\n\r\n/**\r\n * Defines a DualShock gamepad\r\n */\r\nexport class DualShockPad extends Gamepad {\r\n    private _leftTrigger: number = 0;\r\n    private _rightTrigger: number = 0;\r\n\r\n    private _onlefttriggerchanged: (value: number) => void;\r\n    private _onrighttriggerchanged: (value: number) => void;\r\n\r\n    private _onbuttondown: (buttonPressed: DualShockButton) => void;\r\n    private _onbuttonup: (buttonReleased: DualShockButton) => void;\r\n    private _ondpaddown: (dPadPressed: DualShockDpad) => void;\r\n    private _ondpadup: (dPadReleased: DualShockDpad) => void;\r\n\r\n    /** Observable raised when a button is pressed */\r\n    public onButtonDownObservable = new Observable<DualShockButton>();\r\n    /** Observable raised when a button is released */\r\n    public onButtonUpObservable = new Observable<DualShockButton>();\r\n    /** Observable raised when a pad is pressed */\r\n    public onPadDownObservable = new Observable<DualShockDpad>();\r\n    /** Observable raised when a pad is released */\r\n    public onPadUpObservable = new Observable<DualShockDpad>();\r\n\r\n    private _buttonCross: number = 0;\r\n    private _buttonCircle: number = 0;\r\n    private _buttonSquare: number = 0;\r\n    private _buttonTriangle: number = 0;\r\n    private _buttonShare: number = 0;\r\n    private _buttonOptions: number = 0;\r\n    private _buttonL1: number = 0;\r\n    private _buttonR1: number = 0;\r\n\r\n    private _buttonLeftStick: number = 0;\r\n    private _buttonRightStick: number = 0;\r\n    private _dPadUp: number = 0;\r\n    private _dPadDown: number = 0;\r\n    private _dPadLeft: number = 0;\r\n    private _dPadRight: number = 0;\r\n\r\n    /**\r\n     * Creates a new DualShock gamepad object\r\n     * @param id defines the id of this gamepad\r\n     * @param index defines its index\r\n     * @param gamepad defines the internal HTML gamepad object\r\n     */\r\n    constructor(id: string, index: number, gamepad: any) {\r\n        super(id.replace(\"STANDARD GAMEPAD\", \"SONY PLAYSTATION DUALSHOCK\"), index, gamepad, 0, 1, 2, 3);\r\n        this.type = Gamepad.DUALSHOCK;\r\n    }\r\n\r\n    /**\r\n     * Defines the callback to call when left trigger is pressed\r\n     * @param callback defines the callback to use\r\n     */\r\n    public onlefttriggerchanged(callback: (value: number) => void) {\r\n        this._onlefttriggerchanged = callback;\r\n    }\r\n\r\n    /**\r\n     * Defines the callback to call when right trigger is pressed\r\n     * @param callback defines the callback to use\r\n     */\r\n    public onrighttriggerchanged(callback: (value: number) => void) {\r\n        this._onrighttriggerchanged = callback;\r\n    }\r\n\r\n    /**\r\n     * Gets the left trigger value\r\n     */\r\n    public get leftTrigger(): number {\r\n        return this._leftTrigger;\r\n    }\r\n    /**\r\n     * Sets the left trigger value\r\n     */\r\n    public set leftTrigger(newValue: number) {\r\n        if (this._onlefttriggerchanged && this._leftTrigger !== newValue) {\r\n            this._onlefttriggerchanged(newValue);\r\n        }\r\n        this._leftTrigger = newValue;\r\n    }\r\n\r\n    /**\r\n     * Gets the right trigger value\r\n     */\r\n    public get rightTrigger(): number {\r\n        return this._rightTrigger;\r\n    }\r\n    /**\r\n     * Sets the right trigger value\r\n     */\r\n    public set rightTrigger(newValue: number) {\r\n        if (this._onrighttriggerchanged && this._rightTrigger !== newValue) {\r\n            this._onrighttriggerchanged(newValue);\r\n        }\r\n        this._rightTrigger = newValue;\r\n    }\r\n\r\n    /**\r\n     * Defines the callback to call when a button is pressed\r\n     * @param callback defines the callback to use\r\n     */\r\n    public onbuttondown(callback: (buttonPressed: DualShockButton) => void) {\r\n        this._onbuttondown = callback;\r\n    }\r\n\r\n    /**\r\n     * Defines the callback to call when a button is released\r\n     * @param callback defines the callback to use\r\n     */\r\n    public onbuttonup(callback: (buttonReleased: DualShockButton) => void) {\r\n        this._onbuttonup = callback;\r\n    }\r\n\r\n    /**\r\n     * Defines the callback to call when a pad is pressed\r\n     * @param callback defines the callback to use\r\n     */\r\n    public ondpaddown(callback: (dPadPressed: DualShockDpad) => void) {\r\n        this._ondpaddown = callback;\r\n    }\r\n\r\n    /**\r\n     * Defines the callback to call when a pad is released\r\n     * @param callback defines the callback to use\r\n     */\r\n    public ondpadup(callback: (dPadReleased: DualShockDpad) => void) {\r\n        this._ondpadup = callback;\r\n    }\r\n\r\n    private _setButtonValue(newValue: number, currentValue: number, buttonType: DualShockButton): number {\r\n        if (newValue !== currentValue) {\r\n            if (newValue === 1) {\r\n                if (this._onbuttondown) {\r\n                    this._onbuttondown(buttonType);\r\n                }\r\n\r\n                this.onButtonDownObservable.notifyObservers(buttonType);\r\n            }\r\n            if (newValue === 0) {\r\n                if (this._onbuttonup) {\r\n                    this._onbuttonup(buttonType);\r\n                }\r\n\r\n                this.onButtonUpObservable.notifyObservers(buttonType);\r\n            }\r\n        }\r\n        return newValue;\r\n    }\r\n\r\n    private _setDPadValue(newValue: number, currentValue: number, buttonType: DualShockDpad): number {\r\n        if (newValue !== currentValue) {\r\n            if (newValue === 1) {\r\n                if (this._ondpaddown) {\r\n                    this._ondpaddown(buttonType);\r\n                }\r\n\r\n                this.onPadDownObservable.notifyObservers(buttonType);\r\n            }\r\n            if (newValue === 0) {\r\n                if (this._ondpadup) {\r\n                    this._ondpadup(buttonType);\r\n                }\r\n\r\n                this.onPadUpObservable.notifyObservers(buttonType);\r\n            }\r\n        }\r\n        return newValue;\r\n    }\r\n\r\n    /**\r\n     * Gets the value of the `Cross` button\r\n     */\r\n    public get buttonCross(): number {\r\n        return this._buttonCross;\r\n    }\r\n    /**\r\n     * Sets the value of the `Cross` button\r\n     */\r\n    public set buttonCross(value) {\r\n        this._buttonCross = this._setButtonValue(value, this._buttonCross, DualShockButton.Cross);\r\n    }\r\n\r\n    /**\r\n     * Gets the value of the `Circle` button\r\n     */\r\n    public get buttonCircle(): number {\r\n        return this._buttonCircle;\r\n    }\r\n    /**\r\n     * Sets the value of the `Circle` button\r\n     */\r\n    public set buttonCircle(value) {\r\n        this._buttonCircle = this._setButtonValue(value, this._buttonCircle, DualShockButton.Circle);\r\n    }\r\n\r\n    /**\r\n     * Gets the value of the `Square` button\r\n     */\r\n    public get buttonSquare(): number {\r\n        return this._buttonSquare;\r\n    }\r\n    /**\r\n     * Sets the value of the `Square` button\r\n     */\r\n    public set buttonSquare(value) {\r\n        this._buttonSquare = this._setButtonValue(value, this._buttonSquare, DualShockButton.Square);\r\n    }\r\n\r\n    /**\r\n     * Gets the value of the `Triangle` button\r\n     */\r\n    public get buttonTriangle(): number {\r\n        return this._buttonTriangle;\r\n    }\r\n    /**\r\n     * Sets the value of the `Triangle` button\r\n     */\r\n    public set buttonTriangle(value) {\r\n        this._buttonTriangle = this._setButtonValue(value, this._buttonTriangle, DualShockButton.Triangle);\r\n    }\r\n\r\n    /**\r\n     * Gets the value of the `Options` button\r\n     */\r\n    public get buttonOptions(): number {\r\n        return this._buttonOptions;\r\n    }\r\n    /**\r\n     * Sets the value of the `Options` button\r\n     */\r\n    public set buttonOptions(value) {\r\n        this._buttonOptions = this._setButtonValue(value, this._buttonOptions, DualShockButton.Options);\r\n    }\r\n\r\n    /**\r\n     * Gets the value of the `Share` button\r\n     */\r\n    public get buttonShare(): number {\r\n        return this._buttonShare;\r\n    }\r\n    /**\r\n     * Sets the value of the `Share` button\r\n     */\r\n    public set buttonShare(value) {\r\n        this._buttonShare = this._setButtonValue(value, this._buttonShare, DualShockButton.Share);\r\n    }\r\n\r\n    /**\r\n     * Gets the value of the `L1` button\r\n     */\r\n    public get buttonL1(): number {\r\n        return this._buttonL1;\r\n    }\r\n    /**\r\n     * Sets the value of the `L1` button\r\n     */\r\n    public set buttonL1(value) {\r\n        this._buttonL1 = this._setButtonValue(value, this._buttonL1, DualShockButton.L1);\r\n    }\r\n\r\n    /**\r\n     * Gets the value of the `R1` button\r\n     */\r\n    public get buttonR1(): number {\r\n        return this._buttonR1;\r\n    }\r\n    /**\r\n     * Sets the value of the `R1` button\r\n     */\r\n    public set buttonR1(value) {\r\n        this._buttonR1 = this._setButtonValue(value, this._buttonR1, DualShockButton.R1);\r\n    }\r\n\r\n    /**\r\n     * Gets the value of the Left joystick\r\n     */\r\n    public get buttonLeftStick(): number {\r\n        return this._buttonLeftStick;\r\n    }\r\n    /**\r\n     * Sets the value of the Left joystick\r\n     */\r\n    public set buttonLeftStick(value) {\r\n        this._buttonLeftStick = this._setButtonValue(value, this._buttonLeftStick, DualShockButton.LeftStick);\r\n    }\r\n\r\n    /**\r\n     * Gets the value of the Right joystick\r\n     */\r\n    public get buttonRightStick(): number {\r\n        return this._buttonRightStick;\r\n    }\r\n    /**\r\n     * Sets the value of the Right joystick\r\n     */\r\n    public set buttonRightStick(value) {\r\n        this._buttonRightStick = this._setButtonValue(value, this._buttonRightStick, DualShockButton.RightStick);\r\n    }\r\n\r\n    /**\r\n     * Gets the value of D-pad up\r\n     */\r\n    public get dPadUp(): number {\r\n        return this._dPadUp;\r\n    }\r\n    /**\r\n     * Sets the value of D-pad up\r\n     */\r\n    public set dPadUp(value) {\r\n        this._dPadUp = this._setDPadValue(value, this._dPadUp, DualShockDpad.Up);\r\n    }\r\n\r\n    /**\r\n     * Gets the value of D-pad down\r\n     */\r\n    public get dPadDown(): number {\r\n        return this._dPadDown;\r\n    }\r\n    /**\r\n     * Sets the value of D-pad down\r\n     */\r\n    public set dPadDown(value) {\r\n        this._dPadDown = this._setDPadValue(value, this._dPadDown, DualShockDpad.Down);\r\n    }\r\n\r\n    /**\r\n     * Gets the value of D-pad left\r\n     */\r\n    public get dPadLeft(): number {\r\n        return this._dPadLeft;\r\n    }\r\n    /**\r\n     * Sets the value of D-pad left\r\n     */\r\n    public set dPadLeft(value) {\r\n        this._dPadLeft = this._setDPadValue(value, this._dPadLeft, DualShockDpad.Left);\r\n    }\r\n\r\n    /**\r\n     * Gets the value of D-pad right\r\n     */\r\n    public get dPadRight(): number {\r\n        return this._dPadRight;\r\n    }\r\n    /**\r\n     * Sets the value of D-pad right\r\n     */\r\n    public set dPadRight(value) {\r\n        this._dPadRight = this._setDPadValue(value, this._dPadRight, DualShockDpad.Right);\r\n    }\r\n\r\n    /**\r\n     * Force the gamepad to synchronize with device values\r\n     */\r\n    public update() {\r\n        super.update();\r\n        this.buttonCross = this.browserGamepad.buttons[0].value;\r\n        this.buttonCircle = this.browserGamepad.buttons[1].value;\r\n        this.buttonSquare = this.browserGamepad.buttons[2].value;\r\n        this.buttonTriangle = this.browserGamepad.buttons[3].value;\r\n        this.buttonL1 = this.browserGamepad.buttons[4].value;\r\n        this.buttonR1 = this.browserGamepad.buttons[5].value;\r\n        this.leftTrigger = this.browserGamepad.buttons[6].value;\r\n        this.rightTrigger = this.browserGamepad.buttons[7].value;\r\n        this.buttonShare = this.browserGamepad.buttons[8].value;\r\n        this.buttonOptions = this.browserGamepad.buttons[9].value;\r\n        this.buttonLeftStick = this.browserGamepad.buttons[10].value;\r\n        this.buttonRightStick = this.browserGamepad.buttons[11].value;\r\n        this.dPadUp = this.browserGamepad.buttons[12].value;\r\n        this.dPadDown = this.browserGamepad.buttons[13].value;\r\n        this.dPadLeft = this.browserGamepad.buttons[14].value;\r\n        this.dPadRight = this.browserGamepad.buttons[15].value;\r\n    }\r\n\r\n    /**\r\n     * Disposes the gamepad\r\n     */\r\n    public dispose() {\r\n        super.dispose();\r\n        this.onButtonDownObservable.clear();\r\n        this.onButtonUpObservable.clear();\r\n        this.onPadDownObservable.clear();\r\n        this.onPadUpObservable.clear();\r\n    }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}