{"ast":null,"code":"import { NodeGeometryBlock } from \"../nodeGeometryBlock.js\";\nimport { RegisterClass } from \"../../../Misc/typeStore.js\";\nimport { NodeGeometryBlockConnectionPointTypes } from \"../Enums/nodeGeometryConnectionPointTypes.js\";\nimport { extractMinAndMax } from \"../../../Maths/math.functions.js\";\n/**\n * Block used to get the bounding info of a geometry\n */\nexport class BoundingBlock extends NodeGeometryBlock {\n  /**\n   * Create a new BoundingBlock\n   * @param name defines the block name\n   */\n  constructor(name) {\n    super(name);\n    this.registerInput(\"geometry\", NodeGeometryBlockConnectionPointTypes.Geometry);\n    this.registerOutput(\"min\", NodeGeometryBlockConnectionPointTypes.Vector3);\n    this.registerOutput(\"max\", NodeGeometryBlockConnectionPointTypes.Vector3);\n  }\n  /**\n   * Gets the current class name\n   * @returns the class name\n   */\n  getClassName() {\n    return \"BoundingBlock\";\n  }\n  /**\n   * Gets the geometry input component\n   */\n  get geometry() {\n    return this._inputs[0];\n  }\n  /**\n   * Gets the min output component\n   */\n  get min() {\n    return this._outputs[0];\n  }\n  /**\n   * Gets the max output component\n   */\n  get max() {\n    return this._outputs[1];\n  }\n  _buildBlock() {\n    this.min._storedFunction = state => {\n      const geometry = this.geometry.getConnectedValue(state);\n      if (!geometry) {\n        return null;\n      }\n      const boundingInfo = extractMinAndMax(geometry.positions, 0, geometry.positions.length / 3);\n      return boundingInfo.minimum;\n    };\n    this.max._storedFunction = state => {\n      const geometry = this.geometry.getConnectedValue(state);\n      if (!geometry) {\n        return null;\n      }\n      const boundingInfo = extractMinAndMax(geometry.positions, 0, geometry.positions.length / 3);\n      return boundingInfo.maximum;\n    };\n  }\n}\nRegisterClass(\"BABYLON.BoundingBlock\", BoundingBlock);","map":{"version":3,"names":["NodeGeometryBlock","RegisterClass","NodeGeometryBlockConnectionPointTypes","extractMinAndMax","BoundingBlock","constructor","name","registerInput","Geometry","registerOutput","Vector3","getClassName","geometry","_inputs","min","_outputs","max","_buildBlock","_storedFunction","state","getConnectedValue","boundingInfo","positions","length","minimum","maximum"],"sources":["../../../../../../dev/core/src/Meshes/Node/Blocks/boundingBlock.ts"],"sourcesContent":["import { NodeGeometryBlock } from \"../nodeGeometryBlock\";\r\nimport type { NodeGeometryConnectionPoint } from \"../nodeGeometryBlockConnectionPoint\";\r\nimport { RegisterClass } from \"../../../Misc/typeStore\";\r\nimport { NodeGeometryBlockConnectionPointTypes } from \"../Enums/nodeGeometryConnectionPointTypes\";\r\nimport { extractMinAndMax } from \"../../../Maths/math.functions\";\r\n\r\n/**\r\n * Block used to get the bounding info of a geometry\r\n */\r\nexport class BoundingBlock extends NodeGeometryBlock {\r\n    /**\r\n     * Create a new BoundingBlock\r\n     * @param name defines the block name\r\n     */\r\n    public constructor(name: string) {\r\n        super(name);\r\n\r\n        this.registerInput(\"geometry\", NodeGeometryBlockConnectionPointTypes.Geometry);\r\n\r\n        this.registerOutput(\"min\", NodeGeometryBlockConnectionPointTypes.Vector3);\r\n        this.registerOutput(\"max\", NodeGeometryBlockConnectionPointTypes.Vector3);\r\n    }\r\n\r\n    /**\r\n     * Gets the current class name\r\n     * @returns the class name\r\n     */\r\n    public getClassName() {\r\n        return \"BoundingBlock\";\r\n    }\r\n\r\n    /**\r\n     * Gets the geometry input component\r\n     */\r\n    public get geometry(): NodeGeometryConnectionPoint {\r\n        return this._inputs[0];\r\n    }\r\n\r\n    /**\r\n     * Gets the min output component\r\n     */\r\n    public get min(): NodeGeometryConnectionPoint {\r\n        return this._outputs[0];\r\n    }\r\n\r\n    /**\r\n     * Gets the max output component\r\n     */\r\n    public get max(): NodeGeometryConnectionPoint {\r\n        return this._outputs[1];\r\n    }\r\n\r\n    protected _buildBlock() {\r\n        this.min._storedFunction = (state) => {\r\n            const geometry = this.geometry.getConnectedValue(state);\r\n\r\n            if (!geometry) {\r\n                return null;\r\n            }\r\n\r\n            const boundingInfo = extractMinAndMax(geometry.positions!, 0, geometry.positions!.length / 3);\r\n            return boundingInfo.minimum;\r\n        };\r\n\r\n        this.max._storedFunction = (state) => {\r\n            const geometry = this.geometry.getConnectedValue(state);\r\n\r\n            if (!geometry) {\r\n                return null;\r\n            }\r\n\r\n            const boundingInfo = extractMinAndMax(geometry.positions!, 0, geometry.positions!.length / 3);\r\n            return boundingInfo.maximum;\r\n        };\r\n    }\r\n}\r\n\r\nRegisterClass(\"BABYLON.BoundingBlock\", BoundingBlock);\r\n"],"mappings":"AAAA,SAASA,iBAAiB,QAAQ,yBAAuB;AAEzD,SAASC,aAAa,QAAQ,4BAA0B;AACxD,SAASC,qCAAqC,QAAQ,8CAA4C;AAClG,SAASC,gBAAgB,QAAQ,kCAAgC;AAEjE;;;AAGA,OAAM,MAAOC,aAAc,SAAQJ,iBAAiB;EAChD;;;;EAIAK,YAAmBC,IAAY;IAC3B,KAAK,CAACA,IAAI,CAAC;IAEX,IAAI,CAACC,aAAa,CAAC,UAAU,EAAEL,qCAAqC,CAACM,QAAQ,CAAC;IAE9E,IAAI,CAACC,cAAc,CAAC,KAAK,EAAEP,qCAAqC,CAACQ,OAAO,CAAC;IACzE,IAAI,CAACD,cAAc,CAAC,KAAK,EAAEP,qCAAqC,CAACQ,OAAO,CAAC;EAC7E;EAEA;;;;EAIOC,YAAYA,CAAA;IACf,OAAO,eAAe;EAC1B;EAEA;;;EAGA,IAAWC,QAAQA,CAAA;IACf,OAAO,IAAI,CAACC,OAAO,CAAC,CAAC,CAAC;EAC1B;EAEA;;;EAGA,IAAWC,GAAGA,CAAA;IACV,OAAO,IAAI,CAACC,QAAQ,CAAC,CAAC,CAAC;EAC3B;EAEA;;;EAGA,IAAWC,GAAGA,CAAA;IACV,OAAO,IAAI,CAACD,QAAQ,CAAC,CAAC,CAAC;EAC3B;EAEUE,WAAWA,CAAA;IACjB,IAAI,CAACH,GAAG,CAACI,eAAe,GAAIC,KAAK,IAAI;MACjC,MAAMP,QAAQ,GAAG,IAAI,CAACA,QAAQ,CAACQ,iBAAiB,CAACD,KAAK,CAAC;MAEvD,IAAI,CAACP,QAAQ,EAAE;QACX,OAAO,IAAI;;MAGf,MAAMS,YAAY,GAAGlB,gBAAgB,CAACS,QAAQ,CAACU,SAAU,EAAE,CAAC,EAAEV,QAAQ,CAACU,SAAU,CAACC,MAAM,GAAG,CAAC,CAAC;MAC7F,OAAOF,YAAY,CAACG,OAAO;IAC/B,CAAC;IAED,IAAI,CAACR,GAAG,CAACE,eAAe,GAAIC,KAAK,IAAI;MACjC,MAAMP,QAAQ,GAAG,IAAI,CAACA,QAAQ,CAACQ,iBAAiB,CAACD,KAAK,CAAC;MAEvD,IAAI,CAACP,QAAQ,EAAE;QACX,OAAO,IAAI;;MAGf,MAAMS,YAAY,GAAGlB,gBAAgB,CAACS,QAAQ,CAACU,SAAU,EAAE,CAAC,EAAEV,QAAQ,CAACU,SAAU,CAACC,MAAM,GAAG,CAAC,CAAC;MAC7F,OAAOF,YAAY,CAACI,OAAO;IAC/B,CAAC;EACL;;AAGJxB,aAAa,CAAC,uBAAuB,EAAEG,aAAa,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}