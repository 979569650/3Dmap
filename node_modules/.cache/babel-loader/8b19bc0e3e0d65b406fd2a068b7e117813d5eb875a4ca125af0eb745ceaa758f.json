{"ast":null,"code":"import { __decorate } from \"../tslib.es6.js\";\nimport { serialize, serializeAsVector3, serializeAsMeshReference, serializeAsVector2 } from \"../Misc/decorators.js\";\nimport { Observable } from \"../Misc/observable.js\";\nimport { Matrix, Vector3, Vector2 } from \"../Maths/math.vector.js\";\nimport { Node } from \"../node.js\";\nimport { Mesh } from \"../Meshes/mesh.js\";\nimport { AutoRotationBehavior } from \"../Behaviors/Cameras/autoRotationBehavior.js\";\nimport { BouncingBehavior } from \"../Behaviors/Cameras/bouncingBehavior.js\";\nimport { FramingBehavior } from \"../Behaviors/Cameras/framingBehavior.js\";\nimport { Camera } from \"./camera.js\";\nimport { TargetCamera } from \"./targetCamera.js\";\nimport { ArcRotateCameraInputsManager } from \"../Cameras/arcRotateCameraInputsManager.js\";\nimport { Epsilon } from \"../Maths/math.constants.js\";\nimport { Tools } from \"../Misc/tools.js\";\nNode.AddNodeConstructor(\"ArcRotateCamera\", (name, scene) => {\n  return () => new ArcRotateCamera(name, 0, 0, 1.0, Vector3.Zero(), scene);\n});\n/**\n * This represents an orbital type of camera.\n *\n * This camera always points towards a given target position and can be rotated around that target with the target as the centre of rotation. It can be controlled with cursors and mouse, or with touch events.\n * Think of this camera as one orbiting its target position, or more imaginatively as a spy satellite orbiting the earth. Its position relative to the target (earth) can be set by three parameters, alpha (radians) the longitudinal rotation, beta (radians) the latitudinal rotation and radius the distance from the target position.\n * @see https://doc.babylonjs.com/features/featuresDeepDive/cameras/camera_introduction#arc-rotate-camera\n */\nexport class ArcRotateCamera extends TargetCamera {\n  /**\n   * Defines the target point of the camera.\n   * The camera looks towards it from the radius distance.\n   */\n  get target() {\n    return this._target;\n  }\n  set target(value) {\n    this.setTarget(value);\n  }\n  /**\n   * Defines the target mesh of the camera.\n   * The camera looks towards it from the radius distance.\n   * Please note that setting a target host will disable panning.\n   */\n  get targetHost() {\n    return this._targetHost;\n  }\n  set targetHost(value) {\n    if (value) {\n      this.setTarget(value);\n    }\n  }\n  /**\n   * Return the current target position of the camera. This value is expressed in local space.\n   * @returns the target position\n   */\n  getTarget() {\n    return this.target;\n  }\n  /**\n   * Define the current local position of the camera in the scene\n   */\n  get position() {\n    return this._position;\n  }\n  set position(newPosition) {\n    this.setPosition(newPosition);\n  }\n  /**\n   * The vector the camera should consider as up. (default is Vector3(0, 1, 0) as returned by Vector3.Up())\n   * Setting this will copy the given vector to the camera's upVector, and set rotation matrices to and from Y up.\n   * DO NOT set the up vector using copyFrom or copyFromFloats, as this bypasses setting the above matrices.\n   */\n  set upVector(vec) {\n    if (!this._upToYMatrix) {\n      this._yToUpMatrix = new Matrix();\n      this._upToYMatrix = new Matrix();\n      this._upVector = Vector3.Zero();\n    }\n    vec.normalize();\n    this._upVector.copyFrom(vec);\n    this.setMatUp();\n  }\n  get upVector() {\n    return this._upVector;\n  }\n  /**\n   * Sets the Y-up to camera up-vector rotation matrix, and the up-vector to Y-up rotation matrix.\n   */\n  setMatUp() {\n    // from y-up to custom-up (used in _getViewMatrix)\n    Matrix.RotationAlignToRef(Vector3.UpReadOnly, this._upVector, this._yToUpMatrix);\n    // from custom-up to y-up (used in rebuildAnglesAndRadius)\n    Matrix.RotationAlignToRef(this._upVector, Vector3.UpReadOnly, this._upToYMatrix);\n  }\n  //-- begin properties for backward compatibility for inputs\n  /**\n   * Gets or Set the pointer angular sensibility  along the X axis or how fast is the camera rotating.\n   */\n  get angularSensibilityX() {\n    const pointers = this.inputs.attached[\"pointers\"];\n    if (pointers) {\n      return pointers.angularSensibilityX;\n    }\n    return 0;\n  }\n  set angularSensibilityX(value) {\n    const pointers = this.inputs.attached[\"pointers\"];\n    if (pointers) {\n      pointers.angularSensibilityX = value;\n    }\n  }\n  /**\n   * Gets or Set the pointer angular sensibility along the Y axis or how fast is the camera rotating.\n   */\n  get angularSensibilityY() {\n    const pointers = this.inputs.attached[\"pointers\"];\n    if (pointers) {\n      return pointers.angularSensibilityY;\n    }\n    return 0;\n  }\n  set angularSensibilityY(value) {\n    const pointers = this.inputs.attached[\"pointers\"];\n    if (pointers) {\n      pointers.angularSensibilityY = value;\n    }\n  }\n  /**\n   * Gets or Set the pointer pinch precision or how fast is the camera zooming.\n   */\n  get pinchPrecision() {\n    const pointers = this.inputs.attached[\"pointers\"];\n    if (pointers) {\n      return pointers.pinchPrecision;\n    }\n    return 0;\n  }\n  set pinchPrecision(value) {\n    const pointers = this.inputs.attached[\"pointers\"];\n    if (pointers) {\n      pointers.pinchPrecision = value;\n    }\n  }\n  /**\n   * Gets or Set the pointer pinch delta percentage or how fast is the camera zooming.\n   * It will be used instead of pinchDeltaPrecision if different from 0.\n   * It defines the percentage of current camera.radius to use as delta when pinch zoom is used.\n   */\n  get pinchDeltaPercentage() {\n    const pointers = this.inputs.attached[\"pointers\"];\n    if (pointers) {\n      return pointers.pinchDeltaPercentage;\n    }\n    return 0;\n  }\n  set pinchDeltaPercentage(value) {\n    const pointers = this.inputs.attached[\"pointers\"];\n    if (pointers) {\n      pointers.pinchDeltaPercentage = value;\n    }\n  }\n  /**\n   * Gets or Set the pointer use natural pinch zoom to override the pinch precision\n   * and pinch delta percentage.\n   * When useNaturalPinchZoom is true, multi touch zoom will zoom in such\n   * that any object in the plane at the camera's target point will scale\n   * perfectly with finger motion.\n   */\n  get useNaturalPinchZoom() {\n    const pointers = this.inputs.attached[\"pointers\"];\n    if (pointers) {\n      return pointers.useNaturalPinchZoom;\n    }\n    return false;\n  }\n  set useNaturalPinchZoom(value) {\n    const pointers = this.inputs.attached[\"pointers\"];\n    if (pointers) {\n      pointers.useNaturalPinchZoom = value;\n    }\n  }\n  /**\n   * Gets or Set the pointer panning sensibility or how fast is the camera moving.\n   */\n  get panningSensibility() {\n    const pointers = this.inputs.attached[\"pointers\"];\n    if (pointers) {\n      return pointers.panningSensibility;\n    }\n    return 0;\n  }\n  set panningSensibility(value) {\n    const pointers = this.inputs.attached[\"pointers\"];\n    if (pointers) {\n      pointers.panningSensibility = value;\n    }\n  }\n  /**\n   * Gets or Set the list of keyboard keys used to control beta angle in a positive direction.\n   */\n  get keysUp() {\n    const keyboard = this.inputs.attached[\"keyboard\"];\n    if (keyboard) {\n      return keyboard.keysUp;\n    }\n    return [];\n  }\n  set keysUp(value) {\n    const keyboard = this.inputs.attached[\"keyboard\"];\n    if (keyboard) {\n      keyboard.keysUp = value;\n    }\n  }\n  /**\n   * Gets or Set the list of keyboard keys used to control beta angle in a negative direction.\n   */\n  get keysDown() {\n    const keyboard = this.inputs.attached[\"keyboard\"];\n    if (keyboard) {\n      return keyboard.keysDown;\n    }\n    return [];\n  }\n  set keysDown(value) {\n    const keyboard = this.inputs.attached[\"keyboard\"];\n    if (keyboard) {\n      keyboard.keysDown = value;\n    }\n  }\n  /**\n   * Gets or Set the list of keyboard keys used to control alpha angle in a negative direction.\n   */\n  get keysLeft() {\n    const keyboard = this.inputs.attached[\"keyboard\"];\n    if (keyboard) {\n      return keyboard.keysLeft;\n    }\n    return [];\n  }\n  set keysLeft(value) {\n    const keyboard = this.inputs.attached[\"keyboard\"];\n    if (keyboard) {\n      keyboard.keysLeft = value;\n    }\n  }\n  /**\n   * Gets or Set the list of keyboard keys used to control alpha angle in a positive direction.\n   */\n  get keysRight() {\n    const keyboard = this.inputs.attached[\"keyboard\"];\n    if (keyboard) {\n      return keyboard.keysRight;\n    }\n    return [];\n  }\n  set keysRight(value) {\n    const keyboard = this.inputs.attached[\"keyboard\"];\n    if (keyboard) {\n      keyboard.keysRight = value;\n    }\n  }\n  /**\n   * Gets or Set the mouse wheel precision or how fast is the camera zooming.\n   */\n  get wheelPrecision() {\n    const mousewheel = this.inputs.attached[\"mousewheel\"];\n    if (mousewheel) {\n      return mousewheel.wheelPrecision;\n    }\n    return 0;\n  }\n  set wheelPrecision(value) {\n    const mousewheel = this.inputs.attached[\"mousewheel\"];\n    if (mousewheel) {\n      mousewheel.wheelPrecision = value;\n    }\n  }\n  /**\n   * Gets or Set the boolean value that controls whether or not the mouse wheel\n   * zooms to the location of the mouse pointer or not.  The default is false.\n   */\n  get zoomToMouseLocation() {\n    const mousewheel = this.inputs.attached[\"mousewheel\"];\n    if (mousewheel) {\n      return mousewheel.zoomToMouseLocation;\n    }\n    return false;\n  }\n  set zoomToMouseLocation(value) {\n    const mousewheel = this.inputs.attached[\"mousewheel\"];\n    if (mousewheel) {\n      mousewheel.zoomToMouseLocation = value;\n    }\n  }\n  /**\n   * Gets or Set the mouse wheel delta percentage or how fast is the camera zooming.\n   * It will be used instead of pinchDeltaPrecision if different from 0.\n   * It defines the percentage of current camera.radius to use as delta when pinch zoom is used.\n   */\n  get wheelDeltaPercentage() {\n    const mousewheel = this.inputs.attached[\"mousewheel\"];\n    if (mousewheel) {\n      return mousewheel.wheelDeltaPercentage;\n    }\n    return 0;\n  }\n  set wheelDeltaPercentage(value) {\n    const mousewheel = this.inputs.attached[\"mousewheel\"];\n    if (mousewheel) {\n      mousewheel.wheelDeltaPercentage = value;\n    }\n  }\n  /**\n   * Gets the bouncing behavior of the camera if it has been enabled.\n   * @see https://doc.babylonjs.com/features/featuresDeepDive/behaviors/cameraBehaviors#bouncing-behavior\n   */\n  get bouncingBehavior() {\n    return this._bouncingBehavior;\n  }\n  /**\n   * Defines if the bouncing behavior of the camera is enabled on the camera.\n   * @see https://doc.babylonjs.com/features/featuresDeepDive/behaviors/cameraBehaviors#bouncing-behavior\n   */\n  get useBouncingBehavior() {\n    return this._bouncingBehavior != null;\n  }\n  set useBouncingBehavior(value) {\n    if (value === this.useBouncingBehavior) {\n      return;\n    }\n    if (value) {\n      this._bouncingBehavior = new BouncingBehavior();\n      this.addBehavior(this._bouncingBehavior);\n    } else if (this._bouncingBehavior) {\n      this.removeBehavior(this._bouncingBehavior);\n      this._bouncingBehavior = null;\n    }\n  }\n  /**\n   * Gets the framing behavior of the camera if it has been enabled.\n   * @see https://doc.babylonjs.com/features/featuresDeepDive/behaviors/cameraBehaviors#framing-behavior\n   */\n  get framingBehavior() {\n    return this._framingBehavior;\n  }\n  /**\n   * Defines if the framing behavior of the camera is enabled on the camera.\n   * @see https://doc.babylonjs.com/features/featuresDeepDive/behaviors/cameraBehaviors#framing-behavior\n   */\n  get useFramingBehavior() {\n    return this._framingBehavior != null;\n  }\n  set useFramingBehavior(value) {\n    if (value === this.useFramingBehavior) {\n      return;\n    }\n    if (value) {\n      this._framingBehavior = new FramingBehavior();\n      this.addBehavior(this._framingBehavior);\n    } else if (this._framingBehavior) {\n      this.removeBehavior(this._framingBehavior);\n      this._framingBehavior = null;\n    }\n  }\n  /**\n   * Gets the auto rotation behavior of the camera if it has been enabled.\n   * @see https://doc.babylonjs.com/features/featuresDeepDive/behaviors/cameraBehaviors#autorotation-behavior\n   */\n  get autoRotationBehavior() {\n    return this._autoRotationBehavior;\n  }\n  /**\n   * Defines if the auto rotation behavior of the camera is enabled on the camera.\n   * @see https://doc.babylonjs.com/features/featuresDeepDive/behaviors/cameraBehaviors#autorotation-behavior\n   */\n  get useAutoRotationBehavior() {\n    return this._autoRotationBehavior != null;\n  }\n  set useAutoRotationBehavior(value) {\n    if (value === this.useAutoRotationBehavior) {\n      return;\n    }\n    if (value) {\n      this._autoRotationBehavior = new AutoRotationBehavior();\n      this.addBehavior(this._autoRotationBehavior);\n    } else if (this._autoRotationBehavior) {\n      this.removeBehavior(this._autoRotationBehavior);\n      this._autoRotationBehavior = null;\n    }\n  }\n  /**\n   * Instantiates a new ArcRotateCamera in a given scene\n   * @param name Defines the name of the camera\n   * @param alpha Defines the camera rotation along the longitudinal axis\n   * @param beta Defines the camera rotation along the latitudinal axis\n   * @param radius Defines the camera distance from its target\n   * @param target Defines the camera target\n   * @param scene Defines the scene the camera belongs to\n   * @param setActiveOnSceneIfNoneActive Defines whether the camera should be marked as active if not other active cameras have been defined\n   */\n  constructor(name, alpha, beta, radius, target, scene, setActiveOnSceneIfNoneActive = true) {\n    super(name, Vector3.Zero(), scene, setActiveOnSceneIfNoneActive);\n    /**\n     * Current inertia value on the longitudinal axis.\n     * The bigger this number the longer it will take for the camera to stop.\n     */\n    this.inertialAlphaOffset = 0;\n    /**\n     * Current inertia value on the latitudinal axis.\n     * The bigger this number the longer it will take for the camera to stop.\n     */\n    this.inertialBetaOffset = 0;\n    /**\n     * Current inertia value on the radius axis.\n     * The bigger this number the longer it will take for the camera to stop.\n     */\n    this.inertialRadiusOffset = 0;\n    /**\n     * Minimum allowed angle on the longitudinal axis.\n     * This can help limiting how the Camera is able to move in the scene.\n     */\n    this.lowerAlphaLimit = null;\n    /**\n     * Maximum allowed angle on the longitudinal axis.\n     * This can help limiting how the Camera is able to move in the scene.\n     */\n    this.upperAlphaLimit = null;\n    /**\n     * Minimum allowed angle on the latitudinal axis.\n     * This can help limiting how the Camera is able to move in the scene.\n     */\n    this.lowerBetaLimit = 0.01;\n    /**\n     * Maximum allowed angle on the latitudinal axis.\n     * This can help limiting how the Camera is able to move in the scene.\n     */\n    this.upperBetaLimit = Math.PI - 0.01;\n    /**\n     * Minimum allowed distance of the camera to the target (The camera can not get closer).\n     * This can help limiting how the Camera is able to move in the scene.\n     */\n    this.lowerRadiusLimit = null;\n    /**\n     * Maximum allowed distance of the camera to the target (The camera can not get further).\n     * This can help limiting how the Camera is able to move in the scene.\n     */\n    this.upperRadiusLimit = null;\n    /**\n     * Defines the current inertia value used during panning of the camera along the X axis.\n     */\n    this.inertialPanningX = 0;\n    /**\n     * Defines the current inertia value used during panning of the camera along the Y axis.\n     */\n    this.inertialPanningY = 0;\n    /**\n     * Defines the distance used to consider the camera in pan mode vs pinch/zoom.\n     * Basically if your fingers moves away from more than this distance you will be considered\n     * in pinch mode.\n     */\n    this.pinchToPanMaxDistance = 20;\n    /**\n     * Defines the maximum distance the camera can pan.\n     * This could help keeping the camera always in your scene.\n     */\n    this.panningDistanceLimit = null;\n    /**\n     * Defines the target of the camera before panning.\n     */\n    this.panningOriginTarget = Vector3.Zero();\n    /**\n     * Defines the value of the inertia used during panning.\n     * 0 would mean stop inertia and one would mean no deceleration at all.\n     */\n    this.panningInertia = 0.9;\n    //-- end properties for backward compatibility for inputs\n    /**\n     * Defines how much the radius should be scaled while zooming on a particular mesh (through the zoomOn function)\n     */\n    this.zoomOnFactor = 1;\n    /**\n     * Defines a screen offset for the camera position.\n     */\n    this.targetScreenOffset = Vector2.Zero();\n    /**\n     * Allows the camera to be completely reversed.\n     * If false the camera can not arrive upside down.\n     */\n    this.allowUpsideDown = true;\n    /**\n     * Define if double tap/click is used to restore the previously saved state of the camera.\n     */\n    this.useInputToRestoreState = true;\n    /** @internal */\n    this._viewMatrix = new Matrix();\n    /**\n     * Defines the allowed panning axis.\n     */\n    this.panningAxis = new Vector3(1, 1, 0);\n    this._transformedDirection = new Vector3();\n    /**\n     * Defines if camera will eliminate transform on y axis.\n     */\n    this.mapPanning = false;\n    /**\n     * Observable triggered when the mesh target has been changed on the camera.\n     */\n    this.onMeshTargetChangedObservable = new Observable();\n    /**\n     * Defines whether the camera should check collision with the objects oh the scene.\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/cameras/camera_collisions#how-can-i-do-this-\n     */\n    this.checkCollisions = false;\n    /**\n     * Defines the collision radius of the camera.\n     * This simulates a sphere around the camera.\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/cameras/camera_collisions#arcrotatecamera\n     */\n    this.collisionRadius = new Vector3(0.5, 0.5, 0.5);\n    this._previousPosition = Vector3.Zero();\n    this._collisionVelocity = Vector3.Zero();\n    this._newPosition = Vector3.Zero();\n    this._computationVector = Vector3.Zero();\n    this._onCollisionPositionChange = (collisionId, newPosition, collidedMesh = null) => {\n      if (!collidedMesh) {\n        this._previousPosition.copyFrom(this._position);\n      } else {\n        this.setPosition(newPosition);\n        if (this.onCollide) {\n          this.onCollide(collidedMesh);\n        }\n      }\n      // Recompute because of constraints\n      const cosa = Math.cos(this.alpha);\n      const sina = Math.sin(this.alpha);\n      const cosb = Math.cos(this.beta);\n      let sinb = Math.sin(this.beta);\n      if (sinb === 0) {\n        sinb = 0.0001;\n      }\n      const target = this._getTargetPosition();\n      this._computationVector.copyFromFloats(this.radius * cosa * sinb, this.radius * cosb, this.radius * sina * sinb);\n      target.addToRef(this._computationVector, this._newPosition);\n      this._position.copyFrom(this._newPosition);\n      let up = this.upVector;\n      if (this.allowUpsideDown && this.beta < 0) {\n        up = up.clone();\n        up = up.negate();\n      }\n      this._computeViewMatrix(this._position, target, up);\n      this._viewMatrix.addAtIndex(12, this.targetScreenOffset.x);\n      this._viewMatrix.addAtIndex(13, this.targetScreenOffset.y);\n      this._collisionTriggered = false;\n    };\n    this._target = Vector3.Zero();\n    if (target) {\n      this.setTarget(target);\n    }\n    this.alpha = alpha;\n    this.beta = beta;\n    this.radius = radius;\n    this.getViewMatrix();\n    this.inputs = new ArcRotateCameraInputsManager(this);\n    this.inputs.addKeyboard().addMouseWheel().addPointers();\n  }\n  // Cache\n  /** @internal */\n  _initCache() {\n    super._initCache();\n    this._cache._target = new Vector3(Number.MAX_VALUE, Number.MAX_VALUE, Number.MAX_VALUE);\n    this._cache.alpha = undefined;\n    this._cache.beta = undefined;\n    this._cache.radius = undefined;\n    this._cache.targetScreenOffset = Vector2.Zero();\n  }\n  /**\n   * @internal\n   */\n  _updateCache(ignoreParentClass) {\n    if (!ignoreParentClass) {\n      super._updateCache();\n    }\n    this._cache._target.copyFrom(this._getTargetPosition());\n    this._cache.alpha = this.alpha;\n    this._cache.beta = this.beta;\n    this._cache.radius = this.radius;\n    this._cache.targetScreenOffset.copyFrom(this.targetScreenOffset);\n  }\n  _getTargetPosition() {\n    if (this._targetHost && this._targetHost.getAbsolutePosition) {\n      const pos = this._targetHost.getAbsolutePosition();\n      if (this._targetBoundingCenter) {\n        pos.addToRef(this._targetBoundingCenter, this._target);\n      } else {\n        this._target.copyFrom(pos);\n      }\n    }\n    const lockedTargetPosition = this._getLockedTargetPosition();\n    if (lockedTargetPosition) {\n      return lockedTargetPosition;\n    }\n    return this._target;\n  }\n  /**\n   * Stores the current state of the camera (alpha, beta, radius and target)\n   * @returns the camera itself\n   */\n  storeState() {\n    this._storedAlpha = this.alpha;\n    this._storedBeta = this.beta;\n    this._storedRadius = this.radius;\n    this._storedTarget = this._getTargetPosition().clone();\n    this._storedTargetScreenOffset = this.targetScreenOffset.clone();\n    return super.storeState();\n  }\n  /**\n   * @internal\n   * Restored camera state. You must call storeState() first\n   */\n  _restoreStateValues() {\n    if (!super._restoreStateValues()) {\n      return false;\n    }\n    this.setTarget(this._storedTarget.clone());\n    this.alpha = this._storedAlpha;\n    this.beta = this._storedBeta;\n    this.radius = this._storedRadius;\n    this.targetScreenOffset = this._storedTargetScreenOffset.clone();\n    this.inertialAlphaOffset = 0;\n    this.inertialBetaOffset = 0;\n    this.inertialRadiusOffset = 0;\n    this.inertialPanningX = 0;\n    this.inertialPanningY = 0;\n    return true;\n  }\n  // Synchronized\n  /** @internal */\n  _isSynchronizedViewMatrix() {\n    if (!super._isSynchronizedViewMatrix()) {\n      return false;\n    }\n    return this._cache._target.equals(this._getTargetPosition()) && this._cache.alpha === this.alpha && this._cache.beta === this.beta && this._cache.radius === this.radius && this._cache.targetScreenOffset.equals(this.targetScreenOffset);\n  }\n  /**\n   * Attached controls to the current camera.\n   * @param ignored defines an ignored parameter kept for backward compatibility.\n   * @param noPreventDefault Defines whether event caught by the controls should call preventdefault() (https://developer.mozilla.org/en-US/docs/Web/API/Event/preventDefault)\n   * @param useCtrlForPanning  Defines whether ctrl is used for panning within the controls\n   * @param panningMouseButton Defines whether panning is allowed through mouse click button\n   */\n  attachControl(ignored, noPreventDefault, useCtrlForPanning = true, panningMouseButton = 2) {\n    // eslint-disable-next-line prefer-rest-params\n    const args = arguments;\n    noPreventDefault = Tools.BackCompatCameraNoPreventDefault(args);\n    this._useCtrlForPanning = useCtrlForPanning;\n    this._panningMouseButton = panningMouseButton;\n    // backwards compatibility\n    if (typeof args[0] === \"boolean\") {\n      if (args.length > 1) {\n        this._useCtrlForPanning = args[1];\n      }\n      if (args.length > 2) {\n        this._panningMouseButton = args[2];\n      }\n    }\n    this.inputs.attachElement(noPreventDefault);\n    this._reset = () => {\n      this.inertialAlphaOffset = 0;\n      this.inertialBetaOffset = 0;\n      this.inertialRadiusOffset = 0;\n      this.inertialPanningX = 0;\n      this.inertialPanningY = 0;\n    };\n  }\n  /**\n   * Detach the current controls from the specified dom element.\n   */\n  detachControl() {\n    this.inputs.detachElement();\n    if (this._reset) {\n      this._reset();\n    }\n  }\n  /** @internal */\n  _checkInputs() {\n    //if (async) collision inspection was triggered, don't update the camera's position - until the collision callback was called.\n    if (this._collisionTriggered) {\n      return;\n    }\n    this.inputs.checkInputs();\n    // Inertia\n    if (this.inertialAlphaOffset !== 0 || this.inertialBetaOffset !== 0 || this.inertialRadiusOffset !== 0) {\n      const directionModifier = this.invertRotation ? -1 : 1;\n      const handednessMultiplier = this._calculateHandednessMultiplier();\n      let inertialAlphaOffset = this.inertialAlphaOffset * handednessMultiplier;\n      if (this.beta <= 0) {\n        inertialAlphaOffset *= -1;\n      }\n      this.alpha += inertialAlphaOffset * directionModifier;\n      this.beta += this.inertialBetaOffset * directionModifier;\n      this.radius -= this.inertialRadiusOffset;\n      this.inertialAlphaOffset *= this.inertia;\n      this.inertialBetaOffset *= this.inertia;\n      this.inertialRadiusOffset *= this.inertia;\n      if (Math.abs(this.inertialAlphaOffset) < Epsilon) {\n        this.inertialAlphaOffset = 0;\n      }\n      if (Math.abs(this.inertialBetaOffset) < Epsilon) {\n        this.inertialBetaOffset = 0;\n      }\n      if (Math.abs(this.inertialRadiusOffset) < this.speed * Epsilon) {\n        this.inertialRadiusOffset = 0;\n      }\n    }\n    // Panning inertia\n    if (this.inertialPanningX !== 0 || this.inertialPanningY !== 0) {\n      const localDirection = new Vector3(this.inertialPanningX, this.inertialPanningY, this.inertialPanningY);\n      this._viewMatrix.invertToRef(this._cameraTransformMatrix);\n      localDirection.multiplyInPlace(this.panningAxis);\n      Vector3.TransformNormalToRef(localDirection, this._cameraTransformMatrix, this._transformedDirection);\n      // If mapPanning is enabled, we need to take the upVector into account and\n      // make sure we're not panning in the y direction\n      if (this.mapPanning) {\n        const up = this.upVector;\n        const right = Vector3.CrossToRef(this._transformedDirection, up, this._transformedDirection);\n        Vector3.CrossToRef(up, right, this._transformedDirection);\n      } else if (!this.panningAxis.y) {\n        this._transformedDirection.y = 0;\n      }\n      if (!this._targetHost) {\n        if (this.panningDistanceLimit) {\n          this._transformedDirection.addInPlace(this._target);\n          const distanceSquared = Vector3.DistanceSquared(this._transformedDirection, this.panningOriginTarget);\n          if (distanceSquared <= this.panningDistanceLimit * this.panningDistanceLimit) {\n            this._target.copyFrom(this._transformedDirection);\n          }\n        } else {\n          this._target.addInPlace(this._transformedDirection);\n        }\n      }\n      this.inertialPanningX *= this.panningInertia;\n      this.inertialPanningY *= this.panningInertia;\n      if (Math.abs(this.inertialPanningX) < this.speed * Epsilon) {\n        this.inertialPanningX = 0;\n      }\n      if (Math.abs(this.inertialPanningY) < this.speed * Epsilon) {\n        this.inertialPanningY = 0;\n      }\n    }\n    // Limits\n    this._checkLimits();\n    super._checkInputs();\n  }\n  _checkLimits() {\n    if (this.lowerBetaLimit === null || this.lowerBetaLimit === undefined) {\n      if (this.allowUpsideDown && this.beta > Math.PI) {\n        this.beta = this.beta - 2 * Math.PI;\n      }\n    } else {\n      if (this.beta < this.lowerBetaLimit) {\n        this.beta = this.lowerBetaLimit;\n      }\n    }\n    if (this.upperBetaLimit === null || this.upperBetaLimit === undefined) {\n      if (this.allowUpsideDown && this.beta < -Math.PI) {\n        this.beta = this.beta + 2 * Math.PI;\n      }\n    } else {\n      if (this.beta > this.upperBetaLimit) {\n        this.beta = this.upperBetaLimit;\n      }\n    }\n    if (this.lowerAlphaLimit !== null && this.alpha < this.lowerAlphaLimit) {\n      this.alpha = this.lowerAlphaLimit;\n    }\n    if (this.upperAlphaLimit !== null && this.alpha > this.upperAlphaLimit) {\n      this.alpha = this.upperAlphaLimit;\n    }\n    if (this.lowerRadiusLimit !== null && this.radius < this.lowerRadiusLimit) {\n      this.radius = this.lowerRadiusLimit;\n      this.inertialRadiusOffset = 0;\n    }\n    if (this.upperRadiusLimit !== null && this.radius > this.upperRadiusLimit) {\n      this.radius = this.upperRadiusLimit;\n      this.inertialRadiusOffset = 0;\n    }\n  }\n  /**\n   * Rebuilds angles (alpha, beta) and radius from the give position and target\n   */\n  rebuildAnglesAndRadius() {\n    this._position.subtractToRef(this._getTargetPosition(), this._computationVector);\n    // need to rotate to Y up equivalent if up vector not Axis.Y\n    if (this._upVector.x !== 0 || this._upVector.y !== 1.0 || this._upVector.z !== 0) {\n      Vector3.TransformCoordinatesToRef(this._computationVector, this._upToYMatrix, this._computationVector);\n    }\n    this.radius = this._computationVector.length();\n    if (this.radius === 0) {\n      this.radius = 0.0001; // Just to avoid division by zero\n    }\n    // Alpha\n    const previousAlpha = this.alpha;\n    if (this._computationVector.x === 0 && this._computationVector.z === 0) {\n      this.alpha = Math.PI / 2; // avoid division by zero when looking along up axis, and set to acos(0)\n    } else {\n      this.alpha = Math.acos(this._computationVector.x / Math.sqrt(Math.pow(this._computationVector.x, 2) + Math.pow(this._computationVector.z, 2)));\n    }\n    if (this._computationVector.z < 0) {\n      this.alpha = 2 * Math.PI - this.alpha;\n    }\n    // Calculate the number of revolutions between the new and old alpha values.\n    const alphaCorrectionTurns = Math.round((previousAlpha - this.alpha) / (2.0 * Math.PI));\n    // Adjust alpha so that its numerical representation is the closest one to the old value.\n    this.alpha += alphaCorrectionTurns * 2.0 * Math.PI;\n    // Beta\n    this.beta = Math.acos(this._computationVector.y / this.radius);\n    this._checkLimits();\n  }\n  /**\n   * Use a position to define the current camera related information like alpha, beta and radius\n   * @param position Defines the position to set the camera at\n   */\n  setPosition(position) {\n    if (this._position.equals(position)) {\n      return;\n    }\n    this._position.copyFrom(position);\n    this.rebuildAnglesAndRadius();\n  }\n  /**\n   * Defines the target the camera should look at.\n   * This will automatically adapt alpha beta and radius to fit within the new target.\n   * Please note that setting a target as a mesh will disable panning.\n   * @param target Defines the new target as a Vector or a mesh\n   * @param toBoundingCenter In case of a mesh target, defines whether to target the mesh position or its bounding information center\n   * @param allowSamePosition If false, prevents reapplying the new computed position if it is identical to the current one (optim)\n   * @param cloneAlphaBetaRadius If true, replicate the current setup (alpha, beta, radius) on the new target\n   */\n  setTarget(target, toBoundingCenter = false, allowSamePosition = false, cloneAlphaBetaRadius = false) {\n    var _a;\n    cloneAlphaBetaRadius = (_a = this.overrideCloneAlphaBetaRadius) !== null && _a !== void 0 ? _a : cloneAlphaBetaRadius;\n    if (target.getBoundingInfo) {\n      if (toBoundingCenter) {\n        this._targetBoundingCenter = target.getBoundingInfo().boundingBox.centerWorld.clone();\n      } else {\n        this._targetBoundingCenter = null;\n      }\n      target.computeWorldMatrix();\n      this._targetHost = target;\n      this._target = this._getTargetPosition();\n      this.onMeshTargetChangedObservable.notifyObservers(this._targetHost);\n    } else {\n      const newTarget = target;\n      const currentTarget = this._getTargetPosition();\n      if (currentTarget && !allowSamePosition && currentTarget.equals(newTarget)) {\n        return;\n      }\n      this._targetHost = null;\n      this._target = newTarget;\n      this._targetBoundingCenter = null;\n      this.onMeshTargetChangedObservable.notifyObservers(null);\n    }\n    if (!cloneAlphaBetaRadius) {\n      this.rebuildAnglesAndRadius();\n    }\n  }\n  /** @internal */\n  _getViewMatrix() {\n    // Compute\n    const cosa = Math.cos(this.alpha);\n    const sina = Math.sin(this.alpha);\n    const cosb = Math.cos(this.beta);\n    let sinb = Math.sin(this.beta);\n    if (sinb === 0) {\n      sinb = 0.0001;\n    }\n    if (this.radius === 0) {\n      this.radius = 0.0001; // Just to avoid division by zero\n    }\n\n    const target = this._getTargetPosition();\n    this._computationVector.copyFromFloats(this.radius * cosa * sinb, this.radius * cosb, this.radius * sina * sinb);\n    // Rotate according to up vector\n    if (this._upVector.x !== 0 || this._upVector.y !== 1.0 || this._upVector.z !== 0) {\n      Vector3.TransformCoordinatesToRef(this._computationVector, this._yToUpMatrix, this._computationVector);\n    }\n    target.addToRef(this._computationVector, this._newPosition);\n    if (this.getScene().collisionsEnabled && this.checkCollisions) {\n      const coordinator = this.getScene().collisionCoordinator;\n      if (!this._collider) {\n        this._collider = coordinator.createCollider();\n      }\n      this._collider._radius = this.collisionRadius;\n      this._newPosition.subtractToRef(this._position, this._collisionVelocity);\n      this._collisionTriggered = true;\n      coordinator.getNewPosition(this._position, this._collisionVelocity, this._collider, 3, null, this._onCollisionPositionChange, this.uniqueId);\n    } else {\n      this._position.copyFrom(this._newPosition);\n      let up = this.upVector;\n      if (this.allowUpsideDown && sinb < 0) {\n        up = up.negate();\n      }\n      this._computeViewMatrix(this._position, target, up);\n      this._viewMatrix.addAtIndex(12, this.targetScreenOffset.x);\n      this._viewMatrix.addAtIndex(13, this.targetScreenOffset.y);\n    }\n    this._currentTarget = target;\n    return this._viewMatrix;\n  }\n  /**\n   * Zooms on a mesh to be at the min distance where we could see it fully in the current viewport.\n   * @param meshes Defines the mesh to zoom on\n   * @param doNotUpdateMaxZ Defines whether or not maxZ should be updated whilst zooming on the mesh (this can happen if the mesh is big and the maxradius pretty small for instance)\n   */\n  zoomOn(meshes, doNotUpdateMaxZ = false) {\n    meshes = meshes || this.getScene().meshes;\n    const minMaxVector = Mesh.MinMax(meshes);\n    let distance = this._calculateLowerRadiusFromModelBoundingSphere(minMaxVector.min, minMaxVector.max);\n    // If there are defined limits, we need to take them into account\n    distance = Math.max(Math.min(distance, this.upperRadiusLimit || Number.MAX_VALUE), this.lowerRadiusLimit || 0);\n    this.radius = distance * this.zoomOnFactor;\n    this.focusOn({\n      min: minMaxVector.min,\n      max: minMaxVector.max,\n      distance: distance\n    }, doNotUpdateMaxZ);\n  }\n  /**\n   * Focus on a mesh or a bounding box. This adapts the target and maxRadius if necessary but does not update the current radius.\n   * The target will be changed but the radius\n   * @param meshesOrMinMaxVectorAndDistance Defines the mesh or bounding info to focus on\n   * @param doNotUpdateMaxZ Defines whether or not maxZ should be updated whilst zooming on the mesh (this can happen if the mesh is big and the maxradius pretty small for instance)\n   */\n  focusOn(meshesOrMinMaxVectorAndDistance, doNotUpdateMaxZ = false) {\n    let meshesOrMinMaxVector;\n    let distance;\n    if (meshesOrMinMaxVectorAndDistance.min === undefined) {\n      // meshes\n      const meshes = meshesOrMinMaxVectorAndDistance || this.getScene().meshes;\n      meshesOrMinMaxVector = Mesh.MinMax(meshes);\n      distance = Vector3.Distance(meshesOrMinMaxVector.min, meshesOrMinMaxVector.max);\n    } else {\n      //minMaxVector and distance\n      const minMaxVectorAndDistance = meshesOrMinMaxVectorAndDistance;\n      meshesOrMinMaxVector = minMaxVectorAndDistance;\n      distance = minMaxVectorAndDistance.distance;\n    }\n    this._target = Mesh.Center(meshesOrMinMaxVector);\n    if (!doNotUpdateMaxZ) {\n      this.maxZ = distance * 2;\n    }\n  }\n  /**\n   * @override\n   * Override Camera.createRigCamera\n   */\n  createRigCamera(name, cameraIndex) {\n    let alphaShift = 0;\n    switch (this.cameraRigMode) {\n      case Camera.RIG_MODE_STEREOSCOPIC_ANAGLYPH:\n      case Camera.RIG_MODE_STEREOSCOPIC_SIDEBYSIDE_PARALLEL:\n      case Camera.RIG_MODE_STEREOSCOPIC_OVERUNDER:\n      case Camera.RIG_MODE_STEREOSCOPIC_INTERLACED:\n      case Camera.RIG_MODE_VR:\n        alphaShift = this._cameraRigParams.stereoHalfAngle * (cameraIndex === 0 ? 1 : -1);\n        break;\n      case Camera.RIG_MODE_STEREOSCOPIC_SIDEBYSIDE_CROSSEYED:\n        alphaShift = this._cameraRigParams.stereoHalfAngle * (cameraIndex === 0 ? -1 : 1);\n        break;\n    }\n    const rigCam = new ArcRotateCamera(name, this.alpha + alphaShift, this.beta, this.radius, this._target, this.getScene());\n    rigCam._cameraRigParams = {};\n    rigCam.isRigCamera = true;\n    rigCam.rigParent = this;\n    rigCam.upVector = this.upVector;\n    rigCam.mode = this.mode;\n    rigCam.orthoLeft = this.orthoLeft;\n    rigCam.orthoRight = this.orthoRight;\n    rigCam.orthoBottom = this.orthoBottom;\n    rigCam.orthoTop = this.orthoTop;\n    return rigCam;\n  }\n  /**\n   * @internal\n   * @override\n   * Override Camera._updateRigCameras\n   */\n  _updateRigCameras() {\n    const camLeft = this._rigCameras[0];\n    const camRight = this._rigCameras[1];\n    camLeft.beta = camRight.beta = this.beta;\n    switch (this.cameraRigMode) {\n      case Camera.RIG_MODE_STEREOSCOPIC_ANAGLYPH:\n      case Camera.RIG_MODE_STEREOSCOPIC_SIDEBYSIDE_PARALLEL:\n      case Camera.RIG_MODE_STEREOSCOPIC_OVERUNDER:\n      case Camera.RIG_MODE_STEREOSCOPIC_INTERLACED:\n      case Camera.RIG_MODE_VR:\n        camLeft.alpha = this.alpha - this._cameraRigParams.stereoHalfAngle;\n        camRight.alpha = this.alpha + this._cameraRigParams.stereoHalfAngle;\n        break;\n      case Camera.RIG_MODE_STEREOSCOPIC_SIDEBYSIDE_CROSSEYED:\n        camLeft.alpha = this.alpha + this._cameraRigParams.stereoHalfAngle;\n        camRight.alpha = this.alpha - this._cameraRigParams.stereoHalfAngle;\n        break;\n    }\n    super._updateRigCameras();\n  }\n  /**\n   * @internal\n   */\n  _calculateLowerRadiusFromModelBoundingSphere(minimumWorld, maximumWorld, radiusScale = 1) {\n    const boxVectorGlobalDiagonal = Vector3.Distance(minimumWorld, maximumWorld);\n    // Get aspect ratio in order to calculate frustum slope\n    const engine = this.getScene().getEngine();\n    const aspectRatio = engine.getAspectRatio(this);\n    const frustumSlopeY = Math.tan(this.fov / 2);\n    const frustumSlopeX = frustumSlopeY * aspectRatio;\n    // Formula for setting distance\n    // (Good explanation: http://stackoverflow.com/questions/2866350/move-camera-to-fit-3d-scene)\n    const radiusWithoutFraming = boxVectorGlobalDiagonal * 0.5;\n    // Horizon distance\n    const radius = radiusWithoutFraming * radiusScale;\n    const distanceForHorizontalFrustum = radius * Math.sqrt(1.0 + 1.0 / (frustumSlopeX * frustumSlopeX));\n    const distanceForVerticalFrustum = radius * Math.sqrt(1.0 + 1.0 / (frustumSlopeY * frustumSlopeY));\n    return Math.max(distanceForHorizontalFrustum, distanceForVerticalFrustum);\n  }\n  /**\n   * Destroy the camera and release the current resources hold by it.\n   */\n  dispose() {\n    this.inputs.clear();\n    super.dispose();\n  }\n  /**\n   * Gets the current object class name.\n   * @returns the class name\n   */\n  getClassName() {\n    return \"ArcRotateCamera\";\n  }\n}\n__decorate([serialize()], ArcRotateCamera.prototype, \"alpha\", void 0);\n__decorate([serialize()], ArcRotateCamera.prototype, \"beta\", void 0);\n__decorate([serialize()], ArcRotateCamera.prototype, \"radius\", void 0);\n__decorate([serialize()], ArcRotateCamera.prototype, \"overrideCloneAlphaBetaRadius\", void 0);\n__decorate([serializeAsVector3(\"target\")], ArcRotateCamera.prototype, \"_target\", void 0);\n__decorate([serializeAsMeshReference(\"targetHost\")], ArcRotateCamera.prototype, \"_targetHost\", void 0);\n__decorate([serialize()], ArcRotateCamera.prototype, \"inertialAlphaOffset\", void 0);\n__decorate([serialize()], ArcRotateCamera.prototype, \"inertialBetaOffset\", void 0);\n__decorate([serialize()], ArcRotateCamera.prototype, \"inertialRadiusOffset\", void 0);\n__decorate([serialize()], ArcRotateCamera.prototype, \"lowerAlphaLimit\", void 0);\n__decorate([serialize()], ArcRotateCamera.prototype, \"upperAlphaLimit\", void 0);\n__decorate([serialize()], ArcRotateCamera.prototype, \"lowerBetaLimit\", void 0);\n__decorate([serialize()], ArcRotateCamera.prototype, \"upperBetaLimit\", void 0);\n__decorate([serialize()], ArcRotateCamera.prototype, \"lowerRadiusLimit\", void 0);\n__decorate([serialize()], ArcRotateCamera.prototype, \"upperRadiusLimit\", void 0);\n__decorate([serialize()], ArcRotateCamera.prototype, \"inertialPanningX\", void 0);\n__decorate([serialize()], ArcRotateCamera.prototype, \"inertialPanningY\", void 0);\n__decorate([serialize()], ArcRotateCamera.prototype, \"pinchToPanMaxDistance\", void 0);\n__decorate([serialize()], ArcRotateCamera.prototype, \"panningDistanceLimit\", void 0);\n__decorate([serializeAsVector3()], ArcRotateCamera.prototype, \"panningOriginTarget\", void 0);\n__decorate([serialize()], ArcRotateCamera.prototype, \"panningInertia\", void 0);\n__decorate([serialize()], ArcRotateCamera.prototype, \"zoomToMouseLocation\", null);\n__decorate([serialize()], ArcRotateCamera.prototype, \"zoomOnFactor\", void 0);\n__decorate([serializeAsVector2()], ArcRotateCamera.prototype, \"targetScreenOffset\", void 0);\n__decorate([serialize()], ArcRotateCamera.prototype, \"allowUpsideDown\", void 0);\n__decorate([serialize()], ArcRotateCamera.prototype, \"useInputToRestoreState\", void 0);","map":{"version":3,"names":["serialize","serializeAsVector3","serializeAsMeshReference","serializeAsVector2","Observable","Matrix","Vector3","Vector2","Node","Mesh","AutoRotationBehavior","BouncingBehavior","FramingBehavior","Camera","TargetCamera","ArcRotateCameraInputsManager","Epsilon","Tools","AddNodeConstructor","name","scene","ArcRotateCamera","Zero","target","_target","value","setTarget","targetHost","_targetHost","getTarget","position","_position","newPosition","setPosition","upVector","vec","_upToYMatrix","_yToUpMatrix","_upVector","normalize","copyFrom","setMatUp","RotationAlignToRef","UpReadOnly","angularSensibilityX","pointers","inputs","attached","angularSensibilityY","pinchPrecision","pinchDeltaPercentage","useNaturalPinchZoom","panningSensibility","keysUp","keyboard","keysDown","keysLeft","keysRight","wheelPrecision","mousewheel","zoomToMouseLocation","wheelDeltaPercentage","bouncingBehavior","_bouncingBehavior","useBouncingBehavior","addBehavior","removeBehavior","framingBehavior","_framingBehavior","useFramingBehavior","autoRotationBehavior","_autoRotationBehavior","useAutoRotationBehavior","constructor","alpha","beta","radius","setActiveOnSceneIfNoneActive","inertialAlphaOffset","inertialBetaOffset","inertialRadiusOffset","lowerAlphaLimit","upperAlphaLimit","lowerBetaLimit","upperBetaLimit","Math","PI","lowerRadiusLimit","upperRadiusLimit","inertialPanningX","inertialPanningY","pinchToPanMaxDistance","panningDistanceLimit","panningOriginTarget","panningInertia","zoomOnFactor","targetScreenOffset","allowUpsideDown","useInputToRestoreState","_viewMatrix","panningAxis","_transformedDirection","mapPanning","onMeshTargetChangedObservable","checkCollisions","collisionRadius","_previousPosition","_collisionVelocity","_newPosition","_computationVector","_onCollisionPositionChange","collisionId","collidedMesh","onCollide","cosa","cos","sina","sin","cosb","sinb","_getTargetPosition","copyFromFloats","addToRef","up","clone","negate","_computeViewMatrix","addAtIndex","x","y","_collisionTriggered","getViewMatrix","addKeyboard","addMouseWheel","addPointers","_initCache","_cache","Number","MAX_VALUE","undefined","_updateCache","ignoreParentClass","getAbsolutePosition","pos","_targetBoundingCenter","lockedTargetPosition","_getLockedTargetPosition","storeState","_storedAlpha","_storedBeta","_storedRadius","_storedTarget","_storedTargetScreenOffset","_restoreStateValues","_isSynchronizedViewMatrix","equals","attachControl","ignored","noPreventDefault","useCtrlForPanning","panningMouseButton","args","arguments","BackCompatCameraNoPreventDefault","_useCtrlForPanning","_panningMouseButton","length","attachElement","_reset","detachControl","detachElement","_checkInputs","checkInputs","directionModifier","invertRotation","handednessMultiplier","_calculateHandednessMultiplier","inertia","abs","speed","localDirection","invertToRef","_cameraTransformMatrix","multiplyInPlace","TransformNormalToRef","right","CrossToRef","addInPlace","distanceSquared","DistanceSquared","_checkLimits","rebuildAnglesAndRadius","subtractToRef","z","TransformCoordinatesToRef","previousAlpha","acos","sqrt","pow","alphaCorrectionTurns","round","toBoundingCenter","allowSamePosition","cloneAlphaBetaRadius","_a","overrideCloneAlphaBetaRadius","getBoundingInfo","boundingBox","centerWorld","computeWorldMatrix","notifyObservers","newTarget","currentTarget","_getViewMatrix","getScene","collisionsEnabled","coordinator","collisionCoordinator","_collider","createCollider","_radius","getNewPosition","uniqueId","_currentTarget","zoomOn","meshes","doNotUpdateMaxZ","minMaxVector","MinMax","distance","_calculateLowerRadiusFromModelBoundingSphere","min","max","focusOn","meshesOrMinMaxVectorAndDistance","meshesOrMinMaxVector","Distance","minMaxVectorAndDistance","Center","maxZ","createRigCamera","cameraIndex","alphaShift","cameraRigMode","RIG_MODE_STEREOSCOPIC_ANAGLYPH","RIG_MODE_STEREOSCOPIC_SIDEBYSIDE_PARALLEL","RIG_MODE_STEREOSCOPIC_OVERUNDER","RIG_MODE_STEREOSCOPIC_INTERLACED","RIG_MODE_VR","_cameraRigParams","stereoHalfAngle","RIG_MODE_STEREOSCOPIC_SIDEBYSIDE_CROSSEYED","rigCam","isRigCamera","rigParent","mode","orthoLeft","orthoRight","orthoBottom","orthoTop","_updateRigCameras","camLeft","_rigCameras","camRight","minimumWorld","maximumWorld","radiusScale","boxVectorGlobalDiagonal","engine","getEngine","aspectRatio","getAspectRatio","frustumSlopeY","tan","fov","frustumSlopeX","radiusWithoutFraming","distanceForHorizontalFrustum","distanceForVerticalFrustum","dispose","clear","getClassName","__decorate"],"sources":["../../../../dev/core/src/Cameras/arcRotateCamera.ts"],"sourcesContent":["import { serialize, serializeAsVector3, serializeAsMeshReference, serializeAsVector2 } from \"../Misc/decorators\";\r\nimport { Observable } from \"../Misc/observable\";\r\nimport type { Nullable } from \"../types\";\r\nimport type { Scene } from \"../scene\";\r\nimport { Matrix, Vector3, Vector2 } from \"../Maths/math.vector\";\r\nimport { Node } from \"../node\";\r\nimport type { AbstractMesh } from \"../Meshes/abstractMesh\";\r\nimport { Mesh } from \"../Meshes/mesh\";\r\nimport { AutoRotationBehavior } from \"../Behaviors/Cameras/autoRotationBehavior\";\r\nimport { BouncingBehavior } from \"../Behaviors/Cameras/bouncingBehavior\";\r\nimport { FramingBehavior } from \"../Behaviors/Cameras/framingBehavior\";\r\nimport { Camera } from \"./camera\";\r\nimport { TargetCamera } from \"./targetCamera\";\r\nimport type { ArcRotateCameraPointersInput } from \"../Cameras/Inputs/arcRotateCameraPointersInput\";\r\nimport type { ArcRotateCameraKeyboardMoveInput } from \"../Cameras/Inputs/arcRotateCameraKeyboardMoveInput\";\r\nimport type { ArcRotateCameraMouseWheelInput } from \"../Cameras/Inputs/arcRotateCameraMouseWheelInput\";\r\nimport { ArcRotateCameraInputsManager } from \"../Cameras/arcRotateCameraInputsManager\";\r\nimport { Epsilon } from \"../Maths/math.constants\";\r\nimport { Tools } from \"../Misc/tools\";\r\n\r\nimport type { Collider } from \"../Collisions/collider\";\r\n\r\nNode.AddNodeConstructor(\"ArcRotateCamera\", (name, scene) => {\r\n    return () => new ArcRotateCamera(name, 0, 0, 1.0, Vector3.Zero(), scene);\r\n});\r\n\r\n/**\r\n * This represents an orbital type of camera.\r\n *\r\n * This camera always points towards a given target position and can be rotated around that target with the target as the centre of rotation. It can be controlled with cursors and mouse, or with touch events.\r\n * Think of this camera as one orbiting its target position, or more imaginatively as a spy satellite orbiting the earth. Its position relative to the target (earth) can be set by three parameters, alpha (radians) the longitudinal rotation, beta (radians) the latitudinal rotation and radius the distance from the target position.\r\n * @see https://doc.babylonjs.com/features/featuresDeepDive/cameras/camera_introduction#arc-rotate-camera\r\n */\r\nexport class ArcRotateCamera extends TargetCamera {\r\n    /**\r\n     * Defines the rotation angle of the camera along the longitudinal axis.\r\n     */\r\n    @serialize()\r\n    public alpha: number;\r\n\r\n    /**\r\n     * Defines the rotation angle of the camera along the latitudinal axis.\r\n     */\r\n    @serialize()\r\n    public beta: number;\r\n\r\n    /**\r\n     * Defines the radius of the camera from it s target point.\r\n     */\r\n    @serialize()\r\n    public radius: number;\r\n\r\n    /**\r\n     * Defines an override value to use as the parameter to setTarget.\r\n     * This allows the parameter to be specified when animating the target (e.g. using FramingBehavior).\r\n     */\r\n    @serialize()\r\n    public overrideCloneAlphaBetaRadius: Nullable<boolean>;\r\n\r\n    @serializeAsVector3(\"target\")\r\n    protected _target: Vector3;\r\n    @serializeAsMeshReference(\"targetHost\")\r\n    protected _targetHost: Nullable<AbstractMesh>;\r\n\r\n    /**\r\n     * Defines the target point of the camera.\r\n     * The camera looks towards it from the radius distance.\r\n     */\r\n    public get target(): Vector3 {\r\n        return this._target;\r\n    }\r\n    public set target(value: Vector3) {\r\n        this.setTarget(value);\r\n    }\r\n\r\n    /**\r\n     * Defines the target mesh of the camera.\r\n     * The camera looks towards it from the radius distance.\r\n     * Please note that setting a target host will disable panning.\r\n     */\r\n    public get targetHost(): Nullable<AbstractMesh> {\r\n        return this._targetHost;\r\n    }\r\n    public set targetHost(value: Nullable<AbstractMesh>) {\r\n        if (value) {\r\n            this.setTarget(value);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Return the current target position of the camera. This value is expressed in local space.\r\n     * @returns the target position\r\n     */\r\n    public getTarget(): Vector3 {\r\n        return this.target;\r\n    }\r\n\r\n    /**\r\n     * Define the current local position of the camera in the scene\r\n     */\r\n    public get position(): Vector3 {\r\n        return this._position;\r\n    }\r\n\r\n    public set position(newPosition: Vector3) {\r\n        this.setPosition(newPosition);\r\n    }\r\n\r\n    protected _upToYMatrix: Matrix;\r\n    protected _yToUpMatrix: Matrix;\r\n\r\n    /**\r\n     * The vector the camera should consider as up. (default is Vector3(0, 1, 0) as returned by Vector3.Up())\r\n     * Setting this will copy the given vector to the camera's upVector, and set rotation matrices to and from Y up.\r\n     * DO NOT set the up vector using copyFrom or copyFromFloats, as this bypasses setting the above matrices.\r\n     */\r\n    set upVector(vec: Vector3) {\r\n        if (!this._upToYMatrix) {\r\n            this._yToUpMatrix = new Matrix();\r\n            this._upToYMatrix = new Matrix();\r\n\r\n            this._upVector = Vector3.Zero();\r\n        }\r\n\r\n        vec.normalize();\r\n        this._upVector.copyFrom(vec);\r\n        this.setMatUp();\r\n    }\r\n\r\n    get upVector() {\r\n        return this._upVector;\r\n    }\r\n\r\n    /**\r\n     * Sets the Y-up to camera up-vector rotation matrix, and the up-vector to Y-up rotation matrix.\r\n     */\r\n    public setMatUp() {\r\n        // from y-up to custom-up (used in _getViewMatrix)\r\n        Matrix.RotationAlignToRef(Vector3.UpReadOnly, this._upVector, this._yToUpMatrix);\r\n\r\n        // from custom-up to y-up (used in rebuildAnglesAndRadius)\r\n        Matrix.RotationAlignToRef(this._upVector, Vector3.UpReadOnly, this._upToYMatrix);\r\n    }\r\n\r\n    /**\r\n     * Current inertia value on the longitudinal axis.\r\n     * The bigger this number the longer it will take for the camera to stop.\r\n     */\r\n    @serialize()\r\n    public inertialAlphaOffset = 0;\r\n\r\n    /**\r\n     * Current inertia value on the latitudinal axis.\r\n     * The bigger this number the longer it will take for the camera to stop.\r\n     */\r\n    @serialize()\r\n    public inertialBetaOffset = 0;\r\n\r\n    /**\r\n     * Current inertia value on the radius axis.\r\n     * The bigger this number the longer it will take for the camera to stop.\r\n     */\r\n    @serialize()\r\n    public inertialRadiusOffset = 0;\r\n\r\n    /**\r\n     * Minimum allowed angle on the longitudinal axis.\r\n     * This can help limiting how the Camera is able to move in the scene.\r\n     */\r\n    @serialize()\r\n    public lowerAlphaLimit: Nullable<number> = null;\r\n\r\n    /**\r\n     * Maximum allowed angle on the longitudinal axis.\r\n     * This can help limiting how the Camera is able to move in the scene.\r\n     */\r\n    @serialize()\r\n    public upperAlphaLimit: Nullable<number> = null;\r\n\r\n    /**\r\n     * Minimum allowed angle on the latitudinal axis.\r\n     * This can help limiting how the Camera is able to move in the scene.\r\n     */\r\n    @serialize()\r\n    public lowerBetaLimit: Nullable<number> = 0.01;\r\n\r\n    /**\r\n     * Maximum allowed angle on the latitudinal axis.\r\n     * This can help limiting how the Camera is able to move in the scene.\r\n     */\r\n    @serialize()\r\n    public upperBetaLimit: Nullable<number> = Math.PI - 0.01;\r\n\r\n    /**\r\n     * Minimum allowed distance of the camera to the target (The camera can not get closer).\r\n     * This can help limiting how the Camera is able to move in the scene.\r\n     */\r\n    @serialize()\r\n    public lowerRadiusLimit: Nullable<number> = null;\r\n\r\n    /**\r\n     * Maximum allowed distance of the camera to the target (The camera can not get further).\r\n     * This can help limiting how the Camera is able to move in the scene.\r\n     */\r\n    @serialize()\r\n    public upperRadiusLimit: Nullable<number> = null;\r\n\r\n    /**\r\n     * Defines the current inertia value used during panning of the camera along the X axis.\r\n     */\r\n    @serialize()\r\n    public inertialPanningX: number = 0;\r\n\r\n    /**\r\n     * Defines the current inertia value used during panning of the camera along the Y axis.\r\n     */\r\n    @serialize()\r\n    public inertialPanningY: number = 0;\r\n\r\n    /**\r\n     * Defines the distance used to consider the camera in pan mode vs pinch/zoom.\r\n     * Basically if your fingers moves away from more than this distance you will be considered\r\n     * in pinch mode.\r\n     */\r\n    @serialize()\r\n    public pinchToPanMaxDistance: number = 20;\r\n\r\n    /**\r\n     * Defines the maximum distance the camera can pan.\r\n     * This could help keeping the camera always in your scene.\r\n     */\r\n    @serialize()\r\n    public panningDistanceLimit: Nullable<number> = null;\r\n\r\n    /**\r\n     * Defines the target of the camera before panning.\r\n     */\r\n    @serializeAsVector3()\r\n    public panningOriginTarget: Vector3 = Vector3.Zero();\r\n\r\n    /**\r\n     * Defines the value of the inertia used during panning.\r\n     * 0 would mean stop inertia and one would mean no deceleration at all.\r\n     */\r\n    @serialize()\r\n    public panningInertia = 0.9;\r\n\r\n    //-- begin properties for backward compatibility for inputs\r\n\r\n    /**\r\n     * Gets or Set the pointer angular sensibility  along the X axis or how fast is the camera rotating.\r\n     */\r\n    public get angularSensibilityX(): number {\r\n        const pointers = <ArcRotateCameraPointersInput>this.inputs.attached[\"pointers\"];\r\n        if (pointers) {\r\n            return pointers.angularSensibilityX;\r\n        }\r\n\r\n        return 0;\r\n    }\r\n\r\n    public set angularSensibilityX(value: number) {\r\n        const pointers = <ArcRotateCameraPointersInput>this.inputs.attached[\"pointers\"];\r\n        if (pointers) {\r\n            pointers.angularSensibilityX = value;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or Set the pointer angular sensibility along the Y axis or how fast is the camera rotating.\r\n     */\r\n    public get angularSensibilityY(): number {\r\n        const pointers = <ArcRotateCameraPointersInput>this.inputs.attached[\"pointers\"];\r\n        if (pointers) {\r\n            return pointers.angularSensibilityY;\r\n        }\r\n\r\n        return 0;\r\n    }\r\n\r\n    public set angularSensibilityY(value: number) {\r\n        const pointers = <ArcRotateCameraPointersInput>this.inputs.attached[\"pointers\"];\r\n        if (pointers) {\r\n            pointers.angularSensibilityY = value;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or Set the pointer pinch precision or how fast is the camera zooming.\r\n     */\r\n    public get pinchPrecision(): number {\r\n        const pointers = <ArcRotateCameraPointersInput>this.inputs.attached[\"pointers\"];\r\n        if (pointers) {\r\n            return pointers.pinchPrecision;\r\n        }\r\n\r\n        return 0;\r\n    }\r\n\r\n    public set pinchPrecision(value: number) {\r\n        const pointers = <ArcRotateCameraPointersInput>this.inputs.attached[\"pointers\"];\r\n        if (pointers) {\r\n            pointers.pinchPrecision = value;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or Set the pointer pinch delta percentage or how fast is the camera zooming.\r\n     * It will be used instead of pinchDeltaPrecision if different from 0.\r\n     * It defines the percentage of current camera.radius to use as delta when pinch zoom is used.\r\n     */\r\n    public get pinchDeltaPercentage(): number {\r\n        const pointers = <ArcRotateCameraPointersInput>this.inputs.attached[\"pointers\"];\r\n        if (pointers) {\r\n            return pointers.pinchDeltaPercentage;\r\n        }\r\n\r\n        return 0;\r\n    }\r\n\r\n    public set pinchDeltaPercentage(value: number) {\r\n        const pointers = <ArcRotateCameraPointersInput>this.inputs.attached[\"pointers\"];\r\n        if (pointers) {\r\n            pointers.pinchDeltaPercentage = value;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or Set the pointer use natural pinch zoom to override the pinch precision\r\n     * and pinch delta percentage.\r\n     * When useNaturalPinchZoom is true, multi touch zoom will zoom in such\r\n     * that any object in the plane at the camera's target point will scale\r\n     * perfectly with finger motion.\r\n     */\r\n    public get useNaturalPinchZoom(): boolean {\r\n        const pointers = <ArcRotateCameraPointersInput>this.inputs.attached[\"pointers\"];\r\n        if (pointers) {\r\n            return pointers.useNaturalPinchZoom;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    public set useNaturalPinchZoom(value: boolean) {\r\n        const pointers = <ArcRotateCameraPointersInput>this.inputs.attached[\"pointers\"];\r\n        if (pointers) {\r\n            pointers.useNaturalPinchZoom = value;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or Set the pointer panning sensibility or how fast is the camera moving.\r\n     */\r\n    public get panningSensibility(): number {\r\n        const pointers = <ArcRotateCameraPointersInput>this.inputs.attached[\"pointers\"];\r\n        if (pointers) {\r\n            return pointers.panningSensibility;\r\n        }\r\n\r\n        return 0;\r\n    }\r\n\r\n    public set panningSensibility(value: number) {\r\n        const pointers = <ArcRotateCameraPointersInput>this.inputs.attached[\"pointers\"];\r\n        if (pointers) {\r\n            pointers.panningSensibility = value;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or Set the list of keyboard keys used to control beta angle in a positive direction.\r\n     */\r\n    public get keysUp(): number[] {\r\n        const keyboard = <ArcRotateCameraKeyboardMoveInput>this.inputs.attached[\"keyboard\"];\r\n        if (keyboard) {\r\n            return keyboard.keysUp;\r\n        }\r\n\r\n        return [];\r\n    }\r\n\r\n    public set keysUp(value: number[]) {\r\n        const keyboard = <ArcRotateCameraKeyboardMoveInput>this.inputs.attached[\"keyboard\"];\r\n        if (keyboard) {\r\n            keyboard.keysUp = value;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or Set the list of keyboard keys used to control beta angle in a negative direction.\r\n     */\r\n    public get keysDown(): number[] {\r\n        const keyboard = <ArcRotateCameraKeyboardMoveInput>this.inputs.attached[\"keyboard\"];\r\n        if (keyboard) {\r\n            return keyboard.keysDown;\r\n        }\r\n\r\n        return [];\r\n    }\r\n\r\n    public set keysDown(value: number[]) {\r\n        const keyboard = <ArcRotateCameraKeyboardMoveInput>this.inputs.attached[\"keyboard\"];\r\n        if (keyboard) {\r\n            keyboard.keysDown = value;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or Set the list of keyboard keys used to control alpha angle in a negative direction.\r\n     */\r\n    public get keysLeft(): number[] {\r\n        const keyboard = <ArcRotateCameraKeyboardMoveInput>this.inputs.attached[\"keyboard\"];\r\n        if (keyboard) {\r\n            return keyboard.keysLeft;\r\n        }\r\n\r\n        return [];\r\n    }\r\n\r\n    public set keysLeft(value: number[]) {\r\n        const keyboard = <ArcRotateCameraKeyboardMoveInput>this.inputs.attached[\"keyboard\"];\r\n        if (keyboard) {\r\n            keyboard.keysLeft = value;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or Set the list of keyboard keys used to control alpha angle in a positive direction.\r\n     */\r\n    public get keysRight(): number[] {\r\n        const keyboard = <ArcRotateCameraKeyboardMoveInput>this.inputs.attached[\"keyboard\"];\r\n        if (keyboard) {\r\n            return keyboard.keysRight;\r\n        }\r\n\r\n        return [];\r\n    }\r\n\r\n    public set keysRight(value: number[]) {\r\n        const keyboard = <ArcRotateCameraKeyboardMoveInput>this.inputs.attached[\"keyboard\"];\r\n        if (keyboard) {\r\n            keyboard.keysRight = value;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or Set the mouse wheel precision or how fast is the camera zooming.\r\n     */\r\n    public get wheelPrecision(): number {\r\n        const mousewheel = <ArcRotateCameraMouseWheelInput>this.inputs.attached[\"mousewheel\"];\r\n        if (mousewheel) {\r\n            return mousewheel.wheelPrecision;\r\n        }\r\n\r\n        return 0;\r\n    }\r\n\r\n    public set wheelPrecision(value: number) {\r\n        const mousewheel = <ArcRotateCameraMouseWheelInput>this.inputs.attached[\"mousewheel\"];\r\n        if (mousewheel) {\r\n            mousewheel.wheelPrecision = value;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or Set the boolean value that controls whether or not the mouse wheel\r\n     * zooms to the location of the mouse pointer or not.  The default is false.\r\n     */\r\n    @serialize()\r\n    public get zoomToMouseLocation(): boolean {\r\n        const mousewheel = <ArcRotateCameraMouseWheelInput>this.inputs.attached[\"mousewheel\"];\r\n        if (mousewheel) {\r\n            return mousewheel.zoomToMouseLocation;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    public set zoomToMouseLocation(value: boolean) {\r\n        const mousewheel = <ArcRotateCameraMouseWheelInput>this.inputs.attached[\"mousewheel\"];\r\n        if (mousewheel) {\r\n            mousewheel.zoomToMouseLocation = value;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or Set the mouse wheel delta percentage or how fast is the camera zooming.\r\n     * It will be used instead of pinchDeltaPrecision if different from 0.\r\n     * It defines the percentage of current camera.radius to use as delta when pinch zoom is used.\r\n     */\r\n    public get wheelDeltaPercentage(): number {\r\n        const mousewheel = <ArcRotateCameraMouseWheelInput>this.inputs.attached[\"mousewheel\"];\r\n        if (mousewheel) {\r\n            return mousewheel.wheelDeltaPercentage;\r\n        }\r\n\r\n        return 0;\r\n    }\r\n\r\n    public set wheelDeltaPercentage(value: number) {\r\n        const mousewheel = <ArcRotateCameraMouseWheelInput>this.inputs.attached[\"mousewheel\"];\r\n        if (mousewheel) {\r\n            mousewheel.wheelDeltaPercentage = value;\r\n        }\r\n    }\r\n\r\n    //-- end properties for backward compatibility for inputs\r\n\r\n    /**\r\n     * Defines how much the radius should be scaled while zooming on a particular mesh (through the zoomOn function)\r\n     */\r\n    @serialize()\r\n    public zoomOnFactor = 1;\r\n\r\n    /**\r\n     * Defines a screen offset for the camera position.\r\n     */\r\n    @serializeAsVector2()\r\n    public targetScreenOffset = Vector2.Zero();\r\n\r\n    /**\r\n     * Allows the camera to be completely reversed.\r\n     * If false the camera can not arrive upside down.\r\n     */\r\n    @serialize()\r\n    public allowUpsideDown = true;\r\n\r\n    /**\r\n     * Define if double tap/click is used to restore the previously saved state of the camera.\r\n     */\r\n    @serialize()\r\n    public useInputToRestoreState = true;\r\n\r\n    /** @internal */\r\n    public _viewMatrix = new Matrix();\r\n    /** @internal */\r\n    public _useCtrlForPanning: boolean;\r\n    /** @internal */\r\n    public _panningMouseButton: number;\r\n\r\n    /**\r\n     * Defines the input associated to the camera.\r\n     */\r\n    public inputs: ArcRotateCameraInputsManager;\r\n\r\n    /** @internal */\r\n    public _reset: () => void;\r\n\r\n    /**\r\n     * Defines the allowed panning axis.\r\n     */\r\n    public panningAxis: Vector3 = new Vector3(1, 1, 0);\r\n    protected _transformedDirection: Vector3 = new Vector3();\r\n\r\n    /**\r\n     * Defines if camera will eliminate transform on y axis.\r\n     */\r\n    public mapPanning: boolean = false;\r\n\r\n    // Behaviors\r\n    private _bouncingBehavior: Nullable<BouncingBehavior>;\r\n\r\n    /**\r\n     * Gets the bouncing behavior of the camera if it has been enabled.\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/behaviors/cameraBehaviors#bouncing-behavior\r\n     */\r\n    public get bouncingBehavior(): Nullable<BouncingBehavior> {\r\n        return this._bouncingBehavior;\r\n    }\r\n\r\n    /**\r\n     * Defines if the bouncing behavior of the camera is enabled on the camera.\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/behaviors/cameraBehaviors#bouncing-behavior\r\n     */\r\n    public get useBouncingBehavior(): boolean {\r\n        return this._bouncingBehavior != null;\r\n    }\r\n\r\n    public set useBouncingBehavior(value: boolean) {\r\n        if (value === this.useBouncingBehavior) {\r\n            return;\r\n        }\r\n\r\n        if (value) {\r\n            this._bouncingBehavior = new BouncingBehavior();\r\n            this.addBehavior(this._bouncingBehavior);\r\n        } else if (this._bouncingBehavior) {\r\n            this.removeBehavior(this._bouncingBehavior);\r\n            this._bouncingBehavior = null;\r\n        }\r\n    }\r\n\r\n    private _framingBehavior: Nullable<FramingBehavior>;\r\n\r\n    /**\r\n     * Gets the framing behavior of the camera if it has been enabled.\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/behaviors/cameraBehaviors#framing-behavior\r\n     */\r\n    public get framingBehavior(): Nullable<FramingBehavior> {\r\n        return this._framingBehavior;\r\n    }\r\n\r\n    /**\r\n     * Defines if the framing behavior of the camera is enabled on the camera.\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/behaviors/cameraBehaviors#framing-behavior\r\n     */\r\n    public get useFramingBehavior(): boolean {\r\n        return this._framingBehavior != null;\r\n    }\r\n\r\n    public set useFramingBehavior(value: boolean) {\r\n        if (value === this.useFramingBehavior) {\r\n            return;\r\n        }\r\n\r\n        if (value) {\r\n            this._framingBehavior = new FramingBehavior();\r\n            this.addBehavior(this._framingBehavior);\r\n        } else if (this._framingBehavior) {\r\n            this.removeBehavior(this._framingBehavior);\r\n            this._framingBehavior = null;\r\n        }\r\n    }\r\n\r\n    private _autoRotationBehavior: Nullable<AutoRotationBehavior>;\r\n\r\n    /**\r\n     * Gets the auto rotation behavior of the camera if it has been enabled.\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/behaviors/cameraBehaviors#autorotation-behavior\r\n     */\r\n    public get autoRotationBehavior(): Nullable<AutoRotationBehavior> {\r\n        return this._autoRotationBehavior;\r\n    }\r\n\r\n    /**\r\n     * Defines if the auto rotation behavior of the camera is enabled on the camera.\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/behaviors/cameraBehaviors#autorotation-behavior\r\n     */\r\n    public get useAutoRotationBehavior(): boolean {\r\n        return this._autoRotationBehavior != null;\r\n    }\r\n\r\n    public set useAutoRotationBehavior(value: boolean) {\r\n        if (value === this.useAutoRotationBehavior) {\r\n            return;\r\n        }\r\n\r\n        if (value) {\r\n            this._autoRotationBehavior = new AutoRotationBehavior();\r\n            this.addBehavior(this._autoRotationBehavior);\r\n        } else if (this._autoRotationBehavior) {\r\n            this.removeBehavior(this._autoRotationBehavior);\r\n            this._autoRotationBehavior = null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Observable triggered when the mesh target has been changed on the camera.\r\n     */\r\n    public onMeshTargetChangedObservable = new Observable<Nullable<AbstractMesh>>();\r\n\r\n    /**\r\n     * Event raised when the camera is colliding with a mesh.\r\n     */\r\n    public onCollide: (collidedMesh: AbstractMesh) => void;\r\n\r\n    /**\r\n     * Defines whether the camera should check collision with the objects oh the scene.\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/cameras/camera_collisions#how-can-i-do-this-\r\n     */\r\n    public checkCollisions = false;\r\n\r\n    /**\r\n     * Defines the collision radius of the camera.\r\n     * This simulates a sphere around the camera.\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/cameras/camera_collisions#arcrotatecamera\r\n     */\r\n    public collisionRadius = new Vector3(0.5, 0.5, 0.5);\r\n\r\n    protected _collider: Collider;\r\n    protected _previousPosition = Vector3.Zero();\r\n    protected _collisionVelocity = Vector3.Zero();\r\n    protected _newPosition = Vector3.Zero();\r\n    protected _previousAlpha: number;\r\n    protected _previousBeta: number;\r\n    protected _previousRadius: number;\r\n    //due to async collision inspection\r\n    protected _collisionTriggered: boolean;\r\n\r\n    protected _targetBoundingCenter: Nullable<Vector3>;\r\n\r\n    private _computationVector: Vector3 = Vector3.Zero();\r\n\r\n    /**\r\n     * Instantiates a new ArcRotateCamera in a given scene\r\n     * @param name Defines the name of the camera\r\n     * @param alpha Defines the camera rotation along the longitudinal axis\r\n     * @param beta Defines the camera rotation along the latitudinal axis\r\n     * @param radius Defines the camera distance from its target\r\n     * @param target Defines the camera target\r\n     * @param scene Defines the scene the camera belongs to\r\n     * @param setActiveOnSceneIfNoneActive Defines whether the camera should be marked as active if not other active cameras have been defined\r\n     */\r\n    constructor(name: string, alpha: number, beta: number, radius: number, target: Vector3, scene?: Scene, setActiveOnSceneIfNoneActive = true) {\r\n        super(name, Vector3.Zero(), scene, setActiveOnSceneIfNoneActive);\r\n\r\n        this._target = Vector3.Zero();\r\n        if (target) {\r\n            this.setTarget(target);\r\n        }\r\n\r\n        this.alpha = alpha;\r\n        this.beta = beta;\r\n        this.radius = radius;\r\n\r\n        this.getViewMatrix();\r\n        this.inputs = new ArcRotateCameraInputsManager(this);\r\n        this.inputs.addKeyboard().addMouseWheel().addPointers();\r\n    }\r\n\r\n    // Cache\r\n    /** @internal */\r\n    public _initCache(): void {\r\n        super._initCache();\r\n        this._cache._target = new Vector3(Number.MAX_VALUE, Number.MAX_VALUE, Number.MAX_VALUE);\r\n        this._cache.alpha = undefined;\r\n        this._cache.beta = undefined;\r\n        this._cache.radius = undefined;\r\n        this._cache.targetScreenOffset = Vector2.Zero();\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _updateCache(ignoreParentClass?: boolean): void {\r\n        if (!ignoreParentClass) {\r\n            super._updateCache();\r\n        }\r\n\r\n        this._cache._target.copyFrom(this._getTargetPosition());\r\n        this._cache.alpha = this.alpha;\r\n        this._cache.beta = this.beta;\r\n        this._cache.radius = this.radius;\r\n        this._cache.targetScreenOffset.copyFrom(this.targetScreenOffset);\r\n    }\r\n\r\n    protected _getTargetPosition(): Vector3 {\r\n        if (this._targetHost && this._targetHost.getAbsolutePosition) {\r\n            const pos: Vector3 = this._targetHost.getAbsolutePosition();\r\n            if (this._targetBoundingCenter) {\r\n                pos.addToRef(this._targetBoundingCenter, this._target);\r\n            } else {\r\n                this._target.copyFrom(pos);\r\n            }\r\n        }\r\n\r\n        const lockedTargetPosition = this._getLockedTargetPosition();\r\n\r\n        if (lockedTargetPosition) {\r\n            return lockedTargetPosition;\r\n        }\r\n\r\n        return this._target;\r\n    }\r\n\r\n    private _storedAlpha: number;\r\n    private _storedBeta: number;\r\n    private _storedRadius: number;\r\n    private _storedTarget: Vector3;\r\n    private _storedTargetScreenOffset: Vector2;\r\n\r\n    /**\r\n     * Stores the current state of the camera (alpha, beta, radius and target)\r\n     * @returns the camera itself\r\n     */\r\n    public storeState(): Camera {\r\n        this._storedAlpha = this.alpha;\r\n        this._storedBeta = this.beta;\r\n        this._storedRadius = this.radius;\r\n        this._storedTarget = this._getTargetPosition().clone();\r\n        this._storedTargetScreenOffset = this.targetScreenOffset.clone();\r\n\r\n        return super.storeState();\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * Restored camera state. You must call storeState() first\r\n     */\r\n    public _restoreStateValues(): boolean {\r\n        if (!super._restoreStateValues()) {\r\n            return false;\r\n        }\r\n\r\n        this.setTarget(this._storedTarget.clone());\r\n        this.alpha = this._storedAlpha;\r\n        this.beta = this._storedBeta;\r\n        this.radius = this._storedRadius;\r\n        this.targetScreenOffset = this._storedTargetScreenOffset.clone();\r\n\r\n        this.inertialAlphaOffset = 0;\r\n        this.inertialBetaOffset = 0;\r\n        this.inertialRadiusOffset = 0;\r\n        this.inertialPanningX = 0;\r\n        this.inertialPanningY = 0;\r\n\r\n        return true;\r\n    }\r\n\r\n    // Synchronized\r\n    /** @internal */\r\n    public _isSynchronizedViewMatrix(): boolean {\r\n        if (!super._isSynchronizedViewMatrix()) {\r\n            return false;\r\n        }\r\n\r\n        return (\r\n            this._cache._target.equals(this._getTargetPosition()) &&\r\n            this._cache.alpha === this.alpha &&\r\n            this._cache.beta === this.beta &&\r\n            this._cache.radius === this.radius &&\r\n            this._cache.targetScreenOffset.equals(this.targetScreenOffset)\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Attach the input controls to a specific dom element to get the input from.\r\n     * @param noPreventDefault Defines whether event caught by the controls should call preventdefault() (https://developer.mozilla.org/en-US/docs/Web/API/Event/preventDefault)\r\n     */\r\n    public attachControl(noPreventDefault?: boolean): void;\r\n    /**\r\n     * Attach the input controls to a specific dom element to get the input from.\r\n     * @param ignored defines an ignored parameter kept for backward compatibility.\r\n     * @param noPreventDefault Defines whether event caught by the controls should call preventdefault() (https://developer.mozilla.org/en-US/docs/Web/API/Event/preventDefault)\r\n     */\r\n    public attachControl(ignored: any, noPreventDefault?: boolean): void;\r\n    /**\r\n     * Attached controls to the current camera.\r\n     * @param noPreventDefault Defines whether event caught by the controls should call preventdefault() (https://developer.mozilla.org/en-US/docs/Web/API/Event/preventDefault)\r\n     * @param useCtrlForPanning  Defines whether ctrl is used for panning within the controls\r\n     */\r\n    public attachControl(noPreventDefault: boolean, useCtrlForPanning: boolean): void;\r\n    /**\r\n     * Attached controls to the current camera.\r\n     * @param ignored defines an ignored parameter kept for backward compatibility.\r\n     * @param noPreventDefault Defines whether event caught by the controls should call preventdefault() (https://developer.mozilla.org/en-US/docs/Web/API/Event/preventDefault)\r\n     * @param useCtrlForPanning  Defines whether ctrl is used for panning within the controls\r\n     */\r\n    public attachControl(ignored: any, noPreventDefault: boolean, useCtrlForPanning: boolean): void;\r\n    /**\r\n     * Attached controls to the current camera.\r\n     * @param noPreventDefault Defines whether event caught by the controls should call preventdefault() (https://developer.mozilla.org/en-US/docs/Web/API/Event/preventDefault)\r\n     * @param useCtrlForPanning  Defines whether ctrl is used for panning within the controls\r\n     * @param panningMouseButton Defines whether panning is allowed through mouse click button\r\n     */\r\n    public attachControl(noPreventDefault: boolean, useCtrlForPanning: boolean, panningMouseButton: number): void;\r\n    /**\r\n     * Attached controls to the current camera.\r\n     * @param ignored defines an ignored parameter kept for backward compatibility.\r\n     * @param noPreventDefault Defines whether event caught by the controls should call preventdefault() (https://developer.mozilla.org/en-US/docs/Web/API/Event/preventDefault)\r\n     * @param useCtrlForPanning  Defines whether ctrl is used for panning within the controls\r\n     * @param panningMouseButton Defines whether panning is allowed through mouse click button\r\n     */\r\n    public attachControl(ignored: any, noPreventDefault?: boolean, useCtrlForPanning: boolean | number = true, panningMouseButton: number = 2): void {\r\n        // eslint-disable-next-line prefer-rest-params\r\n        const args = arguments;\r\n\r\n        noPreventDefault = Tools.BackCompatCameraNoPreventDefault(args);\r\n        this._useCtrlForPanning = useCtrlForPanning as boolean;\r\n        this._panningMouseButton = panningMouseButton;\r\n        // backwards compatibility\r\n        if (typeof args[0] === \"boolean\") {\r\n            if (args.length > 1) {\r\n                this._useCtrlForPanning = args[1];\r\n            }\r\n            if (args.length > 2) {\r\n                this._panningMouseButton = args[2];\r\n            }\r\n        }\r\n\r\n        this.inputs.attachElement(noPreventDefault);\r\n\r\n        this._reset = () => {\r\n            this.inertialAlphaOffset = 0;\r\n            this.inertialBetaOffset = 0;\r\n            this.inertialRadiusOffset = 0;\r\n            this.inertialPanningX = 0;\r\n            this.inertialPanningY = 0;\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Detach the current controls from the specified dom element.\r\n     */\r\n    public detachControl(): void {\r\n        this.inputs.detachElement();\r\n\r\n        if (this._reset) {\r\n            this._reset();\r\n        }\r\n    }\r\n\r\n    /** @internal */\r\n    public _checkInputs(): void {\r\n        //if (async) collision inspection was triggered, don't update the camera's position - until the collision callback was called.\r\n        if (this._collisionTriggered) {\r\n            return;\r\n        }\r\n\r\n        this.inputs.checkInputs();\r\n        // Inertia\r\n        if (this.inertialAlphaOffset !== 0 || this.inertialBetaOffset !== 0 || this.inertialRadiusOffset !== 0) {\r\n            const directionModifier = this.invertRotation ? -1 : 1;\r\n            const handednessMultiplier = this._calculateHandednessMultiplier();\r\n            let inertialAlphaOffset = this.inertialAlphaOffset * handednessMultiplier;\r\n\r\n            if (this.beta <= 0) {\r\n                inertialAlphaOffset *= -1;\r\n            }\r\n\r\n            this.alpha += inertialAlphaOffset * directionModifier;\r\n            this.beta += this.inertialBetaOffset * directionModifier;\r\n\r\n            this.radius -= this.inertialRadiusOffset;\r\n            this.inertialAlphaOffset *= this.inertia;\r\n            this.inertialBetaOffset *= this.inertia;\r\n            this.inertialRadiusOffset *= this.inertia;\r\n            if (Math.abs(this.inertialAlphaOffset) < Epsilon) {\r\n                this.inertialAlphaOffset = 0;\r\n            }\r\n            if (Math.abs(this.inertialBetaOffset) < Epsilon) {\r\n                this.inertialBetaOffset = 0;\r\n            }\r\n            if (Math.abs(this.inertialRadiusOffset) < this.speed * Epsilon) {\r\n                this.inertialRadiusOffset = 0;\r\n            }\r\n        }\r\n\r\n        // Panning inertia\r\n        if (this.inertialPanningX !== 0 || this.inertialPanningY !== 0) {\r\n            const localDirection = new Vector3(this.inertialPanningX, this.inertialPanningY, this.inertialPanningY);\r\n\r\n            this._viewMatrix.invertToRef(this._cameraTransformMatrix);\r\n            localDirection.multiplyInPlace(this.panningAxis);\r\n            Vector3.TransformNormalToRef(localDirection, this._cameraTransformMatrix, this._transformedDirection);\r\n\r\n            // If mapPanning is enabled, we need to take the upVector into account and\r\n            // make sure we're not panning in the y direction\r\n            if (this.mapPanning) {\r\n                const up = this.upVector;\r\n                const right = Vector3.CrossToRef(this._transformedDirection, up, this._transformedDirection);\r\n                Vector3.CrossToRef(up, right, this._transformedDirection);\r\n            } else if (!this.panningAxis.y) {\r\n                this._transformedDirection.y = 0;\r\n            }\r\n\r\n            if (!this._targetHost) {\r\n                if (this.panningDistanceLimit) {\r\n                    this._transformedDirection.addInPlace(this._target);\r\n                    const distanceSquared = Vector3.DistanceSquared(this._transformedDirection, this.panningOriginTarget);\r\n                    if (distanceSquared <= this.panningDistanceLimit * this.panningDistanceLimit) {\r\n                        this._target.copyFrom(this._transformedDirection);\r\n                    }\r\n                } else {\r\n                    this._target.addInPlace(this._transformedDirection);\r\n                }\r\n            }\r\n\r\n            this.inertialPanningX *= this.panningInertia;\r\n            this.inertialPanningY *= this.panningInertia;\r\n\r\n            if (Math.abs(this.inertialPanningX) < this.speed * Epsilon) {\r\n                this.inertialPanningX = 0;\r\n            }\r\n            if (Math.abs(this.inertialPanningY) < this.speed * Epsilon) {\r\n                this.inertialPanningY = 0;\r\n            }\r\n        }\r\n\r\n        // Limits\r\n        this._checkLimits();\r\n\r\n        super._checkInputs();\r\n    }\r\n\r\n    protected _checkLimits() {\r\n        if (this.lowerBetaLimit === null || this.lowerBetaLimit === undefined) {\r\n            if (this.allowUpsideDown && this.beta > Math.PI) {\r\n                this.beta = this.beta - 2 * Math.PI;\r\n            }\r\n        } else {\r\n            if (this.beta < this.lowerBetaLimit) {\r\n                this.beta = this.lowerBetaLimit;\r\n            }\r\n        }\r\n\r\n        if (this.upperBetaLimit === null || this.upperBetaLimit === undefined) {\r\n            if (this.allowUpsideDown && this.beta < -Math.PI) {\r\n                this.beta = this.beta + 2 * Math.PI;\r\n            }\r\n        } else {\r\n            if (this.beta > this.upperBetaLimit) {\r\n                this.beta = this.upperBetaLimit;\r\n            }\r\n        }\r\n\r\n        if (this.lowerAlphaLimit !== null && this.alpha < this.lowerAlphaLimit) {\r\n            this.alpha = this.lowerAlphaLimit;\r\n        }\r\n        if (this.upperAlphaLimit !== null && this.alpha > this.upperAlphaLimit) {\r\n            this.alpha = this.upperAlphaLimit;\r\n        }\r\n\r\n        if (this.lowerRadiusLimit !== null && this.radius < this.lowerRadiusLimit) {\r\n            this.radius = this.lowerRadiusLimit;\r\n            this.inertialRadiusOffset = 0;\r\n        }\r\n        if (this.upperRadiusLimit !== null && this.radius > this.upperRadiusLimit) {\r\n            this.radius = this.upperRadiusLimit;\r\n            this.inertialRadiusOffset = 0;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Rebuilds angles (alpha, beta) and radius from the give position and target\r\n     */\r\n    public rebuildAnglesAndRadius(): void {\r\n        this._position.subtractToRef(this._getTargetPosition(), this._computationVector);\r\n\r\n        // need to rotate to Y up equivalent if up vector not Axis.Y\r\n        if (this._upVector.x !== 0 || this._upVector.y !== 1.0 || this._upVector.z !== 0) {\r\n            Vector3.TransformCoordinatesToRef(this._computationVector, this._upToYMatrix, this._computationVector);\r\n        }\r\n\r\n        this.radius = this._computationVector.length();\r\n\r\n        if (this.radius === 0) {\r\n            this.radius = 0.0001; // Just to avoid division by zero\r\n        }\r\n\r\n        // Alpha\r\n        const previousAlpha = this.alpha;\r\n        if (this._computationVector.x === 0 && this._computationVector.z === 0) {\r\n            this.alpha = Math.PI / 2; // avoid division by zero when looking along up axis, and set to acos(0)\r\n        } else {\r\n            this.alpha = Math.acos(this._computationVector.x / Math.sqrt(Math.pow(this._computationVector.x, 2) + Math.pow(this._computationVector.z, 2)));\r\n        }\r\n\r\n        if (this._computationVector.z < 0) {\r\n            this.alpha = 2 * Math.PI - this.alpha;\r\n        }\r\n\r\n        // Calculate the number of revolutions between the new and old alpha values.\r\n        const alphaCorrectionTurns = Math.round((previousAlpha - this.alpha) / (2.0 * Math.PI));\r\n        // Adjust alpha so that its numerical representation is the closest one to the old value.\r\n        this.alpha += alphaCorrectionTurns * 2.0 * Math.PI;\r\n\r\n        // Beta\r\n        this.beta = Math.acos(this._computationVector.y / this.radius);\r\n\r\n        this._checkLimits();\r\n    }\r\n\r\n    /**\r\n     * Use a position to define the current camera related information like alpha, beta and radius\r\n     * @param position Defines the position to set the camera at\r\n     */\r\n    public setPosition(position: Vector3): void {\r\n        if (this._position.equals(position)) {\r\n            return;\r\n        }\r\n        this._position.copyFrom(position);\r\n\r\n        this.rebuildAnglesAndRadius();\r\n    }\r\n\r\n    /**\r\n     * Defines the target the camera should look at.\r\n     * This will automatically adapt alpha beta and radius to fit within the new target.\r\n     * Please note that setting a target as a mesh will disable panning.\r\n     * @param target Defines the new target as a Vector or a mesh\r\n     * @param toBoundingCenter In case of a mesh target, defines whether to target the mesh position or its bounding information center\r\n     * @param allowSamePosition If false, prevents reapplying the new computed position if it is identical to the current one (optim)\r\n     * @param cloneAlphaBetaRadius If true, replicate the current setup (alpha, beta, radius) on the new target\r\n     */\r\n    public setTarget(target: AbstractMesh | Vector3, toBoundingCenter = false, allowSamePosition = false, cloneAlphaBetaRadius = false): void {\r\n        cloneAlphaBetaRadius = this.overrideCloneAlphaBetaRadius ?? cloneAlphaBetaRadius;\r\n\r\n        if ((<any>target).getBoundingInfo) {\r\n            if (toBoundingCenter) {\r\n                this._targetBoundingCenter = (<any>target).getBoundingInfo().boundingBox.centerWorld.clone();\r\n            } else {\r\n                this._targetBoundingCenter = null;\r\n            }\r\n            (<AbstractMesh>target).computeWorldMatrix();\r\n            this._targetHost = <AbstractMesh>target;\r\n            this._target = this._getTargetPosition();\r\n\r\n            this.onMeshTargetChangedObservable.notifyObservers(this._targetHost);\r\n        } else {\r\n            const newTarget = <Vector3>target;\r\n            const currentTarget = this._getTargetPosition();\r\n            if (currentTarget && !allowSamePosition && currentTarget.equals(newTarget)) {\r\n                return;\r\n            }\r\n            this._targetHost = null;\r\n            this._target = newTarget;\r\n            this._targetBoundingCenter = null;\r\n            this.onMeshTargetChangedObservable.notifyObservers(null);\r\n        }\r\n\r\n        if (!cloneAlphaBetaRadius) {\r\n            this.rebuildAnglesAndRadius();\r\n        }\r\n    }\r\n\r\n    /** @internal */\r\n    public _getViewMatrix(): Matrix {\r\n        // Compute\r\n        const cosa = Math.cos(this.alpha);\r\n        const sina = Math.sin(this.alpha);\r\n        const cosb = Math.cos(this.beta);\r\n        let sinb = Math.sin(this.beta);\r\n\r\n        if (sinb === 0) {\r\n            sinb = 0.0001;\r\n        }\r\n\r\n        if (this.radius === 0) {\r\n            this.radius = 0.0001; // Just to avoid division by zero\r\n        }\r\n\r\n        const target = this._getTargetPosition();\r\n        this._computationVector.copyFromFloats(this.radius * cosa * sinb, this.radius * cosb, this.radius * sina * sinb);\r\n\r\n        // Rotate according to up vector\r\n        if (this._upVector.x !== 0 || this._upVector.y !== 1.0 || this._upVector.z !== 0) {\r\n            Vector3.TransformCoordinatesToRef(this._computationVector, this._yToUpMatrix, this._computationVector);\r\n        }\r\n\r\n        target.addToRef(this._computationVector, this._newPosition);\r\n        if (this.getScene().collisionsEnabled && this.checkCollisions) {\r\n            const coordinator = this.getScene().collisionCoordinator;\r\n            if (!this._collider) {\r\n                this._collider = coordinator.createCollider();\r\n            }\r\n            this._collider._radius = this.collisionRadius;\r\n            this._newPosition.subtractToRef(this._position, this._collisionVelocity);\r\n            this._collisionTriggered = true;\r\n            coordinator.getNewPosition(this._position, this._collisionVelocity, this._collider, 3, null, this._onCollisionPositionChange, this.uniqueId);\r\n        } else {\r\n            this._position.copyFrom(this._newPosition);\r\n\r\n            let up = this.upVector;\r\n            if (this.allowUpsideDown && sinb < 0) {\r\n                up = up.negate();\r\n            }\r\n\r\n            this._computeViewMatrix(this._position, target, up);\r\n\r\n            this._viewMatrix.addAtIndex(12, this.targetScreenOffset.x);\r\n            this._viewMatrix.addAtIndex(13, this.targetScreenOffset.y);\r\n        }\r\n        this._currentTarget = target;\r\n        return this._viewMatrix;\r\n    }\r\n\r\n    protected _onCollisionPositionChange = (collisionId: number, newPosition: Vector3, collidedMesh: Nullable<AbstractMesh> = null) => {\r\n        if (!collidedMesh) {\r\n            this._previousPosition.copyFrom(this._position);\r\n        } else {\r\n            this.setPosition(newPosition);\r\n\r\n            if (this.onCollide) {\r\n                this.onCollide(collidedMesh);\r\n            }\r\n        }\r\n\r\n        // Recompute because of constraints\r\n        const cosa = Math.cos(this.alpha);\r\n        const sina = Math.sin(this.alpha);\r\n        const cosb = Math.cos(this.beta);\r\n        let sinb = Math.sin(this.beta);\r\n\r\n        if (sinb === 0) {\r\n            sinb = 0.0001;\r\n        }\r\n\r\n        const target = this._getTargetPosition();\r\n        this._computationVector.copyFromFloats(this.radius * cosa * sinb, this.radius * cosb, this.radius * sina * sinb);\r\n        target.addToRef(this._computationVector, this._newPosition);\r\n        this._position.copyFrom(this._newPosition);\r\n\r\n        let up = this.upVector;\r\n        if (this.allowUpsideDown && this.beta < 0) {\r\n            up = up.clone();\r\n            up = up.negate();\r\n        }\r\n\r\n        this._computeViewMatrix(this._position, target, up);\r\n        this._viewMatrix.addAtIndex(12, this.targetScreenOffset.x);\r\n        this._viewMatrix.addAtIndex(13, this.targetScreenOffset.y);\r\n\r\n        this._collisionTriggered = false;\r\n    };\r\n\r\n    /**\r\n     * Zooms on a mesh to be at the min distance where we could see it fully in the current viewport.\r\n     * @param meshes Defines the mesh to zoom on\r\n     * @param doNotUpdateMaxZ Defines whether or not maxZ should be updated whilst zooming on the mesh (this can happen if the mesh is big and the maxradius pretty small for instance)\r\n     */\r\n    public zoomOn(meshes?: AbstractMesh[], doNotUpdateMaxZ = false): void {\r\n        meshes = meshes || this.getScene().meshes;\r\n\r\n        const minMaxVector = Mesh.MinMax(meshes);\r\n        let distance = this._calculateLowerRadiusFromModelBoundingSphere(minMaxVector.min, minMaxVector.max);\r\n\r\n        // If there are defined limits, we need to take them into account\r\n        distance = Math.max(Math.min(distance, this.upperRadiusLimit || Number.MAX_VALUE), this.lowerRadiusLimit || 0);\r\n        this.radius = distance * this.zoomOnFactor;\r\n\r\n        this.focusOn({ min: minMaxVector.min, max: minMaxVector.max, distance: distance }, doNotUpdateMaxZ);\r\n    }\r\n\r\n    /**\r\n     * Focus on a mesh or a bounding box. This adapts the target and maxRadius if necessary but does not update the current radius.\r\n     * The target will be changed but the radius\r\n     * @param meshesOrMinMaxVectorAndDistance Defines the mesh or bounding info to focus on\r\n     * @param doNotUpdateMaxZ Defines whether or not maxZ should be updated whilst zooming on the mesh (this can happen if the mesh is big and the maxradius pretty small for instance)\r\n     */\r\n    public focusOn(meshesOrMinMaxVectorAndDistance: AbstractMesh[] | { min: Vector3; max: Vector3; distance: number }, doNotUpdateMaxZ = false): void {\r\n        let meshesOrMinMaxVector: { min: Vector3; max: Vector3 };\r\n        let distance: number;\r\n\r\n        if ((<any>meshesOrMinMaxVectorAndDistance).min === undefined) {\r\n            // meshes\r\n            const meshes = <AbstractMesh[]>meshesOrMinMaxVectorAndDistance || this.getScene().meshes;\r\n            meshesOrMinMaxVector = Mesh.MinMax(meshes);\r\n            distance = Vector3.Distance(meshesOrMinMaxVector.min, meshesOrMinMaxVector.max);\r\n        } else {\r\n            //minMaxVector and distance\r\n            const minMaxVectorAndDistance = <any>meshesOrMinMaxVectorAndDistance;\r\n            meshesOrMinMaxVector = minMaxVectorAndDistance;\r\n            distance = minMaxVectorAndDistance.distance;\r\n        }\r\n\r\n        this._target = Mesh.Center(meshesOrMinMaxVector);\r\n\r\n        if (!doNotUpdateMaxZ) {\r\n            this.maxZ = distance * 2;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @override\r\n     * Override Camera.createRigCamera\r\n     */\r\n    public createRigCamera(name: string, cameraIndex: number): Camera {\r\n        let alphaShift: number = 0;\r\n        switch (this.cameraRigMode) {\r\n            case Camera.RIG_MODE_STEREOSCOPIC_ANAGLYPH:\r\n            case Camera.RIG_MODE_STEREOSCOPIC_SIDEBYSIDE_PARALLEL:\r\n            case Camera.RIG_MODE_STEREOSCOPIC_OVERUNDER:\r\n            case Camera.RIG_MODE_STEREOSCOPIC_INTERLACED:\r\n            case Camera.RIG_MODE_VR:\r\n                alphaShift = this._cameraRigParams.stereoHalfAngle * (cameraIndex === 0 ? 1 : -1);\r\n                break;\r\n            case Camera.RIG_MODE_STEREOSCOPIC_SIDEBYSIDE_CROSSEYED:\r\n                alphaShift = this._cameraRigParams.stereoHalfAngle * (cameraIndex === 0 ? -1 : 1);\r\n                break;\r\n        }\r\n        const rigCam = new ArcRotateCamera(name, this.alpha + alphaShift, this.beta, this.radius, this._target, this.getScene());\r\n        rigCam._cameraRigParams = {};\r\n        rigCam.isRigCamera = true;\r\n        rigCam.rigParent = this;\r\n        rigCam.upVector = this.upVector;\r\n\r\n        rigCam.mode = this.mode;\r\n        rigCam.orthoLeft = this.orthoLeft;\r\n        rigCam.orthoRight = this.orthoRight;\r\n        rigCam.orthoBottom = this.orthoBottom;\r\n        rigCam.orthoTop = this.orthoTop;\r\n\r\n        return rigCam;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * @override\r\n     * Override Camera._updateRigCameras\r\n     */\r\n    public _updateRigCameras() {\r\n        const camLeft = <ArcRotateCamera>this._rigCameras[0];\r\n        const camRight = <ArcRotateCamera>this._rigCameras[1];\r\n\r\n        camLeft.beta = camRight.beta = this.beta;\r\n\r\n        switch (this.cameraRigMode) {\r\n            case Camera.RIG_MODE_STEREOSCOPIC_ANAGLYPH:\r\n            case Camera.RIG_MODE_STEREOSCOPIC_SIDEBYSIDE_PARALLEL:\r\n            case Camera.RIG_MODE_STEREOSCOPIC_OVERUNDER:\r\n            case Camera.RIG_MODE_STEREOSCOPIC_INTERLACED:\r\n            case Camera.RIG_MODE_VR:\r\n                camLeft.alpha = this.alpha - this._cameraRigParams.stereoHalfAngle;\r\n                camRight.alpha = this.alpha + this._cameraRigParams.stereoHalfAngle;\r\n                break;\r\n            case Camera.RIG_MODE_STEREOSCOPIC_SIDEBYSIDE_CROSSEYED:\r\n                camLeft.alpha = this.alpha + this._cameraRigParams.stereoHalfAngle;\r\n                camRight.alpha = this.alpha - this._cameraRigParams.stereoHalfAngle;\r\n                break;\r\n        }\r\n        super._updateRigCameras();\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _calculateLowerRadiusFromModelBoundingSphere(minimumWorld: Vector3, maximumWorld: Vector3, radiusScale: number = 1): number {\r\n        const boxVectorGlobalDiagonal = Vector3.Distance(minimumWorld, maximumWorld);\r\n\r\n        // Get aspect ratio in order to calculate frustum slope\r\n        const engine = this.getScene().getEngine();\r\n        const aspectRatio = engine.getAspectRatio(this);\r\n        const frustumSlopeY = Math.tan(this.fov / 2);\r\n        const frustumSlopeX = frustumSlopeY * aspectRatio;\r\n\r\n        // Formula for setting distance\r\n        // (Good explanation: http://stackoverflow.com/questions/2866350/move-camera-to-fit-3d-scene)\r\n        const radiusWithoutFraming = boxVectorGlobalDiagonal * 0.5;\r\n\r\n        // Horizon distance\r\n        const radius = radiusWithoutFraming * radiusScale;\r\n        const distanceForHorizontalFrustum = radius * Math.sqrt(1.0 + 1.0 / (frustumSlopeX * frustumSlopeX));\r\n        const distanceForVerticalFrustum = radius * Math.sqrt(1.0 + 1.0 / (frustumSlopeY * frustumSlopeY));\r\n        return Math.max(distanceForHorizontalFrustum, distanceForVerticalFrustum);\r\n    }\r\n\r\n    /**\r\n     * Destroy the camera and release the current resources hold by it.\r\n     */\r\n    public dispose(): void {\r\n        this.inputs.clear();\r\n        super.dispose();\r\n    }\r\n\r\n    /**\r\n     * Gets the current object class name.\r\n     * @returns the class name\r\n     */\r\n    public getClassName(): string {\r\n        return \"ArcRotateCamera\";\r\n    }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}