{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { __decorate } from \"../../tslib.es6.js\";\n/* eslint-disable @typescript-eslint/naming-convention */\nimport { serialize, serializeAsImageProcessingConfiguration, expandToProperty } from \"../../Misc/decorators.js\";\nimport { Logger } from \"../../Misc/logger.js\";\nimport { SmartArray } from \"../../Misc/smartArray.js\";\nimport { GetEnvironmentBRDFTexture } from \"../../Misc/brdfTextureTools.js\";\nimport { Scene } from \"../../scene.js\";\nimport { Vector4 } from \"../../Maths/math.vector.js\";\nimport { VertexBuffer } from \"../../Buffers/buffer.js\";\nimport { PBRBRDFConfiguration } from \"./pbrBRDFConfiguration.js\";\nimport { PrePassConfiguration } from \"../prePassConfiguration.js\";\nimport { Color3, TmpColors } from \"../../Maths/math.color.js\";\nimport { Scalar } from \"../../Maths/math.scalar.js\";\nimport { ImageProcessingConfiguration } from \"../../Materials/imageProcessingConfiguration.js\";\nimport { Material } from \"../../Materials/material.js\";\nimport { MaterialPluginEvent } from \"../materialPluginEvent.js\";\nimport { MaterialDefines } from \"../../Materials/materialDefines.js\";\nimport { PushMaterial } from \"../../Materials/pushMaterial.js\";\nimport { MaterialHelper } from \"../../Materials/materialHelper.js\";\nimport { Texture } from \"../../Materials/Textures/texture.js\";\nimport { MaterialFlags } from \"../materialFlags.js\";\nimport \"../../Materials/Textures/baseTexture.polynomial.js\";\nimport \"../../Shaders/pbr.fragment.js\";\nimport \"../../Shaders/pbr.vertex.js\";\nimport { EffectFallbacks } from \"../effectFallbacks.js\";\nimport { PBRClearCoatConfiguration } from \"./pbrClearCoatConfiguration.js\";\nimport { PBRIridescenceConfiguration } from \"./pbrIridescenceConfiguration.js\";\nimport { PBRAnisotropicConfiguration } from \"./pbrAnisotropicConfiguration.js\";\nimport { PBRSheenConfiguration } from \"./pbrSheenConfiguration.js\";\nimport { PBRSubSurfaceConfiguration } from \"./pbrSubSurfaceConfiguration.js\";\nimport { DetailMapConfiguration } from \"../material.detailMapConfiguration.js\";\nimport { addClipPlaneUniforms, bindClipPlane } from \"../clipPlaneMaterialHelper.js\";\nconst onCreatedEffectParameters = {\n  effect: null,\n  subMesh: null\n};\n/**\n * Manages the defines for the PBR Material.\n * @internal\n */\nexport class PBRMaterialDefines extends MaterialDefines {\n  /**\n   * Initializes the PBR Material defines.\n   * @param externalProperties The external properties\n   */\n  constructor(externalProperties) {\n    super(externalProperties);\n    this.PBR = true;\n    this.NUM_SAMPLES = \"0\";\n    this.REALTIME_FILTERING = false;\n    this.MAINUV1 = false;\n    this.MAINUV2 = false;\n    this.MAINUV3 = false;\n    this.MAINUV4 = false;\n    this.MAINUV5 = false;\n    this.MAINUV6 = false;\n    this.UV1 = false;\n    this.UV2 = false;\n    this.UV3 = false;\n    this.UV4 = false;\n    this.UV5 = false;\n    this.UV6 = false;\n    this.ALBEDO = false;\n    this.GAMMAALBEDO = false;\n    this.ALBEDODIRECTUV = 0;\n    this.VERTEXCOLOR = false;\n    this.BAKED_VERTEX_ANIMATION_TEXTURE = false;\n    this.AMBIENT = false;\n    this.AMBIENTDIRECTUV = 0;\n    this.AMBIENTINGRAYSCALE = false;\n    this.OPACITY = false;\n    this.VERTEXALPHA = false;\n    this.OPACITYDIRECTUV = 0;\n    this.OPACITYRGB = false;\n    this.ALPHATEST = false;\n    this.DEPTHPREPASS = false;\n    this.ALPHABLEND = false;\n    this.ALPHAFROMALBEDO = false;\n    this.ALPHATESTVALUE = \"0.5\";\n    this.SPECULAROVERALPHA = false;\n    this.RADIANCEOVERALPHA = false;\n    this.ALPHAFRESNEL = false;\n    this.LINEARALPHAFRESNEL = false;\n    this.PREMULTIPLYALPHA = false;\n    this.EMISSIVE = false;\n    this.EMISSIVEDIRECTUV = 0;\n    this.GAMMAEMISSIVE = false;\n    this.REFLECTIVITY = false;\n    this.REFLECTIVITY_GAMMA = false;\n    this.REFLECTIVITYDIRECTUV = 0;\n    this.SPECULARTERM = false;\n    this.MICROSURFACEFROMREFLECTIVITYMAP = false;\n    this.MICROSURFACEAUTOMATIC = false;\n    this.LODBASEDMICROSFURACE = false;\n    this.MICROSURFACEMAP = false;\n    this.MICROSURFACEMAPDIRECTUV = 0;\n    this.METALLICWORKFLOW = false;\n    this.ROUGHNESSSTOREINMETALMAPALPHA = false;\n    this.ROUGHNESSSTOREINMETALMAPGREEN = false;\n    this.METALLNESSSTOREINMETALMAPBLUE = false;\n    this.AOSTOREINMETALMAPRED = false;\n    this.METALLIC_REFLECTANCE = false;\n    this.METALLIC_REFLECTANCE_GAMMA = false;\n    this.METALLIC_REFLECTANCEDIRECTUV = 0;\n    this.METALLIC_REFLECTANCE_USE_ALPHA_ONLY = false;\n    this.REFLECTANCE = false;\n    this.REFLECTANCE_GAMMA = false;\n    this.REFLECTANCEDIRECTUV = 0;\n    this.ENVIRONMENTBRDF = false;\n    this.ENVIRONMENTBRDF_RGBD = false;\n    this.NORMAL = false;\n    this.TANGENT = false;\n    this.BUMP = false;\n    this.BUMPDIRECTUV = 0;\n    this.OBJECTSPACE_NORMALMAP = false;\n    this.PARALLAX = false;\n    this.PARALLAX_RHS = false;\n    this.PARALLAXOCCLUSION = false;\n    this.NORMALXYSCALE = true;\n    this.LIGHTMAP = false;\n    this.LIGHTMAPDIRECTUV = 0;\n    this.USELIGHTMAPASSHADOWMAP = false;\n    this.GAMMALIGHTMAP = false;\n    this.RGBDLIGHTMAP = false;\n    this.REFLECTION = false;\n    this.REFLECTIONMAP_3D = false;\n    this.REFLECTIONMAP_SPHERICAL = false;\n    this.REFLECTIONMAP_PLANAR = false;\n    this.REFLECTIONMAP_CUBIC = false;\n    this.USE_LOCAL_REFLECTIONMAP_CUBIC = false;\n    this.REFLECTIONMAP_PROJECTION = false;\n    this.REFLECTIONMAP_SKYBOX = false;\n    this.REFLECTIONMAP_EXPLICIT = false;\n    this.REFLECTIONMAP_EQUIRECTANGULAR = false;\n    this.REFLECTIONMAP_EQUIRECTANGULAR_FIXED = false;\n    this.REFLECTIONMAP_MIRROREDEQUIRECTANGULAR_FIXED = false;\n    this.INVERTCUBICMAP = false;\n    this.USESPHERICALFROMREFLECTIONMAP = false;\n    this.USEIRRADIANCEMAP = false;\n    this.USESPHERICALINVERTEX = false;\n    this.REFLECTIONMAP_OPPOSITEZ = false;\n    this.LODINREFLECTIONALPHA = false;\n    this.GAMMAREFLECTION = false;\n    this.RGBDREFLECTION = false;\n    this.LINEARSPECULARREFLECTION = false;\n    this.RADIANCEOCCLUSION = false;\n    this.HORIZONOCCLUSION = false;\n    this.INSTANCES = false;\n    this.THIN_INSTANCES = false;\n    this.INSTANCESCOLOR = false;\n    this.PREPASS = false;\n    this.PREPASS_IRRADIANCE = false;\n    this.PREPASS_IRRADIANCE_INDEX = -1;\n    this.PREPASS_ALBEDO_SQRT = false;\n    this.PREPASS_ALBEDO_SQRT_INDEX = -1;\n    this.PREPASS_DEPTH = false;\n    this.PREPASS_DEPTH_INDEX = -1;\n    this.PREPASS_NORMAL = false;\n    this.PREPASS_NORMAL_INDEX = -1;\n    this.PREPASS_NORMAL_WORLDSPACE = false;\n    this.PREPASS_POSITION = false;\n    this.PREPASS_POSITION_INDEX = -1;\n    this.PREPASS_VELOCITY = false;\n    this.PREPASS_VELOCITY_INDEX = -1;\n    this.PREPASS_REFLECTIVITY = false;\n    this.PREPASS_REFLECTIVITY_INDEX = -1;\n    this.SCENE_MRT_COUNT = 0;\n    this.NUM_BONE_INFLUENCERS = 0;\n    this.BonesPerMesh = 0;\n    this.BONETEXTURE = false;\n    this.BONES_VELOCITY_ENABLED = false;\n    this.NONUNIFORMSCALING = false;\n    this.MORPHTARGETS = false;\n    this.MORPHTARGETS_NORMAL = false;\n    this.MORPHTARGETS_TANGENT = false;\n    this.MORPHTARGETS_UV = false;\n    this.NUM_MORPH_INFLUENCERS = 0;\n    this.MORPHTARGETS_TEXTURE = false;\n    this.IMAGEPROCESSING = false;\n    this.VIGNETTE = false;\n    this.VIGNETTEBLENDMODEMULTIPLY = false;\n    this.VIGNETTEBLENDMODEOPAQUE = false;\n    this.TONEMAPPING = false;\n    this.TONEMAPPING_ACES = false;\n    this.CONTRAST = false;\n    this.COLORCURVES = false;\n    this.COLORGRADING = false;\n    this.COLORGRADING3D = false;\n    this.SAMPLER3DGREENDEPTH = false;\n    this.SAMPLER3DBGRMAP = false;\n    this.DITHER = false;\n    this.IMAGEPROCESSINGPOSTPROCESS = false;\n    this.SKIPFINALCOLORCLAMP = false;\n    this.EXPOSURE = false;\n    this.MULTIVIEW = false;\n    this.ORDER_INDEPENDENT_TRANSPARENCY = false;\n    this.ORDER_INDEPENDENT_TRANSPARENCY_16BITS = false;\n    this.USEPHYSICALLIGHTFALLOFF = false;\n    this.USEGLTFLIGHTFALLOFF = false;\n    this.TWOSIDEDLIGHTING = false;\n    this.SHADOWFLOAT = false;\n    this.CLIPPLANE = false;\n    this.CLIPPLANE2 = false;\n    this.CLIPPLANE3 = false;\n    this.CLIPPLANE4 = false;\n    this.CLIPPLANE5 = false;\n    this.CLIPPLANE6 = false;\n    this.POINTSIZE = false;\n    this.FOG = false;\n    this.LOGARITHMICDEPTH = false;\n    this.CAMERA_ORTHOGRAPHIC = false;\n    this.CAMERA_PERSPECTIVE = false;\n    this.FORCENORMALFORWARD = false;\n    this.SPECULARAA = false;\n    this.UNLIT = false;\n    this.DECAL_AFTER_DETAIL = false;\n    this.DEBUGMODE = 0;\n    this.rebuild();\n  }\n  /**\n   * Resets the PBR Material defines.\n   */\n  reset() {\n    super.reset();\n    this.ALPHATESTVALUE = \"0.5\";\n    this.PBR = true;\n    this.NORMALXYSCALE = true;\n  }\n}\n/**\n * The Physically based material base class of BJS.\n *\n * This offers the main features of a standard PBR material.\n * For more information, please refer to the documentation :\n * https://doc.babylonjs.com/features/featuresDeepDive/materials/using/introToPBR\n */\nexport class PBRBaseMaterial extends PushMaterial {\n  /**\n   * Enables realtime filtering on the texture.\n   */\n  get realTimeFiltering() {\n    return this._realTimeFiltering;\n  }\n  set realTimeFiltering(b) {\n    this._realTimeFiltering = b;\n    this.markAsDirty(1);\n  }\n  /**\n   * Quality switch for realtime filtering\n   */\n  get realTimeFilteringQuality() {\n    return this._realTimeFilteringQuality;\n  }\n  set realTimeFilteringQuality(n) {\n    this._realTimeFilteringQuality = n;\n    this.markAsDirty(1);\n  }\n  /**\n   * Can this material render to several textures at once\n   */\n  get canRenderToMRT() {\n    return true;\n  }\n  /**\n   * Attaches a new image processing configuration to the PBR Material.\n   * @param configuration\n   */\n  _attachImageProcessingConfiguration(configuration) {\n    if (configuration === this._imageProcessingConfiguration) {\n      return;\n    }\n    // Detaches observer.\n    if (this._imageProcessingConfiguration && this._imageProcessingObserver) {\n      this._imageProcessingConfiguration.onUpdateParameters.remove(this._imageProcessingObserver);\n    }\n    // Pick the scene configuration if needed.\n    if (!configuration) {\n      this._imageProcessingConfiguration = this.getScene().imageProcessingConfiguration;\n    } else {\n      this._imageProcessingConfiguration = configuration;\n    }\n    // Attaches observer.\n    if (this._imageProcessingConfiguration) {\n      this._imageProcessingObserver = this._imageProcessingConfiguration.onUpdateParameters.add(() => {\n        this._markAllSubMeshesAsImageProcessingDirty();\n      });\n    }\n  }\n  /**\n   * Instantiates a new PBRMaterial instance.\n   *\n   * @param name The material name\n   * @param scene The scene the material will be use in.\n   */\n  constructor(name, scene) {\n    super(name, scene);\n    /**\n     * Intensity of the direct lights e.g. the four lights available in your scene.\n     * This impacts both the direct diffuse and specular highlights.\n     * @internal\n     */\n    this._directIntensity = 1.0;\n    /**\n     * Intensity of the emissive part of the material.\n     * This helps controlling the emissive effect without modifying the emissive color.\n     * @internal\n     */\n    this._emissiveIntensity = 1.0;\n    /**\n     * Intensity of the environment e.g. how much the environment will light the object\n     * either through harmonics for rough material or through the reflection for shiny ones.\n     * @internal\n     */\n    this._environmentIntensity = 1.0;\n    /**\n     * This is a special control allowing the reduction of the specular highlights coming from the\n     * four lights of the scene. Those highlights may not be needed in full environment lighting.\n     * @internal\n     */\n    this._specularIntensity = 1.0;\n    /**\n     * This stores the direct, emissive, environment, and specular light intensities into a Vector4.\n     */\n    this._lightingInfos = new Vector4(this._directIntensity, this._emissiveIntensity, this._environmentIntensity, this._specularIntensity);\n    /**\n     * Debug Control allowing disabling the bump map on this material.\n     * @internal\n     */\n    this._disableBumpMap = false;\n    /**\n     * AKA Diffuse Texture in standard nomenclature.\n     * @internal\n     */\n    this._albedoTexture = null;\n    /**\n     * AKA Occlusion Texture in other nomenclature.\n     * @internal\n     */\n    this._ambientTexture = null;\n    /**\n     * AKA Occlusion Texture Intensity in other nomenclature.\n     * @internal\n     */\n    this._ambientTextureStrength = 1.0;\n    /**\n     * Defines how much the AO map is occluding the analytical lights (point spot...).\n     * 1 means it completely occludes it\n     * 0 mean it has no impact\n     * @internal\n     */\n    this._ambientTextureImpactOnAnalyticalLights = PBRBaseMaterial.DEFAULT_AO_ON_ANALYTICAL_LIGHTS;\n    /**\n     * Stores the alpha values in a texture.\n     * @internal\n     */\n    this._opacityTexture = null;\n    /**\n     * Stores the reflection values in a texture.\n     * @internal\n     */\n    this._reflectionTexture = null;\n    /**\n     * Stores the emissive values in a texture.\n     * @internal\n     */\n    this._emissiveTexture = null;\n    /**\n     * AKA Specular texture in other nomenclature.\n     * @internal\n     */\n    this._reflectivityTexture = null;\n    /**\n     * Used to switch from specular/glossiness to metallic/roughness workflow.\n     * @internal\n     */\n    this._metallicTexture = null;\n    /**\n     * Specifies the metallic scalar of the metallic/roughness workflow.\n     * Can also be used to scale the metalness values of the metallic texture.\n     * @internal\n     */\n    this._metallic = null;\n    /**\n     * Specifies the roughness scalar of the metallic/roughness workflow.\n     * Can also be used to scale the roughness values of the metallic texture.\n     * @internal\n     */\n    this._roughness = null;\n    /**\n     * In metallic workflow, specifies an F0 factor to help configuring the material F0.\n     * By default the indexOfrefraction is used to compute F0;\n     *\n     * This is used as a factor against the default reflectance at normal incidence to tweak it.\n     *\n     * F0 = defaultF0 * metallicF0Factor * metallicReflectanceColor;\n     * F90 = metallicReflectanceColor;\n     * @internal\n     */\n    this._metallicF0Factor = 1;\n    /**\n     * In metallic workflow, specifies an F0 color.\n     * By default the F90 is always 1;\n     *\n     * Please note that this factor is also used as a factor against the default reflectance at normal incidence.\n     *\n     * F0 = defaultF0_from_IOR * metallicF0Factor * metallicReflectanceColor\n     * F90 = metallicF0Factor;\n     * @internal\n     */\n    this._metallicReflectanceColor = Color3.White();\n    /**\n     * Specifies that only the A channel from _metallicReflectanceTexture should be used.\n     * If false, both RGB and A channels will be used\n     * @internal\n     */\n    this._useOnlyMetallicFromMetallicReflectanceTexture = false;\n    /**\n     * Defines to store metallicReflectanceColor in RGB and metallicF0Factor in A\n     * This is multiply against the scalar values defined in the material.\n     * @internal\n     */\n    this._metallicReflectanceTexture = null;\n    /**\n     * Defines to store reflectanceColor in RGB\n     * This is multiplied against the scalar values defined in the material.\n     * If both _reflectanceTexture and _metallicReflectanceTexture textures are provided and _useOnlyMetallicFromMetallicReflectanceTexture\n     * is false, _metallicReflectanceTexture takes precedence and _reflectanceTexture is not used\n     * @internal\n     */\n    this._reflectanceTexture = null;\n    /**\n     * Used to enable roughness/glossiness fetch from a separate channel depending on the current mode.\n     * Gray Scale represents roughness in metallic mode and glossiness in specular mode.\n     * @internal\n     */\n    this._microSurfaceTexture = null;\n    /**\n     * Stores surface normal data used to displace a mesh in a texture.\n     * @internal\n     */\n    this._bumpTexture = null;\n    /**\n     * Stores the pre-calculated light information of a mesh in a texture.\n     * @internal\n     */\n    this._lightmapTexture = null;\n    /**\n     * The color of a material in ambient lighting.\n     * @internal\n     */\n    this._ambientColor = new Color3(0, 0, 0);\n    /**\n     * AKA Diffuse Color in other nomenclature.\n     * @internal\n     */\n    this._albedoColor = new Color3(1, 1, 1);\n    /**\n     * AKA Specular Color in other nomenclature.\n     * @internal\n     */\n    this._reflectivityColor = new Color3(1, 1, 1);\n    /**\n     * The color applied when light is reflected from a material.\n     * @internal\n     */\n    this._reflectionColor = new Color3(1, 1, 1);\n    /**\n     * The color applied when light is emitted from a material.\n     * @internal\n     */\n    this._emissiveColor = new Color3(0, 0, 0);\n    /**\n     * AKA Glossiness in other nomenclature.\n     * @internal\n     */\n    this._microSurface = 0.9;\n    /**\n     * Specifies that the material will use the light map as a show map.\n     * @internal\n     */\n    this._useLightmapAsShadowmap = false;\n    /**\n     * This parameters will enable/disable Horizon occlusion to prevent normal maps to look shiny when the normal\n     * makes the reflect vector face the model (under horizon).\n     * @internal\n     */\n    this._useHorizonOcclusion = true;\n    /**\n     * This parameters will enable/disable radiance occlusion by preventing the radiance to lit\n     * too much the area relying on ambient texture to define their ambient occlusion.\n     * @internal\n     */\n    this._useRadianceOcclusion = true;\n    /**\n     * Specifies that the alpha is coming form the albedo channel alpha channel for alpha blending.\n     * @internal\n     */\n    this._useAlphaFromAlbedoTexture = false;\n    /**\n     * Specifies that the material will keeps the specular highlights over a transparent surface (only the most luminous ones).\n     * A car glass is a good example of that. When sun reflects on it you can not see what is behind.\n     * @internal\n     */\n    this._useSpecularOverAlpha = true;\n    /**\n     * Specifies if the reflectivity texture contains the glossiness information in its alpha channel.\n     * @internal\n     */\n    this._useMicroSurfaceFromReflectivityMapAlpha = false;\n    /**\n     * Specifies if the metallic texture contains the roughness information in its alpha channel.\n     * @internal\n     */\n    this._useRoughnessFromMetallicTextureAlpha = true;\n    /**\n     * Specifies if the metallic texture contains the roughness information in its green channel.\n     * @internal\n     */\n    this._useRoughnessFromMetallicTextureGreen = false;\n    /**\n     * Specifies if the metallic texture contains the metallness information in its blue channel.\n     * @internal\n     */\n    this._useMetallnessFromMetallicTextureBlue = false;\n    /**\n     * Specifies if the metallic texture contains the ambient occlusion information in its red channel.\n     * @internal\n     */\n    this._useAmbientOcclusionFromMetallicTextureRed = false;\n    /**\n     * Specifies if the ambient texture contains the ambient occlusion information in its red channel only.\n     * @internal\n     */\n    this._useAmbientInGrayScale = false;\n    /**\n     * In case the reflectivity map does not contain the microsurface information in its alpha channel,\n     * The material will try to infer what glossiness each pixel should be.\n     * @internal\n     */\n    this._useAutoMicroSurfaceFromReflectivityMap = false;\n    /**\n     * Defines the  falloff type used in this material.\n     * It by default is Physical.\n     * @internal\n     */\n    this._lightFalloff = PBRBaseMaterial.LIGHTFALLOFF_PHYSICAL;\n    /**\n     * Specifies that the material will keeps the reflection highlights over a transparent surface (only the most luminous ones).\n     * A car glass is a good example of that. When the street lights reflects on it you can not see what is behind.\n     * @internal\n     */\n    this._useRadianceOverAlpha = true;\n    /**\n     * Allows using an object space normal map (instead of tangent space).\n     * @internal\n     */\n    this._useObjectSpaceNormalMap = false;\n    /**\n     * Allows using the bump map in parallax mode.\n     * @internal\n     */\n    this._useParallax = false;\n    /**\n     * Allows using the bump map in parallax occlusion mode.\n     * @internal\n     */\n    this._useParallaxOcclusion = false;\n    /**\n     * Controls the scale bias of the parallax mode.\n     * @internal\n     */\n    this._parallaxScaleBias = 0.05;\n    /**\n     * If sets to true, disables all the lights affecting the material.\n     * @internal\n     */\n    this._disableLighting = false;\n    /**\n     * Number of Simultaneous lights allowed on the material.\n     * @internal\n     */\n    this._maxSimultaneousLights = 4;\n    /**\n     * If sets to true, x component of normal map value will be inverted (x = 1.0 - x).\n     * @internal\n     */\n    this._invertNormalMapX = false;\n    /**\n     * If sets to true, y component of normal map value will be inverted (y = 1.0 - y).\n     * @internal\n     */\n    this._invertNormalMapY = false;\n    /**\n     * If sets to true and backfaceCulling is false, normals will be flipped on the backside.\n     * @internal\n     */\n    this._twoSidedLighting = false;\n    /**\n     * Defines the alpha limits in alpha test mode.\n     * @internal\n     */\n    this._alphaCutOff = 0.4;\n    /**\n     * Enforces alpha test in opaque or blend mode in order to improve the performances of some situations.\n     * @internal\n     */\n    this._forceAlphaTest = false;\n    /**\n     * A fresnel is applied to the alpha of the model to ensure grazing angles edges are not alpha tested.\n     * And/Or occlude the blended part. (alpha is converted to gamma to compute the fresnel)\n     * @internal\n     */\n    this._useAlphaFresnel = false;\n    /**\n     * A fresnel is applied to the alpha of the model to ensure grazing angles edges are not alpha tested.\n     * And/Or occlude the blended part. (alpha stays linear to compute the fresnel)\n     * @internal\n     */\n    this._useLinearAlphaFresnel = false;\n    /**\n     * Specifies the environment BRDF texture used to compute the scale and offset roughness values\n     * from cos theta and roughness:\n     * http://blog.selfshadow.com/publications/s2013-shading-course/karis/s2013_pbs_epic_notes_v2.pdf\n     * @internal\n     */\n    this._environmentBRDFTexture = null;\n    /**\n     * Force the shader to compute irradiance in the fragment shader in order to take bump in account.\n     * @internal\n     */\n    this._forceIrradianceInFragment = false;\n    this._realTimeFiltering = false;\n    this._realTimeFilteringQuality = 8;\n    /**\n     * Force normal to face away from face.\n     * @internal\n     */\n    this._forceNormalForward = false;\n    /**\n     * Enables specular anti aliasing in the PBR shader.\n     * It will both interacts on the Geometry for analytical and IBL lighting.\n     * It also prefilter the roughness map based on the bump values.\n     * @internal\n     */\n    this._enableSpecularAntiAliasing = false;\n    /**\n     * Keep track of the image processing observer to allow dispose and replace.\n     */\n    this._imageProcessingObserver = null;\n    /**\n     * Stores the available render targets.\n     */\n    this._renderTargets = new SmartArray(16);\n    /**\n     * Sets the global ambient color for the material used in lighting calculations.\n     */\n    this._globalAmbientColor = new Color3(0, 0, 0);\n    /**\n     * Enables the use of logarithmic depth buffers, which is good for wide depth buffers.\n     */\n    this._useLogarithmicDepth = false;\n    /**\n     * If set to true, no lighting calculations will be applied.\n     */\n    this._unlit = false;\n    /**\n     * If sets to true, the decal map will be applied after the detail map. Else, it is applied before (default: false)\n     */\n    this._applyDecalMapAfterDetailMap = false;\n    this._debugMode = 0;\n    /**\n     * @internal\n     * This is reserved for the inspector.\n     * Defines the material debug mode.\n     * It helps seeing only some components of the material while troubleshooting.\n     */\n    this.debugMode = 0;\n    /**\n     * @internal\n     * This is reserved for the inspector.\n     * Specify from where on screen the debug mode should start.\n     * The value goes from -1 (full screen) to 1 (not visible)\n     * It helps with side by side comparison against the final render\n     * This defaults to -1\n     */\n    this.debugLimit = -1;\n    /**\n     * @internal\n     * This is reserved for the inspector.\n     * As the default viewing range might not be enough (if the ambient is really small for instance)\n     * You can use the factor to better multiply the final value.\n     */\n    this.debugFactor = 1;\n    this._cacheHasRenderTargetTextures = false;\n    this.brdf = new PBRBRDFConfiguration(this);\n    this.clearCoat = new PBRClearCoatConfiguration(this);\n    this.iridescence = new PBRIridescenceConfiguration(this);\n    this.anisotropy = new PBRAnisotropicConfiguration(this);\n    this.sheen = new PBRSheenConfiguration(this);\n    this.subSurface = new PBRSubSurfaceConfiguration(this);\n    this.detailMap = new DetailMapConfiguration(this);\n    // Setup the default processing configuration to the scene.\n    this._attachImageProcessingConfiguration(null);\n    this.getRenderTargetTextures = () => {\n      this._renderTargets.reset();\n      if (MaterialFlags.ReflectionTextureEnabled && this._reflectionTexture && this._reflectionTexture.isRenderTarget) {\n        this._renderTargets.push(this._reflectionTexture);\n      }\n      this._eventInfo.renderTargets = this._renderTargets;\n      this._callbackPluginEventFillRenderTargetTextures(this._eventInfo);\n      return this._renderTargets;\n    };\n    this._environmentBRDFTexture = GetEnvironmentBRDFTexture(this.getScene());\n    this.prePassConfiguration = new PrePassConfiguration();\n  }\n  /**\n   * Gets a boolean indicating that current material needs to register RTT\n   */\n  get hasRenderTargetTextures() {\n    if (MaterialFlags.ReflectionTextureEnabled && this._reflectionTexture && this._reflectionTexture.isRenderTarget) {\n      return true;\n    }\n    return this._cacheHasRenderTargetTextures;\n  }\n  /**\n   * Can this material render to prepass\n   */\n  get isPrePassCapable() {\n    return !this.disableDepthWrite;\n  }\n  /**\n   * Gets the name of the material class.\n   */\n  getClassName() {\n    return \"PBRBaseMaterial\";\n  }\n  /**\n   * Enabled the use of logarithmic depth buffers, which is good for wide depth buffers.\n   */\n  get useLogarithmicDepth() {\n    return this._useLogarithmicDepth;\n  }\n  /**\n   * Enabled the use of logarithmic depth buffers, which is good for wide depth buffers.\n   */\n  set useLogarithmicDepth(value) {\n    this._useLogarithmicDepth = value && this.getScene().getEngine().getCaps().fragmentDepthSupported;\n  }\n  /**\n   * Returns true if alpha blending should be disabled.\n   */\n  get _disableAlphaBlending() {\n    var _a;\n    return this._transparencyMode === PBRBaseMaterial.PBRMATERIAL_OPAQUE || this._transparencyMode === PBRBaseMaterial.PBRMATERIAL_ALPHATEST || ((_a = this.subSurface) === null || _a === void 0 ? void 0 : _a.disableAlphaBlending);\n  }\n  /**\n   * Specifies whether or not this material should be rendered in alpha blend mode.\n   */\n  needAlphaBlending() {\n    if (this._disableAlphaBlending) {\n      return false;\n    }\n    return this.alpha < 1.0 || this._opacityTexture != null || this._shouldUseAlphaFromAlbedoTexture();\n  }\n  /**\n   * Specifies whether or not this material should be rendered in alpha test mode.\n   */\n  needAlphaTesting() {\n    var _a;\n    if (this._forceAlphaTest) {\n      return true;\n    }\n    if ((_a = this.subSurface) === null || _a === void 0 ? void 0 : _a.disableAlphaBlending) {\n      return false;\n    }\n    return this._hasAlphaChannel() && (this._transparencyMode == null || this._transparencyMode === PBRBaseMaterial.PBRMATERIAL_ALPHATEST);\n  }\n  /**\n   * Specifies whether or not the alpha value of the albedo texture should be used for alpha blending.\n   */\n  _shouldUseAlphaFromAlbedoTexture() {\n    return this._albedoTexture != null && this._albedoTexture.hasAlpha && this._useAlphaFromAlbedoTexture && this._transparencyMode !== PBRBaseMaterial.PBRMATERIAL_OPAQUE;\n  }\n  /**\n   * Specifies whether or not there is a usable alpha channel for transparency.\n   */\n  _hasAlphaChannel() {\n    return this._albedoTexture != null && this._albedoTexture.hasAlpha || this._opacityTexture != null;\n  }\n  /**\n   * Gets the texture used for the alpha test.\n   */\n  getAlphaTestTexture() {\n    return this._albedoTexture;\n  }\n  /**\n   * Specifies that the submesh is ready to be used.\n   * @param mesh - BJS mesh.\n   * @param subMesh - A submesh of the BJS mesh.  Used to check if it is ready.\n   * @param useInstances - Specifies that instances should be used.\n   * @returns - boolean indicating that the submesh is ready or not.\n   */\n  isReadyForSubMesh(mesh, subMesh, useInstances) {\n    var _a;\n    if (!this._uniformBufferLayoutBuilt) {\n      this.buildUniformLayout();\n    }\n    if (subMesh.effect && this.isFrozen) {\n      if (subMesh.effect._wasPreviouslyReady && subMesh.effect._wasPreviouslyUsingInstances === useInstances) {\n        return true;\n      }\n    }\n    if (!subMesh.materialDefines) {\n      this._callbackPluginEventGeneric(MaterialPluginEvent.GetDefineNames, this._eventInfo);\n      subMesh.materialDefines = new PBRMaterialDefines(this._eventInfo.defineNames);\n    }\n    const defines = subMesh.materialDefines;\n    if (this._isReadyForSubMesh(subMesh)) {\n      return true;\n    }\n    const scene = this.getScene();\n    const engine = scene.getEngine();\n    if (defines._areTexturesDirty) {\n      this._eventInfo.hasRenderTargetTextures = false;\n      this._callbackPluginEventHasRenderTargetTextures(this._eventInfo);\n      this._cacheHasRenderTargetTextures = this._eventInfo.hasRenderTargetTextures;\n      if (scene.texturesEnabled) {\n        if (this._albedoTexture && MaterialFlags.DiffuseTextureEnabled) {\n          if (!this._albedoTexture.isReadyOrNotBlocking()) {\n            return false;\n          }\n        }\n        if (this._ambientTexture && MaterialFlags.AmbientTextureEnabled) {\n          if (!this._ambientTexture.isReadyOrNotBlocking()) {\n            return false;\n          }\n        }\n        if (this._opacityTexture && MaterialFlags.OpacityTextureEnabled) {\n          if (!this._opacityTexture.isReadyOrNotBlocking()) {\n            return false;\n          }\n        }\n        const reflectionTexture = this._getReflectionTexture();\n        if (reflectionTexture && MaterialFlags.ReflectionTextureEnabled) {\n          if (!reflectionTexture.isReadyOrNotBlocking()) {\n            return false;\n          }\n          if (reflectionTexture.irradianceTexture) {\n            if (!reflectionTexture.irradianceTexture.isReadyOrNotBlocking()) {\n              return false;\n            }\n          } else {\n            // Not ready until spherical are ready too.\n            if (!reflectionTexture.sphericalPolynomial && ((_a = reflectionTexture.getInternalTexture()) === null || _a === void 0 ? void 0 : _a._sphericalPolynomialPromise)) {\n              return false;\n            }\n          }\n        }\n        if (this._lightmapTexture && MaterialFlags.LightmapTextureEnabled) {\n          if (!this._lightmapTexture.isReadyOrNotBlocking()) {\n            return false;\n          }\n        }\n        if (this._emissiveTexture && MaterialFlags.EmissiveTextureEnabled) {\n          if (!this._emissiveTexture.isReadyOrNotBlocking()) {\n            return false;\n          }\n        }\n        if (MaterialFlags.SpecularTextureEnabled) {\n          if (this._metallicTexture) {\n            if (!this._metallicTexture.isReadyOrNotBlocking()) {\n              return false;\n            }\n          } else if (this._reflectivityTexture) {\n            if (!this._reflectivityTexture.isReadyOrNotBlocking()) {\n              return false;\n            }\n          }\n          if (this._metallicReflectanceTexture) {\n            if (!this._metallicReflectanceTexture.isReadyOrNotBlocking()) {\n              return false;\n            }\n          }\n          if (this._reflectanceTexture) {\n            if (!this._reflectanceTexture.isReadyOrNotBlocking()) {\n              return false;\n            }\n          }\n          if (this._microSurfaceTexture) {\n            if (!this._microSurfaceTexture.isReadyOrNotBlocking()) {\n              return false;\n            }\n          }\n        }\n        if (engine.getCaps().standardDerivatives && this._bumpTexture && MaterialFlags.BumpTextureEnabled && !this._disableBumpMap) {\n          // Bump texture cannot be not blocking.\n          if (!this._bumpTexture.isReady()) {\n            return false;\n          }\n        }\n        if (this._environmentBRDFTexture && MaterialFlags.ReflectionTextureEnabled) {\n          // This is blocking.\n          if (!this._environmentBRDFTexture.isReady()) {\n            return false;\n          }\n        }\n      }\n    }\n    this._eventInfo.isReadyForSubMesh = true;\n    this._eventInfo.defines = defines;\n    this._eventInfo.subMesh = subMesh;\n    this._callbackPluginEventIsReadyForSubMesh(this._eventInfo);\n    if (!this._eventInfo.isReadyForSubMesh) {\n      return false;\n    }\n    if (defines._areImageProcessingDirty && this._imageProcessingConfiguration) {\n      if (!this._imageProcessingConfiguration.isReady()) {\n        return false;\n      }\n    }\n    if (!engine.getCaps().standardDerivatives && !mesh.isVerticesDataPresent(VertexBuffer.NormalKind)) {\n      mesh.createNormals(true);\n      Logger.Warn(\"PBRMaterial: Normals have been created for the mesh: \" + mesh.name);\n    }\n    const previousEffect = subMesh.effect;\n    const lightDisposed = defines._areLightsDisposed;\n    let effect = this._prepareEffect(mesh, defines, this.onCompiled, this.onError, useInstances, null, subMesh.getRenderingMesh().hasThinInstances);\n    let forceWasNotReadyPreviously = false;\n    if (effect) {\n      if (this._onEffectCreatedObservable) {\n        onCreatedEffectParameters.effect = effect;\n        onCreatedEffectParameters.subMesh = subMesh;\n        this._onEffectCreatedObservable.notifyObservers(onCreatedEffectParameters);\n      }\n      // Use previous effect while new one is compiling\n      if (this.allowShaderHotSwapping && previousEffect && !effect.isReady()) {\n        effect = previousEffect;\n        defines.markAsUnprocessed();\n        forceWasNotReadyPreviously = this.isFrozen;\n        if (lightDisposed) {\n          // re register in case it takes more than one frame.\n          defines._areLightsDisposed = true;\n          return false;\n        }\n      } else {\n        scene.resetCachedMaterial();\n        subMesh.setEffect(effect, defines, this._materialContext);\n      }\n    }\n    if (!subMesh.effect || !subMesh.effect.isReady()) {\n      return false;\n    }\n    defines._renderId = scene.getRenderId();\n    subMesh.effect._wasPreviouslyReady = forceWasNotReadyPreviously ? false : true;\n    subMesh.effect._wasPreviouslyUsingInstances = !!useInstances;\n    this._checkScenePerformancePriority();\n    return true;\n  }\n  /**\n   * Specifies if the material uses metallic roughness workflow.\n   * @returns boolean specifying if the material uses metallic roughness workflow.\n   */\n  isMetallicWorkflow() {\n    if (this._metallic != null || this._roughness != null || this._metallicTexture) {\n      return true;\n    }\n    return false;\n  }\n  _prepareEffect(mesh, defines, onCompiled = null, onError = null, useInstances = null, useClipPlane = null, useThinInstances) {\n    this._prepareDefines(mesh, defines, useInstances, useClipPlane, useThinInstances);\n    if (!defines.isDirty) {\n      return null;\n    }\n    defines.markAsProcessed();\n    const scene = this.getScene();\n    const engine = scene.getEngine();\n    // Fallbacks\n    const fallbacks = new EffectFallbacks();\n    let fallbackRank = 0;\n    if (defines.USESPHERICALINVERTEX) {\n      fallbacks.addFallback(fallbackRank++, \"USESPHERICALINVERTEX\");\n    }\n    if (defines.FOG) {\n      fallbacks.addFallback(fallbackRank, \"FOG\");\n    }\n    if (defines.SPECULARAA) {\n      fallbacks.addFallback(fallbackRank, \"SPECULARAA\");\n    }\n    if (defines.POINTSIZE) {\n      fallbacks.addFallback(fallbackRank, \"POINTSIZE\");\n    }\n    if (defines.LOGARITHMICDEPTH) {\n      fallbacks.addFallback(fallbackRank, \"LOGARITHMICDEPTH\");\n    }\n    if (defines.PARALLAX) {\n      fallbacks.addFallback(fallbackRank, \"PARALLAX\");\n    }\n    if (defines.PARALLAX_RHS) {\n      fallbacks.addFallback(fallbackRank, \"PARALLAX_RHS\");\n    }\n    if (defines.PARALLAXOCCLUSION) {\n      fallbacks.addFallback(fallbackRank++, \"PARALLAXOCCLUSION\");\n    }\n    if (defines.ENVIRONMENTBRDF) {\n      fallbacks.addFallback(fallbackRank++, \"ENVIRONMENTBRDF\");\n    }\n    if (defines.TANGENT) {\n      fallbacks.addFallback(fallbackRank++, \"TANGENT\");\n    }\n    if (defines.BUMP) {\n      fallbacks.addFallback(fallbackRank++, \"BUMP\");\n    }\n    fallbackRank = MaterialHelper.HandleFallbacksForShadows(defines, fallbacks, this._maxSimultaneousLights, fallbackRank++);\n    if (defines.SPECULARTERM) {\n      fallbacks.addFallback(fallbackRank++, \"SPECULARTERM\");\n    }\n    if (defines.USESPHERICALFROMREFLECTIONMAP) {\n      fallbacks.addFallback(fallbackRank++, \"USESPHERICALFROMREFLECTIONMAP\");\n    }\n    if (defines.USEIRRADIANCEMAP) {\n      fallbacks.addFallback(fallbackRank++, \"USEIRRADIANCEMAP\");\n    }\n    if (defines.LIGHTMAP) {\n      fallbacks.addFallback(fallbackRank++, \"LIGHTMAP\");\n    }\n    if (defines.NORMAL) {\n      fallbacks.addFallback(fallbackRank++, \"NORMAL\");\n    }\n    if (defines.AMBIENT) {\n      fallbacks.addFallback(fallbackRank++, \"AMBIENT\");\n    }\n    if (defines.EMISSIVE) {\n      fallbacks.addFallback(fallbackRank++, \"EMISSIVE\");\n    }\n    if (defines.VERTEXCOLOR) {\n      fallbacks.addFallback(fallbackRank++, \"VERTEXCOLOR\");\n    }\n    if (defines.MORPHTARGETS) {\n      fallbacks.addFallback(fallbackRank++, \"MORPHTARGETS\");\n    }\n    if (defines.MULTIVIEW) {\n      fallbacks.addFallback(0, \"MULTIVIEW\");\n    }\n    //Attributes\n    const attribs = [VertexBuffer.PositionKind];\n    if (defines.NORMAL) {\n      attribs.push(VertexBuffer.NormalKind);\n    }\n    if (defines.TANGENT) {\n      attribs.push(VertexBuffer.TangentKind);\n    }\n    for (let i = 1; i <= 6; ++i) {\n      if (defines[\"UV\" + i]) {\n        attribs.push(`uv${i === 1 ? \"\" : i}`);\n      }\n    }\n    if (defines.VERTEXCOLOR) {\n      attribs.push(VertexBuffer.ColorKind);\n    }\n    if (defines.INSTANCESCOLOR) {\n      attribs.push(VertexBuffer.ColorInstanceKind);\n    }\n    MaterialHelper.PrepareAttributesForBones(attribs, mesh, defines, fallbacks);\n    MaterialHelper.PrepareAttributesForInstances(attribs, defines);\n    MaterialHelper.PrepareAttributesForMorphTargets(attribs, mesh, defines);\n    MaterialHelper.PrepareAttributesForBakedVertexAnimation(attribs, mesh, defines);\n    let shaderName = \"pbr\";\n    const uniforms = [\"world\", \"view\", \"viewProjection\", \"vEyePosition\", \"vLightsType\", \"vAmbientColor\", \"vAlbedoColor\", \"vReflectivityColor\", \"vMetallicReflectanceFactors\", \"vEmissiveColor\", \"visibility\", \"vReflectionColor\", \"vFogInfos\", \"vFogColor\", \"pointSize\", \"vAlbedoInfos\", \"vAmbientInfos\", \"vOpacityInfos\", \"vReflectionInfos\", \"vReflectionPosition\", \"vReflectionSize\", \"vEmissiveInfos\", \"vReflectivityInfos\", \"vReflectionFilteringInfo\", \"vMetallicReflectanceInfos\", \"vReflectanceInfos\", \"vMicroSurfaceSamplerInfos\", \"vBumpInfos\", \"vLightmapInfos\", \"mBones\", \"albedoMatrix\", \"ambientMatrix\", \"opacityMatrix\", \"reflectionMatrix\", \"emissiveMatrix\", \"reflectivityMatrix\", \"normalMatrix\", \"microSurfaceSamplerMatrix\", \"bumpMatrix\", \"lightmapMatrix\", \"metallicReflectanceMatrix\", \"reflectanceMatrix\", \"vLightingIntensity\", \"logarithmicDepthConstant\", \"vSphericalX\", \"vSphericalY\", \"vSphericalZ\", \"vSphericalXX_ZZ\", \"vSphericalYY_ZZ\", \"vSphericalZZ\", \"vSphericalXY\", \"vSphericalYZ\", \"vSphericalZX\", \"vSphericalL00\", \"vSphericalL1_1\", \"vSphericalL10\", \"vSphericalL11\", \"vSphericalL2_2\", \"vSphericalL2_1\", \"vSphericalL20\", \"vSphericalL21\", \"vSphericalL22\", \"vReflectionMicrosurfaceInfos\", \"vTangentSpaceParams\", \"boneTextureWidth\", \"vDebugMode\", \"morphTargetTextureInfo\", \"morphTargetTextureIndices\"];\n    const samplers = [\"albedoSampler\", \"reflectivitySampler\", \"ambientSampler\", \"emissiveSampler\", \"bumpSampler\", \"lightmapSampler\", \"opacitySampler\", \"reflectionSampler\", \"reflectionSamplerLow\", \"reflectionSamplerHigh\", \"irradianceSampler\", \"microSurfaceSampler\", \"environmentBrdfSampler\", \"boneSampler\", \"metallicReflectanceSampler\", \"reflectanceSampler\", \"morphTargets\", \"oitDepthSampler\", \"oitFrontColorSampler\"];\n    const uniformBuffers = [\"Material\", \"Scene\", \"Mesh\"];\n    const indexParameters = {\n      maxSimultaneousLights: this._maxSimultaneousLights,\n      maxSimultaneousMorphTargets: defines.NUM_MORPH_INFLUENCERS\n    };\n    this._eventInfo.fallbacks = fallbacks;\n    this._eventInfo.fallbackRank = fallbackRank;\n    this._eventInfo.defines = defines;\n    this._eventInfo.uniforms = uniforms;\n    this._eventInfo.attributes = attribs;\n    this._eventInfo.samplers = samplers;\n    this._eventInfo.uniformBuffersNames = uniformBuffers;\n    this._eventInfo.customCode = undefined;\n    this._eventInfo.mesh = mesh;\n    this._eventInfo.indexParameters = indexParameters;\n    this._callbackPluginEventGeneric(MaterialPluginEvent.PrepareEffect, this._eventInfo);\n    PrePassConfiguration.AddUniforms(uniforms);\n    PrePassConfiguration.AddSamplers(samplers);\n    addClipPlaneUniforms(uniforms);\n    if (ImageProcessingConfiguration) {\n      ImageProcessingConfiguration.PrepareUniforms(uniforms, defines);\n      ImageProcessingConfiguration.PrepareSamplers(samplers, defines);\n    }\n    MaterialHelper.PrepareUniformsAndSamplersList({\n      uniformsNames: uniforms,\n      uniformBuffersNames: uniformBuffers,\n      samplers: samplers,\n      defines: defines,\n      maxSimultaneousLights: this._maxSimultaneousLights\n    });\n    const csnrOptions = {};\n    if (this.customShaderNameResolve) {\n      shaderName = this.customShaderNameResolve(shaderName, uniforms, uniformBuffers, samplers, defines, attribs, csnrOptions);\n    }\n    const join = defines.toString();\n    const effect = engine.createEffect(shaderName, {\n      attributes: attribs,\n      uniformsNames: uniforms,\n      uniformBuffersNames: uniformBuffers,\n      samplers: samplers,\n      defines: join,\n      fallbacks: fallbacks,\n      onCompiled: onCompiled,\n      onError: onError,\n      indexParameters,\n      processFinalCode: csnrOptions.processFinalCode,\n      processCodeAfterIncludes: this._eventInfo.customCode,\n      multiTarget: defines.PREPASS\n    }, engine);\n    this._eventInfo.customCode = undefined;\n    return effect;\n  }\n  _prepareDefines(mesh, defines, useInstances = null, useClipPlane = null, useThinInstances = false) {\n    var _a;\n    const scene = this.getScene();\n    const engine = scene.getEngine();\n    // Lights\n    MaterialHelper.PrepareDefinesForLights(scene, mesh, defines, true, this._maxSimultaneousLights, this._disableLighting);\n    defines._needNormals = true;\n    // Multiview\n    MaterialHelper.PrepareDefinesForMultiview(scene, defines);\n    // PrePass\n    const oit = this.needAlphaBlendingForMesh(mesh) && this.getScene().useOrderIndependentTransparency;\n    MaterialHelper.PrepareDefinesForPrePass(scene, defines, this.canRenderToMRT && !oit);\n    // Order independant transparency\n    MaterialHelper.PrepareDefinesForOIT(scene, defines, oit);\n    // Textures\n    defines.METALLICWORKFLOW = this.isMetallicWorkflow();\n    if (defines._areTexturesDirty) {\n      defines._needUVs = false;\n      for (let i = 1; i <= 6; ++i) {\n        defines[\"MAINUV\" + i] = false;\n      }\n      if (scene.texturesEnabled) {\n        defines.ALBEDODIRECTUV = 0;\n        defines.AMBIENTDIRECTUV = 0;\n        defines.OPACITYDIRECTUV = 0;\n        defines.EMISSIVEDIRECTUV = 0;\n        defines.REFLECTIVITYDIRECTUV = 0;\n        defines.MICROSURFACEMAPDIRECTUV = 0;\n        defines.METALLIC_REFLECTANCEDIRECTUV = 0;\n        defines.REFLECTANCEDIRECTUV = 0;\n        defines.BUMPDIRECTUV = 0;\n        defines.LIGHTMAPDIRECTUV = 0;\n        if (engine.getCaps().textureLOD) {\n          defines.LODBASEDMICROSFURACE = true;\n        }\n        if (this._albedoTexture && MaterialFlags.DiffuseTextureEnabled) {\n          MaterialHelper.PrepareDefinesForMergedUV(this._albedoTexture, defines, \"ALBEDO\");\n          defines.GAMMAALBEDO = this._albedoTexture.gammaSpace;\n        } else {\n          defines.ALBEDO = false;\n        }\n        if (this._ambientTexture && MaterialFlags.AmbientTextureEnabled) {\n          MaterialHelper.PrepareDefinesForMergedUV(this._ambientTexture, defines, \"AMBIENT\");\n          defines.AMBIENTINGRAYSCALE = this._useAmbientInGrayScale;\n        } else {\n          defines.AMBIENT = false;\n        }\n        if (this._opacityTexture && MaterialFlags.OpacityTextureEnabled) {\n          MaterialHelper.PrepareDefinesForMergedUV(this._opacityTexture, defines, \"OPACITY\");\n          defines.OPACITYRGB = this._opacityTexture.getAlphaFromRGB;\n        } else {\n          defines.OPACITY = false;\n        }\n        const reflectionTexture = this._getReflectionTexture();\n        if (reflectionTexture && MaterialFlags.ReflectionTextureEnabled) {\n          defines.REFLECTION = true;\n          defines.GAMMAREFLECTION = reflectionTexture.gammaSpace;\n          defines.RGBDREFLECTION = reflectionTexture.isRGBD;\n          defines.LODINREFLECTIONALPHA = reflectionTexture.lodLevelInAlpha;\n          defines.LINEARSPECULARREFLECTION = reflectionTexture.linearSpecularLOD;\n          if (this.realTimeFiltering && this.realTimeFilteringQuality > 0) {\n            defines.NUM_SAMPLES = \"\" + this.realTimeFilteringQuality;\n            if (engine._features.needTypeSuffixInShaderConstants) {\n              defines.NUM_SAMPLES = defines.NUM_SAMPLES + \"u\";\n            }\n            defines.REALTIME_FILTERING = true;\n          } else {\n            defines.REALTIME_FILTERING = false;\n          }\n          defines.INVERTCUBICMAP = reflectionTexture.coordinatesMode === Texture.INVCUBIC_MODE;\n          defines.REFLECTIONMAP_3D = reflectionTexture.isCube;\n          defines.REFLECTIONMAP_OPPOSITEZ = defines.REFLECTIONMAP_3D && this.getScene().useRightHandedSystem ? !reflectionTexture.invertZ : reflectionTexture.invertZ;\n          defines.REFLECTIONMAP_CUBIC = false;\n          defines.REFLECTIONMAP_EXPLICIT = false;\n          defines.REFLECTIONMAP_PLANAR = false;\n          defines.REFLECTIONMAP_PROJECTION = false;\n          defines.REFLECTIONMAP_SKYBOX = false;\n          defines.REFLECTIONMAP_SPHERICAL = false;\n          defines.REFLECTIONMAP_EQUIRECTANGULAR = false;\n          defines.REFLECTIONMAP_EQUIRECTANGULAR_FIXED = false;\n          defines.REFLECTIONMAP_MIRROREDEQUIRECTANGULAR_FIXED = false;\n          switch (reflectionTexture.coordinatesMode) {\n            case Texture.EXPLICIT_MODE:\n              defines.REFLECTIONMAP_EXPLICIT = true;\n              break;\n            case Texture.PLANAR_MODE:\n              defines.REFLECTIONMAP_PLANAR = true;\n              break;\n            case Texture.PROJECTION_MODE:\n              defines.REFLECTIONMAP_PROJECTION = true;\n              break;\n            case Texture.SKYBOX_MODE:\n              defines.REFLECTIONMAP_SKYBOX = true;\n              break;\n            case Texture.SPHERICAL_MODE:\n              defines.REFLECTIONMAP_SPHERICAL = true;\n              break;\n            case Texture.EQUIRECTANGULAR_MODE:\n              defines.REFLECTIONMAP_EQUIRECTANGULAR = true;\n              break;\n            case Texture.FIXED_EQUIRECTANGULAR_MODE:\n              defines.REFLECTIONMAP_EQUIRECTANGULAR_FIXED = true;\n              break;\n            case Texture.FIXED_EQUIRECTANGULAR_MIRRORED_MODE:\n              defines.REFLECTIONMAP_MIRROREDEQUIRECTANGULAR_FIXED = true;\n              break;\n            case Texture.CUBIC_MODE:\n            case Texture.INVCUBIC_MODE:\n            default:\n              defines.REFLECTIONMAP_CUBIC = true;\n              defines.USE_LOCAL_REFLECTIONMAP_CUBIC = reflectionTexture.boundingBoxSize ? true : false;\n              break;\n          }\n          if (reflectionTexture.coordinatesMode !== Texture.SKYBOX_MODE) {\n            if (reflectionTexture.irradianceTexture) {\n              defines.USEIRRADIANCEMAP = true;\n              defines.USESPHERICALFROMREFLECTIONMAP = false;\n            }\n            // Assume using spherical polynomial if the reflection texture is a cube map\n            else if (reflectionTexture.isCube) {\n              defines.USESPHERICALFROMREFLECTIONMAP = true;\n              defines.USEIRRADIANCEMAP = false;\n              if (this._forceIrradianceInFragment || this.realTimeFiltering || this._twoSidedLighting || engine.getCaps().maxVaryingVectors <= 8) {\n                defines.USESPHERICALINVERTEX = false;\n              } else {\n                defines.USESPHERICALINVERTEX = true;\n              }\n            }\n          }\n        } else {\n          defines.REFLECTION = false;\n          defines.REFLECTIONMAP_3D = false;\n          defines.REFLECTIONMAP_SPHERICAL = false;\n          defines.REFLECTIONMAP_PLANAR = false;\n          defines.REFLECTIONMAP_CUBIC = false;\n          defines.USE_LOCAL_REFLECTIONMAP_CUBIC = false;\n          defines.REFLECTIONMAP_PROJECTION = false;\n          defines.REFLECTIONMAP_SKYBOX = false;\n          defines.REFLECTIONMAP_EXPLICIT = false;\n          defines.REFLECTIONMAP_EQUIRECTANGULAR = false;\n          defines.REFLECTIONMAP_EQUIRECTANGULAR_FIXED = false;\n          defines.REFLECTIONMAP_MIRROREDEQUIRECTANGULAR_FIXED = false;\n          defines.INVERTCUBICMAP = false;\n          defines.USESPHERICALFROMREFLECTIONMAP = false;\n          defines.USEIRRADIANCEMAP = false;\n          defines.USESPHERICALINVERTEX = false;\n          defines.REFLECTIONMAP_OPPOSITEZ = false;\n          defines.LODINREFLECTIONALPHA = false;\n          defines.GAMMAREFLECTION = false;\n          defines.RGBDREFLECTION = false;\n          defines.LINEARSPECULARREFLECTION = false;\n        }\n        if (this._lightmapTexture && MaterialFlags.LightmapTextureEnabled) {\n          MaterialHelper.PrepareDefinesForMergedUV(this._lightmapTexture, defines, \"LIGHTMAP\");\n          defines.USELIGHTMAPASSHADOWMAP = this._useLightmapAsShadowmap;\n          defines.GAMMALIGHTMAP = this._lightmapTexture.gammaSpace;\n          defines.RGBDLIGHTMAP = this._lightmapTexture.isRGBD;\n        } else {\n          defines.LIGHTMAP = false;\n        }\n        if (this._emissiveTexture && MaterialFlags.EmissiveTextureEnabled) {\n          MaterialHelper.PrepareDefinesForMergedUV(this._emissiveTexture, defines, \"EMISSIVE\");\n          defines.GAMMAEMISSIVE = this._emissiveTexture.gammaSpace;\n        } else {\n          defines.EMISSIVE = false;\n        }\n        if (MaterialFlags.SpecularTextureEnabled) {\n          if (this._metallicTexture) {\n            MaterialHelper.PrepareDefinesForMergedUV(this._metallicTexture, defines, \"REFLECTIVITY\");\n            defines.ROUGHNESSSTOREINMETALMAPALPHA = this._useRoughnessFromMetallicTextureAlpha;\n            defines.ROUGHNESSSTOREINMETALMAPGREEN = !this._useRoughnessFromMetallicTextureAlpha && this._useRoughnessFromMetallicTextureGreen;\n            defines.METALLNESSSTOREINMETALMAPBLUE = this._useMetallnessFromMetallicTextureBlue;\n            defines.AOSTOREINMETALMAPRED = this._useAmbientOcclusionFromMetallicTextureRed;\n            defines.REFLECTIVITY_GAMMA = false;\n          } else if (this._reflectivityTexture) {\n            MaterialHelper.PrepareDefinesForMergedUV(this._reflectivityTexture, defines, \"REFLECTIVITY\");\n            defines.MICROSURFACEFROMREFLECTIVITYMAP = this._useMicroSurfaceFromReflectivityMapAlpha;\n            defines.MICROSURFACEAUTOMATIC = this._useAutoMicroSurfaceFromReflectivityMap;\n            defines.REFLECTIVITY_GAMMA = this._reflectivityTexture.gammaSpace;\n          } else {\n            defines.REFLECTIVITY = false;\n          }\n          if (this._metallicReflectanceTexture || this._reflectanceTexture) {\n            const identicalTextures = this._metallicReflectanceTexture !== null && this._metallicReflectanceTexture._texture === ((_a = this._reflectanceTexture) === null || _a === void 0 ? void 0 : _a._texture) && this._metallicReflectanceTexture.checkTransformsAreIdentical(this._reflectanceTexture);\n            defines.METALLIC_REFLECTANCE_USE_ALPHA_ONLY = this._useOnlyMetallicFromMetallicReflectanceTexture && !identicalTextures;\n            if (this._metallicReflectanceTexture) {\n              MaterialHelper.PrepareDefinesForMergedUV(this._metallicReflectanceTexture, defines, \"METALLIC_REFLECTANCE\");\n              defines.METALLIC_REFLECTANCE_GAMMA = this._metallicReflectanceTexture.gammaSpace;\n            } else {\n              defines.METALLIC_REFLECTANCE = false;\n            }\n            if (this._reflectanceTexture && !identicalTextures && (!this._metallicReflectanceTexture || this._metallicReflectanceTexture && this._useOnlyMetallicFromMetallicReflectanceTexture)) {\n              MaterialHelper.PrepareDefinesForMergedUV(this._reflectanceTexture, defines, \"REFLECTANCE\");\n              defines.REFLECTANCE_GAMMA = this._reflectanceTexture.gammaSpace;\n            } else {\n              defines.REFLECTANCE = false;\n            }\n          } else {\n            defines.METALLIC_REFLECTANCE = false;\n            defines.REFLECTANCE = false;\n          }\n          if (this._microSurfaceTexture) {\n            MaterialHelper.PrepareDefinesForMergedUV(this._microSurfaceTexture, defines, \"MICROSURFACEMAP\");\n          } else {\n            defines.MICROSURFACEMAP = false;\n          }\n        } else {\n          defines.REFLECTIVITY = false;\n          defines.MICROSURFACEMAP = false;\n        }\n        if (engine.getCaps().standardDerivatives && this._bumpTexture && MaterialFlags.BumpTextureEnabled && !this._disableBumpMap) {\n          MaterialHelper.PrepareDefinesForMergedUV(this._bumpTexture, defines, \"BUMP\");\n          if (this._useParallax && this._albedoTexture && MaterialFlags.DiffuseTextureEnabled) {\n            defines.PARALLAX = true;\n            defines.PARALLAX_RHS = scene.useRightHandedSystem;\n            defines.PARALLAXOCCLUSION = !!this._useParallaxOcclusion;\n          } else {\n            defines.PARALLAX = false;\n          }\n          defines.OBJECTSPACE_NORMALMAP = this._useObjectSpaceNormalMap;\n        } else {\n          defines.BUMP = false;\n          defines.PARALLAX = false;\n          defines.PARALLAX_RHS = false;\n          defines.PARALLAXOCCLUSION = false;\n          defines.OBJECTSPACE_NORMALMAP = false;\n        }\n        if (this._environmentBRDFTexture && MaterialFlags.ReflectionTextureEnabled) {\n          defines.ENVIRONMENTBRDF = true;\n          defines.ENVIRONMENTBRDF_RGBD = this._environmentBRDFTexture.isRGBD;\n        } else {\n          defines.ENVIRONMENTBRDF = false;\n          defines.ENVIRONMENTBRDF_RGBD = false;\n        }\n        if (this._shouldUseAlphaFromAlbedoTexture()) {\n          defines.ALPHAFROMALBEDO = true;\n        } else {\n          defines.ALPHAFROMALBEDO = false;\n        }\n      }\n      defines.SPECULAROVERALPHA = this._useSpecularOverAlpha;\n      if (this._lightFalloff === PBRBaseMaterial.LIGHTFALLOFF_STANDARD) {\n        defines.USEPHYSICALLIGHTFALLOFF = false;\n        defines.USEGLTFLIGHTFALLOFF = false;\n      } else if (this._lightFalloff === PBRBaseMaterial.LIGHTFALLOFF_GLTF) {\n        defines.USEPHYSICALLIGHTFALLOFF = false;\n        defines.USEGLTFLIGHTFALLOFF = true;\n      } else {\n        defines.USEPHYSICALLIGHTFALLOFF = true;\n        defines.USEGLTFLIGHTFALLOFF = false;\n      }\n      defines.RADIANCEOVERALPHA = this._useRadianceOverAlpha;\n      if (!this.backFaceCulling && this._twoSidedLighting) {\n        defines.TWOSIDEDLIGHTING = true;\n      } else {\n        defines.TWOSIDEDLIGHTING = false;\n      }\n      defines.SPECULARAA = engine.getCaps().standardDerivatives && this._enableSpecularAntiAliasing;\n    }\n    if (defines._areTexturesDirty || defines._areMiscDirty) {\n      defines.ALPHATESTVALUE = `${this._alphaCutOff}${this._alphaCutOff % 1 === 0 ? \".\" : \"\"}`;\n      defines.PREMULTIPLYALPHA = this.alphaMode === 7 || this.alphaMode === 8;\n      defines.ALPHABLEND = this.needAlphaBlendingForMesh(mesh);\n      defines.ALPHAFRESNEL = this._useAlphaFresnel || this._useLinearAlphaFresnel;\n      defines.LINEARALPHAFRESNEL = this._useLinearAlphaFresnel;\n    }\n    if (defines._areImageProcessingDirty && this._imageProcessingConfiguration) {\n      this._imageProcessingConfiguration.prepareDefines(defines);\n    }\n    defines.FORCENORMALFORWARD = this._forceNormalForward;\n    defines.RADIANCEOCCLUSION = this._useRadianceOcclusion;\n    defines.HORIZONOCCLUSION = this._useHorizonOcclusion;\n    // Misc.\n    if (defines._areMiscDirty) {\n      MaterialHelper.PrepareDefinesForMisc(mesh, scene, this._useLogarithmicDepth, this.pointsCloud, this.fogEnabled, this._shouldTurnAlphaTestOn(mesh) || this._forceAlphaTest, defines, this._applyDecalMapAfterDetailMap);\n      defines.UNLIT = this._unlit || (this.pointsCloud || this.wireframe) && !mesh.isVerticesDataPresent(VertexBuffer.NormalKind);\n      defines.DEBUGMODE = this._debugMode;\n    }\n    // Values that need to be evaluated on every frame\n    MaterialHelper.PrepareDefinesForFrameBoundValues(scene, engine, this, defines, useInstances ? true : false, useClipPlane, useThinInstances);\n    // External config\n    this._eventInfo.defines = defines;\n    this._eventInfo.mesh = mesh;\n    this._callbackPluginEventPrepareDefinesBeforeAttributes(this._eventInfo);\n    // Attribs\n    MaterialHelper.PrepareDefinesForAttributes(mesh, defines, true, true, true, this._transparencyMode !== PBRBaseMaterial.PBRMATERIAL_OPAQUE);\n    // External config\n    this._callbackPluginEventPrepareDefines(this._eventInfo);\n  }\n  /**\n   * Force shader compilation\n   * @param mesh\n   * @param onCompiled\n   * @param options\n   */\n  forceCompilation(mesh, onCompiled, options) {\n    const localOptions = Object.assign({\n      clipPlane: false,\n      useInstances: false\n    }, options);\n    if (!this._uniformBufferLayoutBuilt) {\n      this.buildUniformLayout();\n    }\n    this._callbackPluginEventGeneric(MaterialPluginEvent.GetDefineNames, this._eventInfo);\n    const defines = new PBRMaterialDefines(this._eventInfo.defineNames);\n    const effect = this._prepareEffect(mesh, defines, undefined, undefined, localOptions.useInstances, localOptions.clipPlane, mesh.hasThinInstances);\n    if (this._onEffectCreatedObservable) {\n      onCreatedEffectParameters.effect = effect;\n      onCreatedEffectParameters.subMesh = null;\n      this._onEffectCreatedObservable.notifyObservers(onCreatedEffectParameters);\n    }\n    if (effect.isReady()) {\n      if (onCompiled) {\n        onCompiled(this);\n      }\n    } else {\n      effect.onCompileObservable.add(() => {\n        if (onCompiled) {\n          onCompiled(this);\n        }\n      });\n    }\n  }\n  /**\n   * Initializes the uniform buffer layout for the shader.\n   */\n  buildUniformLayout() {\n    // Order is important !\n    const ubo = this._uniformBuffer;\n    ubo.addUniform(\"vAlbedoInfos\", 2);\n    ubo.addUniform(\"vAmbientInfos\", 4);\n    ubo.addUniform(\"vOpacityInfos\", 2);\n    ubo.addUniform(\"vEmissiveInfos\", 2);\n    ubo.addUniform(\"vLightmapInfos\", 2);\n    ubo.addUniform(\"vReflectivityInfos\", 3);\n    ubo.addUniform(\"vMicroSurfaceSamplerInfos\", 2);\n    ubo.addUniform(\"vReflectionInfos\", 2);\n    ubo.addUniform(\"vReflectionFilteringInfo\", 2);\n    ubo.addUniform(\"vReflectionPosition\", 3);\n    ubo.addUniform(\"vReflectionSize\", 3);\n    ubo.addUniform(\"vBumpInfos\", 3);\n    ubo.addUniform(\"albedoMatrix\", 16);\n    ubo.addUniform(\"ambientMatrix\", 16);\n    ubo.addUniform(\"opacityMatrix\", 16);\n    ubo.addUniform(\"emissiveMatrix\", 16);\n    ubo.addUniform(\"lightmapMatrix\", 16);\n    ubo.addUniform(\"reflectivityMatrix\", 16);\n    ubo.addUniform(\"microSurfaceSamplerMatrix\", 16);\n    ubo.addUniform(\"bumpMatrix\", 16);\n    ubo.addUniform(\"vTangentSpaceParams\", 2);\n    ubo.addUniform(\"reflectionMatrix\", 16);\n    ubo.addUniform(\"vReflectionColor\", 3);\n    ubo.addUniform(\"vAlbedoColor\", 4);\n    ubo.addUniform(\"vLightingIntensity\", 4);\n    ubo.addUniform(\"vReflectionMicrosurfaceInfos\", 3);\n    ubo.addUniform(\"pointSize\", 1);\n    ubo.addUniform(\"vReflectivityColor\", 4);\n    ubo.addUniform(\"vEmissiveColor\", 3);\n    ubo.addUniform(\"vAmbientColor\", 3);\n    ubo.addUniform(\"vDebugMode\", 2);\n    ubo.addUniform(\"vMetallicReflectanceFactors\", 4);\n    ubo.addUniform(\"vMetallicReflectanceInfos\", 2);\n    ubo.addUniform(\"metallicReflectanceMatrix\", 16);\n    ubo.addUniform(\"vReflectanceInfos\", 2);\n    ubo.addUniform(\"reflectanceMatrix\", 16);\n    ubo.addUniform(\"vSphericalL00\", 3);\n    ubo.addUniform(\"vSphericalL1_1\", 3);\n    ubo.addUniform(\"vSphericalL10\", 3);\n    ubo.addUniform(\"vSphericalL11\", 3);\n    ubo.addUniform(\"vSphericalL2_2\", 3);\n    ubo.addUniform(\"vSphericalL2_1\", 3);\n    ubo.addUniform(\"vSphericalL20\", 3);\n    ubo.addUniform(\"vSphericalL21\", 3);\n    ubo.addUniform(\"vSphericalL22\", 3);\n    ubo.addUniform(\"vSphericalX\", 3);\n    ubo.addUniform(\"vSphericalY\", 3);\n    ubo.addUniform(\"vSphericalZ\", 3);\n    ubo.addUniform(\"vSphericalXX_ZZ\", 3);\n    ubo.addUniform(\"vSphericalYY_ZZ\", 3);\n    ubo.addUniform(\"vSphericalZZ\", 3);\n    ubo.addUniform(\"vSphericalXY\", 3);\n    ubo.addUniform(\"vSphericalYZ\", 3);\n    ubo.addUniform(\"vSphericalZX\", 3);\n    super.buildUniformLayout();\n  }\n  /**\n   * Binds the submesh data.\n   * @param world - The world matrix.\n   * @param mesh - The BJS mesh.\n   * @param subMesh - A submesh of the BJS mesh.\n   */\n  bindForSubMesh(world, mesh, subMesh) {\n    var _a, _b, _c, _d;\n    const scene = this.getScene();\n    const defines = subMesh.materialDefines;\n    if (!defines) {\n      return;\n    }\n    const effect = subMesh.effect;\n    if (!effect) {\n      return;\n    }\n    this._activeEffect = effect;\n    // Matrices Mesh.\n    mesh.getMeshUniformBuffer().bindToEffect(effect, \"Mesh\");\n    mesh.transferToEffect(world);\n    const engine = scene.getEngine();\n    // Binding unconditionally\n    this._uniformBuffer.bindToEffect(effect, \"Material\");\n    this.prePassConfiguration.bindForSubMesh(this._activeEffect, scene, mesh, world, this.isFrozen);\n    this._eventInfo.subMesh = subMesh;\n    this._callbackPluginEventHardBindForSubMesh(this._eventInfo);\n    // Normal Matrix\n    if (defines.OBJECTSPACE_NORMALMAP) {\n      world.toNormalMatrix(this._normalMatrix);\n      this.bindOnlyNormalMatrix(this._normalMatrix);\n    }\n    const mustRebind = effect._forceRebindOnNextCall || this._mustRebind(scene, effect, mesh.visibility);\n    // Bones\n    MaterialHelper.BindBonesParameters(mesh, this._activeEffect, this.prePassConfiguration);\n    let reflectionTexture = null;\n    const ubo = this._uniformBuffer;\n    if (mustRebind) {\n      this.bindViewProjection(effect);\n      reflectionTexture = this._getReflectionTexture();\n      if (!ubo.useUbo || !this.isFrozen || !ubo.isSync || effect._forceRebindOnNextCall) {\n        // Texture uniforms\n        if (scene.texturesEnabled) {\n          if (this._albedoTexture && MaterialFlags.DiffuseTextureEnabled) {\n            ubo.updateFloat2(\"vAlbedoInfos\", this._albedoTexture.coordinatesIndex, this._albedoTexture.level);\n            MaterialHelper.BindTextureMatrix(this._albedoTexture, ubo, \"albedo\");\n          }\n          if (this._ambientTexture && MaterialFlags.AmbientTextureEnabled) {\n            ubo.updateFloat4(\"vAmbientInfos\", this._ambientTexture.coordinatesIndex, this._ambientTexture.level, this._ambientTextureStrength, this._ambientTextureImpactOnAnalyticalLights);\n            MaterialHelper.BindTextureMatrix(this._ambientTexture, ubo, \"ambient\");\n          }\n          if (this._opacityTexture && MaterialFlags.OpacityTextureEnabled) {\n            ubo.updateFloat2(\"vOpacityInfos\", this._opacityTexture.coordinatesIndex, this._opacityTexture.level);\n            MaterialHelper.BindTextureMatrix(this._opacityTexture, ubo, \"opacity\");\n          }\n          if (reflectionTexture && MaterialFlags.ReflectionTextureEnabled) {\n            ubo.updateMatrix(\"reflectionMatrix\", reflectionTexture.getReflectionTextureMatrix());\n            ubo.updateFloat2(\"vReflectionInfos\", reflectionTexture.level, 0);\n            if (reflectionTexture.boundingBoxSize) {\n              const cubeTexture = reflectionTexture;\n              ubo.updateVector3(\"vReflectionPosition\", cubeTexture.boundingBoxPosition);\n              ubo.updateVector3(\"vReflectionSize\", cubeTexture.boundingBoxSize);\n            }\n            if (this.realTimeFiltering) {\n              const width = reflectionTexture.getSize().width;\n              ubo.updateFloat2(\"vReflectionFilteringInfo\", width, Scalar.Log2(width));\n            }\n            if (!defines.USEIRRADIANCEMAP) {\n              const polynomials = reflectionTexture.sphericalPolynomial;\n              if (defines.USESPHERICALFROMREFLECTIONMAP && polynomials) {\n                if (defines.SPHERICAL_HARMONICS) {\n                  const preScaledHarmonics = polynomials.preScaledHarmonics;\n                  ubo.updateVector3(\"vSphericalL00\", preScaledHarmonics.l00);\n                  ubo.updateVector3(\"vSphericalL1_1\", preScaledHarmonics.l1_1);\n                  ubo.updateVector3(\"vSphericalL10\", preScaledHarmonics.l10);\n                  ubo.updateVector3(\"vSphericalL11\", preScaledHarmonics.l11);\n                  ubo.updateVector3(\"vSphericalL2_2\", preScaledHarmonics.l2_2);\n                  ubo.updateVector3(\"vSphericalL2_1\", preScaledHarmonics.l2_1);\n                  ubo.updateVector3(\"vSphericalL20\", preScaledHarmonics.l20);\n                  ubo.updateVector3(\"vSphericalL21\", preScaledHarmonics.l21);\n                  ubo.updateVector3(\"vSphericalL22\", preScaledHarmonics.l22);\n                } else {\n                  ubo.updateFloat3(\"vSphericalX\", polynomials.x.x, polynomials.x.y, polynomials.x.z);\n                  ubo.updateFloat3(\"vSphericalY\", polynomials.y.x, polynomials.y.y, polynomials.y.z);\n                  ubo.updateFloat3(\"vSphericalZ\", polynomials.z.x, polynomials.z.y, polynomials.z.z);\n                  ubo.updateFloat3(\"vSphericalXX_ZZ\", polynomials.xx.x - polynomials.zz.x, polynomials.xx.y - polynomials.zz.y, polynomials.xx.z - polynomials.zz.z);\n                  ubo.updateFloat3(\"vSphericalYY_ZZ\", polynomials.yy.x - polynomials.zz.x, polynomials.yy.y - polynomials.zz.y, polynomials.yy.z - polynomials.zz.z);\n                  ubo.updateFloat3(\"vSphericalZZ\", polynomials.zz.x, polynomials.zz.y, polynomials.zz.z);\n                  ubo.updateFloat3(\"vSphericalXY\", polynomials.xy.x, polynomials.xy.y, polynomials.xy.z);\n                  ubo.updateFloat3(\"vSphericalYZ\", polynomials.yz.x, polynomials.yz.y, polynomials.yz.z);\n                  ubo.updateFloat3(\"vSphericalZX\", polynomials.zx.x, polynomials.zx.y, polynomials.zx.z);\n                }\n              }\n            }\n            ubo.updateFloat3(\"vReflectionMicrosurfaceInfos\", reflectionTexture.getSize().width, reflectionTexture.lodGenerationScale, reflectionTexture.lodGenerationOffset);\n          }\n          if (this._emissiveTexture && MaterialFlags.EmissiveTextureEnabled) {\n            ubo.updateFloat2(\"vEmissiveInfos\", this._emissiveTexture.coordinatesIndex, this._emissiveTexture.level);\n            MaterialHelper.BindTextureMatrix(this._emissiveTexture, ubo, \"emissive\");\n          }\n          if (this._lightmapTexture && MaterialFlags.LightmapTextureEnabled) {\n            ubo.updateFloat2(\"vLightmapInfos\", this._lightmapTexture.coordinatesIndex, this._lightmapTexture.level);\n            MaterialHelper.BindTextureMatrix(this._lightmapTexture, ubo, \"lightmap\");\n          }\n          if (MaterialFlags.SpecularTextureEnabled) {\n            if (this._metallicTexture) {\n              ubo.updateFloat3(\"vReflectivityInfos\", this._metallicTexture.coordinatesIndex, this._metallicTexture.level, this._ambientTextureStrength);\n              MaterialHelper.BindTextureMatrix(this._metallicTexture, ubo, \"reflectivity\");\n            } else if (this._reflectivityTexture) {\n              ubo.updateFloat3(\"vReflectivityInfos\", this._reflectivityTexture.coordinatesIndex, this._reflectivityTexture.level, 1.0);\n              MaterialHelper.BindTextureMatrix(this._reflectivityTexture, ubo, \"reflectivity\");\n            }\n            if (this._metallicReflectanceTexture) {\n              ubo.updateFloat2(\"vMetallicReflectanceInfos\", this._metallicReflectanceTexture.coordinatesIndex, this._metallicReflectanceTexture.level);\n              MaterialHelper.BindTextureMatrix(this._metallicReflectanceTexture, ubo, \"metallicReflectance\");\n            }\n            if (this._reflectanceTexture && defines.REFLECTANCE) {\n              ubo.updateFloat2(\"vReflectanceInfos\", this._reflectanceTexture.coordinatesIndex, this._reflectanceTexture.level);\n              MaterialHelper.BindTextureMatrix(this._reflectanceTexture, ubo, \"reflectance\");\n            }\n            if (this._microSurfaceTexture) {\n              ubo.updateFloat2(\"vMicroSurfaceSamplerInfos\", this._microSurfaceTexture.coordinatesIndex, this._microSurfaceTexture.level);\n              MaterialHelper.BindTextureMatrix(this._microSurfaceTexture, ubo, \"microSurfaceSampler\");\n            }\n          }\n          if (this._bumpTexture && engine.getCaps().standardDerivatives && MaterialFlags.BumpTextureEnabled && !this._disableBumpMap) {\n            ubo.updateFloat3(\"vBumpInfos\", this._bumpTexture.coordinatesIndex, this._bumpTexture.level, this._parallaxScaleBias);\n            MaterialHelper.BindTextureMatrix(this._bumpTexture, ubo, \"bump\");\n            if (scene._mirroredCameraPosition) {\n              ubo.updateFloat2(\"vTangentSpaceParams\", this._invertNormalMapX ? 1.0 : -1.0, this._invertNormalMapY ? 1.0 : -1.0);\n            } else {\n              ubo.updateFloat2(\"vTangentSpaceParams\", this._invertNormalMapX ? -1.0 : 1.0, this._invertNormalMapY ? -1.0 : 1.0);\n            }\n          }\n        }\n        // Point size\n        if (this.pointsCloud) {\n          ubo.updateFloat(\"pointSize\", this.pointSize);\n        }\n        // Colors\n        if (defines.METALLICWORKFLOW) {\n          TmpColors.Color3[0].r = this._metallic === undefined || this._metallic === null ? 1 : this._metallic;\n          TmpColors.Color3[0].g = this._roughness === undefined || this._roughness === null ? 1 : this._roughness;\n          ubo.updateColor4(\"vReflectivityColor\", TmpColors.Color3[0], 1);\n          const ior = (_b = (_a = this.subSurface) === null || _a === void 0 ? void 0 : _a._indexOfRefraction) !== null && _b !== void 0 ? _b : 1.5;\n          const outsideIOR = 1; // consider air as clear coat and other layers would remap in the shader.\n          // We are here deriving our default reflectance from a common value for none metallic surface.\n          // Based of the schlick fresnel approximation model\n          // for dielectrics.\n          const f0 = Math.pow((ior - outsideIOR) / (ior + outsideIOR), 2);\n          // Tweak the default F0 and F90 based on our given setup\n          this._metallicReflectanceColor.scaleToRef(f0 * this._metallicF0Factor, TmpColors.Color3[0]);\n          const metallicF90 = this._metallicF0Factor;\n          ubo.updateColor4(\"vMetallicReflectanceFactors\", TmpColors.Color3[0], metallicF90);\n        } else {\n          ubo.updateColor4(\"vReflectivityColor\", this._reflectivityColor, this._microSurface);\n        }\n        ubo.updateColor3(\"vEmissiveColor\", MaterialFlags.EmissiveTextureEnabled ? this._emissiveColor : Color3.BlackReadOnly);\n        ubo.updateColor3(\"vReflectionColor\", this._reflectionColor);\n        if (!defines.SS_REFRACTION && ((_c = this.subSurface) === null || _c === void 0 ? void 0 : _c._linkRefractionWithTransparency)) {\n          ubo.updateColor4(\"vAlbedoColor\", this._albedoColor, 1);\n        } else {\n          ubo.updateColor4(\"vAlbedoColor\", this._albedoColor, this.alpha);\n        }\n        // Misc\n        this._lightingInfos.x = this._directIntensity;\n        this._lightingInfos.y = this._emissiveIntensity;\n        this._lightingInfos.z = this._environmentIntensity * scene.environmentIntensity;\n        this._lightingInfos.w = this._specularIntensity;\n        ubo.updateVector4(\"vLightingIntensity\", this._lightingInfos);\n        // Colors\n        scene.ambientColor.multiplyToRef(this._ambientColor, this._globalAmbientColor);\n        ubo.updateColor3(\"vAmbientColor\", this._globalAmbientColor);\n        ubo.updateFloat2(\"vDebugMode\", this.debugLimit, this.debugFactor);\n      }\n      // Textures\n      if (scene.texturesEnabled) {\n        if (this._albedoTexture && MaterialFlags.DiffuseTextureEnabled) {\n          ubo.setTexture(\"albedoSampler\", this._albedoTexture);\n        }\n        if (this._ambientTexture && MaterialFlags.AmbientTextureEnabled) {\n          ubo.setTexture(\"ambientSampler\", this._ambientTexture);\n        }\n        if (this._opacityTexture && MaterialFlags.OpacityTextureEnabled) {\n          ubo.setTexture(\"opacitySampler\", this._opacityTexture);\n        }\n        if (reflectionTexture && MaterialFlags.ReflectionTextureEnabled) {\n          if (defines.LODBASEDMICROSFURACE) {\n            ubo.setTexture(\"reflectionSampler\", reflectionTexture);\n          } else {\n            ubo.setTexture(\"reflectionSampler\", reflectionTexture._lodTextureMid || reflectionTexture);\n            ubo.setTexture(\"reflectionSamplerLow\", reflectionTexture._lodTextureLow || reflectionTexture);\n            ubo.setTexture(\"reflectionSamplerHigh\", reflectionTexture._lodTextureHigh || reflectionTexture);\n          }\n          if (defines.USEIRRADIANCEMAP) {\n            ubo.setTexture(\"irradianceSampler\", reflectionTexture.irradianceTexture);\n          }\n        }\n        if (defines.ENVIRONMENTBRDF) {\n          ubo.setTexture(\"environmentBrdfSampler\", this._environmentBRDFTexture);\n        }\n        if (this._emissiveTexture && MaterialFlags.EmissiveTextureEnabled) {\n          ubo.setTexture(\"emissiveSampler\", this._emissiveTexture);\n        }\n        if (this._lightmapTexture && MaterialFlags.LightmapTextureEnabled) {\n          ubo.setTexture(\"lightmapSampler\", this._lightmapTexture);\n        }\n        if (MaterialFlags.SpecularTextureEnabled) {\n          if (this._metallicTexture) {\n            ubo.setTexture(\"reflectivitySampler\", this._metallicTexture);\n          } else if (this._reflectivityTexture) {\n            ubo.setTexture(\"reflectivitySampler\", this._reflectivityTexture);\n          }\n          if (this._metallicReflectanceTexture) {\n            ubo.setTexture(\"metallicReflectanceSampler\", this._metallicReflectanceTexture);\n          }\n          if (this._reflectanceTexture && defines.REFLECTANCE) {\n            ubo.setTexture(\"reflectanceSampler\", this._reflectanceTexture);\n          }\n          if (this._microSurfaceTexture) {\n            ubo.setTexture(\"microSurfaceSampler\", this._microSurfaceTexture);\n          }\n        }\n        if (this._bumpTexture && engine.getCaps().standardDerivatives && MaterialFlags.BumpTextureEnabled && !this._disableBumpMap) {\n          ubo.setTexture(\"bumpSampler\", this._bumpTexture);\n        }\n      }\n      // OIT with depth peeling\n      if (this.getScene().useOrderIndependentTransparency && this.needAlphaBlendingForMesh(mesh)) {\n        this.getScene().depthPeelingRenderer.bind(effect);\n      }\n      this._eventInfo.subMesh = subMesh;\n      this._callbackPluginEventBindForSubMesh(this._eventInfo);\n      // Clip plane\n      bindClipPlane(this._activeEffect, this, scene);\n      this.bindEyePosition(effect);\n    } else if (scene.getEngine()._features.needToAlwaysBindUniformBuffers) {\n      this._needToBindSceneUbo = true;\n    }\n    if (mustRebind || !this.isFrozen) {\n      // Lights\n      if (scene.lightsEnabled && !this._disableLighting) {\n        MaterialHelper.BindLights(scene, mesh, this._activeEffect, defines, this._maxSimultaneousLights);\n      }\n      // View\n      if (scene.fogEnabled && mesh.applyFog && scene.fogMode !== Scene.FOGMODE_NONE || reflectionTexture || this.subSurface.refractionTexture || mesh.receiveShadows || defines.PREPASS) {\n        this.bindView(effect);\n      }\n      // Fog\n      MaterialHelper.BindFogParameters(scene, mesh, this._activeEffect, true);\n      // Morph targets\n      if (defines.NUM_MORPH_INFLUENCERS) {\n        MaterialHelper.BindMorphTargetParameters(mesh, this._activeEffect);\n      }\n      if (defines.BAKED_VERTEX_ANIMATION_TEXTURE) {\n        (_d = mesh.bakedVertexAnimationManager) === null || _d === void 0 ? void 0 : _d.bind(effect, defines.INSTANCES);\n      }\n      // image processing\n      this._imageProcessingConfiguration.bind(this._activeEffect);\n      // Log. depth\n      MaterialHelper.BindLogDepth(defines, this._activeEffect, scene);\n    }\n    this._afterBind(mesh, this._activeEffect);\n    ubo.update();\n  }\n  /**\n   * Returns the animatable textures.\n   * If material have animatable metallic texture, then reflectivity texture will not be returned, even if it has animations.\n   * @returns - Array of animatable textures.\n   */\n  getAnimatables() {\n    const results = super.getAnimatables();\n    if (this._albedoTexture && this._albedoTexture.animations && this._albedoTexture.animations.length > 0) {\n      results.push(this._albedoTexture);\n    }\n    if (this._ambientTexture && this._ambientTexture.animations && this._ambientTexture.animations.length > 0) {\n      results.push(this._ambientTexture);\n    }\n    if (this._opacityTexture && this._opacityTexture.animations && this._opacityTexture.animations.length > 0) {\n      results.push(this._opacityTexture);\n    }\n    if (this._reflectionTexture && this._reflectionTexture.animations && this._reflectionTexture.animations.length > 0) {\n      results.push(this._reflectionTexture);\n    }\n    if (this._emissiveTexture && this._emissiveTexture.animations && this._emissiveTexture.animations.length > 0) {\n      results.push(this._emissiveTexture);\n    }\n    if (this._metallicTexture && this._metallicTexture.animations && this._metallicTexture.animations.length > 0) {\n      results.push(this._metallicTexture);\n    } else if (this._reflectivityTexture && this._reflectivityTexture.animations && this._reflectivityTexture.animations.length > 0) {\n      results.push(this._reflectivityTexture);\n    }\n    if (this._bumpTexture && this._bumpTexture.animations && this._bumpTexture.animations.length > 0) {\n      results.push(this._bumpTexture);\n    }\n    if (this._lightmapTexture && this._lightmapTexture.animations && this._lightmapTexture.animations.length > 0) {\n      results.push(this._lightmapTexture);\n    }\n    if (this._metallicReflectanceTexture && this._metallicReflectanceTexture.animations && this._metallicReflectanceTexture.animations.length > 0) {\n      results.push(this._metallicReflectanceTexture);\n    }\n    if (this._reflectanceTexture && this._reflectanceTexture.animations && this._reflectanceTexture.animations.length > 0) {\n      results.push(this._reflectanceTexture);\n    }\n    if (this._microSurfaceTexture && this._microSurfaceTexture.animations && this._microSurfaceTexture.animations.length > 0) {\n      results.push(this._microSurfaceTexture);\n    }\n    return results;\n  }\n  /**\n   * Returns the texture used for reflections.\n   * @returns - Reflection texture if present.  Otherwise, returns the environment texture.\n   */\n  _getReflectionTexture() {\n    if (this._reflectionTexture) {\n      return this._reflectionTexture;\n    }\n    return this.getScene().environmentTexture;\n  }\n  /**\n   * Returns an array of the actively used textures.\n   * @returns - Array of BaseTextures\n   */\n  getActiveTextures() {\n    const activeTextures = super.getActiveTextures();\n    if (this._albedoTexture) {\n      activeTextures.push(this._albedoTexture);\n    }\n    if (this._ambientTexture) {\n      activeTextures.push(this._ambientTexture);\n    }\n    if (this._opacityTexture) {\n      activeTextures.push(this._opacityTexture);\n    }\n    if (this._reflectionTexture) {\n      activeTextures.push(this._reflectionTexture);\n    }\n    if (this._emissiveTexture) {\n      activeTextures.push(this._emissiveTexture);\n    }\n    if (this._reflectivityTexture) {\n      activeTextures.push(this._reflectivityTexture);\n    }\n    if (this._metallicTexture) {\n      activeTextures.push(this._metallicTexture);\n    }\n    if (this._metallicReflectanceTexture) {\n      activeTextures.push(this._metallicReflectanceTexture);\n    }\n    if (this._reflectanceTexture) {\n      activeTextures.push(this._reflectanceTexture);\n    }\n    if (this._microSurfaceTexture) {\n      activeTextures.push(this._microSurfaceTexture);\n    }\n    if (this._bumpTexture) {\n      activeTextures.push(this._bumpTexture);\n    }\n    if (this._lightmapTexture) {\n      activeTextures.push(this._lightmapTexture);\n    }\n    return activeTextures;\n  }\n  /**\n   * Checks to see if a texture is used in the material.\n   * @param texture - Base texture to use.\n   * @returns - Boolean specifying if a texture is used in the material.\n   */\n  hasTexture(texture) {\n    if (super.hasTexture(texture)) {\n      return true;\n    }\n    if (this._albedoTexture === texture) {\n      return true;\n    }\n    if (this._ambientTexture === texture) {\n      return true;\n    }\n    if (this._opacityTexture === texture) {\n      return true;\n    }\n    if (this._reflectionTexture === texture) {\n      return true;\n    }\n    if (this._emissiveTexture === texture) {\n      return true;\n    }\n    if (this._reflectivityTexture === texture) {\n      return true;\n    }\n    if (this._metallicTexture === texture) {\n      return true;\n    }\n    if (this._metallicReflectanceTexture === texture) {\n      return true;\n    }\n    if (this._reflectanceTexture === texture) {\n      return true;\n    }\n    if (this._microSurfaceTexture === texture) {\n      return true;\n    }\n    if (this._bumpTexture === texture) {\n      return true;\n    }\n    if (this._lightmapTexture === texture) {\n      return true;\n    }\n    return false;\n  }\n  /**\n   * Sets the required values to the prepass renderer.\n   * It can't be sets when subsurface scattering of this material is disabled.\n   * When scene have ability to enable subsurface prepass effect, it will enable.\n   */\n  setPrePassRenderer() {\n    var _a;\n    if (!((_a = this.subSurface) === null || _a === void 0 ? void 0 : _a.isScatteringEnabled)) {\n      return false;\n    }\n    const subSurfaceConfiguration = this.getScene().enableSubSurfaceForPrePass();\n    if (subSurfaceConfiguration) {\n      subSurfaceConfiguration.enabled = true;\n    }\n    return true;\n  }\n  /**\n   * Disposes the resources of the material.\n   * @param forceDisposeEffect - Forces the disposal of effects.\n   * @param forceDisposeTextures - Forces the disposal of all textures.\n   */\n  dispose(forceDisposeEffect, forceDisposeTextures) {\n    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m;\n    if (forceDisposeTextures) {\n      if (this._environmentBRDFTexture && this.getScene().environmentBRDFTexture !== this._environmentBRDFTexture) {\n        this._environmentBRDFTexture.dispose();\n      }\n      (_a = this._albedoTexture) === null || _a === void 0 ? void 0 : _a.dispose();\n      (_b = this._ambientTexture) === null || _b === void 0 ? void 0 : _b.dispose();\n      (_c = this._opacityTexture) === null || _c === void 0 ? void 0 : _c.dispose();\n      (_d = this._reflectionTexture) === null || _d === void 0 ? void 0 : _d.dispose();\n      (_e = this._emissiveTexture) === null || _e === void 0 ? void 0 : _e.dispose();\n      (_f = this._metallicTexture) === null || _f === void 0 ? void 0 : _f.dispose();\n      (_g = this._reflectivityTexture) === null || _g === void 0 ? void 0 : _g.dispose();\n      (_h = this._bumpTexture) === null || _h === void 0 ? void 0 : _h.dispose();\n      (_j = this._lightmapTexture) === null || _j === void 0 ? void 0 : _j.dispose();\n      (_k = this._metallicReflectanceTexture) === null || _k === void 0 ? void 0 : _k.dispose();\n      (_l = this._reflectanceTexture) === null || _l === void 0 ? void 0 : _l.dispose();\n      (_m = this._microSurfaceTexture) === null || _m === void 0 ? void 0 : _m.dispose();\n    }\n    this._renderTargets.dispose();\n    if (this._imageProcessingConfiguration && this._imageProcessingObserver) {\n      this._imageProcessingConfiguration.onUpdateParameters.remove(this._imageProcessingObserver);\n    }\n    super.dispose(forceDisposeEffect, forceDisposeTextures);\n  }\n}\n/**\n * PBRMaterialTransparencyMode: No transparency mode, Alpha channel is not use.\n */\nPBRBaseMaterial.PBRMATERIAL_OPAQUE = Material.MATERIAL_OPAQUE;\n/**\n * PBRMaterialTransparencyMode: Alpha Test mode, pixel are discarded below a certain threshold defined by the alpha cutoff value.\n */\nPBRBaseMaterial.PBRMATERIAL_ALPHATEST = Material.MATERIAL_ALPHATEST;\n/**\n * PBRMaterialTransparencyMode: Pixels are blended (according to the alpha mode) with the already drawn pixels in the current frame buffer.\n */\nPBRBaseMaterial.PBRMATERIAL_ALPHABLEND = Material.MATERIAL_ALPHABLEND;\n/**\n * PBRMaterialTransparencyMode: Pixels are blended (according to the alpha mode) with the already drawn pixels in the current frame buffer.\n * They are also discarded below the alpha cutoff threshold to improve performances.\n */\nPBRBaseMaterial.PBRMATERIAL_ALPHATESTANDBLEND = Material.MATERIAL_ALPHATESTANDBLEND;\n/**\n * Defines the default value of how much AO map is occluding the analytical lights\n * (point spot...).\n */\nPBRBaseMaterial.DEFAULT_AO_ON_ANALYTICAL_LIGHTS = 0;\n/**\n * PBRMaterialLightFalloff Physical: light is falling off following the inverse squared distance law.\n */\nPBRBaseMaterial.LIGHTFALLOFF_PHYSICAL = 0;\n/**\n * PBRMaterialLightFalloff gltf: light is falling off as described in the gltf moving to PBR document\n * to enhance interoperability with other engines.\n */\nPBRBaseMaterial.LIGHTFALLOFF_GLTF = 1;\n/**\n * PBRMaterialLightFalloff Standard: light is falling off like in the standard material\n * to enhance interoperability with other materials.\n */\nPBRBaseMaterial.LIGHTFALLOFF_STANDARD = 2;\n__decorate([serializeAsImageProcessingConfiguration()], PBRBaseMaterial.prototype, \"_imageProcessingConfiguration\", void 0);\n__decorate([expandToProperty(\"_markAllSubMeshesAsMiscDirty\")], PBRBaseMaterial.prototype, \"debugMode\", void 0);\n__decorate([serialize()], PBRBaseMaterial.prototype, \"useLogarithmicDepth\", null);","map":{"version":3,"names":["serialize","serializeAsImageProcessingConfiguration","expandToProperty","Logger","SmartArray","GetEnvironmentBRDFTexture","Scene","Vector4","VertexBuffer","PBRBRDFConfiguration","PrePassConfiguration","Color3","TmpColors","Scalar","ImageProcessingConfiguration","Material","MaterialPluginEvent","MaterialDefines","PushMaterial","MaterialHelper","Texture","MaterialFlags","EffectFallbacks","PBRClearCoatConfiguration","PBRIridescenceConfiguration","PBRAnisotropicConfiguration","PBRSheenConfiguration","PBRSubSurfaceConfiguration","DetailMapConfiguration","addClipPlaneUniforms","bindClipPlane","onCreatedEffectParameters","effect","subMesh","PBRMaterialDefines","constructor","externalProperties","PBR","NUM_SAMPLES","REALTIME_FILTERING","MAINUV1","MAINUV2","MAINUV3","MAINUV4","MAINUV5","MAINUV6","UV1","UV2","UV3","UV4","UV5","UV6","ALBEDO","GAMMAALBEDO","ALBEDODIRECTUV","VERTEXCOLOR","BAKED_VERTEX_ANIMATION_TEXTURE","AMBIENT","AMBIENTDIRECTUV","AMBIENTINGRAYSCALE","OPACITY","VERTEXALPHA","OPACITYDIRECTUV","OPACITYRGB","ALPHATEST","DEPTHPREPASS","ALPHABLEND","ALPHAFROMALBEDO","ALPHATESTVALUE","SPECULAROVERALPHA","RADIANCEOVERALPHA","ALPHAFRESNEL","LINEARALPHAFRESNEL","PREMULTIPLYALPHA","EMISSIVE","EMISSIVEDIRECTUV","GAMMAEMISSIVE","REFLECTIVITY","REFLECTIVITY_GAMMA","REFLECTIVITYDIRECTUV","SPECULARTERM","MICROSURFACEFROMREFLECTIVITYMAP","MICROSURFACEAUTOMATIC","LODBASEDMICROSFURACE","MICROSURFACEMAP","MICROSURFACEMAPDIRECTUV","METALLICWORKFLOW","ROUGHNESSSTOREINMETALMAPALPHA","ROUGHNESSSTOREINMETALMAPGREEN","METALLNESSSTOREINMETALMAPBLUE","AOSTOREINMETALMAPRED","METALLIC_REFLECTANCE","METALLIC_REFLECTANCE_GAMMA","METALLIC_REFLECTANCEDIRECTUV","METALLIC_REFLECTANCE_USE_ALPHA_ONLY","REFLECTANCE","REFLECTANCE_GAMMA","REFLECTANCEDIRECTUV","ENVIRONMENTBRDF","ENVIRONMENTBRDF_RGBD","NORMAL","TANGENT","BUMP","BUMPDIRECTUV","OBJECTSPACE_NORMALMAP","PARALLAX","PARALLAX_RHS","PARALLAXOCCLUSION","NORMALXYSCALE","LIGHTMAP","LIGHTMAPDIRECTUV","USELIGHTMAPASSHADOWMAP","GAMMALIGHTMAP","RGBDLIGHTMAP","REFLECTION","REFLECTIONMAP_3D","REFLECTIONMAP_SPHERICAL","REFLECTIONMAP_PLANAR","REFLECTIONMAP_CUBIC","USE_LOCAL_REFLECTIONMAP_CUBIC","REFLECTIONMAP_PROJECTION","REFLECTIONMAP_SKYBOX","REFLECTIONMAP_EXPLICIT","REFLECTIONMAP_EQUIRECTANGULAR","REFLECTIONMAP_EQUIRECTANGULAR_FIXED","REFLECTIONMAP_MIRROREDEQUIRECTANGULAR_FIXED","INVERTCUBICMAP","USESPHERICALFROMREFLECTIONMAP","USEIRRADIANCEMAP","USESPHERICALINVERTEX","REFLECTIONMAP_OPPOSITEZ","LODINREFLECTIONALPHA","GAMMAREFLECTION","RGBDREFLECTION","LINEARSPECULARREFLECTION","RADIANCEOCCLUSION","HORIZONOCCLUSION","INSTANCES","THIN_INSTANCES","INSTANCESCOLOR","PREPASS","PREPASS_IRRADIANCE","PREPASS_IRRADIANCE_INDEX","PREPASS_ALBEDO_SQRT","PREPASS_ALBEDO_SQRT_INDEX","PREPASS_DEPTH","PREPASS_DEPTH_INDEX","PREPASS_NORMAL","PREPASS_NORMAL_INDEX","PREPASS_NORMAL_WORLDSPACE","PREPASS_POSITION","PREPASS_POSITION_INDEX","PREPASS_VELOCITY","PREPASS_VELOCITY_INDEX","PREPASS_REFLECTIVITY","PREPASS_REFLECTIVITY_INDEX","SCENE_MRT_COUNT","NUM_BONE_INFLUENCERS","BonesPerMesh","BONETEXTURE","BONES_VELOCITY_ENABLED","NONUNIFORMSCALING","MORPHTARGETS","MORPHTARGETS_NORMAL","MORPHTARGETS_TANGENT","MORPHTARGETS_UV","NUM_MORPH_INFLUENCERS","MORPHTARGETS_TEXTURE","IMAGEPROCESSING","VIGNETTE","VIGNETTEBLENDMODEMULTIPLY","VIGNETTEBLENDMODEOPAQUE","TONEMAPPING","TONEMAPPING_ACES","CONTRAST","COLORCURVES","COLORGRADING","COLORGRADING3D","SAMPLER3DGREENDEPTH","SAMPLER3DBGRMAP","DITHER","IMAGEPROCESSINGPOSTPROCESS","SKIPFINALCOLORCLAMP","EXPOSURE","MULTIVIEW","ORDER_INDEPENDENT_TRANSPARENCY","ORDER_INDEPENDENT_TRANSPARENCY_16BITS","USEPHYSICALLIGHTFALLOFF","USEGLTFLIGHTFALLOFF","TWOSIDEDLIGHTING","SHADOWFLOAT","CLIPPLANE","CLIPPLANE2","CLIPPLANE3","CLIPPLANE4","CLIPPLANE5","CLIPPLANE6","POINTSIZE","FOG","LOGARITHMICDEPTH","CAMERA_ORTHOGRAPHIC","CAMERA_PERSPECTIVE","FORCENORMALFORWARD","SPECULARAA","UNLIT","DECAL_AFTER_DETAIL","DEBUGMODE","rebuild","reset","PBRBaseMaterial","realTimeFiltering","_realTimeFiltering","b","markAsDirty","realTimeFilteringQuality","_realTimeFilteringQuality","n","canRenderToMRT","_attachImageProcessingConfiguration","configuration","_imageProcessingConfiguration","_imageProcessingObserver","onUpdateParameters","remove","getScene","imageProcessingConfiguration","add","_markAllSubMeshesAsImageProcessingDirty","name","scene","_directIntensity","_emissiveIntensity","_environmentIntensity","_specularIntensity","_lightingInfos","_disableBumpMap","_albedoTexture","_ambientTexture","_ambientTextureStrength","_ambientTextureImpactOnAnalyticalLights","DEFAULT_AO_ON_ANALYTICAL_LIGHTS","_opacityTexture","_reflectionTexture","_emissiveTexture","_reflectivityTexture","_metallicTexture","_metallic","_roughness","_metallicF0Factor","_metallicReflectanceColor","White","_useOnlyMetallicFromMetallicReflectanceTexture","_metallicReflectanceTexture","_reflectanceTexture","_microSurfaceTexture","_bumpTexture","_lightmapTexture","_ambientColor","_albedoColor","_reflectivityColor","_reflectionColor","_emissiveColor","_microSurface","_useLightmapAsShadowmap","_useHorizonOcclusion","_useRadianceOcclusion","_useAlphaFromAlbedoTexture","_useSpecularOverAlpha","_useMicroSurfaceFromReflectivityMapAlpha","_useRoughnessFromMetallicTextureAlpha","_useRoughnessFromMetallicTextureGreen","_useMetallnessFromMetallicTextureBlue","_useAmbientOcclusionFromMetallicTextureRed","_useAmbientInGrayScale","_useAutoMicroSurfaceFromReflectivityMap","_lightFalloff","LIGHTFALLOFF_PHYSICAL","_useRadianceOverAlpha","_useObjectSpaceNormalMap","_useParallax","_useParallaxOcclusion","_parallaxScaleBias","_disableLighting","_maxSimultaneousLights","_invertNormalMapX","_invertNormalMapY","_twoSidedLighting","_alphaCutOff","_forceAlphaTest","_useAlphaFresnel","_useLinearAlphaFresnel","_environmentBRDFTexture","_forceIrradianceInFragment","_forceNormalForward","_enableSpecularAntiAliasing","_renderTargets","_globalAmbientColor","_useLogarithmicDepth","_unlit","_applyDecalMapAfterDetailMap","_debugMode","debugMode","debugLimit","debugFactor","_cacheHasRenderTargetTextures","brdf","clearCoat","iridescence","anisotropy","sheen","subSurface","detailMap","getRenderTargetTextures","ReflectionTextureEnabled","isRenderTarget","push","_eventInfo","renderTargets","_callbackPluginEventFillRenderTargetTextures","prePassConfiguration","hasRenderTargetTextures","isPrePassCapable","disableDepthWrite","getClassName","useLogarithmicDepth","value","getEngine","getCaps","fragmentDepthSupported","_disableAlphaBlending","_transparencyMode","PBRMATERIAL_OPAQUE","PBRMATERIAL_ALPHATEST","_a","disableAlphaBlending","needAlphaBlending","alpha","_shouldUseAlphaFromAlbedoTexture","needAlphaTesting","_hasAlphaChannel","hasAlpha","getAlphaTestTexture","isReadyForSubMesh","mesh","useInstances","_uniformBufferLayoutBuilt","buildUniformLayout","isFrozen","_wasPreviouslyReady","_wasPreviouslyUsingInstances","materialDefines","_callbackPluginEventGeneric","GetDefineNames","defineNames","defines","_isReadyForSubMesh","engine","_areTexturesDirty","_callbackPluginEventHasRenderTargetTextures","texturesEnabled","DiffuseTextureEnabled","isReadyOrNotBlocking","AmbientTextureEnabled","OpacityTextureEnabled","reflectionTexture","_getReflectionTexture","irradianceTexture","sphericalPolynomial","getInternalTexture","_sphericalPolynomialPromise","LightmapTextureEnabled","EmissiveTextureEnabled","SpecularTextureEnabled","standardDerivatives","BumpTextureEnabled","isReady","_callbackPluginEventIsReadyForSubMesh","_areImageProcessingDirty","isVerticesDataPresent","NormalKind","createNormals","Warn","previousEffect","lightDisposed","_areLightsDisposed","_prepareEffect","onCompiled","onError","getRenderingMesh","hasThinInstances","forceWasNotReadyPreviously","_onEffectCreatedObservable","notifyObservers","allowShaderHotSwapping","markAsUnprocessed","resetCachedMaterial","setEffect","_materialContext","_renderId","getRenderId","_checkScenePerformancePriority","isMetallicWorkflow","useClipPlane","useThinInstances","_prepareDefines","isDirty","markAsProcessed","fallbacks","fallbackRank","addFallback","HandleFallbacksForShadows","attribs","PositionKind","TangentKind","i","ColorKind","ColorInstanceKind","PrepareAttributesForBones","PrepareAttributesForInstances","PrepareAttributesForMorphTargets","PrepareAttributesForBakedVertexAnimation","shaderName","uniforms","samplers","uniformBuffers","indexParameters","maxSimultaneousLights","maxSimultaneousMorphTargets","attributes","uniformBuffersNames","customCode","undefined","PrepareEffect","AddUniforms","AddSamplers","PrepareUniforms","PrepareSamplers","PrepareUniformsAndSamplersList","uniformsNames","csnrOptions","customShaderNameResolve","join","toString","createEffect","processFinalCode","processCodeAfterIncludes","multiTarget","PrepareDefinesForLights","_needNormals","PrepareDefinesForMultiview","oit","needAlphaBlendingForMesh","useOrderIndependentTransparency","PrepareDefinesForPrePass","PrepareDefinesForOIT","_needUVs","textureLOD","PrepareDefinesForMergedUV","gammaSpace","getAlphaFromRGB","isRGBD","lodLevelInAlpha","linearSpecularLOD","_features","needTypeSuffixInShaderConstants","coordinatesMode","INVCUBIC_MODE","isCube","useRightHandedSystem","invertZ","EXPLICIT_MODE","PLANAR_MODE","PROJECTION_MODE","SKYBOX_MODE","SPHERICAL_MODE","EQUIRECTANGULAR_MODE","FIXED_EQUIRECTANGULAR_MODE","FIXED_EQUIRECTANGULAR_MIRRORED_MODE","CUBIC_MODE","boundingBoxSize","maxVaryingVectors","identicalTextures","_texture","checkTransformsAreIdentical","LIGHTFALLOFF_STANDARD","LIGHTFALLOFF_GLTF","backFaceCulling","_areMiscDirty","alphaMode","prepareDefines","PrepareDefinesForMisc","pointsCloud","fogEnabled","_shouldTurnAlphaTestOn","wireframe","PrepareDefinesForFrameBoundValues","_callbackPluginEventPrepareDefinesBeforeAttributes","PrepareDefinesForAttributes","_callbackPluginEventPrepareDefines","forceCompilation","options","localOptions","Object","assign","clipPlane","onCompileObservable","ubo","_uniformBuffer","addUniform","bindForSubMesh","world","_activeEffect","getMeshUniformBuffer","bindToEffect","transferToEffect","_callbackPluginEventHardBindForSubMesh","toNormalMatrix","_normalMatrix","bindOnlyNormalMatrix","mustRebind","_forceRebindOnNextCall","_mustRebind","visibility","BindBonesParameters","bindViewProjection","useUbo","isSync","updateFloat2","coordinatesIndex","level","BindTextureMatrix","updateFloat4","updateMatrix","getReflectionTextureMatrix","cubeTexture","updateVector3","boundingBoxPosition","width","getSize","Log2","polynomials","SPHERICAL_HARMONICS","preScaledHarmonics","l00","l1_1","l10","l11","l2_2","l2_1","l20","l21","l22","updateFloat3","x","y","z","xx","zz","yy","xy","yz","zx","lodGenerationScale","lodGenerationOffset","_mirroredCameraPosition","updateFloat","pointSize","r","g","updateColor4","ior","_b","_indexOfRefraction","outsideIOR","f0","Math","pow","scaleToRef","metallicF90","updateColor3","BlackReadOnly","SS_REFRACTION","_c","_linkRefractionWithTransparency","environmentIntensity","w","updateVector4","ambientColor","multiplyToRef","setTexture","_lodTextureMid","_lodTextureLow","_lodTextureHigh","depthPeelingRenderer","bind","_callbackPluginEventBindForSubMesh","bindEyePosition","needToAlwaysBindUniformBuffers","_needToBindSceneUbo","lightsEnabled","BindLights","applyFog","fogMode","FOGMODE_NONE","refractionTexture","receiveShadows","bindView","BindFogParameters","BindMorphTargetParameters","_d","bakedVertexAnimationManager","BindLogDepth","_afterBind","update","getAnimatables","results","animations","length","environmentTexture","getActiveTextures","activeTextures","hasTexture","texture","setPrePassRenderer","isScatteringEnabled","subSurfaceConfiguration","enableSubSurfaceForPrePass","enabled","dispose","forceDisposeEffect","forceDisposeTextures","environmentBRDFTexture","_e","_f","_g","_h","_j","_k","_l","_m","MATERIAL_OPAQUE","MATERIAL_ALPHATEST","PBRMATERIAL_ALPHABLEND","MATERIAL_ALPHABLEND","PBRMATERIAL_ALPHATESTANDBLEND","MATERIAL_ALPHATESTANDBLEND","__decorate"],"sources":["../../../../../dev/core/src/Materials/PBR/pbrBaseMaterial.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/naming-convention */\r\nimport { serialize, serializeAsImageProcessingConfiguration, expandToProperty } from \"../../Misc/decorators\";\r\nimport type { Observer } from \"../../Misc/observable\";\r\nimport { Logger } from \"../../Misc/logger\";\r\nimport { SmartArray } from \"../../Misc/smartArray\";\r\nimport { GetEnvironmentBRDFTexture } from \"../../Misc/brdfTextureTools\";\r\nimport type { Nullable } from \"../../types\";\r\nimport { Scene } from \"../../scene\";\r\nimport type { Matrix } from \"../../Maths/math.vector\";\r\nimport { Vector4 } from \"../../Maths/math.vector\";\r\nimport { VertexBuffer } from \"../../Buffers/buffer\";\r\nimport type { SubMesh } from \"../../Meshes/subMesh\";\r\nimport type { AbstractMesh } from \"../../Meshes/abstractMesh\";\r\nimport type { Mesh } from \"../../Meshes/mesh\";\r\nimport { PBRBRDFConfiguration } from \"./pbrBRDFConfiguration\";\r\nimport { PrePassConfiguration } from \"../prePassConfiguration\";\r\nimport { Color3, TmpColors } from \"../../Maths/math.color\";\r\nimport { Scalar } from \"../../Maths/math.scalar\";\r\n\r\nimport type { IImageProcessingConfigurationDefines } from \"../../Materials/imageProcessingConfiguration\";\r\nimport { ImageProcessingConfiguration } from \"../../Materials/imageProcessingConfiguration\";\r\nimport type { Effect, IEffectCreationOptions } from \"../../Materials/effect\";\r\nimport type { IMaterialCompilationOptions, ICustomShaderNameResolveOptions } from \"../../Materials/material\";\r\nimport { Material } from \"../../Materials/material\";\r\nimport { MaterialPluginEvent } from \"../materialPluginEvent\";\r\nimport { MaterialDefines } from \"../../Materials/materialDefines\";\r\nimport { PushMaterial } from \"../../Materials/pushMaterial\";\r\nimport { MaterialHelper } from \"../../Materials/materialHelper\";\r\n\r\nimport type { BaseTexture } from \"../../Materials/Textures/baseTexture\";\r\nimport { Texture } from \"../../Materials/Textures/texture\";\r\nimport type { RenderTargetTexture } from \"../../Materials/Textures/renderTargetTexture\";\r\nimport type { CubeTexture } from \"../../Materials/Textures/cubeTexture\";\r\n\r\nimport { MaterialFlags } from \"../materialFlags\";\r\nimport { Constants } from \"../../Engines/constants\";\r\nimport type { IAnimatable } from \"../../Animations/animatable.interface\";\r\n\r\nimport \"../../Materials/Textures/baseTexture.polynomial\";\r\nimport \"../../Shaders/pbr.fragment\";\r\nimport \"../../Shaders/pbr.vertex\";\r\n\r\nimport { EffectFallbacks } from \"../effectFallbacks\";\r\nimport { PBRClearCoatConfiguration } from \"./pbrClearCoatConfiguration\";\r\nimport { PBRIridescenceConfiguration } from \"./pbrIridescenceConfiguration\";\r\nimport { PBRAnisotropicConfiguration } from \"./pbrAnisotropicConfiguration\";\r\nimport { PBRSheenConfiguration } from \"./pbrSheenConfiguration\";\r\nimport { PBRSubSurfaceConfiguration } from \"./pbrSubSurfaceConfiguration\";\r\nimport { DetailMapConfiguration } from \"../material.detailMapConfiguration\";\r\nimport { addClipPlaneUniforms, bindClipPlane } from \"../clipPlaneMaterialHelper\";\r\n\r\nconst onCreatedEffectParameters = { effect: null as unknown as Effect, subMesh: null as unknown as Nullable<SubMesh> };\r\n\r\n/**\r\n * Manages the defines for the PBR Material.\r\n * @internal\r\n */\r\nexport class PBRMaterialDefines extends MaterialDefines implements IImageProcessingConfigurationDefines {\r\n    public PBR = true;\r\n\r\n    public NUM_SAMPLES = \"0\";\r\n    public REALTIME_FILTERING = false;\r\n\r\n    public MAINUV1 = false;\r\n    public MAINUV2 = false;\r\n    public MAINUV3 = false;\r\n    public MAINUV4 = false;\r\n    public MAINUV5 = false;\r\n    public MAINUV6 = false;\r\n    public UV1 = false;\r\n    public UV2 = false;\r\n    public UV3 = false;\r\n    public UV4 = false;\r\n    public UV5 = false;\r\n    public UV6 = false;\r\n\r\n    public ALBEDO = false;\r\n    public GAMMAALBEDO = false;\r\n    public ALBEDODIRECTUV = 0;\r\n    public VERTEXCOLOR = false;\r\n\r\n    public BAKED_VERTEX_ANIMATION_TEXTURE = false;\r\n\r\n    public AMBIENT = false;\r\n    public AMBIENTDIRECTUV = 0;\r\n    public AMBIENTINGRAYSCALE = false;\r\n\r\n    public OPACITY = false;\r\n    public VERTEXALPHA = false;\r\n    public OPACITYDIRECTUV = 0;\r\n    public OPACITYRGB = false;\r\n    public ALPHATEST = false;\r\n    public DEPTHPREPASS = false;\r\n    public ALPHABLEND = false;\r\n    public ALPHAFROMALBEDO = false;\r\n    public ALPHATESTVALUE = \"0.5\";\r\n    public SPECULAROVERALPHA = false;\r\n    public RADIANCEOVERALPHA = false;\r\n    public ALPHAFRESNEL = false;\r\n    public LINEARALPHAFRESNEL = false;\r\n    public PREMULTIPLYALPHA = false;\r\n\r\n    public EMISSIVE = false;\r\n    public EMISSIVEDIRECTUV = 0;\r\n    public GAMMAEMISSIVE = false;\r\n\r\n    public REFLECTIVITY = false;\r\n    public REFLECTIVITY_GAMMA = false;\r\n    public REFLECTIVITYDIRECTUV = 0;\r\n    public SPECULARTERM = false;\r\n\r\n    public MICROSURFACEFROMREFLECTIVITYMAP = false;\r\n    public MICROSURFACEAUTOMATIC = false;\r\n    public LODBASEDMICROSFURACE = false;\r\n    public MICROSURFACEMAP = false;\r\n    public MICROSURFACEMAPDIRECTUV = 0;\r\n\r\n    public METALLICWORKFLOW = false;\r\n    public ROUGHNESSSTOREINMETALMAPALPHA = false;\r\n    public ROUGHNESSSTOREINMETALMAPGREEN = false;\r\n    public METALLNESSSTOREINMETALMAPBLUE = false;\r\n    public AOSTOREINMETALMAPRED = false;\r\n    public METALLIC_REFLECTANCE = false;\r\n    public METALLIC_REFLECTANCE_GAMMA = false;\r\n    public METALLIC_REFLECTANCEDIRECTUV = 0;\r\n    public METALLIC_REFLECTANCE_USE_ALPHA_ONLY = false;\r\n    public REFLECTANCE = false;\r\n    public REFLECTANCE_GAMMA = false;\r\n    public REFLECTANCEDIRECTUV = 0;\r\n\r\n    public ENVIRONMENTBRDF = false;\r\n    public ENVIRONMENTBRDF_RGBD = false;\r\n\r\n    public NORMAL = false;\r\n    public TANGENT = false;\r\n    public BUMP = false;\r\n    public BUMPDIRECTUV = 0;\r\n    public OBJECTSPACE_NORMALMAP = false;\r\n    public PARALLAX = false;\r\n    public PARALLAX_RHS = false;\r\n    public PARALLAXOCCLUSION = false;\r\n    public NORMALXYSCALE = true;\r\n\r\n    public LIGHTMAP = false;\r\n    public LIGHTMAPDIRECTUV = 0;\r\n    public USELIGHTMAPASSHADOWMAP = false;\r\n    public GAMMALIGHTMAP = false;\r\n    public RGBDLIGHTMAP = false;\r\n\r\n    public REFLECTION = false;\r\n    public REFLECTIONMAP_3D = false;\r\n    public REFLECTIONMAP_SPHERICAL = false;\r\n    public REFLECTIONMAP_PLANAR = false;\r\n    public REFLECTIONMAP_CUBIC = false;\r\n    public USE_LOCAL_REFLECTIONMAP_CUBIC = false;\r\n    public REFLECTIONMAP_PROJECTION = false;\r\n    public REFLECTIONMAP_SKYBOX = false;\r\n    public REFLECTIONMAP_EXPLICIT = false;\r\n    public REFLECTIONMAP_EQUIRECTANGULAR = false;\r\n    public REFLECTIONMAP_EQUIRECTANGULAR_FIXED = false;\r\n    public REFLECTIONMAP_MIRROREDEQUIRECTANGULAR_FIXED = false;\r\n    public INVERTCUBICMAP = false;\r\n    public USESPHERICALFROMREFLECTIONMAP = false;\r\n    public USEIRRADIANCEMAP = false;\r\n    public USESPHERICALINVERTEX = false;\r\n    public REFLECTIONMAP_OPPOSITEZ = false;\r\n    public LODINREFLECTIONALPHA = false;\r\n    public GAMMAREFLECTION = false;\r\n    public RGBDREFLECTION = false;\r\n    public LINEARSPECULARREFLECTION = false;\r\n    public RADIANCEOCCLUSION = false;\r\n    public HORIZONOCCLUSION = false;\r\n\r\n    public INSTANCES = false;\r\n    public THIN_INSTANCES = false;\r\n    public INSTANCESCOLOR = false;\r\n\r\n    public PREPASS = false;\r\n    public PREPASS_IRRADIANCE = false;\r\n    public PREPASS_IRRADIANCE_INDEX = -1;\r\n    public PREPASS_ALBEDO_SQRT = false;\r\n    public PREPASS_ALBEDO_SQRT_INDEX = -1;\r\n    public PREPASS_DEPTH = false;\r\n    public PREPASS_DEPTH_INDEX = -1;\r\n    public PREPASS_NORMAL = false;\r\n    public PREPASS_NORMAL_INDEX = -1;\r\n    public PREPASS_NORMAL_WORLDSPACE = false;\r\n    public PREPASS_POSITION = false;\r\n    public PREPASS_POSITION_INDEX = -1;\r\n    public PREPASS_VELOCITY = false;\r\n    public PREPASS_VELOCITY_INDEX = -1;\r\n    public PREPASS_REFLECTIVITY = false;\r\n    public PREPASS_REFLECTIVITY_INDEX = -1;\r\n    public SCENE_MRT_COUNT = 0;\r\n\r\n    public NUM_BONE_INFLUENCERS = 0;\r\n    public BonesPerMesh = 0;\r\n    public BONETEXTURE = false;\r\n    public BONES_VELOCITY_ENABLED = false;\r\n\r\n    public NONUNIFORMSCALING = false;\r\n\r\n    public MORPHTARGETS = false;\r\n    public MORPHTARGETS_NORMAL = false;\r\n    public MORPHTARGETS_TANGENT = false;\r\n    public MORPHTARGETS_UV = false;\r\n    public NUM_MORPH_INFLUENCERS = 0;\r\n    public MORPHTARGETS_TEXTURE = false;\r\n\r\n    public IMAGEPROCESSING = false;\r\n    public VIGNETTE = false;\r\n    public VIGNETTEBLENDMODEMULTIPLY = false;\r\n    public VIGNETTEBLENDMODEOPAQUE = false;\r\n    public TONEMAPPING = false;\r\n    public TONEMAPPING_ACES = false;\r\n    public CONTRAST = false;\r\n    public COLORCURVES = false;\r\n    public COLORGRADING = false;\r\n    public COLORGRADING3D = false;\r\n    public SAMPLER3DGREENDEPTH = false;\r\n    public SAMPLER3DBGRMAP = false;\r\n    public DITHER = false;\r\n    public IMAGEPROCESSINGPOSTPROCESS = false;\r\n    public SKIPFINALCOLORCLAMP = false;\r\n    public EXPOSURE = false;\r\n    public MULTIVIEW = false;\r\n    public ORDER_INDEPENDENT_TRANSPARENCY = false;\r\n    public ORDER_INDEPENDENT_TRANSPARENCY_16BITS = false;\r\n\r\n    public USEPHYSICALLIGHTFALLOFF = false;\r\n    public USEGLTFLIGHTFALLOFF = false;\r\n    public TWOSIDEDLIGHTING = false;\r\n    public SHADOWFLOAT = false;\r\n    public CLIPPLANE = false;\r\n    public CLIPPLANE2 = false;\r\n    public CLIPPLANE3 = false;\r\n    public CLIPPLANE4 = false;\r\n    public CLIPPLANE5 = false;\r\n    public CLIPPLANE6 = false;\r\n    public POINTSIZE = false;\r\n    public FOG = false;\r\n    public LOGARITHMICDEPTH = false;\r\n    public CAMERA_ORTHOGRAPHIC = false;\r\n    public CAMERA_PERSPECTIVE = false;\r\n\r\n    public FORCENORMALFORWARD = false;\r\n\r\n    public SPECULARAA = false;\r\n\r\n    public UNLIT = false;\r\n\r\n    public DECAL_AFTER_DETAIL = false;\r\n\r\n    public DEBUGMODE = 0;\r\n\r\n    /**\r\n     * Initializes the PBR Material defines.\r\n     * @param externalProperties The external properties\r\n     */\r\n    constructor(externalProperties?: { [name: string]: { type: string; default: any } }) {\r\n        super(externalProperties);\r\n        this.rebuild();\r\n    }\r\n\r\n    /**\r\n     * Resets the PBR Material defines.\r\n     */\r\n    public reset(): void {\r\n        super.reset();\r\n        this.ALPHATESTVALUE = \"0.5\";\r\n        this.PBR = true;\r\n        this.NORMALXYSCALE = true;\r\n    }\r\n}\r\n\r\n/**\r\n * The Physically based material base class of BJS.\r\n *\r\n * This offers the main features of a standard PBR material.\r\n * For more information, please refer to the documentation :\r\n * https://doc.babylonjs.com/features/featuresDeepDive/materials/using/introToPBR\r\n */\r\nexport abstract class PBRBaseMaterial extends PushMaterial {\r\n    /**\r\n     * PBRMaterialTransparencyMode: No transparency mode, Alpha channel is not use.\r\n     */\r\n    public static readonly PBRMATERIAL_OPAQUE = Material.MATERIAL_OPAQUE;\r\n\r\n    /**\r\n     * PBRMaterialTransparencyMode: Alpha Test mode, pixel are discarded below a certain threshold defined by the alpha cutoff value.\r\n     */\r\n    public static readonly PBRMATERIAL_ALPHATEST = Material.MATERIAL_ALPHATEST;\r\n\r\n    /**\r\n     * PBRMaterialTransparencyMode: Pixels are blended (according to the alpha mode) with the already drawn pixels in the current frame buffer.\r\n     */\r\n    public static readonly PBRMATERIAL_ALPHABLEND = Material.MATERIAL_ALPHABLEND;\r\n\r\n    /**\r\n     * PBRMaterialTransparencyMode: Pixels are blended (according to the alpha mode) with the already drawn pixels in the current frame buffer.\r\n     * They are also discarded below the alpha cutoff threshold to improve performances.\r\n     */\r\n    public static readonly PBRMATERIAL_ALPHATESTANDBLEND = Material.MATERIAL_ALPHATESTANDBLEND;\r\n\r\n    /**\r\n     * Defines the default value of how much AO map is occluding the analytical lights\r\n     * (point spot...).\r\n     */\r\n    public static DEFAULT_AO_ON_ANALYTICAL_LIGHTS = 0;\r\n\r\n    /**\r\n     * PBRMaterialLightFalloff Physical: light is falling off following the inverse squared distance law.\r\n     */\r\n    public static readonly LIGHTFALLOFF_PHYSICAL = 0;\r\n\r\n    /**\r\n     * PBRMaterialLightFalloff gltf: light is falling off as described in the gltf moving to PBR document\r\n     * to enhance interoperability with other engines.\r\n     */\r\n    public static readonly LIGHTFALLOFF_GLTF = 1;\r\n\r\n    /**\r\n     * PBRMaterialLightFalloff Standard: light is falling off like in the standard material\r\n     * to enhance interoperability with other materials.\r\n     */\r\n    public static readonly LIGHTFALLOFF_STANDARD = 2;\r\n\r\n    /**\r\n     * Intensity of the direct lights e.g. the four lights available in your scene.\r\n     * This impacts both the direct diffuse and specular highlights.\r\n     * @internal\r\n     */\r\n    public _directIntensity: number = 1.0;\r\n\r\n    /**\r\n     * Intensity of the emissive part of the material.\r\n     * This helps controlling the emissive effect without modifying the emissive color.\r\n     * @internal\r\n     */\r\n    public _emissiveIntensity: number = 1.0;\r\n\r\n    /**\r\n     * Intensity of the environment e.g. how much the environment will light the object\r\n     * either through harmonics for rough material or through the reflection for shiny ones.\r\n     * @internal\r\n     */\r\n    public _environmentIntensity: number = 1.0;\r\n\r\n    /**\r\n     * This is a special control allowing the reduction of the specular highlights coming from the\r\n     * four lights of the scene. Those highlights may not be needed in full environment lighting.\r\n     * @internal\r\n     */\r\n    public _specularIntensity: number = 1.0;\r\n\r\n    /**\r\n     * This stores the direct, emissive, environment, and specular light intensities into a Vector4.\r\n     */\r\n    private _lightingInfos: Vector4 = new Vector4(this._directIntensity, this._emissiveIntensity, this._environmentIntensity, this._specularIntensity);\r\n\r\n    /**\r\n     * Debug Control allowing disabling the bump map on this material.\r\n     * @internal\r\n     */\r\n    public _disableBumpMap: boolean = false;\r\n\r\n    /**\r\n     * AKA Diffuse Texture in standard nomenclature.\r\n     * @internal\r\n     */\r\n    public _albedoTexture: Nullable<BaseTexture> = null;\r\n\r\n    /**\r\n     * AKA Occlusion Texture in other nomenclature.\r\n     * @internal\r\n     */\r\n    public _ambientTexture: Nullable<BaseTexture> = null;\r\n\r\n    /**\r\n     * AKA Occlusion Texture Intensity in other nomenclature.\r\n     * @internal\r\n     */\r\n    public _ambientTextureStrength: number = 1.0;\r\n\r\n    /**\r\n     * Defines how much the AO map is occluding the analytical lights (point spot...).\r\n     * 1 means it completely occludes it\r\n     * 0 mean it has no impact\r\n     * @internal\r\n     */\r\n    public _ambientTextureImpactOnAnalyticalLights: number = PBRBaseMaterial.DEFAULT_AO_ON_ANALYTICAL_LIGHTS;\r\n\r\n    /**\r\n     * Stores the alpha values in a texture.\r\n     * @internal\r\n     */\r\n    public _opacityTexture: Nullable<BaseTexture> = null;\r\n\r\n    /**\r\n     * Stores the reflection values in a texture.\r\n     * @internal\r\n     */\r\n    public _reflectionTexture: Nullable<BaseTexture> = null;\r\n\r\n    /**\r\n     * Stores the emissive values in a texture.\r\n     * @internal\r\n     */\r\n    public _emissiveTexture: Nullable<BaseTexture> = null;\r\n\r\n    /**\r\n     * AKA Specular texture in other nomenclature.\r\n     * @internal\r\n     */\r\n    public _reflectivityTexture: Nullable<BaseTexture> = null;\r\n\r\n    /**\r\n     * Used to switch from specular/glossiness to metallic/roughness workflow.\r\n     * @internal\r\n     */\r\n    public _metallicTexture: Nullable<BaseTexture> = null;\r\n\r\n    /**\r\n     * Specifies the metallic scalar of the metallic/roughness workflow.\r\n     * Can also be used to scale the metalness values of the metallic texture.\r\n     * @internal\r\n     */\r\n    public _metallic: Nullable<number> = null;\r\n\r\n    /**\r\n     * Specifies the roughness scalar of the metallic/roughness workflow.\r\n     * Can also be used to scale the roughness values of the metallic texture.\r\n     * @internal\r\n     */\r\n    public _roughness: Nullable<number> = null;\r\n\r\n    /**\r\n     * In metallic workflow, specifies an F0 factor to help configuring the material F0.\r\n     * By default the indexOfrefraction is used to compute F0;\r\n     *\r\n     * This is used as a factor against the default reflectance at normal incidence to tweak it.\r\n     *\r\n     * F0 = defaultF0 * metallicF0Factor * metallicReflectanceColor;\r\n     * F90 = metallicReflectanceColor;\r\n     * @internal\r\n     */\r\n    public _metallicF0Factor = 1;\r\n\r\n    /**\r\n     * In metallic workflow, specifies an F0 color.\r\n     * By default the F90 is always 1;\r\n     *\r\n     * Please note that this factor is also used as a factor against the default reflectance at normal incidence.\r\n     *\r\n     * F0 = defaultF0_from_IOR * metallicF0Factor * metallicReflectanceColor\r\n     * F90 = metallicF0Factor;\r\n     * @internal\r\n     */\r\n    public _metallicReflectanceColor = Color3.White();\r\n\r\n    /**\r\n     * Specifies that only the A channel from _metallicReflectanceTexture should be used.\r\n     * If false, both RGB and A channels will be used\r\n     * @internal\r\n     */\r\n    public _useOnlyMetallicFromMetallicReflectanceTexture = false;\r\n\r\n    /**\r\n     * Defines to store metallicReflectanceColor in RGB and metallicF0Factor in A\r\n     * This is multiply against the scalar values defined in the material.\r\n     * @internal\r\n     */\r\n    public _metallicReflectanceTexture: Nullable<BaseTexture> = null;\r\n\r\n    /**\r\n     * Defines to store reflectanceColor in RGB\r\n     * This is multiplied against the scalar values defined in the material.\r\n     * If both _reflectanceTexture and _metallicReflectanceTexture textures are provided and _useOnlyMetallicFromMetallicReflectanceTexture\r\n     * is false, _metallicReflectanceTexture takes precedence and _reflectanceTexture is not used\r\n     * @internal\r\n     */\r\n    public _reflectanceTexture: Nullable<BaseTexture> = null;\r\n\r\n    /**\r\n     * Used to enable roughness/glossiness fetch from a separate channel depending on the current mode.\r\n     * Gray Scale represents roughness in metallic mode and glossiness in specular mode.\r\n     * @internal\r\n     */\r\n    public _microSurfaceTexture: Nullable<BaseTexture> = null;\r\n\r\n    /**\r\n     * Stores surface normal data used to displace a mesh in a texture.\r\n     * @internal\r\n     */\r\n    public _bumpTexture: Nullable<BaseTexture> = null;\r\n\r\n    /**\r\n     * Stores the pre-calculated light information of a mesh in a texture.\r\n     * @internal\r\n     */\r\n    public _lightmapTexture: Nullable<BaseTexture> = null;\r\n\r\n    /**\r\n     * The color of a material in ambient lighting.\r\n     * @internal\r\n     */\r\n    public _ambientColor = new Color3(0, 0, 0);\r\n\r\n    /**\r\n     * AKA Diffuse Color in other nomenclature.\r\n     * @internal\r\n     */\r\n    public _albedoColor = new Color3(1, 1, 1);\r\n\r\n    /**\r\n     * AKA Specular Color in other nomenclature.\r\n     * @internal\r\n     */\r\n    public _reflectivityColor = new Color3(1, 1, 1);\r\n\r\n    /**\r\n     * The color applied when light is reflected from a material.\r\n     * @internal\r\n     */\r\n    public _reflectionColor = new Color3(1, 1, 1);\r\n\r\n    /**\r\n     * The color applied when light is emitted from a material.\r\n     * @internal\r\n     */\r\n    public _emissiveColor = new Color3(0, 0, 0);\r\n\r\n    /**\r\n     * AKA Glossiness in other nomenclature.\r\n     * @internal\r\n     */\r\n    public _microSurface = 0.9;\r\n\r\n    /**\r\n     * Specifies that the material will use the light map as a show map.\r\n     * @internal\r\n     */\r\n    public _useLightmapAsShadowmap = false;\r\n\r\n    /**\r\n     * This parameters will enable/disable Horizon occlusion to prevent normal maps to look shiny when the normal\r\n     * makes the reflect vector face the model (under horizon).\r\n     * @internal\r\n     */\r\n    public _useHorizonOcclusion = true;\r\n\r\n    /**\r\n     * This parameters will enable/disable radiance occlusion by preventing the radiance to lit\r\n     * too much the area relying on ambient texture to define their ambient occlusion.\r\n     * @internal\r\n     */\r\n    public _useRadianceOcclusion = true;\r\n\r\n    /**\r\n     * Specifies that the alpha is coming form the albedo channel alpha channel for alpha blending.\r\n     * @internal\r\n     */\r\n    public _useAlphaFromAlbedoTexture = false;\r\n\r\n    /**\r\n     * Specifies that the material will keeps the specular highlights over a transparent surface (only the most luminous ones).\r\n     * A car glass is a good example of that. When sun reflects on it you can not see what is behind.\r\n     * @internal\r\n     */\r\n    public _useSpecularOverAlpha = true;\r\n\r\n    /**\r\n     * Specifies if the reflectivity texture contains the glossiness information in its alpha channel.\r\n     * @internal\r\n     */\r\n    public _useMicroSurfaceFromReflectivityMapAlpha = false;\r\n\r\n    /**\r\n     * Specifies if the metallic texture contains the roughness information in its alpha channel.\r\n     * @internal\r\n     */\r\n    public _useRoughnessFromMetallicTextureAlpha = true;\r\n\r\n    /**\r\n     * Specifies if the metallic texture contains the roughness information in its green channel.\r\n     * @internal\r\n     */\r\n    public _useRoughnessFromMetallicTextureGreen = false;\r\n\r\n    /**\r\n     * Specifies if the metallic texture contains the metallness information in its blue channel.\r\n     * @internal\r\n     */\r\n    public _useMetallnessFromMetallicTextureBlue = false;\r\n\r\n    /**\r\n     * Specifies if the metallic texture contains the ambient occlusion information in its red channel.\r\n     * @internal\r\n     */\r\n    public _useAmbientOcclusionFromMetallicTextureRed = false;\r\n\r\n    /**\r\n     * Specifies if the ambient texture contains the ambient occlusion information in its red channel only.\r\n     * @internal\r\n     */\r\n    public _useAmbientInGrayScale = false;\r\n\r\n    /**\r\n     * In case the reflectivity map does not contain the microsurface information in its alpha channel,\r\n     * The material will try to infer what glossiness each pixel should be.\r\n     * @internal\r\n     */\r\n    public _useAutoMicroSurfaceFromReflectivityMap = false;\r\n\r\n    /**\r\n     * Defines the  falloff type used in this material.\r\n     * It by default is Physical.\r\n     * @internal\r\n     */\r\n    public _lightFalloff = PBRBaseMaterial.LIGHTFALLOFF_PHYSICAL;\r\n\r\n    /**\r\n     * Specifies that the material will keeps the reflection highlights over a transparent surface (only the most luminous ones).\r\n     * A car glass is a good example of that. When the street lights reflects on it you can not see what is behind.\r\n     * @internal\r\n     */\r\n    public _useRadianceOverAlpha = true;\r\n\r\n    /**\r\n     * Allows using an object space normal map (instead of tangent space).\r\n     * @internal\r\n     */\r\n    public _useObjectSpaceNormalMap = false;\r\n\r\n    /**\r\n     * Allows using the bump map in parallax mode.\r\n     * @internal\r\n     */\r\n    public _useParallax = false;\r\n\r\n    /**\r\n     * Allows using the bump map in parallax occlusion mode.\r\n     * @internal\r\n     */\r\n    public _useParallaxOcclusion = false;\r\n\r\n    /**\r\n     * Controls the scale bias of the parallax mode.\r\n     * @internal\r\n     */\r\n    public _parallaxScaleBias = 0.05;\r\n\r\n    /**\r\n     * If sets to true, disables all the lights affecting the material.\r\n     * @internal\r\n     */\r\n    public _disableLighting = false;\r\n\r\n    /**\r\n     * Number of Simultaneous lights allowed on the material.\r\n     * @internal\r\n     */\r\n    public _maxSimultaneousLights = 4;\r\n\r\n    /**\r\n     * If sets to true, x component of normal map value will be inverted (x = 1.0 - x).\r\n     * @internal\r\n     */\r\n    public _invertNormalMapX = false;\r\n\r\n    /**\r\n     * If sets to true, y component of normal map value will be inverted (y = 1.0 - y).\r\n     * @internal\r\n     */\r\n    public _invertNormalMapY = false;\r\n\r\n    /**\r\n     * If sets to true and backfaceCulling is false, normals will be flipped on the backside.\r\n     * @internal\r\n     */\r\n    public _twoSidedLighting = false;\r\n\r\n    /**\r\n     * Defines the alpha limits in alpha test mode.\r\n     * @internal\r\n     */\r\n    public _alphaCutOff = 0.4;\r\n\r\n    /**\r\n     * Enforces alpha test in opaque or blend mode in order to improve the performances of some situations.\r\n     * @internal\r\n     */\r\n    public _forceAlphaTest = false;\r\n\r\n    /**\r\n     * A fresnel is applied to the alpha of the model to ensure grazing angles edges are not alpha tested.\r\n     * And/Or occlude the blended part. (alpha is converted to gamma to compute the fresnel)\r\n     * @internal\r\n     */\r\n    public _useAlphaFresnel = false;\r\n\r\n    /**\r\n     * A fresnel is applied to the alpha of the model to ensure grazing angles edges are not alpha tested.\r\n     * And/Or occlude the blended part. (alpha stays linear to compute the fresnel)\r\n     * @internal\r\n     */\r\n    public _useLinearAlphaFresnel = false;\r\n\r\n    /**\r\n     * Specifies the environment BRDF texture used to compute the scale and offset roughness values\r\n     * from cos theta and roughness:\r\n     * http://blog.selfshadow.com/publications/s2013-shading-course/karis/s2013_pbs_epic_notes_v2.pdf\r\n     * @internal\r\n     */\r\n    public _environmentBRDFTexture: Nullable<BaseTexture> = null;\r\n\r\n    /**\r\n     * Force the shader to compute irradiance in the fragment shader in order to take bump in account.\r\n     * @internal\r\n     */\r\n    public _forceIrradianceInFragment = false;\r\n\r\n    private _realTimeFiltering: boolean = false;\r\n    /**\r\n     * Enables realtime filtering on the texture.\r\n     */\r\n    public get realTimeFiltering() {\r\n        return this._realTimeFiltering;\r\n    }\r\n    public set realTimeFiltering(b: boolean) {\r\n        this._realTimeFiltering = b;\r\n        this.markAsDirty(Constants.MATERIAL_TextureDirtyFlag);\r\n    }\r\n\r\n    private _realTimeFilteringQuality: number = Constants.TEXTURE_FILTERING_QUALITY_LOW;\r\n    /**\r\n     * Quality switch for realtime filtering\r\n     */\r\n    public get realTimeFilteringQuality(): number {\r\n        return this._realTimeFilteringQuality;\r\n    }\r\n    public set realTimeFilteringQuality(n: number) {\r\n        this._realTimeFilteringQuality = n;\r\n        this.markAsDirty(Constants.MATERIAL_TextureDirtyFlag);\r\n    }\r\n\r\n    /**\r\n     * Can this material render to several textures at once\r\n     */\r\n    public get canRenderToMRT() {\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Force normal to face away from face.\r\n     * @internal\r\n     */\r\n    public _forceNormalForward = false;\r\n\r\n    /**\r\n     * Enables specular anti aliasing in the PBR shader.\r\n     * It will both interacts on the Geometry for analytical and IBL lighting.\r\n     * It also prefilter the roughness map based on the bump values.\r\n     * @internal\r\n     */\r\n    public _enableSpecularAntiAliasing = false;\r\n\r\n    /**\r\n     * Default configuration related to image processing available in the PBR Material.\r\n     */\r\n    @serializeAsImageProcessingConfiguration()\r\n    protected _imageProcessingConfiguration: ImageProcessingConfiguration;\r\n\r\n    /**\r\n     * Keep track of the image processing observer to allow dispose and replace.\r\n     */\r\n    private _imageProcessingObserver: Nullable<Observer<ImageProcessingConfiguration>> = null;\r\n\r\n    /**\r\n     * Attaches a new image processing configuration to the PBR Material.\r\n     * @param configuration\r\n     */\r\n    protected _attachImageProcessingConfiguration(configuration: Nullable<ImageProcessingConfiguration>): void {\r\n        if (configuration === this._imageProcessingConfiguration) {\r\n            return;\r\n        }\r\n\r\n        // Detaches observer.\r\n        if (this._imageProcessingConfiguration && this._imageProcessingObserver) {\r\n            this._imageProcessingConfiguration.onUpdateParameters.remove(this._imageProcessingObserver);\r\n        }\r\n\r\n        // Pick the scene configuration if needed.\r\n        if (!configuration) {\r\n            this._imageProcessingConfiguration = this.getScene().imageProcessingConfiguration;\r\n        } else {\r\n            this._imageProcessingConfiguration = configuration;\r\n        }\r\n\r\n        // Attaches observer.\r\n        if (this._imageProcessingConfiguration) {\r\n            this._imageProcessingObserver = this._imageProcessingConfiguration.onUpdateParameters.add(() => {\r\n                this._markAllSubMeshesAsImageProcessingDirty();\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Stores the available render targets.\r\n     */\r\n    private _renderTargets = new SmartArray<RenderTargetTexture>(16);\r\n\r\n    /**\r\n     * Sets the global ambient color for the material used in lighting calculations.\r\n     */\r\n    private _globalAmbientColor = new Color3(0, 0, 0);\r\n\r\n    /**\r\n     * Enables the use of logarithmic depth buffers, which is good for wide depth buffers.\r\n     */\r\n    private _useLogarithmicDepth: boolean = false;\r\n\r\n    /**\r\n     * If set to true, no lighting calculations will be applied.\r\n     */\r\n    private _unlit = false;\r\n\r\n    /**\r\n     * If sets to true, the decal map will be applied after the detail map. Else, it is applied before (default: false)\r\n     */\r\n    private _applyDecalMapAfterDetailMap = false;\r\n\r\n    private _debugMode = 0;\r\n    /**\r\n     * @internal\r\n     * This is reserved for the inspector.\r\n     * Defines the material debug mode.\r\n     * It helps seeing only some components of the material while troubleshooting.\r\n     */\r\n    @expandToProperty(\"_markAllSubMeshesAsMiscDirty\")\r\n    public debugMode = 0;\r\n\r\n    /**\r\n     * @internal\r\n     * This is reserved for the inspector.\r\n     * Specify from where on screen the debug mode should start.\r\n     * The value goes from -1 (full screen) to 1 (not visible)\r\n     * It helps with side by side comparison against the final render\r\n     * This defaults to -1\r\n     */\r\n    public debugLimit = -1;\r\n\r\n    /**\r\n     * @internal\r\n     * This is reserved for the inspector.\r\n     * As the default viewing range might not be enough (if the ambient is really small for instance)\r\n     * You can use the factor to better multiply the final value.\r\n     */\r\n    public debugFactor = 1;\r\n\r\n    /**\r\n     * Defines the clear coat layer parameters for the material.\r\n     */\r\n    public readonly clearCoat: PBRClearCoatConfiguration;\r\n\r\n    /**\r\n     * Defines the iridescence layer parameters for the material.\r\n     */\r\n    public readonly iridescence: PBRIridescenceConfiguration;\r\n\r\n    /**\r\n     * Defines the anisotropic parameters for the material.\r\n     */\r\n    public readonly anisotropy: PBRAnisotropicConfiguration;\r\n\r\n    /**\r\n     * Defines the BRDF parameters for the material.\r\n     */\r\n    public readonly brdf: PBRBRDFConfiguration;\r\n\r\n    /**\r\n     * Defines the Sheen parameters for the material.\r\n     */\r\n    public readonly sheen: PBRSheenConfiguration;\r\n\r\n    /**\r\n     * Defines the SubSurface parameters for the material.\r\n     */\r\n    public readonly subSurface: PBRSubSurfaceConfiguration;\r\n\r\n    /**\r\n     * Defines additional PrePass parameters for the material.\r\n     */\r\n    public readonly prePassConfiguration: PrePassConfiguration;\r\n\r\n    /**\r\n     * Defines the detail map parameters for the material.\r\n     */\r\n    public readonly detailMap: DetailMapConfiguration;\r\n\r\n    protected _cacheHasRenderTargetTextures = false;\r\n\r\n    /**\r\n     * Instantiates a new PBRMaterial instance.\r\n     *\r\n     * @param name The material name\r\n     * @param scene The scene the material will be use in.\r\n     */\r\n    constructor(name: string, scene?: Scene) {\r\n        super(name, scene);\r\n\r\n        this.brdf = new PBRBRDFConfiguration(this);\r\n        this.clearCoat = new PBRClearCoatConfiguration(this);\r\n        this.iridescence = new PBRIridescenceConfiguration(this);\r\n        this.anisotropy = new PBRAnisotropicConfiguration(this);\r\n        this.sheen = new PBRSheenConfiguration(this);\r\n        this.subSurface = new PBRSubSurfaceConfiguration(this);\r\n        this.detailMap = new DetailMapConfiguration(this);\r\n\r\n        // Setup the default processing configuration to the scene.\r\n        this._attachImageProcessingConfiguration(null);\r\n\r\n        this.getRenderTargetTextures = (): SmartArray<RenderTargetTexture> => {\r\n            this._renderTargets.reset();\r\n\r\n            if (MaterialFlags.ReflectionTextureEnabled && this._reflectionTexture && this._reflectionTexture.isRenderTarget) {\r\n                this._renderTargets.push(<RenderTargetTexture>this._reflectionTexture);\r\n            }\r\n\r\n            this._eventInfo.renderTargets = this._renderTargets;\r\n            this._callbackPluginEventFillRenderTargetTextures(this._eventInfo);\r\n\r\n            return this._renderTargets;\r\n        };\r\n\r\n        this._environmentBRDFTexture = GetEnvironmentBRDFTexture(this.getScene());\r\n        this.prePassConfiguration = new PrePassConfiguration();\r\n    }\r\n\r\n    /**\r\n     * Gets a boolean indicating that current material needs to register RTT\r\n     */\r\n    public get hasRenderTargetTextures(): boolean {\r\n        if (MaterialFlags.ReflectionTextureEnabled && this._reflectionTexture && this._reflectionTexture.isRenderTarget) {\r\n            return true;\r\n        }\r\n\r\n        return this._cacheHasRenderTargetTextures;\r\n    }\r\n\r\n    /**\r\n     * Can this material render to prepass\r\n     */\r\n    public get isPrePassCapable(): boolean {\r\n        return !this.disableDepthWrite;\r\n    }\r\n\r\n    /**\r\n     * Gets the name of the material class.\r\n     */\r\n    public getClassName(): string {\r\n        return \"PBRBaseMaterial\";\r\n    }\r\n\r\n    /**\r\n     * Enabled the use of logarithmic depth buffers, which is good for wide depth buffers.\r\n     */\r\n    @serialize()\r\n    public get useLogarithmicDepth(): boolean {\r\n        return this._useLogarithmicDepth;\r\n    }\r\n\r\n    /**\r\n     * Enabled the use of logarithmic depth buffers, which is good for wide depth buffers.\r\n     */\r\n    public set useLogarithmicDepth(value: boolean) {\r\n        this._useLogarithmicDepth = value && this.getScene().getEngine().getCaps().fragmentDepthSupported;\r\n    }\r\n\r\n    /**\r\n     * Returns true if alpha blending should be disabled.\r\n     */\r\n    protected get _disableAlphaBlending(): boolean {\r\n        return (\r\n            this._transparencyMode === PBRBaseMaterial.PBRMATERIAL_OPAQUE ||\r\n            this._transparencyMode === PBRBaseMaterial.PBRMATERIAL_ALPHATEST ||\r\n            this.subSurface?.disableAlphaBlending\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Specifies whether or not this material should be rendered in alpha blend mode.\r\n     */\r\n    public needAlphaBlending(): boolean {\r\n        if (this._disableAlphaBlending) {\r\n            return false;\r\n        }\r\n\r\n        return this.alpha < 1.0 || this._opacityTexture != null || this._shouldUseAlphaFromAlbedoTexture();\r\n    }\r\n\r\n    /**\r\n     * Specifies whether or not this material should be rendered in alpha test mode.\r\n     */\r\n    public needAlphaTesting(): boolean {\r\n        if (this._forceAlphaTest) {\r\n            return true;\r\n        }\r\n\r\n        if (this.subSurface?.disableAlphaBlending) {\r\n            return false;\r\n        }\r\n\r\n        return this._hasAlphaChannel() && (this._transparencyMode == null || this._transparencyMode === PBRBaseMaterial.PBRMATERIAL_ALPHATEST);\r\n    }\r\n\r\n    /**\r\n     * Specifies whether or not the alpha value of the albedo texture should be used for alpha blending.\r\n     */\r\n    protected _shouldUseAlphaFromAlbedoTexture(): boolean {\r\n        return this._albedoTexture != null && this._albedoTexture.hasAlpha && this._useAlphaFromAlbedoTexture && this._transparencyMode !== PBRBaseMaterial.PBRMATERIAL_OPAQUE;\r\n    }\r\n\r\n    /**\r\n     * Specifies whether or not there is a usable alpha channel for transparency.\r\n     */\r\n    protected _hasAlphaChannel(): boolean {\r\n        return (this._albedoTexture != null && this._albedoTexture.hasAlpha) || this._opacityTexture != null;\r\n    }\r\n\r\n    /**\r\n     * Gets the texture used for the alpha test.\r\n     */\r\n    public getAlphaTestTexture(): Nullable<BaseTexture> {\r\n        return this._albedoTexture;\r\n    }\r\n\r\n    /**\r\n     * Specifies that the submesh is ready to be used.\r\n     * @param mesh - BJS mesh.\r\n     * @param subMesh - A submesh of the BJS mesh.  Used to check if it is ready.\r\n     * @param useInstances - Specifies that instances should be used.\r\n     * @returns - boolean indicating that the submesh is ready or not.\r\n     */\r\n    public isReadyForSubMesh(mesh: AbstractMesh, subMesh: SubMesh, useInstances?: boolean): boolean {\r\n        if (!this._uniformBufferLayoutBuilt) {\r\n            this.buildUniformLayout();\r\n        }\r\n\r\n        if (subMesh.effect && this.isFrozen) {\r\n            if (subMesh.effect._wasPreviouslyReady && subMesh.effect._wasPreviouslyUsingInstances === useInstances) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        if (!subMesh.materialDefines) {\r\n            this._callbackPluginEventGeneric(MaterialPluginEvent.GetDefineNames, this._eventInfo);\r\n            subMesh.materialDefines = new PBRMaterialDefines(this._eventInfo.defineNames);\r\n        }\r\n\r\n        const defines = <PBRMaterialDefines>subMesh.materialDefines;\r\n        if (this._isReadyForSubMesh(subMesh)) {\r\n            return true;\r\n        }\r\n\r\n        const scene = this.getScene();\r\n        const engine = scene.getEngine();\r\n\r\n        if (defines._areTexturesDirty) {\r\n            this._eventInfo.hasRenderTargetTextures = false;\r\n            this._callbackPluginEventHasRenderTargetTextures(this._eventInfo);\r\n            this._cacheHasRenderTargetTextures = this._eventInfo.hasRenderTargetTextures;\r\n            if (scene.texturesEnabled) {\r\n                if (this._albedoTexture && MaterialFlags.DiffuseTextureEnabled) {\r\n                    if (!this._albedoTexture.isReadyOrNotBlocking()) {\r\n                        return false;\r\n                    }\r\n                }\r\n\r\n                if (this._ambientTexture && MaterialFlags.AmbientTextureEnabled) {\r\n                    if (!this._ambientTexture.isReadyOrNotBlocking()) {\r\n                        return false;\r\n                    }\r\n                }\r\n\r\n                if (this._opacityTexture && MaterialFlags.OpacityTextureEnabled) {\r\n                    if (!this._opacityTexture.isReadyOrNotBlocking()) {\r\n                        return false;\r\n                    }\r\n                }\r\n\r\n                const reflectionTexture = this._getReflectionTexture();\r\n                if (reflectionTexture && MaterialFlags.ReflectionTextureEnabled) {\r\n                    if (!reflectionTexture.isReadyOrNotBlocking()) {\r\n                        return false;\r\n                    }\r\n                    if (reflectionTexture.irradianceTexture) {\r\n                        if (!reflectionTexture.irradianceTexture.isReadyOrNotBlocking()) {\r\n                            return false;\r\n                        }\r\n                    } else {\r\n                        // Not ready until spherical are ready too.\r\n                        if (!reflectionTexture.sphericalPolynomial && reflectionTexture.getInternalTexture()?._sphericalPolynomialPromise) {\r\n                            return false;\r\n                        }\r\n                    }\r\n                }\r\n\r\n                if (this._lightmapTexture && MaterialFlags.LightmapTextureEnabled) {\r\n                    if (!this._lightmapTexture.isReadyOrNotBlocking()) {\r\n                        return false;\r\n                    }\r\n                }\r\n\r\n                if (this._emissiveTexture && MaterialFlags.EmissiveTextureEnabled) {\r\n                    if (!this._emissiveTexture.isReadyOrNotBlocking()) {\r\n                        return false;\r\n                    }\r\n                }\r\n\r\n                if (MaterialFlags.SpecularTextureEnabled) {\r\n                    if (this._metallicTexture) {\r\n                        if (!this._metallicTexture.isReadyOrNotBlocking()) {\r\n                            return false;\r\n                        }\r\n                    } else if (this._reflectivityTexture) {\r\n                        if (!this._reflectivityTexture.isReadyOrNotBlocking()) {\r\n                            return false;\r\n                        }\r\n                    }\r\n\r\n                    if (this._metallicReflectanceTexture) {\r\n                        if (!this._metallicReflectanceTexture.isReadyOrNotBlocking()) {\r\n                            return false;\r\n                        }\r\n                    }\r\n\r\n                    if (this._reflectanceTexture) {\r\n                        if (!this._reflectanceTexture.isReadyOrNotBlocking()) {\r\n                            return false;\r\n                        }\r\n                    }\r\n\r\n                    if (this._microSurfaceTexture) {\r\n                        if (!this._microSurfaceTexture.isReadyOrNotBlocking()) {\r\n                            return false;\r\n                        }\r\n                    }\r\n                }\r\n\r\n                if (engine.getCaps().standardDerivatives && this._bumpTexture && MaterialFlags.BumpTextureEnabled && !this._disableBumpMap) {\r\n                    // Bump texture cannot be not blocking.\r\n                    if (!this._bumpTexture.isReady()) {\r\n                        return false;\r\n                    }\r\n                }\r\n\r\n                if (this._environmentBRDFTexture && MaterialFlags.ReflectionTextureEnabled) {\r\n                    // This is blocking.\r\n                    if (!this._environmentBRDFTexture.isReady()) {\r\n                        return false;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        this._eventInfo.isReadyForSubMesh = true;\r\n        this._eventInfo.defines = defines;\r\n        this._eventInfo.subMesh = subMesh;\r\n        this._callbackPluginEventIsReadyForSubMesh(this._eventInfo);\r\n\r\n        if (!this._eventInfo.isReadyForSubMesh) {\r\n            return false;\r\n        }\r\n\r\n        if (defines._areImageProcessingDirty && this._imageProcessingConfiguration) {\r\n            if (!this._imageProcessingConfiguration.isReady()) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        if (!engine.getCaps().standardDerivatives && !mesh.isVerticesDataPresent(VertexBuffer.NormalKind)) {\r\n            mesh.createNormals(true);\r\n            Logger.Warn(\"PBRMaterial: Normals have been created for the mesh: \" + mesh.name);\r\n        }\r\n\r\n        const previousEffect = subMesh.effect;\r\n        const lightDisposed = defines._areLightsDisposed;\r\n        let effect = this._prepareEffect(mesh, defines, this.onCompiled, this.onError, useInstances, null, subMesh.getRenderingMesh().hasThinInstances);\r\n\r\n        let forceWasNotReadyPreviously = false;\r\n\r\n        if (effect) {\r\n            if (this._onEffectCreatedObservable) {\r\n                onCreatedEffectParameters.effect = effect;\r\n                onCreatedEffectParameters.subMesh = subMesh;\r\n                this._onEffectCreatedObservable.notifyObservers(onCreatedEffectParameters);\r\n            }\r\n\r\n            // Use previous effect while new one is compiling\r\n            if (this.allowShaderHotSwapping && previousEffect && !effect.isReady()) {\r\n                effect = previousEffect;\r\n                defines.markAsUnprocessed();\r\n\r\n                forceWasNotReadyPreviously = this.isFrozen;\r\n\r\n                if (lightDisposed) {\r\n                    // re register in case it takes more than one frame.\r\n                    defines._areLightsDisposed = true;\r\n                    return false;\r\n                }\r\n            } else {\r\n                scene.resetCachedMaterial();\r\n                subMesh.setEffect(effect, defines, this._materialContext);\r\n            }\r\n        }\r\n\r\n        if (!subMesh.effect || !subMesh.effect.isReady()) {\r\n            return false;\r\n        }\r\n\r\n        defines._renderId = scene.getRenderId();\r\n        subMesh.effect._wasPreviouslyReady = forceWasNotReadyPreviously ? false : true;\r\n        subMesh.effect._wasPreviouslyUsingInstances = !!useInstances;\r\n\r\n        this._checkScenePerformancePriority();\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Specifies if the material uses metallic roughness workflow.\r\n     * @returns boolean specifying if the material uses metallic roughness workflow.\r\n     */\r\n    public isMetallicWorkflow(): boolean {\r\n        if (this._metallic != null || this._roughness != null || this._metallicTexture) {\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    private _prepareEffect(\r\n        mesh: AbstractMesh,\r\n        defines: PBRMaterialDefines,\r\n        onCompiled: Nullable<(effect: Effect) => void> = null,\r\n        onError: Nullable<(effect: Effect, errors: string) => void> = null,\r\n        useInstances: Nullable<boolean> = null,\r\n        useClipPlane: Nullable<boolean> = null,\r\n        useThinInstances: boolean\r\n    ): Nullable<Effect> {\r\n        this._prepareDefines(mesh, defines, useInstances, useClipPlane, useThinInstances);\r\n\r\n        if (!defines.isDirty) {\r\n            return null;\r\n        }\r\n\r\n        defines.markAsProcessed();\r\n\r\n        const scene = this.getScene();\r\n        const engine = scene.getEngine();\r\n\r\n        // Fallbacks\r\n        const fallbacks = new EffectFallbacks();\r\n        let fallbackRank = 0;\r\n        if (defines.USESPHERICALINVERTEX) {\r\n            fallbacks.addFallback(fallbackRank++, \"USESPHERICALINVERTEX\");\r\n        }\r\n\r\n        if (defines.FOG) {\r\n            fallbacks.addFallback(fallbackRank, \"FOG\");\r\n        }\r\n        if (defines.SPECULARAA) {\r\n            fallbacks.addFallback(fallbackRank, \"SPECULARAA\");\r\n        }\r\n        if (defines.POINTSIZE) {\r\n            fallbacks.addFallback(fallbackRank, \"POINTSIZE\");\r\n        }\r\n        if (defines.LOGARITHMICDEPTH) {\r\n            fallbacks.addFallback(fallbackRank, \"LOGARITHMICDEPTH\");\r\n        }\r\n        if (defines.PARALLAX) {\r\n            fallbacks.addFallback(fallbackRank, \"PARALLAX\");\r\n        }\r\n        if (defines.PARALLAX_RHS) {\r\n            fallbacks.addFallback(fallbackRank, \"PARALLAX_RHS\");\r\n        }\r\n        if (defines.PARALLAXOCCLUSION) {\r\n            fallbacks.addFallback(fallbackRank++, \"PARALLAXOCCLUSION\");\r\n        }\r\n\r\n        if (defines.ENVIRONMENTBRDF) {\r\n            fallbacks.addFallback(fallbackRank++, \"ENVIRONMENTBRDF\");\r\n        }\r\n\r\n        if (defines.TANGENT) {\r\n            fallbacks.addFallback(fallbackRank++, \"TANGENT\");\r\n        }\r\n\r\n        if (defines.BUMP) {\r\n            fallbacks.addFallback(fallbackRank++, \"BUMP\");\r\n        }\r\n\r\n        fallbackRank = MaterialHelper.HandleFallbacksForShadows(defines, fallbacks, this._maxSimultaneousLights, fallbackRank++);\r\n\r\n        if (defines.SPECULARTERM) {\r\n            fallbacks.addFallback(fallbackRank++, \"SPECULARTERM\");\r\n        }\r\n\r\n        if (defines.USESPHERICALFROMREFLECTIONMAP) {\r\n            fallbacks.addFallback(fallbackRank++, \"USESPHERICALFROMREFLECTIONMAP\");\r\n        }\r\n\r\n        if (defines.USEIRRADIANCEMAP) {\r\n            fallbacks.addFallback(fallbackRank++, \"USEIRRADIANCEMAP\");\r\n        }\r\n\r\n        if (defines.LIGHTMAP) {\r\n            fallbacks.addFallback(fallbackRank++, \"LIGHTMAP\");\r\n        }\r\n\r\n        if (defines.NORMAL) {\r\n            fallbacks.addFallback(fallbackRank++, \"NORMAL\");\r\n        }\r\n\r\n        if (defines.AMBIENT) {\r\n            fallbacks.addFallback(fallbackRank++, \"AMBIENT\");\r\n        }\r\n\r\n        if (defines.EMISSIVE) {\r\n            fallbacks.addFallback(fallbackRank++, \"EMISSIVE\");\r\n        }\r\n\r\n        if (defines.VERTEXCOLOR) {\r\n            fallbacks.addFallback(fallbackRank++, \"VERTEXCOLOR\");\r\n        }\r\n\r\n        if (defines.MORPHTARGETS) {\r\n            fallbacks.addFallback(fallbackRank++, \"MORPHTARGETS\");\r\n        }\r\n\r\n        if (defines.MULTIVIEW) {\r\n            fallbacks.addFallback(0, \"MULTIVIEW\");\r\n        }\r\n\r\n        //Attributes\r\n        const attribs = [VertexBuffer.PositionKind];\r\n\r\n        if (defines.NORMAL) {\r\n            attribs.push(VertexBuffer.NormalKind);\r\n        }\r\n\r\n        if (defines.TANGENT) {\r\n            attribs.push(VertexBuffer.TangentKind);\r\n        }\r\n\r\n        for (let i = 1; i <= Constants.MAX_SUPPORTED_UV_SETS; ++i) {\r\n            if (defines[\"UV\" + i]) {\r\n                attribs.push(`uv${i === 1 ? \"\" : i}`);\r\n            }\r\n        }\r\n\r\n        if (defines.VERTEXCOLOR) {\r\n            attribs.push(VertexBuffer.ColorKind);\r\n        }\r\n\r\n        if (defines.INSTANCESCOLOR) {\r\n            attribs.push(VertexBuffer.ColorInstanceKind);\r\n        }\r\n\r\n        MaterialHelper.PrepareAttributesForBones(attribs, mesh, defines, fallbacks);\r\n        MaterialHelper.PrepareAttributesForInstances(attribs, defines);\r\n        MaterialHelper.PrepareAttributesForMorphTargets(attribs, mesh, defines);\r\n        MaterialHelper.PrepareAttributesForBakedVertexAnimation(attribs, mesh, defines);\r\n\r\n        let shaderName = \"pbr\";\r\n\r\n        const uniforms = [\r\n            \"world\",\r\n            \"view\",\r\n            \"viewProjection\",\r\n            \"vEyePosition\",\r\n            \"vLightsType\",\r\n            \"vAmbientColor\",\r\n            \"vAlbedoColor\",\r\n            \"vReflectivityColor\",\r\n            \"vMetallicReflectanceFactors\",\r\n            \"vEmissiveColor\",\r\n            \"visibility\",\r\n            \"vReflectionColor\",\r\n            \"vFogInfos\",\r\n            \"vFogColor\",\r\n            \"pointSize\",\r\n            \"vAlbedoInfos\",\r\n            \"vAmbientInfos\",\r\n            \"vOpacityInfos\",\r\n            \"vReflectionInfos\",\r\n            \"vReflectionPosition\",\r\n            \"vReflectionSize\",\r\n            \"vEmissiveInfos\",\r\n            \"vReflectivityInfos\",\r\n            \"vReflectionFilteringInfo\",\r\n            \"vMetallicReflectanceInfos\",\r\n            \"vReflectanceInfos\",\r\n            \"vMicroSurfaceSamplerInfos\",\r\n            \"vBumpInfos\",\r\n            \"vLightmapInfos\",\r\n            \"mBones\",\r\n            \"albedoMatrix\",\r\n            \"ambientMatrix\",\r\n            \"opacityMatrix\",\r\n            \"reflectionMatrix\",\r\n            \"emissiveMatrix\",\r\n            \"reflectivityMatrix\",\r\n            \"normalMatrix\",\r\n            \"microSurfaceSamplerMatrix\",\r\n            \"bumpMatrix\",\r\n            \"lightmapMatrix\",\r\n            \"metallicReflectanceMatrix\",\r\n            \"reflectanceMatrix\",\r\n            \"vLightingIntensity\",\r\n            \"logarithmicDepthConstant\",\r\n            \"vSphericalX\",\r\n            \"vSphericalY\",\r\n            \"vSphericalZ\",\r\n            \"vSphericalXX_ZZ\",\r\n            \"vSphericalYY_ZZ\",\r\n            \"vSphericalZZ\",\r\n            \"vSphericalXY\",\r\n            \"vSphericalYZ\",\r\n            \"vSphericalZX\",\r\n            \"vSphericalL00\",\r\n            \"vSphericalL1_1\",\r\n            \"vSphericalL10\",\r\n            \"vSphericalL11\",\r\n            \"vSphericalL2_2\",\r\n            \"vSphericalL2_1\",\r\n            \"vSphericalL20\",\r\n            \"vSphericalL21\",\r\n            \"vSphericalL22\",\r\n            \"vReflectionMicrosurfaceInfos\",\r\n            \"vTangentSpaceParams\",\r\n            \"boneTextureWidth\",\r\n            \"vDebugMode\",\r\n            \"morphTargetTextureInfo\",\r\n            \"morphTargetTextureIndices\",\r\n        ];\r\n\r\n        const samplers = [\r\n            \"albedoSampler\",\r\n            \"reflectivitySampler\",\r\n            \"ambientSampler\",\r\n            \"emissiveSampler\",\r\n            \"bumpSampler\",\r\n            \"lightmapSampler\",\r\n            \"opacitySampler\",\r\n            \"reflectionSampler\",\r\n            \"reflectionSamplerLow\",\r\n            \"reflectionSamplerHigh\",\r\n            \"irradianceSampler\",\r\n            \"microSurfaceSampler\",\r\n            \"environmentBrdfSampler\",\r\n            \"boneSampler\",\r\n            \"metallicReflectanceSampler\",\r\n            \"reflectanceSampler\",\r\n            \"morphTargets\",\r\n            \"oitDepthSampler\",\r\n            \"oitFrontColorSampler\",\r\n        ];\r\n\r\n        const uniformBuffers = [\"Material\", \"Scene\", \"Mesh\"];\r\n\r\n        const indexParameters = { maxSimultaneousLights: this._maxSimultaneousLights, maxSimultaneousMorphTargets: defines.NUM_MORPH_INFLUENCERS };\r\n\r\n        this._eventInfo.fallbacks = fallbacks;\r\n        this._eventInfo.fallbackRank = fallbackRank;\r\n        this._eventInfo.defines = defines;\r\n        this._eventInfo.uniforms = uniforms;\r\n        this._eventInfo.attributes = attribs;\r\n        this._eventInfo.samplers = samplers;\r\n        this._eventInfo.uniformBuffersNames = uniformBuffers;\r\n        this._eventInfo.customCode = undefined;\r\n        this._eventInfo.mesh = mesh;\r\n        this._eventInfo.indexParameters = indexParameters;\r\n        this._callbackPluginEventGeneric(MaterialPluginEvent.PrepareEffect, this._eventInfo);\r\n\r\n        PrePassConfiguration.AddUniforms(uniforms);\r\n        PrePassConfiguration.AddSamplers(samplers);\r\n        addClipPlaneUniforms(uniforms);\r\n\r\n        if (ImageProcessingConfiguration) {\r\n            ImageProcessingConfiguration.PrepareUniforms(uniforms, defines);\r\n            ImageProcessingConfiguration.PrepareSamplers(samplers, defines);\r\n        }\r\n\r\n        MaterialHelper.PrepareUniformsAndSamplersList(<IEffectCreationOptions>{\r\n            uniformsNames: uniforms,\r\n            uniformBuffersNames: uniformBuffers,\r\n            samplers: samplers,\r\n            defines: defines,\r\n            maxSimultaneousLights: this._maxSimultaneousLights,\r\n        });\r\n\r\n        const csnrOptions: ICustomShaderNameResolveOptions = {};\r\n\r\n        if (this.customShaderNameResolve) {\r\n            shaderName = this.customShaderNameResolve(shaderName, uniforms, uniformBuffers, samplers, defines, attribs, csnrOptions);\r\n        }\r\n\r\n        const join = defines.toString();\r\n        const effect = engine.createEffect(\r\n            shaderName,\r\n            <IEffectCreationOptions>{\r\n                attributes: attribs,\r\n                uniformsNames: uniforms,\r\n                uniformBuffersNames: uniformBuffers,\r\n                samplers: samplers,\r\n                defines: join,\r\n                fallbacks: fallbacks,\r\n                onCompiled: onCompiled,\r\n                onError: onError,\r\n                indexParameters,\r\n                processFinalCode: csnrOptions.processFinalCode,\r\n                processCodeAfterIncludes: this._eventInfo.customCode,\r\n                multiTarget: defines.PREPASS,\r\n            },\r\n            engine\r\n        );\r\n\r\n        this._eventInfo.customCode = undefined;\r\n\r\n        return effect;\r\n    }\r\n\r\n    private _prepareDefines(\r\n        mesh: AbstractMesh,\r\n        defines: PBRMaterialDefines,\r\n        useInstances: Nullable<boolean> = null,\r\n        useClipPlane: Nullable<boolean> = null,\r\n        useThinInstances: boolean = false\r\n    ): void {\r\n        const scene = this.getScene();\r\n        const engine = scene.getEngine();\r\n\r\n        // Lights\r\n        MaterialHelper.PrepareDefinesForLights(scene, mesh, defines, true, this._maxSimultaneousLights, this._disableLighting);\r\n        defines._needNormals = true;\r\n\r\n        // Multiview\r\n        MaterialHelper.PrepareDefinesForMultiview(scene, defines);\r\n\r\n        // PrePass\r\n        const oit = this.needAlphaBlendingForMesh(mesh) && this.getScene().useOrderIndependentTransparency;\r\n        MaterialHelper.PrepareDefinesForPrePass(scene, defines, this.canRenderToMRT && !oit);\r\n\r\n        // Order independant transparency\r\n        MaterialHelper.PrepareDefinesForOIT(scene, defines, oit);\r\n\r\n        // Textures\r\n        defines.METALLICWORKFLOW = this.isMetallicWorkflow();\r\n        if (defines._areTexturesDirty) {\r\n            defines._needUVs = false;\r\n            for (let i = 1; i <= Constants.MAX_SUPPORTED_UV_SETS; ++i) {\r\n                defines[\"MAINUV\" + i] = false;\r\n            }\r\n            if (scene.texturesEnabled) {\r\n                defines.ALBEDODIRECTUV = 0;\r\n                defines.AMBIENTDIRECTUV = 0;\r\n                defines.OPACITYDIRECTUV = 0;\r\n                defines.EMISSIVEDIRECTUV = 0;\r\n                defines.REFLECTIVITYDIRECTUV = 0;\r\n                defines.MICROSURFACEMAPDIRECTUV = 0;\r\n                defines.METALLIC_REFLECTANCEDIRECTUV = 0;\r\n                defines.REFLECTANCEDIRECTUV = 0;\r\n                defines.BUMPDIRECTUV = 0;\r\n                defines.LIGHTMAPDIRECTUV = 0;\r\n\r\n                if (engine.getCaps().textureLOD) {\r\n                    defines.LODBASEDMICROSFURACE = true;\r\n                }\r\n\r\n                if (this._albedoTexture && MaterialFlags.DiffuseTextureEnabled) {\r\n                    MaterialHelper.PrepareDefinesForMergedUV(this._albedoTexture, defines, \"ALBEDO\");\r\n                    defines.GAMMAALBEDO = this._albedoTexture.gammaSpace;\r\n                } else {\r\n                    defines.ALBEDO = false;\r\n                }\r\n\r\n                if (this._ambientTexture && MaterialFlags.AmbientTextureEnabled) {\r\n                    MaterialHelper.PrepareDefinesForMergedUV(this._ambientTexture, defines, \"AMBIENT\");\r\n                    defines.AMBIENTINGRAYSCALE = this._useAmbientInGrayScale;\r\n                } else {\r\n                    defines.AMBIENT = false;\r\n                }\r\n\r\n                if (this._opacityTexture && MaterialFlags.OpacityTextureEnabled) {\r\n                    MaterialHelper.PrepareDefinesForMergedUV(this._opacityTexture, defines, \"OPACITY\");\r\n                    defines.OPACITYRGB = this._opacityTexture.getAlphaFromRGB;\r\n                } else {\r\n                    defines.OPACITY = false;\r\n                }\r\n\r\n                const reflectionTexture = this._getReflectionTexture();\r\n                if (reflectionTexture && MaterialFlags.ReflectionTextureEnabled) {\r\n                    defines.REFLECTION = true;\r\n                    defines.GAMMAREFLECTION = reflectionTexture.gammaSpace;\r\n                    defines.RGBDREFLECTION = reflectionTexture.isRGBD;\r\n                    defines.LODINREFLECTIONALPHA = reflectionTexture.lodLevelInAlpha;\r\n                    defines.LINEARSPECULARREFLECTION = reflectionTexture.linearSpecularLOD;\r\n\r\n                    if (this.realTimeFiltering && this.realTimeFilteringQuality > 0) {\r\n                        defines.NUM_SAMPLES = \"\" + this.realTimeFilteringQuality;\r\n                        if (engine._features.needTypeSuffixInShaderConstants) {\r\n                            defines.NUM_SAMPLES = defines.NUM_SAMPLES + \"u\";\r\n                        }\r\n\r\n                        defines.REALTIME_FILTERING = true;\r\n                    } else {\r\n                        defines.REALTIME_FILTERING = false;\r\n                    }\r\n\r\n                    defines.INVERTCUBICMAP = reflectionTexture.coordinatesMode === Texture.INVCUBIC_MODE;\r\n                    defines.REFLECTIONMAP_3D = reflectionTexture.isCube;\r\n                    defines.REFLECTIONMAP_OPPOSITEZ = defines.REFLECTIONMAP_3D && this.getScene().useRightHandedSystem ? !reflectionTexture.invertZ : reflectionTexture.invertZ;\r\n\r\n                    defines.REFLECTIONMAP_CUBIC = false;\r\n                    defines.REFLECTIONMAP_EXPLICIT = false;\r\n                    defines.REFLECTIONMAP_PLANAR = false;\r\n                    defines.REFLECTIONMAP_PROJECTION = false;\r\n                    defines.REFLECTIONMAP_SKYBOX = false;\r\n                    defines.REFLECTIONMAP_SPHERICAL = false;\r\n                    defines.REFLECTIONMAP_EQUIRECTANGULAR = false;\r\n                    defines.REFLECTIONMAP_EQUIRECTANGULAR_FIXED = false;\r\n                    defines.REFLECTIONMAP_MIRROREDEQUIRECTANGULAR_FIXED = false;\r\n\r\n                    switch (reflectionTexture.coordinatesMode) {\r\n                        case Texture.EXPLICIT_MODE:\r\n                            defines.REFLECTIONMAP_EXPLICIT = true;\r\n                            break;\r\n                        case Texture.PLANAR_MODE:\r\n                            defines.REFLECTIONMAP_PLANAR = true;\r\n                            break;\r\n                        case Texture.PROJECTION_MODE:\r\n                            defines.REFLECTIONMAP_PROJECTION = true;\r\n                            break;\r\n                        case Texture.SKYBOX_MODE:\r\n                            defines.REFLECTIONMAP_SKYBOX = true;\r\n                            break;\r\n                        case Texture.SPHERICAL_MODE:\r\n                            defines.REFLECTIONMAP_SPHERICAL = true;\r\n                            break;\r\n                        case Texture.EQUIRECTANGULAR_MODE:\r\n                            defines.REFLECTIONMAP_EQUIRECTANGULAR = true;\r\n                            break;\r\n                        case Texture.FIXED_EQUIRECTANGULAR_MODE:\r\n                            defines.REFLECTIONMAP_EQUIRECTANGULAR_FIXED = true;\r\n                            break;\r\n                        case Texture.FIXED_EQUIRECTANGULAR_MIRRORED_MODE:\r\n                            defines.REFLECTIONMAP_MIRROREDEQUIRECTANGULAR_FIXED = true;\r\n                            break;\r\n                        case Texture.CUBIC_MODE:\r\n                        case Texture.INVCUBIC_MODE:\r\n                        default:\r\n                            defines.REFLECTIONMAP_CUBIC = true;\r\n                            defines.USE_LOCAL_REFLECTIONMAP_CUBIC = (<any>reflectionTexture).boundingBoxSize ? true : false;\r\n                            break;\r\n                    }\r\n\r\n                    if (reflectionTexture.coordinatesMode !== Texture.SKYBOX_MODE) {\r\n                        if (reflectionTexture.irradianceTexture) {\r\n                            defines.USEIRRADIANCEMAP = true;\r\n                            defines.USESPHERICALFROMREFLECTIONMAP = false;\r\n                        }\r\n                        // Assume using spherical polynomial if the reflection texture is a cube map\r\n                        else if (reflectionTexture.isCube) {\r\n                            defines.USESPHERICALFROMREFLECTIONMAP = true;\r\n                            defines.USEIRRADIANCEMAP = false;\r\n                            if (this._forceIrradianceInFragment || this.realTimeFiltering || this._twoSidedLighting || engine.getCaps().maxVaryingVectors <= 8) {\r\n                                defines.USESPHERICALINVERTEX = false;\r\n                            } else {\r\n                                defines.USESPHERICALINVERTEX = true;\r\n                            }\r\n                        }\r\n                    }\r\n                } else {\r\n                    defines.REFLECTION = false;\r\n                    defines.REFLECTIONMAP_3D = false;\r\n                    defines.REFLECTIONMAP_SPHERICAL = false;\r\n                    defines.REFLECTIONMAP_PLANAR = false;\r\n                    defines.REFLECTIONMAP_CUBIC = false;\r\n                    defines.USE_LOCAL_REFLECTIONMAP_CUBIC = false;\r\n                    defines.REFLECTIONMAP_PROJECTION = false;\r\n                    defines.REFLECTIONMAP_SKYBOX = false;\r\n                    defines.REFLECTIONMAP_EXPLICIT = false;\r\n                    defines.REFLECTIONMAP_EQUIRECTANGULAR = false;\r\n                    defines.REFLECTIONMAP_EQUIRECTANGULAR_FIXED = false;\r\n                    defines.REFLECTIONMAP_MIRROREDEQUIRECTANGULAR_FIXED = false;\r\n                    defines.INVERTCUBICMAP = false;\r\n                    defines.USESPHERICALFROMREFLECTIONMAP = false;\r\n                    defines.USEIRRADIANCEMAP = false;\r\n                    defines.USESPHERICALINVERTEX = false;\r\n                    defines.REFLECTIONMAP_OPPOSITEZ = false;\r\n                    defines.LODINREFLECTIONALPHA = false;\r\n                    defines.GAMMAREFLECTION = false;\r\n                    defines.RGBDREFLECTION = false;\r\n                    defines.LINEARSPECULARREFLECTION = false;\r\n                }\r\n\r\n                if (this._lightmapTexture && MaterialFlags.LightmapTextureEnabled) {\r\n                    MaterialHelper.PrepareDefinesForMergedUV(this._lightmapTexture, defines, \"LIGHTMAP\");\r\n                    defines.USELIGHTMAPASSHADOWMAP = this._useLightmapAsShadowmap;\r\n                    defines.GAMMALIGHTMAP = this._lightmapTexture.gammaSpace;\r\n                    defines.RGBDLIGHTMAP = this._lightmapTexture.isRGBD;\r\n                } else {\r\n                    defines.LIGHTMAP = false;\r\n                }\r\n\r\n                if (this._emissiveTexture && MaterialFlags.EmissiveTextureEnabled) {\r\n                    MaterialHelper.PrepareDefinesForMergedUV(this._emissiveTexture, defines, \"EMISSIVE\");\r\n                    defines.GAMMAEMISSIVE = this._emissiveTexture.gammaSpace;\r\n                } else {\r\n                    defines.EMISSIVE = false;\r\n                }\r\n\r\n                if (MaterialFlags.SpecularTextureEnabled) {\r\n                    if (this._metallicTexture) {\r\n                        MaterialHelper.PrepareDefinesForMergedUV(this._metallicTexture, defines, \"REFLECTIVITY\");\r\n                        defines.ROUGHNESSSTOREINMETALMAPALPHA = this._useRoughnessFromMetallicTextureAlpha;\r\n                        defines.ROUGHNESSSTOREINMETALMAPGREEN = !this._useRoughnessFromMetallicTextureAlpha && this._useRoughnessFromMetallicTextureGreen;\r\n                        defines.METALLNESSSTOREINMETALMAPBLUE = this._useMetallnessFromMetallicTextureBlue;\r\n                        defines.AOSTOREINMETALMAPRED = this._useAmbientOcclusionFromMetallicTextureRed;\r\n                        defines.REFLECTIVITY_GAMMA = false;\r\n                    } else if (this._reflectivityTexture) {\r\n                        MaterialHelper.PrepareDefinesForMergedUV(this._reflectivityTexture, defines, \"REFLECTIVITY\");\r\n                        defines.MICROSURFACEFROMREFLECTIVITYMAP = this._useMicroSurfaceFromReflectivityMapAlpha;\r\n                        defines.MICROSURFACEAUTOMATIC = this._useAutoMicroSurfaceFromReflectivityMap;\r\n                        defines.REFLECTIVITY_GAMMA = this._reflectivityTexture.gammaSpace;\r\n                    } else {\r\n                        defines.REFLECTIVITY = false;\r\n                    }\r\n\r\n                    if (this._metallicReflectanceTexture || this._reflectanceTexture) {\r\n                        const identicalTextures =\r\n                            this._metallicReflectanceTexture !== null &&\r\n                            this._metallicReflectanceTexture._texture === this._reflectanceTexture?._texture &&\r\n                            this._metallicReflectanceTexture.checkTransformsAreIdentical(this._reflectanceTexture);\r\n\r\n                        defines.METALLIC_REFLECTANCE_USE_ALPHA_ONLY = this._useOnlyMetallicFromMetallicReflectanceTexture && !identicalTextures;\r\n                        if (this._metallicReflectanceTexture) {\r\n                            MaterialHelper.PrepareDefinesForMergedUV(this._metallicReflectanceTexture, defines, \"METALLIC_REFLECTANCE\");\r\n                            defines.METALLIC_REFLECTANCE_GAMMA = this._metallicReflectanceTexture.gammaSpace;\r\n                        } else {\r\n                            defines.METALLIC_REFLECTANCE = false;\r\n                        }\r\n                        if (\r\n                            this._reflectanceTexture &&\r\n                            !identicalTextures &&\r\n                            (!this._metallicReflectanceTexture || (this._metallicReflectanceTexture && this._useOnlyMetallicFromMetallicReflectanceTexture))\r\n                        ) {\r\n                            MaterialHelper.PrepareDefinesForMergedUV(this._reflectanceTexture, defines, \"REFLECTANCE\");\r\n                            defines.REFLECTANCE_GAMMA = this._reflectanceTexture.gammaSpace;\r\n                        } else {\r\n                            defines.REFLECTANCE = false;\r\n                        }\r\n                    } else {\r\n                        defines.METALLIC_REFLECTANCE = false;\r\n                        defines.REFLECTANCE = false;\r\n                    }\r\n\r\n                    if (this._microSurfaceTexture) {\r\n                        MaterialHelper.PrepareDefinesForMergedUV(this._microSurfaceTexture, defines, \"MICROSURFACEMAP\");\r\n                    } else {\r\n                        defines.MICROSURFACEMAP = false;\r\n                    }\r\n                } else {\r\n                    defines.REFLECTIVITY = false;\r\n                    defines.MICROSURFACEMAP = false;\r\n                }\r\n\r\n                if (engine.getCaps().standardDerivatives && this._bumpTexture && MaterialFlags.BumpTextureEnabled && !this._disableBumpMap) {\r\n                    MaterialHelper.PrepareDefinesForMergedUV(this._bumpTexture, defines, \"BUMP\");\r\n\r\n                    if (this._useParallax && this._albedoTexture && MaterialFlags.DiffuseTextureEnabled) {\r\n                        defines.PARALLAX = true;\r\n                        defines.PARALLAX_RHS = scene.useRightHandedSystem;\r\n                        defines.PARALLAXOCCLUSION = !!this._useParallaxOcclusion;\r\n                    } else {\r\n                        defines.PARALLAX = false;\r\n                    }\r\n\r\n                    defines.OBJECTSPACE_NORMALMAP = this._useObjectSpaceNormalMap;\r\n                } else {\r\n                    defines.BUMP = false;\r\n                    defines.PARALLAX = false;\r\n                    defines.PARALLAX_RHS = false;\r\n                    defines.PARALLAXOCCLUSION = false;\r\n                    defines.OBJECTSPACE_NORMALMAP = false;\r\n                }\r\n\r\n                if (this._environmentBRDFTexture && MaterialFlags.ReflectionTextureEnabled) {\r\n                    defines.ENVIRONMENTBRDF = true;\r\n                    defines.ENVIRONMENTBRDF_RGBD = this._environmentBRDFTexture.isRGBD;\r\n                } else {\r\n                    defines.ENVIRONMENTBRDF = false;\r\n                    defines.ENVIRONMENTBRDF_RGBD = false;\r\n                }\r\n\r\n                if (this._shouldUseAlphaFromAlbedoTexture()) {\r\n                    defines.ALPHAFROMALBEDO = true;\r\n                } else {\r\n                    defines.ALPHAFROMALBEDO = false;\r\n                }\r\n            }\r\n\r\n            defines.SPECULAROVERALPHA = this._useSpecularOverAlpha;\r\n\r\n            if (this._lightFalloff === PBRBaseMaterial.LIGHTFALLOFF_STANDARD) {\r\n                defines.USEPHYSICALLIGHTFALLOFF = false;\r\n                defines.USEGLTFLIGHTFALLOFF = false;\r\n            } else if (this._lightFalloff === PBRBaseMaterial.LIGHTFALLOFF_GLTF) {\r\n                defines.USEPHYSICALLIGHTFALLOFF = false;\r\n                defines.USEGLTFLIGHTFALLOFF = true;\r\n            } else {\r\n                defines.USEPHYSICALLIGHTFALLOFF = true;\r\n                defines.USEGLTFLIGHTFALLOFF = false;\r\n            }\r\n\r\n            defines.RADIANCEOVERALPHA = this._useRadianceOverAlpha;\r\n\r\n            if (!this.backFaceCulling && this._twoSidedLighting) {\r\n                defines.TWOSIDEDLIGHTING = true;\r\n            } else {\r\n                defines.TWOSIDEDLIGHTING = false;\r\n            }\r\n\r\n            defines.SPECULARAA = engine.getCaps().standardDerivatives && this._enableSpecularAntiAliasing;\r\n        }\r\n\r\n        if (defines._areTexturesDirty || defines._areMiscDirty) {\r\n            defines.ALPHATESTVALUE = `${this._alphaCutOff}${this._alphaCutOff % 1 === 0 ? \".\" : \"\"}`;\r\n            defines.PREMULTIPLYALPHA = this.alphaMode === Constants.ALPHA_PREMULTIPLIED || this.alphaMode === Constants.ALPHA_PREMULTIPLIED_PORTERDUFF;\r\n            defines.ALPHABLEND = this.needAlphaBlendingForMesh(mesh);\r\n            defines.ALPHAFRESNEL = this._useAlphaFresnel || this._useLinearAlphaFresnel;\r\n            defines.LINEARALPHAFRESNEL = this._useLinearAlphaFresnel;\r\n        }\r\n\r\n        if (defines._areImageProcessingDirty && this._imageProcessingConfiguration) {\r\n            this._imageProcessingConfiguration.prepareDefines(defines);\r\n        }\r\n\r\n        defines.FORCENORMALFORWARD = this._forceNormalForward;\r\n\r\n        defines.RADIANCEOCCLUSION = this._useRadianceOcclusion;\r\n\r\n        defines.HORIZONOCCLUSION = this._useHorizonOcclusion;\r\n\r\n        // Misc.\r\n        if (defines._areMiscDirty) {\r\n            MaterialHelper.PrepareDefinesForMisc(\r\n                mesh,\r\n                scene,\r\n                this._useLogarithmicDepth,\r\n                this.pointsCloud,\r\n                this.fogEnabled,\r\n                this._shouldTurnAlphaTestOn(mesh) || this._forceAlphaTest,\r\n                defines,\r\n                this._applyDecalMapAfterDetailMap\r\n            );\r\n            defines.UNLIT = this._unlit || ((this.pointsCloud || this.wireframe) && !mesh.isVerticesDataPresent(VertexBuffer.NormalKind));\r\n            defines.DEBUGMODE = this._debugMode;\r\n        }\r\n\r\n        // Values that need to be evaluated on every frame\r\n        MaterialHelper.PrepareDefinesForFrameBoundValues(scene, engine, this, defines, useInstances ? true : false, useClipPlane, useThinInstances);\r\n\r\n        // External config\r\n        this._eventInfo.defines = defines;\r\n        this._eventInfo.mesh = mesh;\r\n        this._callbackPluginEventPrepareDefinesBeforeAttributes(this._eventInfo);\r\n\r\n        // Attribs\r\n        MaterialHelper.PrepareDefinesForAttributes(mesh, defines, true, true, true, this._transparencyMode !== PBRBaseMaterial.PBRMATERIAL_OPAQUE);\r\n\r\n        // External config\r\n        this._callbackPluginEventPrepareDefines(this._eventInfo);\r\n    }\r\n\r\n    /**\r\n     * Force shader compilation\r\n     * @param mesh\r\n     * @param onCompiled\r\n     * @param options\r\n     */\r\n    public forceCompilation(mesh: AbstractMesh, onCompiled?: (material: Material) => void, options?: Partial<IMaterialCompilationOptions>): void {\r\n        const localOptions = {\r\n            clipPlane: false,\r\n            useInstances: false,\r\n            ...options,\r\n        };\r\n\r\n        if (!this._uniformBufferLayoutBuilt) {\r\n            this.buildUniformLayout();\r\n        }\r\n\r\n        this._callbackPluginEventGeneric(MaterialPluginEvent.GetDefineNames, this._eventInfo);\r\n        const defines = new PBRMaterialDefines(this._eventInfo.defineNames);\r\n        const effect = this._prepareEffect(mesh, defines, undefined, undefined, localOptions.useInstances, localOptions.clipPlane, mesh.hasThinInstances)!;\r\n        if (this._onEffectCreatedObservable) {\r\n            onCreatedEffectParameters.effect = effect;\r\n            onCreatedEffectParameters.subMesh = null;\r\n            this._onEffectCreatedObservable.notifyObservers(onCreatedEffectParameters);\r\n        }\r\n        if (effect.isReady()) {\r\n            if (onCompiled) {\r\n                onCompiled(this);\r\n            }\r\n        } else {\r\n            effect.onCompileObservable.add(() => {\r\n                if (onCompiled) {\r\n                    onCompiled(this);\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Initializes the uniform buffer layout for the shader.\r\n     */\r\n    public buildUniformLayout(): void {\r\n        // Order is important !\r\n        const ubo = this._uniformBuffer;\r\n        ubo.addUniform(\"vAlbedoInfos\", 2);\r\n        ubo.addUniform(\"vAmbientInfos\", 4);\r\n        ubo.addUniform(\"vOpacityInfos\", 2);\r\n        ubo.addUniform(\"vEmissiveInfos\", 2);\r\n        ubo.addUniform(\"vLightmapInfos\", 2);\r\n        ubo.addUniform(\"vReflectivityInfos\", 3);\r\n        ubo.addUniform(\"vMicroSurfaceSamplerInfos\", 2);\r\n        ubo.addUniform(\"vReflectionInfos\", 2);\r\n        ubo.addUniform(\"vReflectionFilteringInfo\", 2);\r\n        ubo.addUniform(\"vReflectionPosition\", 3);\r\n        ubo.addUniform(\"vReflectionSize\", 3);\r\n        ubo.addUniform(\"vBumpInfos\", 3);\r\n        ubo.addUniform(\"albedoMatrix\", 16);\r\n        ubo.addUniform(\"ambientMatrix\", 16);\r\n        ubo.addUniform(\"opacityMatrix\", 16);\r\n        ubo.addUniform(\"emissiveMatrix\", 16);\r\n        ubo.addUniform(\"lightmapMatrix\", 16);\r\n        ubo.addUniform(\"reflectivityMatrix\", 16);\r\n        ubo.addUniform(\"microSurfaceSamplerMatrix\", 16);\r\n        ubo.addUniform(\"bumpMatrix\", 16);\r\n        ubo.addUniform(\"vTangentSpaceParams\", 2);\r\n        ubo.addUniform(\"reflectionMatrix\", 16);\r\n\r\n        ubo.addUniform(\"vReflectionColor\", 3);\r\n        ubo.addUniform(\"vAlbedoColor\", 4);\r\n        ubo.addUniform(\"vLightingIntensity\", 4);\r\n\r\n        ubo.addUniform(\"vReflectionMicrosurfaceInfos\", 3);\r\n        ubo.addUniform(\"pointSize\", 1);\r\n        ubo.addUniform(\"vReflectivityColor\", 4);\r\n        ubo.addUniform(\"vEmissiveColor\", 3);\r\n        ubo.addUniform(\"vAmbientColor\", 3);\r\n\r\n        ubo.addUniform(\"vDebugMode\", 2);\r\n\r\n        ubo.addUniform(\"vMetallicReflectanceFactors\", 4);\r\n        ubo.addUniform(\"vMetallicReflectanceInfos\", 2);\r\n        ubo.addUniform(\"metallicReflectanceMatrix\", 16);\r\n        ubo.addUniform(\"vReflectanceInfos\", 2);\r\n        ubo.addUniform(\"reflectanceMatrix\", 16);\r\n\r\n        ubo.addUniform(\"vSphericalL00\", 3);\r\n        ubo.addUniform(\"vSphericalL1_1\", 3);\r\n        ubo.addUniform(\"vSphericalL10\", 3);\r\n        ubo.addUniform(\"vSphericalL11\", 3);\r\n        ubo.addUniform(\"vSphericalL2_2\", 3);\r\n        ubo.addUniform(\"vSphericalL2_1\", 3);\r\n        ubo.addUniform(\"vSphericalL20\", 3);\r\n        ubo.addUniform(\"vSphericalL21\", 3);\r\n        ubo.addUniform(\"vSphericalL22\", 3);\r\n\r\n        ubo.addUniform(\"vSphericalX\", 3);\r\n        ubo.addUniform(\"vSphericalY\", 3);\r\n        ubo.addUniform(\"vSphericalZ\", 3);\r\n        ubo.addUniform(\"vSphericalXX_ZZ\", 3);\r\n        ubo.addUniform(\"vSphericalYY_ZZ\", 3);\r\n        ubo.addUniform(\"vSphericalZZ\", 3);\r\n        ubo.addUniform(\"vSphericalXY\", 3);\r\n        ubo.addUniform(\"vSphericalYZ\", 3);\r\n        ubo.addUniform(\"vSphericalZX\", 3);\r\n\r\n        super.buildUniformLayout();\r\n    }\r\n\r\n    /**\r\n     * Binds the submesh data.\r\n     * @param world - The world matrix.\r\n     * @param mesh - The BJS mesh.\r\n     * @param subMesh - A submesh of the BJS mesh.\r\n     */\r\n    public bindForSubMesh(world: Matrix, mesh: Mesh, subMesh: SubMesh): void {\r\n        const scene = this.getScene();\r\n\r\n        const defines = <PBRMaterialDefines>subMesh.materialDefines;\r\n        if (!defines) {\r\n            return;\r\n        }\r\n\r\n        const effect = subMesh.effect;\r\n\r\n        if (!effect) {\r\n            return;\r\n        }\r\n\r\n        this._activeEffect = effect;\r\n\r\n        // Matrices Mesh.\r\n        mesh.getMeshUniformBuffer().bindToEffect(effect, \"Mesh\");\r\n        mesh.transferToEffect(world);\r\n\r\n        const engine = scene.getEngine();\r\n\r\n        // Binding unconditionally\r\n        this._uniformBuffer.bindToEffect(effect, \"Material\");\r\n\r\n        this.prePassConfiguration.bindForSubMesh(this._activeEffect, scene, mesh, world, this.isFrozen);\r\n\r\n        this._eventInfo.subMesh = subMesh;\r\n        this._callbackPluginEventHardBindForSubMesh(this._eventInfo);\r\n\r\n        // Normal Matrix\r\n        if (defines.OBJECTSPACE_NORMALMAP) {\r\n            world.toNormalMatrix(this._normalMatrix);\r\n            this.bindOnlyNormalMatrix(this._normalMatrix);\r\n        }\r\n\r\n        const mustRebind = effect._forceRebindOnNextCall || this._mustRebind(scene, effect, mesh.visibility);\r\n\r\n        // Bones\r\n        MaterialHelper.BindBonesParameters(mesh, this._activeEffect, this.prePassConfiguration);\r\n\r\n        let reflectionTexture: Nullable<BaseTexture> = null;\r\n        const ubo = this._uniformBuffer;\r\n        if (mustRebind) {\r\n            this.bindViewProjection(effect);\r\n            reflectionTexture = this._getReflectionTexture();\r\n\r\n            if (!ubo.useUbo || !this.isFrozen || !ubo.isSync || effect._forceRebindOnNextCall) {\r\n                // Texture uniforms\r\n                if (scene.texturesEnabled) {\r\n                    if (this._albedoTexture && MaterialFlags.DiffuseTextureEnabled) {\r\n                        ubo.updateFloat2(\"vAlbedoInfos\", this._albedoTexture.coordinatesIndex, this._albedoTexture.level);\r\n                        MaterialHelper.BindTextureMatrix(this._albedoTexture, ubo, \"albedo\");\r\n                    }\r\n\r\n                    if (this._ambientTexture && MaterialFlags.AmbientTextureEnabled) {\r\n                        ubo.updateFloat4(\r\n                            \"vAmbientInfos\",\r\n                            this._ambientTexture.coordinatesIndex,\r\n                            this._ambientTexture.level,\r\n                            this._ambientTextureStrength,\r\n                            this._ambientTextureImpactOnAnalyticalLights\r\n                        );\r\n                        MaterialHelper.BindTextureMatrix(this._ambientTexture, ubo, \"ambient\");\r\n                    }\r\n\r\n                    if (this._opacityTexture && MaterialFlags.OpacityTextureEnabled) {\r\n                        ubo.updateFloat2(\"vOpacityInfos\", this._opacityTexture.coordinatesIndex, this._opacityTexture.level);\r\n                        MaterialHelper.BindTextureMatrix(this._opacityTexture, ubo, \"opacity\");\r\n                    }\r\n\r\n                    if (reflectionTexture && MaterialFlags.ReflectionTextureEnabled) {\r\n                        ubo.updateMatrix(\"reflectionMatrix\", reflectionTexture.getReflectionTextureMatrix());\r\n                        ubo.updateFloat2(\"vReflectionInfos\", reflectionTexture.level, 0);\r\n\r\n                        if ((<any>reflectionTexture).boundingBoxSize) {\r\n                            const cubeTexture = <CubeTexture>reflectionTexture;\r\n\r\n                            ubo.updateVector3(\"vReflectionPosition\", cubeTexture.boundingBoxPosition);\r\n                            ubo.updateVector3(\"vReflectionSize\", cubeTexture.boundingBoxSize);\r\n                        }\r\n\r\n                        if (this.realTimeFiltering) {\r\n                            const width = reflectionTexture.getSize().width;\r\n                            ubo.updateFloat2(\"vReflectionFilteringInfo\", width, Scalar.Log2(width));\r\n                        }\r\n\r\n                        if (!defines.USEIRRADIANCEMAP) {\r\n                            const polynomials = reflectionTexture.sphericalPolynomial;\r\n                            if (defines.USESPHERICALFROMREFLECTIONMAP && polynomials) {\r\n                                if (defines.SPHERICAL_HARMONICS) {\r\n                                    const preScaledHarmonics = polynomials.preScaledHarmonics;\r\n                                    ubo.updateVector3(\"vSphericalL00\", preScaledHarmonics.l00);\r\n                                    ubo.updateVector3(\"vSphericalL1_1\", preScaledHarmonics.l1_1);\r\n                                    ubo.updateVector3(\"vSphericalL10\", preScaledHarmonics.l10);\r\n                                    ubo.updateVector3(\"vSphericalL11\", preScaledHarmonics.l11);\r\n                                    ubo.updateVector3(\"vSphericalL2_2\", preScaledHarmonics.l2_2);\r\n                                    ubo.updateVector3(\"vSphericalL2_1\", preScaledHarmonics.l2_1);\r\n                                    ubo.updateVector3(\"vSphericalL20\", preScaledHarmonics.l20);\r\n                                    ubo.updateVector3(\"vSphericalL21\", preScaledHarmonics.l21);\r\n                                    ubo.updateVector3(\"vSphericalL22\", preScaledHarmonics.l22);\r\n                                } else {\r\n                                    ubo.updateFloat3(\"vSphericalX\", polynomials.x.x, polynomials.x.y, polynomials.x.z);\r\n                                    ubo.updateFloat3(\"vSphericalY\", polynomials.y.x, polynomials.y.y, polynomials.y.z);\r\n                                    ubo.updateFloat3(\"vSphericalZ\", polynomials.z.x, polynomials.z.y, polynomials.z.z);\r\n                                    ubo.updateFloat3(\r\n                                        \"vSphericalXX_ZZ\",\r\n                                        polynomials.xx.x - polynomials.zz.x,\r\n                                        polynomials.xx.y - polynomials.zz.y,\r\n                                        polynomials.xx.z - polynomials.zz.z\r\n                                    );\r\n                                    ubo.updateFloat3(\r\n                                        \"vSphericalYY_ZZ\",\r\n                                        polynomials.yy.x - polynomials.zz.x,\r\n                                        polynomials.yy.y - polynomials.zz.y,\r\n                                        polynomials.yy.z - polynomials.zz.z\r\n                                    );\r\n                                    ubo.updateFloat3(\"vSphericalZZ\", polynomials.zz.x, polynomials.zz.y, polynomials.zz.z);\r\n                                    ubo.updateFloat3(\"vSphericalXY\", polynomials.xy.x, polynomials.xy.y, polynomials.xy.z);\r\n                                    ubo.updateFloat3(\"vSphericalYZ\", polynomials.yz.x, polynomials.yz.y, polynomials.yz.z);\r\n                                    ubo.updateFloat3(\"vSphericalZX\", polynomials.zx.x, polynomials.zx.y, polynomials.zx.z);\r\n                                }\r\n                            }\r\n                        }\r\n\r\n                        ubo.updateFloat3(\r\n                            \"vReflectionMicrosurfaceInfos\",\r\n                            reflectionTexture.getSize().width,\r\n                            reflectionTexture.lodGenerationScale,\r\n                            reflectionTexture.lodGenerationOffset\r\n                        );\r\n                    }\r\n\r\n                    if (this._emissiveTexture && MaterialFlags.EmissiveTextureEnabled) {\r\n                        ubo.updateFloat2(\"vEmissiveInfos\", this._emissiveTexture.coordinatesIndex, this._emissiveTexture.level);\r\n                        MaterialHelper.BindTextureMatrix(this._emissiveTexture, ubo, \"emissive\");\r\n                    }\r\n\r\n                    if (this._lightmapTexture && MaterialFlags.LightmapTextureEnabled) {\r\n                        ubo.updateFloat2(\"vLightmapInfos\", this._lightmapTexture.coordinatesIndex, this._lightmapTexture.level);\r\n                        MaterialHelper.BindTextureMatrix(this._lightmapTexture, ubo, \"lightmap\");\r\n                    }\r\n\r\n                    if (MaterialFlags.SpecularTextureEnabled) {\r\n                        if (this._metallicTexture) {\r\n                            ubo.updateFloat3(\"vReflectivityInfos\", this._metallicTexture.coordinatesIndex, this._metallicTexture.level, this._ambientTextureStrength);\r\n                            MaterialHelper.BindTextureMatrix(this._metallicTexture, ubo, \"reflectivity\");\r\n                        } else if (this._reflectivityTexture) {\r\n                            ubo.updateFloat3(\"vReflectivityInfos\", this._reflectivityTexture.coordinatesIndex, this._reflectivityTexture.level, 1.0);\r\n                            MaterialHelper.BindTextureMatrix(this._reflectivityTexture, ubo, \"reflectivity\");\r\n                        }\r\n\r\n                        if (this._metallicReflectanceTexture) {\r\n                            ubo.updateFloat2(\"vMetallicReflectanceInfos\", this._metallicReflectanceTexture.coordinatesIndex, this._metallicReflectanceTexture.level);\r\n                            MaterialHelper.BindTextureMatrix(this._metallicReflectanceTexture, ubo, \"metallicReflectance\");\r\n                        }\r\n\r\n                        if (this._reflectanceTexture && defines.REFLECTANCE) {\r\n                            ubo.updateFloat2(\"vReflectanceInfos\", this._reflectanceTexture.coordinatesIndex, this._reflectanceTexture.level);\r\n                            MaterialHelper.BindTextureMatrix(this._reflectanceTexture, ubo, \"reflectance\");\r\n                        }\r\n\r\n                        if (this._microSurfaceTexture) {\r\n                            ubo.updateFloat2(\"vMicroSurfaceSamplerInfos\", this._microSurfaceTexture.coordinatesIndex, this._microSurfaceTexture.level);\r\n                            MaterialHelper.BindTextureMatrix(this._microSurfaceTexture, ubo, \"microSurfaceSampler\");\r\n                        }\r\n                    }\r\n\r\n                    if (this._bumpTexture && engine.getCaps().standardDerivatives && MaterialFlags.BumpTextureEnabled && !this._disableBumpMap) {\r\n                        ubo.updateFloat3(\"vBumpInfos\", this._bumpTexture.coordinatesIndex, this._bumpTexture.level, this._parallaxScaleBias);\r\n                        MaterialHelper.BindTextureMatrix(this._bumpTexture, ubo, \"bump\");\r\n\r\n                        if (scene._mirroredCameraPosition) {\r\n                            ubo.updateFloat2(\"vTangentSpaceParams\", this._invertNormalMapX ? 1.0 : -1.0, this._invertNormalMapY ? 1.0 : -1.0);\r\n                        } else {\r\n                            ubo.updateFloat2(\"vTangentSpaceParams\", this._invertNormalMapX ? -1.0 : 1.0, this._invertNormalMapY ? -1.0 : 1.0);\r\n                        }\r\n                    }\r\n                }\r\n\r\n                // Point size\r\n                if (this.pointsCloud) {\r\n                    ubo.updateFloat(\"pointSize\", this.pointSize);\r\n                }\r\n\r\n                // Colors\r\n                if (defines.METALLICWORKFLOW) {\r\n                    TmpColors.Color3[0].r = this._metallic === undefined || this._metallic === null ? 1 : this._metallic;\r\n                    TmpColors.Color3[0].g = this._roughness === undefined || this._roughness === null ? 1 : this._roughness;\r\n                    ubo.updateColor4(\"vReflectivityColor\", TmpColors.Color3[0], 1);\r\n\r\n                    const ior = this.subSurface?._indexOfRefraction ?? 1.5;\r\n                    const outsideIOR = 1; // consider air as clear coat and other layers would remap in the shader.\r\n\r\n                    // We are here deriving our default reflectance from a common value for none metallic surface.\r\n                    // Based of the schlick fresnel approximation model\r\n                    // for dielectrics.\r\n                    const f0 = Math.pow((ior - outsideIOR) / (ior + outsideIOR), 2);\r\n\r\n                    // Tweak the default F0 and F90 based on our given setup\r\n                    this._metallicReflectanceColor.scaleToRef(f0 * this._metallicF0Factor, TmpColors.Color3[0]);\r\n                    const metallicF90 = this._metallicF0Factor;\r\n\r\n                    ubo.updateColor4(\"vMetallicReflectanceFactors\", TmpColors.Color3[0], metallicF90);\r\n                } else {\r\n                    ubo.updateColor4(\"vReflectivityColor\", this._reflectivityColor, this._microSurface);\r\n                }\r\n\r\n                ubo.updateColor3(\"vEmissiveColor\", MaterialFlags.EmissiveTextureEnabled ? this._emissiveColor : Color3.BlackReadOnly);\r\n                ubo.updateColor3(\"vReflectionColor\", this._reflectionColor);\r\n                if (!defines.SS_REFRACTION && this.subSurface?._linkRefractionWithTransparency) {\r\n                    ubo.updateColor4(\"vAlbedoColor\", this._albedoColor, 1);\r\n                } else {\r\n                    ubo.updateColor4(\"vAlbedoColor\", this._albedoColor, this.alpha);\r\n                }\r\n\r\n                // Misc\r\n                this._lightingInfos.x = this._directIntensity;\r\n                this._lightingInfos.y = this._emissiveIntensity;\r\n                this._lightingInfos.z = this._environmentIntensity * scene.environmentIntensity;\r\n                this._lightingInfos.w = this._specularIntensity;\r\n\r\n                ubo.updateVector4(\"vLightingIntensity\", this._lightingInfos);\r\n\r\n                // Colors\r\n                scene.ambientColor.multiplyToRef(this._ambientColor, this._globalAmbientColor);\r\n\r\n                ubo.updateColor3(\"vAmbientColor\", this._globalAmbientColor);\r\n\r\n                ubo.updateFloat2(\"vDebugMode\", this.debugLimit, this.debugFactor);\r\n            }\r\n\r\n            // Textures\r\n            if (scene.texturesEnabled) {\r\n                if (this._albedoTexture && MaterialFlags.DiffuseTextureEnabled) {\r\n                    ubo.setTexture(\"albedoSampler\", this._albedoTexture);\r\n                }\r\n\r\n                if (this._ambientTexture && MaterialFlags.AmbientTextureEnabled) {\r\n                    ubo.setTexture(\"ambientSampler\", this._ambientTexture);\r\n                }\r\n\r\n                if (this._opacityTexture && MaterialFlags.OpacityTextureEnabled) {\r\n                    ubo.setTexture(\"opacitySampler\", this._opacityTexture);\r\n                }\r\n\r\n                if (reflectionTexture && MaterialFlags.ReflectionTextureEnabled) {\r\n                    if (defines.LODBASEDMICROSFURACE) {\r\n                        ubo.setTexture(\"reflectionSampler\", reflectionTexture);\r\n                    } else {\r\n                        ubo.setTexture(\"reflectionSampler\", reflectionTexture._lodTextureMid || reflectionTexture);\r\n                        ubo.setTexture(\"reflectionSamplerLow\", reflectionTexture._lodTextureLow || reflectionTexture);\r\n                        ubo.setTexture(\"reflectionSamplerHigh\", reflectionTexture._lodTextureHigh || reflectionTexture);\r\n                    }\r\n\r\n                    if (defines.USEIRRADIANCEMAP) {\r\n                        ubo.setTexture(\"irradianceSampler\", reflectionTexture.irradianceTexture);\r\n                    }\r\n                }\r\n\r\n                if (defines.ENVIRONMENTBRDF) {\r\n                    ubo.setTexture(\"environmentBrdfSampler\", this._environmentBRDFTexture);\r\n                }\r\n\r\n                if (this._emissiveTexture && MaterialFlags.EmissiveTextureEnabled) {\r\n                    ubo.setTexture(\"emissiveSampler\", this._emissiveTexture);\r\n                }\r\n\r\n                if (this._lightmapTexture && MaterialFlags.LightmapTextureEnabled) {\r\n                    ubo.setTexture(\"lightmapSampler\", this._lightmapTexture);\r\n                }\r\n\r\n                if (MaterialFlags.SpecularTextureEnabled) {\r\n                    if (this._metallicTexture) {\r\n                        ubo.setTexture(\"reflectivitySampler\", this._metallicTexture);\r\n                    } else if (this._reflectivityTexture) {\r\n                        ubo.setTexture(\"reflectivitySampler\", this._reflectivityTexture);\r\n                    }\r\n\r\n                    if (this._metallicReflectanceTexture) {\r\n                        ubo.setTexture(\"metallicReflectanceSampler\", this._metallicReflectanceTexture);\r\n                    }\r\n\r\n                    if (this._reflectanceTexture && defines.REFLECTANCE) {\r\n                        ubo.setTexture(\"reflectanceSampler\", this._reflectanceTexture);\r\n                    }\r\n\r\n                    if (this._microSurfaceTexture) {\r\n                        ubo.setTexture(\"microSurfaceSampler\", this._microSurfaceTexture);\r\n                    }\r\n                }\r\n\r\n                if (this._bumpTexture && engine.getCaps().standardDerivatives && MaterialFlags.BumpTextureEnabled && !this._disableBumpMap) {\r\n                    ubo.setTexture(\"bumpSampler\", this._bumpTexture);\r\n                }\r\n            }\r\n\r\n            // OIT with depth peeling\r\n            if (this.getScene().useOrderIndependentTransparency && this.needAlphaBlendingForMesh(mesh)) {\r\n                this.getScene().depthPeelingRenderer!.bind(effect);\r\n            }\r\n\r\n            this._eventInfo.subMesh = subMesh;\r\n            this._callbackPluginEventBindForSubMesh(this._eventInfo);\r\n\r\n            // Clip plane\r\n            bindClipPlane(this._activeEffect, this, scene);\r\n\r\n            this.bindEyePosition(effect);\r\n        } else if (scene.getEngine()._features.needToAlwaysBindUniformBuffers) {\r\n            this._needToBindSceneUbo = true;\r\n        }\r\n\r\n        if (mustRebind || !this.isFrozen) {\r\n            // Lights\r\n            if (scene.lightsEnabled && !this._disableLighting) {\r\n                MaterialHelper.BindLights(scene, mesh, this._activeEffect, defines, this._maxSimultaneousLights);\r\n            }\r\n\r\n            // View\r\n            if (\r\n                (scene.fogEnabled && mesh.applyFog && scene.fogMode !== Scene.FOGMODE_NONE) ||\r\n                reflectionTexture ||\r\n                this.subSurface.refractionTexture ||\r\n                mesh.receiveShadows ||\r\n                defines.PREPASS\r\n            ) {\r\n                this.bindView(effect);\r\n            }\r\n\r\n            // Fog\r\n            MaterialHelper.BindFogParameters(scene, mesh, this._activeEffect, true);\r\n\r\n            // Morph targets\r\n            if (defines.NUM_MORPH_INFLUENCERS) {\r\n                MaterialHelper.BindMorphTargetParameters(mesh, this._activeEffect);\r\n            }\r\n\r\n            if (defines.BAKED_VERTEX_ANIMATION_TEXTURE) {\r\n                mesh.bakedVertexAnimationManager?.bind(effect, defines.INSTANCES);\r\n            }\r\n\r\n            // image processing\r\n            this._imageProcessingConfiguration!.bind(this._activeEffect);\r\n\r\n            // Log. depth\r\n            MaterialHelper.BindLogDepth(defines, this._activeEffect, scene);\r\n        }\r\n\r\n        this._afterBind(mesh, this._activeEffect);\r\n\r\n        ubo.update();\r\n    }\r\n\r\n    /**\r\n     * Returns the animatable textures.\r\n     * If material have animatable metallic texture, then reflectivity texture will not be returned, even if it has animations.\r\n     * @returns - Array of animatable textures.\r\n     */\r\n    public getAnimatables(): IAnimatable[] {\r\n        const results = super.getAnimatables();\r\n\r\n        if (this._albedoTexture && this._albedoTexture.animations && this._albedoTexture.animations.length > 0) {\r\n            results.push(this._albedoTexture);\r\n        }\r\n\r\n        if (this._ambientTexture && this._ambientTexture.animations && this._ambientTexture.animations.length > 0) {\r\n            results.push(this._ambientTexture);\r\n        }\r\n\r\n        if (this._opacityTexture && this._opacityTexture.animations && this._opacityTexture.animations.length > 0) {\r\n            results.push(this._opacityTexture);\r\n        }\r\n\r\n        if (this._reflectionTexture && this._reflectionTexture.animations && this._reflectionTexture.animations.length > 0) {\r\n            results.push(this._reflectionTexture);\r\n        }\r\n\r\n        if (this._emissiveTexture && this._emissiveTexture.animations && this._emissiveTexture.animations.length > 0) {\r\n            results.push(this._emissiveTexture);\r\n        }\r\n\r\n        if (this._metallicTexture && this._metallicTexture.animations && this._metallicTexture.animations.length > 0) {\r\n            results.push(this._metallicTexture);\r\n        } else if (this._reflectivityTexture && this._reflectivityTexture.animations && this._reflectivityTexture.animations.length > 0) {\r\n            results.push(this._reflectivityTexture);\r\n        }\r\n\r\n        if (this._bumpTexture && this._bumpTexture.animations && this._bumpTexture.animations.length > 0) {\r\n            results.push(this._bumpTexture);\r\n        }\r\n\r\n        if (this._lightmapTexture && this._lightmapTexture.animations && this._lightmapTexture.animations.length > 0) {\r\n            results.push(this._lightmapTexture);\r\n        }\r\n\r\n        if (this._metallicReflectanceTexture && this._metallicReflectanceTexture.animations && this._metallicReflectanceTexture.animations.length > 0) {\r\n            results.push(this._metallicReflectanceTexture);\r\n        }\r\n\r\n        if (this._reflectanceTexture && this._reflectanceTexture.animations && this._reflectanceTexture.animations.length > 0) {\r\n            results.push(this._reflectanceTexture);\r\n        }\r\n\r\n        if (this._microSurfaceTexture && this._microSurfaceTexture.animations && this._microSurfaceTexture.animations.length > 0) {\r\n            results.push(this._microSurfaceTexture);\r\n        }\r\n\r\n        return results;\r\n    }\r\n\r\n    /**\r\n     * Returns the texture used for reflections.\r\n     * @returns - Reflection texture if present.  Otherwise, returns the environment texture.\r\n     */\r\n    private _getReflectionTexture(): Nullable<BaseTexture> {\r\n        if (this._reflectionTexture) {\r\n            return this._reflectionTexture;\r\n        }\r\n\r\n        return this.getScene().environmentTexture;\r\n    }\r\n\r\n    /**\r\n     * Returns an array of the actively used textures.\r\n     * @returns - Array of BaseTextures\r\n     */\r\n    public getActiveTextures(): BaseTexture[] {\r\n        const activeTextures = super.getActiveTextures();\r\n\r\n        if (this._albedoTexture) {\r\n            activeTextures.push(this._albedoTexture);\r\n        }\r\n\r\n        if (this._ambientTexture) {\r\n            activeTextures.push(this._ambientTexture);\r\n        }\r\n\r\n        if (this._opacityTexture) {\r\n            activeTextures.push(this._opacityTexture);\r\n        }\r\n\r\n        if (this._reflectionTexture) {\r\n            activeTextures.push(this._reflectionTexture);\r\n        }\r\n\r\n        if (this._emissiveTexture) {\r\n            activeTextures.push(this._emissiveTexture);\r\n        }\r\n\r\n        if (this._reflectivityTexture) {\r\n            activeTextures.push(this._reflectivityTexture);\r\n        }\r\n\r\n        if (this._metallicTexture) {\r\n            activeTextures.push(this._metallicTexture);\r\n        }\r\n\r\n        if (this._metallicReflectanceTexture) {\r\n            activeTextures.push(this._metallicReflectanceTexture);\r\n        }\r\n\r\n        if (this._reflectanceTexture) {\r\n            activeTextures.push(this._reflectanceTexture);\r\n        }\r\n\r\n        if (this._microSurfaceTexture) {\r\n            activeTextures.push(this._microSurfaceTexture);\r\n        }\r\n\r\n        if (this._bumpTexture) {\r\n            activeTextures.push(this._bumpTexture);\r\n        }\r\n\r\n        if (this._lightmapTexture) {\r\n            activeTextures.push(this._lightmapTexture);\r\n        }\r\n\r\n        return activeTextures;\r\n    }\r\n\r\n    /**\r\n     * Checks to see if a texture is used in the material.\r\n     * @param texture - Base texture to use.\r\n     * @returns - Boolean specifying if a texture is used in the material.\r\n     */\r\n    public hasTexture(texture: BaseTexture): boolean {\r\n        if (super.hasTexture(texture)) {\r\n            return true;\r\n        }\r\n\r\n        if (this._albedoTexture === texture) {\r\n            return true;\r\n        }\r\n\r\n        if (this._ambientTexture === texture) {\r\n            return true;\r\n        }\r\n\r\n        if (this._opacityTexture === texture) {\r\n            return true;\r\n        }\r\n\r\n        if (this._reflectionTexture === texture) {\r\n            return true;\r\n        }\r\n\r\n        if (this._emissiveTexture === texture) {\r\n            return true;\r\n        }\r\n\r\n        if (this._reflectivityTexture === texture) {\r\n            return true;\r\n        }\r\n\r\n        if (this._metallicTexture === texture) {\r\n            return true;\r\n        }\r\n\r\n        if (this._metallicReflectanceTexture === texture) {\r\n            return true;\r\n        }\r\n\r\n        if (this._reflectanceTexture === texture) {\r\n            return true;\r\n        }\r\n\r\n        if (this._microSurfaceTexture === texture) {\r\n            return true;\r\n        }\r\n\r\n        if (this._bumpTexture === texture) {\r\n            return true;\r\n        }\r\n\r\n        if (this._lightmapTexture === texture) {\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Sets the required values to the prepass renderer.\r\n     * It can't be sets when subsurface scattering of this material is disabled.\r\n     * When scene have ability to enable subsurface prepass effect, it will enable.\r\n     */\r\n    public setPrePassRenderer(): boolean {\r\n        if (!this.subSurface?.isScatteringEnabled) {\r\n            return false;\r\n        }\r\n\r\n        const subSurfaceConfiguration = this.getScene().enableSubSurfaceForPrePass();\r\n        if (subSurfaceConfiguration) {\r\n            subSurfaceConfiguration.enabled = true;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Disposes the resources of the material.\r\n     * @param forceDisposeEffect - Forces the disposal of effects.\r\n     * @param forceDisposeTextures - Forces the disposal of all textures.\r\n     */\r\n    public dispose(forceDisposeEffect?: boolean, forceDisposeTextures?: boolean): void {\r\n        if (forceDisposeTextures) {\r\n            if (this._environmentBRDFTexture && this.getScene().environmentBRDFTexture !== this._environmentBRDFTexture) {\r\n                this._environmentBRDFTexture.dispose();\r\n            }\r\n\r\n            this._albedoTexture?.dispose();\r\n            this._ambientTexture?.dispose();\r\n            this._opacityTexture?.dispose();\r\n            this._reflectionTexture?.dispose();\r\n            this._emissiveTexture?.dispose();\r\n            this._metallicTexture?.dispose();\r\n            this._reflectivityTexture?.dispose();\r\n            this._bumpTexture?.dispose();\r\n            this._lightmapTexture?.dispose();\r\n            this._metallicReflectanceTexture?.dispose();\r\n            this._reflectanceTexture?.dispose();\r\n            this._microSurfaceTexture?.dispose();\r\n        }\r\n\r\n        this._renderTargets.dispose();\r\n\r\n        if (this._imageProcessingConfiguration && this._imageProcessingObserver) {\r\n            this._imageProcessingConfiguration.onUpdateParameters.remove(this._imageProcessingObserver);\r\n        }\r\n\r\n        super.dispose(forceDisposeEffect, forceDisposeTextures);\r\n    }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}