{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { __decorate } from \"../tslib.es6.js\";\n/* eslint-disable @typescript-eslint/naming-convention */\nimport { serialize, SerializationHelper, serializeAsTexture, serializeAsColorCurves, serializeAsColor4 } from \"../Misc/decorators.js\";\nimport { Observable } from \"../Misc/observable.js\";\nimport { Tools } from \"../Misc/tools.js\";\nimport { Color4 } from \"../Maths/math.color.js\";\nimport { MaterialDefines } from \"../Materials/materialDefines.js\";\nimport { ColorCurves } from \"../Materials/colorCurves.js\";\n/**\n * @internal\n */\nexport class ImageProcessingConfigurationDefines extends MaterialDefines {\n  constructor() {\n    super();\n    this.IMAGEPROCESSING = false;\n    this.VIGNETTE = false;\n    this.VIGNETTEBLENDMODEMULTIPLY = false;\n    this.VIGNETTEBLENDMODEOPAQUE = false;\n    this.TONEMAPPING = false;\n    this.TONEMAPPING_ACES = false;\n    this.CONTRAST = false;\n    this.COLORCURVES = false;\n    this.COLORGRADING = false;\n    this.COLORGRADING3D = false;\n    this.SAMPLER3DGREENDEPTH = false;\n    this.SAMPLER3DBGRMAP = false;\n    this.DITHER = false;\n    this.IMAGEPROCESSINGPOSTPROCESS = false;\n    this.EXPOSURE = false;\n    this.SKIPFINALCOLORCLAMP = false;\n    this.rebuild();\n  }\n}\n/**\n * This groups together the common properties used for image processing either in direct forward pass\n * or through post processing effect depending on the use of the image processing pipeline in your scene\n * or not.\n */\nexport class ImageProcessingConfiguration {\n  constructor() {\n    /**\n     * Color curves setup used in the effect if colorCurvesEnabled is set to true\n     */\n    this.colorCurves = new ColorCurves();\n    this._colorCurvesEnabled = false;\n    this._colorGradingEnabled = false;\n    this._colorGradingWithGreenDepth = true;\n    this._colorGradingBGR = true;\n    /** @internal */\n    this._exposure = 1.0;\n    this._toneMappingEnabled = false;\n    this._toneMappingType = ImageProcessingConfiguration.TONEMAPPING_STANDARD;\n    this._contrast = 1.0;\n    /**\n     * Vignette stretch size.\n     */\n    this.vignetteStretch = 0;\n    /**\n     * Vignette center X Offset.\n     */\n    this.vignetteCenterX = 0;\n    /**\n     * Vignette center Y Offset.\n     */\n    this.vignetteCenterY = 0;\n    /**\n     * Vignette weight or intensity of the vignette effect.\n     */\n    this.vignetteWeight = 1.5;\n    /**\n     * Color of the vignette applied on the screen through the chosen blend mode (vignetteBlendMode)\n     * if vignetteEnabled is set to true.\n     */\n    this.vignetteColor = new Color4(0, 0, 0, 0);\n    /**\n     * Camera field of view used by the Vignette effect.\n     */\n    this.vignetteCameraFov = 0.5;\n    this._vignetteBlendMode = ImageProcessingConfiguration.VIGNETTEMODE_MULTIPLY;\n    this._vignetteEnabled = false;\n    this._ditheringEnabled = false;\n    this._ditheringIntensity = 1.0 / 255.0;\n    /** @internal */\n    this._skipFinalColorClamp = false;\n    /** @internal */\n    this._applyByPostProcess = false;\n    this._isEnabled = true;\n    /**\n     * An event triggered when the configuration changes and requires Shader to Update some parameters.\n     */\n    this.onUpdateParameters = new Observable();\n  }\n  /**\n   * Gets whether the color curves effect is enabled.\n   */\n  get colorCurvesEnabled() {\n    return this._colorCurvesEnabled;\n  }\n  /**\n   * Sets whether the color curves effect is enabled.\n   */\n  set colorCurvesEnabled(value) {\n    if (this._colorCurvesEnabled === value) {\n      return;\n    }\n    this._colorCurvesEnabled = value;\n    this._updateParameters();\n  }\n  /**\n   * Color grading LUT texture used in the effect if colorGradingEnabled is set to true\n   */\n  get colorGradingTexture() {\n    return this._colorGradingTexture;\n  }\n  /**\n   * Color grading LUT texture used in the effect if colorGradingEnabled is set to true\n   */\n  set colorGradingTexture(value) {\n    if (this._colorGradingTexture === value) {\n      return;\n    }\n    this._colorGradingTexture = value;\n    this._updateParameters();\n  }\n  /**\n   * Gets whether the color grading effect is enabled.\n   */\n  get colorGradingEnabled() {\n    return this._colorGradingEnabled;\n  }\n  /**\n   * Sets whether the color grading effect is enabled.\n   */\n  set colorGradingEnabled(value) {\n    if (this._colorGradingEnabled === value) {\n      return;\n    }\n    this._colorGradingEnabled = value;\n    this._updateParameters();\n  }\n  /**\n   * Gets whether the color grading effect is using a green depth for the 3d Texture.\n   */\n  get colorGradingWithGreenDepth() {\n    return this._colorGradingWithGreenDepth;\n  }\n  /**\n   * Sets whether the color grading effect is using a green depth for the 3d Texture.\n   */\n  set colorGradingWithGreenDepth(value) {\n    if (this._colorGradingWithGreenDepth === value) {\n      return;\n    }\n    this._colorGradingWithGreenDepth = value;\n    this._updateParameters();\n  }\n  /**\n   * Gets whether the color grading texture contains BGR values.\n   */\n  get colorGradingBGR() {\n    return this._colorGradingBGR;\n  }\n  /**\n   * Sets whether the color grading texture contains BGR values.\n   */\n  set colorGradingBGR(value) {\n    if (this._colorGradingBGR === value) {\n      return;\n    }\n    this._colorGradingBGR = value;\n    this._updateParameters();\n  }\n  /**\n   * Gets the Exposure used in the effect.\n   */\n  get exposure() {\n    return this._exposure;\n  }\n  /**\n   * Sets the Exposure used in the effect.\n   */\n  set exposure(value) {\n    if (this._exposure === value) {\n      return;\n    }\n    this._exposure = value;\n    this._updateParameters();\n  }\n  /**\n   * Gets whether the tone mapping effect is enabled.\n   */\n  get toneMappingEnabled() {\n    return this._toneMappingEnabled;\n  }\n  /**\n   * Sets whether the tone mapping effect is enabled.\n   */\n  set toneMappingEnabled(value) {\n    if (this._toneMappingEnabled === value) {\n      return;\n    }\n    this._toneMappingEnabled = value;\n    this._updateParameters();\n  }\n  /**\n   * Gets the type of tone mapping effect.\n   */\n  get toneMappingType() {\n    return this._toneMappingType;\n  }\n  /**\n   * Sets the type of tone mapping effect used in BabylonJS.\n   */\n  set toneMappingType(value) {\n    if (this._toneMappingType === value) {\n      return;\n    }\n    this._toneMappingType = value;\n    this._updateParameters();\n  }\n  /**\n   * Gets the contrast used in the effect.\n   */\n  get contrast() {\n    return this._contrast;\n  }\n  /**\n   * Sets the contrast used in the effect.\n   */\n  set contrast(value) {\n    if (this._contrast === value) {\n      return;\n    }\n    this._contrast = value;\n    this._updateParameters();\n  }\n  /**\n   * Back Compat: Vignette center Y Offset.\n   * @deprecated use vignetteCenterY instead\n   */\n  get vignetteCentreY() {\n    return this.vignetteCenterY;\n  }\n  set vignetteCentreY(value) {\n    this.vignetteCenterY = value;\n  }\n  /**\n   * Back Compat: Vignette center X Offset.\n   * @deprecated use vignetteCenterX instead\n   */\n  get vignetteCentreX() {\n    return this.vignetteCenterX;\n  }\n  set vignetteCentreX(value) {\n    this.vignetteCenterX = value;\n  }\n  /**\n   * Gets the vignette blend mode allowing different kind of effect.\n   */\n  get vignetteBlendMode() {\n    return this._vignetteBlendMode;\n  }\n  /**\n   * Sets the vignette blend mode allowing different kind of effect.\n   */\n  set vignetteBlendMode(value) {\n    if (this._vignetteBlendMode === value) {\n      return;\n    }\n    this._vignetteBlendMode = value;\n    this._updateParameters();\n  }\n  /**\n   * Gets whether the vignette effect is enabled.\n   */\n  get vignetteEnabled() {\n    return this._vignetteEnabled;\n  }\n  /**\n   * Sets whether the vignette effect is enabled.\n   */\n  set vignetteEnabled(value) {\n    if (this._vignetteEnabled === value) {\n      return;\n    }\n    this._vignetteEnabled = value;\n    this._updateParameters();\n  }\n  /**\n   * Gets whether the dithering effect is enabled.\n   * The dithering effect can be used to reduce banding.\n   */\n  get ditheringEnabled() {\n    return this._ditheringEnabled;\n  }\n  /**\n   * Sets whether the dithering effect is enabled.\n   * The dithering effect can be used to reduce banding.\n   */\n  set ditheringEnabled(value) {\n    if (this._ditheringEnabled === value) {\n      return;\n    }\n    this._ditheringEnabled = value;\n    this._updateParameters();\n  }\n  /**\n   * Gets the dithering intensity. 0 is no dithering. Default is 1.0 / 255.0.\n   */\n  get ditheringIntensity() {\n    return this._ditheringIntensity;\n  }\n  /**\n   * Sets the dithering intensity. 0 is no dithering. Default is 1.0 / 255.0.\n   */\n  set ditheringIntensity(value) {\n    if (this._ditheringIntensity === value) {\n      return;\n    }\n    this._ditheringIntensity = value;\n    this._updateParameters();\n  }\n  /**\n   * If apply by post process is set to true, setting this to true will skip the the final color clamp step in the fragment shader\n   * Applies to PBR materials.\n   */\n  get skipFinalColorClamp() {\n    return this._skipFinalColorClamp;\n  }\n  /**\n   * If apply by post process is set to true, setting this to true will skip the the final color clamp step in the fragment shader\n   * Applies to PBR materials.\n   */\n  set skipFinalColorClamp(value) {\n    if (this._skipFinalColorClamp === value) {\n      return;\n    }\n    this._skipFinalColorClamp = value;\n    this._updateParameters();\n  }\n  /**\n   * Gets whether the image processing is applied through a post process or not.\n   */\n  get applyByPostProcess() {\n    return this._applyByPostProcess;\n  }\n  /**\n   * Sets whether the image processing is applied through a post process or not.\n   */\n  set applyByPostProcess(value) {\n    if (this._applyByPostProcess === value) {\n      return;\n    }\n    this._applyByPostProcess = value;\n    this._updateParameters();\n  }\n  /**\n   * Gets whether the image processing is enabled or not.\n   */\n  get isEnabled() {\n    return this._isEnabled;\n  }\n  /**\n   * Sets whether the image processing is enabled or not.\n   */\n  set isEnabled(value) {\n    if (this._isEnabled === value) {\n      return;\n    }\n    this._isEnabled = value;\n    this._updateParameters();\n  }\n  /**\n   * Method called each time the image processing information changes requires to recompile the effect.\n   */\n  _updateParameters() {\n    this.onUpdateParameters.notifyObservers(this);\n  }\n  /**\n   * Gets the current class name.\n   * @returns \"ImageProcessingConfiguration\"\n   */\n  getClassName() {\n    return \"ImageProcessingConfiguration\";\n  }\n  /**\n   * Prepare the list of uniforms associated with the Image Processing effects.\n   * @param uniforms The list of uniforms used in the effect\n   * @param defines the list of defines currently in use\n   */\n  static PrepareUniforms(uniforms, defines) {\n    if (defines.EXPOSURE) {\n      uniforms.push(\"exposureLinear\");\n    }\n    if (defines.CONTRAST) {\n      uniforms.push(\"contrast\");\n    }\n    if (defines.COLORGRADING) {\n      uniforms.push(\"colorTransformSettings\");\n    }\n    if (defines.VIGNETTE || defines.DITHER) {\n      uniforms.push(\"vInverseScreenSize\");\n    }\n    if (defines.VIGNETTE) {\n      uniforms.push(\"vignetteSettings1\");\n      uniforms.push(\"vignetteSettings2\");\n    }\n    if (defines.COLORCURVES) {\n      ColorCurves.PrepareUniforms(uniforms);\n    }\n    if (defines.DITHER) {\n      uniforms.push(\"ditherIntensity\");\n    }\n  }\n  /**\n   * Prepare the list of samplers associated with the Image Processing effects.\n   * @param samplersList The list of uniforms used in the effect\n   * @param defines the list of defines currently in use\n   */\n  static PrepareSamplers(samplersList, defines) {\n    if (defines.COLORGRADING) {\n      samplersList.push(\"txColorTransform\");\n    }\n  }\n  /**\n   * Prepare the list of defines associated to the shader.\n   * @param defines the list of defines to complete\n   * @param forPostProcess Define if we are currently in post process mode or not\n   */\n  prepareDefines(defines, forPostProcess = false) {\n    if (forPostProcess !== this.applyByPostProcess || !this._isEnabled) {\n      defines.VIGNETTE = false;\n      defines.TONEMAPPING = false;\n      defines.TONEMAPPING_ACES = false;\n      defines.CONTRAST = false;\n      defines.EXPOSURE = false;\n      defines.COLORCURVES = false;\n      defines.COLORGRADING = false;\n      defines.COLORGRADING3D = false;\n      defines.DITHER = false;\n      defines.IMAGEPROCESSING = false;\n      defines.SKIPFINALCOLORCLAMP = this.skipFinalColorClamp;\n      defines.IMAGEPROCESSINGPOSTPROCESS = this.applyByPostProcess && this._isEnabled;\n      return;\n    }\n    defines.VIGNETTE = this.vignetteEnabled;\n    defines.VIGNETTEBLENDMODEMULTIPLY = this.vignetteBlendMode === ImageProcessingConfiguration._VIGNETTEMODE_MULTIPLY;\n    defines.VIGNETTEBLENDMODEOPAQUE = !defines.VIGNETTEBLENDMODEMULTIPLY;\n    defines.TONEMAPPING = this.toneMappingEnabled;\n    switch (this._toneMappingType) {\n      case ImageProcessingConfiguration.TONEMAPPING_ACES:\n        defines.TONEMAPPING_ACES = true;\n        break;\n      default:\n        defines.TONEMAPPING_ACES = false;\n        break;\n    }\n    defines.CONTRAST = this.contrast !== 1.0;\n    defines.EXPOSURE = this.exposure !== 1.0;\n    defines.COLORCURVES = this.colorCurvesEnabled && !!this.colorCurves;\n    defines.COLORGRADING = this.colorGradingEnabled && !!this.colorGradingTexture;\n    if (defines.COLORGRADING) {\n      defines.COLORGRADING3D = this.colorGradingTexture.is3D;\n    } else {\n      defines.COLORGRADING3D = false;\n    }\n    defines.SAMPLER3DGREENDEPTH = this.colorGradingWithGreenDepth;\n    defines.SAMPLER3DBGRMAP = this.colorGradingBGR;\n    defines.DITHER = this._ditheringEnabled;\n    defines.IMAGEPROCESSINGPOSTPROCESS = this.applyByPostProcess;\n    defines.SKIPFINALCOLORCLAMP = this.skipFinalColorClamp;\n    defines.IMAGEPROCESSING = defines.VIGNETTE || defines.TONEMAPPING || defines.CONTRAST || defines.EXPOSURE || defines.COLORCURVES || defines.COLORGRADING || defines.DITHER;\n  }\n  /**\n   * Returns true if all the image processing information are ready.\n   * @returns True if ready, otherwise, false\n   */\n  isReady() {\n    // Color Grading texture can not be none blocking.\n    return !this.colorGradingEnabled || !this.colorGradingTexture || this.colorGradingTexture.isReady();\n  }\n  /**\n   * Binds the image processing to the shader.\n   * @param effect The effect to bind to\n   * @param overrideAspectRatio Override the aspect ratio of the effect\n   */\n  bind(effect, overrideAspectRatio) {\n    // Color Curves\n    if (this._colorCurvesEnabled && this.colorCurves) {\n      ColorCurves.Bind(this.colorCurves, effect);\n    }\n    // Vignette and dither handled together due to common uniform.\n    if (this._vignetteEnabled || this._ditheringEnabled) {\n      const inverseWidth = 1 / effect.getEngine().getRenderWidth();\n      const inverseHeight = 1 / effect.getEngine().getRenderHeight();\n      effect.setFloat2(\"vInverseScreenSize\", inverseWidth, inverseHeight);\n      if (this._ditheringEnabled) {\n        effect.setFloat(\"ditherIntensity\", 0.5 * this._ditheringIntensity);\n      }\n      if (this._vignetteEnabled) {\n        const aspectRatio = overrideAspectRatio != null ? overrideAspectRatio : inverseHeight / inverseWidth;\n        let vignetteScaleY = Math.tan(this.vignetteCameraFov * 0.5);\n        let vignetteScaleX = vignetteScaleY * aspectRatio;\n        const vignetteScaleGeometricMean = Math.sqrt(vignetteScaleX * vignetteScaleY);\n        vignetteScaleX = Tools.Mix(vignetteScaleX, vignetteScaleGeometricMean, this.vignetteStretch);\n        vignetteScaleY = Tools.Mix(vignetteScaleY, vignetteScaleGeometricMean, this.vignetteStretch);\n        effect.setFloat4(\"vignetteSettings1\", vignetteScaleX, vignetteScaleY, -vignetteScaleX * this.vignetteCenterX, -vignetteScaleY * this.vignetteCenterY);\n        const vignettePower = -2.0 * this.vignetteWeight;\n        effect.setFloat4(\"vignetteSettings2\", this.vignetteColor.r, this.vignetteColor.g, this.vignetteColor.b, vignettePower);\n      }\n    }\n    // Exposure\n    effect.setFloat(\"exposureLinear\", this.exposure);\n    // Contrast\n    effect.setFloat(\"contrast\", this.contrast);\n    // Color transform settings\n    if (this.colorGradingTexture) {\n      effect.setTexture(\"txColorTransform\", this.colorGradingTexture);\n      const textureSize = this.colorGradingTexture.getSize().height;\n      effect.setFloat4(\"colorTransformSettings\", (textureSize - 1) / textureSize,\n      // textureScale\n      0.5 / textureSize,\n      // textureOffset\n      textureSize,\n      // textureSize\n      this.colorGradingTexture.level // weight\n      );\n    }\n  }\n  /**\n   * Clones the current image processing instance.\n   * @returns The cloned image processing\n   */\n  clone() {\n    return SerializationHelper.Clone(() => new ImageProcessingConfiguration(), this);\n  }\n  /**\n   * Serializes the current image processing instance to a json representation.\n   * @returns a JSON representation\n   */\n  serialize() {\n    return SerializationHelper.Serialize(this);\n  }\n  /**\n   * Parses the image processing from a json representation.\n   * @param source the JSON source to parse\n   * @returns The parsed image processing\n   */\n  static Parse(source) {\n    const parsed = SerializationHelper.Parse(() => new ImageProcessingConfiguration(), source, null, null);\n    // Backward compatibility\n    if (source.vignetteCentreX !== undefined) {\n      parsed.vignetteCenterX = source.vignetteCentreX;\n    }\n    if (source.vignetteCentreY !== undefined) {\n      parsed.vignetteCenterY = source.vignetteCentreY;\n    }\n    return parsed;\n  }\n  /**\n   * Used to apply the vignette as a mix with the pixel color.\n   */\n  static get VIGNETTEMODE_MULTIPLY() {\n    return this._VIGNETTEMODE_MULTIPLY;\n  }\n  /**\n   * Used to apply the vignette as a replacement of the pixel color.\n   */\n  static get VIGNETTEMODE_OPAQUE() {\n    return this._VIGNETTEMODE_OPAQUE;\n  }\n}\n/**\n * Default tone mapping applied in BabylonJS.\n */\nImageProcessingConfiguration.TONEMAPPING_STANDARD = 0;\n/**\n * ACES Tone mapping (used by default in unreal and unity). This can help getting closer\n * to other engines rendering to increase portability.\n */\nImageProcessingConfiguration.TONEMAPPING_ACES = 1;\n// Static constants associated to the image processing.\nImageProcessingConfiguration._VIGNETTEMODE_MULTIPLY = 0;\nImageProcessingConfiguration._VIGNETTEMODE_OPAQUE = 1;\n__decorate([serializeAsColorCurves()], ImageProcessingConfiguration.prototype, \"colorCurves\", void 0);\n__decorate([serialize()], ImageProcessingConfiguration.prototype, \"_colorCurvesEnabled\", void 0);\n__decorate([serializeAsTexture(\"colorGradingTexture\")], ImageProcessingConfiguration.prototype, \"_colorGradingTexture\", void 0);\n__decorate([serialize()], ImageProcessingConfiguration.prototype, \"_colorGradingEnabled\", void 0);\n__decorate([serialize()], ImageProcessingConfiguration.prototype, \"_colorGradingWithGreenDepth\", void 0);\n__decorate([serialize()], ImageProcessingConfiguration.prototype, \"_colorGradingBGR\", void 0);\n__decorate([serialize()], ImageProcessingConfiguration.prototype, \"_exposure\", void 0);\n__decorate([serialize()], ImageProcessingConfiguration.prototype, \"_toneMappingEnabled\", void 0);\n__decorate([serialize()], ImageProcessingConfiguration.prototype, \"_toneMappingType\", void 0);\n__decorate([serialize()], ImageProcessingConfiguration.prototype, \"_contrast\", void 0);\n__decorate([serialize()], ImageProcessingConfiguration.prototype, \"vignetteStretch\", void 0);\n__decorate([serialize()], ImageProcessingConfiguration.prototype, \"vignetteCenterX\", void 0);\n__decorate([serialize()], ImageProcessingConfiguration.prototype, \"vignetteCenterY\", void 0);\n__decorate([serialize()], ImageProcessingConfiguration.prototype, \"vignetteWeight\", void 0);\n__decorate([serializeAsColor4()], ImageProcessingConfiguration.prototype, \"vignetteColor\", void 0);\n__decorate([serialize()], ImageProcessingConfiguration.prototype, \"vignetteCameraFov\", void 0);\n__decorate([serialize()], ImageProcessingConfiguration.prototype, \"_vignetteBlendMode\", void 0);\n__decorate([serialize()], ImageProcessingConfiguration.prototype, \"_vignetteEnabled\", void 0);\n__decorate([serialize()], ImageProcessingConfiguration.prototype, \"_ditheringEnabled\", void 0);\n__decorate([serialize()], ImageProcessingConfiguration.prototype, \"_ditheringIntensity\", void 0);\n__decorate([serialize()], ImageProcessingConfiguration.prototype, \"_skipFinalColorClamp\", void 0);\n__decorate([serialize()], ImageProcessingConfiguration.prototype, \"_applyByPostProcess\", void 0);\n__decorate([serialize()], ImageProcessingConfiguration.prototype, \"_isEnabled\", void 0);\n// References the dependencies.\nSerializationHelper._ImageProcessingConfigurationParser = ImageProcessingConfiguration.Parse;","map":{"version":3,"names":["serialize","SerializationHelper","serializeAsTexture","serializeAsColorCurves","serializeAsColor4","Observable","Tools","Color4","MaterialDefines","ColorCurves","ImageProcessingConfigurationDefines","constructor","IMAGEPROCESSING","VIGNETTE","VIGNETTEBLENDMODEMULTIPLY","VIGNETTEBLENDMODEOPAQUE","TONEMAPPING","TONEMAPPING_ACES","CONTRAST","COLORCURVES","COLORGRADING","COLORGRADING3D","SAMPLER3DGREENDEPTH","SAMPLER3DBGRMAP","DITHER","IMAGEPROCESSINGPOSTPROCESS","EXPOSURE","SKIPFINALCOLORCLAMP","rebuild","ImageProcessingConfiguration","colorCurves","_colorCurvesEnabled","_colorGradingEnabled","_colorGradingWithGreenDepth","_colorGradingBGR","_exposure","_toneMappingEnabled","_toneMappingType","TONEMAPPING_STANDARD","_contrast","vignetteStretch","vignetteCenterX","vignetteCenterY","vignetteWeight","vignetteColor","vignetteCameraFov","_vignetteBlendMode","VIGNETTEMODE_MULTIPLY","_vignetteEnabled","_ditheringEnabled","_ditheringIntensity","_skipFinalColorClamp","_applyByPostProcess","_isEnabled","onUpdateParameters","colorCurvesEnabled","value","_updateParameters","colorGradingTexture","_colorGradingTexture","colorGradingEnabled","colorGradingWithGreenDepth","colorGradingBGR","exposure","toneMappingEnabled","toneMappingType","contrast","vignetteCentreY","vignetteCentreX","vignetteBlendMode","vignetteEnabled","ditheringEnabled","ditheringIntensity","skipFinalColorClamp","applyByPostProcess","isEnabled","notifyObservers","getClassName","PrepareUniforms","uniforms","defines","push","PrepareSamplers","samplersList","prepareDefines","forPostProcess","_VIGNETTEMODE_MULTIPLY","is3D","isReady","bind","effect","overrideAspectRatio","Bind","inverseWidth","getEngine","getRenderWidth","inverseHeight","getRenderHeight","setFloat2","setFloat","aspectRatio","vignetteScaleY","Math","tan","vignetteScaleX","vignetteScaleGeometricMean","sqrt","Mix","setFloat4","vignettePower","r","g","b","setTexture","textureSize","getSize","height","level","clone","Clone","Serialize","Parse","source","parsed","undefined","VIGNETTEMODE_OPAQUE","_VIGNETTEMODE_OPAQUE","__decorate","_ImageProcessingConfigurationParser"],"sources":["../../../../dev/core/src/Materials/imageProcessingConfiguration.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/naming-convention */\r\nimport { serialize, SerializationHelper, serializeAsTexture, serializeAsColorCurves, serializeAsColor4 } from \"../Misc/decorators\";\r\nimport { Observable } from \"../Misc/observable\";\r\nimport { Tools } from \"../Misc/tools\";\r\nimport type { Nullable } from \"../types\";\r\nimport { Color4 } from \"../Maths/math.color\";\r\nimport { MaterialDefines } from \"../Materials/materialDefines\";\r\nimport { ColorCurves } from \"../Materials/colorCurves\";\r\n\r\nimport type { BaseTexture } from \"../Materials/Textures/baseTexture\";\r\nimport type { Effect } from \"../Materials/effect\";\r\n\r\n/**\r\n * Interface to follow in your material defines to integrate easily the\r\n * Image processing functions.\r\n * @internal\r\n */\r\nexport interface IImageProcessingConfigurationDefines {\r\n    IMAGEPROCESSING: boolean;\r\n    VIGNETTE: boolean;\r\n    VIGNETTEBLENDMODEMULTIPLY: boolean;\r\n    VIGNETTEBLENDMODEOPAQUE: boolean;\r\n    TONEMAPPING: boolean;\r\n    TONEMAPPING_ACES: boolean;\r\n    CONTRAST: boolean;\r\n    EXPOSURE: boolean;\r\n    COLORCURVES: boolean;\r\n    COLORGRADING: boolean;\r\n    COLORGRADING3D: boolean;\r\n    SAMPLER3DGREENDEPTH: boolean;\r\n    SAMPLER3DBGRMAP: boolean;\r\n    DITHER: boolean;\r\n    IMAGEPROCESSINGPOSTPROCESS: boolean;\r\n    SKIPFINALCOLORCLAMP: boolean;\r\n}\r\n\r\n/**\r\n * @internal\r\n */\r\nexport class ImageProcessingConfigurationDefines extends MaterialDefines implements IImageProcessingConfigurationDefines {\r\n    public IMAGEPROCESSING = false;\r\n    public VIGNETTE = false;\r\n    public VIGNETTEBLENDMODEMULTIPLY = false;\r\n    public VIGNETTEBLENDMODEOPAQUE = false;\r\n    public TONEMAPPING = false;\r\n    public TONEMAPPING_ACES = false;\r\n    public CONTRAST = false;\r\n    public COLORCURVES = false;\r\n    public COLORGRADING = false;\r\n    public COLORGRADING3D = false;\r\n    public SAMPLER3DGREENDEPTH = false;\r\n    public SAMPLER3DBGRMAP = false;\r\n    public DITHER = false;\r\n    public IMAGEPROCESSINGPOSTPROCESS = false;\r\n    public EXPOSURE = false;\r\n    public SKIPFINALCOLORCLAMP = false;\r\n\r\n    constructor() {\r\n        super();\r\n        this.rebuild();\r\n    }\r\n}\r\n\r\n/**\r\n * This groups together the common properties used for image processing either in direct forward pass\r\n * or through post processing effect depending on the use of the image processing pipeline in your scene\r\n * or not.\r\n */\r\nexport class ImageProcessingConfiguration {\r\n    /**\r\n     * Default tone mapping applied in BabylonJS.\r\n     */\r\n    public static readonly TONEMAPPING_STANDARD = 0;\r\n\r\n    /**\r\n     * ACES Tone mapping (used by default in unreal and unity). This can help getting closer\r\n     * to other engines rendering to increase portability.\r\n     */\r\n    public static readonly TONEMAPPING_ACES = 1;\r\n\r\n    /**\r\n     * Color curves setup used in the effect if colorCurvesEnabled is set to true\r\n     */\r\n    @serializeAsColorCurves()\r\n    public colorCurves: Nullable<ColorCurves> = new ColorCurves();\r\n\r\n    @serialize()\r\n    private _colorCurvesEnabled = false;\r\n    /**\r\n     * Gets whether the color curves effect is enabled.\r\n     */\r\n    public get colorCurvesEnabled(): boolean {\r\n        return this._colorCurvesEnabled;\r\n    }\r\n    /**\r\n     * Sets whether the color curves effect is enabled.\r\n     */\r\n    public set colorCurvesEnabled(value: boolean) {\r\n        if (this._colorCurvesEnabled === value) {\r\n            return;\r\n        }\r\n\r\n        this._colorCurvesEnabled = value;\r\n        this._updateParameters();\r\n    }\r\n\r\n    @serializeAsTexture(\"colorGradingTexture\")\r\n    private _colorGradingTexture: Nullable<BaseTexture>;\r\n    /**\r\n     * Color grading LUT texture used in the effect if colorGradingEnabled is set to true\r\n     */\r\n    public get colorGradingTexture(): Nullable<BaseTexture> {\r\n        return this._colorGradingTexture;\r\n    }\r\n    /**\r\n     * Color grading LUT texture used in the effect if colorGradingEnabled is set to true\r\n     */\r\n    public set colorGradingTexture(value: Nullable<BaseTexture>) {\r\n        if (this._colorGradingTexture === value) {\r\n            return;\r\n        }\r\n\r\n        this._colorGradingTexture = value;\r\n        this._updateParameters();\r\n    }\r\n\r\n    @serialize()\r\n    private _colorGradingEnabled = false;\r\n    /**\r\n     * Gets whether the color grading effect is enabled.\r\n     */\r\n    public get colorGradingEnabled(): boolean {\r\n        return this._colorGradingEnabled;\r\n    }\r\n    /**\r\n     * Sets whether the color grading effect is enabled.\r\n     */\r\n    public set colorGradingEnabled(value: boolean) {\r\n        if (this._colorGradingEnabled === value) {\r\n            return;\r\n        }\r\n\r\n        this._colorGradingEnabled = value;\r\n        this._updateParameters();\r\n    }\r\n\r\n    @serialize()\r\n    private _colorGradingWithGreenDepth = true;\r\n    /**\r\n     * Gets whether the color grading effect is using a green depth for the 3d Texture.\r\n     */\r\n    public get colorGradingWithGreenDepth(): boolean {\r\n        return this._colorGradingWithGreenDepth;\r\n    }\r\n    /**\r\n     * Sets whether the color grading effect is using a green depth for the 3d Texture.\r\n     */\r\n    public set colorGradingWithGreenDepth(value: boolean) {\r\n        if (this._colorGradingWithGreenDepth === value) {\r\n            return;\r\n        }\r\n\r\n        this._colorGradingWithGreenDepth = value;\r\n        this._updateParameters();\r\n    }\r\n\r\n    @serialize()\r\n    private _colorGradingBGR = true;\r\n    /**\r\n     * Gets whether the color grading texture contains BGR values.\r\n     */\r\n    public get colorGradingBGR(): boolean {\r\n        return this._colorGradingBGR;\r\n    }\r\n    /**\r\n     * Sets whether the color grading texture contains BGR values.\r\n     */\r\n    public set colorGradingBGR(value: boolean) {\r\n        if (this._colorGradingBGR === value) {\r\n            return;\r\n        }\r\n\r\n        this._colorGradingBGR = value;\r\n        this._updateParameters();\r\n    }\r\n\r\n    /** @internal */\r\n    @serialize()\r\n    public _exposure = 1.0;\r\n    /**\r\n     * Gets the Exposure used in the effect.\r\n     */\r\n    public get exposure(): number {\r\n        return this._exposure;\r\n    }\r\n    /**\r\n     * Sets the Exposure used in the effect.\r\n     */\r\n    public set exposure(value: number) {\r\n        if (this._exposure === value) {\r\n            return;\r\n        }\r\n\r\n        this._exposure = value;\r\n        this._updateParameters();\r\n    }\r\n\r\n    @serialize()\r\n    private _toneMappingEnabled = false;\r\n    /**\r\n     * Gets whether the tone mapping effect is enabled.\r\n     */\r\n    public get toneMappingEnabled(): boolean {\r\n        return this._toneMappingEnabled;\r\n    }\r\n    /**\r\n     * Sets whether the tone mapping effect is enabled.\r\n     */\r\n    public set toneMappingEnabled(value: boolean) {\r\n        if (this._toneMappingEnabled === value) {\r\n            return;\r\n        }\r\n\r\n        this._toneMappingEnabled = value;\r\n        this._updateParameters();\r\n    }\r\n\r\n    @serialize()\r\n    private _toneMappingType = ImageProcessingConfiguration.TONEMAPPING_STANDARD;\r\n    /**\r\n     * Gets the type of tone mapping effect.\r\n     */\r\n    public get toneMappingType(): number {\r\n        return this._toneMappingType;\r\n    }\r\n    /**\r\n     * Sets the type of tone mapping effect used in BabylonJS.\r\n     */\r\n    public set toneMappingType(value: number) {\r\n        if (this._toneMappingType === value) {\r\n            return;\r\n        }\r\n\r\n        this._toneMappingType = value;\r\n        this._updateParameters();\r\n    }\r\n\r\n    @serialize()\r\n    protected _contrast = 1.0;\r\n    /**\r\n     * Gets the contrast used in the effect.\r\n     */\r\n    public get contrast(): number {\r\n        return this._contrast;\r\n    }\r\n    /**\r\n     * Sets the contrast used in the effect.\r\n     */\r\n    public set contrast(value: number) {\r\n        if (this._contrast === value) {\r\n            return;\r\n        }\r\n\r\n        this._contrast = value;\r\n        this._updateParameters();\r\n    }\r\n\r\n    /**\r\n     * Vignette stretch size.\r\n     */\r\n    @serialize()\r\n    public vignetteStretch = 0;\r\n\r\n    /**\r\n     * Vignette center X Offset.\r\n     */\r\n    @serialize()\r\n    public vignetteCenterX = 0;\r\n\r\n    /**\r\n     * Vignette center Y Offset.\r\n     */\r\n    @serialize()\r\n    public vignetteCenterY = 0;\r\n\r\n    /**\r\n     * Back Compat: Vignette center Y Offset.\r\n     * @deprecated use vignetteCenterY instead\r\n     */\r\n    public get vignetteCentreY(): number {\r\n        return this.vignetteCenterY;\r\n    }\r\n    public set vignetteCentreY(value: number) {\r\n        this.vignetteCenterY = value;\r\n    }\r\n\r\n    /**\r\n     * Back Compat: Vignette center X Offset.\r\n     * @deprecated use vignetteCenterX instead\r\n     */\r\n    public get vignetteCentreX(): number {\r\n        return this.vignetteCenterX;\r\n    }\r\n    public set vignetteCentreX(value: number) {\r\n        this.vignetteCenterX = value;\r\n    }\r\n\r\n    /**\r\n     * Vignette weight or intensity of the vignette effect.\r\n     */\r\n    @serialize()\r\n    public vignetteWeight = 1.5;\r\n\r\n    /**\r\n     * Color of the vignette applied on the screen through the chosen blend mode (vignetteBlendMode)\r\n     * if vignetteEnabled is set to true.\r\n     */\r\n    @serializeAsColor4()\r\n    public vignetteColor: Color4 = new Color4(0, 0, 0, 0);\r\n\r\n    /**\r\n     * Camera field of view used by the Vignette effect.\r\n     */\r\n    @serialize()\r\n    public vignetteCameraFov = 0.5;\r\n\r\n    @serialize()\r\n    private _vignetteBlendMode = ImageProcessingConfiguration.VIGNETTEMODE_MULTIPLY;\r\n    /**\r\n     * Gets the vignette blend mode allowing different kind of effect.\r\n     */\r\n    public get vignetteBlendMode(): number {\r\n        return this._vignetteBlendMode;\r\n    }\r\n    /**\r\n     * Sets the vignette blend mode allowing different kind of effect.\r\n     */\r\n    public set vignetteBlendMode(value: number) {\r\n        if (this._vignetteBlendMode === value) {\r\n            return;\r\n        }\r\n\r\n        this._vignetteBlendMode = value;\r\n        this._updateParameters();\r\n    }\r\n\r\n    @serialize()\r\n    private _vignetteEnabled = false;\r\n    /**\r\n     * Gets whether the vignette effect is enabled.\r\n     */\r\n    public get vignetteEnabled(): boolean {\r\n        return this._vignetteEnabled;\r\n    }\r\n    /**\r\n     * Sets whether the vignette effect is enabled.\r\n     */\r\n    public set vignetteEnabled(value: boolean) {\r\n        if (this._vignetteEnabled === value) {\r\n            return;\r\n        }\r\n\r\n        this._vignetteEnabled = value;\r\n        this._updateParameters();\r\n    }\r\n\r\n    @serialize()\r\n    private _ditheringEnabled = false;\r\n    /**\r\n     * Gets whether the dithering effect is enabled.\r\n     * The dithering effect can be used to reduce banding.\r\n     */\r\n    public get ditheringEnabled(): boolean {\r\n        return this._ditheringEnabled;\r\n    }\r\n    /**\r\n     * Sets whether the dithering effect is enabled.\r\n     * The dithering effect can be used to reduce banding.\r\n     */\r\n    public set ditheringEnabled(value: boolean) {\r\n        if (this._ditheringEnabled === value) {\r\n            return;\r\n        }\r\n\r\n        this._ditheringEnabled = value;\r\n        this._updateParameters();\r\n    }\r\n\r\n    @serialize()\r\n    private _ditheringIntensity = 1.0 / 255.0;\r\n    /**\r\n     * Gets the dithering intensity. 0 is no dithering. Default is 1.0 / 255.0.\r\n     */\r\n    public get ditheringIntensity(): number {\r\n        return this._ditheringIntensity;\r\n    }\r\n    /**\r\n     * Sets the dithering intensity. 0 is no dithering. Default is 1.0 / 255.0.\r\n     */\r\n    public set ditheringIntensity(value: number) {\r\n        if (this._ditheringIntensity === value) {\r\n            return;\r\n        }\r\n\r\n        this._ditheringIntensity = value;\r\n        this._updateParameters();\r\n    }\r\n\r\n    /** @internal */\r\n    @serialize()\r\n    public _skipFinalColorClamp = false;\r\n    /**\r\n     * If apply by post process is set to true, setting this to true will skip the the final color clamp step in the fragment shader\r\n     * Applies to PBR materials.\r\n     */\r\n    public get skipFinalColorClamp(): boolean {\r\n        return this._skipFinalColorClamp;\r\n    }\r\n    /**\r\n     * If apply by post process is set to true, setting this to true will skip the the final color clamp step in the fragment shader\r\n     * Applies to PBR materials.\r\n     */\r\n    public set skipFinalColorClamp(value: boolean) {\r\n        if (this._skipFinalColorClamp === value) {\r\n            return;\r\n        }\r\n\r\n        this._skipFinalColorClamp = value;\r\n        this._updateParameters();\r\n    }\r\n\r\n    /** @internal */\r\n    @serialize()\r\n    public _applyByPostProcess = false;\r\n    /**\r\n     * Gets whether the image processing is applied through a post process or not.\r\n     */\r\n    public get applyByPostProcess(): boolean {\r\n        return this._applyByPostProcess;\r\n    }\r\n    /**\r\n     * Sets whether the image processing is applied through a post process or not.\r\n     */\r\n    public set applyByPostProcess(value: boolean) {\r\n        if (this._applyByPostProcess === value) {\r\n            return;\r\n        }\r\n\r\n        this._applyByPostProcess = value;\r\n        this._updateParameters();\r\n    }\r\n\r\n    @serialize()\r\n    private _isEnabled = true;\r\n    /**\r\n     * Gets whether the image processing is enabled or not.\r\n     */\r\n    public get isEnabled(): boolean {\r\n        return this._isEnabled;\r\n    }\r\n    /**\r\n     * Sets whether the image processing is enabled or not.\r\n     */\r\n    public set isEnabled(value: boolean) {\r\n        if (this._isEnabled === value) {\r\n            return;\r\n        }\r\n\r\n        this._isEnabled = value;\r\n        this._updateParameters();\r\n    }\r\n\r\n    /**\r\n     * An event triggered when the configuration changes and requires Shader to Update some parameters.\r\n     */\r\n    public onUpdateParameters = new Observable<ImageProcessingConfiguration>();\r\n\r\n    /**\r\n     * Method called each time the image processing information changes requires to recompile the effect.\r\n     */\r\n    protected _updateParameters(): void {\r\n        this.onUpdateParameters.notifyObservers(this);\r\n    }\r\n\r\n    /**\r\n     * Gets the current class name.\r\n     * @returns \"ImageProcessingConfiguration\"\r\n     */\r\n    public getClassName(): string {\r\n        return \"ImageProcessingConfiguration\";\r\n    }\r\n\r\n    /**\r\n     * Prepare the list of uniforms associated with the Image Processing effects.\r\n     * @param uniforms The list of uniforms used in the effect\r\n     * @param defines the list of defines currently in use\r\n     */\r\n    public static PrepareUniforms(uniforms: string[], defines: IImageProcessingConfigurationDefines): void {\r\n        if (defines.EXPOSURE) {\r\n            uniforms.push(\"exposureLinear\");\r\n        }\r\n        if (defines.CONTRAST) {\r\n            uniforms.push(\"contrast\");\r\n        }\r\n        if (defines.COLORGRADING) {\r\n            uniforms.push(\"colorTransformSettings\");\r\n        }\r\n        if (defines.VIGNETTE || defines.DITHER) {\r\n            uniforms.push(\"vInverseScreenSize\");\r\n        }\r\n        if (defines.VIGNETTE) {\r\n            uniforms.push(\"vignetteSettings1\");\r\n            uniforms.push(\"vignetteSettings2\");\r\n        }\r\n        if (defines.COLORCURVES) {\r\n            ColorCurves.PrepareUniforms(uniforms);\r\n        }\r\n        if (defines.DITHER) {\r\n            uniforms.push(\"ditherIntensity\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Prepare the list of samplers associated with the Image Processing effects.\r\n     * @param samplersList The list of uniforms used in the effect\r\n     * @param defines the list of defines currently in use\r\n     */\r\n    public static PrepareSamplers(samplersList: string[], defines: IImageProcessingConfigurationDefines): void {\r\n        if (defines.COLORGRADING) {\r\n            samplersList.push(\"txColorTransform\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Prepare the list of defines associated to the shader.\r\n     * @param defines the list of defines to complete\r\n     * @param forPostProcess Define if we are currently in post process mode or not\r\n     */\r\n    public prepareDefines(defines: IImageProcessingConfigurationDefines, forPostProcess = false): void {\r\n        if (forPostProcess !== this.applyByPostProcess || !this._isEnabled) {\r\n            defines.VIGNETTE = false;\r\n            defines.TONEMAPPING = false;\r\n            defines.TONEMAPPING_ACES = false;\r\n            defines.CONTRAST = false;\r\n            defines.EXPOSURE = false;\r\n            defines.COLORCURVES = false;\r\n            defines.COLORGRADING = false;\r\n            defines.COLORGRADING3D = false;\r\n            defines.DITHER = false;\r\n            defines.IMAGEPROCESSING = false;\r\n            defines.SKIPFINALCOLORCLAMP = this.skipFinalColorClamp;\r\n            defines.IMAGEPROCESSINGPOSTPROCESS = this.applyByPostProcess && this._isEnabled;\r\n            return;\r\n        }\r\n\r\n        defines.VIGNETTE = this.vignetteEnabled;\r\n        defines.VIGNETTEBLENDMODEMULTIPLY = this.vignetteBlendMode === ImageProcessingConfiguration._VIGNETTEMODE_MULTIPLY;\r\n        defines.VIGNETTEBLENDMODEOPAQUE = !defines.VIGNETTEBLENDMODEMULTIPLY;\r\n\r\n        defines.TONEMAPPING = this.toneMappingEnabled;\r\n        switch (this._toneMappingType) {\r\n            case ImageProcessingConfiguration.TONEMAPPING_ACES:\r\n                defines.TONEMAPPING_ACES = true;\r\n                break;\r\n            default:\r\n                defines.TONEMAPPING_ACES = false;\r\n                break;\r\n        }\r\n\r\n        defines.CONTRAST = this.contrast !== 1.0;\r\n        defines.EXPOSURE = this.exposure !== 1.0;\r\n        defines.COLORCURVES = this.colorCurvesEnabled && !!this.colorCurves;\r\n        defines.COLORGRADING = this.colorGradingEnabled && !!this.colorGradingTexture;\r\n        if (defines.COLORGRADING) {\r\n            defines.COLORGRADING3D = this.colorGradingTexture!.is3D;\r\n        } else {\r\n            defines.COLORGRADING3D = false;\r\n        }\r\n        defines.SAMPLER3DGREENDEPTH = this.colorGradingWithGreenDepth;\r\n        defines.SAMPLER3DBGRMAP = this.colorGradingBGR;\r\n        defines.DITHER = this._ditheringEnabled;\r\n        defines.IMAGEPROCESSINGPOSTPROCESS = this.applyByPostProcess;\r\n        defines.SKIPFINALCOLORCLAMP = this.skipFinalColorClamp;\r\n        defines.IMAGEPROCESSING = defines.VIGNETTE || defines.TONEMAPPING || defines.CONTRAST || defines.EXPOSURE || defines.COLORCURVES || defines.COLORGRADING || defines.DITHER;\r\n    }\r\n\r\n    /**\r\n     * Returns true if all the image processing information are ready.\r\n     * @returns True if ready, otherwise, false\r\n     */\r\n    public isReady() {\r\n        // Color Grading texture can not be none blocking.\r\n        return !this.colorGradingEnabled || !this.colorGradingTexture || this.colorGradingTexture.isReady();\r\n    }\r\n\r\n    /**\r\n     * Binds the image processing to the shader.\r\n     * @param effect The effect to bind to\r\n     * @param overrideAspectRatio Override the aspect ratio of the effect\r\n     */\r\n    public bind(effect: Effect, overrideAspectRatio?: number): void {\r\n        // Color Curves\r\n        if (this._colorCurvesEnabled && this.colorCurves) {\r\n            ColorCurves.Bind(this.colorCurves, effect);\r\n        }\r\n\r\n        // Vignette and dither handled together due to common uniform.\r\n        if (this._vignetteEnabled || this._ditheringEnabled) {\r\n            const inverseWidth = 1 / effect.getEngine().getRenderWidth();\r\n            const inverseHeight = 1 / effect.getEngine().getRenderHeight();\r\n            effect.setFloat2(\"vInverseScreenSize\", inverseWidth, inverseHeight);\r\n\r\n            if (this._ditheringEnabled) {\r\n                effect.setFloat(\"ditherIntensity\", 0.5 * this._ditheringIntensity);\r\n            }\r\n\r\n            if (this._vignetteEnabled) {\r\n                const aspectRatio = overrideAspectRatio != null ? overrideAspectRatio : inverseHeight / inverseWidth;\r\n\r\n                let vignetteScaleY = Math.tan(this.vignetteCameraFov * 0.5);\r\n                let vignetteScaleX = vignetteScaleY * aspectRatio;\r\n\r\n                const vignetteScaleGeometricMean = Math.sqrt(vignetteScaleX * vignetteScaleY);\r\n                vignetteScaleX = Tools.Mix(vignetteScaleX, vignetteScaleGeometricMean, this.vignetteStretch);\r\n                vignetteScaleY = Tools.Mix(vignetteScaleY, vignetteScaleGeometricMean, this.vignetteStretch);\r\n\r\n                effect.setFloat4(\"vignetteSettings1\", vignetteScaleX, vignetteScaleY, -vignetteScaleX * this.vignetteCenterX, -vignetteScaleY * this.vignetteCenterY);\r\n\r\n                const vignettePower = -2.0 * this.vignetteWeight;\r\n                effect.setFloat4(\"vignetteSettings2\", this.vignetteColor.r, this.vignetteColor.g, this.vignetteColor.b, vignettePower);\r\n            }\r\n        }\r\n\r\n        // Exposure\r\n        effect.setFloat(\"exposureLinear\", this.exposure);\r\n\r\n        // Contrast\r\n        effect.setFloat(\"contrast\", this.contrast);\r\n\r\n        // Color transform settings\r\n        if (this.colorGradingTexture) {\r\n            effect.setTexture(\"txColorTransform\", this.colorGradingTexture);\r\n            const textureSize = this.colorGradingTexture.getSize().height;\r\n\r\n            effect.setFloat4(\r\n                \"colorTransformSettings\",\r\n                (textureSize - 1) / textureSize, // textureScale\r\n                0.5 / textureSize, // textureOffset\r\n                textureSize, // textureSize\r\n                this.colorGradingTexture.level // weight\r\n            );\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Clones the current image processing instance.\r\n     * @returns The cloned image processing\r\n     */\r\n    public clone(): ImageProcessingConfiguration {\r\n        return SerializationHelper.Clone(() => new ImageProcessingConfiguration(), this);\r\n    }\r\n\r\n    /**\r\n     * Serializes the current image processing instance to a json representation.\r\n     * @returns a JSON representation\r\n     */\r\n    public serialize(): any {\r\n        return SerializationHelper.Serialize(this);\r\n    }\r\n\r\n    /**\r\n     * Parses the image processing from a json representation.\r\n     * @param source the JSON source to parse\r\n     * @returns The parsed image processing\r\n     */\r\n    public static Parse(source: any): ImageProcessingConfiguration {\r\n        const parsed = SerializationHelper.Parse(() => new ImageProcessingConfiguration(), source, null, null);\r\n        // Backward compatibility\r\n        if (source.vignetteCentreX !== undefined) {\r\n            parsed.vignetteCenterX = source.vignetteCentreX;\r\n        }\r\n        if (source.vignetteCentreY !== undefined) {\r\n            parsed.vignetteCenterY = source.vignetteCentreY;\r\n        }\r\n\r\n        return parsed;\r\n    }\r\n\r\n    // Static constants associated to the image processing.\r\n    private static _VIGNETTEMODE_MULTIPLY = 0;\r\n    private static _VIGNETTEMODE_OPAQUE = 1;\r\n\r\n    /**\r\n     * Used to apply the vignette as a mix with the pixel color.\r\n     */\r\n    public static get VIGNETTEMODE_MULTIPLY(): number {\r\n        return this._VIGNETTEMODE_MULTIPLY;\r\n    }\r\n\r\n    /**\r\n     * Used to apply the vignette as a replacement of the pixel color.\r\n     */\r\n    public static get VIGNETTEMODE_OPAQUE(): number {\r\n        return this._VIGNETTEMODE_OPAQUE;\r\n    }\r\n}\r\n\r\n// References the dependencies.\r\nSerializationHelper._ImageProcessingConfigurationParser = ImageProcessingConfiguration.Parse;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}