{"ast":null,"code":"import { RichTypeBoolean } from \"../../../flowGraphRichTypes.js\";\nimport { FlowGraphWithOnDoneExecutionBlock } from \"../../../flowGraphWithOnDoneExecutionBlock.js\";\nimport { RegisterClass } from \"../../../../Misc/typeStore.js\";\n/**\n * @experimental\n * A block that executes a branch while a condition is true.\n */\nexport class FlowGraphWhileLoopBlock extends FlowGraphWithOnDoneExecutionBlock {\n  constructor(config) {\n    super(config);\n    this.config = config;\n    this.condition = this._registerDataInput(\"condition\", RichTypeBoolean);\n    this.loopBody = this._registerSignalOutput(\"loopBody\");\n  }\n  _execute(context, _callingSignal) {\n    var _a;\n    let conditionValue = this.condition.getValue(context);\n    if (((_a = this.config) === null || _a === void 0 ? void 0 : _a.isDo) && !conditionValue) {\n      this.loopBody._activateSignal(context);\n    }\n    while (conditionValue) {\n      this.loopBody._activateSignal(context);\n      conditionValue = this.condition.getValue(context);\n    }\n    this.onDone._activateSignal(context);\n  }\n  getClassName() {\n    return \"FGWhileLoopBlock\";\n  }\n}\nRegisterClass(\"FGWhileLoopBlock\", FlowGraphWhileLoopBlock);","map":{"version":3,"names":["RichTypeBoolean","FlowGraphWithOnDoneExecutionBlock","RegisterClass","FlowGraphWhileLoopBlock","constructor","config","condition","_registerDataInput","loopBody","_registerSignalOutput","_execute","context","_callingSignal","conditionValue","getValue","_a","isDo","_activateSignal","onDone","getClassName"],"sources":["../../../../../../../dev/core/src/FlowGraph/Blocks/Execution/ControlFlow/flowGraphWhileLoopBlock.ts"],"sourcesContent":["import type { FlowGraphContext } from \"../../../flowGraphContext\";\r\nimport type { FlowGraphDataConnection } from \"../../../flowGraphDataConnection\";\r\nimport { RichTypeBoolean } from \"../../../flowGraphRichTypes\";\r\nimport type { FlowGraphSignalConnection } from \"../../../flowGraphSignalConnection\";\r\nimport { FlowGraphWithOnDoneExecutionBlock } from \"../../../flowGraphWithOnDoneExecutionBlock\";\r\nimport type { IFlowGraphBlockConfiguration } from \"../../../flowGraphBlock\";\r\nimport { RegisterClass } from \"../../../../Misc/typeStore\";\r\n/**\r\n * @experimental\r\n * Configuration for the while loop block.\r\n */\r\nexport interface IFlowGraphWhileLoopBlockConfiguration extends IFlowGraphBlockConfiguration {\r\n    /**\r\n     * If true, the loop body will be executed at least once.\r\n     */\r\n    isDo?: boolean;\r\n}\r\n\r\n/**\r\n * @experimental\r\n * A block that executes a branch while a condition is true.\r\n */\r\nexport class FlowGraphWhileLoopBlock extends FlowGraphWithOnDoneExecutionBlock {\r\n    /**\r\n     * Input connection: The condition to evaluate.\r\n     */\r\n    public readonly condition: FlowGraphDataConnection<boolean>;\r\n    /**\r\n     * Output connection: The loop body.\r\n     */\r\n    public readonly loopBody: FlowGraphSignalConnection;\r\n\r\n    constructor(public config?: IFlowGraphWhileLoopBlockConfiguration) {\r\n        super(config);\r\n\r\n        this.condition = this._registerDataInput(\"condition\", RichTypeBoolean);\r\n        this.loopBody = this._registerSignalOutput(\"loopBody\");\r\n    }\r\n\r\n    public _execute(context: FlowGraphContext, _callingSignal: FlowGraphSignalConnection): void {\r\n        let conditionValue = this.condition.getValue(context);\r\n        if (this.config?.isDo && !conditionValue) {\r\n            this.loopBody._activateSignal(context);\r\n        }\r\n        while (conditionValue) {\r\n            this.loopBody._activateSignal(context);\r\n            conditionValue = this.condition.getValue(context);\r\n        }\r\n        this.onDone._activateSignal(context);\r\n    }\r\n\r\n    public getClassName(): string {\r\n        return \"FGWhileLoopBlock\";\r\n    }\r\n}\r\nRegisterClass(\"FGWhileLoopBlock\", FlowGraphWhileLoopBlock);\r\n"],"mappings":"AAEA,SAASA,eAAe,QAAQ,gCAA8B;AAE9D,SAASC,iCAAiC,QAAQ,+CAA6C;AAE/F,SAASC,aAAa,QAAQ,+BAA6B;AAY3D;;;;AAIA,OAAM,MAAOC,uBAAwB,SAAQF,iCAAiC;EAU1EG,YAAmBC,MAA8C;IAC7D,KAAK,CAACA,MAAM,CAAC;IADE,KAAAA,MAAM,GAANA,MAAM;IAGrB,IAAI,CAACC,SAAS,GAAG,IAAI,CAACC,kBAAkB,CAAC,WAAW,EAAEP,eAAe,CAAC;IACtE,IAAI,CAACQ,QAAQ,GAAG,IAAI,CAACC,qBAAqB,CAAC,UAAU,CAAC;EAC1D;EAEOC,QAAQA,CAACC,OAAyB,EAAEC,cAAyC;;IAChF,IAAIC,cAAc,GAAG,IAAI,CAACP,SAAS,CAACQ,QAAQ,CAACH,OAAO,CAAC;IACrD,IAAI,EAAAI,EAAA,OAAI,CAACV,MAAM,cAAAU,EAAA,uBAAAA,EAAA,CAAEC,IAAI,KAAI,CAACH,cAAc,EAAE;MACtC,IAAI,CAACL,QAAQ,CAACS,eAAe,CAACN,OAAO,CAAC;;IAE1C,OAAOE,cAAc,EAAE;MACnB,IAAI,CAACL,QAAQ,CAACS,eAAe,CAACN,OAAO,CAAC;MACtCE,cAAc,GAAG,IAAI,CAACP,SAAS,CAACQ,QAAQ,CAACH,OAAO,CAAC;;IAErD,IAAI,CAACO,MAAM,CAACD,eAAe,CAACN,OAAO,CAAC;EACxC;EAEOQ,YAAYA,CAAA;IACf,OAAO,kBAAkB;EAC7B;;AAEJjB,aAAa,CAAC,kBAAkB,EAAEC,uBAAuB,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}