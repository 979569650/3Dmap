{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { StandardMaterial } from \"../Materials/standardMaterial.js\";\nimport { Color3 } from \"../Maths/math.color.js\";\nimport { Matrix, TmpVectors, Vector3 } from \"../Maths/math.vector.js\";\nimport { CreateLines } from \"../Meshes/Builders/linesBuilder.js\";\nimport { Mesh } from \"../Meshes/mesh.js\";\nimport { VertexData } from \"../Meshes/mesh.vertexData.js\";\nimport { TransformNode } from \"../Meshes/transformNode.js\";\n/**\n * Class used to render a debug view of the frustum for a directional light\n * @see https://playground.babylonjs.com/#7EFGSG#4\n * @since 5.0.0\n */\nexport class DirectionalLightFrustumViewer {\n  /**\n   * Gets or sets the transparency of the frustum planes\n   */\n  get transparency() {\n    return this._transparency;\n  }\n  set transparency(alpha) {\n    this._transparency = alpha;\n    for (let i = 6; i < 12; ++i) {\n      this._lightHelperFrustumMeshes[i].material.alpha = alpha;\n    }\n  }\n  /**\n   * true to display the edges of the frustum\n   */\n  get showLines() {\n    return this._showLines;\n  }\n  set showLines(show) {\n    if (this._showLines === show) {\n      return;\n    }\n    this._showLines = show;\n    for (let i = 0; i < 6; ++i) {\n      this._lightHelperFrustumMeshes[i].setEnabled(show);\n    }\n  }\n  /**\n   * true to display the planes of the frustum\n   */\n  get showPlanes() {\n    return this._showPlanes;\n  }\n  set showPlanes(show) {\n    if (this._showPlanes === show) {\n      return;\n    }\n    this._showPlanes = show;\n    for (let i = 6; i < 12; ++i) {\n      this._lightHelperFrustumMeshes[i].setEnabled(show);\n    }\n  }\n  /**\n   * Creates a new frustum viewer\n   * @param light directional light to display the frustum for\n   * @param camera camera used to retrieve the minZ / maxZ values if the shadowMinZ/shadowMaxZ values of the light are not setup\n   */\n  constructor(light, camera) {\n    this._oldPosition = new Vector3(Number.NaN, Number.NaN, Number.NaN);\n    this._oldDirection = new Vector3(Number.NaN, Number.NaN, Number.NaN);\n    this._transparency = 0.3;\n    this._showLines = true;\n    this._showPlanes = true;\n    this._scene = light.getScene();\n    this._light = light;\n    this._camera = camera;\n    this._inverseViewMatrix = Matrix.Identity();\n    this._lightHelperFrustumMeshes = [];\n    this._createGeometry();\n    this.show();\n    this.update();\n  }\n  /**\n   * Shows the frustum\n   */\n  show() {\n    this._lightHelperFrustumMeshes.forEach((mesh, index) => {\n      mesh.setEnabled(index < 6 && this._showLines || index >= 6 && this._showPlanes);\n    });\n    this._oldPosition.set(Number.NaN, Number.NaN, Number.NaN);\n    this._visible = true;\n  }\n  /**\n   * Hides the frustum\n   */\n  hide() {\n    this._lightHelperFrustumMeshes.forEach(mesh => {\n      mesh.setEnabled(false);\n    });\n    this._visible = false;\n  }\n  /**\n   * Updates the frustum.\n   * Call this method to update the frustum view if the light has changed position/direction\n   */\n  update() {\n    var _a, _b, _c, _d, _e, _f;\n    if (!this._visible) {\n      return;\n    }\n    if (this._oldPosition.equals(this._light.position) && this._oldDirection.equals(this._light.direction) && this._oldAutoCalc === this._light.autoCalcShadowZBounds && this._oldMinZ === this._light.shadowMinZ && this._oldMaxZ === this._light.shadowMaxZ) {\n      return;\n    }\n    this._oldPosition.copyFrom(this._light.position);\n    this._oldDirection.copyFrom(this._light.direction);\n    this._oldAutoCalc = this._light.autoCalcShadowZBounds;\n    this._oldMinZ = this._light.shadowMinZ;\n    this._oldMaxZ = this._light.shadowMaxZ;\n    TmpVectors.Vector3[0].set(this._light.orthoLeft, this._light.orthoBottom, this._light.shadowMinZ !== undefined ? this._light.shadowMinZ : this._camera.minZ); // min light extents\n    TmpVectors.Vector3[1].set(this._light.orthoRight, this._light.orthoTop, this._light.shadowMaxZ !== undefined ? this._light.shadowMaxZ : this._camera.maxZ); // max light extents\n    const invLightView = this._getInvertViewMatrix();\n    TmpVectors.Vector3[2].copyFromFloats(TmpVectors.Vector3[1].x, TmpVectors.Vector3[1].y, TmpVectors.Vector3[0].z); // n1\n    TmpVectors.Vector3[3].copyFromFloats(TmpVectors.Vector3[1].x, TmpVectors.Vector3[0].y, TmpVectors.Vector3[0].z); // n2\n    TmpVectors.Vector3[4].copyFromFloats(TmpVectors.Vector3[0].x, TmpVectors.Vector3[0].y, TmpVectors.Vector3[0].z); // n3\n    TmpVectors.Vector3[5].copyFromFloats(TmpVectors.Vector3[0].x, TmpVectors.Vector3[1].y, TmpVectors.Vector3[0].z); // n4\n    Vector3.TransformCoordinatesToRef(TmpVectors.Vector3[2], invLightView, TmpVectors.Vector3[2]); // near1\n    Vector3.TransformCoordinatesToRef(TmpVectors.Vector3[3], invLightView, TmpVectors.Vector3[3]); // near2\n    Vector3.TransformCoordinatesToRef(TmpVectors.Vector3[4], invLightView, TmpVectors.Vector3[4]); // near3\n    Vector3.TransformCoordinatesToRef(TmpVectors.Vector3[5], invLightView, TmpVectors.Vector3[5]); // near4\n    TmpVectors.Vector3[6].copyFromFloats(TmpVectors.Vector3[1].x, TmpVectors.Vector3[1].y, TmpVectors.Vector3[1].z); // f1\n    TmpVectors.Vector3[7].copyFromFloats(TmpVectors.Vector3[1].x, TmpVectors.Vector3[0].y, TmpVectors.Vector3[1].z); // f2\n    TmpVectors.Vector3[8].copyFromFloats(TmpVectors.Vector3[0].x, TmpVectors.Vector3[0].y, TmpVectors.Vector3[1].z); // f3\n    TmpVectors.Vector3[9].copyFromFloats(TmpVectors.Vector3[0].x, TmpVectors.Vector3[1].y, TmpVectors.Vector3[1].z); // f4\n    Vector3.TransformCoordinatesToRef(TmpVectors.Vector3[6], invLightView, TmpVectors.Vector3[6]); // far1\n    Vector3.TransformCoordinatesToRef(TmpVectors.Vector3[7], invLightView, TmpVectors.Vector3[7]); // far2\n    Vector3.TransformCoordinatesToRef(TmpVectors.Vector3[8], invLightView, TmpVectors.Vector3[8]); // far3\n    Vector3.TransformCoordinatesToRef(TmpVectors.Vector3[9], invLightView, TmpVectors.Vector3[9]); // far4\n    CreateLines(\"nearlines\", {\n      updatable: true,\n      points: this._nearLinesPoints,\n      instance: this._lightHelperFrustumMeshes[0]\n    }, this._scene);\n    CreateLines(\"farlines\", {\n      updatable: true,\n      points: this._farLinesPoints,\n      instance: this._lightHelperFrustumMeshes[1]\n    }, this._scene);\n    CreateLines(\"trlines\", {\n      updatable: true,\n      points: this._trLinesPoints,\n      instance: this._lightHelperFrustumMeshes[2]\n    }, this._scene);\n    CreateLines(\"brlines\", {\n      updatable: true,\n      points: this._brLinesPoints,\n      instance: this._lightHelperFrustumMeshes[3]\n    }, this._scene);\n    CreateLines(\"tllines\", {\n      updatable: true,\n      points: this._tlLinesPoints,\n      instance: this._lightHelperFrustumMeshes[4]\n    }, this._scene);\n    CreateLines(\"bllines\", {\n      updatable: true,\n      points: this._blLinesPoints,\n      instance: this._lightHelperFrustumMeshes[5]\n    }, this._scene);\n    TmpVectors.Vector3[2].toArray(this._nearPlaneVertices, 0);\n    TmpVectors.Vector3[3].toArray(this._nearPlaneVertices, 3);\n    TmpVectors.Vector3[4].toArray(this._nearPlaneVertices, 6);\n    TmpVectors.Vector3[5].toArray(this._nearPlaneVertices, 9);\n    (_a = this._lightHelperFrustumMeshes[6].geometry) === null || _a === void 0 ? void 0 : _a.updateVerticesDataDirectly(\"position\", this._nearPlaneVertices, 0);\n    TmpVectors.Vector3[6].toArray(this._farPlaneVertices, 0);\n    TmpVectors.Vector3[7].toArray(this._farPlaneVertices, 3);\n    TmpVectors.Vector3[8].toArray(this._farPlaneVertices, 6);\n    TmpVectors.Vector3[9].toArray(this._farPlaneVertices, 9);\n    (_b = this._lightHelperFrustumMeshes[7].geometry) === null || _b === void 0 ? void 0 : _b.updateVerticesDataDirectly(\"position\", this._farPlaneVertices, 0);\n    TmpVectors.Vector3[2].toArray(this._rightPlaneVertices, 0);\n    TmpVectors.Vector3[6].toArray(this._rightPlaneVertices, 3);\n    TmpVectors.Vector3[7].toArray(this._rightPlaneVertices, 6);\n    TmpVectors.Vector3[3].toArray(this._rightPlaneVertices, 9);\n    (_c = this._lightHelperFrustumMeshes[8].geometry) === null || _c === void 0 ? void 0 : _c.updateVerticesDataDirectly(\"position\", this._rightPlaneVertices, 0);\n    TmpVectors.Vector3[5].toArray(this._leftPlaneVertices, 0);\n    TmpVectors.Vector3[9].toArray(this._leftPlaneVertices, 3);\n    TmpVectors.Vector3[8].toArray(this._leftPlaneVertices, 6);\n    TmpVectors.Vector3[4].toArray(this._leftPlaneVertices, 9);\n    (_d = this._lightHelperFrustumMeshes[9].geometry) === null || _d === void 0 ? void 0 : _d.updateVerticesDataDirectly(\"position\", this._leftPlaneVertices, 0);\n    TmpVectors.Vector3[2].toArray(this._topPlaneVertices, 0);\n    TmpVectors.Vector3[6].toArray(this._topPlaneVertices, 3);\n    TmpVectors.Vector3[9].toArray(this._topPlaneVertices, 6);\n    TmpVectors.Vector3[5].toArray(this._topPlaneVertices, 9);\n    (_e = this._lightHelperFrustumMeshes[10].geometry) === null || _e === void 0 ? void 0 : _e.updateVerticesDataDirectly(\"position\", this._topPlaneVertices, 0);\n    TmpVectors.Vector3[3].toArray(this._bottomPlaneVertices, 0);\n    TmpVectors.Vector3[7].toArray(this._bottomPlaneVertices, 3);\n    TmpVectors.Vector3[8].toArray(this._bottomPlaneVertices, 6);\n    TmpVectors.Vector3[4].toArray(this._bottomPlaneVertices, 9);\n    (_f = this._lightHelperFrustumMeshes[11].geometry) === null || _f === void 0 ? void 0 : _f.updateVerticesDataDirectly(\"position\", this._bottomPlaneVertices, 0);\n  }\n  /**\n   * Dispose of the class / remove the frustum view\n   */\n  dispose() {\n    this._lightHelperFrustumMeshes.forEach(mesh => {\n      var _a;\n      (_a = mesh.material) === null || _a === void 0 ? void 0 : _a.dispose();\n      mesh.dispose();\n    });\n    this._rootNode.dispose();\n  }\n  _createGeometry() {\n    this._rootNode = new TransformNode(\"directionalLightHelperRoot_\" + this._light.name, this._scene);\n    this._rootNode.parent = this._light.parent;\n    this._nearLinesPoints = [Vector3.ZeroReadOnly, Vector3.ZeroReadOnly, Vector3.ZeroReadOnly, Vector3.ZeroReadOnly, Vector3.ZeroReadOnly];\n    const nearLines = CreateLines(\"nearlines\", {\n      updatable: true,\n      points: this._nearLinesPoints\n    }, this._scene);\n    nearLines.parent = this._rootNode;\n    nearLines.alwaysSelectAsActiveMesh = true;\n    this._farLinesPoints = [Vector3.ZeroReadOnly, Vector3.ZeroReadOnly, Vector3.ZeroReadOnly, Vector3.ZeroReadOnly, Vector3.ZeroReadOnly];\n    const farLines = CreateLines(\"farlines\", {\n      updatable: true,\n      points: this._farLinesPoints\n    }, this._scene);\n    farLines.parent = this._rootNode;\n    farLines.alwaysSelectAsActiveMesh = true;\n    this._trLinesPoints = [Vector3.ZeroReadOnly, Vector3.ZeroReadOnly];\n    const trLines = CreateLines(\"trlines\", {\n      updatable: true,\n      points: this._trLinesPoints\n    }, this._scene);\n    trLines.parent = this._rootNode;\n    trLines.alwaysSelectAsActiveMesh = true;\n    this._brLinesPoints = [Vector3.ZeroReadOnly, Vector3.ZeroReadOnly];\n    const brLines = CreateLines(\"brlines\", {\n      updatable: true,\n      points: this._brLinesPoints\n    }, this._scene);\n    brLines.parent = this._rootNode;\n    brLines.alwaysSelectAsActiveMesh = true;\n    this._tlLinesPoints = [Vector3.ZeroReadOnly, Vector3.ZeroReadOnly];\n    const tlLines = CreateLines(\"tllines\", {\n      updatable: true,\n      points: this._tlLinesPoints\n    }, this._scene);\n    tlLines.parent = this._rootNode;\n    tlLines.alwaysSelectAsActiveMesh = true;\n    this._blLinesPoints = [Vector3.ZeroReadOnly, Vector3.ZeroReadOnly];\n    const blLines = CreateLines(\"bllines\", {\n      updatable: true,\n      points: this._blLinesPoints\n    }, this._scene);\n    blLines.parent = this._rootNode;\n    blLines.alwaysSelectAsActiveMesh = true;\n    this._lightHelperFrustumMeshes.push(nearLines, farLines, trLines, brLines, tlLines, blLines);\n    const makePlane = (name, color, positions) => {\n      const plane = new Mesh(name + \"plane\", this._scene);\n      const mat = new StandardMaterial(name + \"PlaneMat\", this._scene);\n      plane.material = mat;\n      plane.parent = this._rootNode;\n      plane.alwaysSelectAsActiveMesh = true;\n      mat.emissiveColor = color;\n      mat.alpha = this.transparency;\n      mat.backFaceCulling = false;\n      mat.disableLighting = true;\n      const indices = [0, 1, 2, 0, 2, 3];\n      const vertexData = new VertexData();\n      vertexData.positions = positions;\n      vertexData.indices = indices;\n      vertexData.applyToMesh(plane, true);\n      this._lightHelperFrustumMeshes.push(plane);\n    };\n    this._nearPlaneVertices = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\n    this._farPlaneVertices = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\n    this._rightPlaneVertices = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\n    this._leftPlaneVertices = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\n    this._topPlaneVertices = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\n    this._bottomPlaneVertices = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\n    makePlane(\"near\", new Color3(1, 0, 0), this._nearPlaneVertices);\n    makePlane(\"far\", new Color3(0.3, 0, 0), this._farPlaneVertices);\n    makePlane(\"right\", new Color3(0, 1, 0), this._rightPlaneVertices);\n    makePlane(\"left\", new Color3(0, 0.3, 0), this._leftPlaneVertices);\n    makePlane(\"top\", new Color3(0, 0, 1), this._topPlaneVertices);\n    makePlane(\"bottom\", new Color3(0, 0, 0.3), this._bottomPlaneVertices);\n    this._nearLinesPoints[0] = TmpVectors.Vector3[2];\n    this._nearLinesPoints[1] = TmpVectors.Vector3[3];\n    this._nearLinesPoints[2] = TmpVectors.Vector3[4];\n    this._nearLinesPoints[3] = TmpVectors.Vector3[5];\n    this._nearLinesPoints[4] = TmpVectors.Vector3[2];\n    this._farLinesPoints[0] = TmpVectors.Vector3[6];\n    this._farLinesPoints[1] = TmpVectors.Vector3[7];\n    this._farLinesPoints[2] = TmpVectors.Vector3[8];\n    this._farLinesPoints[3] = TmpVectors.Vector3[9];\n    this._farLinesPoints[4] = TmpVectors.Vector3[6];\n    this._trLinesPoints[0] = TmpVectors.Vector3[2];\n    this._trLinesPoints[1] = TmpVectors.Vector3[6];\n    this._brLinesPoints[0] = TmpVectors.Vector3[3];\n    this._brLinesPoints[1] = TmpVectors.Vector3[7];\n    this._tlLinesPoints[0] = TmpVectors.Vector3[4];\n    this._tlLinesPoints[1] = TmpVectors.Vector3[8];\n    this._blLinesPoints[0] = TmpVectors.Vector3[5];\n    this._blLinesPoints[1] = TmpVectors.Vector3[9];\n  }\n  _getInvertViewMatrix() {\n    Matrix.LookAtLHToRef(this._light.position, this._light.position.add(this._light.direction), Vector3.UpReadOnly, this._inverseViewMatrix);\n    this._inverseViewMatrix.invertToRef(this._inverseViewMatrix);\n    return this._inverseViewMatrix;\n  }\n}","map":{"version":3,"names":["StandardMaterial","Color3","Matrix","TmpVectors","Vector3","CreateLines","Mesh","VertexData","TransformNode","DirectionalLightFrustumViewer","transparency","_transparency","alpha","i","_lightHelperFrustumMeshes","material","showLines","_showLines","show","setEnabled","showPlanes","_showPlanes","constructor","light","camera","_oldPosition","Number","NaN","_oldDirection","_scene","getScene","_light","_camera","_inverseViewMatrix","Identity","_createGeometry","update","forEach","mesh","index","set","_visible","hide","equals","position","direction","_oldAutoCalc","autoCalcShadowZBounds","_oldMinZ","shadowMinZ","_oldMaxZ","shadowMaxZ","copyFrom","orthoLeft","orthoBottom","undefined","minZ","orthoRight","orthoTop","maxZ","invLightView","_getInvertViewMatrix","copyFromFloats","x","y","z","TransformCoordinatesToRef","updatable","points","_nearLinesPoints","instance","_farLinesPoints","_trLinesPoints","_brLinesPoints","_tlLinesPoints","_blLinesPoints","toArray","_nearPlaneVertices","_a","geometry","updateVerticesDataDirectly","_farPlaneVertices","_b","_rightPlaneVertices","_c","_leftPlaneVertices","_d","_topPlaneVertices","_e","_bottomPlaneVertices","_f","dispose","_rootNode","name","parent","ZeroReadOnly","nearLines","alwaysSelectAsActiveMesh","farLines","trLines","brLines","tlLines","blLines","push","makePlane","color","positions","plane","mat","emissiveColor","backFaceCulling","disableLighting","indices","vertexData","applyToMesh","LookAtLHToRef","add","UpReadOnly","invertToRef"],"sources":["../../../../dev/core/src/Debug/directionalLightFrustumViewer.ts"],"sourcesContent":["import type { Camera } from \"../Cameras/camera\";\r\nimport type { DirectionalLight } from \"../Lights/directionalLight\";\r\nimport { StandardMaterial } from \"../Materials/standardMaterial\";\r\nimport { Color3 } from \"../Maths/math.color\";\r\nimport { Matrix, TmpVectors, Vector3 } from \"../Maths/math.vector\";\r\nimport { CreateLines } from \"../Meshes/Builders/linesBuilder\";\r\nimport type { LinesMesh } from \"../Meshes/linesMesh\";\r\nimport { Mesh } from \"../Meshes/mesh\";\r\nimport { VertexData } from \"../Meshes/mesh.vertexData\";\r\nimport { TransformNode } from \"../Meshes/transformNode\";\r\nimport type { Scene } from \"../scene\";\r\n\r\n/**\r\n * Class used to render a debug view of the frustum for a directional light\r\n * @see https://playground.babylonjs.com/#7EFGSG#4\r\n * @since 5.0.0\r\n */\r\nexport class DirectionalLightFrustumViewer {\r\n    private _scene: Scene;\r\n    private _light: DirectionalLight;\r\n    private _camera: Camera;\r\n    private _inverseViewMatrix: Matrix;\r\n    private _visible: boolean;\r\n\r\n    private _rootNode: TransformNode;\r\n    private _lightHelperFrustumMeshes: Mesh[];\r\n\r\n    private _nearLinesPoints: Vector3[];\r\n    private _farLinesPoints: Vector3[];\r\n    private _trLinesPoints: Vector3[];\r\n    private _brLinesPoints: Vector3[];\r\n    private _tlLinesPoints: Vector3[];\r\n    private _blLinesPoints: Vector3[];\r\n\r\n    private _nearPlaneVertices: number[];\r\n    private _farPlaneVertices: number[];\r\n    private _rightPlaneVertices: number[];\r\n    private _leftPlaneVertices: number[];\r\n    private _topPlaneVertices: number[];\r\n    private _bottomPlaneVertices: number[];\r\n\r\n    private _oldPosition: Vector3 = new Vector3(Number.NaN, Number.NaN, Number.NaN);\r\n    private _oldDirection: Vector3 = new Vector3(Number.NaN, Number.NaN, Number.NaN);\r\n    private _oldAutoCalc: boolean;\r\n    private _oldMinZ: number;\r\n    private _oldMaxZ: number;\r\n\r\n    private _transparency = 0.3;\r\n    /**\r\n     * Gets or sets the transparency of the frustum planes\r\n     */\r\n    public get transparency(): number {\r\n        return this._transparency;\r\n    }\r\n\r\n    public set transparency(alpha: number) {\r\n        this._transparency = alpha;\r\n        for (let i = 6; i < 12; ++i) {\r\n            this._lightHelperFrustumMeshes[i].material!.alpha = alpha;\r\n        }\r\n    }\r\n\r\n    private _showLines = true;\r\n    /**\r\n     * true to display the edges of the frustum\r\n     */\r\n    public get showLines(): boolean {\r\n        return this._showLines;\r\n    }\r\n\r\n    public set showLines(show: boolean) {\r\n        if (this._showLines === show) {\r\n            return;\r\n        }\r\n        this._showLines = show;\r\n        for (let i = 0; i < 6; ++i) {\r\n            this._lightHelperFrustumMeshes[i].setEnabled(show);\r\n        }\r\n    }\r\n\r\n    private _showPlanes = true;\r\n    /**\r\n     * true to display the planes of the frustum\r\n     */\r\n    public get showPlanes(): boolean {\r\n        return this._showPlanes;\r\n    }\r\n\r\n    public set showPlanes(show: boolean) {\r\n        if (this._showPlanes === show) {\r\n            return;\r\n        }\r\n        this._showPlanes = show;\r\n        for (let i = 6; i < 12; ++i) {\r\n            this._lightHelperFrustumMeshes[i].setEnabled(show);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Creates a new frustum viewer\r\n     * @param light directional light to display the frustum for\r\n     * @param camera camera used to retrieve the minZ / maxZ values if the shadowMinZ/shadowMaxZ values of the light are not setup\r\n     */\r\n    constructor(light: DirectionalLight, camera: Camera) {\r\n        this._scene = light.getScene();\r\n        this._light = light;\r\n        this._camera = camera;\r\n        this._inverseViewMatrix = Matrix.Identity();\r\n        this._lightHelperFrustumMeshes = [];\r\n        this._createGeometry();\r\n        this.show();\r\n        this.update();\r\n    }\r\n\r\n    /**\r\n     * Shows the frustum\r\n     */\r\n    public show() {\r\n        this._lightHelperFrustumMeshes.forEach((mesh, index) => {\r\n            mesh.setEnabled((index < 6 && this._showLines) || (index >= 6 && this._showPlanes));\r\n        });\r\n        this._oldPosition.set(Number.NaN, Number.NaN, Number.NaN);\r\n        this._visible = true;\r\n    }\r\n\r\n    /**\r\n     * Hides the frustum\r\n     */\r\n    public hide() {\r\n        this._lightHelperFrustumMeshes.forEach((mesh) => {\r\n            mesh.setEnabled(false);\r\n        });\r\n        this._visible = false;\r\n    }\r\n\r\n    /**\r\n     * Updates the frustum.\r\n     * Call this method to update the frustum view if the light has changed position/direction\r\n     */\r\n    public update() {\r\n        if (!this._visible) {\r\n            return;\r\n        }\r\n\r\n        if (\r\n            this._oldPosition.equals(this._light.position) &&\r\n            this._oldDirection.equals(this._light.direction) &&\r\n            this._oldAutoCalc === this._light.autoCalcShadowZBounds &&\r\n            this._oldMinZ === this._light.shadowMinZ &&\r\n            this._oldMaxZ === this._light.shadowMaxZ\r\n        ) {\r\n            return;\r\n        }\r\n\r\n        this._oldPosition.copyFrom(this._light.position);\r\n        this._oldDirection.copyFrom(this._light.direction);\r\n        this._oldAutoCalc = this._light.autoCalcShadowZBounds;\r\n        this._oldMinZ = this._light.shadowMinZ;\r\n        this._oldMaxZ = this._light.shadowMaxZ;\r\n\r\n        TmpVectors.Vector3[0].set(this._light.orthoLeft, this._light.orthoBottom, this._light.shadowMinZ !== undefined ? this._light.shadowMinZ : this._camera.minZ); // min light extents\r\n        TmpVectors.Vector3[1].set(this._light.orthoRight, this._light.orthoTop, this._light.shadowMaxZ !== undefined ? this._light.shadowMaxZ : this._camera.maxZ); // max light extents\r\n\r\n        const invLightView = this._getInvertViewMatrix();\r\n\r\n        TmpVectors.Vector3[2].copyFromFloats(TmpVectors.Vector3[1].x, TmpVectors.Vector3[1].y, TmpVectors.Vector3[0].z); // n1\r\n        TmpVectors.Vector3[3].copyFromFloats(TmpVectors.Vector3[1].x, TmpVectors.Vector3[0].y, TmpVectors.Vector3[0].z); // n2\r\n        TmpVectors.Vector3[4].copyFromFloats(TmpVectors.Vector3[0].x, TmpVectors.Vector3[0].y, TmpVectors.Vector3[0].z); // n3\r\n        TmpVectors.Vector3[5].copyFromFloats(TmpVectors.Vector3[0].x, TmpVectors.Vector3[1].y, TmpVectors.Vector3[0].z); // n4\r\n\r\n        Vector3.TransformCoordinatesToRef(TmpVectors.Vector3[2], invLightView, TmpVectors.Vector3[2]); // near1\r\n        Vector3.TransformCoordinatesToRef(TmpVectors.Vector3[3], invLightView, TmpVectors.Vector3[3]); // near2\r\n        Vector3.TransformCoordinatesToRef(TmpVectors.Vector3[4], invLightView, TmpVectors.Vector3[4]); // near3\r\n        Vector3.TransformCoordinatesToRef(TmpVectors.Vector3[5], invLightView, TmpVectors.Vector3[5]); // near4\r\n\r\n        TmpVectors.Vector3[6].copyFromFloats(TmpVectors.Vector3[1].x, TmpVectors.Vector3[1].y, TmpVectors.Vector3[1].z); // f1\r\n        TmpVectors.Vector3[7].copyFromFloats(TmpVectors.Vector3[1].x, TmpVectors.Vector3[0].y, TmpVectors.Vector3[1].z); // f2\r\n        TmpVectors.Vector3[8].copyFromFloats(TmpVectors.Vector3[0].x, TmpVectors.Vector3[0].y, TmpVectors.Vector3[1].z); // f3\r\n        TmpVectors.Vector3[9].copyFromFloats(TmpVectors.Vector3[0].x, TmpVectors.Vector3[1].y, TmpVectors.Vector3[1].z); // f4\r\n\r\n        Vector3.TransformCoordinatesToRef(TmpVectors.Vector3[6], invLightView, TmpVectors.Vector3[6]); // far1\r\n        Vector3.TransformCoordinatesToRef(TmpVectors.Vector3[7], invLightView, TmpVectors.Vector3[7]); // far2\r\n        Vector3.TransformCoordinatesToRef(TmpVectors.Vector3[8], invLightView, TmpVectors.Vector3[8]); // far3\r\n        Vector3.TransformCoordinatesToRef(TmpVectors.Vector3[9], invLightView, TmpVectors.Vector3[9]); // far4\r\n\r\n        CreateLines(\"nearlines\", { updatable: true, points: this._nearLinesPoints, instance: this._lightHelperFrustumMeshes[0] as LinesMesh }, this._scene);\r\n\r\n        CreateLines(\"farlines\", { updatable: true, points: this._farLinesPoints, instance: this._lightHelperFrustumMeshes[1] as LinesMesh }, this._scene);\r\n\r\n        CreateLines(\"trlines\", { updatable: true, points: this._trLinesPoints, instance: this._lightHelperFrustumMeshes[2] as LinesMesh }, this._scene);\r\n\r\n        CreateLines(\"brlines\", { updatable: true, points: this._brLinesPoints, instance: this._lightHelperFrustumMeshes[3] as LinesMesh }, this._scene);\r\n\r\n        CreateLines(\"tllines\", { updatable: true, points: this._tlLinesPoints, instance: this._lightHelperFrustumMeshes[4] as LinesMesh }, this._scene);\r\n\r\n        CreateLines(\"bllines\", { updatable: true, points: this._blLinesPoints, instance: this._lightHelperFrustumMeshes[5] as LinesMesh }, this._scene);\r\n\r\n        TmpVectors.Vector3[2].toArray(this._nearPlaneVertices, 0);\r\n        TmpVectors.Vector3[3].toArray(this._nearPlaneVertices, 3);\r\n        TmpVectors.Vector3[4].toArray(this._nearPlaneVertices, 6);\r\n        TmpVectors.Vector3[5].toArray(this._nearPlaneVertices, 9);\r\n        this._lightHelperFrustumMeshes[6].geometry?.updateVerticesDataDirectly(\"position\", this._nearPlaneVertices, 0);\r\n\r\n        TmpVectors.Vector3[6].toArray(this._farPlaneVertices, 0);\r\n        TmpVectors.Vector3[7].toArray(this._farPlaneVertices, 3);\r\n        TmpVectors.Vector3[8].toArray(this._farPlaneVertices, 6);\r\n        TmpVectors.Vector3[9].toArray(this._farPlaneVertices, 9);\r\n        this._lightHelperFrustumMeshes[7].geometry?.updateVerticesDataDirectly(\"position\", this._farPlaneVertices, 0);\r\n\r\n        TmpVectors.Vector3[2].toArray(this._rightPlaneVertices, 0);\r\n        TmpVectors.Vector3[6].toArray(this._rightPlaneVertices, 3);\r\n        TmpVectors.Vector3[7].toArray(this._rightPlaneVertices, 6);\r\n        TmpVectors.Vector3[3].toArray(this._rightPlaneVertices, 9);\r\n        this._lightHelperFrustumMeshes[8].geometry?.updateVerticesDataDirectly(\"position\", this._rightPlaneVertices, 0);\r\n\r\n        TmpVectors.Vector3[5].toArray(this._leftPlaneVertices, 0);\r\n        TmpVectors.Vector3[9].toArray(this._leftPlaneVertices, 3);\r\n        TmpVectors.Vector3[8].toArray(this._leftPlaneVertices, 6);\r\n        TmpVectors.Vector3[4].toArray(this._leftPlaneVertices, 9);\r\n        this._lightHelperFrustumMeshes[9].geometry?.updateVerticesDataDirectly(\"position\", this._leftPlaneVertices, 0);\r\n\r\n        TmpVectors.Vector3[2].toArray(this._topPlaneVertices, 0);\r\n        TmpVectors.Vector3[6].toArray(this._topPlaneVertices, 3);\r\n        TmpVectors.Vector3[9].toArray(this._topPlaneVertices, 6);\r\n        TmpVectors.Vector3[5].toArray(this._topPlaneVertices, 9);\r\n        this._lightHelperFrustumMeshes[10].geometry?.updateVerticesDataDirectly(\"position\", this._topPlaneVertices, 0);\r\n\r\n        TmpVectors.Vector3[3].toArray(this._bottomPlaneVertices, 0);\r\n        TmpVectors.Vector3[7].toArray(this._bottomPlaneVertices, 3);\r\n        TmpVectors.Vector3[8].toArray(this._bottomPlaneVertices, 6);\r\n        TmpVectors.Vector3[4].toArray(this._bottomPlaneVertices, 9);\r\n        this._lightHelperFrustumMeshes[11].geometry?.updateVerticesDataDirectly(\"position\", this._bottomPlaneVertices, 0);\r\n    }\r\n\r\n    /**\r\n     * Dispose of the class / remove the frustum view\r\n     */\r\n    public dispose() {\r\n        this._lightHelperFrustumMeshes.forEach((mesh) => {\r\n            mesh.material?.dispose();\r\n            mesh.dispose();\r\n        });\r\n        this._rootNode.dispose();\r\n    }\r\n\r\n    protected _createGeometry() {\r\n        this._rootNode = new TransformNode(\"directionalLightHelperRoot_\" + this._light.name, this._scene);\r\n        this._rootNode.parent = this._light.parent;\r\n\r\n        this._nearLinesPoints = [Vector3.ZeroReadOnly, Vector3.ZeroReadOnly, Vector3.ZeroReadOnly, Vector3.ZeroReadOnly, Vector3.ZeroReadOnly];\r\n        const nearLines = CreateLines(\"nearlines\", { updatable: true, points: this._nearLinesPoints }, this._scene);\r\n        nearLines.parent = this._rootNode;\r\n        nearLines.alwaysSelectAsActiveMesh = true;\r\n\r\n        this._farLinesPoints = [Vector3.ZeroReadOnly, Vector3.ZeroReadOnly, Vector3.ZeroReadOnly, Vector3.ZeroReadOnly, Vector3.ZeroReadOnly];\r\n        const farLines = CreateLines(\"farlines\", { updatable: true, points: this._farLinesPoints }, this._scene);\r\n        farLines.parent = this._rootNode;\r\n        farLines.alwaysSelectAsActiveMesh = true;\r\n\r\n        this._trLinesPoints = [Vector3.ZeroReadOnly, Vector3.ZeroReadOnly];\r\n        const trLines = CreateLines(\"trlines\", { updatable: true, points: this._trLinesPoints }, this._scene);\r\n        trLines.parent = this._rootNode;\r\n        trLines.alwaysSelectAsActiveMesh = true;\r\n\r\n        this._brLinesPoints = [Vector3.ZeroReadOnly, Vector3.ZeroReadOnly];\r\n        const brLines = CreateLines(\"brlines\", { updatable: true, points: this._brLinesPoints }, this._scene);\r\n        brLines.parent = this._rootNode;\r\n        brLines.alwaysSelectAsActiveMesh = true;\r\n\r\n        this._tlLinesPoints = [Vector3.ZeroReadOnly, Vector3.ZeroReadOnly];\r\n        const tlLines = CreateLines(\"tllines\", { updatable: true, points: this._tlLinesPoints }, this._scene);\r\n        tlLines.parent = this._rootNode;\r\n        tlLines.alwaysSelectAsActiveMesh = true;\r\n\r\n        this._blLinesPoints = [Vector3.ZeroReadOnly, Vector3.ZeroReadOnly];\r\n        const blLines = CreateLines(\"bllines\", { updatable: true, points: this._blLinesPoints }, this._scene);\r\n        blLines.parent = this._rootNode;\r\n        blLines.alwaysSelectAsActiveMesh = true;\r\n\r\n        this._lightHelperFrustumMeshes.push(nearLines, farLines, trLines, brLines, tlLines, blLines);\r\n\r\n        const makePlane = (name: string, color: Color3, positions: number[]) => {\r\n            const plane = new Mesh(name + \"plane\", this._scene);\r\n            const mat = new StandardMaterial(name + \"PlaneMat\", this._scene);\r\n\r\n            plane.material = mat;\r\n            plane.parent = this._rootNode;\r\n            plane.alwaysSelectAsActiveMesh = true;\r\n\r\n            mat.emissiveColor = color;\r\n            mat.alpha = this.transparency;\r\n            mat.backFaceCulling = false;\r\n            mat.disableLighting = true;\r\n\r\n            const indices = [0, 1, 2, 0, 2, 3];\r\n\r\n            const vertexData = new VertexData();\r\n\r\n            vertexData.positions = positions;\r\n            vertexData.indices = indices;\r\n\r\n            vertexData.applyToMesh(plane, true);\r\n\r\n            this._lightHelperFrustumMeshes.push(plane);\r\n        };\r\n\r\n        this._nearPlaneVertices = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\r\n        this._farPlaneVertices = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\r\n        this._rightPlaneVertices = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\r\n        this._leftPlaneVertices = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\r\n        this._topPlaneVertices = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\r\n        this._bottomPlaneVertices = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\r\n\r\n        makePlane(\"near\", new Color3(1, 0, 0), this._nearPlaneVertices);\r\n        makePlane(\"far\", new Color3(0.3, 0, 0), this._farPlaneVertices);\r\n        makePlane(\"right\", new Color3(0, 1, 0), this._rightPlaneVertices);\r\n        makePlane(\"left\", new Color3(0, 0.3, 0), this._leftPlaneVertices);\r\n        makePlane(\"top\", new Color3(0, 0, 1), this._topPlaneVertices);\r\n        makePlane(\"bottom\", new Color3(0, 0, 0.3), this._bottomPlaneVertices);\r\n\r\n        this._nearLinesPoints[0] = TmpVectors.Vector3[2];\r\n        this._nearLinesPoints[1] = TmpVectors.Vector3[3];\r\n        this._nearLinesPoints[2] = TmpVectors.Vector3[4];\r\n        this._nearLinesPoints[3] = TmpVectors.Vector3[5];\r\n        this._nearLinesPoints[4] = TmpVectors.Vector3[2];\r\n\r\n        this._farLinesPoints[0] = TmpVectors.Vector3[6];\r\n        this._farLinesPoints[1] = TmpVectors.Vector3[7];\r\n        this._farLinesPoints[2] = TmpVectors.Vector3[8];\r\n        this._farLinesPoints[3] = TmpVectors.Vector3[9];\r\n        this._farLinesPoints[4] = TmpVectors.Vector3[6];\r\n\r\n        this._trLinesPoints[0] = TmpVectors.Vector3[2];\r\n        this._trLinesPoints[1] = TmpVectors.Vector3[6];\r\n\r\n        this._brLinesPoints[0] = TmpVectors.Vector3[3];\r\n        this._brLinesPoints[1] = TmpVectors.Vector3[7];\r\n\r\n        this._tlLinesPoints[0] = TmpVectors.Vector3[4];\r\n        this._tlLinesPoints[1] = TmpVectors.Vector3[8];\r\n\r\n        this._blLinesPoints[0] = TmpVectors.Vector3[5];\r\n        this._blLinesPoints[1] = TmpVectors.Vector3[9];\r\n    }\r\n\r\n    protected _getInvertViewMatrix(): Matrix {\r\n        Matrix.LookAtLHToRef(this._light.position, this._light.position.add(this._light.direction), Vector3.UpReadOnly, this._inverseViewMatrix);\r\n        this._inverseViewMatrix.invertToRef(this._inverseViewMatrix);\r\n        return this._inverseViewMatrix;\r\n    }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}