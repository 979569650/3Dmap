{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nexport class NativePipelineContext {\n  get isAsync() {\n    return this.isParallelCompiled;\n  }\n  get isReady() {\n    if (this.compilationError) {\n      const message = this.compilationError.message;\n      throw new Error(\"SHADER ERROR\" + (typeof message === \"string\" ? \"\\n\" + message : \"\"));\n    }\n    return this.isCompiled;\n  }\n  _getVertexShaderCode() {\n    return null;\n  }\n  _getFragmentShaderCode() {\n    return null;\n  }\n  // TODO: what should this do?\n  _handlesSpectorRebuildCallback(onCompiled) {\n    throw new Error(\"Not implemented\");\n  }\n  constructor(engine) {\n    this.isParallelCompiled = true;\n    this.isCompiled = false;\n    this._valueCache = {};\n    this._engine = engine;\n  }\n  _fillEffectInformation(effect, uniformBuffersNames, uniformsNames, uniforms, samplerList, samplers, attributesNames, attributes) {\n    const engine = this._engine;\n    if (engine.supportsUniformBuffers) {\n      for (const name in uniformBuffersNames) {\n        effect.bindUniformBlock(name, uniformBuffersNames[name]);\n      }\n    }\n    const effectAvailableUniforms = this._engine.getUniforms(this, uniformsNames);\n    effectAvailableUniforms.forEach((uniform, index) => {\n      uniforms[uniformsNames[index]] = uniform;\n    });\n    this._uniforms = uniforms;\n    let index;\n    for (index = 0; index < samplerList.length; index++) {\n      const sampler = effect.getUniform(samplerList[index]);\n      if (sampler == null) {\n        samplerList.splice(index, 1);\n        index--;\n      }\n    }\n    samplerList.forEach((name, index) => {\n      samplers[name] = index;\n    });\n    attributes.push(...engine.getAttributes(this, attributesNames));\n  }\n  /**\n   * Release all associated resources.\n   **/\n  dispose() {\n    this._uniforms = {};\n  }\n  /**\n   * @internal\n   */\n  _cacheMatrix(uniformName, matrix) {\n    const cache = this._valueCache[uniformName];\n    const flag = matrix.updateFlag;\n    if (cache !== undefined && cache === flag) {\n      return false;\n    }\n    this._valueCache[uniformName] = flag;\n    return true;\n  }\n  /**\n   * @internal\n   */\n  _cacheFloat2(uniformName, x, y) {\n    let cache = this._valueCache[uniformName];\n    if (!cache) {\n      cache = [x, y];\n      this._valueCache[uniformName] = cache;\n      return true;\n    }\n    let changed = false;\n    if (cache[0] !== x) {\n      cache[0] = x;\n      changed = true;\n    }\n    if (cache[1] !== y) {\n      cache[1] = y;\n      changed = true;\n    }\n    return changed;\n  }\n  /**\n   * @internal\n   */\n  _cacheFloat3(uniformName, x, y, z) {\n    let cache = this._valueCache[uniformName];\n    if (!cache) {\n      cache = [x, y, z];\n      this._valueCache[uniformName] = cache;\n      return true;\n    }\n    let changed = false;\n    if (cache[0] !== x) {\n      cache[0] = x;\n      changed = true;\n    }\n    if (cache[1] !== y) {\n      cache[1] = y;\n      changed = true;\n    }\n    if (cache[2] !== z) {\n      cache[2] = z;\n      changed = true;\n    }\n    return changed;\n  }\n  /**\n   * @internal\n   */\n  _cacheFloat4(uniformName, x, y, z, w) {\n    let cache = this._valueCache[uniformName];\n    if (!cache) {\n      cache = [x, y, z, w];\n      this._valueCache[uniformName] = cache;\n      return true;\n    }\n    let changed = false;\n    if (cache[0] !== x) {\n      cache[0] = x;\n      changed = true;\n    }\n    if (cache[1] !== y) {\n      cache[1] = y;\n      changed = true;\n    }\n    if (cache[2] !== z) {\n      cache[2] = z;\n      changed = true;\n    }\n    if (cache[3] !== w) {\n      cache[3] = w;\n      changed = true;\n    }\n    return changed;\n  }\n  /**\n   * Sets an integer value on a uniform variable.\n   * @param uniformName Name of the variable.\n   * @param value Value to be set.\n   */\n  setInt(uniformName, value) {\n    const cache = this._valueCache[uniformName];\n    if (cache !== undefined && cache === value) {\n      return;\n    }\n    if (this._engine.setInt(this._uniforms[uniformName], value)) {\n      this._valueCache[uniformName] = value;\n    }\n  }\n  /**\n   * Sets a int2 on a uniform variable.\n   * @param uniformName Name of the variable.\n   * @param x First int in int2.\n   * @param y Second int in int2.\n   */\n  setInt2(uniformName, x, y) {\n    if (this._cacheFloat2(uniformName, x, y)) {\n      if (!this._engine.setInt2(this._uniforms[uniformName], x, y)) {\n        this._valueCache[uniformName] = null;\n      }\n    }\n  }\n  /**\n   * Sets a int3 on a uniform variable.\n   * @param uniformName Name of the variable.\n   * @param x First int in int3.\n   * @param y Second int in int3.\n   * @param z Third int in int3.\n   */\n  setInt3(uniformName, x, y, z) {\n    if (this._cacheFloat3(uniformName, x, y, z)) {\n      if (!this._engine.setInt3(this._uniforms[uniformName], x, y, z)) {\n        this._valueCache[uniformName] = null;\n      }\n    }\n  }\n  /**\n   * Sets a int4 on a uniform variable.\n   * @param uniformName Name of the variable.\n   * @param x First int in int4.\n   * @param y Second int in int4.\n   * @param z Third int in int4.\n   * @param w Fourth int in int4.\n   */\n  setInt4(uniformName, x, y, z, w) {\n    if (this._cacheFloat4(uniformName, x, y, z, w)) {\n      if (!this._engine.setInt4(this._uniforms[uniformName], x, y, z, w)) {\n        this._valueCache[uniformName] = null;\n      }\n    }\n  }\n  /**\n   * Sets an int array on a uniform variable.\n   * @param uniformName Name of the variable.\n   * @param array array to be set.\n   */\n  setIntArray(uniformName, array) {\n    this._valueCache[uniformName] = null;\n    this._engine.setIntArray(this._uniforms[uniformName], array);\n  }\n  /**\n   * Sets an int array 2 on a uniform variable. (Array is specified as single array eg. [1,2,3,4] will result in [[1,2],[3,4]] in the shader)\n   * @param uniformName Name of the variable.\n   * @param array array to be set.\n   */\n  setIntArray2(uniformName, array) {\n    this._valueCache[uniformName] = null;\n    this._engine.setIntArray2(this._uniforms[uniformName], array);\n  }\n  /**\n   * Sets an int array 3 on a uniform variable. (Array is specified as single array eg. [1,2,3,4,5,6] will result in [[1,2,3],[4,5,6]] in the shader)\n   * @param uniformName Name of the variable.\n   * @param array array to be set.\n   */\n  setIntArray3(uniformName, array) {\n    this._valueCache[uniformName] = null;\n    this._engine.setIntArray3(this._uniforms[uniformName], array);\n  }\n  /**\n   * Sets an int array 4 on a uniform variable. (Array is specified as single array eg. [1,2,3,4,5,6,7,8] will result in [[1,2,3,4],[5,6,7,8]] in the shader)\n   * @param uniformName Name of the variable.\n   * @param array array to be set.\n   */\n  setIntArray4(uniformName, array) {\n    this._valueCache[uniformName] = null;\n    this._engine.setIntArray4(this._uniforms[uniformName], array);\n  }\n  /**\n   * Sets an unsigned integer value on a uniform variable.\n   * @param uniformName Name of the variable.\n   * @param value Value to be set.\n   */\n  setUInt(uniformName, value) {\n    const cache = this._valueCache[uniformName];\n    if (cache !== undefined && cache === value) {\n      return;\n    }\n    if (this._engine.setUInt(this._uniforms[uniformName], value)) {\n      this._valueCache[uniformName] = value;\n    }\n  }\n  /**\n   * Sets a unsigned int2 on a uniform variable.\n   * @param uniformName Name of the variable.\n   * @param x First unsigned int in uint2.\n   * @param y Second unsigned int in uint2.\n   */\n  setUInt2(uniformName, x, y) {\n    if (this._cacheFloat2(uniformName, x, y)) {\n      if (!this._engine.setUInt2(this._uniforms[uniformName], x, y)) {\n        this._valueCache[uniformName] = null;\n      }\n    }\n  }\n  /**\n   * Sets a unsigned int3 on a uniform variable.\n   * @param uniformName Name of the variable.\n   * @param x First unsigned int in uint3.\n   * @param y Second unsigned int in uint3.\n   * @param z Third unsigned int in uint3.\n   */\n  setUInt3(uniformName, x, y, z) {\n    if (this._cacheFloat3(uniformName, x, y, z)) {\n      if (!this._engine.setUInt3(this._uniforms[uniformName], x, y, z)) {\n        this._valueCache[uniformName] = null;\n      }\n    }\n  }\n  /**\n   * Sets a unsigned int4 on a uniform variable.\n   * @param uniformName Name of the variable.\n   * @param x First unsigned int in uint4.\n   * @param y Second unsigned int in uint4.\n   * @param z Third unsigned int in uint4.\n   * @param w Fourth unsigned int in uint4.\n   */\n  setUInt4(uniformName, x, y, z, w) {\n    if (this._cacheFloat4(uniformName, x, y, z, w)) {\n      if (!this._engine.setUInt4(this._uniforms[uniformName], x, y, z, w)) {\n        this._valueCache[uniformName] = null;\n      }\n    }\n  }\n  /**\n   * Sets an unsigned int array on a uniform variable.\n   * @param uniformName Name of the variable.\n   * @param array array to be set.\n   */\n  setUIntArray(uniformName, array) {\n    this._valueCache[uniformName] = null;\n    this._engine.setUIntArray(this._uniforms[uniformName], array);\n  }\n  /**\n   * Sets an unsigned int array 2 on a uniform variable. (Array is specified as single array eg. [1,2,3,4] will result in [[1,2],[3,4]] in the shader)\n   * @param uniformName Name of the variable.\n   * @param array array to be set.\n   */\n  setUIntArray2(uniformName, array) {\n    this._valueCache[uniformName] = null;\n    this._engine.setUIntArray2(this._uniforms[uniformName], array);\n  }\n  /**\n   * Sets an unsigned int array 3 on a uniform variable. (Array is specified as single array eg. [1,2,3,4,5,6] will result in [[1,2,3],[4,5,6]] in the shader)\n   * @param uniformName Name of the variable.\n   * @param array array to be set.\n   */\n  setUIntArray3(uniformName, array) {\n    this._valueCache[uniformName] = null;\n    this._engine.setUIntArray3(this._uniforms[uniformName], array);\n  }\n  /**\n   * Sets an unsigned int array 4 on a uniform variable. (Array is specified as single array eg. [1,2,3,4,5,6,7,8] will result in [[1,2,3,4],[5,6,7,8]] in the shader)\n   * @param uniformName Name of the variable.\n   * @param array array to be set.\n   */\n  setUIntArray4(uniformName, array) {\n    this._valueCache[uniformName] = null;\n    this._engine.setUIntArray4(this._uniforms[uniformName], array);\n  }\n  /**\n   * Sets an float array on a uniform variable.\n   * @param uniformName Name of the variable.\n   * @param array array to be set.\n   */\n  setFloatArray(uniformName, array) {\n    this._valueCache[uniformName] = null;\n    this._engine.setFloatArray(this._uniforms[uniformName], array);\n  }\n  /**\n   * Sets an float array 2 on a uniform variable. (Array is specified as single array eg. [1,2,3,4] will result in [[1,2],[3,4]] in the shader)\n   * @param uniformName Name of the variable.\n   * @param array array to be set.\n   */\n  setFloatArray2(uniformName, array) {\n    this._valueCache[uniformName] = null;\n    this._engine.setFloatArray2(this._uniforms[uniformName], array);\n  }\n  /**\n   * Sets an float array 3 on a uniform variable. (Array is specified as single array eg. [1,2,3,4,5,6] will result in [[1,2,3],[4,5,6]] in the shader)\n   * @param uniformName Name of the variable.\n   * @param array array to be set.\n   */\n  setFloatArray3(uniformName, array) {\n    this._valueCache[uniformName] = null;\n    this._engine.setFloatArray3(this._uniforms[uniformName], array);\n  }\n  /**\n   * Sets an float array 4 on a uniform variable. (Array is specified as single array eg. [1,2,3,4,5,6,7,8] will result in [[1,2,3,4],[5,6,7,8]] in the shader)\n   * @param uniformName Name of the variable.\n   * @param array array to be set.\n   */\n  setFloatArray4(uniformName, array) {\n    this._valueCache[uniformName] = null;\n    this._engine.setFloatArray4(this._uniforms[uniformName], array);\n  }\n  /**\n   * Sets an array on a uniform variable.\n   * @param uniformName Name of the variable.\n   * @param array array to be set.\n   */\n  setArray(uniformName, array) {\n    this._valueCache[uniformName] = null;\n    this._engine.setArray(this._uniforms[uniformName], array);\n  }\n  /**\n   * Sets an array 2 on a uniform variable. (Array is specified as single array eg. [1,2,3,4] will result in [[1,2],[3,4]] in the shader)\n   * @param uniformName Name of the variable.\n   * @param array array to be set.\n   */\n  setArray2(uniformName, array) {\n    this._valueCache[uniformName] = null;\n    this._engine.setArray2(this._uniforms[uniformName], array);\n  }\n  /**\n   * Sets an array 3 on a uniform variable. (Array is specified as single array eg. [1,2,3,4,5,6] will result in [[1,2,3],[4,5,6]] in the shader)\n   * @param uniformName Name of the variable.\n   * @param array array to be set.\n   * @returns this effect.\n   */\n  setArray3(uniformName, array) {\n    this._valueCache[uniformName] = null;\n    this._engine.setArray3(this._uniforms[uniformName], array);\n  }\n  /**\n   * Sets an array 4 on a uniform variable. (Array is specified as single array eg. [1,2,3,4,5,6,7,8] will result in [[1,2,3,4],[5,6,7,8]] in the shader)\n   * @param uniformName Name of the variable.\n   * @param array array to be set.\n   */\n  setArray4(uniformName, array) {\n    this._valueCache[uniformName] = null;\n    this._engine.setArray4(this._uniforms[uniformName], array);\n  }\n  /**\n   * Sets matrices on a uniform variable.\n   * @param uniformName Name of the variable.\n   * @param matrices matrices to be set.\n   */\n  setMatrices(uniformName, matrices) {\n    if (!matrices) {\n      return;\n    }\n    this._valueCache[uniformName] = null;\n    this._engine.setMatrices(this._uniforms[uniformName], matrices);\n  }\n  /**\n   * Sets matrix on a uniform variable.\n   * @param uniformName Name of the variable.\n   * @param matrix matrix to be set.\n   */\n  setMatrix(uniformName, matrix) {\n    if (this._cacheMatrix(uniformName, matrix)) {\n      if (!this._engine.setMatrices(this._uniforms[uniformName], matrix.toArray())) {\n        this._valueCache[uniformName] = null;\n      }\n    }\n  }\n  /**\n   * Sets a 3x3 matrix on a uniform variable. (Specified as [1,2,3,4,5,6,7,8,9] will result in [1,2,3][4,5,6][7,8,9] matrix)\n   * @param uniformName Name of the variable.\n   * @param matrix matrix to be set.\n   */\n  setMatrix3x3(uniformName, matrix) {\n    this._valueCache[uniformName] = null;\n    this._engine.setMatrix3x3(this._uniforms[uniformName], matrix);\n  }\n  /**\n   * Sets a 2x2 matrix on a uniform variable. (Specified as [1,2,3,4] will result in [1,2][3,4] matrix)\n   * @param uniformName Name of the variable.\n   * @param matrix matrix to be set.\n   */\n  setMatrix2x2(uniformName, matrix) {\n    this._valueCache[uniformName] = null;\n    this._engine.setMatrix2x2(this._uniforms[uniformName], matrix);\n  }\n  /**\n   * Sets a float on a uniform variable.\n   * @param uniformName Name of the variable.\n   * @param value value to be set.\n   * @returns this effect.\n   */\n  setFloat(uniformName, value) {\n    const cache = this._valueCache[uniformName];\n    if (cache !== undefined && cache === value) {\n      return;\n    }\n    if (this._engine.setFloat(this._uniforms[uniformName], value)) {\n      this._valueCache[uniformName] = value;\n    }\n  }\n  /**\n   * Sets a boolean on a uniform variable.\n   * @param uniformName Name of the variable.\n   * @param bool value to be set.\n   */\n  setBool(uniformName, bool) {\n    const cache = this._valueCache[uniformName];\n    if (cache !== undefined && cache === bool) {\n      return;\n    }\n    if (this._engine.setInt(this._uniforms[uniformName], bool ? 1 : 0)) {\n      this._valueCache[uniformName] = bool ? 1 : 0;\n    }\n  }\n  /**\n   * Sets a Vector2 on a uniform variable.\n   * @param uniformName Name of the variable.\n   * @param vector2 vector2 to be set.\n   */\n  setVector2(uniformName, vector2) {\n    if (this._cacheFloat2(uniformName, vector2.x, vector2.y)) {\n      if (!this._engine.setFloat2(this._uniforms[uniformName], vector2.x, vector2.y)) {\n        this._valueCache[uniformName] = null;\n      }\n    }\n  }\n  /**\n   * Sets a float2 on a uniform variable.\n   * @param uniformName Name of the variable.\n   * @param x First float in float2.\n   * @param y Second float in float2.\n   */\n  setFloat2(uniformName, x, y) {\n    if (this._cacheFloat2(uniformName, x, y)) {\n      if (!this._engine.setFloat2(this._uniforms[uniformName], x, y)) {\n        this._valueCache[uniformName] = null;\n      }\n    }\n  }\n  /**\n   * Sets a Vector3 on a uniform variable.\n   * @param uniformName Name of the variable.\n   * @param vector3 Value to be set.\n   */\n  setVector3(uniformName, vector3) {\n    if (this._cacheFloat3(uniformName, vector3.x, vector3.y, vector3.z)) {\n      if (!this._engine.setFloat3(this._uniforms[uniformName], vector3.x, vector3.y, vector3.z)) {\n        this._valueCache[uniformName] = null;\n      }\n    }\n  }\n  /**\n   * Sets a float3 on a uniform variable.\n   * @param uniformName Name of the variable.\n   * @param x First float in float3.\n   * @param y Second float in float3.\n   * @param z Third float in float3.\n   */\n  setFloat3(uniformName, x, y, z) {\n    if (this._cacheFloat3(uniformName, x, y, z)) {\n      if (!this._engine.setFloat3(this._uniforms[uniformName], x, y, z)) {\n        this._valueCache[uniformName] = null;\n      }\n    }\n  }\n  /**\n   * Sets a Vector4 on a uniform variable.\n   * @param uniformName Name of the variable.\n   * @param vector4 Value to be set.\n   */\n  setVector4(uniformName, vector4) {\n    if (this._cacheFloat4(uniformName, vector4.x, vector4.y, vector4.z, vector4.w)) {\n      if (!this._engine.setFloat4(this._uniforms[uniformName], vector4.x, vector4.y, vector4.z, vector4.w)) {\n        this._valueCache[uniformName] = null;\n      }\n    }\n  }\n  /**\n   * Sets a Quaternion on a uniform variable.\n   * @param uniformName Name of the variable.\n   * @param quaternion Value to be set.\n   */\n  setQuaternion(uniformName, quaternion) {\n    if (this._cacheFloat4(uniformName, quaternion.x, quaternion.y, quaternion.z, quaternion.w)) {\n      if (!this._engine.setFloat4(this._uniforms[uniformName], quaternion.x, quaternion.y, quaternion.z, quaternion.w)) {\n        this._valueCache[uniformName] = null;\n      }\n    }\n  }\n  /**\n   * Sets a float4 on a uniform variable.\n   * @param uniformName Name of the variable.\n   * @param x First float in float4.\n   * @param y Second float in float4.\n   * @param z Third float in float4.\n   * @param w Fourth float in float4.\n   * @returns this effect.\n   */\n  setFloat4(uniformName, x, y, z, w) {\n    if (this._cacheFloat4(uniformName, x, y, z, w)) {\n      if (!this._engine.setFloat4(this._uniforms[uniformName], x, y, z, w)) {\n        this._valueCache[uniformName] = null;\n      }\n    }\n  }\n  /**\n   * Sets a Color3 on a uniform variable.\n   * @param uniformName Name of the variable.\n   * @param color3 Value to be set.\n   */\n  setColor3(uniformName, color3) {\n    if (this._cacheFloat3(uniformName, color3.r, color3.g, color3.b)) {\n      if (!this._engine.setFloat3(this._uniforms[uniformName], color3.r, color3.g, color3.b)) {\n        this._valueCache[uniformName] = null;\n      }\n    }\n  }\n  /**\n   * Sets a Color4 on a uniform variable.\n   * @param uniformName Name of the variable.\n   * @param color3 Value to be set.\n   * @param alpha Alpha value to be set.\n   */\n  setColor4(uniformName, color3, alpha) {\n    if (this._cacheFloat4(uniformName, color3.r, color3.g, color3.b, alpha)) {\n      if (!this._engine.setFloat4(this._uniforms[uniformName], color3.r, color3.g, color3.b, alpha)) {\n        this._valueCache[uniformName] = null;\n      }\n    }\n  }\n  /**\n   * Sets a Color4 on a uniform variable\n   * @param uniformName defines the name of the variable\n   * @param color4 defines the value to be set\n   */\n  setDirectColor4(uniformName, color4) {\n    if (this._cacheFloat4(uniformName, color4.r, color4.g, color4.b, color4.a)) {\n      if (!this._engine.setFloat4(this._uniforms[uniformName], color4.r, color4.g, color4.b, color4.a)) {\n        this._valueCache[uniformName] = null;\n      }\n    }\n  }\n}","map":{"version":3,"names":["NativePipelineContext","isAsync","isParallelCompiled","isReady","compilationError","message","Error","isCompiled","_getVertexShaderCode","_getFragmentShaderCode","_handlesSpectorRebuildCallback","onCompiled","constructor","engine","_valueCache","_engine","_fillEffectInformation","effect","uniformBuffersNames","uniformsNames","uniforms","samplerList","samplers","attributesNames","attributes","supportsUniformBuffers","name","bindUniformBlock","effectAvailableUniforms","getUniforms","forEach","uniform","index","_uniforms","length","sampler","getUniform","splice","push","getAttributes","dispose","_cacheMatrix","uniformName","matrix","cache","flag","updateFlag","undefined","_cacheFloat2","x","y","changed","_cacheFloat3","z","_cacheFloat4","w","setInt","value","setInt2","setInt3","setInt4","setIntArray","array","setIntArray2","setIntArray3","setIntArray4","setUInt","setUInt2","setUInt3","setUInt4","setUIntArray","setUIntArray2","setUIntArray3","setUIntArray4","setFloatArray","setFloatArray2","setFloatArray3","setFloatArray4","setArray","setArray2","setArray3","setArray4","setMatrices","matrices","setMatrix","toArray","setMatrix3x3","setMatrix2x2","setFloat","setBool","bool","setVector2","vector2","setFloat2","setVector3","vector3","setFloat3","setVector4","vector4","setFloat4","setQuaternion","quaternion","setColor3","color3","r","g","b","setColor4","alpha","setDirectColor4","color4","a"],"sources":["../../../../../dev/core/src/Engines/Native/nativePipelineContext.ts"],"sourcesContent":["import type { Nullable } from \"../../types\";\r\nimport type { Effect } from \"../../Materials/effect\";\r\nimport type { IMatrixLike, IVector2Like, IVector3Like, IVector4Like, IColor3Like, IColor4Like, IQuaternionLike } from \"../../Maths/math.like\";\r\nimport type { IPipelineContext } from \"../IPipelineContext\";\r\nimport type { NativeEngine } from \"../nativeEngine\";\r\n\r\nexport class NativePipelineContext implements IPipelineContext {\r\n    public isParallelCompiled: boolean = true;\r\n    public isCompiled: boolean = false;\r\n    public compilationError?: Error;\r\n\r\n    public get isAsync(): boolean {\r\n        return this.isParallelCompiled;\r\n    }\r\n\r\n    public get isReady(): boolean {\r\n        if (this.compilationError) {\r\n            const message = this.compilationError.message;\r\n            throw new Error(\"SHADER ERROR\" + (typeof message === \"string\" ? \"\\n\" + message : \"\"));\r\n        }\r\n        return this.isCompiled;\r\n    }\r\n\r\n    public onCompiled?: () => void;\r\n\r\n    public _getVertexShaderCode(): string | null {\r\n        return null;\r\n    }\r\n\r\n    public _getFragmentShaderCode(): string | null {\r\n        return null;\r\n    }\r\n\r\n    // TODO: what should this do?\r\n    public _handlesSpectorRebuildCallback(onCompiled: (compiledObject: any) => void): void {\r\n        throw new Error(\"Not implemented\");\r\n    }\r\n\r\n    public nativeProgram: any;\r\n\r\n    private _engine: NativeEngine;\r\n    private _valueCache: { [key: string]: any } = {};\r\n    private _uniforms: { [key: string]: Nullable<WebGLUniformLocation> };\r\n\r\n    constructor(engine: NativeEngine) {\r\n        this._engine = engine;\r\n    }\r\n\r\n    public _fillEffectInformation(\r\n        effect: Effect,\r\n        uniformBuffersNames: { [key: string]: number },\r\n        uniformsNames: string[],\r\n        uniforms: { [key: string]: Nullable<WebGLUniformLocation> },\r\n        samplerList: string[],\r\n        samplers: { [key: string]: number },\r\n        attributesNames: string[],\r\n        attributes: number[]\r\n    ) {\r\n        const engine = this._engine;\r\n        if (engine.supportsUniformBuffers) {\r\n            for (const name in uniformBuffersNames) {\r\n                effect.bindUniformBlock(name, uniformBuffersNames[name]);\r\n            }\r\n        }\r\n\r\n        const effectAvailableUniforms = this._engine.getUniforms(this, uniformsNames);\r\n        effectAvailableUniforms.forEach((uniform, index) => {\r\n            uniforms[uniformsNames[index]] = uniform;\r\n        });\r\n        this._uniforms = uniforms;\r\n\r\n        let index: number;\r\n        for (index = 0; index < samplerList.length; index++) {\r\n            const sampler = effect.getUniform(samplerList[index]);\r\n            if (sampler == null) {\r\n                samplerList.splice(index, 1);\r\n                index--;\r\n            }\r\n        }\r\n\r\n        samplerList.forEach((name, index) => {\r\n            samplers[name] = index;\r\n        });\r\n\r\n        attributes.push(...engine.getAttributes(this, attributesNames));\r\n    }\r\n\r\n    /**\r\n     * Release all associated resources.\r\n     **/\r\n    public dispose() {\r\n        this._uniforms = {};\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _cacheMatrix(uniformName: string, matrix: IMatrixLike): boolean {\r\n        const cache = this._valueCache[uniformName];\r\n        const flag = matrix.updateFlag;\r\n        if (cache !== undefined && cache === flag) {\r\n            return false;\r\n        }\r\n\r\n        this._valueCache[uniformName] = flag;\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _cacheFloat2(uniformName: string, x: number, y: number): boolean {\r\n        let cache = this._valueCache[uniformName];\r\n        if (!cache) {\r\n            cache = [x, y];\r\n            this._valueCache[uniformName] = cache;\r\n            return true;\r\n        }\r\n\r\n        let changed = false;\r\n        if (cache[0] !== x) {\r\n            cache[0] = x;\r\n            changed = true;\r\n        }\r\n        if (cache[1] !== y) {\r\n            cache[1] = y;\r\n            changed = true;\r\n        }\r\n\r\n        return changed;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _cacheFloat3(uniformName: string, x: number, y: number, z: number): boolean {\r\n        let cache = this._valueCache[uniformName];\r\n        if (!cache) {\r\n            cache = [x, y, z];\r\n            this._valueCache[uniformName] = cache;\r\n            return true;\r\n        }\r\n\r\n        let changed = false;\r\n        if (cache[0] !== x) {\r\n            cache[0] = x;\r\n            changed = true;\r\n        }\r\n        if (cache[1] !== y) {\r\n            cache[1] = y;\r\n            changed = true;\r\n        }\r\n        if (cache[2] !== z) {\r\n            cache[2] = z;\r\n            changed = true;\r\n        }\r\n\r\n        return changed;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _cacheFloat4(uniformName: string, x: number, y: number, z: number, w: number): boolean {\r\n        let cache = this._valueCache[uniformName];\r\n        if (!cache) {\r\n            cache = [x, y, z, w];\r\n            this._valueCache[uniformName] = cache;\r\n            return true;\r\n        }\r\n\r\n        let changed = false;\r\n        if (cache[0] !== x) {\r\n            cache[0] = x;\r\n            changed = true;\r\n        }\r\n        if (cache[1] !== y) {\r\n            cache[1] = y;\r\n            changed = true;\r\n        }\r\n        if (cache[2] !== z) {\r\n            cache[2] = z;\r\n            changed = true;\r\n        }\r\n        if (cache[3] !== w) {\r\n            cache[3] = w;\r\n            changed = true;\r\n        }\r\n\r\n        return changed;\r\n    }\r\n\r\n    /**\r\n     * Sets an integer value on a uniform variable.\r\n     * @param uniformName Name of the variable.\r\n     * @param value Value to be set.\r\n     */\r\n    public setInt(uniformName: string, value: number): void {\r\n        const cache = this._valueCache[uniformName];\r\n        if (cache !== undefined && cache === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._engine.setInt(this._uniforms[uniformName]!, value)) {\r\n            this._valueCache[uniformName] = value;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sets a int2 on a uniform variable.\r\n     * @param uniformName Name of the variable.\r\n     * @param x First int in int2.\r\n     * @param y Second int in int2.\r\n     */\r\n    public setInt2(uniformName: string, x: number, y: number): void {\r\n        if (this._cacheFloat2(uniformName, x, y)) {\r\n            if (!this._engine.setInt2(this._uniforms[uniformName], x, y)) {\r\n                this._valueCache[uniformName] = null;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sets a int3 on a uniform variable.\r\n     * @param uniformName Name of the variable.\r\n     * @param x First int in int3.\r\n     * @param y Second int in int3.\r\n     * @param z Third int in int3.\r\n     */\r\n    public setInt3(uniformName: string, x: number, y: number, z: number): void {\r\n        if (this._cacheFloat3(uniformName, x, y, z)) {\r\n            if (!this._engine.setInt3(this._uniforms[uniformName], x, y, z)) {\r\n                this._valueCache[uniformName] = null;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sets a int4 on a uniform variable.\r\n     * @param uniformName Name of the variable.\r\n     * @param x First int in int4.\r\n     * @param y Second int in int4.\r\n     * @param z Third int in int4.\r\n     * @param w Fourth int in int4.\r\n     */\r\n    public setInt4(uniformName: string, x: number, y: number, z: number, w: number): void {\r\n        if (this._cacheFloat4(uniformName, x, y, z, w)) {\r\n            if (!this._engine.setInt4(this._uniforms[uniformName], x, y, z, w)) {\r\n                this._valueCache[uniformName] = null;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sets an int array on a uniform variable.\r\n     * @param uniformName Name of the variable.\r\n     * @param array array to be set.\r\n     */\r\n    public setIntArray(uniformName: string, array: Int32Array): void {\r\n        this._valueCache[uniformName] = null;\r\n        this._engine.setIntArray(this._uniforms[uniformName]!, array);\r\n    }\r\n\r\n    /**\r\n     * Sets an int array 2 on a uniform variable. (Array is specified as single array eg. [1,2,3,4] will result in [[1,2],[3,4]] in the shader)\r\n     * @param uniformName Name of the variable.\r\n     * @param array array to be set.\r\n     */\r\n    public setIntArray2(uniformName: string, array: Int32Array): void {\r\n        this._valueCache[uniformName] = null;\r\n        this._engine.setIntArray2(this._uniforms[uniformName]!, array);\r\n    }\r\n\r\n    /**\r\n     * Sets an int array 3 on a uniform variable. (Array is specified as single array eg. [1,2,3,4,5,6] will result in [[1,2,3],[4,5,6]] in the shader)\r\n     * @param uniformName Name of the variable.\r\n     * @param array array to be set.\r\n     */\r\n    public setIntArray3(uniformName: string, array: Int32Array): void {\r\n        this._valueCache[uniformName] = null;\r\n        this._engine.setIntArray3(this._uniforms[uniformName]!, array);\r\n    }\r\n\r\n    /**\r\n     * Sets an int array 4 on a uniform variable. (Array is specified as single array eg. [1,2,3,4,5,6,7,8] will result in [[1,2,3,4],[5,6,7,8]] in the shader)\r\n     * @param uniformName Name of the variable.\r\n     * @param array array to be set.\r\n     */\r\n    public setIntArray4(uniformName: string, array: Int32Array): void {\r\n        this._valueCache[uniformName] = null;\r\n        this._engine.setIntArray4(this._uniforms[uniformName]!, array);\r\n    }\r\n\r\n    /**\r\n     * Sets an unsigned integer value on a uniform variable.\r\n     * @param uniformName Name of the variable.\r\n     * @param value Value to be set.\r\n     */\r\n    public setUInt(uniformName: string, value: number): void {\r\n        const cache = this._valueCache[uniformName];\r\n        if (cache !== undefined && cache === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._engine.setUInt(this._uniforms[uniformName]!, value)) {\r\n            this._valueCache[uniformName] = value;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sets a unsigned int2 on a uniform variable.\r\n     * @param uniformName Name of the variable.\r\n     * @param x First unsigned int in uint2.\r\n     * @param y Second unsigned int in uint2.\r\n     */\r\n    public setUInt2(uniformName: string, x: number, y: number): void {\r\n        if (this._cacheFloat2(uniformName, x, y)) {\r\n            if (!this._engine.setUInt2(this._uniforms[uniformName], x, y)) {\r\n                this._valueCache[uniformName] = null;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sets a unsigned int3 on a uniform variable.\r\n     * @param uniformName Name of the variable.\r\n     * @param x First unsigned int in uint3.\r\n     * @param y Second unsigned int in uint3.\r\n     * @param z Third unsigned int in uint3.\r\n     */\r\n    public setUInt3(uniformName: string, x: number, y: number, z: number): void {\r\n        if (this._cacheFloat3(uniformName, x, y, z)) {\r\n            if (!this._engine.setUInt3(this._uniforms[uniformName], x, y, z)) {\r\n                this._valueCache[uniformName] = null;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sets a unsigned int4 on a uniform variable.\r\n     * @param uniformName Name of the variable.\r\n     * @param x First unsigned int in uint4.\r\n     * @param y Second unsigned int in uint4.\r\n     * @param z Third unsigned int in uint4.\r\n     * @param w Fourth unsigned int in uint4.\r\n     */\r\n    public setUInt4(uniformName: string, x: number, y: number, z: number, w: number): void {\r\n        if (this._cacheFloat4(uniformName, x, y, z, w)) {\r\n            if (!this._engine.setUInt4(this._uniforms[uniformName], x, y, z, w)) {\r\n                this._valueCache[uniformName] = null;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sets an unsigned int array on a uniform variable.\r\n     * @param uniformName Name of the variable.\r\n     * @param array array to be set.\r\n     */\r\n    public setUIntArray(uniformName: string, array: Uint32Array): void {\r\n        this._valueCache[uniformName] = null;\r\n        this._engine.setUIntArray(this._uniforms[uniformName]!, array);\r\n    }\r\n\r\n    /**\r\n     * Sets an unsigned int array 2 on a uniform variable. (Array is specified as single array eg. [1,2,3,4] will result in [[1,2],[3,4]] in the shader)\r\n     * @param uniformName Name of the variable.\r\n     * @param array array to be set.\r\n     */\r\n    public setUIntArray2(uniformName: string, array: Uint32Array): void {\r\n        this._valueCache[uniformName] = null;\r\n        this._engine.setUIntArray2(this._uniforms[uniformName]!, array);\r\n    }\r\n\r\n    /**\r\n     * Sets an unsigned int array 3 on a uniform variable. (Array is specified as single array eg. [1,2,3,4,5,6] will result in [[1,2,3],[4,5,6]] in the shader)\r\n     * @param uniformName Name of the variable.\r\n     * @param array array to be set.\r\n     */\r\n    public setUIntArray3(uniformName: string, array: Uint32Array): void {\r\n        this._valueCache[uniformName] = null;\r\n        this._engine.setUIntArray3(this._uniforms[uniformName]!, array);\r\n    }\r\n\r\n    /**\r\n     * Sets an unsigned int array 4 on a uniform variable. (Array is specified as single array eg. [1,2,3,4,5,6,7,8] will result in [[1,2,3,4],[5,6,7,8]] in the shader)\r\n     * @param uniformName Name of the variable.\r\n     * @param array array to be set.\r\n     */\r\n    public setUIntArray4(uniformName: string, array: Uint32Array): void {\r\n        this._valueCache[uniformName] = null;\r\n        this._engine.setUIntArray4(this._uniforms[uniformName]!, array);\r\n    }\r\n\r\n    /**\r\n     * Sets an float array on a uniform variable.\r\n     * @param uniformName Name of the variable.\r\n     * @param array array to be set.\r\n     */\r\n    public setFloatArray(uniformName: string, array: Float32Array): void {\r\n        this._valueCache[uniformName] = null;\r\n        this._engine.setFloatArray(this._uniforms[uniformName]!, array);\r\n    }\r\n\r\n    /**\r\n     * Sets an float array 2 on a uniform variable. (Array is specified as single array eg. [1,2,3,4] will result in [[1,2],[3,4]] in the shader)\r\n     * @param uniformName Name of the variable.\r\n     * @param array array to be set.\r\n     */\r\n    public setFloatArray2(uniformName: string, array: Float32Array): void {\r\n        this._valueCache[uniformName] = null;\r\n        this._engine.setFloatArray2(this._uniforms[uniformName]!, array);\r\n    }\r\n\r\n    /**\r\n     * Sets an float array 3 on a uniform variable. (Array is specified as single array eg. [1,2,3,4,5,6] will result in [[1,2,3],[4,5,6]] in the shader)\r\n     * @param uniformName Name of the variable.\r\n     * @param array array to be set.\r\n     */\r\n    public setFloatArray3(uniformName: string, array: Float32Array): void {\r\n        this._valueCache[uniformName] = null;\r\n        this._engine.setFloatArray3(this._uniforms[uniformName]!, array);\r\n    }\r\n\r\n    /**\r\n     * Sets an float array 4 on a uniform variable. (Array is specified as single array eg. [1,2,3,4,5,6,7,8] will result in [[1,2,3,4],[5,6,7,8]] in the shader)\r\n     * @param uniformName Name of the variable.\r\n     * @param array array to be set.\r\n     */\r\n    public setFloatArray4(uniformName: string, array: Float32Array): void {\r\n        this._valueCache[uniformName] = null;\r\n        this._engine.setFloatArray4(this._uniforms[uniformName]!, array);\r\n    }\r\n\r\n    /**\r\n     * Sets an array on a uniform variable.\r\n     * @param uniformName Name of the variable.\r\n     * @param array array to be set.\r\n     */\r\n    public setArray(uniformName: string, array: number[]): void {\r\n        this._valueCache[uniformName] = null;\r\n        this._engine.setArray(this._uniforms[uniformName]!, array);\r\n    }\r\n\r\n    /**\r\n     * Sets an array 2 on a uniform variable. (Array is specified as single array eg. [1,2,3,4] will result in [[1,2],[3,4]] in the shader)\r\n     * @param uniformName Name of the variable.\r\n     * @param array array to be set.\r\n     */\r\n    public setArray2(uniformName: string, array: number[]): void {\r\n        this._valueCache[uniformName] = null;\r\n        this._engine.setArray2(this._uniforms[uniformName]!, array);\r\n    }\r\n\r\n    /**\r\n     * Sets an array 3 on a uniform variable. (Array is specified as single array eg. [1,2,3,4,5,6] will result in [[1,2,3],[4,5,6]] in the shader)\r\n     * @param uniformName Name of the variable.\r\n     * @param array array to be set.\r\n     * @returns this effect.\r\n     */\r\n    public setArray3(uniformName: string, array: number[]): void {\r\n        this._valueCache[uniformName] = null;\r\n        this._engine.setArray3(this._uniforms[uniformName]!, array);\r\n    }\r\n\r\n    /**\r\n     * Sets an array 4 on a uniform variable. (Array is specified as single array eg. [1,2,3,4,5,6,7,8] will result in [[1,2,3,4],[5,6,7,8]] in the shader)\r\n     * @param uniformName Name of the variable.\r\n     * @param array array to be set.\r\n     */\r\n    public setArray4(uniformName: string, array: number[]): void {\r\n        this._valueCache[uniformName] = null;\r\n        this._engine.setArray4(this._uniforms[uniformName]!, array);\r\n    }\r\n\r\n    /**\r\n     * Sets matrices on a uniform variable.\r\n     * @param uniformName Name of the variable.\r\n     * @param matrices matrices to be set.\r\n     */\r\n    public setMatrices(uniformName: string, matrices: Float32Array): void {\r\n        if (!matrices) {\r\n            return;\r\n        }\r\n\r\n        this._valueCache[uniformName] = null;\r\n        this._engine.setMatrices(this._uniforms[uniformName]!, matrices);\r\n    }\r\n\r\n    /**\r\n     * Sets matrix on a uniform variable.\r\n     * @param uniformName Name of the variable.\r\n     * @param matrix matrix to be set.\r\n     */\r\n    public setMatrix(uniformName: string, matrix: IMatrixLike): void {\r\n        if (this._cacheMatrix(uniformName, matrix)) {\r\n            if (!this._engine.setMatrices(this._uniforms[uniformName]!, matrix.toArray() as Float32Array)) {\r\n                this._valueCache[uniformName] = null;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sets a 3x3 matrix on a uniform variable. (Specified as [1,2,3,4,5,6,7,8,9] will result in [1,2,3][4,5,6][7,8,9] matrix)\r\n     * @param uniformName Name of the variable.\r\n     * @param matrix matrix to be set.\r\n     */\r\n    public setMatrix3x3(uniformName: string, matrix: Float32Array): void {\r\n        this._valueCache[uniformName] = null;\r\n        this._engine.setMatrix3x3(this._uniforms[uniformName]!, matrix);\r\n    }\r\n\r\n    /**\r\n     * Sets a 2x2 matrix on a uniform variable. (Specified as [1,2,3,4] will result in [1,2][3,4] matrix)\r\n     * @param uniformName Name of the variable.\r\n     * @param matrix matrix to be set.\r\n     */\r\n    public setMatrix2x2(uniformName: string, matrix: Float32Array): void {\r\n        this._valueCache[uniformName] = null;\r\n        this._engine.setMatrix2x2(this._uniforms[uniformName]!, matrix);\r\n    }\r\n\r\n    /**\r\n     * Sets a float on a uniform variable.\r\n     * @param uniformName Name of the variable.\r\n     * @param value value to be set.\r\n     * @returns this effect.\r\n     */\r\n    public setFloat(uniformName: string, value: number): void {\r\n        const cache = this._valueCache[uniformName];\r\n        if (cache !== undefined && cache === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._engine.setFloat(this._uniforms[uniformName]!, value)) {\r\n            this._valueCache[uniformName] = value;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sets a boolean on a uniform variable.\r\n     * @param uniformName Name of the variable.\r\n     * @param bool value to be set.\r\n     */\r\n    public setBool(uniformName: string, bool: boolean): void {\r\n        const cache = this._valueCache[uniformName];\r\n        if (cache !== undefined && cache === bool) {\r\n            return;\r\n        }\r\n\r\n        if (this._engine.setInt(this._uniforms[uniformName]!, bool ? 1 : 0)) {\r\n            this._valueCache[uniformName] = bool ? 1 : 0;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sets a Vector2 on a uniform variable.\r\n     * @param uniformName Name of the variable.\r\n     * @param vector2 vector2 to be set.\r\n     */\r\n    public setVector2(uniformName: string, vector2: IVector2Like): void {\r\n        if (this._cacheFloat2(uniformName, vector2.x, vector2.y)) {\r\n            if (!this._engine.setFloat2(this._uniforms[uniformName]!, vector2.x, vector2.y)) {\r\n                this._valueCache[uniformName] = null;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sets a float2 on a uniform variable.\r\n     * @param uniformName Name of the variable.\r\n     * @param x First float in float2.\r\n     * @param y Second float in float2.\r\n     */\r\n    public setFloat2(uniformName: string, x: number, y: number): void {\r\n        if (this._cacheFloat2(uniformName, x, y)) {\r\n            if (!this._engine.setFloat2(this._uniforms[uniformName]!, x, y)) {\r\n                this._valueCache[uniformName] = null;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sets a Vector3 on a uniform variable.\r\n     * @param uniformName Name of the variable.\r\n     * @param vector3 Value to be set.\r\n     */\r\n    public setVector3(uniformName: string, vector3: IVector3Like): void {\r\n        if (this._cacheFloat3(uniformName, vector3.x, vector3.y, vector3.z)) {\r\n            if (!this._engine.setFloat3(this._uniforms[uniformName]!, vector3.x, vector3.y, vector3.z)) {\r\n                this._valueCache[uniformName] = null;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sets a float3 on a uniform variable.\r\n     * @param uniformName Name of the variable.\r\n     * @param x First float in float3.\r\n     * @param y Second float in float3.\r\n     * @param z Third float in float3.\r\n     */\r\n    public setFloat3(uniformName: string, x: number, y: number, z: number): void {\r\n        if (this._cacheFloat3(uniformName, x, y, z)) {\r\n            if (!this._engine.setFloat3(this._uniforms[uniformName]!, x, y, z)) {\r\n                this._valueCache[uniformName] = null;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sets a Vector4 on a uniform variable.\r\n     * @param uniformName Name of the variable.\r\n     * @param vector4 Value to be set.\r\n     */\r\n    public setVector4(uniformName: string, vector4: IVector4Like): void {\r\n        if (this._cacheFloat4(uniformName, vector4.x, vector4.y, vector4.z, vector4.w)) {\r\n            if (!this._engine.setFloat4(this._uniforms[uniformName]!, vector4.x, vector4.y, vector4.z, vector4.w)) {\r\n                this._valueCache[uniformName] = null;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sets a Quaternion on a uniform variable.\r\n     * @param uniformName Name of the variable.\r\n     * @param quaternion Value to be set.\r\n     */\r\n    public setQuaternion(uniformName: string, quaternion: IQuaternionLike): void {\r\n        if (this._cacheFloat4(uniformName, quaternion.x, quaternion.y, quaternion.z, quaternion.w)) {\r\n            if (!this._engine.setFloat4(this._uniforms[uniformName]!, quaternion.x, quaternion.y, quaternion.z, quaternion.w)) {\r\n                this._valueCache[uniformName] = null;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sets a float4 on a uniform variable.\r\n     * @param uniformName Name of the variable.\r\n     * @param x First float in float4.\r\n     * @param y Second float in float4.\r\n     * @param z Third float in float4.\r\n     * @param w Fourth float in float4.\r\n     * @returns this effect.\r\n     */\r\n    public setFloat4(uniformName: string, x: number, y: number, z: number, w: number): void {\r\n        if (this._cacheFloat4(uniformName, x, y, z, w)) {\r\n            if (!this._engine.setFloat4(this._uniforms[uniformName]!, x, y, z, w)) {\r\n                this._valueCache[uniformName] = null;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sets a Color3 on a uniform variable.\r\n     * @param uniformName Name of the variable.\r\n     * @param color3 Value to be set.\r\n     */\r\n    public setColor3(uniformName: string, color3: IColor3Like): void {\r\n        if (this._cacheFloat3(uniformName, color3.r, color3.g, color3.b)) {\r\n            if (!this._engine.setFloat3(this._uniforms[uniformName]!, color3.r, color3.g, color3.b)) {\r\n                this._valueCache[uniformName] = null;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sets a Color4 on a uniform variable.\r\n     * @param uniformName Name of the variable.\r\n     * @param color3 Value to be set.\r\n     * @param alpha Alpha value to be set.\r\n     */\r\n    public setColor4(uniformName: string, color3: IColor3Like, alpha: number): void {\r\n        if (this._cacheFloat4(uniformName, color3.r, color3.g, color3.b, alpha)) {\r\n            if (!this._engine.setFloat4(this._uniforms[uniformName]!, color3.r, color3.g, color3.b, alpha)) {\r\n                this._valueCache[uniformName] = null;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sets a Color4 on a uniform variable\r\n     * @param uniformName defines the name of the variable\r\n     * @param color4 defines the value to be set\r\n     */\r\n    public setDirectColor4(uniformName: string, color4: IColor4Like): void {\r\n        if (this._cacheFloat4(uniformName, color4.r, color4.g, color4.b, color4.a)) {\r\n            if (!this._engine.setFloat4(this._uniforms[uniformName]!, color4.r, color4.g, color4.b, color4.a)) {\r\n                this._valueCache[uniformName] = null;\r\n            }\r\n        }\r\n    }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}