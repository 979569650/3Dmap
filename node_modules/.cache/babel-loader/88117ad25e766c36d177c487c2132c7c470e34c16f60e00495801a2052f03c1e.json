{"ast":null,"code":"import { __decorate } from \"../../../../tslib.es6.js\";\nimport { NodeGeometryBlock } from \"../../nodeGeometryBlock.js\";\nimport { RegisterClass } from \"../../../../Misc/typeStore.js\";\nimport { NodeGeometryBlockConnectionPointTypes } from \"../../Enums/nodeGeometryConnectionPointTypes.js\";\nimport { PropertyTypeForEdition, editableInPropertyPage } from \"../../../../Decorators/nodeDecorator.js\";\n/**\n * Block used to set normals for a geometry\n */\nexport class SetNormalsBlock extends NodeGeometryBlock {\n  /**\n   * Create a new SetNormalsBlock\n   * @param name defines the block name\n   */\n  constructor(name) {\n    super(name);\n    /**\n     * Gets or sets a boolean indicating that this block can evaluate context\n     * Build performance is improved when this value is set to false as the system will cache values instead of reevaluating everything per context change\n     */\n    this.evaluateContext = true;\n    this.registerInput(\"geometry\", NodeGeometryBlockConnectionPointTypes.Geometry);\n    this.registerInput(\"normals\", NodeGeometryBlockConnectionPointTypes.Vector3);\n    this.registerOutput(\"output\", NodeGeometryBlockConnectionPointTypes.Geometry);\n  }\n  /**\n   * Gets the current index in the current flow\n   * @returns the current index\n   */\n  getExecutionIndex() {\n    return this._currentIndex;\n  }\n  /**\n   * Gets the current loop index in the current flow\n   * @returns the current loop index\n   */\n  getExecutionLoopIndex() {\n    return this._currentIndex;\n  }\n  /**\n   * Gets the current face index in the current flow\n   * @returns the current face index\n   */\n  getExecutionFaceIndex() {\n    return 0;\n  }\n  /**\n   * Gets the current class name\n   * @returns the class name\n   */\n  getClassName() {\n    return \"SetNormalsBlock\";\n  }\n  /**\n   * Gets the geometry input component\n   */\n  get geometry() {\n    return this._inputs[0];\n  }\n  /**\n   * Gets the normals input component\n   */\n  get normals() {\n    return this._inputs[1];\n  }\n  /**\n   * Gets the geometry output component\n   */\n  get output() {\n    return this._outputs[0];\n  }\n  _buildBlock(state) {\n    const func = state => {\n      state.pushExecutionContext(this);\n      this._vertexData = this.geometry.getConnectedValue(state);\n      state.pushGeometryContext(this._vertexData);\n      if (!this._vertexData || !this._vertexData.positions) {\n        state.restoreGeometryContext();\n        state.restoreExecutionContext();\n        this.output._storedValue = null;\n        return;\n      }\n      if (!this.normals.isConnected) {\n        state.restoreGeometryContext();\n        state.restoreExecutionContext();\n        this.output._storedValue = this._vertexData;\n        return;\n      }\n      if (!this._vertexData.normals) {\n        this._vertexData.normals = [];\n      }\n      // Processing\n      const vertexCount = this._vertexData.positions.length / 3;\n      for (this._currentIndex = 0; this._currentIndex < vertexCount; this._currentIndex++) {\n        const tempVector3 = this.normals.getConnectedValue(state);\n        if (tempVector3) {\n          tempVector3.toArray(this._vertexData.normals, this._currentIndex * 3);\n        }\n      }\n      // Storage\n      state.restoreGeometryContext();\n      state.restoreExecutionContext();\n      return this._vertexData;\n    };\n    if (this.evaluateContext) {\n      this.output._storedFunction = func;\n    } else {\n      this.output._storedFunction = null;\n      this.output._storedValue = func(state);\n    }\n  }\n  _dumpPropertiesCode() {\n    const codeString = super._dumpPropertiesCode() + `${this._codeVariableName}.evaluateContext = ${this.evaluateContext ? \"true\" : \"false\"};\\n`;\n    return codeString;\n  }\n  /**\n   * Serializes this block in a JSON representation\n   * @returns the serialized block object\n   */\n  serialize() {\n    const serializationObject = super.serialize();\n    serializationObject.evaluateContext = this.evaluateContext;\n    return serializationObject;\n  }\n  _deserialize(serializationObject) {\n    super._deserialize(serializationObject);\n    if (serializationObject.evaluateContext !== undefined) {\n      this.evaluateContext = serializationObject.evaluateContext;\n    }\n  }\n}\n__decorate([editableInPropertyPage(\"Evaluate context\", PropertyTypeForEdition.Boolean, \"ADVANCED\", {\n  notifiers: {\n    rebuild: true\n  }\n})], SetNormalsBlock.prototype, \"evaluateContext\", void 0);\nRegisterClass(\"BABYLON.SetNormalsBlock\", SetNormalsBlock);","map":{"version":3,"names":["NodeGeometryBlock","RegisterClass","NodeGeometryBlockConnectionPointTypes","PropertyTypeForEdition","editableInPropertyPage","SetNormalsBlock","constructor","name","evaluateContext","registerInput","Geometry","Vector3","registerOutput","getExecutionIndex","_currentIndex","getExecutionLoopIndex","getExecutionFaceIndex","getClassName","geometry","_inputs","normals","output","_outputs","_buildBlock","state","func","pushExecutionContext","_vertexData","getConnectedValue","pushGeometryContext","positions","restoreGeometryContext","restoreExecutionContext","_storedValue","isConnected","vertexCount","length","tempVector3","toArray","_storedFunction","_dumpPropertiesCode","codeString","_codeVariableName","serialize","serializationObject","_deserialize","undefined","__decorate","Boolean","notifiers","rebuild"],"sources":["../../../../../../../dev/core/src/Meshes/Node/Blocks/Set/setNormalsBlock.ts"],"sourcesContent":["import { NodeGeometryBlock } from \"../../nodeGeometryBlock\";\r\nimport type { NodeGeometryConnectionPoint } from \"../../nodeGeometryBlockConnectionPoint\";\r\nimport { RegisterClass } from \"../../../../Misc/typeStore\";\r\nimport { NodeGeometryBlockConnectionPointTypes } from \"../../Enums/nodeGeometryConnectionPointTypes\";\r\nimport type { NodeGeometryBuildState } from \"../../nodeGeometryBuildState\";\r\nimport type { INodeGeometryExecutionContext } from \"../../Interfaces/nodeGeometryExecutionContext\";\r\nimport type { VertexData } from \"../../../mesh.vertexData\";\r\nimport type { Vector3 } from \"../../../../Maths/math.vector\";\r\nimport { PropertyTypeForEdition, editableInPropertyPage } from \"core/Decorators/nodeDecorator\";\r\n\r\n/**\r\n * Block used to set normals for a geometry\r\n */\r\nexport class SetNormalsBlock extends NodeGeometryBlock implements INodeGeometryExecutionContext {\r\n    private _vertexData: VertexData;\r\n    private _currentIndex: number;\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating that this block can evaluate context\r\n     * Build performance is improved when this value is set to false as the system will cache values instead of reevaluating everything per context change\r\n     */\r\n    @editableInPropertyPage(\"Evaluate context\", PropertyTypeForEdition.Boolean, \"ADVANCED\", { notifiers: { rebuild: true } })\r\n    public evaluateContext = true;\r\n\r\n    /**\r\n     * Create a new SetNormalsBlock\r\n     * @param name defines the block name\r\n     */\r\n    public constructor(name: string) {\r\n        super(name);\r\n\r\n        this.registerInput(\"geometry\", NodeGeometryBlockConnectionPointTypes.Geometry);\r\n        this.registerInput(\"normals\", NodeGeometryBlockConnectionPointTypes.Vector3);\r\n\r\n        this.registerOutput(\"output\", NodeGeometryBlockConnectionPointTypes.Geometry);\r\n    }\r\n\r\n    /**\r\n     * Gets the current index in the current flow\r\n     * @returns the current index\r\n     */\r\n    public getExecutionIndex(): number {\r\n        return this._currentIndex;\r\n    }\r\n\r\n    /**\r\n     * Gets the current loop index in the current flow\r\n     * @returns the current loop index\r\n     */\r\n    public getExecutionLoopIndex(): number {\r\n        return this._currentIndex;\r\n    }\r\n\r\n    /**\r\n     * Gets the current face index in the current flow\r\n     * @returns the current face index\r\n     */\r\n    public getExecutionFaceIndex(): number {\r\n        return 0;\r\n    }\r\n\r\n    /**\r\n     * Gets the current class name\r\n     * @returns the class name\r\n     */\r\n    public getClassName() {\r\n        return \"SetNormalsBlock\";\r\n    }\r\n\r\n    /**\r\n     * Gets the geometry input component\r\n     */\r\n    public get geometry(): NodeGeometryConnectionPoint {\r\n        return this._inputs[0];\r\n    }\r\n\r\n    /**\r\n     * Gets the normals input component\r\n     */\r\n    public get normals(): NodeGeometryConnectionPoint {\r\n        return this._inputs[1];\r\n    }\r\n\r\n    /**\r\n     * Gets the geometry output component\r\n     */\r\n    public get output(): NodeGeometryConnectionPoint {\r\n        return this._outputs[0];\r\n    }\r\n\r\n    protected _buildBlock(state: NodeGeometryBuildState) {\r\n        const func = (state: NodeGeometryBuildState) => {\r\n            state.pushExecutionContext(this);\r\n\r\n            this._vertexData = this.geometry.getConnectedValue(state);\r\n            state.pushGeometryContext(this._vertexData);\r\n\r\n            if (!this._vertexData || !this._vertexData.positions) {\r\n                state.restoreGeometryContext();\r\n                state.restoreExecutionContext();\r\n                this.output._storedValue = null;\r\n                return;\r\n            }\r\n\r\n            if (!this.normals.isConnected) {\r\n                state.restoreGeometryContext();\r\n                state.restoreExecutionContext();\r\n                this.output._storedValue = this._vertexData;\r\n                return;\r\n            }\r\n\r\n            if (!this._vertexData.normals) {\r\n                this._vertexData.normals = [];\r\n            }\r\n\r\n            // Processing\r\n            const vertexCount = this._vertexData.positions.length / 3;\r\n            for (this._currentIndex = 0; this._currentIndex < vertexCount; this._currentIndex++) {\r\n                const tempVector3 = this.normals.getConnectedValue(state) as Vector3;\r\n                if (tempVector3) {\r\n                    tempVector3.toArray(this._vertexData.normals, this._currentIndex * 3);\r\n                }\r\n            }\r\n\r\n            // Storage\r\n            state.restoreGeometryContext();\r\n            state.restoreExecutionContext();\r\n            return this._vertexData;\r\n        };\r\n\r\n        if (this.evaluateContext) {\r\n            this.output._storedFunction = func;\r\n        } else {\r\n            this.output._storedFunction = null;\r\n            this.output._storedValue = func(state);\r\n        }\r\n    }\r\n\r\n    protected _dumpPropertiesCode() {\r\n        const codeString = super._dumpPropertiesCode() + `${this._codeVariableName}.evaluateContext = ${this.evaluateContext ? \"true\" : \"false\"};\\n`;\r\n        return codeString;\r\n    }\r\n\r\n    /**\r\n     * Serializes this block in a JSON representation\r\n     * @returns the serialized block object\r\n     */\r\n    public serialize(): any {\r\n        const serializationObject = super.serialize();\r\n\r\n        serializationObject.evaluateContext = this.evaluateContext;\r\n\r\n        return serializationObject;\r\n    }\r\n\r\n    public _deserialize(serializationObject: any) {\r\n        super._deserialize(serializationObject);\r\n\r\n        if (serializationObject.evaluateContext !== undefined) {\r\n            this.evaluateContext = serializationObject.evaluateContext;\r\n        }\r\n    }\r\n}\r\n\r\nRegisterClass(\"BABYLON.SetNormalsBlock\", SetNormalsBlock);\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}