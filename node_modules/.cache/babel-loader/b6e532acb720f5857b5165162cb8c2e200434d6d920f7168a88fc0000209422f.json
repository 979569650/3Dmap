{"ast":null,"code":"import { Vector3 } from \"@babylonjs/core/Maths/math.vector.js\";\nimport { StandardMaterial } from \"@babylonjs/core/Materials/standardMaterial.js\";\nimport { TransformNode } from \"@babylonjs/core/Meshes/transformNode.js\";\nimport { Mesh } from \"@babylonjs/core/Meshes/mesh.js\";\nimport { CreatePlane } from \"@babylonjs/core/Meshes/Builders/planeBuilder.js\";\nimport { CreateBox } from \"@babylonjs/core/Meshes/Builders/boxBuilder.js\";\nimport { FadeInOutBehavior } from \"@babylonjs/core/Behaviors/Meshes/fadeInOutBehavior.js\";\nimport { FluentMaterial } from \"../materials/fluent/fluentMaterial.js\";\nimport { FluentButtonMaterial } from \"../materials/fluentButton/fluentButtonMaterial.js\";\nimport { StackPanel } from \"../../2D/controls/stackPanel.js\";\nimport { Image } from \"../../2D/controls/image.js\";\nimport { TextBlock } from \"../../2D/controls/textBlock.js\";\nimport { AdvancedDynamicTexture } from \"../../2D/advancedDynamicTexture.js\";\nimport { Color3 } from \"@babylonjs/core/Maths/math.color.js\";\nimport { TouchButton3D } from \"./touchButton3D.js\";\nimport { SceneLoader } from \"@babylonjs/core/Loading/sceneLoader.js\";\nimport { IsDocumentAvailable } from \"@babylonjs/core/Misc/domManagement.js\";\nimport { Scalar } from \"@babylonjs/core/Maths/math.scalar.js\";\n/**\n * Class used to create a holographic button in 3D\n * @since 5.0.0\n */\nexport class TouchHolographicButton extends TouchButton3D {\n  _disposeTooltip() {\n    this._tooltipFade = null;\n    if (this._tooltipTextBlock) {\n      this._tooltipTextBlock.dispose();\n    }\n    if (this._tooltipTexture) {\n      this._tooltipTexture.dispose();\n    }\n    if (this._tooltipMesh) {\n      this._tooltipMesh.dispose();\n    }\n    this.onPointerEnterObservable.remove(this._tooltipHoverObserver);\n    this.onPointerOutObservable.remove(this._tooltipOutObserver);\n  }\n  /**\n   * Rendering ground id of all the mesh in the button\n   */\n  set renderingGroupId(id) {\n    this._backPlate.renderingGroupId = id;\n    this._textPlate.renderingGroupId = id;\n    this._frontPlate.renderingGroupId = id;\n    if (this._tooltipMesh) {\n      this._tooltipMesh.renderingGroupId = id;\n    }\n  }\n  get renderingGroupId() {\n    return this._backPlate.renderingGroupId;\n  }\n  /**\n   * Gets the mesh used to render this control\n   */\n  get mesh() {\n    return this._backPlate;\n  }\n  /**\n   * Text to be displayed on the tooltip shown when hovering on the button. When set to null tooltip is disabled. (Default: null)\n   */\n  set tooltipText(text) {\n    if (!text) {\n      this._disposeTooltip();\n      return;\n    }\n    if (!this._tooltipFade) {\n      const rightHandedScene = this._backPlate._scene.useRightHandedSystem;\n      // Create tooltip with mesh and text\n      this._tooltipMesh = CreatePlane(\"\", {\n        size: 1\n      }, this._backPlate._scene);\n      const tooltipBackground = CreatePlane(\"\", {\n        size: 1,\n        sideOrientation: Mesh.DOUBLESIDE\n      }, this._backPlate._scene);\n      const mat = new StandardMaterial(\"\", this._backPlate._scene);\n      mat.diffuseColor = Color3.FromHexString(\"#212121\");\n      tooltipBackground.material = mat;\n      tooltipBackground.isPickable = false;\n      this._tooltipMesh.addChild(tooltipBackground);\n      tooltipBackground.position = Vector3.Forward(rightHandedScene).scale(0.05);\n      this._tooltipMesh.scaling.y = 1 / 3;\n      this._tooltipMesh.position = Vector3.Up().scale(0.7).add(Vector3.Forward(rightHandedScene).scale(-0.15));\n      this._tooltipMesh.isPickable = false;\n      this._tooltipMesh.parent = this._backPlate;\n      // Create text texture for the tooltip\n      this._tooltipTexture = AdvancedDynamicTexture.CreateForMesh(this._tooltipMesh);\n      this._tooltipTextBlock = new TextBlock();\n      this._tooltipTextBlock.scaleY = 3;\n      this._tooltipTextBlock.color = \"white\";\n      this._tooltipTextBlock.fontSize = 130;\n      this._tooltipTexture.addControl(this._tooltipTextBlock);\n      // Add hover action to tooltip\n      this._tooltipFade = new FadeInOutBehavior();\n      this._tooltipFade.delay = 500;\n      this._tooltipMesh.addBehavior(this._tooltipFade);\n      this._tooltipHoverObserver = this.onPointerEnterObservable.add(() => {\n        if (this._tooltipFade) {\n          this._tooltipFade.fadeIn(true);\n        }\n      });\n      this._tooltipOutObserver = this.onPointerOutObservable.add(() => {\n        if (this._tooltipFade) {\n          this._tooltipFade.fadeIn(false);\n        }\n      });\n    }\n    if (this._tooltipTextBlock) {\n      this._tooltipTextBlock.text = text;\n    }\n  }\n  get tooltipText() {\n    if (this._tooltipTextBlock) {\n      return this._tooltipTextBlock.text;\n    }\n    return null;\n  }\n  /**\n   * Gets or sets text for the button\n   */\n  get text() {\n    return this._text;\n  }\n  set text(value) {\n    if (this._text === value) {\n      return;\n    }\n    this._text = value;\n    this._rebuildContent();\n  }\n  /**\n   * Gets or sets the image url for the button\n   */\n  get imageUrl() {\n    return this._imageUrl;\n  }\n  set imageUrl(value) {\n    if (this._imageUrl === value) {\n      return;\n    }\n    this._imageUrl = value;\n    this._rebuildContent();\n  }\n  /**\n   * Gets the back material used by this button\n   */\n  get backMaterial() {\n    return this._backMaterial;\n  }\n  /**\n   * Gets the front material used by this button\n   */\n  get frontMaterial() {\n    return this._frontMaterial;\n  }\n  /**\n   * Gets the plate material used by this button\n   */\n  get plateMaterial() {\n    return this._plateMaterial;\n  }\n  /**\n   * Gets a boolean indicating if this button shares its material with other HolographicButtons\n   */\n  get shareMaterials() {\n    return this._shareMaterials;\n  }\n  /**\n   * Sets whether the backplate is visible or hidden. Hiding the backplate is not recommended without some sort of replacement\n   */\n  set isBackplateVisible(isVisible) {\n    if (this.mesh && !!this._backMaterial) {\n      if (isVisible && !this._isBackplateVisible) {\n        this._backPlate.visibility = 1;\n      } else if (!isVisible && this._isBackplateVisible) {\n        this._backPlate.visibility = 0;\n      }\n    }\n    this._isBackplateVisible = isVisible;\n  }\n  /**\n   * Creates a new button\n   * @param name defines the control name\n   * @param shareMaterials\n   */\n  constructor(name, shareMaterials = true) {\n    super(name);\n    this._shareMaterials = true;\n    this._isBackplateVisible = true;\n    this._frontPlateDepth = 0.5;\n    this._backPlateDepth = 0.04;\n    this._backplateColor = new Color3(0.08, 0.15, 0.55);\n    this._backplateToggledColor = new Color3(0.25, 0.4, 0.95);\n    this._shareMaterials = shareMaterials;\n    this.pointerEnterAnimation = () => {\n      this._frontMaterial.leftBlobEnable = true;\n      this._frontMaterial.rightBlobEnable = true;\n    };\n    this.pointerOutAnimation = () => {\n      this._frontMaterial.leftBlobEnable = false;\n      this._frontMaterial.rightBlobEnable = false;\n    };\n    this.pointerDownAnimation = () => {\n      if (this._frontPlate && !this.isActiveNearInteraction) {\n        this._frontPlate.scaling.z = this._frontPlateDepth * 0.2;\n        this._frontPlate.position = Vector3.Forward(this._frontPlate._scene.useRightHandedSystem).scale((this._frontPlateDepth - 0.2 * this._frontPlateDepth) / 2);\n        this._textPlate.position = Vector3.Forward(this._textPlate._scene.useRightHandedSystem).scale(-(this._backPlateDepth + 0.2 * this._frontPlateDepth) / 2);\n      }\n    };\n    this.pointerUpAnimation = () => {\n      if (this._frontPlate) {\n        this._frontPlate.scaling.z = this._frontPlateDepth;\n        this._frontPlate.position = Vector3.Forward(this._frontPlate._scene.useRightHandedSystem).scale((this._frontPlateDepth - this._frontPlateDepth) / 2);\n        this._textPlate.position = Vector3.Forward(this._textPlate._scene.useRightHandedSystem).scale(-(this._backPlateDepth + this._frontPlateDepth) / 2);\n      }\n    };\n    this.onPointerMoveObservable.add(position => {\n      if (this._frontPlate && this.isActiveNearInteraction) {\n        const scale = Vector3.Zero();\n        if (this._backPlate.getWorldMatrix().decompose(scale, undefined, undefined)) {\n          let interactionHeight = this._getInteractionHeight(position, this._backPlate.getAbsolutePosition()) / scale.z;\n          interactionHeight = Scalar.Clamp(interactionHeight - this._backPlateDepth / 2, 0.2 * this._frontPlateDepth, this._frontPlateDepth);\n          this._frontPlate.scaling.z = interactionHeight;\n          this._frontPlate.position = Vector3.Forward(this._frontPlate._scene.useRightHandedSystem).scale((this._frontPlateDepth - interactionHeight) / 2);\n          this._textPlate.position = Vector3.Forward(this._textPlate._scene.useRightHandedSystem).scale(-(this._backPlateDepth + interactionHeight) / 2);\n        }\n      }\n    });\n    this._pointerHoverObserver = this.onPointerMoveObservable.add(hoverPosition => {\n      this._frontMaterial.globalLeftIndexTipPosition = hoverPosition;\n    });\n  }\n  _getTypeName() {\n    return \"TouchHolographicButton\";\n  }\n  _rebuildContent() {\n    this._disposeFacadeTexture();\n    const panel = new StackPanel();\n    panel.isVertical = true;\n    if (IsDocumentAvailable() && !!document.createElement) {\n      if (this._imageUrl) {\n        const image = new Image();\n        image.source = this._imageUrl;\n        image.paddingTop = \"40px\";\n        image.height = \"180px\";\n        image.width = \"100px\";\n        image.paddingBottom = \"40px\";\n        panel.addControl(image);\n      }\n    }\n    if (this._text) {\n      const text = new TextBlock();\n      text.text = this._text;\n      text.color = \"white\";\n      text.height = \"30px\";\n      text.fontSize = 24;\n      panel.addControl(text);\n    }\n    this.content = panel;\n  }\n  // Mesh association\n  _createNode(scene) {\n    var _a;\n    this.name = (_a = this.name) !== null && _a !== void 0 ? _a : \"TouchHolographicButton\";\n    const collisionMesh = CreateBox(`${this.name}_collisionMesh`, {\n      width: 1.0,\n      height: 1.0,\n      depth: this._frontPlateDepth\n    }, scene);\n    collisionMesh.isPickable = true;\n    collisionMesh.isNearPickable = true;\n    collisionMesh.visibility = 0;\n    collisionMesh.position = Vector3.Forward(scene.useRightHandedSystem).scale(-this._frontPlateDepth / 2);\n    SceneLoader.ImportMeshAsync(undefined, TouchHolographicButton.MODEL_BASE_URL, TouchHolographicButton.MODEL_FILENAME, scene).then(result => {\n      const alphaMesh = CreateBox(\"${this.name}_alphaMesh\", {\n        width: 1.0,\n        height: 1.0,\n        depth: 1.0\n      }, scene);\n      alphaMesh.isPickable = false;\n      alphaMesh.material = new StandardMaterial(\"${this.name}_alphaMesh_material\", scene);\n      alphaMesh.material.alpha = 0.15;\n      const importedFrontPlate = result.meshes[1];\n      importedFrontPlate.name = `${this.name}_frontPlate`;\n      importedFrontPlate.isPickable = false;\n      importedFrontPlate.scaling.z = this._frontPlateDepth;\n      alphaMesh.parent = importedFrontPlate;\n      importedFrontPlate.parent = collisionMesh;\n      if (this._frontMaterial) {\n        importedFrontPlate.material = this._frontMaterial;\n      }\n      this._frontPlate = importedFrontPlate;\n    });\n    this._backPlate = CreateBox(`${this.name}_backPlate`, {\n      width: 1.0,\n      height: 1.0,\n      depth: this._backPlateDepth\n    }, scene);\n    this._backPlate.position = Vector3.Forward(scene.useRightHandedSystem).scale(this._backPlateDepth / 2);\n    this._backPlate.isPickable = false;\n    this._textPlate = super._createNode(scene);\n    this._textPlate.name = `${this.name}_textPlate`;\n    this._textPlate.isPickable = false;\n    this._textPlate.position = Vector3.Forward(scene.useRightHandedSystem).scale(-this._frontPlateDepth / 2);\n    this._backPlate.addChild(collisionMesh);\n    this._backPlate.addChild(this._textPlate);\n    const tn = new TransformNode(`{this.name}_root`, scene);\n    this._backPlate.setParent(tn);\n    this.collisionMesh = collisionMesh;\n    this.collidableFrontDirection = this._backPlate.forward.negate(); // Mesh is facing the wrong way\n    return tn;\n  }\n  _applyFacade(facadeTexture) {\n    this._plateMaterial.emissiveTexture = facadeTexture;\n    this._plateMaterial.opacityTexture = facadeTexture;\n    this._plateMaterial.diffuseColor = new Color3(0.4, 0.4, 0.4);\n  }\n  _createBackMaterial(mesh) {\n    this._backMaterial = new FluentMaterial(this.name + \"backPlateMaterial\", mesh.getScene());\n    this._backMaterial.albedoColor = this._backplateColor;\n    this._backMaterial.renderBorders = true;\n    this._backMaterial.renderHoverLight = false;\n  }\n  _createFrontMaterial(mesh) {\n    this._frontMaterial = new FluentButtonMaterial(this.name + \"Front Material\", mesh.getScene());\n  }\n  _createPlateMaterial(mesh) {\n    this._plateMaterial = new StandardMaterial(this.name + \"Plate Material\", mesh.getScene());\n    this._plateMaterial.specularColor = Color3.Black();\n  }\n  _onToggle(newState) {\n    if (this._backMaterial) {\n      if (newState) {\n        this._backMaterial.albedoColor = this._backplateToggledColor;\n      } else {\n        this._backMaterial.albedoColor = this._backplateColor;\n      }\n    }\n    super._onToggle(newState);\n  }\n  _affectMaterial(mesh) {\n    if (this._shareMaterials) {\n      // Back\n      if (!this._host._touchSharedMaterials[\"backFluentMaterial\"]) {\n        this._createBackMaterial(mesh);\n        this._host._touchSharedMaterials[\"backFluentMaterial\"] = this._backMaterial;\n      } else {\n        this._backMaterial = this._host._touchSharedMaterials[\"backFluentMaterial\"];\n      }\n      // Front\n      if (!this._host._touchSharedMaterials[\"frontFluentMaterial\"]) {\n        this._createFrontMaterial(mesh);\n        this._host._touchSharedMaterials[\"frontFluentMaterial\"] = this._frontMaterial;\n      } else {\n        this._frontMaterial = this._host._touchSharedMaterials[\"frontFluentMaterial\"];\n      }\n    } else {\n      this._createBackMaterial(mesh);\n      this._createFrontMaterial(mesh);\n    }\n    this._createPlateMaterial(mesh);\n    this._backPlate.material = this._backMaterial;\n    this._textPlate.material = this._plateMaterial;\n    if (!this._isBackplateVisible) {\n      this._backPlate.visibility = 0;\n    }\n    if (this._frontPlate) {\n      this._frontPlate.material = this._frontMaterial;\n    }\n    this._rebuildContent();\n  }\n  /**\n   * Releases all associated resources\n   */\n  dispose() {\n    super.dispose(); // will dispose main mesh ie. back plate\n    this._disposeTooltip();\n    this.onPointerMoveObservable.remove(this._pointerHoverObserver);\n    if (!this.shareMaterials) {\n      this._backMaterial.dispose();\n      this._frontMaterial.dispose();\n      this._plateMaterial.dispose();\n      if (this._pickedPointObserver) {\n        this._host.onPickedPointChangedObservable.remove(this._pickedPointObserver);\n        this._pickedPointObserver = null;\n      }\n    }\n  }\n}\n/**\n * Base Url for the button model.\n */\nTouchHolographicButton.MODEL_BASE_URL = \"https://assets.babylonjs.com/meshes/MRTK/\";\n/**\n * File name for the button model.\n */\nTouchHolographicButton.MODEL_FILENAME = \"mrtk-fluent-button.glb\";","map":{"version":3,"names":["Vector3","StandardMaterial","TransformNode","Mesh","CreatePlane","CreateBox","FadeInOutBehavior","FluentMaterial","FluentButtonMaterial","StackPanel","Image","TextBlock","AdvancedDynamicTexture","Color3","TouchButton3D","SceneLoader","IsDocumentAvailable","Scalar","TouchHolographicButton","_disposeTooltip","_tooltipFade","_tooltipTextBlock","dispose","_tooltipTexture","_tooltipMesh","onPointerEnterObservable","remove","_tooltipHoverObserver","onPointerOutObservable","_tooltipOutObserver","renderingGroupId","id","_backPlate","_textPlate","_frontPlate","mesh","tooltipText","text","rightHandedScene","_scene","useRightHandedSystem","size","tooltipBackground","sideOrientation","DOUBLESIDE","mat","diffuseColor","FromHexString","material","isPickable","addChild","position","Forward","scale","scaling","y","Up","add","parent","CreateForMesh","scaleY","color","fontSize","addControl","delay","addBehavior","fadeIn","_text","value","_rebuildContent","imageUrl","_imageUrl","backMaterial","_backMaterial","frontMaterial","_frontMaterial","plateMaterial","_plateMaterial","shareMaterials","_shareMaterials","isBackplateVisible","isVisible","_isBackplateVisible","visibility","constructor","name","_frontPlateDepth","_backPlateDepth","_backplateColor","_backplateToggledColor","pointerEnterAnimation","leftBlobEnable","rightBlobEnable","pointerOutAnimation","pointerDownAnimation","isActiveNearInteraction","z","pointerUpAnimation","onPointerMoveObservable","Zero","getWorldMatrix","decompose","undefined","interactionHeight","_getInteractionHeight","getAbsolutePosition","Clamp","_pointerHoverObserver","hoverPosition","globalLeftIndexTipPosition","_getTypeName","_disposeFacadeTexture","panel","isVertical","document","createElement","image","source","paddingTop","height","width","paddingBottom","content","_createNode","scene","_a","collisionMesh","depth","isNearPickable","ImportMeshAsync","MODEL_BASE_URL","MODEL_FILENAME","then","result","alphaMesh","alpha","importedFrontPlate","meshes","tn","setParent","collidableFrontDirection","forward","negate","_applyFacade","facadeTexture","emissiveTexture","opacityTexture","_createBackMaterial","getScene","albedoColor","renderBorders","renderHoverLight","_createFrontMaterial","_createPlateMaterial","specularColor","Black","_onToggle","newState","_affectMaterial","_host","_touchSharedMaterials","_pickedPointObserver","onPickedPointChangedObservable"],"sources":["../../../../../dev/gui/src/3D/controls/touchHolographicButton.ts"],"sourcesContent":["import type { Nullable } from \"core/types\";\r\nimport type { Observer } from \"core/Misc/observable\";\r\nimport { Vector3 } from \"core/Maths/math.vector\";\r\nimport { StandardMaterial } from \"core/Materials/standardMaterial\";\r\nimport { TransformNode } from \"core/Meshes/transformNode\";\r\nimport { Mesh } from \"core/Meshes/mesh\";\r\nimport { CreatePlane } from \"core/Meshes/Builders/planeBuilder\";\r\nimport { CreateBox } from \"core/Meshes/Builders/boxBuilder\";\r\nimport { FadeInOutBehavior } from \"core/Behaviors/Meshes/fadeInOutBehavior\";\r\nimport type { Scene } from \"core/scene\";\r\nimport { FluentMaterial } from \"../materials/fluent/fluentMaterial\";\r\nimport { FluentButtonMaterial } from \"../materials/fluentButton/fluentButtonMaterial\";\r\nimport { StackPanel } from \"../../2D/controls/stackPanel\";\r\nimport { Image } from \"../../2D/controls/image\";\r\nimport { TextBlock } from \"../../2D/controls/textBlock\";\r\nimport { AdvancedDynamicTexture } from \"../../2D/advancedDynamicTexture\";\r\nimport type { Control3D } from \"./control3D\";\r\nimport { Color3 } from \"core/Maths/math.color\";\r\nimport { TouchButton3D } from \"./touchButton3D\";\r\nimport type { AbstractMesh } from \"core/Meshes/abstractMesh\";\r\nimport { SceneLoader } from \"core/Loading/sceneLoader\";\r\nimport { IsDocumentAvailable } from \"core/Misc/domManagement\";\r\nimport { Scalar } from \"core/Maths/math.scalar\";\r\n\r\n/**\r\n * Class used to create a holographic button in 3D\r\n * @since 5.0.0\r\n */\r\nexport class TouchHolographicButton extends TouchButton3D {\r\n    /**\r\n     * Base Url for the button model.\r\n     */\r\n    public static MODEL_BASE_URL: string = \"https://assets.babylonjs.com/meshes/MRTK/\";\r\n    /**\r\n     * File name for the button model.\r\n     */\r\n    public static MODEL_FILENAME: string = \"mrtk-fluent-button.glb\";\r\n\r\n    private _backPlate: Mesh;\r\n    private _textPlate: Mesh;\r\n    private _frontPlate: AbstractMesh;\r\n    private _text: string;\r\n    private _imageUrl: string;\r\n    private _shareMaterials = true;\r\n    private _isBackplateVisible = true;\r\n    private _frontMaterial: FluentButtonMaterial;\r\n    private _backMaterial: FluentMaterial;\r\n    private _plateMaterial: StandardMaterial;\r\n    private _pickedPointObserver: Nullable<Observer<Nullable<Vector3>>>;\r\n    private _pointerHoverObserver: Nullable<Observer<Vector3>>;\r\n    private _frontPlateDepth = 0.5;\r\n    private _backPlateDepth = 0.04;\r\n    private _backplateColor = new Color3(0.08, 0.15, 0.55);\r\n    private _backplateToggledColor = new Color3(0.25, 0.4, 0.95);\r\n\r\n    // Tooltip\r\n    private _tooltipFade: Nullable<FadeInOutBehavior>;\r\n    private _tooltipTextBlock: Nullable<TextBlock>;\r\n    private _tooltipTexture: Nullable<AdvancedDynamicTexture>;\r\n    private _tooltipMesh: Nullable<Mesh>;\r\n    private _tooltipHoverObserver: Nullable<Observer<Control3D>>;\r\n    private _tooltipOutObserver: Nullable<Observer<Control3D>>;\r\n\r\n    private _disposeTooltip() {\r\n        this._tooltipFade = null;\r\n        if (this._tooltipTextBlock) {\r\n            this._tooltipTextBlock.dispose();\r\n        }\r\n        if (this._tooltipTexture) {\r\n            this._tooltipTexture.dispose();\r\n        }\r\n        if (this._tooltipMesh) {\r\n            this._tooltipMesh.dispose();\r\n        }\r\n        this.onPointerEnterObservable.remove(this._tooltipHoverObserver);\r\n        this.onPointerOutObservable.remove(this._tooltipOutObserver);\r\n    }\r\n\r\n    /**\r\n     * Rendering ground id of all the mesh in the button\r\n     */\r\n    public set renderingGroupId(id: number) {\r\n        this._backPlate.renderingGroupId = id;\r\n        this._textPlate.renderingGroupId = id;\r\n        this._frontPlate.renderingGroupId = id;\r\n\r\n        if (this._tooltipMesh) {\r\n            this._tooltipMesh.renderingGroupId = id;\r\n        }\r\n    }\r\n    public get renderingGroupId(): number {\r\n        return this._backPlate.renderingGroupId;\r\n    }\r\n\r\n    /**\r\n     * Gets the mesh used to render this control\r\n     */\r\n    public get mesh(): Nullable<AbstractMesh> {\r\n        return this._backPlate as AbstractMesh;\r\n    }\r\n\r\n    /**\r\n     * Text to be displayed on the tooltip shown when hovering on the button. When set to null tooltip is disabled. (Default: null)\r\n     */\r\n    public set tooltipText(text: Nullable<string>) {\r\n        if (!text) {\r\n            this._disposeTooltip();\r\n            return;\r\n        }\r\n        if (!this._tooltipFade) {\r\n            const rightHandedScene = this._backPlate._scene.useRightHandedSystem;\r\n            // Create tooltip with mesh and text\r\n            this._tooltipMesh = CreatePlane(\"\", { size: 1 }, this._backPlate._scene);\r\n            const tooltipBackground = CreatePlane(\"\", { size: 1, sideOrientation: Mesh.DOUBLESIDE }, this._backPlate._scene);\r\n            const mat = new StandardMaterial(\"\", this._backPlate._scene);\r\n            mat.diffuseColor = Color3.FromHexString(\"#212121\");\r\n            tooltipBackground.material = mat;\r\n            tooltipBackground.isPickable = false;\r\n            this._tooltipMesh.addChild(tooltipBackground);\r\n            tooltipBackground.position = Vector3.Forward(rightHandedScene).scale(0.05);\r\n            this._tooltipMesh.scaling.y = 1 / 3;\r\n            this._tooltipMesh.position = Vector3.Up().scale(0.7).add(Vector3.Forward(rightHandedScene).scale(-0.15));\r\n            this._tooltipMesh.isPickable = false;\r\n            this._tooltipMesh.parent = this._backPlate;\r\n\r\n            // Create text texture for the tooltip\r\n            this._tooltipTexture = AdvancedDynamicTexture.CreateForMesh(this._tooltipMesh);\r\n            this._tooltipTextBlock = new TextBlock();\r\n            this._tooltipTextBlock.scaleY = 3;\r\n            this._tooltipTextBlock.color = \"white\";\r\n            this._tooltipTextBlock.fontSize = 130;\r\n            this._tooltipTexture.addControl(this._tooltipTextBlock);\r\n\r\n            // Add hover action to tooltip\r\n            this._tooltipFade = new FadeInOutBehavior();\r\n            this._tooltipFade.delay = 500;\r\n            this._tooltipMesh.addBehavior(this._tooltipFade);\r\n            this._tooltipHoverObserver = this.onPointerEnterObservable.add(() => {\r\n                if (this._tooltipFade) {\r\n                    this._tooltipFade.fadeIn(true);\r\n                }\r\n            });\r\n            this._tooltipOutObserver = this.onPointerOutObservable.add(() => {\r\n                if (this._tooltipFade) {\r\n                    this._tooltipFade.fadeIn(false);\r\n                }\r\n            });\r\n        }\r\n        if (this._tooltipTextBlock) {\r\n            this._tooltipTextBlock.text = text;\r\n        }\r\n    }\r\n\r\n    public get tooltipText() {\r\n        if (this._tooltipTextBlock) {\r\n            return this._tooltipTextBlock.text;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets text for the button\r\n     */\r\n    public get text(): string {\r\n        return this._text;\r\n    }\r\n\r\n    public set text(value: string) {\r\n        if (this._text === value) {\r\n            return;\r\n        }\r\n\r\n        this._text = value;\r\n        this._rebuildContent();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the image url for the button\r\n     */\r\n    public get imageUrl(): string {\r\n        return this._imageUrl;\r\n    }\r\n\r\n    public set imageUrl(value: string) {\r\n        if (this._imageUrl === value) {\r\n            return;\r\n        }\r\n\r\n        this._imageUrl = value;\r\n        this._rebuildContent();\r\n    }\r\n\r\n    /**\r\n     * Gets the back material used by this button\r\n     */\r\n    public get backMaterial(): FluentMaterial {\r\n        return this._backMaterial;\r\n    }\r\n\r\n    /**\r\n     * Gets the front material used by this button\r\n     */\r\n    public get frontMaterial(): FluentButtonMaterial {\r\n        return this._frontMaterial;\r\n    }\r\n\r\n    /**\r\n     * Gets the plate material used by this button\r\n     */\r\n    public get plateMaterial(): StandardMaterial {\r\n        return this._plateMaterial;\r\n    }\r\n\r\n    /**\r\n     * Gets a boolean indicating if this button shares its material with other HolographicButtons\r\n     */\r\n    public get shareMaterials(): boolean {\r\n        return this._shareMaterials;\r\n    }\r\n\r\n    /**\r\n     * Sets whether the backplate is visible or hidden. Hiding the backplate is not recommended without some sort of replacement\r\n     */\r\n    public set isBackplateVisible(isVisible: boolean) {\r\n        if (this.mesh && !!this._backMaterial) {\r\n            if (isVisible && !this._isBackplateVisible) {\r\n                this._backPlate.visibility = 1;\r\n            } else if (!isVisible && this._isBackplateVisible) {\r\n                this._backPlate.visibility = 0;\r\n            }\r\n        }\r\n\r\n        this._isBackplateVisible = isVisible;\r\n    }\r\n\r\n    /**\r\n     * Creates a new button\r\n     * @param name defines the control name\r\n     * @param shareMaterials\r\n     */\r\n    constructor(name?: string, shareMaterials = true) {\r\n        super(name);\r\n\r\n        this._shareMaterials = shareMaterials;\r\n\r\n        this.pointerEnterAnimation = () => {\r\n            this._frontMaterial.leftBlobEnable = true;\r\n            this._frontMaterial.rightBlobEnable = true;\r\n        };\r\n\r\n        this.pointerOutAnimation = () => {\r\n            this._frontMaterial.leftBlobEnable = false;\r\n            this._frontMaterial.rightBlobEnable = false;\r\n        };\r\n\r\n        this.pointerDownAnimation = () => {\r\n            if (this._frontPlate && !this.isActiveNearInteraction) {\r\n                this._frontPlate.scaling.z = this._frontPlateDepth * 0.2;\r\n                this._frontPlate.position = Vector3.Forward(this._frontPlate._scene.useRightHandedSystem).scale((this._frontPlateDepth - 0.2 * this._frontPlateDepth) / 2);\r\n                this._textPlate.position = Vector3.Forward(this._textPlate._scene.useRightHandedSystem).scale(-(this._backPlateDepth + 0.2 * this._frontPlateDepth) / 2);\r\n            }\r\n        };\r\n        this.pointerUpAnimation = () => {\r\n            if (this._frontPlate) {\r\n                this._frontPlate.scaling.z = this._frontPlateDepth;\r\n                this._frontPlate.position = Vector3.Forward(this._frontPlate._scene.useRightHandedSystem).scale((this._frontPlateDepth - this._frontPlateDepth) / 2);\r\n                this._textPlate.position = Vector3.Forward(this._textPlate._scene.useRightHandedSystem).scale(-(this._backPlateDepth + this._frontPlateDepth) / 2);\r\n            }\r\n        };\r\n\r\n        this.onPointerMoveObservable.add((position) => {\r\n            if (this._frontPlate && this.isActiveNearInteraction) {\r\n                const scale = Vector3.Zero();\r\n                if (this._backPlate.getWorldMatrix().decompose(scale, undefined, undefined)) {\r\n                    let interactionHeight = this._getInteractionHeight(position, this._backPlate.getAbsolutePosition()) / scale.z;\r\n                    interactionHeight = Scalar.Clamp(interactionHeight - this._backPlateDepth / 2, 0.2 * this._frontPlateDepth, this._frontPlateDepth);\r\n\r\n                    this._frontPlate.scaling.z = interactionHeight;\r\n                    this._frontPlate.position = Vector3.Forward(this._frontPlate._scene.useRightHandedSystem).scale((this._frontPlateDepth - interactionHeight) / 2);\r\n                    this._textPlate.position = Vector3.Forward(this._textPlate._scene.useRightHandedSystem).scale(-(this._backPlateDepth + interactionHeight) / 2);\r\n                }\r\n            }\r\n        });\r\n\r\n        this._pointerHoverObserver = this.onPointerMoveObservable.add((hoverPosition: Vector3) => {\r\n            this._frontMaterial.globalLeftIndexTipPosition = hoverPosition;\r\n        });\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"TouchHolographicButton\";\r\n    }\r\n\r\n    private _rebuildContent(): void {\r\n        this._disposeFacadeTexture();\r\n\r\n        const panel = new StackPanel();\r\n        panel.isVertical = true;\r\n\r\n        if (IsDocumentAvailable() && !!document.createElement) {\r\n            if (this._imageUrl) {\r\n                const image = new Image();\r\n                image.source = this._imageUrl;\r\n                image.paddingTop = \"40px\";\r\n                image.height = \"180px\";\r\n                image.width = \"100px\";\r\n                image.paddingBottom = \"40px\";\r\n                panel.addControl(image);\r\n            }\r\n        }\r\n\r\n        if (this._text) {\r\n            const text = new TextBlock();\r\n            text.text = this._text;\r\n            text.color = \"white\";\r\n            text.height = \"30px\";\r\n            text.fontSize = 24;\r\n            panel.addControl(text);\r\n        }\r\n\r\n        this.content = panel;\r\n    }\r\n\r\n    // Mesh association\r\n    protected _createNode(scene: Scene): TransformNode {\r\n        this.name = this.name ?? \"TouchHolographicButton\";\r\n        const collisionMesh = CreateBox(\r\n            `${this.name}_collisionMesh`,\r\n            {\r\n                width: 1.0,\r\n                height: 1.0,\r\n                depth: this._frontPlateDepth,\r\n            },\r\n            scene\r\n        );\r\n        collisionMesh.isPickable = true;\r\n        collisionMesh.isNearPickable = true;\r\n        collisionMesh.visibility = 0;\r\n        collisionMesh.position = Vector3.Forward(scene.useRightHandedSystem).scale(-this._frontPlateDepth / 2);\r\n\r\n        SceneLoader.ImportMeshAsync(undefined, TouchHolographicButton.MODEL_BASE_URL, TouchHolographicButton.MODEL_FILENAME, scene).then((result) => {\r\n            const alphaMesh = CreateBox(\r\n                \"${this.name}_alphaMesh\",\r\n                {\r\n                    width: 1.0,\r\n                    height: 1.0,\r\n                    depth: 1.0,\r\n                },\r\n                scene\r\n            );\r\n            alphaMesh.isPickable = false;\r\n            alphaMesh.material = new StandardMaterial(\"${this.name}_alphaMesh_material\", scene);\r\n            alphaMesh.material.alpha = 0.15;\r\n\r\n            const importedFrontPlate = result.meshes[1];\r\n            importedFrontPlate.name = `${this.name}_frontPlate`;\r\n            importedFrontPlate.isPickable = false;\r\n            importedFrontPlate.scaling.z = this._frontPlateDepth;\r\n            alphaMesh.parent = importedFrontPlate;\r\n            importedFrontPlate.parent = collisionMesh;\r\n            if (this._frontMaterial) {\r\n                importedFrontPlate.material = this._frontMaterial;\r\n            }\r\n            this._frontPlate = importedFrontPlate;\r\n        });\r\n\r\n        this._backPlate = CreateBox(\r\n            `${this.name}_backPlate`,\r\n            {\r\n                width: 1.0,\r\n                height: 1.0,\r\n                depth: this._backPlateDepth,\r\n            },\r\n            scene\r\n        );\r\n\r\n        this._backPlate.position = Vector3.Forward(scene.useRightHandedSystem).scale(this._backPlateDepth / 2);\r\n        this._backPlate.isPickable = false;\r\n\r\n        this._textPlate = <Mesh>super._createNode(scene);\r\n        this._textPlate.name = `${this.name}_textPlate`;\r\n        this._textPlate.isPickable = false;\r\n        this._textPlate.position = Vector3.Forward(scene.useRightHandedSystem).scale(-this._frontPlateDepth / 2);\r\n\r\n        this._backPlate.addChild(collisionMesh);\r\n        this._backPlate.addChild(this._textPlate);\r\n\r\n        const tn = new TransformNode(`{this.name}_root`, scene);\r\n        this._backPlate.setParent(tn);\r\n\r\n        this.collisionMesh = collisionMesh;\r\n        this.collidableFrontDirection = this._backPlate.forward.negate(); // Mesh is facing the wrong way\r\n\r\n        return tn;\r\n    }\r\n\r\n    protected _applyFacade(facadeTexture: AdvancedDynamicTexture) {\r\n        this._plateMaterial.emissiveTexture = facadeTexture;\r\n        this._plateMaterial.opacityTexture = facadeTexture;\r\n        this._plateMaterial.diffuseColor = new Color3(0.4, 0.4, 0.4);\r\n    }\r\n\r\n    private _createBackMaterial(mesh: Mesh) {\r\n        this._backMaterial = new FluentMaterial(this.name + \"backPlateMaterial\", mesh.getScene());\r\n        this._backMaterial.albedoColor = this._backplateColor;\r\n        this._backMaterial.renderBorders = true;\r\n        this._backMaterial.renderHoverLight = false;\r\n    }\r\n\r\n    private _createFrontMaterial(mesh: Mesh) {\r\n        this._frontMaterial = new FluentButtonMaterial(this.name + \"Front Material\", mesh.getScene());\r\n    }\r\n\r\n    private _createPlateMaterial(mesh: Mesh) {\r\n        this._plateMaterial = new StandardMaterial(this.name + \"Plate Material\", mesh.getScene());\r\n        this._plateMaterial.specularColor = Color3.Black();\r\n    }\r\n\r\n    protected _onToggle(newState: boolean) {\r\n        if (this._backMaterial) {\r\n            if (newState) {\r\n                this._backMaterial.albedoColor = this._backplateToggledColor;\r\n            } else {\r\n                this._backMaterial.albedoColor = this._backplateColor;\r\n            }\r\n        }\r\n\r\n        super._onToggle(newState);\r\n    }\r\n\r\n    protected _affectMaterial(mesh: Mesh) {\r\n        if (this._shareMaterials) {\r\n            // Back\r\n            if (!this._host._touchSharedMaterials[\"backFluentMaterial\"]) {\r\n                this._createBackMaterial(mesh);\r\n                this._host._touchSharedMaterials[\"backFluentMaterial\"] = this._backMaterial;\r\n            } else {\r\n                this._backMaterial = this._host._touchSharedMaterials[\"backFluentMaterial\"] as FluentMaterial;\r\n            }\r\n\r\n            // Front\r\n            if (!this._host._touchSharedMaterials[\"frontFluentMaterial\"]) {\r\n                this._createFrontMaterial(mesh);\r\n                this._host._touchSharedMaterials[\"frontFluentMaterial\"] = this._frontMaterial;\r\n            } else {\r\n                this._frontMaterial = this._host._touchSharedMaterials[\"frontFluentMaterial\"] as FluentButtonMaterial;\r\n            }\r\n        } else {\r\n            this._createBackMaterial(mesh);\r\n            this._createFrontMaterial(mesh);\r\n        }\r\n\r\n        this._createPlateMaterial(mesh);\r\n        this._backPlate.material = this._backMaterial;\r\n        this._textPlate.material = this._plateMaterial;\r\n\r\n        if (!this._isBackplateVisible) {\r\n            this._backPlate.visibility = 0;\r\n        }\r\n        if (this._frontPlate) {\r\n            this._frontPlate.material = this._frontMaterial;\r\n        }\r\n\r\n        this._rebuildContent();\r\n    }\r\n\r\n    /**\r\n     * Releases all associated resources\r\n     */\r\n    public dispose() {\r\n        super.dispose(); // will dispose main mesh ie. back plate\r\n\r\n        this._disposeTooltip();\r\n        this.onPointerMoveObservable.remove(this._pointerHoverObserver);\r\n\r\n        if (!this.shareMaterials) {\r\n            this._backMaterial.dispose();\r\n            this._frontMaterial.dispose();\r\n            this._plateMaterial.dispose();\r\n\r\n            if (this._pickedPointObserver) {\r\n                this._host.onPickedPointChangedObservable.remove(this._pickedPointObserver);\r\n                this._pickedPointObserver = null;\r\n            }\r\n        }\r\n    }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}