{"ast":null,"code":"import { __decorate } from \"../../../../tslib.es6.js\";\nimport { NodeMaterialBlock } from \"../../nodeMaterialBlock.js\";\nimport { NodeMaterialBlockConnectionPointTypes } from \"../../Enums/nodeMaterialBlockConnectionPointTypes.js\";\nimport { NodeMaterialBlockTargets } from \"../../Enums/nodeMaterialBlockTargets.js\";\nimport { RegisterClass } from \"../../../../Misc/typeStore.js\";\nimport { editableInPropertyPage, PropertyTypeForEdition } from \"../../../../Decorators/nodeDecorator.js\";\n/**\n * Block used to convert a height vector to a normal\n */\nexport class HeightToNormalBlock extends NodeMaterialBlock {\n  /**\n   * Creates a new HeightToNormalBlock\n   * @param name defines the block name\n   */\n  constructor(name) {\n    super(name, NodeMaterialBlockTargets.Fragment);\n    /**\n     * Defines if the output should be generated in world or tangent space.\n     * Note that in tangent space the result is also scaled by 0.5 and offsetted by 0.5 so that it can directly be used as a PerturbNormal.normalMapColor input\n     */\n    this.generateInWorldSpace = false;\n    /**\n     * Defines that the worldNormal input will be normalized by the HeightToNormal block before being used\n     */\n    this.automaticNormalizationNormal = true;\n    /**\n     * Defines that the worldTangent input will be normalized by the HeightToNormal block before being used\n     */\n    this.automaticNormalizationTangent = true;\n    this.registerInput(\"input\", NodeMaterialBlockConnectionPointTypes.Float);\n    this.registerInput(\"worldPosition\", NodeMaterialBlockConnectionPointTypes.Vector3);\n    this.registerInput(\"worldNormal\", NodeMaterialBlockConnectionPointTypes.Vector3);\n    this.registerInput(\"worldTangent\", NodeMaterialBlockConnectionPointTypes.AutoDetect, true);\n    this.registerOutput(\"output\", NodeMaterialBlockConnectionPointTypes.Vector4);\n    this.registerOutput(\"xyz\", NodeMaterialBlockConnectionPointTypes.Vector3);\n    this._inputs[3].addExcludedConnectionPointFromAllowedTypes(NodeMaterialBlockConnectionPointTypes.Color3 | NodeMaterialBlockConnectionPointTypes.Vector3 | NodeMaterialBlockConnectionPointTypes.Vector4);\n  }\n  /**\n   * Gets the current class name\n   * @returns the class name\n   */\n  getClassName() {\n    return \"HeightToNormalBlock\";\n  }\n  /**\n   * Gets the input component\n   */\n  get input() {\n    return this._inputs[0];\n  }\n  /**\n   * Gets the position component\n   */\n  get worldPosition() {\n    return this._inputs[1];\n  }\n  /**\n   * Gets the normal component\n   */\n  get worldNormal() {\n    return this._inputs[2];\n  }\n  /**\n   * Gets the tangent component\n   */\n  get worldTangent() {\n    return this._inputs[3];\n  }\n  /**\n   * Gets the output component\n   */\n  get output() {\n    return this._outputs[0];\n  }\n  /**\n   * Gets the xyz component\n   */\n  get xyz() {\n    return this._outputs[1];\n  }\n  _buildBlock(state) {\n    super._buildBlock(state);\n    const output = this._outputs[0];\n    if (!this.generateInWorldSpace && !this.worldTangent.isConnected) {\n      console.error(`You must connect the 'worldTangent' input of the ${this.name} block!`);\n    }\n    const startCode = this.generateInWorldSpace ? \"\" : `\n            vec3 biTangent = cross(normal, tangent);\n            mat3 TBN = mat3(tangent, biTangent, normal);\n            `;\n    const endCode = this.generateInWorldSpace ? \"\" : `\n            result = TBN * result;\n            result = result * vec3(0.5) + vec3(0.5);\n            `;\n    const heightToNormal = `\n            vec4 heightToNormal(in float height, in vec3 position, in vec3 tangent, in vec3 normal) {\n                ${startCode}\n                ${this.automaticNormalizationTangent ? \"tangent = normalize(tangent);\" : \"\"}\n                ${this.automaticNormalizationNormal ? \"normal = normalize(normal);\" : \"\"}\n                vec3 worlddX = dFdx(position);\n                vec3 worlddY = dFdy(position);\n                vec3 crossX = cross(normal, worlddX);\n                vec3 crossY = cross(normal, worlddY);\n                float d = abs(dot(crossY, worlddX));\n                vec3 inToNormal = vec3(((((height + dFdx(height)) - height) * crossY) + (((height + dFdy(height)) - height) * crossX)) * sign(d));\n                inToNormal.y *= -1.0;\n                vec3 result = normalize((d * normal) - inToNormal);\n                ${endCode}\n                return vec4(result, 0.);\n            }`;\n    state._emitExtension(\"derivatives\", \"#extension GL_OES_standard_derivatives : enable\");\n    state._emitFunction(\"heightToNormal\", heightToNormal, \"// heightToNormal\");\n    state.compilationString += this._declareOutput(output, state) + ` = heightToNormal(${this.input.associatedVariableName}, ${this.worldPosition.associatedVariableName}, ${this.worldTangent.isConnected ? this.worldTangent.associatedVariableName : \"vec3(0.)\"}.xyz, ${this.worldNormal.associatedVariableName});\\n`;\n    if (this.xyz.hasEndpoints) {\n      state.compilationString += this._declareOutput(this.xyz, state) + ` = ${this.output.associatedVariableName}.xyz;\\n`;\n    }\n    return this;\n  }\n  _dumpPropertiesCode() {\n    let codeString = super._dumpPropertiesCode();\n    codeString += `${this._codeVariableName}.generateInWorldSpace = ${this.generateInWorldSpace};\\n`;\n    codeString += `${this._codeVariableName}.automaticNormalizationNormal = ${this.automaticNormalizationNormal};\\n`;\n    codeString += `${this._codeVariableName}.automaticNormalizationTangent = ${this.automaticNormalizationTangent};\\n`;\n    return codeString;\n  }\n  serialize() {\n    const serializationObject = super.serialize();\n    serializationObject.generateInWorldSpace = this.generateInWorldSpace;\n    serializationObject.automaticNormalizationNormal = this.automaticNormalizationNormal;\n    serializationObject.automaticNormalizationTangent = this.automaticNormalizationTangent;\n    return serializationObject;\n  }\n  _deserialize(serializationObject, scene, rootUrl) {\n    super._deserialize(serializationObject, scene, rootUrl);\n    this.generateInWorldSpace = serializationObject.generateInWorldSpace;\n    this.automaticNormalizationNormal = serializationObject.automaticNormalizationNormal;\n    this.automaticNormalizationTangent = serializationObject.automaticNormalizationTangent;\n  }\n}\n__decorate([editableInPropertyPage(\"Generate in world space instead of tangent space\", PropertyTypeForEdition.Boolean, \"PROPERTIES\", {\n  notifiers: {\n    update: true\n  }\n})], HeightToNormalBlock.prototype, \"generateInWorldSpace\", void 0);\n__decorate([editableInPropertyPage(\"Force normalization for the worldNormal input\", PropertyTypeForEdition.Boolean, \"PROPERTIES\", {\n  notifiers: {\n    update: true\n  }\n})], HeightToNormalBlock.prototype, \"automaticNormalizationNormal\", void 0);\n__decorate([editableInPropertyPage(\"Force normalization for the worldTangent input\", PropertyTypeForEdition.Boolean, \"PROPERTIES\", {\n  notifiers: {\n    update: true\n  }\n})], HeightToNormalBlock.prototype, \"automaticNormalizationTangent\", void 0);\nRegisterClass(\"BABYLON.HeightToNormalBlock\", HeightToNormalBlock);","map":{"version":3,"names":["NodeMaterialBlock","NodeMaterialBlockConnectionPointTypes","NodeMaterialBlockTargets","RegisterClass","editableInPropertyPage","PropertyTypeForEdition","HeightToNormalBlock","constructor","name","Fragment","generateInWorldSpace","automaticNormalizationNormal","automaticNormalizationTangent","registerInput","Float","Vector3","AutoDetect","registerOutput","Vector4","_inputs","addExcludedConnectionPointFromAllowedTypes","Color3","getClassName","input","worldPosition","worldNormal","worldTangent","output","_outputs","xyz","_buildBlock","state","isConnected","console","error","startCode","endCode","heightToNormal","_emitExtension","_emitFunction","compilationString","_declareOutput","associatedVariableName","hasEndpoints","_dumpPropertiesCode","codeString","_codeVariableName","serialize","serializationObject","_deserialize","scene","rootUrl","__decorate","Boolean","notifiers","update"],"sources":["../../../../../../../dev/core/src/Materials/Node/Blocks/Fragment/heightToNormalBlock.ts"],"sourcesContent":["import { NodeMaterialBlock } from \"../../nodeMaterialBlock\";\r\nimport { NodeMaterialBlockConnectionPointTypes } from \"../../Enums/nodeMaterialBlockConnectionPointTypes\";\r\nimport type { NodeMaterialBuildState } from \"../../nodeMaterialBuildState\";\r\nimport type { NodeMaterialConnectionPoint } from \"../../nodeMaterialBlockConnectionPoint\";\r\nimport { NodeMaterialBlockTargets } from \"../../Enums/nodeMaterialBlockTargets\";\r\nimport { RegisterClass } from \"../../../../Misc/typeStore\";\r\nimport { editableInPropertyPage, PropertyTypeForEdition } from \"../../../../Decorators/nodeDecorator\";\r\nimport type { Scene } from \"../../../../scene\";\r\n\r\n/**\r\n * Block used to convert a height vector to a normal\r\n */\r\nexport class HeightToNormalBlock extends NodeMaterialBlock {\r\n    /**\r\n     * Creates a new HeightToNormalBlock\r\n     * @param name defines the block name\r\n     */\r\n    public constructor(name: string) {\r\n        super(name, NodeMaterialBlockTargets.Fragment);\r\n\r\n        this.registerInput(\"input\", NodeMaterialBlockConnectionPointTypes.Float);\r\n        this.registerInput(\"worldPosition\", NodeMaterialBlockConnectionPointTypes.Vector3);\r\n        this.registerInput(\"worldNormal\", NodeMaterialBlockConnectionPointTypes.Vector3);\r\n        this.registerInput(\"worldTangent\", NodeMaterialBlockConnectionPointTypes.AutoDetect, true);\r\n        this.registerOutput(\"output\", NodeMaterialBlockConnectionPointTypes.Vector4);\r\n        this.registerOutput(\"xyz\", NodeMaterialBlockConnectionPointTypes.Vector3);\r\n\r\n        this._inputs[3].addExcludedConnectionPointFromAllowedTypes(\r\n            NodeMaterialBlockConnectionPointTypes.Color3 | NodeMaterialBlockConnectionPointTypes.Vector3 | NodeMaterialBlockConnectionPointTypes.Vector4\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Defines if the output should be generated in world or tangent space.\r\n     * Note that in tangent space the result is also scaled by 0.5 and offsetted by 0.5 so that it can directly be used as a PerturbNormal.normalMapColor input\r\n     */\r\n    @editableInPropertyPage(\"Generate in world space instead of tangent space\", PropertyTypeForEdition.Boolean, \"PROPERTIES\", { notifiers: { update: true } })\r\n    public generateInWorldSpace: boolean = false;\r\n\r\n    /**\r\n     * Defines that the worldNormal input will be normalized by the HeightToNormal block before being used\r\n     */\r\n    @editableInPropertyPage(\"Force normalization for the worldNormal input\", PropertyTypeForEdition.Boolean, \"PROPERTIES\", { notifiers: { update: true } })\r\n    public automaticNormalizationNormal: boolean = true;\r\n\r\n    /**\r\n     * Defines that the worldTangent input will be normalized by the HeightToNormal block before being used\r\n     */\r\n    @editableInPropertyPage(\"Force normalization for the worldTangent input\", PropertyTypeForEdition.Boolean, \"PROPERTIES\", { notifiers: { update: true } })\r\n    public automaticNormalizationTangent: boolean = true;\r\n\r\n    /**\r\n     * Gets the current class name\r\n     * @returns the class name\r\n     */\r\n    public getClassName() {\r\n        return \"HeightToNormalBlock\";\r\n    }\r\n\r\n    /**\r\n     * Gets the input component\r\n     */\r\n    public get input(): NodeMaterialConnectionPoint {\r\n        return this._inputs[0];\r\n    }\r\n\r\n    /**\r\n     * Gets the position component\r\n     */\r\n    public get worldPosition(): NodeMaterialConnectionPoint {\r\n        return this._inputs[1];\r\n    }\r\n\r\n    /**\r\n     * Gets the normal component\r\n     */\r\n    public get worldNormal(): NodeMaterialConnectionPoint {\r\n        return this._inputs[2];\r\n    }\r\n\r\n    /**\r\n     * Gets the tangent component\r\n     */\r\n    public get worldTangent(): NodeMaterialConnectionPoint {\r\n        return this._inputs[3];\r\n    }\r\n\r\n    /**\r\n     * Gets the output component\r\n     */\r\n    public get output(): NodeMaterialConnectionPoint {\r\n        return this._outputs[0];\r\n    }\r\n\r\n    /**\r\n     * Gets the xyz component\r\n     */\r\n    public get xyz(): NodeMaterialConnectionPoint {\r\n        return this._outputs[1];\r\n    }\r\n\r\n    protected _buildBlock(state: NodeMaterialBuildState) {\r\n        super._buildBlock(state);\r\n\r\n        const output = this._outputs[0];\r\n\r\n        if (!this.generateInWorldSpace && !this.worldTangent.isConnected) {\r\n            console.error(`You must connect the 'worldTangent' input of the ${this.name} block!`);\r\n        }\r\n\r\n        const startCode = this.generateInWorldSpace\r\n            ? \"\"\r\n            : `\r\n            vec3 biTangent = cross(normal, tangent);\r\n            mat3 TBN = mat3(tangent, biTangent, normal);\r\n            `;\r\n\r\n        const endCode = this.generateInWorldSpace\r\n            ? \"\"\r\n            : `\r\n            result = TBN * result;\r\n            result = result * vec3(0.5) + vec3(0.5);\r\n            `;\r\n\r\n        const heightToNormal = `\r\n            vec4 heightToNormal(in float height, in vec3 position, in vec3 tangent, in vec3 normal) {\r\n                ${startCode}\r\n                ${this.automaticNormalizationTangent ? \"tangent = normalize(tangent);\" : \"\"}\r\n                ${this.automaticNormalizationNormal ? \"normal = normalize(normal);\" : \"\"}\r\n                vec3 worlddX = dFdx(position);\r\n                vec3 worlddY = dFdy(position);\r\n                vec3 crossX = cross(normal, worlddX);\r\n                vec3 crossY = cross(normal, worlddY);\r\n                float d = abs(dot(crossY, worlddX));\r\n                vec3 inToNormal = vec3(((((height + dFdx(height)) - height) * crossY) + (((height + dFdy(height)) - height) * crossX)) * sign(d));\r\n                inToNormal.y *= -1.0;\r\n                vec3 result = normalize((d * normal) - inToNormal);\r\n                ${endCode}\r\n                return vec4(result, 0.);\r\n            }`;\r\n\r\n        state._emitExtension(\"derivatives\", \"#extension GL_OES_standard_derivatives : enable\");\r\n        state._emitFunction(\"heightToNormal\", heightToNormal, \"// heightToNormal\");\r\n        state.compilationString +=\r\n            this._declareOutput(output, state) +\r\n            ` = heightToNormal(${this.input.associatedVariableName}, ${this.worldPosition.associatedVariableName}, ${\r\n                this.worldTangent.isConnected ? this.worldTangent.associatedVariableName : \"vec3(0.)\"\r\n            }.xyz, ${this.worldNormal.associatedVariableName});\\n`;\r\n\r\n        if (this.xyz.hasEndpoints) {\r\n            state.compilationString += this._declareOutput(this.xyz, state) + ` = ${this.output.associatedVariableName}.xyz;\\n`;\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    protected _dumpPropertiesCode() {\r\n        let codeString = super._dumpPropertiesCode();\r\n        codeString += `${this._codeVariableName}.generateInWorldSpace = ${this.generateInWorldSpace};\\n`;\r\n        codeString += `${this._codeVariableName}.automaticNormalizationNormal = ${this.automaticNormalizationNormal};\\n`;\r\n        codeString += `${this._codeVariableName}.automaticNormalizationTangent = ${this.automaticNormalizationTangent};\\n`;\r\n\r\n        return codeString;\r\n    }\r\n\r\n    public serialize(): any {\r\n        const serializationObject = super.serialize();\r\n\r\n        serializationObject.generateInWorldSpace = this.generateInWorldSpace;\r\n        serializationObject.automaticNormalizationNormal = this.automaticNormalizationNormal;\r\n        serializationObject.automaticNormalizationTangent = this.automaticNormalizationTangent;\r\n\r\n        return serializationObject;\r\n    }\r\n\r\n    public _deserialize(serializationObject: any, scene: Scene, rootUrl: string) {\r\n        super._deserialize(serializationObject, scene, rootUrl);\r\n\r\n        this.generateInWorldSpace = serializationObject.generateInWorldSpace;\r\n        this.automaticNormalizationNormal = serializationObject.automaticNormalizationNormal;\r\n        this.automaticNormalizationTangent = serializationObject.automaticNormalizationTangent;\r\n    }\r\n}\r\n\r\nRegisterClass(\"BABYLON.HeightToNormalBlock\", HeightToNormalBlock);\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}