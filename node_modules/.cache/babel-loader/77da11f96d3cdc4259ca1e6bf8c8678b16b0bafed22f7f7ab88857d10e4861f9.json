{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { FlowGraphAsyncExecutionBlock } from \"../../../flowGraphAsyncExecutionBlock.js\";\nimport { RichTypeAny, RichTypeNumber, RichTypeBoolean } from \"../../../flowGraphRichTypes.js\";\nimport { RegisterClass } from \"../../../../Misc/typeStore.js\";\n/**\n * @experimental\n * A block that plays an animation on an animatable object.\n */\nexport class FlowGraphPlayAnimationBlock extends FlowGraphAsyncExecutionBlock {\n  constructor(config) {\n    super(config);\n    this.target = this._registerDataInput(\"target\", RichTypeAny);\n    this.animation = this._registerDataInput(\"animation\", RichTypeAny);\n    this.speed = this._registerDataInput(\"speed\", RichTypeNumber);\n    this.loop = this._registerDataInput(\"loop\", RichTypeBoolean);\n    this.from = this._registerDataInput(\"from\", RichTypeNumber);\n    this.to = this._registerDataInput(\"to\", RichTypeNumber);\n    this.onAnimationEnd = this._registerSignalOutput(\"onAnimationEnd\");\n    this.runningAnimatable = this._registerDataOutput(\"runningAnimatable\", RichTypeAny);\n  }\n  /**\n   * @internal\n   * @param context\n   */\n  _preparePendingTasks(context) {\n    var _a;\n    const targetValue = this.target.getValue(context);\n    const animationValue = this.animation.getValue(context);\n    if (!targetValue || !animationValue) {\n      throw new Error(\"Cannot play animation without target or animation\");\n    }\n    const contextAnimatables = (_a = context._getExecutionVariable(this, \"runningAnimatables\")) !== null && _a !== void 0 ? _a : [];\n    // was an animation started on this target already and was just paused? if so, we can unpause it.\n    const existingAnimatable = this.runningAnimatable.getValue(context);\n    if (existingAnimatable && existingAnimatable.paused) {\n      existingAnimatable.restart();\n    } else {\n      const scene = context.configuration.scene;\n      const animatable = scene.beginDirectAnimation(targetValue, [animationValue], this.from.getValue(context), this.to.getValue(context), this.loop.getValue(context), this.speed.getValue(context), () => this._onAnimationEnd(animatable, context));\n      this.runningAnimatable.setValue(animatable, context);\n      contextAnimatables.push(animatable);\n    }\n    context._setExecutionVariable(this, \"runningAnimatables\", contextAnimatables);\n  }\n  _execute(context) {\n    this._startPendingTasks(context);\n    this.onDone._activateSignal(context);\n  }\n  _onAnimationEnd(animatable, context) {\n    var _a;\n    const contextAnims = (_a = context._getExecutionVariable(this, \"runningAnimatables\")) !== null && _a !== void 0 ? _a : [];\n    const index = contextAnims.indexOf(animatable);\n    if (index !== -1) {\n      contextAnims.splice(index, 1);\n    }\n    context._removePendingBlock(this);\n    this.onAnimationEnd._activateSignal(context);\n  }\n  /**\n   * @internal\n   * Stop any currently running animations.\n   */\n  _cancelPendingTasks(context) {\n    var _a;\n    const contextAnims = (_a = context._getExecutionVariable(this, \"runningAnimatables\")) !== null && _a !== void 0 ? _a : [];\n    for (const anim of contextAnims) {\n      anim.stop();\n    }\n    context._deleteExecutionVariable(this, \"runningAnimatables\");\n  }\n  getClassName() {\n    return \"FGPlayAnimationBlock\";\n  }\n}\nRegisterClass(\"FGPlayAnimationBlock\", FlowGraphPlayAnimationBlock);","map":{"version":3,"names":["FlowGraphAsyncExecutionBlock","RichTypeAny","RichTypeNumber","RichTypeBoolean","RegisterClass","FlowGraphPlayAnimationBlock","constructor","config","target","_registerDataInput","animation","speed","loop","from","to","onAnimationEnd","_registerSignalOutput","runningAnimatable","_registerDataOutput","_preparePendingTasks","context","targetValue","getValue","animationValue","Error","contextAnimatables","_a","_getExecutionVariable","existingAnimatable","paused","restart","scene","configuration","animatable","beginDirectAnimation","_onAnimationEnd","setValue","push","_setExecutionVariable","_execute","_startPendingTasks","onDone","_activateSignal","contextAnims","index","indexOf","splice","_removePendingBlock","_cancelPendingTasks","anim","stop","_deleteExecutionVariable","getClassName"],"sources":["../../../../../../../dev/core/src/FlowGraph/Blocks/Execution/Animation/flowGraphPlayAnimationBlock.ts"],"sourcesContent":["import type { FlowGraphContext } from \"../../../flowGraphContext\";\r\nimport type { Animatable, Animation, IAnimatable } from \"../../../../Animations\";\r\nimport type { FlowGraphDataConnection } from \"../../../flowGraphDataConnection\";\r\nimport type { FlowGraphSignalConnection } from \"../../../flowGraphSignalConnection\";\r\nimport { FlowGraphAsyncExecutionBlock } from \"../../../flowGraphAsyncExecutionBlock\";\r\nimport { RichTypeAny, RichTypeNumber, RichTypeBoolean } from \"../../../flowGraphRichTypes\";\r\nimport { RegisterClass } from \"../../../../Misc/typeStore\";\r\nimport type { IFlowGraphBlockConfiguration } from \"../../../flowGraphBlock\";\r\n/**\r\n * @experimental\r\n * A block that plays an animation on an animatable object.\r\n */\r\nexport class FlowGraphPlayAnimationBlock extends FlowGraphAsyncExecutionBlock {\r\n    /**\r\n     * Input connection: The target to play the animation on.\r\n     */\r\n    public readonly target: FlowGraphDataConnection<IAnimatable>;\r\n    /**\r\n     * Input connection: The animation to play.\r\n     */\r\n    public readonly animation: FlowGraphDataConnection<Animation>;\r\n    /**\r\n     * Input connection: The speed of the animation.\r\n     */\r\n    public readonly speed: FlowGraphDataConnection<number>;\r\n    /**\r\n     * Input connection: Should the animation loop?\r\n     */\r\n    public readonly loop: FlowGraphDataConnection<boolean>;\r\n    /**\r\n     * Input connection: The starting frame of the animation.\r\n     */\r\n    public readonly from: FlowGraphDataConnection<number>;\r\n    /**\r\n     * Input connection: The ending frame of the animation.\r\n     */\r\n    public readonly to: FlowGraphDataConnection<number>;\r\n\r\n    /**\r\n     * Output connection: The signal that is triggered when the animation ends.\r\n     */\r\n    public readonly onAnimationEnd: FlowGraphSignalConnection;\r\n\r\n    /**\r\n     * Output connection: The animatable that is currently running.\r\n     */\r\n    public readonly runningAnimatable: FlowGraphDataConnection<Animatable>;\r\n\r\n    public constructor(config?: IFlowGraphBlockConfiguration) {\r\n        super(config);\r\n\r\n        this.target = this._registerDataInput(\"target\", RichTypeAny);\r\n        this.animation = this._registerDataInput(\"animation\", RichTypeAny);\r\n        this.speed = this._registerDataInput(\"speed\", RichTypeNumber);\r\n        this.loop = this._registerDataInput(\"loop\", RichTypeBoolean);\r\n        this.from = this._registerDataInput(\"from\", RichTypeNumber);\r\n        this.to = this._registerDataInput(\"to\", RichTypeNumber);\r\n\r\n        this.onAnimationEnd = this._registerSignalOutput(\"onAnimationEnd\");\r\n        this.runningAnimatable = this._registerDataOutput(\"runningAnimatable\", RichTypeAny);\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * @param context\r\n     */\r\n    public _preparePendingTasks(context: FlowGraphContext): void {\r\n        const targetValue = this.target.getValue(context);\r\n        const animationValue = this.animation.getValue(context) as Animation;\r\n\r\n        if (!targetValue || !animationValue) {\r\n            throw new Error(\"Cannot play animation without target or animation\");\r\n        }\r\n\r\n        const contextAnimatables = (context._getExecutionVariable(this, \"runningAnimatables\") as Animatable[]) ?? [];\r\n\r\n        // was an animation started on this target already and was just paused? if so, we can unpause it.\r\n        const existingAnimatable = this.runningAnimatable.getValue(context);\r\n        if (existingAnimatable && existingAnimatable.paused) {\r\n            existingAnimatable.restart();\r\n        } else {\r\n            const scene = context.configuration.scene;\r\n            const animatable = scene.beginDirectAnimation(\r\n                targetValue,\r\n                [animationValue],\r\n                this.from.getValue(context),\r\n                this.to.getValue(context),\r\n                this.loop.getValue(context),\r\n                this.speed.getValue(context),\r\n                () => this._onAnimationEnd(animatable, context)\r\n            );\r\n            this.runningAnimatable.setValue(animatable, context);\r\n            contextAnimatables.push(animatable);\r\n        }\r\n\r\n        context._setExecutionVariable(this, \"runningAnimatables\", contextAnimatables);\r\n    }\r\n\r\n    public _execute(context: FlowGraphContext): void {\r\n        this._startPendingTasks(context);\r\n\r\n        this.onDone._activateSignal(context);\r\n    }\r\n\r\n    private _onAnimationEnd(animatable: Animatable, context: FlowGraphContext) {\r\n        const contextAnims = (context._getExecutionVariable(this, \"runningAnimatables\") as Animatable[]) ?? [];\r\n        const index = contextAnims.indexOf(animatable);\r\n        if (index !== -1) {\r\n            contextAnims.splice(index, 1);\r\n        }\r\n        context._removePendingBlock(this);\r\n        this.onAnimationEnd._activateSignal(context);\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * Stop any currently running animations.\r\n     */\r\n    public _cancelPendingTasks(context: FlowGraphContext): void {\r\n        const contextAnims = (context._getExecutionVariable(this, \"runningAnimatables\") as Animatable[]) ?? [];\r\n        for (const anim of contextAnims) {\r\n            anim.stop();\r\n        }\r\n        context._deleteExecutionVariable(this, \"runningAnimatables\");\r\n    }\r\n\r\n    public getClassName(): string {\r\n        return \"FGPlayAnimationBlock\";\r\n    }\r\n}\r\n\r\nRegisterClass(\"FGPlayAnimationBlock\", FlowGraphPlayAnimationBlock);\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}