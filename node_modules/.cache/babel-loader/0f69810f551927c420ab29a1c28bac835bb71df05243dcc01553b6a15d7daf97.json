{"ast":null,"code":"import { __decorate } from \"../../../tslib.es6.js\";\nimport { NodeGeometryBlock } from \"../nodeGeometryBlock.js\";\nimport { RegisterClass } from \"../../../Misc/typeStore.js\";\nimport { NodeGeometryBlockConnectionPointTypes } from \"../Enums/nodeGeometryConnectionPointTypes.js\";\nimport { PropertyTypeForEdition, editableInPropertyPage } from \"../../../Decorators/nodeDecorator.js\";\nimport { CSG } from \"../../csg.js\";\n/**\n * Operations supported by the boolean block\n */\nexport var BooleanGeometryOperations;\n(function (BooleanGeometryOperations) {\n  /** Intersect */\n  BooleanGeometryOperations[BooleanGeometryOperations[\"Intersect\"] = 0] = \"Intersect\";\n  /** Subtract */\n  BooleanGeometryOperations[BooleanGeometryOperations[\"Subtract\"] = 1] = \"Subtract\";\n  /** Union */\n  BooleanGeometryOperations[BooleanGeometryOperations[\"Union\"] = 2] = \"Union\";\n})(BooleanGeometryOperations || (BooleanGeometryOperations = {}));\n/**\n * Block used to apply a boolean operation between 2 geometries\n */\nexport class BooleanGeometryBlock extends NodeGeometryBlock {\n  /**\n   * Create a new BooleanGeometryBlock\n   * @param name defines the block name\n   */\n  constructor(name) {\n    super(name);\n    /**\n     * Gets or sets a boolean indicating that this block can evaluate context\n     * Build performance is improved when this value is set to false as the system will cache values instead of reevaluating everything per context change\n     */\n    this.evaluateContext = false;\n    /**\n     * Gets or sets the operation applied by the block\n     */\n    this.operation = BooleanGeometryOperations.Intersect;\n    this.registerInput(\"geometry0\", NodeGeometryBlockConnectionPointTypes.Geometry);\n    this.registerInput(\"geometry1\", NodeGeometryBlockConnectionPointTypes.Geometry);\n    this.registerOutput(\"output\", NodeGeometryBlockConnectionPointTypes.Geometry);\n  }\n  /**\n   * Gets the current class name\n   * @returns the class name\n   */\n  getClassName() {\n    return \"BooleanGeometryBlock\";\n  }\n  /**\n   * Gets the geometry0 input component\n   */\n  get geometry0() {\n    return this._inputs[0];\n  }\n  /**\n   * Gets the geometry1 input component\n   */\n  get geometry1() {\n    return this._inputs[1];\n  }\n  /**\n   * Gets the geometry output component\n   */\n  get output() {\n    return this._outputs[0];\n  }\n  _buildBlock(state) {\n    const func = state => {\n      const vertexData0 = this.geometry0.getConnectedValue(state);\n      const vertexData1 = this.geometry1.getConnectedValue(state);\n      if (!vertexData0 || !vertexData1) {\n        return null;\n      }\n      const vertexCount = vertexData0.positions.length / 3;\n      // Ensure that all the fields are filled to avoid problems later on in the graph\n      if (!vertexData0.normals && vertexData1.normals) {\n        vertexData0.normals = new Array(vertexData0.positions.length);\n      }\n      if (!vertexData1.normals && vertexData0.normals) {\n        vertexData1.normals = new Array(vertexData1.positions.length);\n      }\n      if (!vertexData0.uvs && vertexData1.uvs) {\n        vertexData0.uvs = new Array(vertexCount * 2);\n      }\n      if (!vertexData1.uvs && vertexData0.uvs) {\n        vertexData1.uvs = new Array(vertexCount * 2);\n      }\n      if (!vertexData0.colors && vertexData1.colors) {\n        vertexData0.colors = new Array(vertexCount * 4);\n      }\n      if (!vertexData1.colors && vertexData0.colors) {\n        vertexData1.colors = new Array(vertexCount * 4);\n      }\n      const CSG0 = CSG.FromVertexData(vertexData0);\n      const CSG1 = CSG.FromVertexData(vertexData1);\n      let boolCSG;\n      switch (this.operation) {\n        case BooleanGeometryOperations.Intersect:\n          boolCSG = CSG0.intersect(CSG1);\n          break;\n        case BooleanGeometryOperations.Subtract:\n          boolCSG = CSG0.subtract(CSG1);\n          break;\n        case BooleanGeometryOperations.Union:\n          boolCSG = CSG0.union(CSG1);\n          break;\n      }\n      return boolCSG.toVertexData();\n    };\n    if (this.evaluateContext) {\n      this.output._storedFunction = func;\n    } else {\n      this.output._storedFunction = null;\n      this.output._storedValue = func(state);\n    }\n  }\n  _dumpPropertiesCode() {\n    let codeString = super._dumpPropertiesCode() + `${this._codeVariableName}.evaluateContext = ${this.evaluateContext ? \"true\" : \"false\"};\\n`;\n    codeString += `${this._codeVariableName}.operation = BABYLON.BooleanGeometryOperations.${BooleanGeometryOperations[this.operation]};\\n`;\n    return codeString;\n  }\n  /**\n   * Serializes this block in a JSON representation\n   * @returns the serialized block object\n   */\n  serialize() {\n    const serializationObject = super.serialize();\n    serializationObject.evaluateContext = this.evaluateContext;\n    serializationObject.operation = this.operation;\n    return serializationObject;\n  }\n  _deserialize(serializationObject) {\n    super._deserialize(serializationObject);\n    this.evaluateContext = serializationObject.evaluateContext;\n    if (serializationObject.operation) {\n      this.operation = serializationObject.operation;\n    }\n  }\n}\n__decorate([editableInPropertyPage(\"Evaluate context\", PropertyTypeForEdition.Boolean, \"ADVANCED\", {\n  notifiers: {\n    rebuild: true\n  }\n})], BooleanGeometryBlock.prototype, \"evaluateContext\", void 0);\n__decorate([editableInPropertyPage(\"Operation\", PropertyTypeForEdition.List, \"ADVANCED\", {\n  notifiers: {\n    rebuild: true\n  },\n  options: [{\n    label: \"Intersect\",\n    value: BooleanGeometryOperations.Intersect\n  }, {\n    label: \"Subtract\",\n    value: BooleanGeometryOperations.Subtract\n  }, {\n    label: \"Union\",\n    value: BooleanGeometryOperations.Union\n  }]\n})], BooleanGeometryBlock.prototype, \"operation\", void 0);\nRegisterClass(\"BABYLON.BooleanGeometryBlock\", BooleanGeometryBlock);","map":{"version":3,"names":["NodeGeometryBlock","RegisterClass","NodeGeometryBlockConnectionPointTypes","PropertyTypeForEdition","editableInPropertyPage","CSG","BooleanGeometryOperations","BooleanGeometryBlock","constructor","name","evaluateContext","operation","Intersect","registerInput","Geometry","registerOutput","getClassName","geometry0","_inputs","geometry1","output","_outputs","_buildBlock","state","func","vertexData0","getConnectedValue","vertexData1","vertexCount","positions","length","normals","Array","uvs","colors","CSG0","FromVertexData","CSG1","boolCSG","intersect","Subtract","subtract","Union","union","toVertexData","_storedFunction","_storedValue","_dumpPropertiesCode","codeString","_codeVariableName","serialize","serializationObject","_deserialize","__decorate","Boolean","notifiers","rebuild","List","options","label","value"],"sources":["../../../../../../dev/core/src/Meshes/Node/Blocks/booleanGeometryBlock.ts"],"sourcesContent":["import { NodeGeometryBlock } from \"../nodeGeometryBlock\";\r\nimport type { NodeGeometryConnectionPoint } from \"../nodeGeometryBlockConnectionPoint\";\r\nimport { RegisterClass } from \"../../../Misc/typeStore\";\r\nimport { NodeGeometryBlockConnectionPointTypes } from \"../Enums/nodeGeometryConnectionPointTypes\";\r\nimport type { VertexData } from \"../../mesh.vertexData\";\r\nimport type { NodeGeometryBuildState } from \"../nodeGeometryBuildState\";\r\nimport { PropertyTypeForEdition, editableInPropertyPage } from \"../../../Decorators/nodeDecorator\";\r\nimport { CSG } from \"core/Meshes/csg\";\r\n\r\n/**\r\n * Operations supported by the boolean block\r\n */\r\nexport enum BooleanGeometryOperations {\r\n    /** Intersect */\r\n    Intersect,\r\n    /** Subtract */\r\n    Subtract,\r\n    /** Union */\r\n    Union,\r\n}\r\n\r\n/**\r\n * Block used to apply a boolean operation between 2 geometries\r\n */\r\nexport class BooleanGeometryBlock extends NodeGeometryBlock {\r\n    /**\r\n     * Gets or sets a boolean indicating that this block can evaluate context\r\n     * Build performance is improved when this value is set to false as the system will cache values instead of reevaluating everything per context change\r\n     */\r\n    @editableInPropertyPage(\"Evaluate context\", PropertyTypeForEdition.Boolean, \"ADVANCED\", { notifiers: { rebuild: true } })\r\n    public evaluateContext = false;\r\n\r\n    /**\r\n     * Gets or sets the operation applied by the block\r\n     */\r\n    @editableInPropertyPage(\"Operation\", PropertyTypeForEdition.List, \"ADVANCED\", {\r\n        notifiers: { rebuild: true },\r\n        options: [\r\n            { label: \"Intersect\", value: BooleanGeometryOperations.Intersect },\r\n            { label: \"Subtract\", value: BooleanGeometryOperations.Subtract },\r\n            { label: \"Union\", value: BooleanGeometryOperations.Union },\r\n        ],\r\n    })\r\n    public operation = BooleanGeometryOperations.Intersect;\r\n\r\n    /**\r\n     * Create a new BooleanGeometryBlock\r\n     * @param name defines the block name\r\n     */\r\n    public constructor(name: string) {\r\n        super(name);\r\n\r\n        this.registerInput(\"geometry0\", NodeGeometryBlockConnectionPointTypes.Geometry);\r\n        this.registerInput(\"geometry1\", NodeGeometryBlockConnectionPointTypes.Geometry);\r\n\r\n        this.registerOutput(\"output\", NodeGeometryBlockConnectionPointTypes.Geometry);\r\n    }\r\n\r\n    /**\r\n     * Gets the current class name\r\n     * @returns the class name\r\n     */\r\n    public getClassName() {\r\n        return \"BooleanGeometryBlock\";\r\n    }\r\n\r\n    /**\r\n     * Gets the geometry0 input component\r\n     */\r\n    public get geometry0(): NodeGeometryConnectionPoint {\r\n        return this._inputs[0];\r\n    }\r\n\r\n    /**\r\n     * Gets the geometry1 input component\r\n     */\r\n    public get geometry1(): NodeGeometryConnectionPoint {\r\n        return this._inputs[1];\r\n    }\r\n\r\n    /**\r\n     * Gets the geometry output component\r\n     */\r\n    public get output(): NodeGeometryConnectionPoint {\r\n        return this._outputs[0];\r\n    }\r\n\r\n    protected _buildBlock(state: NodeGeometryBuildState) {\r\n        const func = (state: NodeGeometryBuildState) => {\r\n            const vertexData0 = this.geometry0.getConnectedValue(state) as VertexData;\r\n            const vertexData1 = this.geometry1.getConnectedValue(state) as VertexData;\r\n\r\n            if (!vertexData0 || !vertexData1) {\r\n                return null;\r\n            }\r\n\r\n            const vertexCount = vertexData0.positions!.length / 3;\r\n            // Ensure that all the fields are filled to avoid problems later on in the graph\r\n            if (!vertexData0.normals && vertexData1.normals) {\r\n                vertexData0.normals = new Array<number>(vertexData0.positions!.length);\r\n            }\r\n            if (!vertexData1.normals && vertexData0.normals) {\r\n                vertexData1.normals = new Array<number>(vertexData1.positions!.length);\r\n            }\r\n            if (!vertexData0.uvs && vertexData1.uvs) {\r\n                vertexData0.uvs = new Array<number>(vertexCount * 2);\r\n            }\r\n            if (!vertexData1.uvs && vertexData0.uvs) {\r\n                vertexData1.uvs = new Array<number>(vertexCount * 2);\r\n            }\r\n            if (!vertexData0.colors && vertexData1.colors) {\r\n                vertexData0.colors = new Array<number>(vertexCount * 4);\r\n            }\r\n            if (!vertexData1.colors && vertexData0.colors) {\r\n                vertexData1.colors = new Array<number>(vertexCount * 4);\r\n            }\r\n\r\n            const CSG0 = CSG.FromVertexData(vertexData0);\r\n            const CSG1 = CSG.FromVertexData(vertexData1);\r\n\r\n            let boolCSG: CSG;\r\n\r\n            switch (this.operation) {\r\n                case BooleanGeometryOperations.Intersect:\r\n                    boolCSG = CSG0.intersect(CSG1);\r\n                    break;\r\n                case BooleanGeometryOperations.Subtract:\r\n                    boolCSG = CSG0.subtract(CSG1);\r\n                    break;\r\n                case BooleanGeometryOperations.Union:\r\n                    boolCSG = CSG0.union(CSG1);\r\n                    break;\r\n            }\r\n\r\n            return boolCSG.toVertexData();\r\n        };\r\n\r\n        if (this.evaluateContext) {\r\n            this.output._storedFunction = func;\r\n        } else {\r\n            this.output._storedFunction = null;\r\n            this.output._storedValue = func(state);\r\n        }\r\n    }\r\n\r\n    protected _dumpPropertiesCode() {\r\n        let codeString = super._dumpPropertiesCode() + `${this._codeVariableName}.evaluateContext = ${this.evaluateContext ? \"true\" : \"false\"};\\n`;\r\n        codeString += `${this._codeVariableName}.operation = BABYLON.BooleanGeometryOperations.${BooleanGeometryOperations[this.operation]};\\n`;\r\n        return codeString;\r\n    }\r\n\r\n    /**\r\n     * Serializes this block in a JSON representation\r\n     * @returns the serialized block object\r\n     */\r\n    public serialize(): any {\r\n        const serializationObject = super.serialize();\r\n\r\n        serializationObject.evaluateContext = this.evaluateContext;\r\n        serializationObject.operation = this.operation;\r\n\r\n        return serializationObject;\r\n    }\r\n\r\n    public _deserialize(serializationObject: any) {\r\n        super._deserialize(serializationObject);\r\n\r\n        this.evaluateContext = serializationObject.evaluateContext;\r\n        if (serializationObject.operation) {\r\n            this.operation = serializationObject.operation;\r\n        }\r\n    }\r\n}\r\n\r\nRegisterClass(\"BABYLON.BooleanGeometryBlock\", BooleanGeometryBlock);\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}