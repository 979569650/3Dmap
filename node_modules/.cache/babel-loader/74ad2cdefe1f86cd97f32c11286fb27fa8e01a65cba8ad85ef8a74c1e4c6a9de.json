{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { __decorate } from \"@babylonjs/core/tslib.es6.js\";\nimport { serializeAsColor4, serializeAsVector3, serialize, SerializationHelper } from \"@babylonjs/core/Misc/decorators.js\";\nimport { Vector3, Vector4 } from \"@babylonjs/core/Maths/math.vector.js\";\nimport { Texture } from \"@babylonjs/core/Materials/Textures/texture.js\";\nimport { MaterialDefines } from \"@babylonjs/core/Materials/materialDefines.js\";\nimport { MaterialHelper } from \"@babylonjs/core/Materials/materialHelper.js\";\nimport { PushMaterial } from \"@babylonjs/core/Materials/pushMaterial.js\";\nimport { VertexBuffer } from \"@babylonjs/core/Buffers/buffer.js\";\nimport { RegisterClass } from \"@babylonjs/core/Misc/typeStore.js\";\nimport { Color3, Color4 } from \"@babylonjs/core/Maths/math.color.js\";\nimport { EffectFallbacks } from \"@babylonjs/core/Materials/effectFallbacks.js\";\nimport { Constants } from \"@babylonjs/core/Engines/constants.js\";\nimport \"./shaders/fluentButton.fragment.js\";\nimport \"./shaders/fluentButton.vertex.js\";\n/** @internal */\nclass FluentButtonMaterialDefines extends MaterialDefines {\n  constructor() {\n    super();\n    this.RELATIVE_WIDTH = true;\n    this.ENABLE_FADE = true;\n    this._needNormals = true;\n    this._needUVs = true;\n    this.rebuild();\n  }\n}\n/**\n * Class used to render square buttons with fluent design\n * @since 5.0.0\n */\nexport class FluentButtonMaterial extends PushMaterial {\n  constructor(name, scene) {\n    super(name, scene);\n    /**\n     * Gets or sets the width of the glowing edge, relative to the scale of the button.\n     * (Default is 4% of the height).\n     */\n    this.edgeWidth = 0.04;\n    /**\n     * Gets or sets the color of the glowing edge.\n     */\n    this.edgeColor = new Color4(0.592157, 0.592157, 0.592157, 1.0);\n    /**\n     * Gets or sets the maximum intensity of the proximity light.\n     */\n    this.proximityMaxIntensity = 0.45;\n    /**\n     * Gets or sets the maximum distance for the proximity light (Default is 16mm).\n     */\n    this.proximityFarDistance = 0.16;\n    /**\n     * Gets or sets the radius of the proximity light when near to the surface.\n     */\n    this.proximityNearRadius = 1.5;\n    /**\n     * Gets or sets the anisotropy of the proximity light.\n     */\n    this.proximityAnisotropy = 1;\n    /**\n     * Gets or sets the amount of fuzzing in the selection focus.\n     */\n    this.selectionFuzz = 0.5;\n    /**\n     * Gets or sets an override value to display the button as selected.\n     */\n    this.selected = 0;\n    /**\n     * Gets or sets a value to manually fade the blob size.\n     */\n    this.selectionFade = 0;\n    /**\n     * Gets or sets a value to manually shrink the blob size as it fades (see selectionFade).\n     */\n    this.selectionFadeSize = 0.3;\n    /**\n     * Gets or sets the distance from the button the cursor should be for the button\n     * to appear selected (Default is 8cm).\n     */\n    this.selectedDistance = 0.08;\n    /**\n     * Gets or sets the fall-off distance for the selection fade (Default is 8cm).\n     */\n    this.selectedFadeLength = 0.08;\n    /**\n     * Gets or sets the intensity of the luminous blob (Ranges 0-1, default is 0.5).\n     */\n    this.blobIntensity = 0.5;\n    /**\n     * The size of the blob when the pointer is at the blobFarDistance (Default is 5cm).\n     */\n    this.blobFarSize = 0.05;\n    /**\n     * The distance at which the pointer is considered near. See [left|right]BlobNearSize. (Default is 0cm).\n     */\n    this.blobNearDistance = 0;\n    /**\n     * The distance at which the pointer is considered far. See [left|right]BlobFarSize. (Default is 8cm).\n     */\n    this.blobFarDistance = 0.08;\n    /**\n     * The distance over which the blob intensity fades from full to none (Default is 8cm).\n     */\n    this.blobFadeLength = 0.08;\n    /**\n     * Gets or sets whether the blob corresponding to the left index finger is enabled.\n     */\n    this.leftBlobEnable = true;\n    /**\n     * Gets or sets the size of the left blob when the left pointer is considered near. See blobNearDistance. (Default is 2.5cm).\n     */\n    this.leftBlobNearSize = 0.025;\n    /**\n     * Gets or sets the progress of the pulse animation on the left blob (Ranges 0-1).\n     */\n    this.leftBlobPulse = 0;\n    /**\n     * Gets or sets the fade factor on the left blob.\n     */\n    this.leftBlobFade = 1;\n    /**\n     * Gets or sets the inner fade on the left blob;\n     */\n    this.leftBlobInnerFade = 0.01;\n    /**\n     * Gets or sets whether the blob corresponding to the right index finger is enabled.\n     */\n    this.rightBlobEnable = true;\n    /**\n     * Gets or sets the size of the right blob when the right pointer is considered near. See blobNearDistance. (Default is 2.5cm).\n     */\n    this.rightBlobNearSize = 0.025;\n    /**\n     * Gets or sets the progress of the pulse animation on the right blob (Ranges 0-1).\n     */\n    this.rightBlobPulse = 0;\n    /**\n     * Gets or sets the fade factor on the right blob.\n     */\n    this.rightBlobFade = 1;\n    /**\n     * Gets or sets the inner fade on the right blob;\n     */\n    this.rightBlobInnerFade = 0.01;\n    /**\n     * Gets or sets the direction of the active face before the world transform is applied.\n     * This should almost always be set to -z.\n     */\n    this.activeFaceDir = new Vector3(0, 0, -1);\n    /**\n     * Gets or sets the button's up direction before the world transform is applied.\n     * This should almost always be set to +y.\n     */\n    this.activeFaceUp = new Vector3(0, 1, 0);\n    /**\n     * Gets or sets whether the edge fade effect is enabled.\n     */\n    this.enableFade = true;\n    /**\n     * Gets or sets a value corresponding to the width of the edge fade effect (Default 1.5).\n     */\n    this.fadeWidth = 1.5;\n    /**\n     * Gets or sets whether the active face is smoothly interpolated.\n     */\n    this.smoothActiveFace = true;\n    /**\n     * Gets or sets whether the frame of the fluent button model is visible.\n     * This is usually only enabled for debugging purposes.\n     */\n    this.showFrame = false;\n    /**\n     * Gets or sets whether the blob color texture is used for the proximity\n     * light effect. This is usually only disabled for debugging purposes.\n     */\n    this.useBlobTexture = true;\n    /**\n     * Gets or sets the world-space position of the tip of the left index finger.\n     */\n    this.globalLeftIndexTipPosition = Vector3.Zero();\n    /**\n     * Gets or sets the world-space position of the tip of the right index finger.\n     */\n    this.globalRightIndexTipPosition = Vector3.Zero();\n    this.alphaMode = Constants.ALPHA_ADD;\n    this.disableDepthWrite = true;\n    this.backFaceCulling = false;\n    this._blobTexture = new Texture(FluentButtonMaterial.BLOB_TEXTURE_URL, this.getScene(), true, false, Texture.NEAREST_SAMPLINGMODE);\n  }\n  needAlphaBlending() {\n    return true;\n  }\n  needAlphaTesting() {\n    return true;\n  }\n  getAlphaTestTexture() {\n    return null;\n  }\n  // Methods\n  isReadyForSubMesh(mesh, subMesh) {\n    if (this.isFrozen) {\n      if (subMesh.effect && subMesh.effect._wasPreviouslyReady) {\n        return true;\n      }\n    }\n    if (!subMesh.materialDefines) {\n      subMesh.materialDefines = new FluentButtonMaterialDefines();\n    }\n    const defines = subMesh.materialDefines;\n    const scene = this.getScene();\n    if (this._isReadyForSubMesh(subMesh)) {\n      return true;\n    }\n    const engine = scene.getEngine();\n    // Attribs\n    MaterialHelper.PrepareDefinesForAttributes(mesh, defines, true, false);\n    // Get correct effect\n    if (defines.isDirty) {\n      defines.markAsProcessed();\n      scene.resetCachedMaterial();\n      // Fallbacks\n      const fallbacks = new EffectFallbacks();\n      if (defines.FOG) {\n        fallbacks.addFallback(1, \"FOG\");\n      }\n      MaterialHelper.HandleFallbacksForShadows(defines, fallbacks);\n      defines.IMAGEPROCESSINGPOSTPROCESS = scene.imageProcessingConfiguration.applyByPostProcess;\n      //Attributes\n      const attribs = [VertexBuffer.PositionKind];\n      if (defines.NORMAL) {\n        attribs.push(VertexBuffer.NormalKind);\n      }\n      if (defines.UV1) {\n        attribs.push(VertexBuffer.UVKind);\n      }\n      if (defines.UV2) {\n        attribs.push(VertexBuffer.UV2Kind);\n      }\n      if (defines.VERTEXCOLOR) {\n        attribs.push(VertexBuffer.ColorKind);\n      }\n      if (defines.TANGENT) {\n        attribs.push(VertexBuffer.TangentKind);\n      }\n      MaterialHelper.PrepareAttributesForInstances(attribs, defines);\n      // Legacy browser patch\n      const shaderName = \"fluentButton\";\n      const join = defines.toString();\n      const uniforms = [\"world\", \"viewProjection\", \"cameraPosition\", \"_Edge_Width_\", \"_Edge_Color_\", \"_Relative_Width_\", \"_Proximity_Max_Intensity_\", \"_Proximity_Far_Distance_\", \"_Proximity_Near_Radius_\", \"_Proximity_Anisotropy_\", \"_Selection_Fuzz_\", \"_Selected_\", \"_Selection_Fade_\", \"_Selection_Fade_Size_\", \"_Selected_Distance_\", \"_Selected_Fade_Length_\", \"_Blob_Enable_\", \"_Blob_Position_\", \"_Blob_Intensity_\", \"_Blob_Near_Size_\", \"_Blob_Far_Size_\", \"_Blob_Near_Distance_\", \"_Blob_Far_Distance_\", \"_Blob_Fade_Length_\", \"_Blob_Inner_Fade_\", \"_Blob_Pulse_\", \"_Blob_Fade_\", \"_Blob_Texture_\", \"_Blob_Enable_2_\", \"_Blob_Position_2_\", \"_Blob_Near_Size_2_\", \"_Blob_Inner_Fade_2_\", \"_Blob_Pulse_2_\", \"_Blob_Fade_2_\", \"_Active_Face_Dir_\", \"_Active_Face_Up_\", \"_Enable_Fade_\", \"_Fade_Width_\", \"_Smooth_Active_Face_\", \"_Show_Frame_\", \"_Use_Blob_Texture_\", \"Use_Global_Left_Index\", \"Use_Global_Right_Index\", \"Global_Left_Index_Tip_Position\", \"Global_Right_Index_Tip_Position\", \"Global_Left_Thumb_Tip_Position\", \"Global_Right_Thumb_Tip_Position\", \"Global_Left_Index_Tip_Proximity\", \"Global_Right_Index_Tip_Proximity\"];\n      const samplers = [\"_Blob_Texture_\"];\n      const uniformBuffers = new Array();\n      MaterialHelper.PrepareUniformsAndSamplersList({\n        uniformsNames: uniforms,\n        uniformBuffersNames: uniformBuffers,\n        samplers: samplers,\n        defines: defines,\n        maxSimultaneousLights: 4\n      });\n      subMesh.setEffect(scene.getEngine().createEffect(shaderName, {\n        attributes: attribs,\n        uniformsNames: uniforms,\n        uniformBuffersNames: uniformBuffers,\n        samplers: samplers,\n        defines: join,\n        fallbacks: fallbacks,\n        onCompiled: this.onCompiled,\n        onError: this.onError,\n        indexParameters: {\n          maxSimultaneousLights: 4\n        }\n      }, engine), defines, this._materialContext);\n    }\n    if (!subMesh.effect || !subMesh.effect.isReady()) {\n      return false;\n    }\n    defines._renderId = scene.getRenderId();\n    subMesh.effect._wasPreviouslyReady = true;\n    return true;\n  }\n  bindForSubMesh(world, mesh, subMesh) {\n    const scene = this.getScene();\n    const defines = subMesh.materialDefines;\n    if (!defines) {\n      return;\n    }\n    const effect = subMesh.effect;\n    if (!effect) {\n      return;\n    }\n    this._activeEffect = effect;\n    // Matrices\n    this.bindOnlyWorldMatrix(world);\n    this._activeEffect.setMatrix(\"viewProjection\", scene.getTransformMatrix());\n    this._activeEffect.setVector3(\"cameraPosition\", scene.activeCamera.position);\n    // \"Blob Texture\"\n    this._activeEffect.setTexture(\"_Blob_Texture_\", this._blobTexture);\n    // \"Wireframe\"\n    this._activeEffect.setFloat(\"_Edge_Width_\", this.edgeWidth);\n    this._activeEffect.setColor4(\"_Edge_Color_\", new Color3(this.edgeColor.r, this.edgeColor.g, this.edgeColor.b), this.edgeColor.a);\n    //define _Relative_Width_ true;\n    // \"Proximity\"\n    this._activeEffect.setFloat(\"_Proximity_Max_Intensity_\", this.proximityMaxIntensity);\n    this._activeEffect.setFloat(\"_Proximity_Far_Distance_\", this.proximityFarDistance);\n    this._activeEffect.setFloat(\"_Proximity_Near_Radius_\", this.proximityNearRadius);\n    this._activeEffect.setFloat(\"_Proximity_Anisotropy_\", this.proximityAnisotropy);\n    // \"Selection\"\n    this._activeEffect.setFloat(\"_Selection_Fuzz_\", this.selectionFuzz);\n    this._activeEffect.setFloat(\"_Selected_\", this.selected);\n    this._activeEffect.setFloat(\"_Selection_Fade_\", this.selectionFade);\n    this._activeEffect.setFloat(\"_Selection_Fade_Size_\", this.selectionFadeSize);\n    this._activeEffect.setFloat(\"_Selected_Distance_\", this.selectedDistance);\n    this._activeEffect.setFloat(\"_Selected_Fade_Length_\", this.selectedFadeLength);\n    // \"Blob\"\n    this._activeEffect.setFloat(\"_Blob_Enable_\", this.leftBlobEnable ? 1.0 : 0.0);\n    this._activeEffect.setFloat(\"_Blob_Intensity_\", this.blobIntensity);\n    this._activeEffect.setFloat(\"_Blob_Near_Size_\", this.leftBlobNearSize);\n    this._activeEffect.setFloat(\"_Blob_Far_Size_\", this.blobFarSize);\n    this._activeEffect.setFloat(\"_Blob_Near_Distance_\", this.blobNearDistance);\n    this._activeEffect.setFloat(\"_Blob_Far_Distance_\", this.blobFarDistance);\n    this._activeEffect.setFloat(\"_Blob_Fade_Length_\", this.blobFadeLength);\n    this._activeEffect.setFloat(\"_Blob_Inner_Fade_\", this.leftBlobInnerFade);\n    this._activeEffect.setFloat(\"_Blob_Pulse_\", this.leftBlobPulse);\n    this._activeEffect.setFloat(\"_Blob_Fade_\", this.leftBlobFade);\n    // \"Blob 2\"\n    this._activeEffect.setFloat(\"_Blob_Enable_2_\", this.rightBlobEnable ? 1.0 : 0.0);\n    this._activeEffect.setFloat(\"_Blob_Near_Size_2_\", this.rightBlobNearSize);\n    this._activeEffect.setFloat(\"_Blob_Inner_Fade_2_\", this.rightBlobInnerFade);\n    this._activeEffect.setFloat(\"_Blob_Pulse_2_\", this.rightBlobPulse);\n    this._activeEffect.setFloat(\"_Blob_Fade_2_\", this.rightBlobFade);\n    // \"Active Face\"\n    this._activeEffect.setVector3(\"_Active_Face_Dir_\", this.activeFaceDir);\n    this._activeEffect.setVector3(\"_Active_Face_Up_\", this.activeFaceUp);\n    // \"Hololens Edge Fade\"\n    //define _Enable_Fade_ true;\n    this._activeEffect.setFloat(\"_Fade_Width_\", this.fadeWidth);\n    this._activeEffect.setFloat(\"_Smooth_Active_Face_\", this.smoothActiveFace ? 1.0 : 0.0);\n    // \"Debug\"\n    this._activeEffect.setFloat(\"_Show_Frame_\", this.showFrame ? 1.0 : 0.0);\n    this._activeEffect.setFloat(\"_Use_Blob_Texture_\", this.useBlobTexture ? 1.0 : 0.0);\n    // Global inputs\n    this._activeEffect.setFloat(\"Use_Global_Left_Index\", 1.0);\n    this._activeEffect.setFloat(\"Use_Global_Right_Index\", 1.0);\n    this._activeEffect.setVector4(\"Global_Left_Index_Tip_Position\", new Vector4(this.globalLeftIndexTipPosition.x, this.globalLeftIndexTipPosition.y, this.globalLeftIndexTipPosition.z, 1.0));\n    this._activeEffect.setVector4(\"Global_Right_Index_Tip_Position\", new Vector4(this.globalRightIndexTipPosition.x, this.globalRightIndexTipPosition.y, this.globalRightIndexTipPosition.z, 1.0));\n    this._afterBind(mesh, this._activeEffect);\n  }\n  /**\n   * Get the list of animatables in the material.\n   * @returns the list of animatables object used in the material\n   */\n  getAnimatables() {\n    return [];\n  }\n  dispose(forceDisposeEffect) {\n    super.dispose(forceDisposeEffect);\n  }\n  clone(name) {\n    return SerializationHelper.Clone(() => new FluentButtonMaterial(name, this.getScene()), this);\n  }\n  serialize() {\n    const serializationObject = super.serialize();\n    serializationObject.customType = \"BABYLON.FluentButtonMaterial\";\n    return serializationObject;\n  }\n  getClassName() {\n    return \"FluentButtonMaterial\";\n  }\n  // Statics\n  static Parse(source, scene, rootUrl) {\n    return SerializationHelper.Parse(() => new FluentButtonMaterial(source.name, scene), source, scene, rootUrl);\n  }\n}\n/**\n * URL pointing to the texture used to define the coloring for the fluent blob effect.\n */\nFluentButtonMaterial.BLOB_TEXTURE_URL = \"https://assets.babylonjs.com/meshes/MRTK/mrtk-fluent-button-blob.png\";\n__decorate([serialize()], FluentButtonMaterial.prototype, \"edgeWidth\", void 0);\n__decorate([serializeAsColor4()], FluentButtonMaterial.prototype, \"edgeColor\", void 0);\n__decorate([serialize()], FluentButtonMaterial.prototype, \"proximityMaxIntensity\", void 0);\n__decorate([serialize()], FluentButtonMaterial.prototype, \"proximityFarDistance\", void 0);\n__decorate([serialize()], FluentButtonMaterial.prototype, \"proximityNearRadius\", void 0);\n__decorate([serialize()], FluentButtonMaterial.prototype, \"proximityAnisotropy\", void 0);\n__decorate([serialize()], FluentButtonMaterial.prototype, \"selectionFuzz\", void 0);\n__decorate([serialize()], FluentButtonMaterial.prototype, \"selected\", void 0);\n__decorate([serialize()], FluentButtonMaterial.prototype, \"selectionFade\", void 0);\n__decorate([serialize()], FluentButtonMaterial.prototype, \"selectionFadeSize\", void 0);\n__decorate([serialize()], FluentButtonMaterial.prototype, \"selectedDistance\", void 0);\n__decorate([serialize()], FluentButtonMaterial.prototype, \"selectedFadeLength\", void 0);\n__decorate([serialize()], FluentButtonMaterial.prototype, \"blobIntensity\", void 0);\n__decorate([serialize()], FluentButtonMaterial.prototype, \"blobFarSize\", void 0);\n__decorate([serialize()], FluentButtonMaterial.prototype, \"blobNearDistance\", void 0);\n__decorate([serialize()], FluentButtonMaterial.prototype, \"blobFarDistance\", void 0);\n__decorate([serialize()], FluentButtonMaterial.prototype, \"blobFadeLength\", void 0);\n__decorate([serialize()], FluentButtonMaterial.prototype, \"leftBlobEnable\", void 0);\n__decorate([serialize()], FluentButtonMaterial.prototype, \"leftBlobNearSize\", void 0);\n__decorate([serialize()], FluentButtonMaterial.prototype, \"leftBlobPulse\", void 0);\n__decorate([serialize()], FluentButtonMaterial.prototype, \"leftBlobFade\", void 0);\n__decorate([serialize()], FluentButtonMaterial.prototype, \"leftBlobInnerFade\", void 0);\n__decorate([serialize()], FluentButtonMaterial.prototype, \"rightBlobEnable\", void 0);\n__decorate([serialize()], FluentButtonMaterial.prototype, \"rightBlobNearSize\", void 0);\n__decorate([serialize()], FluentButtonMaterial.prototype, \"rightBlobPulse\", void 0);\n__decorate([serialize()], FluentButtonMaterial.prototype, \"rightBlobFade\", void 0);\n__decorate([serialize()], FluentButtonMaterial.prototype, \"rightBlobInnerFade\", void 0);\n__decorate([serializeAsVector3()], FluentButtonMaterial.prototype, \"activeFaceDir\", void 0);\n__decorate([serializeAsVector3()], FluentButtonMaterial.prototype, \"activeFaceUp\", void 0);\n__decorate([serialize()], FluentButtonMaterial.prototype, \"enableFade\", void 0);\n__decorate([serialize()], FluentButtonMaterial.prototype, \"fadeWidth\", void 0);\n__decorate([serialize()], FluentButtonMaterial.prototype, \"smoothActiveFace\", void 0);\n__decorate([serialize()], FluentButtonMaterial.prototype, \"showFrame\", void 0);\n__decorate([serialize()], FluentButtonMaterial.prototype, \"useBlobTexture\", void 0);\n__decorate([serializeAsVector3()], FluentButtonMaterial.prototype, \"globalLeftIndexTipPosition\", void 0);\n__decorate([serializeAsVector3()], FluentButtonMaterial.prototype, \"globalRightIndexTipPosition\", void 0);\nRegisterClass(\"BABYLON.GUI.FluentButtonMaterial\", FluentButtonMaterial);","map":{"version":3,"names":["serializeAsColor4","serializeAsVector3","serialize","SerializationHelper","Vector3","Vector4","Texture","MaterialDefines","MaterialHelper","PushMaterial","VertexBuffer","RegisterClass","Color3","Color4","EffectFallbacks","Constants","FluentButtonMaterialDefines","constructor","RELATIVE_WIDTH","ENABLE_FADE","_needNormals","_needUVs","rebuild","FluentButtonMaterial","name","scene","edgeWidth","edgeColor","proximityMaxIntensity","proximityFarDistance","proximityNearRadius","proximityAnisotropy","selectionFuzz","selected","selectionFade","selectionFadeSize","selectedDistance","selectedFadeLength","blobIntensity","blobFarSize","blobNearDistance","blobFarDistance","blobFadeLength","leftBlobEnable","leftBlobNearSize","leftBlobPulse","leftBlobFade","leftBlobInnerFade","rightBlobEnable","rightBlobNearSize","rightBlobPulse","rightBlobFade","rightBlobInnerFade","activeFaceDir","activeFaceUp","enableFade","fadeWidth","smoothActiveFace","showFrame","useBlobTexture","globalLeftIndexTipPosition","Zero","globalRightIndexTipPosition","alphaMode","ALPHA_ADD","disableDepthWrite","backFaceCulling","_blobTexture","BLOB_TEXTURE_URL","getScene","NEAREST_SAMPLINGMODE","needAlphaBlending","needAlphaTesting","getAlphaTestTexture","isReadyForSubMesh","mesh","subMesh","isFrozen","effect","_wasPreviouslyReady","materialDefines","defines","_isReadyForSubMesh","engine","getEngine","PrepareDefinesForAttributes","isDirty","markAsProcessed","resetCachedMaterial","fallbacks","FOG","addFallback","HandleFallbacksForShadows","IMAGEPROCESSINGPOSTPROCESS","imageProcessingConfiguration","applyByPostProcess","attribs","PositionKind","NORMAL","push","NormalKind","UV1","UVKind","UV2","UV2Kind","VERTEXCOLOR","ColorKind","TANGENT","TangentKind","PrepareAttributesForInstances","shaderName","join","toString","uniforms","samplers","uniformBuffers","Array","PrepareUniformsAndSamplersList","uniformsNames","uniformBuffersNames","maxSimultaneousLights","setEffect","createEffect","attributes","onCompiled","onError","indexParameters","_materialContext","isReady","_renderId","getRenderId","bindForSubMesh","world","_activeEffect","bindOnlyWorldMatrix","setMatrix","getTransformMatrix","setVector3","activeCamera","position","setTexture","setFloat","setColor4","r","g","b","a","setVector4","x","y","z","_afterBind","getAnimatables","dispose","forceDisposeEffect","clone","Clone","serializationObject","customType","getClassName","Parse","source","rootUrl","__decorate"],"sources":["../../../../../../dev/gui/src/3D/materials/fluentButton/fluentButtonMaterial.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/naming-convention */\r\nimport type { Nullable } from \"core/types\";\r\nimport { serializeAsColor4, serializeAsVector3, serialize, SerializationHelper } from \"core/Misc/decorators\";\r\nimport type { Matrix } from \"core/Maths/math.vector\";\r\nimport { Vector3, Vector4 } from \"core/Maths/math.vector\";\r\nimport type { IAnimatable } from \"core/Animations/animatable.interface\";\r\nimport type { BaseTexture } from \"core/Materials/Textures/baseTexture\";\r\nimport { Texture } from \"core/Materials/Textures/texture\";\r\nimport { MaterialDefines } from \"core/Materials/materialDefines\";\r\nimport { MaterialHelper } from \"core/Materials/materialHelper\";\r\nimport type { IEffectCreationOptions } from \"core/Materials/effect\";\r\nimport { PushMaterial } from \"core/Materials/pushMaterial\";\r\nimport { VertexBuffer } from \"core/Buffers/buffer\";\r\nimport type { AbstractMesh } from \"core/Meshes/abstractMesh\";\r\nimport type { SubMesh } from \"core/Meshes/subMesh\";\r\nimport type { Mesh } from \"core/Meshes/mesh\";\r\nimport type { Scene } from \"core/scene\";\r\nimport { RegisterClass } from \"core/Misc/typeStore\";\r\nimport { Color3, Color4 } from \"core/Maths/math.color\";\r\nimport { EffectFallbacks } from \"core/Materials/effectFallbacks\";\r\nimport { Constants } from \"core/Engines/constants\";\r\n\r\nimport \"./shaders/fluentButton.fragment\";\r\nimport \"./shaders/fluentButton.vertex\";\r\n\r\n/** @internal */\r\nclass FluentButtonMaterialDefines extends MaterialDefines {\r\n    public RELATIVE_WIDTH = true;\r\n    public ENABLE_FADE = true;\r\n\r\n    constructor() {\r\n        super();\r\n        this._needNormals = true;\r\n        this._needUVs = true;\r\n        this.rebuild();\r\n    }\r\n}\r\n\r\n/**\r\n * Class used to render square buttons with fluent design\r\n * @since 5.0.0\r\n */\r\nexport class FluentButtonMaterial extends PushMaterial {\r\n    /**\r\n     * URL pointing to the texture used to define the coloring for the fluent blob effect.\r\n     */\r\n    public static BLOB_TEXTURE_URL = \"https://assets.babylonjs.com/meshes/MRTK/mrtk-fluent-button-blob.png\";\r\n\r\n    /**\r\n     * Gets or sets the width of the glowing edge, relative to the scale of the button.\r\n     * (Default is 4% of the height).\r\n     */\r\n    @serialize()\r\n    public edgeWidth = 0.04;\r\n\r\n    /**\r\n     * Gets or sets the color of the glowing edge.\r\n     */\r\n    @serializeAsColor4()\r\n    public edgeColor = new Color4(0.592157, 0.592157, 0.592157, 1.0);\r\n\r\n    /**\r\n     * Gets or sets the maximum intensity of the proximity light.\r\n     */\r\n    @serialize()\r\n    public proximityMaxIntensity = 0.45;\r\n\r\n    /**\r\n     * Gets or sets the maximum distance for the proximity light (Default is 16mm).\r\n     */\r\n    @serialize()\r\n    public proximityFarDistance = 0.16;\r\n\r\n    /**\r\n     * Gets or sets the radius of the proximity light when near to the surface.\r\n     */\r\n    @serialize()\r\n    public proximityNearRadius = 1.5;\r\n\r\n    /**\r\n     * Gets or sets the anisotropy of the proximity light.\r\n     */\r\n    @serialize()\r\n    public proximityAnisotropy = 1;\r\n\r\n    /**\r\n     * Gets or sets the amount of fuzzing in the selection focus.\r\n     */\r\n    @serialize()\r\n    public selectionFuzz = 0.5;\r\n\r\n    /**\r\n     * Gets or sets an override value to display the button as selected.\r\n     */\r\n    @serialize()\r\n    public selected = 0;\r\n\r\n    /**\r\n     * Gets or sets a value to manually fade the blob size.\r\n     */\r\n    @serialize()\r\n    public selectionFade = 0;\r\n\r\n    /**\r\n     * Gets or sets a value to manually shrink the blob size as it fades (see selectionFade).\r\n     */\r\n    @serialize()\r\n    public selectionFadeSize = 0.3;\r\n\r\n    /**\r\n     * Gets or sets the distance from the button the cursor should be for the button\r\n     * to appear selected (Default is 8cm).\r\n     */\r\n    @serialize()\r\n    public selectedDistance = 0.08;\r\n\r\n    /**\r\n     * Gets or sets the fall-off distance for the selection fade (Default is 8cm).\r\n     */\r\n    @serialize()\r\n    public selectedFadeLength = 0.08;\r\n\r\n    /**\r\n     * Gets or sets the intensity of the luminous blob (Ranges 0-1, default is 0.5).\r\n     */\r\n    @serialize()\r\n    public blobIntensity = 0.5;\r\n\r\n    /**\r\n     * The size of the blob when the pointer is at the blobFarDistance (Default is 5cm).\r\n     */\r\n    @serialize()\r\n    public blobFarSize = 0.05;\r\n\r\n    /**\r\n     * The distance at which the pointer is considered near. See [left|right]BlobNearSize. (Default is 0cm).\r\n     */\r\n    @serialize()\r\n    public blobNearDistance = 0;\r\n\r\n    /**\r\n     * The distance at which the pointer is considered far. See [left|right]BlobFarSize. (Default is 8cm).\r\n     */\r\n    @serialize()\r\n    public blobFarDistance = 0.08;\r\n\r\n    /**\r\n     * The distance over which the blob intensity fades from full to none (Default is 8cm).\r\n     */\r\n    @serialize()\r\n    public blobFadeLength = 0.08;\r\n\r\n    /**\r\n     * Gets or sets whether the blob corresponding to the left index finger is enabled.\r\n     */\r\n    @serialize()\r\n    public leftBlobEnable = true;\r\n\r\n    /**\r\n     * Gets or sets the size of the left blob when the left pointer is considered near. See blobNearDistance. (Default is 2.5cm).\r\n     */\r\n    @serialize()\r\n    public leftBlobNearSize = 0.025;\r\n\r\n    /**\r\n     * Gets or sets the progress of the pulse animation on the left blob (Ranges 0-1).\r\n     */\r\n    @serialize()\r\n    public leftBlobPulse = 0;\r\n\r\n    /**\r\n     * Gets or sets the fade factor on the left blob.\r\n     */\r\n    @serialize()\r\n    public leftBlobFade = 1;\r\n\r\n    /**\r\n     * Gets or sets the inner fade on the left blob;\r\n     */\r\n    @serialize()\r\n    public leftBlobInnerFade = 0.01;\r\n\r\n    /**\r\n     * Gets or sets whether the blob corresponding to the right index finger is enabled.\r\n     */\r\n    @serialize()\r\n    public rightBlobEnable = true;\r\n\r\n    /**\r\n     * Gets or sets the size of the right blob when the right pointer is considered near. See blobNearDistance. (Default is 2.5cm).\r\n     */\r\n    @serialize()\r\n    public rightBlobNearSize = 0.025;\r\n\r\n    /**\r\n     * Gets or sets the progress of the pulse animation on the right blob (Ranges 0-1).\r\n     */\r\n    @serialize()\r\n    public rightBlobPulse = 0;\r\n\r\n    /**\r\n     * Gets or sets the fade factor on the right blob.\r\n     */\r\n    @serialize()\r\n    public rightBlobFade = 1;\r\n\r\n    /**\r\n     * Gets or sets the inner fade on the right blob;\r\n     */\r\n    @serialize()\r\n    public rightBlobInnerFade = 0.01;\r\n\r\n    /**\r\n     * Gets or sets the direction of the active face before the world transform is applied.\r\n     * This should almost always be set to -z.\r\n     */\r\n    @serializeAsVector3()\r\n    public activeFaceDir = new Vector3(0, 0, -1);\r\n\r\n    /**\r\n     * Gets or sets the button's up direction before the world transform is applied.\r\n     * This should almost always be set to +y.\r\n     */\r\n    @serializeAsVector3()\r\n    public activeFaceUp = new Vector3(0, 1, 0);\r\n\r\n    /**\r\n     * Gets or sets whether the edge fade effect is enabled.\r\n     */\r\n    @serialize()\r\n    public enableFade = true;\r\n\r\n    /**\r\n     * Gets or sets a value corresponding to the width of the edge fade effect (Default 1.5).\r\n     */\r\n    @serialize()\r\n    public fadeWidth = 1.5;\r\n\r\n    /**\r\n     * Gets or sets whether the active face is smoothly interpolated.\r\n     */\r\n    @serialize()\r\n    public smoothActiveFace = true;\r\n\r\n    /**\r\n     * Gets or sets whether the frame of the fluent button model is visible.\r\n     * This is usually only enabled for debugging purposes.\r\n     */\r\n    @serialize()\r\n    public showFrame = false;\r\n\r\n    /**\r\n     * Gets or sets whether the blob color texture is used for the proximity\r\n     * light effect. This is usually only disabled for debugging purposes.\r\n     */\r\n    @serialize()\r\n    public useBlobTexture = true;\r\n\r\n    /**\r\n     * Gets or sets the world-space position of the tip of the left index finger.\r\n     */\r\n    @serializeAsVector3()\r\n    public globalLeftIndexTipPosition = Vector3.Zero();\r\n\r\n    /**\r\n     * Gets or sets the world-space position of the tip of the right index finger.\r\n     */\r\n    @serializeAsVector3()\r\n    public globalRightIndexTipPosition = Vector3.Zero();\r\n\r\n    private _blobTexture: Texture;\r\n\r\n    constructor(name: string, scene?: Scene) {\r\n        super(name, scene);\r\n        this.alphaMode = Constants.ALPHA_ADD;\r\n        this.disableDepthWrite = true;\r\n        this.backFaceCulling = false;\r\n\r\n        this._blobTexture = new Texture(FluentButtonMaterial.BLOB_TEXTURE_URL, this.getScene(), true, false, Texture.NEAREST_SAMPLINGMODE);\r\n    }\r\n\r\n    public needAlphaBlending(): boolean {\r\n        return true;\r\n    }\r\n\r\n    public needAlphaTesting(): boolean {\r\n        return true;\r\n    }\r\n\r\n    public getAlphaTestTexture(): Nullable<BaseTexture> {\r\n        return null;\r\n    }\r\n\r\n    // Methods\r\n    public isReadyForSubMesh(mesh: AbstractMesh, subMesh: SubMesh): boolean {\r\n        if (this.isFrozen) {\r\n            if (subMesh.effect && subMesh.effect._wasPreviouslyReady) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        if (!subMesh.materialDefines) {\r\n            subMesh.materialDefines = new FluentButtonMaterialDefines();\r\n        }\r\n\r\n        const defines = <FluentButtonMaterialDefines>subMesh.materialDefines;\r\n        const scene = this.getScene();\r\n\r\n        if (this._isReadyForSubMesh(subMesh)) {\r\n            return true;\r\n        }\r\n\r\n        const engine = scene.getEngine();\r\n\r\n        // Attribs\r\n        MaterialHelper.PrepareDefinesForAttributes(mesh, defines, true, false);\r\n\r\n        // Get correct effect\r\n        if (defines.isDirty) {\r\n            defines.markAsProcessed();\r\n\r\n            scene.resetCachedMaterial();\r\n\r\n            // Fallbacks\r\n            const fallbacks = new EffectFallbacks();\r\n            if (defines.FOG) {\r\n                fallbacks.addFallback(1, \"FOG\");\r\n            }\r\n\r\n            MaterialHelper.HandleFallbacksForShadows(defines, fallbacks);\r\n\r\n            defines.IMAGEPROCESSINGPOSTPROCESS = scene.imageProcessingConfiguration.applyByPostProcess;\r\n\r\n            //Attributes\r\n            const attribs = [VertexBuffer.PositionKind];\r\n\r\n            if (defines.NORMAL) {\r\n                attribs.push(VertexBuffer.NormalKind);\r\n            }\r\n\r\n            if (defines.UV1) {\r\n                attribs.push(VertexBuffer.UVKind);\r\n            }\r\n\r\n            if (defines.UV2) {\r\n                attribs.push(VertexBuffer.UV2Kind);\r\n            }\r\n\r\n            if (defines.VERTEXCOLOR) {\r\n                attribs.push(VertexBuffer.ColorKind);\r\n            }\r\n\r\n            if (defines.TANGENT) {\r\n                attribs.push(VertexBuffer.TangentKind);\r\n            }\r\n\r\n            MaterialHelper.PrepareAttributesForInstances(attribs, defines);\r\n\r\n            // Legacy browser patch\r\n            const shaderName = \"fluentButton\";\r\n            const join = defines.toString();\r\n\r\n            const uniforms = [\r\n                \"world\",\r\n                \"viewProjection\",\r\n                \"cameraPosition\",\r\n\r\n                \"_Edge_Width_\",\r\n                \"_Edge_Color_\",\r\n                \"_Relative_Width_\",\r\n                \"_Proximity_Max_Intensity_\",\r\n                \"_Proximity_Far_Distance_\",\r\n                \"_Proximity_Near_Radius_\",\r\n                \"_Proximity_Anisotropy_\",\r\n                \"_Selection_Fuzz_\",\r\n                \"_Selected_\",\r\n                \"_Selection_Fade_\",\r\n                \"_Selection_Fade_Size_\",\r\n                \"_Selected_Distance_\",\r\n                \"_Selected_Fade_Length_\",\r\n                \"_Blob_Enable_\",\r\n                \"_Blob_Position_\",\r\n                \"_Blob_Intensity_\",\r\n                \"_Blob_Near_Size_\",\r\n                \"_Blob_Far_Size_\",\r\n                \"_Blob_Near_Distance_\",\r\n                \"_Blob_Far_Distance_\",\r\n                \"_Blob_Fade_Length_\",\r\n                \"_Blob_Inner_Fade_\",\r\n                \"_Blob_Pulse_\",\r\n                \"_Blob_Fade_\",\r\n                \"_Blob_Texture_\",\r\n                \"_Blob_Enable_2_\",\r\n                \"_Blob_Position_2_\",\r\n                \"_Blob_Near_Size_2_\",\r\n                \"_Blob_Inner_Fade_2_\",\r\n                \"_Blob_Pulse_2_\",\r\n                \"_Blob_Fade_2_\",\r\n                \"_Active_Face_Dir_\",\r\n                \"_Active_Face_Up_\",\r\n                \"_Enable_Fade_\",\r\n                \"_Fade_Width_\",\r\n                \"_Smooth_Active_Face_\",\r\n                \"_Show_Frame_\",\r\n                \"_Use_Blob_Texture_\",\r\n\r\n                \"Use_Global_Left_Index\",\r\n                \"Use_Global_Right_Index\",\r\n                \"Global_Left_Index_Tip_Position\",\r\n                \"Global_Right_Index_Tip_Position\",\r\n                \"Global_Left_Thumb_Tip_Position\",\r\n                \"Global_Right_Thumb_Tip_Position\",\r\n                \"Global_Left_Index_Tip_Proximity\",\r\n                \"Global_Right_Index_Tip_Proximity\",\r\n            ];\r\n            const samplers: string[] = [\"_Blob_Texture_\"];\r\n            const uniformBuffers = new Array<string>();\r\n\r\n            MaterialHelper.PrepareUniformsAndSamplersList(<IEffectCreationOptions>{\r\n                uniformsNames: uniforms,\r\n                uniformBuffersNames: uniformBuffers,\r\n                samplers: samplers,\r\n                defines: defines,\r\n                maxSimultaneousLights: 4,\r\n            });\r\n\r\n            subMesh.setEffect(\r\n                scene.getEngine().createEffect(\r\n                    shaderName,\r\n                    <IEffectCreationOptions>{\r\n                        attributes: attribs,\r\n                        uniformsNames: uniforms,\r\n                        uniformBuffersNames: uniformBuffers,\r\n                        samplers: samplers,\r\n                        defines: join,\r\n                        fallbacks: fallbacks,\r\n                        onCompiled: this.onCompiled,\r\n                        onError: this.onError,\r\n                        indexParameters: { maxSimultaneousLights: 4 },\r\n                    },\r\n                    engine\r\n                ),\r\n                defines,\r\n                this._materialContext\r\n            );\r\n        }\r\n        if (!subMesh.effect || !subMesh.effect.isReady()) {\r\n            return false;\r\n        }\r\n\r\n        defines._renderId = scene.getRenderId();\r\n        subMesh.effect._wasPreviouslyReady = true;\r\n\r\n        return true;\r\n    }\r\n\r\n    public bindForSubMesh(world: Matrix, mesh: Mesh, subMesh: SubMesh): void {\r\n        const scene = this.getScene();\r\n\r\n        const defines = <FluentButtonMaterialDefines>subMesh.materialDefines;\r\n        if (!defines) {\r\n            return;\r\n        }\r\n\r\n        const effect = subMesh.effect;\r\n        if (!effect) {\r\n            return;\r\n        }\r\n\r\n        this._activeEffect = effect;\r\n\r\n        // Matrices\r\n        this.bindOnlyWorldMatrix(world);\r\n        this._activeEffect.setMatrix(\"viewProjection\", scene.getTransformMatrix());\r\n        this._activeEffect.setVector3(\"cameraPosition\", scene.activeCamera!.position);\r\n\r\n        // \"Blob Texture\"\r\n        this._activeEffect.setTexture(\"_Blob_Texture_\", this._blobTexture);\r\n\r\n        // \"Wireframe\"\r\n        this._activeEffect.setFloat(\"_Edge_Width_\", this.edgeWidth);\r\n        this._activeEffect.setColor4(\"_Edge_Color_\", new Color3(this.edgeColor.r, this.edgeColor.g, this.edgeColor.b), this.edgeColor.a);\r\n        //define _Relative_Width_ true;\r\n\r\n        // \"Proximity\"\r\n        this._activeEffect.setFloat(\"_Proximity_Max_Intensity_\", this.proximityMaxIntensity);\r\n        this._activeEffect.setFloat(\"_Proximity_Far_Distance_\", this.proximityFarDistance);\r\n        this._activeEffect.setFloat(\"_Proximity_Near_Radius_\", this.proximityNearRadius);\r\n        this._activeEffect.setFloat(\"_Proximity_Anisotropy_\", this.proximityAnisotropy);\r\n\r\n        // \"Selection\"\r\n        this._activeEffect.setFloat(\"_Selection_Fuzz_\", this.selectionFuzz);\r\n        this._activeEffect.setFloat(\"_Selected_\", this.selected);\r\n        this._activeEffect.setFloat(\"_Selection_Fade_\", this.selectionFade);\r\n        this._activeEffect.setFloat(\"_Selection_Fade_Size_\", this.selectionFadeSize);\r\n        this._activeEffect.setFloat(\"_Selected_Distance_\", this.selectedDistance);\r\n        this._activeEffect.setFloat(\"_Selected_Fade_Length_\", this.selectedFadeLength);\r\n\r\n        // \"Blob\"\r\n        this._activeEffect.setFloat(\"_Blob_Enable_\", this.leftBlobEnable ? 1.0 : 0.0);\r\n        this._activeEffect.setFloat(\"_Blob_Intensity_\", this.blobIntensity);\r\n        this._activeEffect.setFloat(\"_Blob_Near_Size_\", this.leftBlobNearSize);\r\n        this._activeEffect.setFloat(\"_Blob_Far_Size_\", this.blobFarSize);\r\n        this._activeEffect.setFloat(\"_Blob_Near_Distance_\", this.blobNearDistance);\r\n        this._activeEffect.setFloat(\"_Blob_Far_Distance_\", this.blobFarDistance);\r\n        this._activeEffect.setFloat(\"_Blob_Fade_Length_\", this.blobFadeLength);\r\n        this._activeEffect.setFloat(\"_Blob_Inner_Fade_\", this.leftBlobInnerFade);\r\n        this._activeEffect.setFloat(\"_Blob_Pulse_\", this.leftBlobPulse);\r\n        this._activeEffect.setFloat(\"_Blob_Fade_\", this.leftBlobFade);\r\n\r\n        // \"Blob 2\"\r\n        this._activeEffect.setFloat(\"_Blob_Enable_2_\", this.rightBlobEnable ? 1.0 : 0.0);\r\n        this._activeEffect.setFloat(\"_Blob_Near_Size_2_\", this.rightBlobNearSize);\r\n        this._activeEffect.setFloat(\"_Blob_Inner_Fade_2_\", this.rightBlobInnerFade);\r\n        this._activeEffect.setFloat(\"_Blob_Pulse_2_\", this.rightBlobPulse);\r\n        this._activeEffect.setFloat(\"_Blob_Fade_2_\", this.rightBlobFade);\r\n\r\n        // \"Active Face\"\r\n        this._activeEffect.setVector3(\"_Active_Face_Dir_\", this.activeFaceDir);\r\n        this._activeEffect.setVector3(\"_Active_Face_Up_\", this.activeFaceUp);\r\n\r\n        // \"Hololens Edge Fade\"\r\n        //define _Enable_Fade_ true;\r\n        this._activeEffect.setFloat(\"_Fade_Width_\", this.fadeWidth);\r\n        this._activeEffect.setFloat(\"_Smooth_Active_Face_\", this.smoothActiveFace ? 1.0 : 0.0);\r\n\r\n        // \"Debug\"\r\n        this._activeEffect.setFloat(\"_Show_Frame_\", this.showFrame ? 1.0 : 0.0);\r\n        this._activeEffect.setFloat(\"_Use_Blob_Texture_\", this.useBlobTexture ? 1.0 : 0.0);\r\n\r\n        // Global inputs\r\n        this._activeEffect.setFloat(\"Use_Global_Left_Index\", 1.0);\r\n        this._activeEffect.setFloat(\"Use_Global_Right_Index\", 1.0);\r\n\r\n        this._activeEffect.setVector4(\r\n            \"Global_Left_Index_Tip_Position\",\r\n            new Vector4(this.globalLeftIndexTipPosition.x, this.globalLeftIndexTipPosition.y, this.globalLeftIndexTipPosition.z, 1.0)\r\n        );\r\n        this._activeEffect.setVector4(\r\n            \"Global_Right_Index_Tip_Position\",\r\n            new Vector4(this.globalRightIndexTipPosition.x, this.globalRightIndexTipPosition.y, this.globalRightIndexTipPosition.z, 1.0)\r\n        );\r\n\r\n        this._afterBind(mesh, this._activeEffect);\r\n    }\r\n\r\n    /**\r\n     * Get the list of animatables in the material.\r\n     * @returns the list of animatables object used in the material\r\n     */\r\n    public getAnimatables(): IAnimatable[] {\r\n        return [];\r\n    }\r\n\r\n    public dispose(forceDisposeEffect?: boolean): void {\r\n        super.dispose(forceDisposeEffect);\r\n    }\r\n\r\n    public clone(name: string): FluentButtonMaterial {\r\n        return SerializationHelper.Clone(() => new FluentButtonMaterial(name, this.getScene()), this);\r\n    }\r\n\r\n    public serialize(): any {\r\n        const serializationObject = super.serialize();\r\n        serializationObject.customType = \"BABYLON.FluentButtonMaterial\";\r\n        return serializationObject;\r\n    }\r\n\r\n    public getClassName(): string {\r\n        return \"FluentButtonMaterial\";\r\n    }\r\n\r\n    // Statics\r\n    public static Parse(source: any, scene: Scene, rootUrl: string): FluentButtonMaterial {\r\n        return SerializationHelper.Parse(() => new FluentButtonMaterial(source.name, scene), source, scene, rootUrl);\r\n    }\r\n}\r\n\r\nRegisterClass(\"BABYLON.GUI.FluentButtonMaterial\", FluentButtonMaterial);\r\n"],"mappings":";;AAEA,SAASA,iBAAiB,EAAEC,kBAAkB,EAAEC,SAAS,EAAEC,mBAAmB,QAAE;AAEhF,SAASC,OAAO,EAAEC,OAAO,QAAE;AAG3B,SAASC,OAAO,QAAE;AAClB,SAASC,eAAe,QAAE;AAC1B,SAASC,cAAc,QAAE;AAEzB,SAASC,YAAY,QAAE;AACvB,SAASC,YAAY,QAAE;AAKvB,SAASC,aAAa,QAAE;AACxB,SAASC,MAAM,EAAEC,MAAM,QAAE;AACzB,SAASC,eAAe,QAAE;AAC1B,SAASC,SAAS,QAAE;AAEpB,OAAO,oCAAkC;AACzC,OAAO,kCAAgC;AAEvC;AACA,MAAMC,2BAA4B,SAAQT,eAAe;EAIrDU,YAAA;IACI,KAAK,EAAE;IAJJ,KAAAC,cAAc,GAAG,IAAI;IACrB,KAAAC,WAAW,GAAG,IAAI;IAIrB,IAAI,CAACC,YAAY,GAAG,IAAI;IACxB,IAAI,CAACC,QAAQ,GAAG,IAAI;IACpB,IAAI,CAACC,OAAO,EAAE;EAClB;;AAGJ;;;;AAIA,OAAM,MAAOC,oBAAqB,SAAQd,YAAY;EAsOlDQ,YAAYO,IAAY,EAAEC,KAAa;IACnC,KAAK,CAACD,IAAI,EAAEC,KAAK,CAAC;IAjOtB;;;;IAKO,KAAAC,SAAS,GAAG,IAAI;IAEvB;;;IAIO,KAAAC,SAAS,GAAG,IAAId,MAAM,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,GAAG,CAAC;IAEhE;;;IAIO,KAAAe,qBAAqB,GAAG,IAAI;IAEnC;;;IAIO,KAAAC,oBAAoB,GAAG,IAAI;IAElC;;;IAIO,KAAAC,mBAAmB,GAAG,GAAG;IAEhC;;;IAIO,KAAAC,mBAAmB,GAAG,CAAC;IAE9B;;;IAIO,KAAAC,aAAa,GAAG,GAAG;IAE1B;;;IAIO,KAAAC,QAAQ,GAAG,CAAC;IAEnB;;;IAIO,KAAAC,aAAa,GAAG,CAAC;IAExB;;;IAIO,KAAAC,iBAAiB,GAAG,GAAG;IAE9B;;;;IAKO,KAAAC,gBAAgB,GAAG,IAAI;IAE9B;;;IAIO,KAAAC,kBAAkB,GAAG,IAAI;IAEhC;;;IAIO,KAAAC,aAAa,GAAG,GAAG;IAE1B;;;IAIO,KAAAC,WAAW,GAAG,IAAI;IAEzB;;;IAIO,KAAAC,gBAAgB,GAAG,CAAC;IAE3B;;;IAIO,KAAAC,eAAe,GAAG,IAAI;IAE7B;;;IAIO,KAAAC,cAAc,GAAG,IAAI;IAE5B;;;IAIO,KAAAC,cAAc,GAAG,IAAI;IAE5B;;;IAIO,KAAAC,gBAAgB,GAAG,KAAK;IAE/B;;;IAIO,KAAAC,aAAa,GAAG,CAAC;IAExB;;;IAIO,KAAAC,YAAY,GAAG,CAAC;IAEvB;;;IAIO,KAAAC,iBAAiB,GAAG,IAAI;IAE/B;;;IAIO,KAAAC,eAAe,GAAG,IAAI;IAE7B;;;IAIO,KAAAC,iBAAiB,GAAG,KAAK;IAEhC;;;IAIO,KAAAC,cAAc,GAAG,CAAC;IAEzB;;;IAIO,KAAAC,aAAa,GAAG,CAAC;IAExB;;;IAIO,KAAAC,kBAAkB,GAAG,IAAI;IAEhC;;;;IAKO,KAAAC,aAAa,GAAG,IAAIjD,OAAO,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;IAE5C;;;;IAKO,KAAAkD,YAAY,GAAG,IAAIlD,OAAO,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;IAE1C;;;IAIO,KAAAmD,UAAU,GAAG,IAAI;IAExB;;;IAIO,KAAAC,SAAS,GAAG,GAAG;IAEtB;;;IAIO,KAAAC,gBAAgB,GAAG,IAAI;IAE9B;;;;IAKO,KAAAC,SAAS,GAAG,KAAK;IAExB;;;;IAKO,KAAAC,cAAc,GAAG,IAAI;IAE5B;;;IAIO,KAAAC,0BAA0B,GAAGxD,OAAO,CAACyD,IAAI,EAAE;IAElD;;;IAIO,KAAAC,2BAA2B,GAAG1D,OAAO,CAACyD,IAAI,EAAE;IAM/C,IAAI,CAACE,SAAS,GAAGhD,SAAS,CAACiD,SAAS;IACpC,IAAI,CAACC,iBAAiB,GAAG,IAAI;IAC7B,IAAI,CAACC,eAAe,GAAG,KAAK;IAE5B,IAAI,CAACC,YAAY,GAAG,IAAI7D,OAAO,CAACiB,oBAAoB,CAAC6C,gBAAgB,EAAE,IAAI,CAACC,QAAQ,EAAE,EAAE,IAAI,EAAE,KAAK,EAAE/D,OAAO,CAACgE,oBAAoB,CAAC;EACtI;EAEOC,iBAAiBA,CAAA;IACpB,OAAO,IAAI;EACf;EAEOC,gBAAgBA,CAAA;IACnB,OAAO,IAAI;EACf;EAEOC,mBAAmBA,CAAA;IACtB,OAAO,IAAI;EACf;EAEA;EACOC,iBAAiBA,CAACC,IAAkB,EAAEC,OAAgB;IACzD,IAAI,IAAI,CAACC,QAAQ,EAAE;MACf,IAAID,OAAO,CAACE,MAAM,IAAIF,OAAO,CAACE,MAAM,CAACC,mBAAmB,EAAE;QACtD,OAAO,IAAI;;;IAInB,IAAI,CAACH,OAAO,CAACI,eAAe,EAAE;MAC1BJ,OAAO,CAACI,eAAe,GAAG,IAAIhE,2BAA2B,EAAE;;IAG/D,MAAMiE,OAAO,GAAgCL,OAAO,CAACI,eAAe;IACpE,MAAMvD,KAAK,GAAG,IAAI,CAAC4C,QAAQ,EAAE;IAE7B,IAAI,IAAI,CAACa,kBAAkB,CAACN,OAAO,CAAC,EAAE;MAClC,OAAO,IAAI;;IAGf,MAAMO,MAAM,GAAG1D,KAAK,CAAC2D,SAAS,EAAE;IAEhC;IACA5E,cAAc,CAAC6E,2BAA2B,CAACV,IAAI,EAAEM,OAAO,EAAE,IAAI,EAAE,KAAK,CAAC;IAEtE;IACA,IAAIA,OAAO,CAACK,OAAO,EAAE;MACjBL,OAAO,CAACM,eAAe,EAAE;MAEzB9D,KAAK,CAAC+D,mBAAmB,EAAE;MAE3B;MACA,MAAMC,SAAS,GAAG,IAAI3E,eAAe,EAAE;MACvC,IAAImE,OAAO,CAACS,GAAG,EAAE;QACbD,SAAS,CAACE,WAAW,CAAC,CAAC,EAAE,KAAK,CAAC;;MAGnCnF,cAAc,CAACoF,yBAAyB,CAACX,OAAO,EAAEQ,SAAS,CAAC;MAE5DR,OAAO,CAACY,0BAA0B,GAAGpE,KAAK,CAACqE,4BAA4B,CAACC,kBAAkB;MAE1F;MACA,MAAMC,OAAO,GAAG,CAACtF,YAAY,CAACuF,YAAY,CAAC;MAE3C,IAAIhB,OAAO,CAACiB,MAAM,EAAE;QAChBF,OAAO,CAACG,IAAI,CAACzF,YAAY,CAAC0F,UAAU,CAAC;;MAGzC,IAAInB,OAAO,CAACoB,GAAG,EAAE;QACbL,OAAO,CAACG,IAAI,CAACzF,YAAY,CAAC4F,MAAM,CAAC;;MAGrC,IAAIrB,OAAO,CAACsB,GAAG,EAAE;QACbP,OAAO,CAACG,IAAI,CAACzF,YAAY,CAAC8F,OAAO,CAAC;;MAGtC,IAAIvB,OAAO,CAACwB,WAAW,EAAE;QACrBT,OAAO,CAACG,IAAI,CAACzF,YAAY,CAACgG,SAAS,CAAC;;MAGxC,IAAIzB,OAAO,CAAC0B,OAAO,EAAE;QACjBX,OAAO,CAACG,IAAI,CAACzF,YAAY,CAACkG,WAAW,CAAC;;MAG1CpG,cAAc,CAACqG,6BAA6B,CAACb,OAAO,EAAEf,OAAO,CAAC;MAE9D;MACA,MAAM6B,UAAU,GAAG,cAAc;MACjC,MAAMC,IAAI,GAAG9B,OAAO,CAAC+B,QAAQ,EAAE;MAE/B,MAAMC,QAAQ,GAAG,CACb,OAAO,EACP,gBAAgB,EAChB,gBAAgB,EAEhB,cAAc,EACd,cAAc,EACd,kBAAkB,EAClB,2BAA2B,EAC3B,0BAA0B,EAC1B,yBAAyB,EACzB,wBAAwB,EACxB,kBAAkB,EAClB,YAAY,EACZ,kBAAkB,EAClB,uBAAuB,EACvB,qBAAqB,EACrB,wBAAwB,EACxB,eAAe,EACf,iBAAiB,EACjB,kBAAkB,EAClB,kBAAkB,EAClB,iBAAiB,EACjB,sBAAsB,EACtB,qBAAqB,EACrB,oBAAoB,EACpB,mBAAmB,EACnB,cAAc,EACd,aAAa,EACb,gBAAgB,EAChB,iBAAiB,EACjB,mBAAmB,EACnB,oBAAoB,EACpB,qBAAqB,EACrB,gBAAgB,EAChB,eAAe,EACf,mBAAmB,EACnB,kBAAkB,EAClB,eAAe,EACf,cAAc,EACd,sBAAsB,EACtB,cAAc,EACd,oBAAoB,EAEpB,uBAAuB,EACvB,wBAAwB,EACxB,gCAAgC,EAChC,iCAAiC,EACjC,gCAAgC,EAChC,iCAAiC,EACjC,iCAAiC,EACjC,kCAAkC,CACrC;MACD,MAAMC,QAAQ,GAAa,CAAC,gBAAgB,CAAC;MAC7C,MAAMC,cAAc,GAAG,IAAIC,KAAK,EAAU;MAE1C5G,cAAc,CAAC6G,8BAA8B,CAAyB;QAClEC,aAAa,EAAEL,QAAQ;QACvBM,mBAAmB,EAAEJ,cAAc;QACnCD,QAAQ,EAAEA,QAAQ;QAClBjC,OAAO,EAAEA,OAAO;QAChBuC,qBAAqB,EAAE;OAC1B,CAAC;MAEF5C,OAAO,CAAC6C,SAAS,CACbhG,KAAK,CAAC2D,SAAS,EAAE,CAACsC,YAAY,CAC1BZ,UAAU,EACc;QACpBa,UAAU,EAAE3B,OAAO;QACnBsB,aAAa,EAAEL,QAAQ;QACvBM,mBAAmB,EAAEJ,cAAc;QACnCD,QAAQ,EAAEA,QAAQ;QAClBjC,OAAO,EAAE8B,IAAI;QACbtB,SAAS,EAAEA,SAAS;QACpBmC,UAAU,EAAE,IAAI,CAACA,UAAU;QAC3BC,OAAO,EAAE,IAAI,CAACA,OAAO;QACrBC,eAAe,EAAE;UAAEN,qBAAqB,EAAE;QAAC;OAC9C,EACDrC,MAAM,CACT,EACDF,OAAO,EACP,IAAI,CAAC8C,gBAAgB,CACxB;;IAEL,IAAI,CAACnD,OAAO,CAACE,MAAM,IAAI,CAACF,OAAO,CAACE,MAAM,CAACkD,OAAO,EAAE,EAAE;MAC9C,OAAO,KAAK;;IAGhB/C,OAAO,CAACgD,SAAS,GAAGxG,KAAK,CAACyG,WAAW,EAAE;IACvCtD,OAAO,CAACE,MAAM,CAACC,mBAAmB,GAAG,IAAI;IAEzC,OAAO,IAAI;EACf;EAEOoD,cAAcA,CAACC,KAAa,EAAEzD,IAAU,EAAEC,OAAgB;IAC7D,MAAMnD,KAAK,GAAG,IAAI,CAAC4C,QAAQ,EAAE;IAE7B,MAAMY,OAAO,GAAgCL,OAAO,CAACI,eAAe;IACpE,IAAI,CAACC,OAAO,EAAE;MACV;;IAGJ,MAAMH,MAAM,GAAGF,OAAO,CAACE,MAAM;IAC7B,IAAI,CAACA,MAAM,EAAE;MACT;;IAGJ,IAAI,CAACuD,aAAa,GAAGvD,MAAM;IAE3B;IACA,IAAI,CAACwD,mBAAmB,CAACF,KAAK,CAAC;IAC/B,IAAI,CAACC,aAAa,CAACE,SAAS,CAAC,gBAAgB,EAAE9G,KAAK,CAAC+G,kBAAkB,EAAE,CAAC;IAC1E,IAAI,CAACH,aAAa,CAACI,UAAU,CAAC,gBAAgB,EAAEhH,KAAK,CAACiH,YAAa,CAACC,QAAQ,CAAC;IAE7E;IACA,IAAI,CAACN,aAAa,CAACO,UAAU,CAAC,gBAAgB,EAAE,IAAI,CAACzE,YAAY,CAAC;IAElE;IACA,IAAI,CAACkE,aAAa,CAACQ,QAAQ,CAAC,cAAc,EAAE,IAAI,CAACnH,SAAS,CAAC;IAC3D,IAAI,CAAC2G,aAAa,CAACS,SAAS,CAAC,cAAc,EAAE,IAAIlI,MAAM,CAAC,IAAI,CAACe,SAAS,CAACoH,CAAC,EAAE,IAAI,CAACpH,SAAS,CAACqH,CAAC,EAAE,IAAI,CAACrH,SAAS,CAACsH,CAAC,CAAC,EAAE,IAAI,CAACtH,SAAS,CAACuH,CAAC,CAAC;IAChI;IAEA;IACA,IAAI,CAACb,aAAa,CAACQ,QAAQ,CAAC,2BAA2B,EAAE,IAAI,CAACjH,qBAAqB,CAAC;IACpF,IAAI,CAACyG,aAAa,CAACQ,QAAQ,CAAC,0BAA0B,EAAE,IAAI,CAAChH,oBAAoB,CAAC;IAClF,IAAI,CAACwG,aAAa,CAACQ,QAAQ,CAAC,yBAAyB,EAAE,IAAI,CAAC/G,mBAAmB,CAAC;IAChF,IAAI,CAACuG,aAAa,CAACQ,QAAQ,CAAC,wBAAwB,EAAE,IAAI,CAAC9G,mBAAmB,CAAC;IAE/E;IACA,IAAI,CAACsG,aAAa,CAACQ,QAAQ,CAAC,kBAAkB,EAAE,IAAI,CAAC7G,aAAa,CAAC;IACnE,IAAI,CAACqG,aAAa,CAACQ,QAAQ,CAAC,YAAY,EAAE,IAAI,CAAC5G,QAAQ,CAAC;IACxD,IAAI,CAACoG,aAAa,CAACQ,QAAQ,CAAC,kBAAkB,EAAE,IAAI,CAAC3G,aAAa,CAAC;IACnE,IAAI,CAACmG,aAAa,CAACQ,QAAQ,CAAC,uBAAuB,EAAE,IAAI,CAAC1G,iBAAiB,CAAC;IAC5E,IAAI,CAACkG,aAAa,CAACQ,QAAQ,CAAC,qBAAqB,EAAE,IAAI,CAACzG,gBAAgB,CAAC;IACzE,IAAI,CAACiG,aAAa,CAACQ,QAAQ,CAAC,wBAAwB,EAAE,IAAI,CAACxG,kBAAkB,CAAC;IAE9E;IACA,IAAI,CAACgG,aAAa,CAACQ,QAAQ,CAAC,eAAe,EAAE,IAAI,CAAClG,cAAc,GAAG,GAAG,GAAG,GAAG,CAAC;IAC7E,IAAI,CAAC0F,aAAa,CAACQ,QAAQ,CAAC,kBAAkB,EAAE,IAAI,CAACvG,aAAa,CAAC;IACnE,IAAI,CAAC+F,aAAa,CAACQ,QAAQ,CAAC,kBAAkB,EAAE,IAAI,CAACjG,gBAAgB,CAAC;IACtE,IAAI,CAACyF,aAAa,CAACQ,QAAQ,CAAC,iBAAiB,EAAE,IAAI,CAACtG,WAAW,CAAC;IAChE,IAAI,CAAC8F,aAAa,CAACQ,QAAQ,CAAC,sBAAsB,EAAE,IAAI,CAACrG,gBAAgB,CAAC;IAC1E,IAAI,CAAC6F,aAAa,CAACQ,QAAQ,CAAC,qBAAqB,EAAE,IAAI,CAACpG,eAAe,CAAC;IACxE,IAAI,CAAC4F,aAAa,CAACQ,QAAQ,CAAC,oBAAoB,EAAE,IAAI,CAACnG,cAAc,CAAC;IACtE,IAAI,CAAC2F,aAAa,CAACQ,QAAQ,CAAC,mBAAmB,EAAE,IAAI,CAAC9F,iBAAiB,CAAC;IACxE,IAAI,CAACsF,aAAa,CAACQ,QAAQ,CAAC,cAAc,EAAE,IAAI,CAAChG,aAAa,CAAC;IAC/D,IAAI,CAACwF,aAAa,CAACQ,QAAQ,CAAC,aAAa,EAAE,IAAI,CAAC/F,YAAY,CAAC;IAE7D;IACA,IAAI,CAACuF,aAAa,CAACQ,QAAQ,CAAC,iBAAiB,EAAE,IAAI,CAAC7F,eAAe,GAAG,GAAG,GAAG,GAAG,CAAC;IAChF,IAAI,CAACqF,aAAa,CAACQ,QAAQ,CAAC,oBAAoB,EAAE,IAAI,CAAC5F,iBAAiB,CAAC;IACzE,IAAI,CAACoF,aAAa,CAACQ,QAAQ,CAAC,qBAAqB,EAAE,IAAI,CAACzF,kBAAkB,CAAC;IAC3E,IAAI,CAACiF,aAAa,CAACQ,QAAQ,CAAC,gBAAgB,EAAE,IAAI,CAAC3F,cAAc,CAAC;IAClE,IAAI,CAACmF,aAAa,CAACQ,QAAQ,CAAC,eAAe,EAAE,IAAI,CAAC1F,aAAa,CAAC;IAEhE;IACA,IAAI,CAACkF,aAAa,CAACI,UAAU,CAAC,mBAAmB,EAAE,IAAI,CAACpF,aAAa,CAAC;IACtE,IAAI,CAACgF,aAAa,CAACI,UAAU,CAAC,kBAAkB,EAAE,IAAI,CAACnF,YAAY,CAAC;IAEpE;IACA;IACA,IAAI,CAAC+E,aAAa,CAACQ,QAAQ,CAAC,cAAc,EAAE,IAAI,CAACrF,SAAS,CAAC;IAC3D,IAAI,CAAC6E,aAAa,CAACQ,QAAQ,CAAC,sBAAsB,EAAE,IAAI,CAACpF,gBAAgB,GAAG,GAAG,GAAG,GAAG,CAAC;IAEtF;IACA,IAAI,CAAC4E,aAAa,CAACQ,QAAQ,CAAC,cAAc,EAAE,IAAI,CAACnF,SAAS,GAAG,GAAG,GAAG,GAAG,CAAC;IACvE,IAAI,CAAC2E,aAAa,CAACQ,QAAQ,CAAC,oBAAoB,EAAE,IAAI,CAAClF,cAAc,GAAG,GAAG,GAAG,GAAG,CAAC;IAElF;IACA,IAAI,CAAC0E,aAAa,CAACQ,QAAQ,CAAC,uBAAuB,EAAE,GAAG,CAAC;IACzD,IAAI,CAACR,aAAa,CAACQ,QAAQ,CAAC,wBAAwB,EAAE,GAAG,CAAC;IAE1D,IAAI,CAACR,aAAa,CAACc,UAAU,CACzB,gCAAgC,EAChC,IAAI9I,OAAO,CAAC,IAAI,CAACuD,0BAA0B,CAACwF,CAAC,EAAE,IAAI,CAACxF,0BAA0B,CAACyF,CAAC,EAAE,IAAI,CAACzF,0BAA0B,CAAC0F,CAAC,EAAE,GAAG,CAAC,CAC5H;IACD,IAAI,CAACjB,aAAa,CAACc,UAAU,CACzB,iCAAiC,EACjC,IAAI9I,OAAO,CAAC,IAAI,CAACyD,2BAA2B,CAACsF,CAAC,EAAE,IAAI,CAACtF,2BAA2B,CAACuF,CAAC,EAAE,IAAI,CAACvF,2BAA2B,CAACwF,CAAC,EAAE,GAAG,CAAC,CAC/H;IAED,IAAI,CAACC,UAAU,CAAC5E,IAAI,EAAE,IAAI,CAAC0D,aAAa,CAAC;EAC7C;EAEA;;;;EAIOmB,cAAcA,CAAA;IACjB,OAAO,EAAE;EACb;EAEOC,OAAOA,CAACC,kBAA4B;IACvC,KAAK,CAACD,OAAO,CAACC,kBAAkB,CAAC;EACrC;EAEOC,KAAKA,CAACnI,IAAY;IACrB,OAAOrB,mBAAmB,CAACyJ,KAAK,CAAC,MAAM,IAAIrI,oBAAoB,CAACC,IAAI,EAAE,IAAI,CAAC6C,QAAQ,EAAE,CAAC,EAAE,IAAI,CAAC;EACjG;EAEOnE,SAASA,CAAA;IACZ,MAAM2J,mBAAmB,GAAG,KAAK,CAAC3J,SAAS,EAAE;IAC7C2J,mBAAmB,CAACC,UAAU,GAAG,8BAA8B;IAC/D,OAAOD,mBAAmB;EAC9B;EAEOE,YAAYA,CAAA;IACf,OAAO,sBAAsB;EACjC;EAEA;EACO,OAAOC,KAAKA,CAACC,MAAW,EAAExI,KAAY,EAAEyI,OAAe;IAC1D,OAAO/J,mBAAmB,CAAC6J,KAAK,CAAC,MAAM,IAAIzI,oBAAoB,CAAC0I,MAAM,CAACzI,IAAI,EAAEC,KAAK,CAAC,EAAEwI,MAAM,EAAExI,KAAK,EAAEyI,OAAO,CAAC;EAChH;;AAphBA;;;AAGc3I,oBAAA,CAAA6C,gBAAgB,GAAG,sEAAsE;AAOhG+F,UAAA,EADNjK,SAAS,EAAE,C,sDACY;AAMjBiK,UAAA,EADNnK,iBAAiB,EAAE,C,sDAC6C;AAM1DmK,UAAA,EADNjK,SAAS,EAAE,C,kEACwB;AAM7BiK,UAAA,EADNjK,SAAS,EAAE,C,iEACuB;AAM5BiK,UAAA,EADNjK,SAAS,EAAE,C,gEACqB;AAM1BiK,UAAA,EADNjK,SAAS,EAAE,C,gEACmB;AAMxBiK,UAAA,EADNjK,SAAS,EAAE,C,0DACe;AAMpBiK,UAAA,EADNjK,SAAS,EAAE,C,qDACQ;AAMbiK,UAAA,EADNjK,SAAS,EAAE,C,0DACa;AAMlBiK,UAAA,EADNjK,SAAS,EAAE,C,8DACmB;AAOxBiK,UAAA,EADNjK,SAAS,EAAE,C,6DACmB;AAMxBiK,UAAA,EADNjK,SAAS,EAAE,C,+DACqB;AAM1BiK,UAAA,EADNjK,SAAS,EAAE,C,0DACe;AAMpBiK,UAAA,EADNjK,SAAS,EAAE,C,wDACc;AAMnBiK,UAAA,EADNjK,SAAS,EAAE,C,6DACgB;AAMrBiK,UAAA,EADNjK,SAAS,EAAE,C,4DACkB;AAMvBiK,UAAA,EADNjK,SAAS,EAAE,C,2DACiB;AAMtBiK,UAAA,EADNjK,SAAS,EAAE,C,2DACiB;AAMtBiK,UAAA,EADNjK,SAAS,EAAE,C,6DACoB;AAMzBiK,UAAA,EADNjK,SAAS,EAAE,C,0DACa;AAMlBiK,UAAA,EADNjK,SAAS,EAAE,C,yDACY;AAMjBiK,UAAA,EADNjK,SAAS,EAAE,C,8DACoB;AAMzBiK,UAAA,EADNjK,SAAS,EAAE,C,4DACkB;AAMvBiK,UAAA,EADNjK,SAAS,EAAE,C,8DACqB;AAM1BiK,UAAA,EADNjK,SAAS,EAAE,C,2DACc;AAMnBiK,UAAA,EADNjK,SAAS,EAAE,C,0DACa;AAMlBiK,UAAA,EADNjK,SAAS,EAAE,C,+DACqB;AAO1BiK,UAAA,EADNlK,kBAAkB,EAAE,C,0DACwB;AAOtCkK,UAAA,EADNlK,kBAAkB,EAAE,C,yDACsB;AAMpCkK,UAAA,EADNjK,SAAS,EAAE,C,uDACa;AAMlBiK,UAAA,EADNjK,SAAS,EAAE,C,sDACW;AAMhBiK,UAAA,EADNjK,SAAS,EAAE,C,6DACmB;AAOxBiK,UAAA,EADNjK,SAAS,EAAE,C,sDACa;AAOlBiK,UAAA,EADNjK,SAAS,EAAE,C,2DACiB;AAMtBiK,UAAA,EADNlK,kBAAkB,EAAE,C,uEAC8B;AAM5CkK,UAAA,EADNlK,kBAAkB,EAAE,C,wEAC+B;AAsTxDU,aAAa,CAAC,kCAAkC,EAAEY,oBAAoB,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}