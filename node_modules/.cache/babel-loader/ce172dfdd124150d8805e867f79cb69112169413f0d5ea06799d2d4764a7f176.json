{"ast":null,"code":"import { FlowGraphBlock } from \"../../flowGraphBlock.js\";\nimport { RichTypeAny, RichTypeVector3 } from \"../../flowGraphRichTypes.js\";\nimport { TmpVectors, Vector3 } from \"../../../Maths/math.vector.js\";\nimport { RegisterClass } from \"../../../Misc/typeStore.js\";\n/**\n * @experimental\n * This blocks transforms a vector from one coordinate system to another.\n */\nexport class FlowGraphCoordinateTransformBlock extends FlowGraphBlock {\n  /**\n   * Creates a new FlowGraphCoordinateTransformBlock\n   */\n  constructor(config) {\n    super(config);\n    this.sourceSystem = this._registerDataInput(\"sourceSystem\", RichTypeAny);\n    this.destinationSystem = this._registerDataInput(\"destinationSystem\", RichTypeAny);\n    this.inputCoordinates = this._registerDataInput(\"inputCoordinates\", RichTypeVector3);\n    this.outputCoordinates = this._registerDataOutput(\"outputCoordinates\", RichTypeVector3);\n  }\n  _updateOutputs(_context) {\n    const sourceSystemValue = this.sourceSystem.getValue(_context);\n    const destinationSystemValue = this.destinationSystem.getValue(_context);\n    const inputCoordinatesValue = this.inputCoordinates.getValue(_context);\n    // takes coordinates from source space to world space\n    const sourceWorld = sourceSystemValue.getWorldMatrix();\n    // takes coordinates from destination space to world space\n    const destinationWorld = destinationSystemValue.getWorldMatrix();\n    const destinationWorldInverse = TmpVectors.Matrix[0].copyFrom(destinationWorld);\n    // takes coordinates from world space to destination space\n    destinationWorldInverse.invert();\n    const sourceToDestination = TmpVectors.Matrix[1];\n    // takes coordinates from source space to world space to destination space\n    destinationWorldInverse.multiplyToRef(sourceWorld, sourceToDestination);\n    const outputCoordinatesValue = this.outputCoordinates.getValue(_context);\n    Vector3.TransformCoordinatesToRef(inputCoordinatesValue, sourceToDestination, outputCoordinatesValue);\n  }\n  getClassName() {\n    return \"FGCoordinateTransformBlock\";\n  }\n}\nRegisterClass(\"FGCoordinateTransformBlock\", FlowGraphCoordinateTransformBlock);","map":{"version":3,"names":["FlowGraphBlock","RichTypeAny","RichTypeVector3","TmpVectors","Vector3","RegisterClass","FlowGraphCoordinateTransformBlock","constructor","config","sourceSystem","_registerDataInput","destinationSystem","inputCoordinates","outputCoordinates","_registerDataOutput","_updateOutputs","_context","sourceSystemValue","getValue","destinationSystemValue","inputCoordinatesValue","sourceWorld","getWorldMatrix","destinationWorld","destinationWorldInverse","Matrix","copyFrom","invert","sourceToDestination","multiplyToRef","outputCoordinatesValue","TransformCoordinatesToRef","getClassName"],"sources":["../../../../../../dev/core/src/FlowGraph/Blocks/Data/flowGraphCoordinateTransformBlock.ts"],"sourcesContent":["import { FlowGraphBlock } from \"../../flowGraphBlock\";\r\nimport type { FlowGraphContext } from \"../../flowGraphContext\";\r\nimport type { FlowGraphDataConnection } from \"../../flowGraphDataConnection\";\r\nimport { RichTypeAny, RichTypeVector3 } from \"../../flowGraphRichTypes\";\r\nimport { TmpVectors, Vector3 } from \"../../../Maths/math.vector\";\r\nimport type { TransformNode } from \"../../../Meshes/transformNode\";\r\nimport type { IFlowGraphBlockConfiguration } from \"../../flowGraphBlock\";\r\nimport { RegisterClass } from \"../../../Misc/typeStore\";\r\n/**\r\n * @experimental\r\n * This blocks transforms a vector from one coordinate system to another.\r\n */\r\nexport class FlowGraphCoordinateTransformBlock extends FlowGraphBlock {\r\n    /**\r\n     * Input connection: The source coordinate system.\r\n     */\r\n    public readonly sourceSystem: FlowGraphDataConnection<TransformNode>;\r\n    /**\r\n     * Input connection: The destination coordinate system.\r\n     */\r\n    public readonly destinationSystem: FlowGraphDataConnection<TransformNode>;\r\n    /**\r\n     * Input connection: The coordinates to transform.\r\n     */\r\n    public readonly inputCoordinates: FlowGraphDataConnection<Vector3>;\r\n    /**\r\n     * Output connection: The transformed coordinates.\r\n     */\r\n    public readonly outputCoordinates: FlowGraphDataConnection<Vector3>;\r\n\r\n    /**\r\n     * Creates a new FlowGraphCoordinateTransformBlock\r\n     */\r\n    constructor(config?: IFlowGraphBlockConfiguration) {\r\n        super(config);\r\n\r\n        this.sourceSystem = this._registerDataInput(\"sourceSystem\", RichTypeAny);\r\n        this.destinationSystem = this._registerDataInput(\"destinationSystem\", RichTypeAny);\r\n        this.inputCoordinates = this._registerDataInput(\"inputCoordinates\", RichTypeVector3);\r\n        this.outputCoordinates = this._registerDataOutput(\"outputCoordinates\", RichTypeVector3);\r\n    }\r\n\r\n    public _updateOutputs(_context: FlowGraphContext): void {\r\n        const sourceSystemValue = this.sourceSystem.getValue(_context);\r\n        const destinationSystemValue = this.destinationSystem.getValue(_context);\r\n        const inputCoordinatesValue = this.inputCoordinates.getValue(_context);\r\n\r\n        // takes coordinates from source space to world space\r\n        const sourceWorld = sourceSystemValue.getWorldMatrix();\r\n        // takes coordinates from destination space to world space\r\n        const destinationWorld = destinationSystemValue.getWorldMatrix();\r\n        const destinationWorldInverse = TmpVectors.Matrix[0].copyFrom(destinationWorld);\r\n        // takes coordinates from world space to destination space\r\n        destinationWorldInverse.invert();\r\n\r\n        const sourceToDestination = TmpVectors.Matrix[1];\r\n        // takes coordinates from source space to world space to destination space\r\n        destinationWorldInverse.multiplyToRef(sourceWorld, sourceToDestination);\r\n        const outputCoordinatesValue = this.outputCoordinates.getValue(_context);\r\n\r\n        Vector3.TransformCoordinatesToRef(inputCoordinatesValue, sourceToDestination, outputCoordinatesValue);\r\n    }\r\n\r\n    public getClassName(): string {\r\n        return \"FGCoordinateTransformBlock\";\r\n    }\r\n}\r\nRegisterClass(\"FGCoordinateTransformBlock\", FlowGraphCoordinateTransformBlock);\r\n"],"mappings":"AAAA,SAASA,cAAc,QAAQ,yBAAuB;AAGtD,SAASC,WAAW,EAAEC,eAAe,QAAQ,6BAA2B;AACxE,SAASC,UAAU,EAAEC,OAAO,QAAQ,+BAA6B;AAGjE,SAASC,aAAa,QAAQ,4BAA0B;AACxD;;;;AAIA,OAAM,MAAOC,iCAAkC,SAAQN,cAAc;EAkBjE;;;EAGAO,YAAYC,MAAqC;IAC7C,KAAK,CAACA,MAAM,CAAC;IAEb,IAAI,CAACC,YAAY,GAAG,IAAI,CAACC,kBAAkB,CAAC,cAAc,EAAET,WAAW,CAAC;IACxE,IAAI,CAACU,iBAAiB,GAAG,IAAI,CAACD,kBAAkB,CAAC,mBAAmB,EAAET,WAAW,CAAC;IAClF,IAAI,CAACW,gBAAgB,GAAG,IAAI,CAACF,kBAAkB,CAAC,kBAAkB,EAAER,eAAe,CAAC;IACpF,IAAI,CAACW,iBAAiB,GAAG,IAAI,CAACC,mBAAmB,CAAC,mBAAmB,EAAEZ,eAAe,CAAC;EAC3F;EAEOa,cAAcA,CAACC,QAA0B;IAC5C,MAAMC,iBAAiB,GAAG,IAAI,CAACR,YAAY,CAACS,QAAQ,CAACF,QAAQ,CAAC;IAC9D,MAAMG,sBAAsB,GAAG,IAAI,CAACR,iBAAiB,CAACO,QAAQ,CAACF,QAAQ,CAAC;IACxE,MAAMI,qBAAqB,GAAG,IAAI,CAACR,gBAAgB,CAACM,QAAQ,CAACF,QAAQ,CAAC;IAEtE;IACA,MAAMK,WAAW,GAAGJ,iBAAiB,CAACK,cAAc,EAAE;IACtD;IACA,MAAMC,gBAAgB,GAAGJ,sBAAsB,CAACG,cAAc,EAAE;IAChE,MAAME,uBAAuB,GAAGrB,UAAU,CAACsB,MAAM,CAAC,CAAC,CAAC,CAACC,QAAQ,CAACH,gBAAgB,CAAC;IAC/E;IACAC,uBAAuB,CAACG,MAAM,EAAE;IAEhC,MAAMC,mBAAmB,GAAGzB,UAAU,CAACsB,MAAM,CAAC,CAAC,CAAC;IAChD;IACAD,uBAAuB,CAACK,aAAa,CAACR,WAAW,EAAEO,mBAAmB,CAAC;IACvE,MAAME,sBAAsB,GAAG,IAAI,CAACjB,iBAAiB,CAACK,QAAQ,CAACF,QAAQ,CAAC;IAExEZ,OAAO,CAAC2B,yBAAyB,CAACX,qBAAqB,EAAEQ,mBAAmB,EAAEE,sBAAsB,CAAC;EACzG;EAEOE,YAAYA,CAAA;IACf,OAAO,4BAA4B;EACvC;;AAEJ3B,aAAa,CAAC,4BAA4B,EAAEC,iCAAiC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}