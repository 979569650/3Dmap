{"ast":null,"code":"import { __decorate } from \"@babylonjs/core/tslib.es6.js\";\nimport { Control } from \"./control.js\";\nimport { RegisterClass } from \"@babylonjs/core/Misc/typeStore.js\";\nimport { serialize } from \"@babylonjs/core/Misc/decorators.js\";\n/** Class used to render a grid  */\nexport class DisplayGrid extends Control {\n  /** Gets or sets a boolean indicating if minor lines must be rendered (true by default)) */\n  get displayMinorLines() {\n    return this._displayMinorLines;\n  }\n  set displayMinorLines(value) {\n    if (this._displayMinorLines === value) {\n      return;\n    }\n    this._displayMinorLines = value;\n    this._markAsDirty();\n  }\n  /** Gets or sets a boolean indicating if major lines must be rendered (true by default)) */\n  get displayMajorLines() {\n    return this._displayMajorLines;\n  }\n  set displayMajorLines(value) {\n    if (this._displayMajorLines === value) {\n      return;\n    }\n    this._displayMajorLines = value;\n    this._markAsDirty();\n  }\n  /** Gets or sets background color (Black by default) */\n  get background() {\n    return this._background;\n  }\n  set background(value) {\n    if (this._background === value) {\n      return;\n    }\n    this._background = value;\n    this._markAsDirty();\n  }\n  /** Gets or sets the width of each cell (20 by default) */\n  get cellWidth() {\n    return this._cellWidth;\n  }\n  set cellWidth(value) {\n    this._cellWidth = value;\n    this._markAsDirty();\n  }\n  /** Gets or sets the height of each cell (20 by default) */\n  get cellHeight() {\n    return this._cellHeight;\n  }\n  set cellHeight(value) {\n    this._cellHeight = value;\n    this._markAsDirty();\n  }\n  /** Gets or sets the tickness of minor lines (1 by default) */\n  get minorLineTickness() {\n    return this._minorLineTickness;\n  }\n  set minorLineTickness(value) {\n    this._minorLineTickness = value;\n    this._markAsDirty();\n  }\n  /** Gets or sets the color of minor lines (DarkGray by default) */\n  get minorLineColor() {\n    return this._minorLineColor;\n  }\n  set minorLineColor(value) {\n    this._minorLineColor = value;\n    this._markAsDirty();\n  }\n  /** Gets or sets the tickness of major lines (2 by default) */\n  get majorLineTickness() {\n    return this._majorLineTickness;\n  }\n  set majorLineTickness(value) {\n    this._majorLineTickness = value;\n    this._markAsDirty();\n  }\n  /** Gets or sets the color of major lines (White by default) */\n  get majorLineColor() {\n    return this._majorLineColor;\n  }\n  set majorLineColor(value) {\n    this._majorLineColor = value;\n    this._markAsDirty();\n  }\n  /** Gets or sets the frequency of major lines (default is 1 every 5 minor lines)*/\n  get majorLineFrequency() {\n    return this._majorLineFrequency;\n  }\n  set majorLineFrequency(value) {\n    this._majorLineFrequency = value;\n    this._markAsDirty();\n  }\n  /**\n   * Creates a new GridDisplayRectangle\n   * @param name defines the control name\n   */\n  constructor(name) {\n    super(name);\n    this.name = name;\n    this._cellWidth = 20;\n    this._cellHeight = 20;\n    this._minorLineTickness = 1;\n    this._minorLineColor = \"DarkGray\";\n    this._majorLineTickness = 2;\n    this._majorLineColor = \"White\";\n    this._majorLineFrequency = 5;\n    this._background = \"Black\";\n    this._displayMajorLines = true;\n    this._displayMinorLines = true;\n  }\n  _draw(context) {\n    context.save();\n    this._applyStates(context);\n    if (this._isEnabled) {\n      if (this._background) {\n        context.fillStyle = this._background;\n        context.fillRect(this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);\n      }\n      const cellCountX = this._currentMeasure.width / this._cellWidth;\n      const cellCountY = this._currentMeasure.height / this._cellHeight;\n      // Minor lines\n      const left = this._currentMeasure.left + this._currentMeasure.width / 2;\n      const top = this._currentMeasure.top + this._currentMeasure.height / 2;\n      if (this._displayMinorLines) {\n        context.strokeStyle = this._minorLineColor;\n        context.lineWidth = this._minorLineTickness;\n        for (let x = -cellCountX / 2 + 1; x < cellCountX / 2; x++) {\n          const cellX = left + x * this.cellWidth;\n          context.beginPath();\n          context.moveTo(cellX, this._currentMeasure.top);\n          context.lineTo(cellX, this._currentMeasure.top + this._currentMeasure.height);\n          context.stroke();\n        }\n        for (let y = -cellCountY / 2 + 1; y < cellCountY / 2; y++) {\n          const cellY = top + y * this.cellHeight;\n          context.beginPath();\n          context.moveTo(this._currentMeasure.left, cellY);\n          context.lineTo(this._currentMeasure.left + this._currentMeasure.width, cellY);\n          context.stroke();\n        }\n      }\n      // Major lines\n      if (this._displayMajorLines) {\n        context.strokeStyle = this._majorLineColor;\n        context.lineWidth = this._majorLineTickness;\n        for (let x = -cellCountX / 2 + this._majorLineFrequency; x < cellCountX / 2; x += this._majorLineFrequency) {\n          const cellX = left + x * this.cellWidth;\n          context.beginPath();\n          context.moveTo(cellX, this._currentMeasure.top);\n          context.lineTo(cellX, this._currentMeasure.top + this._currentMeasure.height);\n          context.stroke();\n        }\n        for (let y = -cellCountY / 2 + this._majorLineFrequency; y < cellCountY / 2; y += this._majorLineFrequency) {\n          const cellY = top + y * this.cellHeight;\n          context.moveTo(this._currentMeasure.left, cellY);\n          context.lineTo(this._currentMeasure.left + this._currentMeasure.width, cellY);\n          context.closePath();\n          context.stroke();\n        }\n      }\n    }\n    context.restore();\n  }\n  _getTypeName() {\n    return \"DisplayGrid\";\n  }\n}\n__decorate([serialize()], DisplayGrid.prototype, \"displayMinorLines\", null);\n__decorate([serialize()], DisplayGrid.prototype, \"displayMajorLines\", null);\n__decorate([serialize()], DisplayGrid.prototype, \"background\", null);\n__decorate([serialize()], DisplayGrid.prototype, \"cellWidth\", null);\n__decorate([serialize()], DisplayGrid.prototype, \"cellHeight\", null);\n__decorate([serialize()], DisplayGrid.prototype, \"minorLineTickness\", null);\n__decorate([serialize()], DisplayGrid.prototype, \"minorLineColor\", null);\n__decorate([serialize()], DisplayGrid.prototype, \"majorLineTickness\", null);\n__decorate([serialize()], DisplayGrid.prototype, \"majorLineColor\", null);\n__decorate([serialize()], DisplayGrid.prototype, \"majorLineFrequency\", null);\nRegisterClass(\"BABYLON.GUI.DisplayGrid\", DisplayGrid);","map":{"version":3,"names":["Control","RegisterClass","serialize","DisplayGrid","displayMinorLines","_displayMinorLines","value","_markAsDirty","displayMajorLines","_displayMajorLines","background","_background","cellWidth","_cellWidth","cellHeight","_cellHeight","minorLineTickness","_minorLineTickness","minorLineColor","_minorLineColor","majorLineTickness","_majorLineTickness","majorLineColor","_majorLineColor","majorLineFrequency","_majorLineFrequency","constructor","name","_draw","context","save","_applyStates","_isEnabled","fillStyle","fillRect","_currentMeasure","left","top","width","height","cellCountX","cellCountY","strokeStyle","lineWidth","x","cellX","beginPath","moveTo","lineTo","stroke","y","cellY","closePath","restore","_getTypeName","__decorate"],"sources":["../../../../../dev/gui/src/2D/controls/displayGrid.ts"],"sourcesContent":["import { Control } from \"./control\";\r\nimport { RegisterClass } from \"core/Misc/typeStore\";\r\nimport { serialize } from \"core/Misc/decorators\";\r\nimport type { ICanvasRenderingContext } from \"core/Engines/ICanvas\";\r\n\r\n/** Class used to render a grid  */\r\nexport class DisplayGrid extends Control {\r\n    private _cellWidth = 20;\r\n    private _cellHeight = 20;\r\n\r\n    private _minorLineTickness = 1;\r\n    private _minorLineColor = \"DarkGray\";\r\n\r\n    private _majorLineTickness = 2;\r\n    private _majorLineColor = \"White\";\r\n\r\n    private _majorLineFrequency = 5;\r\n\r\n    private _background = \"Black\";\r\n\r\n    private _displayMajorLines = true;\r\n    private _displayMinorLines = true;\r\n\r\n    /** Gets or sets a boolean indicating if minor lines must be rendered (true by default)) */\r\n    @serialize()\r\n    public get displayMinorLines(): boolean {\r\n        return this._displayMinorLines;\r\n    }\r\n\r\n    public set displayMinorLines(value: boolean) {\r\n        if (this._displayMinorLines === value) {\r\n            return;\r\n        }\r\n\r\n        this._displayMinorLines = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets a boolean indicating if major lines must be rendered (true by default)) */\r\n    @serialize()\r\n    public get displayMajorLines(): boolean {\r\n        return this._displayMajorLines;\r\n    }\r\n\r\n    public set displayMajorLines(value: boolean) {\r\n        if (this._displayMajorLines === value) {\r\n            return;\r\n        }\r\n\r\n        this._displayMajorLines = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets background color (Black by default) */\r\n    @serialize()\r\n    public get background(): string {\r\n        return this._background;\r\n    }\r\n\r\n    public set background(value: string) {\r\n        if (this._background === value) {\r\n            return;\r\n        }\r\n\r\n        this._background = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the width of each cell (20 by default) */\r\n    @serialize()\r\n    public get cellWidth(): number {\r\n        return this._cellWidth;\r\n    }\r\n\r\n    public set cellWidth(value: number) {\r\n        this._cellWidth = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the height of each cell (20 by default) */\r\n    @serialize()\r\n    public get cellHeight(): number {\r\n        return this._cellHeight;\r\n    }\r\n\r\n    public set cellHeight(value: number) {\r\n        this._cellHeight = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the tickness of minor lines (1 by default) */\r\n    @serialize()\r\n    public get minorLineTickness(): number {\r\n        return this._minorLineTickness;\r\n    }\r\n\r\n    public set minorLineTickness(value: number) {\r\n        this._minorLineTickness = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the color of minor lines (DarkGray by default) */\r\n    @serialize()\r\n    public get minorLineColor(): string {\r\n        return this._minorLineColor;\r\n    }\r\n\r\n    public set minorLineColor(value: string) {\r\n        this._minorLineColor = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the tickness of major lines (2 by default) */\r\n    @serialize()\r\n    public get majorLineTickness(): number {\r\n        return this._majorLineTickness;\r\n    }\r\n\r\n    public set majorLineTickness(value: number) {\r\n        this._majorLineTickness = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the color of major lines (White by default) */\r\n    @serialize()\r\n    public get majorLineColor(): string {\r\n        return this._majorLineColor;\r\n    }\r\n\r\n    public set majorLineColor(value: string) {\r\n        this._majorLineColor = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the frequency of major lines (default is 1 every 5 minor lines)*/\r\n    @serialize()\r\n    public get majorLineFrequency(): number {\r\n        return this._majorLineFrequency;\r\n    }\r\n\r\n    public set majorLineFrequency(value: number) {\r\n        this._majorLineFrequency = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Creates a new GridDisplayRectangle\r\n     * @param name defines the control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n    }\r\n\r\n    public _draw(context: ICanvasRenderingContext): void {\r\n        context.save();\r\n\r\n        this._applyStates(context);\r\n\r\n        if (this._isEnabled) {\r\n            if (this._background) {\r\n                context.fillStyle = this._background;\r\n                context.fillRect(this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);\r\n            }\r\n\r\n            const cellCountX = this._currentMeasure.width / this._cellWidth;\r\n            const cellCountY = this._currentMeasure.height / this._cellHeight;\r\n\r\n            // Minor lines\r\n            const left = this._currentMeasure.left + this._currentMeasure.width / 2;\r\n            const top = this._currentMeasure.top + this._currentMeasure.height / 2;\r\n\r\n            if (this._displayMinorLines) {\r\n                context.strokeStyle = this._minorLineColor;\r\n                context.lineWidth = this._minorLineTickness;\r\n\r\n                for (let x = -cellCountX / 2 + 1; x < cellCountX / 2; x++) {\r\n                    const cellX = left + x * this.cellWidth;\r\n\r\n                    context.beginPath();\r\n                    context.moveTo(cellX, this._currentMeasure.top);\r\n                    context.lineTo(cellX, this._currentMeasure.top + this._currentMeasure.height);\r\n\r\n                    context.stroke();\r\n                }\r\n\r\n                for (let y = -cellCountY / 2 + 1; y < cellCountY / 2; y++) {\r\n                    const cellY = top + y * this.cellHeight;\r\n\r\n                    context.beginPath();\r\n                    context.moveTo(this._currentMeasure.left, cellY);\r\n                    context.lineTo(this._currentMeasure.left + this._currentMeasure.width, cellY);\r\n                    context.stroke();\r\n                }\r\n            }\r\n\r\n            // Major lines\r\n            if (this._displayMajorLines) {\r\n                context.strokeStyle = this._majorLineColor;\r\n                context.lineWidth = this._majorLineTickness;\r\n\r\n                for (let x = -cellCountX / 2 + this._majorLineFrequency; x < cellCountX / 2; x += this._majorLineFrequency) {\r\n                    const cellX = left + x * this.cellWidth;\r\n\r\n                    context.beginPath();\r\n                    context.moveTo(cellX, this._currentMeasure.top);\r\n                    context.lineTo(cellX, this._currentMeasure.top + this._currentMeasure.height);\r\n                    context.stroke();\r\n                }\r\n\r\n                for (let y = -cellCountY / 2 + this._majorLineFrequency; y < cellCountY / 2; y += this._majorLineFrequency) {\r\n                    const cellY = top + y * this.cellHeight;\r\n                    context.moveTo(this._currentMeasure.left, cellY);\r\n                    context.lineTo(this._currentMeasure.left + this._currentMeasure.width, cellY);\r\n                    context.closePath();\r\n                    context.stroke();\r\n                }\r\n            }\r\n        }\r\n\r\n        context.restore();\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"DisplayGrid\";\r\n    }\r\n}\r\nRegisterClass(\"BABYLON.GUI.DisplayGrid\", DisplayGrid);\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}