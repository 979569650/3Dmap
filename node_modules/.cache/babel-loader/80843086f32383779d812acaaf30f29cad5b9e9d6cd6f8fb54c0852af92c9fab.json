{"ast":null,"code":"import { Vector2, Vector3, TmpVectors, Vector4 } from \"../Maths/math.vector.js\";\nimport { Color4 } from \"../Maths/math.color.js\";\nimport { Scalar } from \"../Maths/math.scalar.js\";\n/**\n * A particle represents one of the element emitted by a particle system.\n * This is mainly define by its coordinates, direction, velocity and age.\n */\nexport class Particle {\n  /**\n   * Creates a new instance Particle\n   * @param particleSystem the particle system the particle belongs to\n   */\n  constructor(\n  /**\n   * The particle system the particle belongs to.\n   */\n  particleSystem) {\n    this.particleSystem = particleSystem;\n    /**\n     * The world position of the particle in the scene.\n     */\n    this.position = Vector3.Zero();\n    /**\n     * The world direction of the particle in the scene.\n     */\n    this.direction = Vector3.Zero();\n    /**\n     * The color of the particle.\n     */\n    this.color = new Color4(0, 0, 0, 0);\n    /**\n     * The color change of the particle per step.\n     */\n    this.colorStep = new Color4(0, 0, 0, 0);\n    /**\n     * Defines how long will the life of the particle be.\n     */\n    this.lifeTime = 1.0;\n    /**\n     * The current age of the particle.\n     */\n    this.age = 0;\n    /**\n     * The current size of the particle.\n     */\n    this.size = 0;\n    /**\n     * The current scale of the particle.\n     */\n    this.scale = new Vector2(1, 1);\n    /**\n     * The current angle of the particle.\n     */\n    this.angle = 0;\n    /**\n     * Defines how fast is the angle changing.\n     */\n    this.angularSpeed = 0;\n    /**\n     * Defines the cell index used by the particle to be rendered from a sprite.\n     */\n    this.cellIndex = 0;\n    /** @internal */\n    this._attachedSubEmitters = null;\n    /** @internal */\n    this._currentColor1 = new Color4(0, 0, 0, 0);\n    /** @internal */\n    this._currentColor2 = new Color4(0, 0, 0, 0);\n    /** @internal */\n    this._currentSize1 = 0;\n    /** @internal */\n    this._currentSize2 = 0;\n    /** @internal */\n    this._currentAngularSpeed1 = 0;\n    /** @internal */\n    this._currentAngularSpeed2 = 0;\n    /** @internal */\n    this._currentVelocity1 = 0;\n    /** @internal */\n    this._currentVelocity2 = 0;\n    /** @internal */\n    this._currentLimitVelocity1 = 0;\n    /** @internal */\n    this._currentLimitVelocity2 = 0;\n    /** @internal */\n    this._currentDrag1 = 0;\n    /** @internal */\n    this._currentDrag2 = 0;\n    this.id = Particle._Count++;\n    if (!this.particleSystem.isAnimationSheetEnabled) {\n      return;\n    }\n    this._updateCellInfoFromSystem();\n  }\n  _updateCellInfoFromSystem() {\n    this.cellIndex = this.particleSystem.startSpriteCellID;\n  }\n  /**\n   * Defines how the sprite cell index is updated for the particle\n   */\n  updateCellIndex() {\n    let offsetAge = this.age;\n    let changeSpeed = this.particleSystem.spriteCellChangeSpeed;\n    if (this.particleSystem.spriteRandomStartCell) {\n      if (this._randomCellOffset === undefined) {\n        this._randomCellOffset = Math.random() * this.lifeTime;\n      }\n      if (changeSpeed === 0) {\n        // Special case when speed = 0 meaning we want to stay on initial cell\n        changeSpeed = 1;\n        offsetAge = this._randomCellOffset;\n      } else {\n        offsetAge += this._randomCellOffset;\n      }\n    }\n    const dist = this._initialEndSpriteCellID - this._initialStartSpriteCellID;\n    let ratio;\n    if (this._initialSpriteCellLoop) {\n      ratio = Scalar.Clamp(offsetAge * changeSpeed % this.lifeTime / this.lifeTime);\n    } else {\n      ratio = Scalar.Clamp(offsetAge * changeSpeed / this.lifeTime);\n    }\n    this.cellIndex = this._initialStartSpriteCellID + ratio * dist | 0;\n  }\n  /**\n   * @internal\n   */\n  _inheritParticleInfoToSubEmitter(subEmitter) {\n    if (subEmitter.particleSystem.emitter.position) {\n      const emitterMesh = subEmitter.particleSystem.emitter;\n      emitterMesh.position.copyFrom(this.position);\n      if (subEmitter.inheritDirection) {\n        const temp = TmpVectors.Vector3[0];\n        this.direction.normalizeToRef(temp);\n        emitterMesh.setDirection(temp, 0, Math.PI / 2);\n      }\n    } else {\n      const emitterPosition = subEmitter.particleSystem.emitter;\n      emitterPosition.copyFrom(this.position);\n    }\n    // Set inheritedVelocityOffset to be used when new particles are created\n    this.direction.scaleToRef(subEmitter.inheritedVelocityAmount / 2, TmpVectors.Vector3[0]);\n    subEmitter.particleSystem._inheritedVelocityOffset.copyFrom(TmpVectors.Vector3[0]);\n  }\n  /** @internal */\n  _inheritParticleInfoToSubEmitters() {\n    if (this._attachedSubEmitters && this._attachedSubEmitters.length > 0) {\n      this._attachedSubEmitters.forEach(subEmitter => {\n        this._inheritParticleInfoToSubEmitter(subEmitter);\n      });\n    }\n  }\n  /** @internal */\n  _reset() {\n    this.age = 0;\n    this.id = Particle._Count++;\n    this._currentColorGradient = null;\n    this._currentSizeGradient = null;\n    this._currentAngularSpeedGradient = null;\n    this._currentVelocityGradient = null;\n    this._currentLimitVelocityGradient = null;\n    this._currentDragGradient = null;\n    this.cellIndex = this.particleSystem.startSpriteCellID;\n    this._randomCellOffset = undefined;\n  }\n  /**\n   * Copy the properties of particle to another one.\n   * @param other the particle to copy the information to.\n   */\n  copyTo(other) {\n    other.position.copyFrom(this.position);\n    if (this._initialDirection) {\n      if (other._initialDirection) {\n        other._initialDirection.copyFrom(this._initialDirection);\n      } else {\n        other._initialDirection = this._initialDirection.clone();\n      }\n    } else {\n      other._initialDirection = null;\n    }\n    other.direction.copyFrom(this.direction);\n    if (this._localPosition) {\n      if (other._localPosition) {\n        other._localPosition.copyFrom(this._localPosition);\n      } else {\n        other._localPosition = this._localPosition.clone();\n      }\n    }\n    other.color.copyFrom(this.color);\n    other.colorStep.copyFrom(this.colorStep);\n    other.lifeTime = this.lifeTime;\n    other.age = this.age;\n    other._randomCellOffset = this._randomCellOffset;\n    other.size = this.size;\n    other.scale.copyFrom(this.scale);\n    other.angle = this.angle;\n    other.angularSpeed = this.angularSpeed;\n    other.particleSystem = this.particleSystem;\n    other.cellIndex = this.cellIndex;\n    other.id = this.id;\n    other._attachedSubEmitters = this._attachedSubEmitters;\n    if (this._currentColorGradient) {\n      other._currentColorGradient = this._currentColorGradient;\n      other._currentColor1.copyFrom(this._currentColor1);\n      other._currentColor2.copyFrom(this._currentColor2);\n    }\n    if (this._currentSizeGradient) {\n      other._currentSizeGradient = this._currentSizeGradient;\n      other._currentSize1 = this._currentSize1;\n      other._currentSize2 = this._currentSize2;\n    }\n    if (this._currentAngularSpeedGradient) {\n      other._currentAngularSpeedGradient = this._currentAngularSpeedGradient;\n      other._currentAngularSpeed1 = this._currentAngularSpeed1;\n      other._currentAngularSpeed2 = this._currentAngularSpeed2;\n    }\n    if (this._currentVelocityGradient) {\n      other._currentVelocityGradient = this._currentVelocityGradient;\n      other._currentVelocity1 = this._currentVelocity1;\n      other._currentVelocity2 = this._currentVelocity2;\n    }\n    if (this._currentLimitVelocityGradient) {\n      other._currentLimitVelocityGradient = this._currentLimitVelocityGradient;\n      other._currentLimitVelocity1 = this._currentLimitVelocity1;\n      other._currentLimitVelocity2 = this._currentLimitVelocity2;\n    }\n    if (this._currentDragGradient) {\n      other._currentDragGradient = this._currentDragGradient;\n      other._currentDrag1 = this._currentDrag1;\n      other._currentDrag2 = this._currentDrag2;\n    }\n    if (this.particleSystem.isAnimationSheetEnabled) {\n      other._initialStartSpriteCellID = this._initialStartSpriteCellID;\n      other._initialEndSpriteCellID = this._initialEndSpriteCellID;\n      other._initialSpriteCellLoop = this._initialSpriteCellLoop;\n    }\n    if (this.particleSystem.useRampGradients) {\n      if (other.remapData && this.remapData) {\n        other.remapData.copyFrom(this.remapData);\n      } else {\n        other.remapData = new Vector4(0, 0, 0, 0);\n      }\n    }\n    if (this._randomNoiseCoordinates1) {\n      if (other._randomNoiseCoordinates1) {\n        other._randomNoiseCoordinates1.copyFrom(this._randomNoiseCoordinates1);\n        other._randomNoiseCoordinates2.copyFrom(this._randomNoiseCoordinates2);\n      } else {\n        other._randomNoiseCoordinates1 = this._randomNoiseCoordinates1.clone();\n        other._randomNoiseCoordinates2 = this._randomNoiseCoordinates2.clone();\n      }\n    }\n  }\n}\nParticle._Count = 0;","map":{"version":3,"names":["Vector2","Vector3","TmpVectors","Vector4","Color4","Scalar","Particle","constructor","particleSystem","position","Zero","direction","color","colorStep","lifeTime","age","size","scale","angle","angularSpeed","cellIndex","_attachedSubEmitters","_currentColor1","_currentColor2","_currentSize1","_currentSize2","_currentAngularSpeed1","_currentAngularSpeed2","_currentVelocity1","_currentVelocity2","_currentLimitVelocity1","_currentLimitVelocity2","_currentDrag1","_currentDrag2","id","_Count","isAnimationSheetEnabled","_updateCellInfoFromSystem","startSpriteCellID","updateCellIndex","offsetAge","changeSpeed","spriteCellChangeSpeed","spriteRandomStartCell","_randomCellOffset","undefined","Math","random","dist","_initialEndSpriteCellID","_initialStartSpriteCellID","ratio","_initialSpriteCellLoop","Clamp","_inheritParticleInfoToSubEmitter","subEmitter","emitter","emitterMesh","copyFrom","inheritDirection","temp","normalizeToRef","setDirection","PI","emitterPosition","scaleToRef","inheritedVelocityAmount","_inheritedVelocityOffset","_inheritParticleInfoToSubEmitters","length","forEach","_reset","_currentColorGradient","_currentSizeGradient","_currentAngularSpeedGradient","_currentVelocityGradient","_currentLimitVelocityGradient","_currentDragGradient","copyTo","other","_initialDirection","clone","_localPosition","useRampGradients","remapData","_randomNoiseCoordinates1","_randomNoiseCoordinates2"],"sources":["../../../../dev/core/src/Particles/particle.ts"],"sourcesContent":["import type { Nullable } from \"../types\";\r\nimport { Vector2, Vector3, TmpVectors, Vector4 } from \"../Maths/math.vector\";\r\nimport { Color4 } from \"../Maths/math.color\";\r\nimport { Scalar } from \"../Maths/math.scalar\";\r\nimport type { ParticleSystem } from \"./particleSystem\";\r\nimport type { SubEmitter } from \"./subEmitter\";\r\nimport type { ColorGradient, FactorGradient } from \"../Misc/gradients\";\r\n\r\nimport type { AbstractMesh } from \"../Meshes/abstractMesh\";\r\n\r\n/**\r\n * A particle represents one of the element emitted by a particle system.\r\n * This is mainly define by its coordinates, direction, velocity and age.\r\n */\r\nexport class Particle {\r\n    private static _Count = 0;\r\n    /**\r\n     * Unique ID of the particle\r\n     */\r\n    public id: number;\r\n    /**\r\n     * The world position of the particle in the scene.\r\n     */\r\n    public position = Vector3.Zero();\r\n\r\n    /**\r\n     * The world direction of the particle in the scene.\r\n     */\r\n    public direction = Vector3.Zero();\r\n\r\n    /**\r\n     * The color of the particle.\r\n     */\r\n    public color = new Color4(0, 0, 0, 0);\r\n\r\n    /**\r\n     * The color change of the particle per step.\r\n     */\r\n    public colorStep = new Color4(0, 0, 0, 0);\r\n\r\n    /**\r\n     * Defines how long will the life of the particle be.\r\n     */\r\n    public lifeTime = 1.0;\r\n\r\n    /**\r\n     * The current age of the particle.\r\n     */\r\n    public age = 0;\r\n\r\n    /**\r\n     * The current size of the particle.\r\n     */\r\n    public size = 0;\r\n\r\n    /**\r\n     * The current scale of the particle.\r\n     */\r\n    public scale = new Vector2(1, 1);\r\n\r\n    /**\r\n     * The current angle of the particle.\r\n     */\r\n    public angle = 0;\r\n\r\n    /**\r\n     * Defines how fast is the angle changing.\r\n     */\r\n    public angularSpeed = 0;\r\n\r\n    /**\r\n     * Defines the cell index used by the particle to be rendered from a sprite.\r\n     */\r\n    public cellIndex: number = 0;\r\n\r\n    /**\r\n     * The information required to support color remapping\r\n     */\r\n    public remapData: Vector4;\r\n\r\n    /** @internal */\r\n    public _randomCellOffset?: number;\r\n\r\n    /** @internal */\r\n    public _initialDirection: Nullable<Vector3>;\r\n\r\n    /** @internal */\r\n    public _attachedSubEmitters: Nullable<Array<SubEmitter>> = null;\r\n\r\n    /** @internal */\r\n    public _initialStartSpriteCellID: number;\r\n    /** @internal */\r\n    public _initialEndSpriteCellID: number;\r\n    /** @internal */\r\n    public _initialSpriteCellLoop: boolean;\r\n\r\n    /** @internal */\r\n    public _currentColorGradient: Nullable<ColorGradient>;\r\n    /** @internal */\r\n    public _currentColor1 = new Color4(0, 0, 0, 0);\r\n    /** @internal */\r\n    public _currentColor2 = new Color4(0, 0, 0, 0);\r\n\r\n    /** @internal */\r\n    public _currentSizeGradient: Nullable<FactorGradient>;\r\n    /** @internal */\r\n    public _currentSize1 = 0;\r\n    /** @internal */\r\n    public _currentSize2 = 0;\r\n\r\n    /** @internal */\r\n    public _currentAngularSpeedGradient: Nullable<FactorGradient>;\r\n    /** @internal */\r\n    public _currentAngularSpeed1 = 0;\r\n    /** @internal */\r\n    public _currentAngularSpeed2 = 0;\r\n\r\n    /** @internal */\r\n    public _currentVelocityGradient: Nullable<FactorGradient>;\r\n    /** @internal */\r\n    public _currentVelocity1 = 0;\r\n    /** @internal */\r\n    public _currentVelocity2 = 0;\r\n\r\n    /** @internal */\r\n    public _currentLimitVelocityGradient: Nullable<FactorGradient>;\r\n    /** @internal */\r\n    public _currentLimitVelocity1 = 0;\r\n    /** @internal */\r\n    public _currentLimitVelocity2 = 0;\r\n\r\n    /** @internal */\r\n    public _currentDragGradient: Nullable<FactorGradient>;\r\n    /** @internal */\r\n    public _currentDrag1 = 0;\r\n    /** @internal */\r\n    public _currentDrag2 = 0;\r\n\r\n    /** @internal */\r\n    public _randomNoiseCoordinates1: Vector3;\r\n    /** @internal */\r\n    public _randomNoiseCoordinates2: Vector3;\r\n\r\n    /** @internal */\r\n    public _localPosition?: Vector3;\r\n\r\n    /**\r\n     * Creates a new instance Particle\r\n     * @param particleSystem the particle system the particle belongs to\r\n     */\r\n    constructor(\r\n        /**\r\n         * The particle system the particle belongs to.\r\n         */\r\n        public particleSystem: ParticleSystem\r\n    ) {\r\n        this.id = Particle._Count++;\r\n        if (!this.particleSystem.isAnimationSheetEnabled) {\r\n            return;\r\n        }\r\n\r\n        this._updateCellInfoFromSystem();\r\n    }\r\n\r\n    private _updateCellInfoFromSystem(): void {\r\n        this.cellIndex = this.particleSystem.startSpriteCellID;\r\n    }\r\n\r\n    /**\r\n     * Defines how the sprite cell index is updated for the particle\r\n     */\r\n    public updateCellIndex(): void {\r\n        let offsetAge = this.age;\r\n        let changeSpeed = this.particleSystem.spriteCellChangeSpeed;\r\n\r\n        if (this.particleSystem.spriteRandomStartCell) {\r\n            if (this._randomCellOffset === undefined) {\r\n                this._randomCellOffset = Math.random() * this.lifeTime;\r\n            }\r\n\r\n            if (changeSpeed === 0) {\r\n                // Special case when speed = 0 meaning we want to stay on initial cell\r\n                changeSpeed = 1;\r\n                offsetAge = this._randomCellOffset;\r\n            } else {\r\n                offsetAge += this._randomCellOffset;\r\n            }\r\n        }\r\n\r\n        const dist = this._initialEndSpriteCellID - this._initialStartSpriteCellID;\r\n        let ratio: number;\r\n        if (this._initialSpriteCellLoop) {\r\n            ratio = Scalar.Clamp(((offsetAge * changeSpeed) % this.lifeTime) / this.lifeTime);\r\n        } else {\r\n            ratio = Scalar.Clamp((offsetAge * changeSpeed) / this.lifeTime);\r\n        }\r\n        this.cellIndex = (this._initialStartSpriteCellID + ratio * dist) | 0;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _inheritParticleInfoToSubEmitter(subEmitter: SubEmitter) {\r\n        if ((<AbstractMesh>subEmitter.particleSystem.emitter).position) {\r\n            const emitterMesh = <AbstractMesh>subEmitter.particleSystem.emitter;\r\n            emitterMesh.position.copyFrom(this.position);\r\n            if (subEmitter.inheritDirection) {\r\n                const temp = TmpVectors.Vector3[0];\r\n                this.direction.normalizeToRef(temp);\r\n                emitterMesh.setDirection(temp, 0, Math.PI / 2);\r\n            }\r\n        } else {\r\n            const emitterPosition = <Vector3>subEmitter.particleSystem.emitter;\r\n            emitterPosition.copyFrom(this.position);\r\n        }\r\n        // Set inheritedVelocityOffset to be used when new particles are created\r\n        this.direction.scaleToRef(subEmitter.inheritedVelocityAmount / 2, TmpVectors.Vector3[0]);\r\n        subEmitter.particleSystem._inheritedVelocityOffset.copyFrom(TmpVectors.Vector3[0]);\r\n    }\r\n\r\n    /** @internal */\r\n    public _inheritParticleInfoToSubEmitters() {\r\n        if (this._attachedSubEmitters && this._attachedSubEmitters.length > 0) {\r\n            this._attachedSubEmitters.forEach((subEmitter) => {\r\n                this._inheritParticleInfoToSubEmitter(subEmitter);\r\n            });\r\n        }\r\n    }\r\n\r\n    /** @internal */\r\n    public _reset() {\r\n        this.age = 0;\r\n        this.id = Particle._Count++;\r\n        this._currentColorGradient = null;\r\n        this._currentSizeGradient = null;\r\n        this._currentAngularSpeedGradient = null;\r\n        this._currentVelocityGradient = null;\r\n        this._currentLimitVelocityGradient = null;\r\n        this._currentDragGradient = null;\r\n        this.cellIndex = this.particleSystem.startSpriteCellID;\r\n        this._randomCellOffset = undefined;\r\n    }\r\n\r\n    /**\r\n     * Copy the properties of particle to another one.\r\n     * @param other the particle to copy the information to.\r\n     */\r\n    public copyTo(other: Particle) {\r\n        other.position.copyFrom(this.position);\r\n        if (this._initialDirection) {\r\n            if (other._initialDirection) {\r\n                other._initialDirection.copyFrom(this._initialDirection);\r\n            } else {\r\n                other._initialDirection = this._initialDirection.clone();\r\n            }\r\n        } else {\r\n            other._initialDirection = null;\r\n        }\r\n        other.direction.copyFrom(this.direction);\r\n        if (this._localPosition) {\r\n            if (other._localPosition) {\r\n                other._localPosition.copyFrom(this._localPosition);\r\n            } else {\r\n                other._localPosition = this._localPosition.clone();\r\n            }\r\n        }\r\n        other.color.copyFrom(this.color);\r\n        other.colorStep.copyFrom(this.colorStep);\r\n        other.lifeTime = this.lifeTime;\r\n        other.age = this.age;\r\n        other._randomCellOffset = this._randomCellOffset;\r\n        other.size = this.size;\r\n        other.scale.copyFrom(this.scale);\r\n        other.angle = this.angle;\r\n        other.angularSpeed = this.angularSpeed;\r\n        other.particleSystem = this.particleSystem;\r\n        other.cellIndex = this.cellIndex;\r\n        other.id = this.id;\r\n        other._attachedSubEmitters = this._attachedSubEmitters;\r\n        if (this._currentColorGradient) {\r\n            other._currentColorGradient = this._currentColorGradient;\r\n            other._currentColor1.copyFrom(this._currentColor1);\r\n            other._currentColor2.copyFrom(this._currentColor2);\r\n        }\r\n        if (this._currentSizeGradient) {\r\n            other._currentSizeGradient = this._currentSizeGradient;\r\n            other._currentSize1 = this._currentSize1;\r\n            other._currentSize2 = this._currentSize2;\r\n        }\r\n        if (this._currentAngularSpeedGradient) {\r\n            other._currentAngularSpeedGradient = this._currentAngularSpeedGradient;\r\n            other._currentAngularSpeed1 = this._currentAngularSpeed1;\r\n            other._currentAngularSpeed2 = this._currentAngularSpeed2;\r\n        }\r\n        if (this._currentVelocityGradient) {\r\n            other._currentVelocityGradient = this._currentVelocityGradient;\r\n            other._currentVelocity1 = this._currentVelocity1;\r\n            other._currentVelocity2 = this._currentVelocity2;\r\n        }\r\n        if (this._currentLimitVelocityGradient) {\r\n            other._currentLimitVelocityGradient = this._currentLimitVelocityGradient;\r\n            other._currentLimitVelocity1 = this._currentLimitVelocity1;\r\n            other._currentLimitVelocity2 = this._currentLimitVelocity2;\r\n        }\r\n        if (this._currentDragGradient) {\r\n            other._currentDragGradient = this._currentDragGradient;\r\n            other._currentDrag1 = this._currentDrag1;\r\n            other._currentDrag2 = this._currentDrag2;\r\n        }\r\n        if (this.particleSystem.isAnimationSheetEnabled) {\r\n            other._initialStartSpriteCellID = this._initialStartSpriteCellID;\r\n            other._initialEndSpriteCellID = this._initialEndSpriteCellID;\r\n            other._initialSpriteCellLoop = this._initialSpriteCellLoop;\r\n        }\r\n        if (this.particleSystem.useRampGradients) {\r\n            if (other.remapData && this.remapData) {\r\n                other.remapData.copyFrom(this.remapData);\r\n            } else {\r\n                other.remapData = new Vector4(0, 0, 0, 0);\r\n            }\r\n        }\r\n        if (this._randomNoiseCoordinates1) {\r\n            if (other._randomNoiseCoordinates1) {\r\n                other._randomNoiseCoordinates1.copyFrom(this._randomNoiseCoordinates1);\r\n                other._randomNoiseCoordinates2.copyFrom(this._randomNoiseCoordinates2);\r\n            } else {\r\n                other._randomNoiseCoordinates1 = this._randomNoiseCoordinates1.clone();\r\n                other._randomNoiseCoordinates2 = this._randomNoiseCoordinates2.clone();\r\n            }\r\n        }\r\n    }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}