{"ast":null,"code":"import { __decorate } from \"../tslib.es6.js\";\nimport { serialize, serializeAsVector3 } from \"../Misc/decorators.js\";\nimport { Matrix, Vector3 } from \"../Maths/math.vector.js\";\nimport { Light } from \"./light.js\";\nimport { Axis } from \"../Maths/math.axis.js\";\n/**\n * Base implementation IShadowLight\n * It groups all the common behaviour in order to reduce duplication and better follow the DRY pattern.\n */\nexport class ShadowLight extends Light {\n  constructor() {\n    super(...arguments);\n    this._needProjectionMatrixCompute = true;\n  }\n  _setPosition(value) {\n    this._position = value;\n  }\n  /**\n   * Sets the position the shadow will be casted from. Also use as the light position for both\n   * point and spot lights.\n   */\n  get position() {\n    return this._position;\n  }\n  /**\n   * Sets the position the shadow will be casted from. Also use as the light position for both\n   * point and spot lights.\n   */\n  set position(value) {\n    this._setPosition(value);\n  }\n  _setDirection(value) {\n    this._direction = value;\n  }\n  /**\n   * In 2d mode (needCube being false), gets the direction used to cast the shadow.\n   * Also use as the light direction on spot and directional lights.\n   */\n  get direction() {\n    return this._direction;\n  }\n  /**\n   * In 2d mode (needCube being false), sets the direction used to cast the shadow.\n   * Also use as the light direction on spot and directional lights.\n   */\n  set direction(value) {\n    this._setDirection(value);\n  }\n  /**\n   * Gets the shadow projection clipping minimum z value.\n   */\n  get shadowMinZ() {\n    return this._shadowMinZ;\n  }\n  /**\n   * Sets the shadow projection clipping minimum z value.\n   */\n  set shadowMinZ(value) {\n    this._shadowMinZ = value;\n    this.forceProjectionMatrixCompute();\n  }\n  /**\n   * Sets the shadow projection clipping maximum z value.\n   */\n  get shadowMaxZ() {\n    return this._shadowMaxZ;\n  }\n  /**\n   * Gets the shadow projection clipping maximum z value.\n   */\n  set shadowMaxZ(value) {\n    this._shadowMaxZ = value;\n    this.forceProjectionMatrixCompute();\n  }\n  /**\n   * Computes the transformed information (transformedPosition and transformedDirection in World space) of the current light\n   * @returns true if the information has been computed, false if it does not need to (no parenting)\n   */\n  computeTransformedInformation() {\n    if (this.parent && this.parent.getWorldMatrix) {\n      if (!this.transformedPosition) {\n        this.transformedPosition = Vector3.Zero();\n      }\n      Vector3.TransformCoordinatesToRef(this.position, this.parent.getWorldMatrix(), this.transformedPosition);\n      // In case the direction is present.\n      if (this.direction) {\n        if (!this.transformedDirection) {\n          this.transformedDirection = Vector3.Zero();\n        }\n        Vector3.TransformNormalToRef(this.direction, this.parent.getWorldMatrix(), this.transformedDirection);\n      }\n      return true;\n    }\n    return false;\n  }\n  /**\n   * Return the depth scale used for the shadow map.\n   * @returns the depth scale.\n   */\n  getDepthScale() {\n    return 50.0;\n  }\n  /**\n   * Get the direction to use to render the shadow map. In case of cube texture, the face index can be passed.\n   * @param faceIndex The index of the face we are computed the direction to generate shadow\n   * @returns The set direction in 2d mode otherwise the direction to the cubemap face if needCube() is true\n   */\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  getShadowDirection(faceIndex) {\n    return this.transformedDirection ? this.transformedDirection : this.direction;\n  }\n  /**\n   * Returns the ShadowLight absolute position in the World.\n   * @returns the position vector in world space\n   */\n  getAbsolutePosition() {\n    return this.transformedPosition ? this.transformedPosition : this.position;\n  }\n  /**\n   * Sets the ShadowLight direction toward the passed target.\n   * @param target The point to target in local space\n   * @returns the updated ShadowLight direction\n   */\n  setDirectionToTarget(target) {\n    this.direction = Vector3.Normalize(target.subtract(this.position));\n    return this.direction;\n  }\n  /**\n   * Returns the light rotation in euler definition.\n   * @returns the x y z rotation in local space.\n   */\n  getRotation() {\n    this.direction.normalize();\n    const xaxis = Vector3.Cross(this.direction, Axis.Y);\n    const yaxis = Vector3.Cross(xaxis, this.direction);\n    return Vector3.RotationFromAxis(xaxis, yaxis, this.direction);\n  }\n  /**\n   * Returns whether or not the shadow generation require a cube texture or a 2d texture.\n   * @returns true if a cube texture needs to be use\n   */\n  needCube() {\n    return false;\n  }\n  /**\n   * Detects if the projection matrix requires to be recomputed this frame.\n   * @returns true if it requires to be recomputed otherwise, false.\n   */\n  needProjectionMatrixCompute() {\n    return this._needProjectionMatrixCompute;\n  }\n  /**\n   * Forces the shadow generator to recompute the projection matrix even if position and direction did not changed.\n   */\n  forceProjectionMatrixCompute() {\n    this._needProjectionMatrixCompute = true;\n  }\n  /** @internal */\n  _initCache() {\n    super._initCache();\n    this._cache.position = Vector3.Zero();\n  }\n  /** @internal */\n  _isSynchronized() {\n    if (!this._cache.position.equals(this.position)) {\n      return false;\n    }\n    return true;\n  }\n  /**\n   * Computes the world matrix of the node\n   * @param force defines if the cache version should be invalidated forcing the world matrix to be created from scratch\n   * @returns the world matrix\n   */\n  computeWorldMatrix(force) {\n    if (!force && this.isSynchronized()) {\n      this._currentRenderId = this.getScene().getRenderId();\n      return this._worldMatrix;\n    }\n    this._updateCache();\n    this._cache.position.copyFrom(this.position);\n    if (!this._worldMatrix) {\n      this._worldMatrix = Matrix.Identity();\n    }\n    Matrix.TranslationToRef(this.position.x, this.position.y, this.position.z, this._worldMatrix);\n    if (this.parent && this.parent.getWorldMatrix) {\n      this._worldMatrix.multiplyToRef(this.parent.getWorldMatrix(), this._worldMatrix);\n      this._markSyncedWithParent();\n    }\n    // Cache the determinant\n    this._worldMatrixDeterminantIsDirty = true;\n    return this._worldMatrix;\n  }\n  /**\n   * Gets the minZ used for shadow according to both the scene and the light.\n   * @param activeCamera The camera we are returning the min for\n   * @returns the depth min z\n   */\n  getDepthMinZ(activeCamera) {\n    return this.shadowMinZ !== undefined ? this.shadowMinZ : activeCamera.minZ;\n  }\n  /**\n   * Gets the maxZ used for shadow according to both the scene and the light.\n   * @param activeCamera The camera we are returning the max for\n   * @returns the depth max z\n   */\n  getDepthMaxZ(activeCamera) {\n    return this.shadowMaxZ !== undefined ? this.shadowMaxZ : activeCamera.maxZ;\n  }\n  /**\n   * Sets the shadow projection matrix in parameter to the generated projection matrix.\n   * @param matrix The matrix to updated with the projection information\n   * @param viewMatrix The transform matrix of the light\n   * @param renderList The list of mesh to render in the map\n   * @returns The current light\n   */\n  setShadowProjectionMatrix(matrix, viewMatrix, renderList) {\n    if (this.customProjectionMatrixBuilder) {\n      this.customProjectionMatrixBuilder(viewMatrix, renderList, matrix);\n    } else {\n      this._setDefaultShadowProjectionMatrix(matrix, viewMatrix, renderList);\n    }\n    return this;\n  }\n  /** @internal */\n  _syncParentEnabledState() {\n    super._syncParentEnabledState();\n    if (!this.parent || !this.parent.getWorldMatrix) {\n      this.transformedPosition = null;\n      this.transformedDirection = null;\n    }\n  }\n}\n__decorate([serializeAsVector3()], ShadowLight.prototype, \"position\", null);\n__decorate([serializeAsVector3()], ShadowLight.prototype, \"direction\", null);\n__decorate([serialize()], ShadowLight.prototype, \"shadowMinZ\", null);\n__decorate([serialize()], ShadowLight.prototype, \"shadowMaxZ\", null);","map":{"version":3,"names":["serialize","serializeAsVector3","Matrix","Vector3","Light","Axis","ShadowLight","constructor","_needProjectionMatrixCompute","_setPosition","value","_position","position","_setDirection","_direction","direction","shadowMinZ","_shadowMinZ","forceProjectionMatrixCompute","shadowMaxZ","_shadowMaxZ","computeTransformedInformation","parent","getWorldMatrix","transformedPosition","Zero","TransformCoordinatesToRef","transformedDirection","TransformNormalToRef","getDepthScale","getShadowDirection","faceIndex","getAbsolutePosition","setDirectionToTarget","target","Normalize","subtract","getRotation","normalize","xaxis","Cross","Y","yaxis","RotationFromAxis","needCube","needProjectionMatrixCompute","_initCache","_cache","_isSynchronized","equals","computeWorldMatrix","force","isSynchronized","_currentRenderId","getScene","getRenderId","_worldMatrix","_updateCache","copyFrom","Identity","TranslationToRef","x","y","z","multiplyToRef","_markSyncedWithParent","_worldMatrixDeterminantIsDirty","getDepthMinZ","activeCamera","undefined","minZ","getDepthMaxZ","maxZ","setShadowProjectionMatrix","matrix","viewMatrix","renderList","customProjectionMatrixBuilder","_setDefaultShadowProjectionMatrix","_syncParentEnabledState","__decorate"],"sources":["../../../../dev/core/src/Lights/shadowLight.ts"],"sourcesContent":["import { serialize, serializeAsVector3 } from \"../Misc/decorators\";\r\nimport type { Camera } from \"../Cameras/camera\";\r\nimport type { Scene } from \"../scene\";\r\nimport { Matrix, Vector3 } from \"../Maths/math.vector\";\r\nimport type { AbstractMesh } from \"../Meshes/abstractMesh\";\r\nimport { Light } from \"./light\";\r\nimport { Axis } from \"../Maths/math.axis\";\r\n/**\r\n * Interface describing all the common properties and methods a shadow light needs to implement.\r\n * This helps both the shadow generator and materials to generate the corresponding shadow maps\r\n * as well as binding the different shadow properties to the effects.\r\n */\r\nexport interface IShadowLight extends Light {\r\n    /**\r\n     * The light id in the scene (used in scene.getLightById for instance)\r\n     */\r\n    id: string;\r\n    /**\r\n     * The position the shadow will be casted from.\r\n     */\r\n    position: Vector3;\r\n    /**\r\n     * In 2d mode (needCube being false), the direction used to cast the shadow.\r\n     */\r\n    direction: Vector3;\r\n    /**\r\n     * The transformed position. Position of the light in world space taking parenting in account.\r\n     */\r\n    transformedPosition: Vector3;\r\n    /**\r\n     * The transformed direction. Direction of the light in world space taking parenting in account.\r\n     */\r\n    transformedDirection: Vector3;\r\n    /**\r\n     * The friendly name of the light in the scene.\r\n     */\r\n    name: string;\r\n    /**\r\n     * Defines the shadow projection clipping minimum z value.\r\n     */\r\n    shadowMinZ: number;\r\n    /**\r\n     * Defines the shadow projection clipping maximum z value.\r\n     */\r\n    shadowMaxZ: number;\r\n\r\n    /**\r\n     * Computes the transformed information (transformedPosition and transformedDirection in World space) of the current light\r\n     * @returns true if the information has been computed, false if it does not need to (no parenting)\r\n     */\r\n    computeTransformedInformation(): boolean;\r\n\r\n    /**\r\n     * Gets the scene the light belongs to.\r\n     * @returns The scene\r\n     */\r\n    getScene(): Scene;\r\n\r\n    /**\r\n     * Callback defining a custom Projection Matrix Builder.\r\n     * This can be used to override the default projection matrix computation.\r\n     */\r\n    customProjectionMatrixBuilder: (viewMatrix: Matrix, renderList: Array<AbstractMesh>, result: Matrix) => void;\r\n\r\n    /**\r\n     * Sets the shadow projection matrix in parameter to the generated projection matrix.\r\n     * @param matrix The matrix to updated with the projection information\r\n     * @param viewMatrix The transform matrix of the light\r\n     * @param renderList The list of mesh to render in the map\r\n     * @returns The current light\r\n     */\r\n    setShadowProjectionMatrix(matrix: Matrix, viewMatrix: Matrix, renderList: Array<AbstractMesh>): IShadowLight;\r\n\r\n    /**\r\n     * Gets the current depth scale used in ESM.\r\n     * @returns The scale\r\n     */\r\n    getDepthScale(): number;\r\n\r\n    /**\r\n     * Returns whether or not the shadow generation require a cube texture or a 2d texture.\r\n     * @returns true if a cube texture needs to be use\r\n     */\r\n    needCube(): boolean;\r\n\r\n    /**\r\n     * Detects if the projection matrix requires to be recomputed this frame.\r\n     * @returns true if it requires to be recomputed otherwise, false.\r\n     */\r\n    needProjectionMatrixCompute(): boolean;\r\n\r\n    /**\r\n     * Forces the shadow generator to recompute the projection matrix even if position and direction did not changed.\r\n     */\r\n    forceProjectionMatrixCompute(): void;\r\n\r\n    /**\r\n     * Get the direction to use to render the shadow map. In case of cube texture, the face index can be passed.\r\n     * @param faceIndex The index of the face we are computed the direction to generate shadow\r\n     * @returns The set direction in 2d mode otherwise the direction to the cubemap face if needCube() is true\r\n     */\r\n    getShadowDirection(faceIndex?: number): Vector3;\r\n\r\n    /**\r\n     * Gets the minZ used for shadow according to both the scene and the light.\r\n     * @param activeCamera The camera we are returning the min for\r\n     * @returns the depth min z\r\n     */\r\n    getDepthMinZ(activeCamera: Camera): number;\r\n\r\n    /**\r\n     * Gets the maxZ used for shadow according to both the scene and the light.\r\n     * @param activeCamera The camera we are returning the max for\r\n     * @returns the depth max z\r\n     */\r\n    getDepthMaxZ(activeCamera: Camera): number;\r\n}\r\n\r\n/**\r\n * Base implementation IShadowLight\r\n * It groups all the common behaviour in order to reduce duplication and better follow the DRY pattern.\r\n */\r\nexport abstract class ShadowLight extends Light implements IShadowLight {\r\n    protected abstract _setDefaultShadowProjectionMatrix(matrix: Matrix, viewMatrix: Matrix, renderList: Array<AbstractMesh>): void;\r\n\r\n    protected _position: Vector3;\r\n    protected _setPosition(value: Vector3) {\r\n        this._position = value;\r\n    }\r\n    /**\r\n     * Sets the position the shadow will be casted from. Also use as the light position for both\r\n     * point and spot lights.\r\n     */\r\n    @serializeAsVector3()\r\n    public get position(): Vector3 {\r\n        return this._position;\r\n    }\r\n    /**\r\n     * Sets the position the shadow will be casted from. Also use as the light position for both\r\n     * point and spot lights.\r\n     */\r\n    public set position(value: Vector3) {\r\n        this._setPosition(value);\r\n    }\r\n\r\n    protected _direction: Vector3;\r\n    protected _setDirection(value: Vector3) {\r\n        this._direction = value;\r\n    }\r\n    /**\r\n     * In 2d mode (needCube being false), gets the direction used to cast the shadow.\r\n     * Also use as the light direction on spot and directional lights.\r\n     */\r\n    @serializeAsVector3()\r\n    public get direction(): Vector3 {\r\n        return this._direction;\r\n    }\r\n    /**\r\n     * In 2d mode (needCube being false), sets the direction used to cast the shadow.\r\n     * Also use as the light direction on spot and directional lights.\r\n     */\r\n    public set direction(value: Vector3) {\r\n        this._setDirection(value);\r\n    }\r\n\r\n    protected _shadowMinZ: number;\r\n    /**\r\n     * Gets the shadow projection clipping minimum z value.\r\n     */\r\n    @serialize()\r\n    public get shadowMinZ(): number {\r\n        return this._shadowMinZ;\r\n    }\r\n    /**\r\n     * Sets the shadow projection clipping minimum z value.\r\n     */\r\n    public set shadowMinZ(value: number) {\r\n        this._shadowMinZ = value;\r\n        this.forceProjectionMatrixCompute();\r\n    }\r\n\r\n    protected _shadowMaxZ: number;\r\n    /**\r\n     * Sets the shadow projection clipping maximum z value.\r\n     */\r\n    @serialize()\r\n    public get shadowMaxZ(): number {\r\n        return this._shadowMaxZ;\r\n    }\r\n    /**\r\n     * Gets the shadow projection clipping maximum z value.\r\n     */\r\n    public set shadowMaxZ(value: number) {\r\n        this._shadowMaxZ = value;\r\n        this.forceProjectionMatrixCompute();\r\n    }\r\n\r\n    /**\r\n     * Callback defining a custom Projection Matrix Builder.\r\n     * This can be used to override the default projection matrix computation.\r\n     */\r\n    public customProjectionMatrixBuilder: (viewMatrix: Matrix, renderList: Array<AbstractMesh>, result: Matrix) => void;\r\n\r\n    /**\r\n     * The transformed position. Position of the light in world space taking parenting in account.\r\n     */\r\n    public transformedPosition: Vector3;\r\n\r\n    /**\r\n     * The transformed direction. Direction of the light in world space taking parenting in account.\r\n     */\r\n    public transformedDirection: Vector3;\r\n\r\n    private _needProjectionMatrixCompute: boolean = true;\r\n\r\n    /**\r\n     * Computes the transformed information (transformedPosition and transformedDirection in World space) of the current light\r\n     * @returns true if the information has been computed, false if it does not need to (no parenting)\r\n     */\r\n    public computeTransformedInformation(): boolean {\r\n        if (this.parent && this.parent.getWorldMatrix) {\r\n            if (!this.transformedPosition) {\r\n                this.transformedPosition = Vector3.Zero();\r\n            }\r\n            Vector3.TransformCoordinatesToRef(this.position, this.parent.getWorldMatrix(), this.transformedPosition);\r\n\r\n            // In case the direction is present.\r\n            if (this.direction) {\r\n                if (!this.transformedDirection) {\r\n                    this.transformedDirection = Vector3.Zero();\r\n                }\r\n                Vector3.TransformNormalToRef(this.direction, this.parent.getWorldMatrix(), this.transformedDirection);\r\n            }\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Return the depth scale used for the shadow map.\r\n     * @returns the depth scale.\r\n     */\r\n    public getDepthScale(): number {\r\n        return 50.0;\r\n    }\r\n\r\n    /**\r\n     * Get the direction to use to render the shadow map. In case of cube texture, the face index can be passed.\r\n     * @param faceIndex The index of the face we are computed the direction to generate shadow\r\n     * @returns The set direction in 2d mode otherwise the direction to the cubemap face if needCube() is true\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    public getShadowDirection(faceIndex?: number): Vector3 {\r\n        return this.transformedDirection ? this.transformedDirection : this.direction;\r\n    }\r\n\r\n    /**\r\n     * Returns the ShadowLight absolute position in the World.\r\n     * @returns the position vector in world space\r\n     */\r\n    public getAbsolutePosition(): Vector3 {\r\n        return this.transformedPosition ? this.transformedPosition : this.position;\r\n    }\r\n\r\n    /**\r\n     * Sets the ShadowLight direction toward the passed target.\r\n     * @param target The point to target in local space\r\n     * @returns the updated ShadowLight direction\r\n     */\r\n    public setDirectionToTarget(target: Vector3): Vector3 {\r\n        this.direction = Vector3.Normalize(target.subtract(this.position));\r\n        return this.direction;\r\n    }\r\n\r\n    /**\r\n     * Returns the light rotation in euler definition.\r\n     * @returns the x y z rotation in local space.\r\n     */\r\n    public getRotation(): Vector3 {\r\n        this.direction.normalize();\r\n        const xaxis = Vector3.Cross(this.direction, Axis.Y);\r\n        const yaxis = Vector3.Cross(xaxis, this.direction);\r\n        return Vector3.RotationFromAxis(xaxis, yaxis, this.direction);\r\n    }\r\n\r\n    /**\r\n     * Returns whether or not the shadow generation require a cube texture or a 2d texture.\r\n     * @returns true if a cube texture needs to be use\r\n     */\r\n    public needCube(): boolean {\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Detects if the projection matrix requires to be recomputed this frame.\r\n     * @returns true if it requires to be recomputed otherwise, false.\r\n     */\r\n    public needProjectionMatrixCompute(): boolean {\r\n        return this._needProjectionMatrixCompute;\r\n    }\r\n\r\n    /**\r\n     * Forces the shadow generator to recompute the projection matrix even if position and direction did not changed.\r\n     */\r\n    public forceProjectionMatrixCompute(): void {\r\n        this._needProjectionMatrixCompute = true;\r\n    }\r\n\r\n    /** @internal */\r\n    public _initCache() {\r\n        super._initCache();\r\n\r\n        this._cache.position = Vector3.Zero();\r\n    }\r\n\r\n    /** @internal */\r\n    public _isSynchronized(): boolean {\r\n        if (!this._cache.position.equals(this.position)) {\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Computes the world matrix of the node\r\n     * @param force defines if the cache version should be invalidated forcing the world matrix to be created from scratch\r\n     * @returns the world matrix\r\n     */\r\n    public computeWorldMatrix(force?: boolean): Matrix {\r\n        if (!force && this.isSynchronized()) {\r\n            this._currentRenderId = this.getScene().getRenderId();\r\n            return this._worldMatrix;\r\n        }\r\n\r\n        this._updateCache();\r\n        this._cache.position.copyFrom(this.position);\r\n\r\n        if (!this._worldMatrix) {\r\n            this._worldMatrix = Matrix.Identity();\r\n        }\r\n\r\n        Matrix.TranslationToRef(this.position.x, this.position.y, this.position.z, this._worldMatrix);\r\n\r\n        if (this.parent && this.parent.getWorldMatrix) {\r\n            this._worldMatrix.multiplyToRef(this.parent.getWorldMatrix(), this._worldMatrix);\r\n\r\n            this._markSyncedWithParent();\r\n        }\r\n\r\n        // Cache the determinant\r\n        this._worldMatrixDeterminantIsDirty = true;\r\n\r\n        return this._worldMatrix;\r\n    }\r\n\r\n    /**\r\n     * Gets the minZ used for shadow according to both the scene and the light.\r\n     * @param activeCamera The camera we are returning the min for\r\n     * @returns the depth min z\r\n     */\r\n    public getDepthMinZ(activeCamera: Camera): number {\r\n        return this.shadowMinZ !== undefined ? this.shadowMinZ : activeCamera.minZ;\r\n    }\r\n\r\n    /**\r\n     * Gets the maxZ used for shadow according to both the scene and the light.\r\n     * @param activeCamera The camera we are returning the max for\r\n     * @returns the depth max z\r\n     */\r\n    public getDepthMaxZ(activeCamera: Camera): number {\r\n        return this.shadowMaxZ !== undefined ? this.shadowMaxZ : activeCamera.maxZ;\r\n    }\r\n\r\n    /**\r\n     * Sets the shadow projection matrix in parameter to the generated projection matrix.\r\n     * @param matrix The matrix to updated with the projection information\r\n     * @param viewMatrix The transform matrix of the light\r\n     * @param renderList The list of mesh to render in the map\r\n     * @returns The current light\r\n     */\r\n    public setShadowProjectionMatrix(matrix: Matrix, viewMatrix: Matrix, renderList: Array<AbstractMesh>): IShadowLight {\r\n        if (this.customProjectionMatrixBuilder) {\r\n            this.customProjectionMatrixBuilder(viewMatrix, renderList, matrix);\r\n        } else {\r\n            this._setDefaultShadowProjectionMatrix(matrix, viewMatrix, renderList);\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /** @internal */\r\n    protected _syncParentEnabledState() {\r\n        super._syncParentEnabledState();\r\n        if (!this.parent || !this.parent.getWorldMatrix) {\r\n            (this.transformedPosition as any) = null;\r\n            (this.transformedDirection as any) = null;\r\n        }\r\n    }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}