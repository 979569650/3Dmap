{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { RegisterClass } from \"../../../../Misc/typeStore.js\";\nimport { NodeGeometryBlockConnectionPointTypes } from \"../../Enums/nodeGeometryConnectionPointTypes.js\";\nimport { Vector3 } from \"../../../../Maths/math.vector.js\";\nimport { InstantiateBaseBlock } from \"./instantiateBaseBlock.js\";\n/**\n * Block used to instantiate a geometry inside a loop\n */\nexport class InstantiateBlock extends InstantiateBaseBlock {\n  /**\n   * Create a new InstantiateBlock\n   * @param name defines the block name\n   */\n  constructor(name) {\n    super(name);\n    this.registerInput(\"matrix\", NodeGeometryBlockConnectionPointTypes.Matrix, true);\n    this.registerInput(\"position\", NodeGeometryBlockConnectionPointTypes.Vector3, true, Vector3.Zero());\n    this.registerInput(\"rotation\", NodeGeometryBlockConnectionPointTypes.Vector3, true, Vector3.Zero());\n    this.registerInput(\"scaling\", NodeGeometryBlockConnectionPointTypes.Vector3, true, Vector3.One());\n    this.scaling.acceptedConnectionPointTypes.push(NodeGeometryBlockConnectionPointTypes.Float);\n  }\n  /**\n   * Gets the current instance index in the current flow\n   * @returns the current index\n   */\n  getInstanceIndex() {\n    return this._currentIndex;\n  }\n  /**\n   * Gets the current index in the current flow\n   * @returns the current index\n   */\n  getExecutionIndex() {\n    return this._currentIndex;\n  }\n  /**\n   * Gets the current loop index in the current flow\n   * @returns the current loop index\n   */\n  getExecutionLoopIndex() {\n    return this._currentIndex;\n  }\n  /**\n   * Gets the current face index in the current flow\n   * @returns the current face index\n   */\n  getExecutionFaceIndex() {\n    return 0;\n  }\n  /**\n   * Gets the current class name\n   * @returns the class name\n   */\n  getClassName() {\n    return \"InstantiateBlock\";\n  }\n  /**\n   * Gets the matrix input component\n   */\n  get matrix() {\n    return this._inputs[2];\n  }\n  /**\n   * Gets the position input component\n   */\n  get position() {\n    return this._inputs[3];\n  }\n  /**\n   * Gets the rotation input component\n   */\n  get rotation() {\n    return this._inputs[4];\n  }\n  /**\n   * Gets the scaling input component\n   */\n  get scaling() {\n    return this._inputs[5];\n  }\n  _buildBlock(state) {\n    const func = state => {\n      state.pushExecutionContext(this);\n      state.pushInstancingContext(this);\n      // Processing\n      const iterationCount = this.count.getConnectedValue(state);\n      const additionalVertexData = [];\n      for (this._currentIndex = 0; this._currentIndex < iterationCount; this._currentIndex++) {\n        const instanceGeometry = this.instance.getConnectedValue(state);\n        if (!instanceGeometry || !instanceGeometry.positions || instanceGeometry.positions.length === 0) {\n          continue;\n        }\n        // Clone the instance\n        const clone = instanceGeometry.clone();\n        // Transform\n        if (this.matrix.isConnected) {\n          const transform = this.matrix.getConnectedValue(state);\n          state._instantiateWithMatrix(clone, transform, additionalVertexData);\n        } else {\n          const position = this.position.getConnectedValue(state) || Vector3.ZeroReadOnly;\n          const scaling = state.adaptInput(this.scaling, NodeGeometryBlockConnectionPointTypes.Vector3, Vector3.OneReadOnly);\n          const rotation = this.rotation.getConnectedValue(state) || Vector3.ZeroReadOnly;\n          state._instantiate(clone, position, rotation, scaling, additionalVertexData);\n        }\n      }\n      // Merge\n      if (additionalVertexData.length) {\n        if (additionalVertexData.length === 1) {\n          this._vertexData = additionalVertexData[0];\n        } else {\n          // We do not merge the main one as user can use a merge node if wanted\n          const main = additionalVertexData.splice(0, 1)[0];\n          this._vertexData = main.merge(additionalVertexData, true, false, true, true);\n        }\n      }\n      state.restoreExecutionContext();\n      state.restoreInstancingContext();\n      return this._vertexData;\n    };\n    // Storage\n    if (this.evaluateContext) {\n      this.output._storedFunction = func;\n    } else {\n      this.output._storedFunction = null;\n      this.output._storedValue = func(state);\n    }\n  }\n}\nRegisterClass(\"BABYLON.InstantiateBlock\", InstantiateBlock);","map":{"version":3,"names":["RegisterClass","NodeGeometryBlockConnectionPointTypes","Vector3","InstantiateBaseBlock","InstantiateBlock","constructor","name","registerInput","Matrix","Zero","One","scaling","acceptedConnectionPointTypes","push","Float","getInstanceIndex","_currentIndex","getExecutionIndex","getExecutionLoopIndex","getExecutionFaceIndex","getClassName","matrix","_inputs","position","rotation","_buildBlock","state","func","pushExecutionContext","pushInstancingContext","iterationCount","count","getConnectedValue","additionalVertexData","instanceGeometry","instance","positions","length","clone","isConnected","transform","_instantiateWithMatrix","ZeroReadOnly","adaptInput","OneReadOnly","_instantiate","_vertexData","main","splice","merge","restoreExecutionContext","restoreInstancingContext","evaluateContext","output","_storedFunction","_storedValue"],"sources":["../../../../../../../dev/core/src/Meshes/Node/Blocks/Instances/instantiateBlock.ts"],"sourcesContent":["import type { NodeGeometryConnectionPoint } from \"../../nodeGeometryBlockConnectionPoint\";\r\nimport { RegisterClass } from \"../../../../Misc/typeStore\";\r\nimport { NodeGeometryBlockConnectionPointTypes } from \"../../Enums/nodeGeometryConnectionPointTypes\";\r\nimport type { NodeGeometryBuildState } from \"../../nodeGeometryBuildState\";\r\nimport type { VertexData } from \"../../../mesh.vertexData\";\r\nimport { Vector3 } from \"../../../../Maths/math.vector\";\r\nimport { InstantiateBaseBlock } from \"./instantiateBaseBlock\";\r\n\r\n/**\r\n * Block used to instantiate a geometry inside a loop\r\n */\r\nexport class InstantiateBlock extends InstantiateBaseBlock {\r\n    protected _vertexData: VertexData;\r\n    protected _currentIndex: number;\r\n\r\n    /**\r\n     * Create a new InstantiateBlock\r\n     * @param name defines the block name\r\n     */\r\n    public constructor(name: string) {\r\n        super(name);\r\n\r\n        this.registerInput(\"matrix\", NodeGeometryBlockConnectionPointTypes.Matrix, true);\r\n        this.registerInput(\"position\", NodeGeometryBlockConnectionPointTypes.Vector3, true, Vector3.Zero());\r\n        this.registerInput(\"rotation\", NodeGeometryBlockConnectionPointTypes.Vector3, true, Vector3.Zero());\r\n        this.registerInput(\"scaling\", NodeGeometryBlockConnectionPointTypes.Vector3, true, Vector3.One());\r\n\r\n        this.scaling.acceptedConnectionPointTypes.push(NodeGeometryBlockConnectionPointTypes.Float);\r\n    }\r\n\r\n    /**\r\n     * Gets the current instance index in the current flow\r\n     * @returns the current index\r\n     */\r\n    public getInstanceIndex(): number {\r\n        return this._currentIndex;\r\n    }\r\n\r\n    /**\r\n     * Gets the current index in the current flow\r\n     * @returns the current index\r\n     */\r\n    public getExecutionIndex(): number {\r\n        return this._currentIndex;\r\n    }\r\n\r\n    /**\r\n     * Gets the current loop index in the current flow\r\n     * @returns the current loop index\r\n     */\r\n    public getExecutionLoopIndex(): number {\r\n        return this._currentIndex;\r\n    }\r\n\r\n    /**\r\n     * Gets the current face index in the current flow\r\n     * @returns the current face index\r\n     */\r\n    public getExecutionFaceIndex(): number {\r\n        return 0;\r\n    }\r\n\r\n    /**\r\n     * Gets the current class name\r\n     * @returns the class name\r\n     */\r\n    public getClassName() {\r\n        return \"InstantiateBlock\";\r\n    }\r\n\r\n    /**\r\n     * Gets the matrix input component\r\n     */\r\n    public get matrix(): NodeGeometryConnectionPoint {\r\n        return this._inputs[2];\r\n    }\r\n\r\n    /**\r\n     * Gets the position input component\r\n     */\r\n    public get position(): NodeGeometryConnectionPoint {\r\n        return this._inputs[3];\r\n    }\r\n\r\n    /**\r\n     * Gets the rotation input component\r\n     */\r\n    public get rotation(): NodeGeometryConnectionPoint {\r\n        return this._inputs[4];\r\n    }\r\n\r\n    /**\r\n     * Gets the scaling input component\r\n     */\r\n    public get scaling(): NodeGeometryConnectionPoint {\r\n        return this._inputs[5];\r\n    }\r\n\r\n    protected _buildBlock(state: NodeGeometryBuildState) {\r\n        const func = (state: NodeGeometryBuildState) => {\r\n            state.pushExecutionContext(this);\r\n            state.pushInstancingContext(this);\r\n\r\n            // Processing\r\n            const iterationCount = this.count.getConnectedValue(state);\r\n            const additionalVertexData: VertexData[] = [];\r\n\r\n            for (this._currentIndex = 0; this._currentIndex < iterationCount; this._currentIndex++) {\r\n                const instanceGeometry = this.instance.getConnectedValue(state) as VertexData;\r\n\r\n                if (!instanceGeometry || !instanceGeometry.positions || instanceGeometry.positions.length === 0) {\r\n                    continue;\r\n                }\r\n\r\n                // Clone the instance\r\n                const clone = instanceGeometry.clone();\r\n\r\n                // Transform\r\n                if (this.matrix.isConnected) {\r\n                    const transform = this.matrix.getConnectedValue(state);\r\n                    state._instantiateWithMatrix(clone, transform, additionalVertexData);\r\n                } else {\r\n                    const position = this.position.getConnectedValue(state) || Vector3.ZeroReadOnly;\r\n                    const scaling = state.adaptInput(this.scaling, NodeGeometryBlockConnectionPointTypes.Vector3, Vector3.OneReadOnly);\r\n                    const rotation = this.rotation.getConnectedValue(state) || Vector3.ZeroReadOnly;\r\n                    state._instantiate(clone, position, rotation, scaling, additionalVertexData);\r\n                }\r\n            }\r\n\r\n            // Merge\r\n            if (additionalVertexData.length) {\r\n                if (additionalVertexData.length === 1) {\r\n                    this._vertexData = additionalVertexData[0];\r\n                } else {\r\n                    // We do not merge the main one as user can use a merge node if wanted\r\n                    const main = additionalVertexData.splice(0, 1)[0];\r\n                    this._vertexData = main.merge(additionalVertexData, true, false, true, true);\r\n                }\r\n            }\r\n\r\n            state.restoreExecutionContext();\r\n            state.restoreInstancingContext();\r\n            return this._vertexData;\r\n        };\r\n\r\n        // Storage\r\n\r\n        if (this.evaluateContext) {\r\n            this.output._storedFunction = func;\r\n        } else {\r\n            this.output._storedFunction = null;\r\n            this.output._storedValue = func(state);\r\n        }\r\n    }\r\n}\r\n\r\nRegisterClass(\"BABYLON.InstantiateBlock\", InstantiateBlock);\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}