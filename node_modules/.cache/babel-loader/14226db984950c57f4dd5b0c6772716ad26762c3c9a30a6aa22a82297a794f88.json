{"ast":null,"code":"import { PerfCounter } from \"@babylonjs/core/Misc/perfCounter.js\";\n/**\n * This class can be used to get instrumentation data from a AdvancedDynamicTexture object\n */\nexport class AdvancedDynamicTextureInstrumentation {\n  // Properties\n  /**\n   * Gets the perf counter used to capture render time\n   */\n  get renderTimeCounter() {\n    return this._renderTime;\n  }\n  /**\n   * Gets the perf counter used to capture layout time\n   */\n  get layoutTimeCounter() {\n    return this._layoutTime;\n  }\n  /**\n   * Enable or disable the render time capture\n   */\n  get captureRenderTime() {\n    return this._captureRenderTime;\n  }\n  set captureRenderTime(value) {\n    if (value === this._captureRenderTime) {\n      return;\n    }\n    this._captureRenderTime = value;\n    if (value) {\n      this._onBeginRenderObserver = this.texture.onBeginRenderObservable.add(() => {\n        this._renderTime.beginMonitoring();\n      });\n      this._onEndRenderObserver = this.texture.onEndRenderObservable.add(() => {\n        this._renderTime.endMonitoring(true);\n      });\n    } else {\n      this.texture.onBeginRenderObservable.remove(this._onBeginRenderObserver);\n      this._onBeginRenderObserver = null;\n      this.texture.onEndRenderObservable.remove(this._onEndRenderObserver);\n      this._onEndRenderObserver = null;\n    }\n  }\n  /**\n   * Enable or disable the layout time capture\n   */\n  get captureLayoutTime() {\n    return this._captureLayoutTime;\n  }\n  set captureLayoutTime(value) {\n    if (value === this._captureLayoutTime) {\n      return;\n    }\n    this._captureLayoutTime = value;\n    if (value) {\n      this._onBeginLayoutObserver = this.texture.onBeginLayoutObservable.add(() => {\n        this._layoutTime.beginMonitoring();\n      });\n      this._onEndLayoutObserver = this.texture.onEndLayoutObservable.add(() => {\n        this._layoutTime.endMonitoring(true);\n      });\n    } else {\n      this.texture.onBeginLayoutObservable.remove(this._onBeginLayoutObserver);\n      this._onBeginLayoutObserver = null;\n      this.texture.onEndLayoutObservable.remove(this._onEndLayoutObserver);\n      this._onEndLayoutObserver = null;\n    }\n  }\n  /**\n   * Instantiates a new advanced dynamic texture instrumentation.\n   * This class can be used to get instrumentation data from an AdvancedDynamicTexture object\n   * @param texture Defines the AdvancedDynamicTexture to instrument\n   */\n  constructor(\n  /**\n   * Define the instrumented AdvancedDynamicTexture.\n   */\n  texture) {\n    this.texture = texture;\n    this._captureRenderTime = false;\n    this._renderTime = new PerfCounter();\n    this._captureLayoutTime = false;\n    this._layoutTime = new PerfCounter();\n    // Observers\n    this._onBeginRenderObserver = null;\n    this._onEndRenderObserver = null;\n    this._onBeginLayoutObserver = null;\n    this._onEndLayoutObserver = null;\n  }\n  /**\n   * Dispose and release associated resources.\n   */\n  dispose() {\n    this.texture.onBeginRenderObservable.remove(this._onBeginRenderObserver);\n    this._onBeginRenderObserver = null;\n    this.texture.onEndRenderObservable.remove(this._onEndRenderObserver);\n    this._onEndRenderObserver = null;\n    this.texture.onBeginLayoutObservable.remove(this._onBeginLayoutObserver);\n    this._onBeginLayoutObserver = null;\n    this.texture.onEndLayoutObservable.remove(this._onEndLayoutObserver);\n    this._onEndLayoutObserver = null;\n    this.texture = null;\n  }\n}","map":{"version":3,"names":["PerfCounter","AdvancedDynamicTextureInstrumentation","renderTimeCounter","_renderTime","layoutTimeCounter","_layoutTime","captureRenderTime","_captureRenderTime","value","_onBeginRenderObserver","texture","onBeginRenderObservable","add","beginMonitoring","_onEndRenderObserver","onEndRenderObservable","endMonitoring","remove","captureLayoutTime","_captureLayoutTime","_onBeginLayoutObserver","onBeginLayoutObservable","_onEndLayoutObserver","onEndLayoutObservable","constructor","dispose"],"sources":["../../../../dev/gui/src/2D/adtInstrumentation.ts"],"sourcesContent":["import type { Nullable } from \"core/types\";\r\nimport type { Observer } from \"core/Misc/observable\";\r\nimport { PerfCounter } from \"core/Misc/perfCounter\";\r\nimport type { IDisposable } from \"core/scene\";\r\n\r\nimport type { AdvancedDynamicTexture } from \"./advancedDynamicTexture\";\r\n\r\n/**\r\n * This class can be used to get instrumentation data from a AdvancedDynamicTexture object\r\n */\r\nexport class AdvancedDynamicTextureInstrumentation implements IDisposable {\r\n    private _captureRenderTime = false;\r\n    private _renderTime = new PerfCounter();\r\n\r\n    private _captureLayoutTime = false;\r\n    private _layoutTime = new PerfCounter();\r\n\r\n    // Observers\r\n    private _onBeginRenderObserver: Nullable<Observer<AdvancedDynamicTexture>> = null;\r\n    private _onEndRenderObserver: Nullable<Observer<AdvancedDynamicTexture>> = null;\r\n    private _onBeginLayoutObserver: Nullable<Observer<AdvancedDynamicTexture>> = null;\r\n    private _onEndLayoutObserver: Nullable<Observer<AdvancedDynamicTexture>> = null;\r\n\r\n    // Properties\r\n\r\n    /**\r\n     * Gets the perf counter used to capture render time\r\n     */\r\n    public get renderTimeCounter(): PerfCounter {\r\n        return this._renderTime;\r\n    }\r\n\r\n    /**\r\n     * Gets the perf counter used to capture layout time\r\n     */\r\n    public get layoutTimeCounter(): PerfCounter {\r\n        return this._layoutTime;\r\n    }\r\n\r\n    /**\r\n     * Enable or disable the render time capture\r\n     */\r\n    public get captureRenderTime(): boolean {\r\n        return this._captureRenderTime;\r\n    }\r\n\r\n    public set captureRenderTime(value: boolean) {\r\n        if (value === this._captureRenderTime) {\r\n            return;\r\n        }\r\n\r\n        this._captureRenderTime = value;\r\n\r\n        if (value) {\r\n            this._onBeginRenderObserver = this.texture.onBeginRenderObservable.add(() => {\r\n                this._renderTime.beginMonitoring();\r\n            });\r\n\r\n            this._onEndRenderObserver = this.texture.onEndRenderObservable.add(() => {\r\n                this._renderTime.endMonitoring(true);\r\n            });\r\n        } else {\r\n            this.texture.onBeginRenderObservable.remove(this._onBeginRenderObserver);\r\n            this._onBeginRenderObserver = null;\r\n            this.texture.onEndRenderObservable.remove(this._onEndRenderObserver);\r\n            this._onEndRenderObserver = null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Enable or disable the layout time capture\r\n     */\r\n    public get captureLayoutTime(): boolean {\r\n        return this._captureLayoutTime;\r\n    }\r\n\r\n    public set captureLayoutTime(value: boolean) {\r\n        if (value === this._captureLayoutTime) {\r\n            return;\r\n        }\r\n\r\n        this._captureLayoutTime = value;\r\n\r\n        if (value) {\r\n            this._onBeginLayoutObserver = this.texture.onBeginLayoutObservable.add(() => {\r\n                this._layoutTime.beginMonitoring();\r\n            });\r\n\r\n            this._onEndLayoutObserver = this.texture.onEndLayoutObservable.add(() => {\r\n                this._layoutTime.endMonitoring(true);\r\n            });\r\n        } else {\r\n            this.texture.onBeginLayoutObservable.remove(this._onBeginLayoutObserver);\r\n            this._onBeginLayoutObserver = null;\r\n            this.texture.onEndLayoutObservable.remove(this._onEndLayoutObserver);\r\n            this._onEndLayoutObserver = null;\r\n        }\r\n    }\r\n    /**\r\n     * Instantiates a new advanced dynamic texture instrumentation.\r\n     * This class can be used to get instrumentation data from an AdvancedDynamicTexture object\r\n     * @param texture Defines the AdvancedDynamicTexture to instrument\r\n     */\r\n    public constructor(\r\n        /**\r\n         * Define the instrumented AdvancedDynamicTexture.\r\n         */\r\n        public texture: AdvancedDynamicTexture\r\n    ) {}\r\n\r\n    /**\r\n     * Dispose and release associated resources.\r\n     */\r\n    public dispose() {\r\n        this.texture.onBeginRenderObservable.remove(this._onBeginRenderObserver);\r\n        this._onBeginRenderObserver = null;\r\n        this.texture.onEndRenderObservable.remove(this._onEndRenderObserver);\r\n        this._onEndRenderObserver = null;\r\n        this.texture.onBeginLayoutObservable.remove(this._onBeginLayoutObserver);\r\n        this._onBeginLayoutObserver = null;\r\n        this.texture.onEndLayoutObservable.remove(this._onEndLayoutObserver);\r\n        this._onEndLayoutObserver = null;\r\n\r\n        (<any>this.texture) = null;\r\n    }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}