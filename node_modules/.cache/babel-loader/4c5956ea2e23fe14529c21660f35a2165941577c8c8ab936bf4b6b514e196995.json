{"ast":null,"code":"import { Logger } from \"../Misc/logger.js\";\nimport { Observable } from \"../Misc/observable.js\";\nimport { Vector3 } from \"../Maths/math.vector.js\";\nimport { Color3 } from \"../Maths/math.color.js\";\nimport { CreatePolyhedron } from \"../Meshes/Builders/polyhedronBuilder.js\";\nimport { GizmoCoordinatesMode, Gizmo } from \"./gizmo.js\";\nimport { AxisScaleGizmo } from \"./axisScaleGizmo.js\";\nimport { UtilityLayerRenderer } from \"../Rendering/utilityLayerRenderer.js\";\nimport { StandardMaterial } from \"../Materials/standardMaterial.js\";\n/**\n * Gizmo that enables scaling a mesh along 3 axis\n */\nexport class ScaleGizmo extends Gizmo {\n  /** Default material used to render when gizmo is not disabled or hovered */\n  get coloredMaterial() {\n    return this._coloredMaterial;\n  }\n  /** Material used to render when gizmo is hovered with mouse*/\n  get hoverMaterial() {\n    return this._hoverMaterial;\n  }\n  /** Material used to render when gizmo is disabled. typically grey.*/\n  get disableMaterial() {\n    return this._disableMaterial;\n  }\n  get attachedMesh() {\n    return this._meshAttached;\n  }\n  set attachedMesh(mesh) {\n    this._meshAttached = mesh;\n    this._nodeAttached = mesh;\n    [this.xGizmo, this.yGizmo, this.zGizmo, this.uniformScaleGizmo].forEach(gizmo => {\n      if (gizmo.isEnabled) {\n        gizmo.attachedMesh = mesh;\n      } else {\n        gizmo.attachedMesh = null;\n      }\n    });\n  }\n  get attachedNode() {\n    return this._nodeAttached;\n  }\n  set attachedNode(node) {\n    this._meshAttached = null;\n    this._nodeAttached = node;\n    [this.xGizmo, this.yGizmo, this.zGizmo, this.uniformScaleGizmo].forEach(gizmo => {\n      if (gizmo.isEnabled) {\n        gizmo.attachedNode = node;\n      } else {\n        gizmo.attachedNode = null;\n      }\n    });\n  }\n  set updateScale(value) {\n    if (this.xGizmo) {\n      this.xGizmo.updateScale = value;\n      this.yGizmo.updateScale = value;\n      this.zGizmo.updateScale = value;\n    }\n  }\n  get updateScale() {\n    return this.xGizmo.updateScale;\n  }\n  /**\n   * True when the mouse pointer is hovering a gizmo mesh\n   */\n  get isHovered() {\n    let hovered = false;\n    [this.xGizmo, this.yGizmo, this.zGizmo].forEach(gizmo => {\n      hovered = hovered || gizmo.isHovered;\n    });\n    return hovered;\n  }\n  /**\n   * Creates a ScaleGizmo\n   * @param gizmoLayer The utility layer the gizmo will be added to\n   * @param thickness display gizmo axis thickness\n   * @param gizmoManager\n   */\n  constructor(gizmoLayer = UtilityLayerRenderer.DefaultUtilityLayer, thickness = 1, gizmoManager) {\n    super(gizmoLayer);\n    this._meshAttached = null;\n    this._nodeAttached = null;\n    this._sensitivity = 1;\n    this._observables = [];\n    /** Node Caching for quick lookup */\n    this._gizmoAxisCache = new Map();\n    /** Fires an event when any of it's sub gizmos are dragged */\n    this.onDragStartObservable = new Observable();\n    /** Fires an event when any of it's sub gizmos are being dragged */\n    this.onDragObservable = new Observable();\n    /** Fires an event when any of it's sub gizmos are released from dragging */\n    this.onDragEndObservable = new Observable();\n    this.uniformScaleGizmo = this._createUniformScaleMesh();\n    this.xGizmo = new AxisScaleGizmo(new Vector3(1, 0, 0), Color3.Red().scale(0.5), gizmoLayer, this, thickness);\n    this.yGizmo = new AxisScaleGizmo(new Vector3(0, 1, 0), Color3.Green().scale(0.5), gizmoLayer, this, thickness);\n    this.zGizmo = new AxisScaleGizmo(new Vector3(0, 0, 1), Color3.Blue().scale(0.5), gizmoLayer, this, thickness);\n    // Relay drag events\n    [this.xGizmo, this.yGizmo, this.zGizmo, this.uniformScaleGizmo].forEach(gizmo => {\n      gizmo.dragBehavior.onDragStartObservable.add(() => {\n        this.onDragStartObservable.notifyObservers({});\n      });\n      gizmo.dragBehavior.onDragObservable.add(() => {\n        this.onDragObservable.notifyObservers({});\n      });\n      gizmo.dragBehavior.onDragEndObservable.add(() => {\n        this.onDragEndObservable.notifyObservers({});\n      });\n    });\n    this.attachedMesh = null;\n    this.attachedNode = null;\n    if (gizmoManager) {\n      gizmoManager.addToAxisCache(this._gizmoAxisCache);\n    } else {\n      // Only subscribe to pointer event if gizmoManager isnt\n      Gizmo.GizmoAxisPointerObserver(gizmoLayer, this._gizmoAxisCache);\n    }\n  }\n  /** Create Geometry for Gizmo */\n  _createUniformScaleMesh() {\n    this._coloredMaterial = new StandardMaterial(\"\", this.gizmoLayer.utilityLayerScene);\n    this._coloredMaterial.diffuseColor = Color3.Gray();\n    this._hoverMaterial = new StandardMaterial(\"\", this.gizmoLayer.utilityLayerScene);\n    this._hoverMaterial.diffuseColor = Color3.Yellow();\n    this._disableMaterial = new StandardMaterial(\"\", this.gizmoLayer.utilityLayerScene);\n    this._disableMaterial.diffuseColor = Color3.Gray();\n    this._disableMaterial.alpha = 0.4;\n    const uniformScaleGizmo = new AxisScaleGizmo(new Vector3(0, 1, 0), Color3.Gray().scale(0.5), this.gizmoLayer, this);\n    uniformScaleGizmo.updateGizmoRotationToMatchAttachedMesh = false;\n    uniformScaleGizmo.uniformScaling = true;\n    this._uniformScalingMesh = CreatePolyhedron(\"uniform\", {\n      type: 1\n    }, uniformScaleGizmo.gizmoLayer.utilityLayerScene);\n    this._uniformScalingMesh.scaling.scaleInPlace(0.01);\n    this._uniformScalingMesh.visibility = 0;\n    this._octahedron = CreatePolyhedron(\"\", {\n      type: 1\n    }, uniformScaleGizmo.gizmoLayer.utilityLayerScene);\n    this._octahedron.scaling.scaleInPlace(0.007);\n    this._uniformScalingMesh.addChild(this._octahedron);\n    uniformScaleGizmo.setCustomMesh(this._uniformScalingMesh, true);\n    const light = this.gizmoLayer._getSharedGizmoLight();\n    light.includedOnlyMeshes = light.includedOnlyMeshes.concat(this._octahedron);\n    const cache = {\n      gizmoMeshes: [this._octahedron, this._uniformScalingMesh],\n      colliderMeshes: [this._uniformScalingMesh],\n      material: this._coloredMaterial,\n      hoverMaterial: this._hoverMaterial,\n      disableMaterial: this._disableMaterial,\n      active: false,\n      dragBehavior: uniformScaleGizmo.dragBehavior\n    };\n    this.addToAxisCache(uniformScaleGizmo._rootMesh, cache);\n    return uniformScaleGizmo;\n  }\n  set updateGizmoRotationToMatchAttachedMesh(value) {\n    if (!value) {\n      Logger.Warn(\"Setting updateGizmoRotationToMatchAttachedMesh = false on scaling gizmo is not supported.\");\n    } else {\n      this._updateGizmoRotationToMatchAttachedMesh = value;\n      [this.xGizmo, this.yGizmo, this.zGizmo, this.uniformScaleGizmo].forEach(gizmo => {\n        if (gizmo) {\n          gizmo.updateGizmoRotationToMatchAttachedMesh = value;\n        }\n      });\n    }\n  }\n  get updateGizmoRotationToMatchAttachedMesh() {\n    return this._updateGizmoRotationToMatchAttachedMesh;\n  }\n  set anchorPoint(value) {\n    this._anchorPoint = value;\n    [this.xGizmo, this.yGizmo, this.zGizmo, this.uniformScaleGizmo].forEach(gizmo => {\n      if (gizmo) {\n        gizmo.anchorPoint = value;\n      }\n    });\n  }\n  get anchorPoint() {\n    return this._anchorPoint;\n  }\n  /**\n   * Set the coordinate system to use. By default it's local.\n   * But it's possible for a user to tweak so its local for translation and world for rotation.\n   * In that case, setting the coordinate system will change `updateGizmoRotationToMatchAttachedMesh` and `updateGizmoPositionToMatchAttachedMesh`\n   */\n  set coordinatesMode(coordinatesMode) {\n    if (coordinatesMode == GizmoCoordinatesMode.World) {\n      Logger.Warn(\"Setting coordinates Mode to world on scaling gizmo is not supported.\");\n    }\n    [this.xGizmo, this.yGizmo, this.zGizmo, this.uniformScaleGizmo].forEach(gizmo => {\n      gizmo.coordinatesMode = GizmoCoordinatesMode.Local;\n    });\n  }\n  /**\n   * Drag distance in babylon units that the gizmo will snap to when dragged (Default: 0)\n   */\n  set snapDistance(value) {\n    this._snapDistance = value;\n    [this.xGizmo, this.yGizmo, this.zGizmo, this.uniformScaleGizmo].forEach(gizmo => {\n      if (gizmo) {\n        gizmo.snapDistance = value;\n      }\n    });\n  }\n  get snapDistance() {\n    return this._snapDistance;\n  }\n  /**\n   * Ratio for the scale of the gizmo (Default: 1)\n   */\n  set scaleRatio(value) {\n    this._scaleRatio = value;\n    [this.xGizmo, this.yGizmo, this.zGizmo, this.uniformScaleGizmo].forEach(gizmo => {\n      if (gizmo) {\n        gizmo.scaleRatio = value;\n      }\n    });\n  }\n  get scaleRatio() {\n    return this._scaleRatio;\n  }\n  /**\n   * Sensitivity factor for dragging (Default: 1)\n   */\n  set sensitivity(value) {\n    this._sensitivity = value;\n    [this.xGizmo, this.yGizmo, this.zGizmo, this.uniformScaleGizmo].forEach(gizmo => {\n      if (gizmo) {\n        gizmo.sensitivity = value;\n      }\n    });\n  }\n  get sensitivity() {\n    return this._sensitivity;\n  }\n  /**\n   * Builds Gizmo Axis Cache to enable features such as hover state preservation and graying out other axis during manipulation\n   * @param mesh Axis gizmo mesh\n   * @param cache Gizmo axis definition used for reactive gizmo UI\n   */\n  addToAxisCache(mesh, cache) {\n    this._gizmoAxisCache.set(mesh, cache);\n  }\n  /**\n   * Disposes of the gizmo\n   */\n  dispose() {\n    [this.xGizmo, this.yGizmo, this.zGizmo, this.uniformScaleGizmo].forEach(gizmo => {\n      if (gizmo) {\n        gizmo.dispose();\n      }\n    });\n    this._observables.forEach(obs => {\n      this.gizmoLayer.utilityLayerScene.onPointerObservable.remove(obs);\n    });\n    this.onDragStartObservable.clear();\n    this.onDragObservable.clear();\n    this.onDragEndObservable.clear();\n    [this._uniformScalingMesh, this._octahedron].forEach(msh => {\n      if (msh) {\n        msh.dispose();\n      }\n    });\n    [this._coloredMaterial, this._hoverMaterial, this._disableMaterial].forEach(matl => {\n      if (matl) {\n        matl.dispose();\n      }\n    });\n  }\n}","map":{"version":3,"names":["Logger","Observable","Vector3","Color3","CreatePolyhedron","GizmoCoordinatesMode","Gizmo","AxisScaleGizmo","UtilityLayerRenderer","StandardMaterial","ScaleGizmo","coloredMaterial","_coloredMaterial","hoverMaterial","_hoverMaterial","disableMaterial","_disableMaterial","attachedMesh","_meshAttached","mesh","_nodeAttached","xGizmo","yGizmo","zGizmo","uniformScaleGizmo","forEach","gizmo","isEnabled","attachedNode","node","updateScale","value","isHovered","hovered","constructor","gizmoLayer","DefaultUtilityLayer","thickness","gizmoManager","_sensitivity","_observables","_gizmoAxisCache","Map","onDragStartObservable","onDragObservable","onDragEndObservable","_createUniformScaleMesh","Red","scale","Green","Blue","dragBehavior","add","notifyObservers","addToAxisCache","GizmoAxisPointerObserver","utilityLayerScene","diffuseColor","Gray","Yellow","alpha","updateGizmoRotationToMatchAttachedMesh","uniformScaling","_uniformScalingMesh","type","scaling","scaleInPlace","visibility","_octahedron","addChild","setCustomMesh","light","_getSharedGizmoLight","includedOnlyMeshes","concat","cache","gizmoMeshes","colliderMeshes","material","active","_rootMesh","Warn","_updateGizmoRotationToMatchAttachedMesh","anchorPoint","_anchorPoint","coordinatesMode","World","Local","snapDistance","_snapDistance","scaleRatio","_scaleRatio","sensitivity","set","dispose","obs","onPointerObservable","remove","clear","msh","matl"],"sources":["../../../../dev/core/src/Gizmos/scaleGizmo.ts"],"sourcesContent":["import { Logger } from \"../Misc/logger\";\r\nimport type { Observer } from \"../Misc/observable\";\r\nimport { Observable } from \"../Misc/observable\";\r\nimport type { Nullable } from \"../types\";\r\nimport { Vector3 } from \"../Maths/math.vector\";\r\nimport { Color3 } from \"../Maths/math.color\";\r\nimport type { AbstractMesh } from \"../Meshes/abstractMesh\";\r\nimport { CreatePolyhedron } from \"../Meshes/Builders/polyhedronBuilder\";\r\nimport type { GizmoAnchorPoint, GizmoAxisCache, IGizmo } from \"./gizmo\";\r\nimport { GizmoCoordinatesMode, Gizmo } from \"./gizmo\";\r\nimport type { IAxisScaleGizmo } from \"./axisScaleGizmo\";\r\nimport { AxisScaleGizmo } from \"./axisScaleGizmo\";\r\nimport { UtilityLayerRenderer } from \"../Rendering/utilityLayerRenderer\";\r\nimport type { Mesh } from \"../Meshes/mesh\";\r\nimport type { Node } from \"../node\";\r\nimport type { PointerInfo } from \"../Events/pointerEvents\";\r\nimport { StandardMaterial } from \"../Materials/standardMaterial\";\r\nimport type { GizmoManager } from \"./gizmoManager\";\r\n\r\n/**\r\n * Interface for scale gizmo\r\n */\r\nexport interface IScaleGizmo extends IGizmo {\r\n    /** Internal gizmo used for interactions on the x axis */\r\n    xGizmo: IAxisScaleGizmo;\r\n    /** Internal gizmo used for interactions on the y axis */\r\n    yGizmo: IAxisScaleGizmo;\r\n    /** Internal gizmo used for interactions on the z axis */\r\n    zGizmo: IAxisScaleGizmo;\r\n    /** Internal gizmo used to scale all axis equally*/\r\n    uniformScaleGizmo: IAxisScaleGizmo;\r\n    /** Fires an event when any of it's sub gizmos are dragged */\r\n    onDragStartObservable: Observable<unknown>;\r\n    /** Fires an event when any of it's sub gizmos are being dragged */\r\n    onDragObservable: Observable<unknown>;\r\n    /** Fires an event when any of it's sub gizmos are released from dragging */\r\n    onDragEndObservable: Observable<unknown>;\r\n    /** Drag distance in babylon units that the gizmo will snap to when dragged */\r\n    snapDistance: number;\r\n    /** Sensitivity factor for dragging */\r\n    sensitivity: number;\r\n    /**\r\n     * Builds Gizmo Axis Cache to enable features such as hover state preservation and graying out other axis during manipulation\r\n     * @param mesh Axis gizmo mesh\r\n     * @param cache Gizmo axis definition used for reactive gizmo UI\r\n     */\r\n    addToAxisCache(mesh: Mesh, cache: GizmoAxisCache): void;\r\n\r\n    /** Default material used to render when gizmo is not disabled or hovered */\r\n    coloredMaterial: StandardMaterial;\r\n    /** Material used to render when gizmo is hovered with mouse*/\r\n    hoverMaterial: StandardMaterial;\r\n    /** Material used to render when gizmo is disabled. typically grey.*/\r\n    disableMaterial: StandardMaterial;\r\n}\r\n\r\n/**\r\n * Gizmo that enables scaling a mesh along 3 axis\r\n */\r\nexport class ScaleGizmo extends Gizmo implements IScaleGizmo {\r\n    /**\r\n     * Internal gizmo used for interactions on the x axis\r\n     */\r\n    public xGizmo: IAxisScaleGizmo;\r\n    /**\r\n     * Internal gizmo used for interactions on the y axis\r\n     */\r\n    public yGizmo: IAxisScaleGizmo;\r\n    /**\r\n     * Internal gizmo used for interactions on the z axis\r\n     */\r\n    public zGizmo: IAxisScaleGizmo;\r\n\r\n    /**\r\n     * Internal gizmo used to scale all axis equally\r\n     */\r\n    public uniformScaleGizmo: IAxisScaleGizmo;\r\n\r\n    protected _meshAttached: Nullable<AbstractMesh> = null;\r\n    protected _nodeAttached: Nullable<Node> = null;\r\n    protected _snapDistance: number;\r\n    protected _uniformScalingMesh: Mesh;\r\n    protected _octahedron: Mesh;\r\n    protected _sensitivity: number = 1;\r\n    protected _coloredMaterial: StandardMaterial;\r\n    protected _hoverMaterial: StandardMaterial;\r\n    protected _disableMaterial: StandardMaterial;\r\n    protected _observables: Observer<PointerInfo>[] = [];\r\n\r\n    /** Node Caching for quick lookup */\r\n    protected _gizmoAxisCache: Map<Mesh, GizmoAxisCache> = new Map();\r\n\r\n    /** Default material used to render when gizmo is not disabled or hovered */\r\n    public get coloredMaterial() {\r\n        return this._coloredMaterial;\r\n    }\r\n\r\n    /** Material used to render when gizmo is hovered with mouse*/\r\n    public get hoverMaterial() {\r\n        return this._hoverMaterial;\r\n    }\r\n\r\n    /** Material used to render when gizmo is disabled. typically grey.*/\r\n    public get disableMaterial() {\r\n        return this._disableMaterial;\r\n    }\r\n    /** Fires an event when any of it's sub gizmos are dragged */\r\n    public onDragStartObservable = new Observable();\r\n    /** Fires an event when any of it's sub gizmos are being dragged */\r\n    public onDragObservable = new Observable();\r\n    /** Fires an event when any of it's sub gizmos are released from dragging */\r\n    public onDragEndObservable = new Observable();\r\n\r\n    public get attachedMesh() {\r\n        return this._meshAttached;\r\n    }\r\n    public set attachedMesh(mesh: Nullable<AbstractMesh>) {\r\n        this._meshAttached = mesh;\r\n        this._nodeAttached = mesh;\r\n        [this.xGizmo, this.yGizmo, this.zGizmo, this.uniformScaleGizmo].forEach((gizmo) => {\r\n            if (gizmo.isEnabled) {\r\n                gizmo.attachedMesh = mesh;\r\n            } else {\r\n                gizmo.attachedMesh = null;\r\n            }\r\n        });\r\n    }\r\n\r\n    public get attachedNode() {\r\n        return this._nodeAttached;\r\n    }\r\n    public set attachedNode(node: Nullable<Node>) {\r\n        this._meshAttached = null;\r\n        this._nodeAttached = node;\r\n        [this.xGizmo, this.yGizmo, this.zGizmo, this.uniformScaleGizmo].forEach((gizmo) => {\r\n            if (gizmo.isEnabled) {\r\n                gizmo.attachedNode = node;\r\n            } else {\r\n                gizmo.attachedNode = null;\r\n            }\r\n        });\r\n    }\r\n\r\n    public set updateScale(value: boolean) {\r\n        if (this.xGizmo) {\r\n            this.xGizmo.updateScale = value;\r\n            this.yGizmo.updateScale = value;\r\n            this.zGizmo.updateScale = value;\r\n        }\r\n    }\r\n    public get updateScale() {\r\n        return this.xGizmo.updateScale;\r\n    }\r\n    /**\r\n     * True when the mouse pointer is hovering a gizmo mesh\r\n     */\r\n    public get isHovered() {\r\n        let hovered = false;\r\n        [this.xGizmo, this.yGizmo, this.zGizmo].forEach((gizmo) => {\r\n            hovered = hovered || gizmo.isHovered;\r\n        });\r\n        return hovered;\r\n    }\r\n\r\n    /**\r\n     * Creates a ScaleGizmo\r\n     * @param gizmoLayer The utility layer the gizmo will be added to\r\n     * @param thickness display gizmo axis thickness\r\n     * @param gizmoManager\r\n     */\r\n    constructor(gizmoLayer: UtilityLayerRenderer = UtilityLayerRenderer.DefaultUtilityLayer, thickness: number = 1, gizmoManager?: GizmoManager) {\r\n        super(gizmoLayer);\r\n        this.uniformScaleGizmo = this._createUniformScaleMesh();\r\n        this.xGizmo = new AxisScaleGizmo(new Vector3(1, 0, 0), Color3.Red().scale(0.5), gizmoLayer, this, thickness);\r\n        this.yGizmo = new AxisScaleGizmo(new Vector3(0, 1, 0), Color3.Green().scale(0.5), gizmoLayer, this, thickness);\r\n        this.zGizmo = new AxisScaleGizmo(new Vector3(0, 0, 1), Color3.Blue().scale(0.5), gizmoLayer, this, thickness);\r\n\r\n        // Relay drag events\r\n        [this.xGizmo, this.yGizmo, this.zGizmo, this.uniformScaleGizmo].forEach((gizmo) => {\r\n            gizmo.dragBehavior.onDragStartObservable.add(() => {\r\n                this.onDragStartObservable.notifyObservers({});\r\n            });\r\n            gizmo.dragBehavior.onDragObservable.add(() => {\r\n                this.onDragObservable.notifyObservers({});\r\n            });\r\n            gizmo.dragBehavior.onDragEndObservable.add(() => {\r\n                this.onDragEndObservable.notifyObservers({});\r\n            });\r\n        });\r\n\r\n        this.attachedMesh = null;\r\n        this.attachedNode = null;\r\n\r\n        if (gizmoManager) {\r\n            gizmoManager.addToAxisCache(this._gizmoAxisCache);\r\n        } else {\r\n            // Only subscribe to pointer event if gizmoManager isnt\r\n            Gizmo.GizmoAxisPointerObserver(gizmoLayer, this._gizmoAxisCache);\r\n        }\r\n    }\r\n\r\n    /** Create Geometry for Gizmo */\r\n    protected _createUniformScaleMesh(): AxisScaleGizmo {\r\n        this._coloredMaterial = new StandardMaterial(\"\", this.gizmoLayer.utilityLayerScene);\r\n        this._coloredMaterial.diffuseColor = Color3.Gray();\r\n\r\n        this._hoverMaterial = new StandardMaterial(\"\", this.gizmoLayer.utilityLayerScene);\r\n        this._hoverMaterial.diffuseColor = Color3.Yellow();\r\n\r\n        this._disableMaterial = new StandardMaterial(\"\", this.gizmoLayer.utilityLayerScene);\r\n        this._disableMaterial.diffuseColor = Color3.Gray();\r\n        this._disableMaterial.alpha = 0.4;\r\n\r\n        const uniformScaleGizmo = new AxisScaleGizmo(new Vector3(0, 1, 0), Color3.Gray().scale(0.5), this.gizmoLayer, this);\r\n        uniformScaleGizmo.updateGizmoRotationToMatchAttachedMesh = false;\r\n        uniformScaleGizmo.uniformScaling = true;\r\n        this._uniformScalingMesh = CreatePolyhedron(\"uniform\", { type: 1 }, uniformScaleGizmo.gizmoLayer.utilityLayerScene);\r\n        this._uniformScalingMesh.scaling.scaleInPlace(0.01);\r\n        this._uniformScalingMesh.visibility = 0;\r\n        this._octahedron = CreatePolyhedron(\"\", { type: 1 }, uniformScaleGizmo.gizmoLayer.utilityLayerScene);\r\n        this._octahedron.scaling.scaleInPlace(0.007);\r\n        this._uniformScalingMesh.addChild(this._octahedron);\r\n        uniformScaleGizmo.setCustomMesh(this._uniformScalingMesh, true);\r\n        const light = this.gizmoLayer._getSharedGizmoLight();\r\n        light.includedOnlyMeshes = light.includedOnlyMeshes.concat(this._octahedron);\r\n\r\n        const cache: GizmoAxisCache = {\r\n            gizmoMeshes: [this._octahedron, this._uniformScalingMesh],\r\n            colliderMeshes: [this._uniformScalingMesh],\r\n            material: this._coloredMaterial,\r\n            hoverMaterial: this._hoverMaterial,\r\n            disableMaterial: this._disableMaterial,\r\n            active: false,\r\n            dragBehavior: uniformScaleGizmo.dragBehavior,\r\n        };\r\n\r\n        this.addToAxisCache(uniformScaleGizmo._rootMesh, cache);\r\n\r\n        return uniformScaleGizmo;\r\n    }\r\n\r\n    public set updateGizmoRotationToMatchAttachedMesh(value: boolean) {\r\n        if (!value) {\r\n            Logger.Warn(\"Setting updateGizmoRotationToMatchAttachedMesh = false on scaling gizmo is not supported.\");\r\n        } else {\r\n            this._updateGizmoRotationToMatchAttachedMesh = value;\r\n            [this.xGizmo, this.yGizmo, this.zGizmo, this.uniformScaleGizmo].forEach((gizmo) => {\r\n                if (gizmo) {\r\n                    gizmo.updateGizmoRotationToMatchAttachedMesh = value;\r\n                }\r\n            });\r\n        }\r\n    }\r\n    public get updateGizmoRotationToMatchAttachedMesh() {\r\n        return this._updateGizmoRotationToMatchAttachedMesh;\r\n    }\r\n\r\n    public set anchorPoint(value: GizmoAnchorPoint) {\r\n        this._anchorPoint = value;\r\n        [this.xGizmo, this.yGizmo, this.zGizmo, this.uniformScaleGizmo].forEach((gizmo) => {\r\n            if (gizmo) {\r\n                gizmo.anchorPoint = value;\r\n            }\r\n        });\r\n    }\r\n    public get anchorPoint() {\r\n        return this._anchorPoint;\r\n    }\r\n\r\n    /**\r\n     * Set the coordinate system to use. By default it's local.\r\n     * But it's possible for a user to tweak so its local for translation and world for rotation.\r\n     * In that case, setting the coordinate system will change `updateGizmoRotationToMatchAttachedMesh` and `updateGizmoPositionToMatchAttachedMesh`\r\n     */\r\n    public set coordinatesMode(coordinatesMode: GizmoCoordinatesMode) {\r\n        if (coordinatesMode == GizmoCoordinatesMode.World) {\r\n            Logger.Warn(\"Setting coordinates Mode to world on scaling gizmo is not supported.\");\r\n        }\r\n        [this.xGizmo, this.yGizmo, this.zGizmo, this.uniformScaleGizmo].forEach((gizmo) => {\r\n            gizmo.coordinatesMode = GizmoCoordinatesMode.Local;\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Drag distance in babylon units that the gizmo will snap to when dragged (Default: 0)\r\n     */\r\n    public set snapDistance(value: number) {\r\n        this._snapDistance = value;\r\n        [this.xGizmo, this.yGizmo, this.zGizmo, this.uniformScaleGizmo].forEach((gizmo) => {\r\n            if (gizmo) {\r\n                gizmo.snapDistance = value;\r\n            }\r\n        });\r\n    }\r\n    public get snapDistance() {\r\n        return this._snapDistance;\r\n    }\r\n\r\n    /**\r\n     * Ratio for the scale of the gizmo (Default: 1)\r\n     */\r\n    public set scaleRatio(value: number) {\r\n        this._scaleRatio = value;\r\n        [this.xGizmo, this.yGizmo, this.zGizmo, this.uniformScaleGizmo].forEach((gizmo) => {\r\n            if (gizmo) {\r\n                gizmo.scaleRatio = value;\r\n            }\r\n        });\r\n    }\r\n    public get scaleRatio() {\r\n        return this._scaleRatio;\r\n    }\r\n\r\n    /**\r\n     * Sensitivity factor for dragging (Default: 1)\r\n     */\r\n    public set sensitivity(value: number) {\r\n        this._sensitivity = value;\r\n        [this.xGizmo, this.yGizmo, this.zGizmo, this.uniformScaleGizmo].forEach((gizmo) => {\r\n            if (gizmo) {\r\n                gizmo.sensitivity = value;\r\n            }\r\n        });\r\n    }\r\n    public get sensitivity() {\r\n        return this._sensitivity;\r\n    }\r\n\r\n    /**\r\n     * Builds Gizmo Axis Cache to enable features such as hover state preservation and graying out other axis during manipulation\r\n     * @param mesh Axis gizmo mesh\r\n     * @param cache Gizmo axis definition used for reactive gizmo UI\r\n     */\r\n    public addToAxisCache(mesh: Mesh, cache: GizmoAxisCache) {\r\n        this._gizmoAxisCache.set(mesh, cache);\r\n    }\r\n\r\n    /**\r\n     * Disposes of the gizmo\r\n     */\r\n    public dispose() {\r\n        [this.xGizmo, this.yGizmo, this.zGizmo, this.uniformScaleGizmo].forEach((gizmo) => {\r\n            if (gizmo) {\r\n                gizmo.dispose();\r\n            }\r\n        });\r\n        this._observables.forEach((obs) => {\r\n            this.gizmoLayer.utilityLayerScene.onPointerObservable.remove(obs);\r\n        });\r\n        this.onDragStartObservable.clear();\r\n        this.onDragObservable.clear();\r\n        this.onDragEndObservable.clear();\r\n        [this._uniformScalingMesh, this._octahedron].forEach((msh) => {\r\n            if (msh) {\r\n                msh.dispose();\r\n            }\r\n        });\r\n        [this._coloredMaterial, this._hoverMaterial, this._disableMaterial].forEach((matl) => {\r\n            if (matl) {\r\n                matl.dispose();\r\n            }\r\n        });\r\n    }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}