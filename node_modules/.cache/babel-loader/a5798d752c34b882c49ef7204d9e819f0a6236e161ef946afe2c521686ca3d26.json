{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { __decorate } from \"../tslib.es6.js\";\nimport { PostProcess } from \"./postProcess.js\";\nimport { Texture } from \"../Materials/Textures/texture.js\";\nimport \"../Shaders/kernelBlur.fragment.js\";\nimport \"../Shaders/kernelBlur.vertex.js\";\nimport { RegisterClass } from \"../Misc/typeStore.js\";\nimport { serialize, serializeAsVector2, SerializationHelper } from \"../Misc/decorators.js\";\n/**\n * The Blur Post Process which blurs an image based on a kernel and direction.\n * Can be used twice in x and y directions to perform a gaussian blur in two passes.\n */\nexport class BlurPostProcess extends PostProcess {\n  /**\n   * Sets the length in pixels of the blur sample region\n   */\n  set kernel(v) {\n    if (this._idealKernel === v) {\n      return;\n    }\n    v = Math.max(v, 1);\n    this._idealKernel = v;\n    this._kernel = this._nearestBestKernel(v);\n    if (!this._blockCompilation) {\n      this._updateParameters();\n    }\n  }\n  /**\n   * Gets the length in pixels of the blur sample region\n   */\n  get kernel() {\n    return this._idealKernel;\n  }\n  /**\n   * Sets whether or not the blur needs to unpack/repack floats\n   */\n  set packedFloat(v) {\n    if (this._packedFloat === v) {\n      return;\n    }\n    this._packedFloat = v;\n    if (!this._blockCompilation) {\n      this._updateParameters();\n    }\n  }\n  /**\n   * Gets whether or not the blur is unpacking/repacking floats\n   */\n  get packedFloat() {\n    return this._packedFloat;\n  }\n  /**\n   * Gets a string identifying the name of the class\n   * @returns \"BlurPostProcess\" string\n   */\n  getClassName() {\n    return \"BlurPostProcess\";\n  }\n  /**\n   * Creates a new instance BlurPostProcess\n   * @param name The name of the effect.\n   * @param direction The direction in which to blur the image.\n   * @param kernel The size of the kernel to be used when computing the blur. eg. Size of 3 will blur the center pixel by 2 pixels surrounding it.\n   * @param options The required width/height ratio to downsize to before computing the render pass. (Use 1.0 for full size)\n   * @param camera The camera to apply the render pass to.\n   * @param samplingMode The sampling mode to be used when computing the pass. (default: 0)\n   * @param engine The engine which the post process will be applied. (default: current engine)\n   * @param reusable If the post process can be reused on the same frame. (default: false)\n   * @param textureType Type of textures used when performing the post process. (default: 0)\n   * @param defines\n   * @param _blockCompilation If compilation of the shader should not be done in the constructor. The updateEffect method can be used to compile the shader at a later time. (default: false)\n   * @param textureFormat Format of textures used when performing the post process. (default: TEXTUREFORMAT_RGBA)\n   */\n  constructor(name, direction, kernel, options, camera, samplingMode = Texture.BILINEAR_SAMPLINGMODE, engine, reusable, textureType = 0, defines = \"\", _blockCompilation = false, textureFormat = 5) {\n    super(name, \"kernelBlur\", [\"delta\", \"direction\"], [\"circleOfConfusionSampler\"], options, camera, samplingMode, engine, reusable, null, textureType, \"kernelBlur\", {\n      varyingCount: 0,\n      depCount: 0\n    }, true, textureFormat);\n    this._blockCompilation = _blockCompilation;\n    this._packedFloat = false;\n    this._staticDefines = \"\";\n    this._staticDefines = defines;\n    this.direction = direction;\n    this.onApplyObservable.add(effect => {\n      if (this._outputTexture) {\n        effect.setFloat2(\"delta\", 1 / this._outputTexture.width * this.direction.x, 1 / this._outputTexture.height * this.direction.y);\n      } else {\n        effect.setFloat2(\"delta\", 1 / this.width * this.direction.x, 1 / this.height * this.direction.y);\n      }\n    });\n    this.kernel = kernel;\n  }\n  /**\n   * Updates the effect with the current post process compile time values and recompiles the shader.\n   * @param defines Define statements that should be added at the beginning of the shader. (default: null)\n   * @param uniforms Set of uniform variables that will be passed to the shader. (default: null)\n   * @param samplers Set of Texture2D variables that will be passed to the shader. (default: null)\n   * @param indexParameters The index parameters to be used for babylons include syntax \"#include<kernelBlurVaryingDeclaration>[0..varyingCount]\". (default: undefined) See usage in babylon.blurPostProcess.ts and kernelBlur.vertex.fx\n   * @param onCompiled Called when the shader has been compiled.\n   * @param onError Called if there is an error when compiling a shader.\n   */\n  updateEffect(defines = null, uniforms = null, samplers = null, indexParameters, onCompiled, onError) {\n    this._updateParameters(onCompiled, onError);\n  }\n  _updateParameters(onCompiled, onError) {\n    // Generate sampling offsets and weights\n    const N = this._kernel;\n    const centerIndex = (N - 1) / 2;\n    // Generate Gaussian sampling weights over kernel\n    let offsets = [];\n    let weights = [];\n    let totalWeight = 0;\n    for (let i = 0; i < N; i++) {\n      const u = i / (N - 1);\n      const w = this._gaussianWeight(u * 2.0 - 1);\n      offsets[i] = i - centerIndex;\n      weights[i] = w;\n      totalWeight += w;\n    }\n    // Normalize weights\n    for (let i = 0; i < weights.length; i++) {\n      weights[i] /= totalWeight;\n    }\n    // Optimize: combine samples to take advantage of hardware linear sampling\n    // Walk from left to center, combining pairs (symmetrically)\n    const linearSamplingWeights = [];\n    const linearSamplingOffsets = [];\n    const linearSamplingMap = [];\n    for (let i = 0; i <= centerIndex; i += 2) {\n      const j = Math.min(i + 1, Math.floor(centerIndex));\n      const singleCenterSample = i === j;\n      if (singleCenterSample) {\n        linearSamplingMap.push({\n          o: offsets[i],\n          w: weights[i]\n        });\n      } else {\n        const sharedCell = j === centerIndex;\n        const weightLinear = weights[i] + weights[j] * (sharedCell ? 0.5 : 1);\n        const offsetLinear = offsets[i] + 1 / (1 + weights[i] / weights[j]);\n        if (offsetLinear === 0) {\n          linearSamplingMap.push({\n            o: offsets[i],\n            w: weights[i]\n          });\n          linearSamplingMap.push({\n            o: offsets[i + 1],\n            w: weights[i + 1]\n          });\n        } else {\n          linearSamplingMap.push({\n            o: offsetLinear,\n            w: weightLinear\n          });\n          linearSamplingMap.push({\n            o: -offsetLinear,\n            w: weightLinear\n          });\n        }\n      }\n    }\n    for (let i = 0; i < linearSamplingMap.length; i++) {\n      linearSamplingOffsets[i] = linearSamplingMap[i].o;\n      linearSamplingWeights[i] = linearSamplingMap[i].w;\n    }\n    // Replace with optimized\n    offsets = linearSamplingOffsets;\n    weights = linearSamplingWeights;\n    // Generate shaders\n    const maxVaryingRows = this.getEngine().getCaps().maxVaryingVectors;\n    const freeVaryingVec2 = Math.max(maxVaryingRows, 0) - 1; // Because of sampleCenter\n    let varyingCount = Math.min(offsets.length, freeVaryingVec2);\n    let defines = \"\";\n    defines += this._staticDefines;\n    // The DOF fragment should ignore the center pixel when looping as it is handled manually in the fragment shader.\n    if (this._staticDefines.indexOf(\"DOF\") != -1) {\n      defines += `#define CENTER_WEIGHT ${this._glslFloat(weights[varyingCount - 1])}\\n`;\n      varyingCount--;\n    }\n    for (let i = 0; i < varyingCount; i++) {\n      defines += `#define KERNEL_OFFSET${i} ${this._glslFloat(offsets[i])}\\n`;\n      defines += `#define KERNEL_WEIGHT${i} ${this._glslFloat(weights[i])}\\n`;\n    }\n    let depCount = 0;\n    for (let i = freeVaryingVec2; i < offsets.length; i++) {\n      defines += `#define KERNEL_DEP_OFFSET${depCount} ${this._glslFloat(offsets[i])}\\n`;\n      defines += `#define KERNEL_DEP_WEIGHT${depCount} ${this._glslFloat(weights[i])}\\n`;\n      depCount++;\n    }\n    if (this.packedFloat) {\n      defines += `#define PACKEDFLOAT 1`;\n    }\n    this._blockCompilation = false;\n    super.updateEffect(defines, null, null, {\n      varyingCount: varyingCount,\n      depCount: depCount\n    }, onCompiled, onError);\n  }\n  /**\n   * Best kernels are odd numbers that when divided by 2, their integer part is even, so 5, 9 or 13.\n   * Other odd kernels optimize correctly but require proportionally more samples, even kernels are\n   * possible but will produce minor visual artifacts. Since each new kernel requires a new shader we\n   * want to minimize kernel changes, having gaps between physical kernels is helpful in that regard.\n   * The gaps between physical kernels are compensated for in the weighting of the samples\n   * @param idealKernel Ideal blur kernel.\n   * @returns Nearest best kernel.\n   */\n  _nearestBestKernel(idealKernel) {\n    const v = Math.round(idealKernel);\n    for (const k of [v, v - 1, v + 1, v - 2, v + 2]) {\n      if (k % 2 !== 0 && Math.floor(k / 2) % 2 === 0 && k > 0) {\n        return Math.max(k, 3);\n      }\n    }\n    return Math.max(v, 3);\n  }\n  /**\n   * Calculates the value of a Gaussian distribution with sigma 3 at a given point.\n   * @param x The point on the Gaussian distribution to sample.\n   * @returns the value of the Gaussian function at x.\n   */\n  _gaussianWeight(x) {\n    //reference: Engines/ImageProcessingBlur.cpp #dcc760\n    // We are evaluating the Gaussian (normal) distribution over a kernel parameter space of [-1,1],\n    // so we truncate at three standard deviations by setting stddev (sigma) to 1/3.\n    // The choice of 3-sigma truncation is common but arbitrary, and means that the signal is\n    // truncated at around 1.3% of peak strength.\n    //the distribution is scaled to account for the difference between the actual kernel size and the requested kernel size\n    const sigma = 1 / 3;\n    const denominator = Math.sqrt(2.0 * Math.PI) * sigma;\n    const exponent = -(x * x / (2.0 * sigma * sigma));\n    const weight = 1.0 / denominator * Math.exp(exponent);\n    return weight;\n  }\n  /**\n   * Generates a string that can be used as a floating point number in GLSL.\n   * @param x Value to print.\n   * @param decimalFigures Number of decimal places to print the number to (excluding trailing 0s).\n   * @returns GLSL float string.\n   */\n  _glslFloat(x, decimalFigures = 8) {\n    return x.toFixed(decimalFigures).replace(/0+$/, \"\");\n  }\n  /**\n   * @internal\n   */\n  static _Parse(parsedPostProcess, targetCamera, scene, rootUrl) {\n    return SerializationHelper.Parse(() => {\n      return new BlurPostProcess(parsedPostProcess.name, parsedPostProcess.direction, parsedPostProcess.kernel, parsedPostProcess.options, targetCamera, parsedPostProcess.renderTargetSamplingMode, scene.getEngine(), parsedPostProcess.reusable, parsedPostProcess.textureType, undefined, false);\n    }, parsedPostProcess, scene, rootUrl);\n  }\n}\n__decorate([serialize(\"kernel\")], BlurPostProcess.prototype, \"_kernel\", void 0);\n__decorate([serialize(\"packedFloat\")], BlurPostProcess.prototype, \"_packedFloat\", void 0);\n__decorate([serializeAsVector2()], BlurPostProcess.prototype, \"direction\", void 0);\nRegisterClass(\"BABYLON.BlurPostProcess\", BlurPostProcess);","map":{"version":3,"names":["PostProcess","Texture","RegisterClass","serialize","serializeAsVector2","SerializationHelper","BlurPostProcess","kernel","v","_idealKernel","Math","max","_kernel","_nearestBestKernel","_blockCompilation","_updateParameters","packedFloat","_packedFloat","getClassName","constructor","name","direction","options","camera","samplingMode","BILINEAR_SAMPLINGMODE","engine","reusable","textureType","defines","textureFormat","varyingCount","depCount","_staticDefines","onApplyObservable","add","effect","_outputTexture","setFloat2","width","x","height","y","updateEffect","uniforms","samplers","indexParameters","onCompiled","onError","N","centerIndex","offsets","weights","totalWeight","i","u","w","_gaussianWeight","length","linearSamplingWeights","linearSamplingOffsets","linearSamplingMap","j","min","floor","singleCenterSample","push","o","sharedCell","weightLinear","offsetLinear","maxVaryingRows","getEngine","getCaps","maxVaryingVectors","freeVaryingVec2","indexOf","_glslFloat","idealKernel","round","k","sigma","denominator","sqrt","PI","exponent","weight","exp","decimalFigures","toFixed","replace","_Parse","parsedPostProcess","targetCamera","scene","rootUrl","Parse","renderTargetSamplingMode","undefined","__decorate"],"sources":["../../../../dev/core/src/PostProcesses/blurPostProcess.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-unused-vars */\r\nimport type { Vector2 } from \"../Maths/math.vector\";\r\nimport type { Nullable } from \"../types\";\r\nimport type { PostProcessOptions } from \"./postProcess\";\r\nimport { PostProcess } from \"./postProcess\";\r\nimport type { Camera } from \"../Cameras/camera\";\r\nimport type { Effect } from \"../Materials/effect\";\r\nimport { Texture } from \"../Materials/Textures/texture\";\r\nimport type { Engine } from \"../Engines/engine\";\r\nimport { Constants } from \"../Engines/constants\";\r\n\r\nimport \"../Shaders/kernelBlur.fragment\";\r\nimport \"../Shaders/kernelBlur.vertex\";\r\nimport { RegisterClass } from \"../Misc/typeStore\";\r\nimport { serialize, serializeAsVector2, SerializationHelper } from \"../Misc/decorators\";\r\n\r\nimport type { Scene } from \"../scene\";\r\n\r\n/**\r\n * The Blur Post Process which blurs an image based on a kernel and direction.\r\n * Can be used twice in x and y directions to perform a gaussian blur in two passes.\r\n */\r\nexport class BlurPostProcess extends PostProcess {\r\n    @serialize(\"kernel\")\r\n    protected _kernel: number;\r\n    protected _idealKernel: number;\r\n    @serialize(\"packedFloat\")\r\n    protected _packedFloat: boolean = false;\r\n    private _staticDefines: string = \"\";\r\n\r\n    /** The direction in which to blur the image. */\r\n    @serializeAsVector2()\r\n    public direction: Vector2;\r\n\r\n    /**\r\n     * Sets the length in pixels of the blur sample region\r\n     */\r\n    public set kernel(v: number) {\r\n        if (this._idealKernel === v) {\r\n            return;\r\n        }\r\n\r\n        v = Math.max(v, 1);\r\n        this._idealKernel = v;\r\n        this._kernel = this._nearestBestKernel(v);\r\n        if (!this._blockCompilation) {\r\n            this._updateParameters();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets the length in pixels of the blur sample region\r\n     */\r\n    public get kernel(): number {\r\n        return this._idealKernel;\r\n    }\r\n\r\n    /**\r\n     * Sets whether or not the blur needs to unpack/repack floats\r\n     */\r\n    public set packedFloat(v: boolean) {\r\n        if (this._packedFloat === v) {\r\n            return;\r\n        }\r\n        this._packedFloat = v;\r\n        if (!this._blockCompilation) {\r\n            this._updateParameters();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets whether or not the blur is unpacking/repacking floats\r\n     */\r\n    public get packedFloat(): boolean {\r\n        return this._packedFloat;\r\n    }\r\n\r\n    /**\r\n     * Gets a string identifying the name of the class\r\n     * @returns \"BlurPostProcess\" string\r\n     */\r\n    public getClassName(): string {\r\n        return \"BlurPostProcess\";\r\n    }\r\n\r\n    /**\r\n     * Creates a new instance BlurPostProcess\r\n     * @param name The name of the effect.\r\n     * @param direction The direction in which to blur the image.\r\n     * @param kernel The size of the kernel to be used when computing the blur. eg. Size of 3 will blur the center pixel by 2 pixels surrounding it.\r\n     * @param options The required width/height ratio to downsize to before computing the render pass. (Use 1.0 for full size)\r\n     * @param camera The camera to apply the render pass to.\r\n     * @param samplingMode The sampling mode to be used when computing the pass. (default: 0)\r\n     * @param engine The engine which the post process will be applied. (default: current engine)\r\n     * @param reusable If the post process can be reused on the same frame. (default: false)\r\n     * @param textureType Type of textures used when performing the post process. (default: 0)\r\n     * @param defines\r\n     * @param _blockCompilation If compilation of the shader should not be done in the constructor. The updateEffect method can be used to compile the shader at a later time. (default: false)\r\n     * @param textureFormat Format of textures used when performing the post process. (default: TEXTUREFORMAT_RGBA)\r\n     */\r\n    constructor(\r\n        name: string,\r\n        direction: Vector2,\r\n        kernel: number,\r\n        options: number | PostProcessOptions,\r\n        camera: Nullable<Camera>,\r\n        samplingMode: number = Texture.BILINEAR_SAMPLINGMODE,\r\n        engine?: Engine,\r\n        reusable?: boolean,\r\n        textureType = Constants.TEXTURETYPE_UNSIGNED_INT,\r\n        defines = \"\",\r\n        private _blockCompilation = false,\r\n        textureFormat = Constants.TEXTUREFORMAT_RGBA\r\n    ) {\r\n        super(\r\n            name,\r\n            \"kernelBlur\",\r\n            [\"delta\", \"direction\"],\r\n            [\"circleOfConfusionSampler\"],\r\n            options,\r\n            camera,\r\n            samplingMode,\r\n            engine,\r\n            reusable,\r\n            null,\r\n            textureType,\r\n            \"kernelBlur\",\r\n            { varyingCount: 0, depCount: 0 },\r\n            true,\r\n            textureFormat\r\n        );\r\n        this._staticDefines = defines;\r\n        this.direction = direction;\r\n        this.onApplyObservable.add((effect: Effect) => {\r\n            if (this._outputTexture) {\r\n                effect.setFloat2(\"delta\", (1 / this._outputTexture.width) * this.direction.x, (1 / this._outputTexture.height) * this.direction.y);\r\n            } else {\r\n                effect.setFloat2(\"delta\", (1 / this.width) * this.direction.x, (1 / this.height) * this.direction.y);\r\n            }\r\n        });\r\n\r\n        this.kernel = kernel;\r\n    }\r\n\r\n    /**\r\n     * Updates the effect with the current post process compile time values and recompiles the shader.\r\n     * @param defines Define statements that should be added at the beginning of the shader. (default: null)\r\n     * @param uniforms Set of uniform variables that will be passed to the shader. (default: null)\r\n     * @param samplers Set of Texture2D variables that will be passed to the shader. (default: null)\r\n     * @param indexParameters The index parameters to be used for babylons include syntax \"#include<kernelBlurVaryingDeclaration>[0..varyingCount]\". (default: undefined) See usage in babylon.blurPostProcess.ts and kernelBlur.vertex.fx\r\n     * @param onCompiled Called when the shader has been compiled.\r\n     * @param onError Called if there is an error when compiling a shader.\r\n     */\r\n    public updateEffect(\r\n        defines: Nullable<string> = null,\r\n        uniforms: Nullable<string[]> = null,\r\n        samplers: Nullable<string[]> = null,\r\n        indexParameters?: any,\r\n        onCompiled?: (effect: Effect) => void,\r\n        onError?: (effect: Effect, errors: string) => void\r\n    ) {\r\n        this._updateParameters(onCompiled, onError);\r\n    }\r\n\r\n    protected _updateParameters(onCompiled?: (effect: Effect) => void, onError?: (effect: Effect, errors: string) => void): void {\r\n        // Generate sampling offsets and weights\r\n        const N = this._kernel;\r\n        const centerIndex = (N - 1) / 2;\r\n\r\n        // Generate Gaussian sampling weights over kernel\r\n        let offsets = [];\r\n        let weights = [];\r\n        let totalWeight = 0;\r\n        for (let i = 0; i < N; i++) {\r\n            const u = i / (N - 1);\r\n            const w = this._gaussianWeight(u * 2.0 - 1);\r\n            offsets[i] = i - centerIndex;\r\n            weights[i] = w;\r\n            totalWeight += w;\r\n        }\r\n\r\n        // Normalize weights\r\n        for (let i = 0; i < weights.length; i++) {\r\n            weights[i] /= totalWeight;\r\n        }\r\n\r\n        // Optimize: combine samples to take advantage of hardware linear sampling\r\n        // Walk from left to center, combining pairs (symmetrically)\r\n        const linearSamplingWeights = [];\r\n        const linearSamplingOffsets = [];\r\n\r\n        const linearSamplingMap = [];\r\n\r\n        for (let i = 0; i <= centerIndex; i += 2) {\r\n            const j = Math.min(i + 1, Math.floor(centerIndex));\r\n\r\n            const singleCenterSample = i === j;\r\n\r\n            if (singleCenterSample) {\r\n                linearSamplingMap.push({ o: offsets[i], w: weights[i] });\r\n            } else {\r\n                const sharedCell = j === centerIndex;\r\n\r\n                const weightLinear = weights[i] + weights[j] * (sharedCell ? 0.5 : 1);\r\n                const offsetLinear = offsets[i] + 1 / (1 + weights[i] / weights[j]);\r\n\r\n                if (offsetLinear === 0) {\r\n                    linearSamplingMap.push({ o: offsets[i], w: weights[i] });\r\n                    linearSamplingMap.push({ o: offsets[i + 1], w: weights[i + 1] });\r\n                } else {\r\n                    linearSamplingMap.push({ o: offsetLinear, w: weightLinear });\r\n                    linearSamplingMap.push({ o: -offsetLinear, w: weightLinear });\r\n                }\r\n            }\r\n        }\r\n\r\n        for (let i = 0; i < linearSamplingMap.length; i++) {\r\n            linearSamplingOffsets[i] = linearSamplingMap[i].o;\r\n            linearSamplingWeights[i] = linearSamplingMap[i].w;\r\n        }\r\n\r\n        // Replace with optimized\r\n        offsets = linearSamplingOffsets;\r\n        weights = linearSamplingWeights;\r\n\r\n        // Generate shaders\r\n        const maxVaryingRows = this.getEngine().getCaps().maxVaryingVectors;\r\n        const freeVaryingVec2 = Math.max(maxVaryingRows, 0) - 1; // Because of sampleCenter\r\n\r\n        let varyingCount = Math.min(offsets.length, freeVaryingVec2);\r\n\r\n        let defines = \"\";\r\n        defines += this._staticDefines;\r\n\r\n        // The DOF fragment should ignore the center pixel when looping as it is handled manually in the fragment shader.\r\n        if (this._staticDefines.indexOf(\"DOF\") != -1) {\r\n            defines += `#define CENTER_WEIGHT ${this._glslFloat(weights[varyingCount - 1])}\\n`;\r\n            varyingCount--;\r\n        }\r\n\r\n        for (let i = 0; i < varyingCount; i++) {\r\n            defines += `#define KERNEL_OFFSET${i} ${this._glslFloat(offsets[i])}\\n`;\r\n            defines += `#define KERNEL_WEIGHT${i} ${this._glslFloat(weights[i])}\\n`;\r\n        }\r\n\r\n        let depCount = 0;\r\n        for (let i = freeVaryingVec2; i < offsets.length; i++) {\r\n            defines += `#define KERNEL_DEP_OFFSET${depCount} ${this._glslFloat(offsets[i])}\\n`;\r\n            defines += `#define KERNEL_DEP_WEIGHT${depCount} ${this._glslFloat(weights[i])}\\n`;\r\n            depCount++;\r\n        }\r\n\r\n        if (this.packedFloat) {\r\n            defines += `#define PACKEDFLOAT 1`;\r\n        }\r\n\r\n        this._blockCompilation = false;\r\n        super.updateEffect(\r\n            defines,\r\n            null,\r\n            null,\r\n            {\r\n                varyingCount: varyingCount,\r\n                depCount: depCount,\r\n            },\r\n            onCompiled,\r\n            onError\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Best kernels are odd numbers that when divided by 2, their integer part is even, so 5, 9 or 13.\r\n     * Other odd kernels optimize correctly but require proportionally more samples, even kernels are\r\n     * possible but will produce minor visual artifacts. Since each new kernel requires a new shader we\r\n     * want to minimize kernel changes, having gaps between physical kernels is helpful in that regard.\r\n     * The gaps between physical kernels are compensated for in the weighting of the samples\r\n     * @param idealKernel Ideal blur kernel.\r\n     * @returns Nearest best kernel.\r\n     */\r\n    protected _nearestBestKernel(idealKernel: number): number {\r\n        const v = Math.round(idealKernel);\r\n        for (const k of [v, v - 1, v + 1, v - 2, v + 2]) {\r\n            if (k % 2 !== 0 && Math.floor(k / 2) % 2 === 0 && k > 0) {\r\n                return Math.max(k, 3);\r\n            }\r\n        }\r\n        return Math.max(v, 3);\r\n    }\r\n\r\n    /**\r\n     * Calculates the value of a Gaussian distribution with sigma 3 at a given point.\r\n     * @param x The point on the Gaussian distribution to sample.\r\n     * @returns the value of the Gaussian function at x.\r\n     */\r\n    protected _gaussianWeight(x: number): number {\r\n        //reference: Engines/ImageProcessingBlur.cpp #dcc760\r\n        // We are evaluating the Gaussian (normal) distribution over a kernel parameter space of [-1,1],\r\n        // so we truncate at three standard deviations by setting stddev (sigma) to 1/3.\r\n        // The choice of 3-sigma truncation is common but arbitrary, and means that the signal is\r\n        // truncated at around 1.3% of peak strength.\r\n\r\n        //the distribution is scaled to account for the difference between the actual kernel size and the requested kernel size\r\n        const sigma = 1 / 3;\r\n        const denominator = Math.sqrt(2.0 * Math.PI) * sigma;\r\n        const exponent = -((x * x) / (2.0 * sigma * sigma));\r\n        const weight = (1.0 / denominator) * Math.exp(exponent);\r\n        return weight;\r\n    }\r\n\r\n    /**\r\n     * Generates a string that can be used as a floating point number in GLSL.\r\n     * @param x Value to print.\r\n     * @param decimalFigures Number of decimal places to print the number to (excluding trailing 0s).\r\n     * @returns GLSL float string.\r\n     */\r\n    protected _glslFloat(x: number, decimalFigures = 8) {\r\n        return x.toFixed(decimalFigures).replace(/0+$/, \"\");\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public static _Parse(parsedPostProcess: any, targetCamera: Camera, scene: Scene, rootUrl: string): Nullable<BlurPostProcess> {\r\n        return SerializationHelper.Parse(\r\n            () => {\r\n                return new BlurPostProcess(\r\n                    parsedPostProcess.name,\r\n                    parsedPostProcess.direction,\r\n                    parsedPostProcess.kernel,\r\n                    parsedPostProcess.options,\r\n                    targetCamera,\r\n                    parsedPostProcess.renderTargetSamplingMode,\r\n                    scene.getEngine(),\r\n                    parsedPostProcess.reusable,\r\n                    parsedPostProcess.textureType,\r\n                    undefined,\r\n                    false\r\n                );\r\n            },\r\n            parsedPostProcess,\r\n            scene,\r\n            rootUrl\r\n        );\r\n    }\r\n}\r\n\r\nRegisterClass(\"BABYLON.BlurPostProcess\", BlurPostProcess);\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}