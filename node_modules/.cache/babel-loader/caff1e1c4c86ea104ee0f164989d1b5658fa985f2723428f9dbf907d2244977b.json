{"ast":null,"code":"import { Texture } from \"./texture.js\";\nimport \"../../Engines/Extensions/engine.rawTexture.js\";\n/**\n * Class used to store 3D textures containing user data\n */\nexport class RawTexture3D extends Texture {\n  /**\n   * Create a new RawTexture3D\n   * @param data defines the data of the texture\n   * @param width defines the width of the texture\n   * @param height defines the height of the texture\n   * @param depth defines the depth of the texture\n   * @param format defines the texture format to use\n   * @param scene defines the hosting scene\n   * @param generateMipMaps defines a boolean indicating if mip levels should be generated (true by default)\n   * @param invertY defines if texture must be stored with Y axis inverted\n   * @param samplingMode defines the sampling mode to use (Texture.TRILINEAR_SAMPLINGMODE by default)\n   * @param textureType defines the texture Type (Engine.TEXTURETYPE_UNSIGNED_INT, Engine.TEXTURETYPE_FLOAT...)\n   * @param creationFlags specific flags to use when creating the texture (1 for storage textures, for eg)\n   */\n  constructor(data, width, height, depth, /** Gets or sets the texture format to use */\n  format, scene, generateMipMaps = true, invertY = false, samplingMode = Texture.TRILINEAR_SAMPLINGMODE, textureType = 0, creationFlags) {\n    super(null, scene, !generateMipMaps, invertY);\n    this.format = format;\n    this._texture = scene.getEngine().createRawTexture3D(data, width, height, depth, format, generateMipMaps, invertY, samplingMode, null, textureType, creationFlags);\n    this.is3D = true;\n  }\n  /**\n   * Update the texture with new data\n   * @param data defines the data to store in the texture\n   */\n  update(data) {\n    if (!this._texture) {\n      return;\n    }\n    this._getEngine().updateRawTexture3D(this._texture, data, this._texture.format, this._texture.invertY, null, this._texture.type);\n  }\n}","map":{"version":3,"names":["Texture","RawTexture3D","constructor","data","width","height","depth","format","scene","generateMipMaps","invertY","samplingMode","TRILINEAR_SAMPLINGMODE","textureType","creationFlags","_texture","getEngine","createRawTexture3D","is3D","update","_getEngine","updateRawTexture3D","type"],"sources":["../../../../../dev/core/src/Materials/Textures/rawTexture3D.ts"],"sourcesContent":["import type { Scene } from \"../../scene\";\r\nimport { Texture } from \"./texture\";\r\nimport { Constants } from \"../../Engines/constants\";\r\nimport \"../../Engines/Extensions/engine.rawTexture\";\r\nimport type { Nullable } from \"../../types\";\r\n/**\r\n * Class used to store 3D textures containing user data\r\n */\r\nexport class RawTexture3D extends Texture {\r\n    /**\r\n     * Create a new RawTexture3D\r\n     * @param data defines the data of the texture\r\n     * @param width defines the width of the texture\r\n     * @param height defines the height of the texture\r\n     * @param depth defines the depth of the texture\r\n     * @param format defines the texture format to use\r\n     * @param scene defines the hosting scene\r\n     * @param generateMipMaps defines a boolean indicating if mip levels should be generated (true by default)\r\n     * @param invertY defines if texture must be stored with Y axis inverted\r\n     * @param samplingMode defines the sampling mode to use (Texture.TRILINEAR_SAMPLINGMODE by default)\r\n     * @param textureType defines the texture Type (Engine.TEXTURETYPE_UNSIGNED_INT, Engine.TEXTURETYPE_FLOAT...)\r\n     * @param creationFlags specific flags to use when creating the texture (Constants.TEXTURE_CREATIONFLAG_STORAGE for storage textures, for eg)\r\n     */\r\n    constructor(\r\n        data: Nullable<ArrayBufferView>,\r\n        width: number,\r\n        height: number,\r\n        depth: number,\r\n        /** Gets or sets the texture format to use */\r\n        public format: number,\r\n        scene: Scene,\r\n        generateMipMaps: boolean = true,\r\n        invertY: boolean = false,\r\n        samplingMode: number = Texture.TRILINEAR_SAMPLINGMODE,\r\n        textureType = Constants.TEXTURETYPE_UNSIGNED_INT,\r\n        creationFlags?: number\r\n    ) {\r\n        super(null, scene, !generateMipMaps, invertY);\r\n\r\n        this._texture = scene.getEngine().createRawTexture3D(data, width, height, depth, format, generateMipMaps, invertY, samplingMode, null, textureType, creationFlags);\r\n\r\n        this.is3D = true;\r\n    }\r\n\r\n    /**\r\n     * Update the texture with new data\r\n     * @param data defines the data to store in the texture\r\n     */\r\n    public update(data: ArrayBufferView): void {\r\n        if (!this._texture) {\r\n            return;\r\n        }\r\n        this._getEngine()!.updateRawTexture3D(this._texture, data, this._texture.format, this._texture!.invertY, null, this._texture.type);\r\n    }\r\n}\r\n"],"mappings":"AACA,SAASA,OAAO,QAAQ,cAAY;AAEpC,OAAO,+CAA6C;AAEpD;;;AAGA,OAAM,MAAOC,YAAa,SAAQD,OAAO;EACrC;;;;;;;;;;;;;;EAcAE,YACIC,IAA+B,EAC/BC,KAAa,EACbC,MAAc,EACdC,KAAa,EACb;EACOC,MAAc,EACrBC,KAAY,EACZC,eAAA,GAA2B,IAAI,EAC/BC,OAAA,GAAmB,KAAK,EACxBC,YAAA,GAAuBX,OAAO,CAACY,sBAAsB,EACrDC,WAAW,GAAG,GAAAC,aAAU;IAGxB,KAAK,CAAC,IAAI,EAAEN,KAAK,EAAE,CAACC,eAAe,EAAEC,OAAO,CAAC;IARtC,KAAAH,MAAM,GAANA,MAAM;IAUb,IAAI,CAACQ,QAAQ,GAAGP,KAAK,CAACQ,SAAS,EAAE,CAACC,kBAAkB,CAACd,IAAI,EAAEC,KAAK,EAAEC,MAAM,EAAEC,KAAK,EAAEC,MAAM,EAAEE,eAAe,EAAEC,OAAO,EAAEC,YAAY,EAAE,IAAI,EAAEE,WAAW,EAAEC,aAAa,CAAC;IAElK,IAAI,CAACI,IAAI,GAAG,IAAI;EACpB;EAEA;;;;EAIOC,MAAMA,CAAChB,IAAqB;IAC/B,IAAI,CAAC,IAAI,CAACY,QAAQ,EAAE;MAChB;;IAEJ,IAAI,CAACK,UAAU,EAAG,CAACC,kBAAkB,CAAC,IAAI,CAACN,QAAQ,EAAEZ,IAAI,EAAE,IAAI,CAACY,QAAQ,CAACR,MAAM,EAAE,IAAI,CAACQ,QAAS,CAACL,OAAO,EAAE,IAAI,EAAE,IAAI,CAACK,QAAQ,CAACO,IAAI,CAAC;EACtI"},"metadata":{},"sourceType":"module","externalDependencies":[]}