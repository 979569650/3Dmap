{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { Observable } from \"../Misc/observable.js\";\nimport { WebXRInputSource } from \"./webXRInputSource.js\";\nimport { WebXRMotionControllerManager } from \"./motionController/webXRMotionControllerManager.js\";\n/**\n * XR input used to track XR inputs such as controllers/rays\n */\nexport class WebXRInput {\n  /**\n   * Initializes the WebXRInput\n   * @param xrSessionManager the xr session manager for this session\n   * @param xrCamera the WebXR camera for this session. Mainly used for teleportation\n   * @param _options = initialization options for this xr input\n   */\n  constructor(\n  /**\n   * the xr session manager for this session\n   */\n  xrSessionManager,\n  /**\n   * the WebXR camera for this session. Mainly used for teleportation\n   */\n  xrCamera, _options = {}) {\n    this.xrSessionManager = xrSessionManager;\n    this.xrCamera = xrCamera;\n    this._options = _options;\n    /**\n     * XR controllers being tracked\n     */\n    this.controllers = [];\n    /**\n     * Event when a controller has been connected/added\n     */\n    this.onControllerAddedObservable = new Observable();\n    /**\n     * Event when a controller has been removed/disconnected\n     */\n    this.onControllerRemovedObservable = new Observable();\n    this._onInputSourcesChange = event => {\n      this._addAndRemoveControllers(event.added, event.removed);\n    };\n    // Remove controllers when exiting XR\n    this._sessionEndedObserver = this.xrSessionManager.onXRSessionEnded.add(() => {\n      this._addAndRemoveControllers([], this.controllers.map(c => {\n        return c.inputSource;\n      }));\n    });\n    this._sessionInitObserver = this.xrSessionManager.onXRSessionInit.add(session => {\n      session.addEventListener(\"inputsourceschange\", this._onInputSourcesChange);\n    });\n    this._frameObserver = this.xrSessionManager.onXRFrameObservable.add(frame => {\n      // Update controller pose info\n      this.controllers.forEach(controller => {\n        controller.updateFromXRFrame(frame, this.xrSessionManager.referenceSpace, this.xrCamera);\n      });\n    });\n    if (this._options.customControllersRepositoryURL) {\n      WebXRMotionControllerManager.BaseRepositoryUrl = this._options.customControllersRepositoryURL;\n    }\n    WebXRMotionControllerManager.UseOnlineRepository = !this._options.disableOnlineControllerRepository;\n    if (WebXRMotionControllerManager.UseOnlineRepository) {\n      // pre-load the profiles list to load the controllers quicker afterwards\n      try {\n        WebXRMotionControllerManager.UpdateProfilesList().catch(() => {\n          WebXRMotionControllerManager.UseOnlineRepository = false;\n        });\n      } catch (e) {\n        WebXRMotionControllerManager.UseOnlineRepository = false;\n      }\n    }\n  }\n  _addAndRemoveControllers(addInputs, removeInputs) {\n    // Add controllers if they don't already exist\n    const sources = this.controllers.map(c => {\n      return c.inputSource;\n    });\n    for (const input of addInputs) {\n      if (sources.indexOf(input) === -1) {\n        const controller = new WebXRInputSource(this.xrSessionManager.scene, input, Object.assign(Object.assign({}, this._options.controllerOptions || {}), {\n          forceControllerProfile: this._options.forceInputProfile,\n          doNotLoadControllerMesh: this._options.doNotLoadControllerMeshes,\n          disableMotionControllerAnimation: this._options.disableControllerAnimation\n        }));\n        this.controllers.push(controller);\n        this.onControllerAddedObservable.notifyObservers(controller);\n      }\n    }\n    // Remove and dispose of controllers to be disposed\n    const keepControllers = [];\n    const removedControllers = [];\n    this.controllers.forEach(c => {\n      if (removeInputs.indexOf(c.inputSource) === -1) {\n        keepControllers.push(c);\n      } else {\n        removedControllers.push(c);\n      }\n    });\n    this.controllers = keepControllers;\n    removedControllers.forEach(c => {\n      this.onControllerRemovedObservable.notifyObservers(c);\n      c.dispose();\n    });\n  }\n  /**\n   * Disposes of the object\n   */\n  dispose() {\n    this.controllers.forEach(c => {\n      c.dispose();\n    });\n    this.xrSessionManager.onXRFrameObservable.remove(this._frameObserver);\n    this.xrSessionManager.onXRSessionInit.remove(this._sessionInitObserver);\n    this.xrSessionManager.onXRSessionEnded.remove(this._sessionEndedObserver);\n    this.onControllerAddedObservable.clear();\n    this.onControllerRemovedObservable.clear();\n    // clear the controller cache\n    WebXRMotionControllerManager.ClearControllerCache();\n  }\n}","map":{"version":3,"names":["Observable","WebXRInputSource","WebXRMotionControllerManager","WebXRInput","constructor","xrSessionManager","xrCamera","_options","controllers","onControllerAddedObservable","onControllerRemovedObservable","_onInputSourcesChange","event","_addAndRemoveControllers","added","removed","_sessionEndedObserver","onXRSessionEnded","add","map","c","inputSource","_sessionInitObserver","onXRSessionInit","session","addEventListener","_frameObserver","onXRFrameObservable","frame","forEach","controller","updateFromXRFrame","referenceSpace","customControllersRepositoryURL","BaseRepositoryUrl","UseOnlineRepository","disableOnlineControllerRepository","UpdateProfilesList","catch","e","addInputs","removeInputs","sources","input","indexOf","scene","Object","assign","controllerOptions","forceControllerProfile","forceInputProfile","doNotLoadControllerMesh","doNotLoadControllerMeshes","disableMotionControllerAnimation","disableControllerAnimation","push","notifyObservers","keepControllers","removedControllers","dispose","remove","clear","ClearControllerCache"],"sources":["../../../../dev/core/src/XR/webXRInput.ts"],"sourcesContent":["import type { Nullable } from \"../types\";\r\nimport type { Observer } from \"../Misc/observable\";\r\nimport { Observable } from \"../Misc/observable\";\r\nimport type { IDisposable } from \"../scene\";\r\nimport type { IWebXRControllerOptions } from \"./webXRInputSource\";\r\nimport { WebXRInputSource } from \"./webXRInputSource\";\r\nimport type { WebXRSessionManager } from \"./webXRSessionManager\";\r\nimport type { WebXRCamera } from \"./webXRCamera\";\r\nimport { WebXRMotionControllerManager } from \"./motionController/webXRMotionControllerManager\";\r\n\r\n/**\r\n * The schema for initialization options of the XR Input class\r\n */\r\nexport interface IWebXRInputOptions {\r\n    /**\r\n     * If set to true no model will be automatically loaded\r\n     */\r\n    doNotLoadControllerMeshes?: boolean;\r\n\r\n    /**\r\n     * If set, this profile will be used for all controllers loaded (for example \"microsoft-mixed-reality\")\r\n     * If not found, the xr input profile data will be used.\r\n     * Profiles are defined here - https://github.com/immersive-web/webxr-input-profiles/\r\n     */\r\n    forceInputProfile?: string;\r\n\r\n    /**\r\n     * Do not send a request to the controller repository to load the profile.\r\n     *\r\n     * Instead, use the controllers available in babylon itself.\r\n     */\r\n    disableOnlineControllerRepository?: boolean;\r\n\r\n    /**\r\n     * A custom URL for the controllers repository\r\n     */\r\n    customControllersRepositoryURL?: string;\r\n\r\n    /**\r\n     * Should the controller model's components not move according to the user input\r\n     */\r\n    disableControllerAnimation?: boolean;\r\n\r\n    /**\r\n     * Optional options to pass to the controller. Will be overridden by the Input options where applicable\r\n     */\r\n    controllerOptions?: IWebXRControllerOptions;\r\n}\r\n/**\r\n * XR input used to track XR inputs such as controllers/rays\r\n */\r\nexport class WebXRInput implements IDisposable {\r\n    /**\r\n     * XR controllers being tracked\r\n     */\r\n    public controllers: Array<WebXRInputSource> = [];\r\n    private _frameObserver: Nullable<Observer<any>>;\r\n    private _sessionEndedObserver: Nullable<Observer<any>>;\r\n    private _sessionInitObserver: Nullable<Observer<any>>;\r\n    /**\r\n     * Event when a controller has been connected/added\r\n     */\r\n    public onControllerAddedObservable = new Observable<WebXRInputSource>();\r\n    /**\r\n     * Event when a controller has been removed/disconnected\r\n     */\r\n    public onControllerRemovedObservable = new Observable<WebXRInputSource>();\r\n\r\n    /**\r\n     * Initializes the WebXRInput\r\n     * @param xrSessionManager the xr session manager for this session\r\n     * @param xrCamera the WebXR camera for this session. Mainly used for teleportation\r\n     * @param _options = initialization options for this xr input\r\n     */\r\n    public constructor(\r\n        /**\r\n         * the xr session manager for this session\r\n         */\r\n        public xrSessionManager: WebXRSessionManager,\r\n        /**\r\n         * the WebXR camera for this session. Mainly used for teleportation\r\n         */\r\n        public xrCamera: WebXRCamera,\r\n        private readonly _options: IWebXRInputOptions = {}\r\n    ) {\r\n        // Remove controllers when exiting XR\r\n        this._sessionEndedObserver = this.xrSessionManager.onXRSessionEnded.add(() => {\r\n            this._addAndRemoveControllers(\r\n                [],\r\n                this.controllers.map((c) => {\r\n                    return c.inputSource;\r\n                })\r\n            );\r\n        });\r\n\r\n        this._sessionInitObserver = this.xrSessionManager.onXRSessionInit.add((session) => {\r\n            session.addEventListener(\"inputsourceschange\", this._onInputSourcesChange);\r\n        });\r\n\r\n        this._frameObserver = this.xrSessionManager.onXRFrameObservable.add((frame) => {\r\n            // Update controller pose info\r\n            this.controllers.forEach((controller) => {\r\n                controller.updateFromXRFrame(frame, this.xrSessionManager.referenceSpace, this.xrCamera);\r\n            });\r\n        });\r\n\r\n        if (this._options.customControllersRepositoryURL) {\r\n            WebXRMotionControllerManager.BaseRepositoryUrl = this._options.customControllersRepositoryURL;\r\n        }\r\n\r\n        WebXRMotionControllerManager.UseOnlineRepository = !this._options.disableOnlineControllerRepository;\r\n        if (WebXRMotionControllerManager.UseOnlineRepository) {\r\n            // pre-load the profiles list to load the controllers quicker afterwards\r\n            try {\r\n                WebXRMotionControllerManager.UpdateProfilesList().catch(() => {\r\n                    WebXRMotionControllerManager.UseOnlineRepository = false;\r\n                });\r\n            } catch (e) {\r\n                WebXRMotionControllerManager.UseOnlineRepository = false;\r\n            }\r\n        }\r\n    }\r\n\r\n    private _onInputSourcesChange = (event: XRInputSourceChangeEvent) => {\r\n        this._addAndRemoveControllers(event.added, event.removed);\r\n    };\r\n\r\n    private _addAndRemoveControllers(addInputs: readonly XRInputSource[], removeInputs: readonly XRInputSource[]) {\r\n        // Add controllers if they don't already exist\r\n        const sources = this.controllers.map((c) => {\r\n            return c.inputSource;\r\n        });\r\n        for (const input of addInputs) {\r\n            if (sources.indexOf(input) === -1) {\r\n                const controller = new WebXRInputSource(this.xrSessionManager.scene, input, {\r\n                    ...(this._options.controllerOptions || {}),\r\n                    forceControllerProfile: this._options.forceInputProfile,\r\n                    doNotLoadControllerMesh: this._options.doNotLoadControllerMeshes,\r\n                    disableMotionControllerAnimation: this._options.disableControllerAnimation,\r\n                });\r\n                this.controllers.push(controller);\r\n                this.onControllerAddedObservable.notifyObservers(controller);\r\n            }\r\n        }\r\n\r\n        // Remove and dispose of controllers to be disposed\r\n        const keepControllers: Array<WebXRInputSource> = [];\r\n        const removedControllers: Array<WebXRInputSource> = [];\r\n        this.controllers.forEach((c) => {\r\n            if (removeInputs.indexOf(c.inputSource) === -1) {\r\n                keepControllers.push(c);\r\n            } else {\r\n                removedControllers.push(c);\r\n            }\r\n        });\r\n        this.controllers = keepControllers;\r\n        removedControllers.forEach((c) => {\r\n            this.onControllerRemovedObservable.notifyObservers(c);\r\n            c.dispose();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Disposes of the object\r\n     */\r\n    public dispose() {\r\n        this.controllers.forEach((c) => {\r\n            c.dispose();\r\n        });\r\n        this.xrSessionManager.onXRFrameObservable.remove(this._frameObserver);\r\n        this.xrSessionManager.onXRSessionInit.remove(this._sessionInitObserver);\r\n        this.xrSessionManager.onXRSessionEnded.remove(this._sessionEndedObserver);\r\n        this.onControllerAddedObservable.clear();\r\n        this.onControllerRemovedObservable.clear();\r\n\r\n        // clear the controller cache\r\n        WebXRMotionControllerManager.ClearControllerCache();\r\n    }\r\n}\r\n"],"mappings":";AAEA,SAASA,UAAU,QAAQ,uBAAqB;AAGhD,SAASC,gBAAgB,QAAQ,uBAAqB;AAGtD,SAASC,4BAA4B,QAAQ,oDAAkD;AAwC/F;;;AAGA,OAAM,MAAOC,UAAU;EAiBnB;;;;;;EAMAC;EACI;;;EAGOC,gBAAqC;EAC5C;;;EAGOC,QAAqB,EACXC,QAAA,GAA+B,EAAE;IAL3C,KAAAF,gBAAgB,GAAhBA,gBAAgB;IAIhB,KAAAC,QAAQ,GAARA,QAAQ;IACE,KAAAC,QAAQ,GAARA,QAAQ;IA/B7B;;;IAGO,KAAAC,WAAW,GAA4B,EAAE;IAIhD;;;IAGO,KAAAC,2BAA2B,GAAG,IAAIT,UAAU,EAAoB;IACvE;;;IAGO,KAAAU,6BAA6B,GAAG,IAAIV,UAAU,EAAoB;IAyDjE,KAAAW,qBAAqB,GAAIC,KAA+B,IAAI;MAChE,IAAI,CAACC,wBAAwB,CAACD,KAAK,CAACE,KAAK,EAAEF,KAAK,CAACG,OAAO,CAAC;IAC7D,CAAC;IAxCG;IACA,IAAI,CAACC,qBAAqB,GAAG,IAAI,CAACX,gBAAgB,CAACY,gBAAgB,CAACC,GAAG,CAAC,MAAK;MACzE,IAAI,CAACL,wBAAwB,CACzB,EAAE,EACF,IAAI,CAACL,WAAW,CAACW,GAAG,CAAEC,CAAC,IAAI;QACvB,OAAOA,CAAC,CAACC,WAAW;MACxB,CAAC,CAAC,CACL;IACL,CAAC,CAAC;IAEF,IAAI,CAACC,oBAAoB,GAAG,IAAI,CAACjB,gBAAgB,CAACkB,eAAe,CAACL,GAAG,CAAEM,OAAO,IAAI;MAC9EA,OAAO,CAACC,gBAAgB,CAAC,oBAAoB,EAAE,IAAI,CAACd,qBAAqB,CAAC;IAC9E,CAAC,CAAC;IAEF,IAAI,CAACe,cAAc,GAAG,IAAI,CAACrB,gBAAgB,CAACsB,mBAAmB,CAACT,GAAG,CAAEU,KAAK,IAAI;MAC1E;MACA,IAAI,CAACpB,WAAW,CAACqB,OAAO,CAAEC,UAAU,IAAI;QACpCA,UAAU,CAACC,iBAAiB,CAACH,KAAK,EAAE,IAAI,CAACvB,gBAAgB,CAAC2B,cAAc,EAAE,IAAI,CAAC1B,QAAQ,CAAC;MAC5F,CAAC,CAAC;IACN,CAAC,CAAC;IAEF,IAAI,IAAI,CAACC,QAAQ,CAAC0B,8BAA8B,EAAE;MAC9C/B,4BAA4B,CAACgC,iBAAiB,GAAG,IAAI,CAAC3B,QAAQ,CAAC0B,8BAA8B;;IAGjG/B,4BAA4B,CAACiC,mBAAmB,GAAG,CAAC,IAAI,CAAC5B,QAAQ,CAAC6B,iCAAiC;IACnG,IAAIlC,4BAA4B,CAACiC,mBAAmB,EAAE;MAClD;MACA,IAAI;QACAjC,4BAA4B,CAACmC,kBAAkB,EAAE,CAACC,KAAK,CAAC,MAAK;UACzDpC,4BAA4B,CAACiC,mBAAmB,GAAG,KAAK;QAC5D,CAAC,CAAC;OACL,CAAC,OAAOI,CAAC,EAAE;QACRrC,4BAA4B,CAACiC,mBAAmB,GAAG,KAAK;;;EAGpE;EAMQtB,wBAAwBA,CAAC2B,SAAmC,EAAEC,YAAsC;IACxG;IACA,MAAMC,OAAO,GAAG,IAAI,CAAClC,WAAW,CAACW,GAAG,CAAEC,CAAC,IAAI;MACvC,OAAOA,CAAC,CAACC,WAAW;IACxB,CAAC,CAAC;IACF,KAAK,MAAMsB,KAAK,IAAIH,SAAS,EAAE;MAC3B,IAAIE,OAAO,CAACE,OAAO,CAACD,KAAK,CAAC,KAAK,CAAC,CAAC,EAAE;QAC/B,MAAMb,UAAU,GAAG,IAAI7B,gBAAgB,CAAC,IAAI,CAACI,gBAAgB,CAACwC,KAAK,EAAEF,KAAK,EAAAG,MAAA,CAAAC,MAAA,CAAAD,MAAA,CAAAC,MAAA,KAClE,IAAI,CAACxC,QAAQ,CAACyC,iBAAiB,IAAI,EAAG;UAC1CC,sBAAsB,EAAE,IAAI,CAAC1C,QAAQ,CAAC2C,iBAAiB;UACvDC,uBAAuB,EAAE,IAAI,CAAC5C,QAAQ,CAAC6C,yBAAyB;UAChEC,gCAAgC,EAAE,IAAI,CAAC9C,QAAQ,CAAC+C;QAA0B,GAC5E;QACF,IAAI,CAAC9C,WAAW,CAAC+C,IAAI,CAACzB,UAAU,CAAC;QACjC,IAAI,CAACrB,2BAA2B,CAAC+C,eAAe,CAAC1B,UAAU,CAAC;;;IAIpE;IACA,MAAM2B,eAAe,GAA4B,EAAE;IACnD,MAAMC,kBAAkB,GAA4B,EAAE;IACtD,IAAI,CAAClD,WAAW,CAACqB,OAAO,CAAET,CAAC,IAAI;MAC3B,IAAIqB,YAAY,CAACG,OAAO,CAACxB,CAAC,CAACC,WAAW,CAAC,KAAK,CAAC,CAAC,EAAE;QAC5CoC,eAAe,CAACF,IAAI,CAACnC,CAAC,CAAC;OAC1B,MAAM;QACHsC,kBAAkB,CAACH,IAAI,CAACnC,CAAC,CAAC;;IAElC,CAAC,CAAC;IACF,IAAI,CAACZ,WAAW,GAAGiD,eAAe;IAClCC,kBAAkB,CAAC7B,OAAO,CAAET,CAAC,IAAI;MAC7B,IAAI,CAACV,6BAA6B,CAAC8C,eAAe,CAACpC,CAAC,CAAC;MACrDA,CAAC,CAACuC,OAAO,EAAE;IACf,CAAC,CAAC;EACN;EAEA;;;EAGOA,OAAOA,CAAA;IACV,IAAI,CAACnD,WAAW,CAACqB,OAAO,CAAET,CAAC,IAAI;MAC3BA,CAAC,CAACuC,OAAO,EAAE;IACf,CAAC,CAAC;IACF,IAAI,CAACtD,gBAAgB,CAACsB,mBAAmB,CAACiC,MAAM,CAAC,IAAI,CAAClC,cAAc,CAAC;IACrE,IAAI,CAACrB,gBAAgB,CAACkB,eAAe,CAACqC,MAAM,CAAC,IAAI,CAACtC,oBAAoB,CAAC;IACvE,IAAI,CAACjB,gBAAgB,CAACY,gBAAgB,CAAC2C,MAAM,CAAC,IAAI,CAAC5C,qBAAqB,CAAC;IACzE,IAAI,CAACP,2BAA2B,CAACoD,KAAK,EAAE;IACxC,IAAI,CAACnD,6BAA6B,CAACmD,KAAK,EAAE;IAE1C;IACA3D,4BAA4B,CAAC4D,oBAAoB,EAAE;EACvD"},"metadata":{},"sourceType":"module","externalDependencies":[]}