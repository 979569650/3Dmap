{"ast":null,"code":"import { RichTypeString, RichTypeAny } from \"../../flowGraphRichTypes.js\";\nimport { FlowGraphWithOnDoneExecutionBlock } from \"../../flowGraphWithOnDoneExecutionBlock.js\";\nimport { RegisterClass } from \"../../../Misc/typeStore.js\";\n/**\n * @experimental\n * Block that sets a property on a target object.\n * TODO: Add support for animating the property.\n */\nexport class FlowGraphSetPropertyBlock extends FlowGraphWithOnDoneExecutionBlock {\n  constructor(config) {\n    super(config);\n    this.target = this._registerDataInput(\"target\", RichTypeAny);\n    this.property = this._registerDataInput(\"property\", RichTypeString);\n    this.value = this._registerDataInput(\"value\", RichTypeAny);\n  }\n  _setProperty(target, property, value) {\n    const splitProp = property.split(\".\");\n    let currentTarget = target;\n    for (let i = 0; i < splitProp.length - 1; i++) {\n      currentTarget = currentTarget[splitProp[i]];\n    }\n    currentTarget[splitProp[splitProp.length - 1]] = value;\n  }\n  _execute(context) {\n    const target = this.target.getValue(context);\n    const property = this.property.getValue(context);\n    const value = this.value.getValue(context);\n    if (target && property && value) {\n      this._setProperty(target, property, value);\n    } else {\n      throw new Error(\"Invalid target, property or value.\");\n    }\n    this.onDone._activateSignal(context);\n  }\n  getClassName() {\n    return \"FGSetPropertyBlock\";\n  }\n}\nRegisterClass(\"FGSetPropertyBlock\", FlowGraphSetPropertyBlock);","map":{"version":3,"names":["RichTypeString","RichTypeAny","FlowGraphWithOnDoneExecutionBlock","RegisterClass","FlowGraphSetPropertyBlock","constructor","config","target","_registerDataInput","property","value","_setProperty","splitProp","split","currentTarget","i","length","_execute","context","getValue","Error","onDone","_activateSignal","getClassName"],"sources":["../../../../../../dev/core/src/FlowGraph/Blocks/Execution/flowGraphSetPropertyBlock.ts"],"sourcesContent":["import { RichTypeString, RichTypeAny } from \"../../flowGraphRichTypes\";\r\nimport type { FlowGraphContext } from \"../../flowGraphContext\";\r\nimport type { FlowGraphDataConnection } from \"../../flowGraphDataConnection\";\r\nimport { FlowGraphWithOnDoneExecutionBlock } from \"../../flowGraphWithOnDoneExecutionBlock\";\r\nimport { RegisterClass } from \"../../../Misc/typeStore\";\r\nimport type { IFlowGraphBlockConfiguration } from \"../../flowGraphBlock\";\r\n\r\n/**\r\n * @experimental\r\n * Block that sets a property on a target object.\r\n * TODO: Add support for animating the property.\r\n */\r\nexport class FlowGraphSetPropertyBlock<TargetT, ValueT> extends FlowGraphWithOnDoneExecutionBlock {\r\n    /**\r\n     * Input connection: The target object.\r\n     */\r\n    public readonly target: FlowGraphDataConnection<TargetT>;\r\n    /**\r\n     * Input connection: The property to set on the object.\r\n     * Supports dot notation.\r\n     */\r\n    public readonly property: FlowGraphDataConnection<string>;\r\n    /**\r\n     * Input connection: The value to set on the property.\r\n     */\r\n    public readonly value: FlowGraphDataConnection<ValueT>;\r\n\r\n    public constructor(config?: IFlowGraphBlockConfiguration) {\r\n        super(config);\r\n\r\n        this.target = this._registerDataInput(\"target\", RichTypeAny);\r\n        this.property = this._registerDataInput(\"property\", RichTypeString);\r\n        this.value = this._registerDataInput(\"value\", RichTypeAny);\r\n    }\r\n\r\n    private _setProperty(target: any, property: string, value: any): void {\r\n        const splitProp = property.split(\".\");\r\n\r\n        let currentTarget = target;\r\n        for (let i = 0; i < splitProp.length - 1; i++) {\r\n            currentTarget = currentTarget[splitProp[i]];\r\n        }\r\n\r\n        currentTarget[splitProp[splitProp.length - 1]] = value;\r\n    }\r\n\r\n    public _execute(context: FlowGraphContext): void {\r\n        const target = this.target.getValue(context);\r\n        const property = this.property.getValue(context);\r\n        const value = this.value.getValue(context);\r\n\r\n        if (target && property && value) {\r\n            this._setProperty(target, property, value);\r\n        } else {\r\n            throw new Error(\"Invalid target, property or value.\");\r\n        }\r\n\r\n        this.onDone._activateSignal(context);\r\n    }\r\n\r\n    public getClassName(): string {\r\n        return \"FGSetPropertyBlock\";\r\n    }\r\n}\r\nRegisterClass(\"FGSetPropertyBlock\", FlowGraphSetPropertyBlock);\r\n"],"mappings":"AAAA,SAASA,cAAc,EAAEC,WAAW,QAAQ,6BAA2B;AAGvE,SAASC,iCAAiC,QAAQ,4CAA0C;AAC5F,SAASC,aAAa,QAAQ,4BAA0B;AAGxD;;;;;AAKA,OAAM,MAAOC,yBAA2C,SAAQF,iCAAiC;EAe7FG,YAAmBC,MAAqC;IACpD,KAAK,CAACA,MAAM,CAAC;IAEb,IAAI,CAACC,MAAM,GAAG,IAAI,CAACC,kBAAkB,CAAC,QAAQ,EAAEP,WAAW,CAAC;IAC5D,IAAI,CAACQ,QAAQ,GAAG,IAAI,CAACD,kBAAkB,CAAC,UAAU,EAAER,cAAc,CAAC;IACnE,IAAI,CAACU,KAAK,GAAG,IAAI,CAACF,kBAAkB,CAAC,OAAO,EAAEP,WAAW,CAAC;EAC9D;EAEQU,YAAYA,CAACJ,MAAW,EAAEE,QAAgB,EAAEC,KAAU;IAC1D,MAAME,SAAS,GAAGH,QAAQ,CAACI,KAAK,CAAC,GAAG,CAAC;IAErC,IAAIC,aAAa,GAAGP,MAAM;IAC1B,KAAK,IAAIQ,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGH,SAAS,CAACI,MAAM,GAAG,CAAC,EAAED,CAAC,EAAE,EAAE;MAC3CD,aAAa,GAAGA,aAAa,CAACF,SAAS,CAACG,CAAC,CAAC,CAAC;;IAG/CD,aAAa,CAACF,SAAS,CAACA,SAAS,CAACI,MAAM,GAAG,CAAC,CAAC,CAAC,GAAGN,KAAK;EAC1D;EAEOO,QAAQA,CAACC,OAAyB;IACrC,MAAMX,MAAM,GAAG,IAAI,CAACA,MAAM,CAACY,QAAQ,CAACD,OAAO,CAAC;IAC5C,MAAMT,QAAQ,GAAG,IAAI,CAACA,QAAQ,CAACU,QAAQ,CAACD,OAAO,CAAC;IAChD,MAAMR,KAAK,GAAG,IAAI,CAACA,KAAK,CAACS,QAAQ,CAACD,OAAO,CAAC;IAE1C,IAAIX,MAAM,IAAIE,QAAQ,IAAIC,KAAK,EAAE;MAC7B,IAAI,CAACC,YAAY,CAACJ,MAAM,EAAEE,QAAQ,EAAEC,KAAK,CAAC;KAC7C,MAAM;MACH,MAAM,IAAIU,KAAK,CAAC,oCAAoC,CAAC;;IAGzD,IAAI,CAACC,MAAM,CAACC,eAAe,CAACJ,OAAO,CAAC;EACxC;EAEOK,YAAYA,CAAA;IACf,OAAO,oBAAoB;EAC/B;;AAEJpB,aAAa,CAAC,oBAAoB,EAAEC,yBAAyB,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}