{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { Rectangle } from \"./rectangle.js\";\nimport { StackPanel } from \"./stackPanel.js\";\nimport { Control } from \"./control.js\";\nimport { TextBlock } from \"./textBlock.js\";\nimport { Checkbox } from \"./checkbox.js\";\nimport { RadioButton } from \"./radioButton.js\";\nimport { Slider } from \"./sliders/slider.js\";\nimport { Container } from \"./container.js\";\n/** Class used to create a RadioGroup\n * which contains groups of radio buttons\n */\nexport class SelectorGroup {\n  /**\n   * Creates a new SelectorGroup\n   * @param name of group, used as a group heading\n   */\n  constructor( /** name of SelectorGroup */\n  name) {\n    this.name = name;\n    this._groupPanel = new StackPanel();\n    this._selectors = new Array();\n    this._groupPanel.verticalAlignment = Control.VERTICAL_ALIGNMENT_TOP;\n    this._groupPanel.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\n    this._groupHeader = this._addGroupHeader(name);\n  }\n  /** Gets the groupPanel of the SelectorGroup  */\n  get groupPanel() {\n    return this._groupPanel;\n  }\n  /** Gets the selectors array */\n  get selectors() {\n    return this._selectors;\n  }\n  /** Gets and sets the group header */\n  get header() {\n    return this._groupHeader.text;\n  }\n  set header(label) {\n    if (this._groupHeader.text === \"label\") {\n      return;\n    }\n    this._groupHeader.text = label;\n  }\n  /**\n   * @internal\n   */\n  _addGroupHeader(text) {\n    const groupHeading = new TextBlock(\"groupHead\", text);\n    groupHeading.width = 0.9;\n    groupHeading.height = \"30px\";\n    groupHeading.textWrapping = true;\n    groupHeading.color = \"black\";\n    groupHeading.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\n    groupHeading.textHorizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\n    groupHeading.left = \"2px\";\n    this._groupPanel.addControl(groupHeading);\n    return groupHeading;\n  }\n  /**\n   * @internal\n   */\n  _getSelector(selectorNb) {\n    if (selectorNb < 0 || selectorNb >= this._selectors.length) {\n      return;\n    }\n    return this._selectors[selectorNb];\n  }\n  /** Removes the selector at the given position\n   * @param selectorNb the position of the selector within the group\n   */\n  removeSelector(selectorNb) {\n    if (selectorNb < 0 || selectorNb >= this._selectors.length) {\n      return;\n    }\n    this._groupPanel.removeControl(this._selectors[selectorNb]);\n    this._selectors.splice(selectorNb, 1);\n  }\n}\n/** Class used to create a CheckboxGroup\n * which contains groups of checkbox buttons\n */\nexport class CheckboxGroup extends SelectorGroup {\n  /** Adds a checkbox as a control\n   * @param text is the label for the selector\n   * @param func is the function called when the Selector is checked\n   * @param checked is true when Selector is checked\n   */\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  addCheckbox(text, func = s => {}, checked = false) {\n    checked = checked || false;\n    const button = new Checkbox();\n    button.width = \"20px\";\n    button.height = \"20px\";\n    button.color = \"#364249\";\n    button.background = \"#CCCCCC\";\n    button.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\n    button.onIsCheckedChangedObservable.add(function (state) {\n      func(state);\n    });\n    const _selector = Control.AddHeader(button, text, \"200px\", {\n      isHorizontal: true,\n      controlFirst: true\n    });\n    _selector.height = \"30px\";\n    _selector.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\n    _selector.left = \"4px\";\n    this.groupPanel.addControl(_selector);\n    this.selectors.push(_selector);\n    button.isChecked = checked;\n    if (this.groupPanel.parent && this.groupPanel.parent.parent) {\n      button.color = this.groupPanel.parent.parent.buttonColor;\n      button.background = this.groupPanel.parent.parent.buttonBackground;\n    }\n  }\n  /**\n   * @internal\n   */\n  _setSelectorLabel(selectorNb, label) {\n    this.selectors[selectorNb].children[1].text = label;\n  }\n  /**\n   * @internal\n   */\n  _setSelectorLabelColor(selectorNb, color) {\n    this.selectors[selectorNb].children[1].color = color;\n  }\n  /**\n   * @internal\n   */\n  _setSelectorButtonColor(selectorNb, color) {\n    this.selectors[selectorNb].children[0].color = color;\n  }\n  /**\n   * @internal\n   */\n  _setSelectorButtonBackground(selectorNb, color) {\n    this.selectors[selectorNb].children[0].background = color;\n  }\n}\n/** Class used to create a RadioGroup\n * which contains groups of radio buttons\n */\nexport class RadioGroup extends SelectorGroup {\n  constructor() {\n    super(...arguments);\n    this._selectNb = 0;\n  }\n  /** Adds a radio button as a control\n   * @param label is the label for the selector\n   * @param func is the function called when the Selector is checked\n   * @param checked is true when Selector is checked\n   */\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  addRadio(label, func = n => {}, checked = false) {\n    const nb = this._selectNb++;\n    const button = new RadioButton();\n    button.name = label;\n    button.width = \"20px\";\n    button.height = \"20px\";\n    button.color = \"#364249\";\n    button.background = \"#CCCCCC\";\n    button.group = this.name;\n    button.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\n    button.onIsCheckedChangedObservable.add(function (state) {\n      if (state) {\n        func(nb);\n      }\n    });\n    const _selector = Control.AddHeader(button, label, \"200px\", {\n      isHorizontal: true,\n      controlFirst: true\n    });\n    _selector.height = \"30px\";\n    _selector.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\n    _selector.left = \"4px\";\n    this.groupPanel.addControl(_selector);\n    this.selectors.push(_selector);\n    button.isChecked = checked;\n    if (this.groupPanel.parent && this.groupPanel.parent.parent) {\n      button.color = this.groupPanel.parent.parent.buttonColor;\n      button.background = this.groupPanel.parent.parent.buttonBackground;\n    }\n  }\n  /**\n   * @internal\n   */\n  _setSelectorLabel(selectorNb, label) {\n    this.selectors[selectorNb].children[1].text = label;\n  }\n  /**\n   * @internal\n   */\n  _setSelectorLabelColor(selectorNb, color) {\n    this.selectors[selectorNb].children[1].color = color;\n  }\n  /**\n   * @internal\n   */\n  _setSelectorButtonColor(selectorNb, color) {\n    this.selectors[selectorNb].children[0].color = color;\n  }\n  /**\n   * @internal\n   */\n  _setSelectorButtonBackground(selectorNb, color) {\n    this.selectors[selectorNb].children[0].background = color;\n  }\n}\n/** Class used to create a SliderGroup\n * which contains groups of slider buttons\n */\nexport class SliderGroup extends SelectorGroup {\n  /**\n   * Adds a slider to the SelectorGroup\n   * @param label is the label for the SliderBar\n   * @param func is the function called when the Slider moves\n   * @param unit is a string describing the units used, eg degrees or metres\n   * @param min is the minimum value for the Slider\n   * @param max is the maximum value for the Slider\n   * @param value is the start value for the Slider between min and max\n   * @param onValueChange is the function used to format the value displayed, eg radians to degrees\n   */\n  addSlider(label,\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  func = v => {}, unit = \"Units\", min = 0, max = 0, value = 0, onValueChange = v => {\n    return v | 0;\n  }) {\n    const button = new Slider();\n    button.name = unit;\n    button.value = value;\n    button.minimum = min;\n    button.maximum = max;\n    button.width = 0.9;\n    button.height = \"20px\";\n    button.color = \"#364249\";\n    button.background = \"#CCCCCC\";\n    button.borderColor = \"black\";\n    button.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\n    button.left = \"4px\";\n    button.paddingBottom = \"4px\";\n    button.onValueChangedObservable.add(function (value) {\n      button.parent.children[0].text = button.parent.children[0].name + \": \" + onValueChange(value) + \" \" + button.name;\n      func(value);\n    });\n    const _selector = Control.AddHeader(button, label + \": \" + onValueChange(value) + \" \" + unit, \"30px\", {\n      isHorizontal: false,\n      controlFirst: false\n    });\n    _selector.height = \"60px\";\n    _selector.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\n    _selector.left = \"4px\";\n    _selector.children[0].name = label;\n    this.groupPanel.addControl(_selector);\n    this.selectors.push(_selector);\n    if (this.groupPanel.parent && this.groupPanel.parent.parent) {\n      button.color = this.groupPanel.parent.parent.buttonColor;\n      button.background = this.groupPanel.parent.parent.buttonBackground;\n    }\n  }\n  /**\n   * @internal\n   */\n  _setSelectorLabel(selectorNb, label) {\n    this.selectors[selectorNb].children[0].name = label;\n    this.selectors[selectorNb].children[0].text = label + \": \" + this.selectors[selectorNb].children[1].value + \" \" + this.selectors[selectorNb].children[1].name;\n  }\n  /**\n   * @internal\n   */\n  _setSelectorLabelColor(selectorNb, color) {\n    this.selectors[selectorNb].children[0].color = color;\n  }\n  /**\n   * @internal\n   */\n  _setSelectorButtonColor(selectorNb, color) {\n    this.selectors[selectorNb].children[1].color = color;\n  }\n  /**\n   * @internal\n   */\n  _setSelectorButtonBackground(selectorNb, color) {\n    this.selectors[selectorNb].children[1].background = color;\n  }\n}\n/** Class used to hold the controls for the checkboxes, radio buttons and sliders\n * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/selector\n */\nexport class SelectionPanel extends Rectangle {\n  /**\n   * Creates a new SelectionPanel\n   * @param name of SelectionPanel\n   * @param groups is an array of SelectionGroups\n   */\n  constructor( /** name of SelectionPanel */\n  name, /** an array of SelectionGroups */\n  groups = []) {\n    super(name);\n    this.name = name;\n    this.groups = groups;\n    this._buttonColor = \"#364249\";\n    this._buttonBackground = \"#CCCCCC\";\n    this._headerColor = \"black\";\n    this._barColor = \"white\";\n    this._barHeight = \"2px\";\n    this._spacerHeight = \"20px\";\n    this._bars = new Array();\n    this._groups = groups;\n    this.thickness = 2;\n    this._panel = new StackPanel();\n    this._panel.verticalAlignment = Control.VERTICAL_ALIGNMENT_TOP;\n    this._panel.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\n    this._panel.top = 5;\n    this._panel.left = 5;\n    this._panel.width = 0.95;\n    if (groups.length > 0) {\n      for (let i = 0; i < groups.length - 1; i++) {\n        this._panel.addControl(groups[i].groupPanel);\n        this._addSpacer();\n      }\n      this._panel.addControl(groups[groups.length - 1].groupPanel);\n    }\n    this.addControl(this._panel);\n  }\n  _getTypeName() {\n    return \"SelectionPanel\";\n  }\n  /** Gets the (stack) panel of the SelectionPanel  */\n  get panel() {\n    return this._panel;\n  }\n  /** Gets or sets the headerColor */\n  get headerColor() {\n    return this._headerColor;\n  }\n  set headerColor(color) {\n    if (this._headerColor === color) {\n      return;\n    }\n    this._headerColor = color;\n    this._setHeaderColor();\n  }\n  _setHeaderColor() {\n    for (let i = 0; i < this._groups.length; i++) {\n      this._groups[i].groupPanel.children[0].color = this._headerColor;\n    }\n  }\n  /** Gets or sets the button color */\n  get buttonColor() {\n    return this._buttonColor;\n  }\n  set buttonColor(color) {\n    if (this._buttonColor === color) {\n      return;\n    }\n    this._buttonColor = color;\n    this._setbuttonColor();\n  }\n  _setbuttonColor() {\n    for (let i = 0; i < this._groups.length; i++) {\n      for (let j = 0; j < this._groups[i].selectors.length; j++) {\n        this._groups[i]._setSelectorButtonColor(j, this._buttonColor);\n      }\n    }\n  }\n  /** Gets or sets the label color */\n  get labelColor() {\n    return this._labelColor;\n  }\n  set labelColor(color) {\n    if (this._labelColor === color) {\n      return;\n    }\n    this._labelColor = color;\n    this._setLabelColor();\n  }\n  _setLabelColor() {\n    for (let i = 0; i < this._groups.length; i++) {\n      for (let j = 0; j < this._groups[i].selectors.length; j++) {\n        this._groups[i]._setSelectorLabelColor(j, this._labelColor);\n      }\n    }\n  }\n  /** Gets or sets the button background */\n  get buttonBackground() {\n    return this._buttonBackground;\n  }\n  set buttonBackground(color) {\n    if (this._buttonBackground === color) {\n      return;\n    }\n    this._buttonBackground = color;\n    this._setButtonBackground();\n  }\n  _setButtonBackground() {\n    for (let i = 0; i < this._groups.length; i++) {\n      for (let j = 0; j < this._groups[i].selectors.length; j++) {\n        this._groups[i]._setSelectorButtonBackground(j, this._buttonBackground);\n      }\n    }\n  }\n  /** Gets or sets the color of separator bar */\n  get barColor() {\n    return this._barColor;\n  }\n  set barColor(color) {\n    if (this._barColor === color) {\n      return;\n    }\n    this._barColor = color;\n    this._setBarColor();\n  }\n  _setBarColor() {\n    for (let i = 0; i < this._bars.length; i++) {\n      this._bars[i].children[0].background = this._barColor;\n    }\n  }\n  /** Gets or sets the height of separator bar */\n  get barHeight() {\n    return this._barHeight;\n  }\n  set barHeight(value) {\n    if (this._barHeight === value) {\n      return;\n    }\n    this._barHeight = value;\n    this._setBarHeight();\n  }\n  _setBarHeight() {\n    for (let i = 0; i < this._bars.length; i++) {\n      this._bars[i].children[0].height = this._barHeight;\n    }\n  }\n  /** Gets or sets the height of spacers*/\n  get spacerHeight() {\n    return this._spacerHeight;\n  }\n  set spacerHeight(value) {\n    if (this._spacerHeight === value) {\n      return;\n    }\n    this._spacerHeight = value;\n    this._setSpacerHeight();\n  }\n  _setSpacerHeight() {\n    for (let i = 0; i < this._bars.length; i++) {\n      this._bars[i].height = this._spacerHeight;\n    }\n  }\n  /** Adds a bar between groups */\n  _addSpacer() {\n    const separator = new Container();\n    separator.width = 1;\n    separator.height = this._spacerHeight;\n    separator.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\n    const bar = new Rectangle();\n    bar.width = 1;\n    bar.height = this._barHeight;\n    bar.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\n    bar.verticalAlignment = Control.VERTICAL_ALIGNMENT_CENTER;\n    bar.background = this._barColor;\n    bar.color = \"transparent\";\n    separator.addControl(bar);\n    this._panel.addControl(separator);\n    this._bars.push(separator);\n  }\n  /** Add a group to the selection panel\n   * @param group is the selector group to add\n   */\n  addGroup(group) {\n    if (this._groups.length > 0) {\n      this._addSpacer();\n    }\n    this._panel.addControl(group.groupPanel);\n    this._groups.push(group);\n    group.groupPanel.children[0].color = this._headerColor;\n    for (let j = 0; j < group.selectors.length; j++) {\n      group._setSelectorButtonColor(j, this._buttonColor);\n      group._setSelectorButtonBackground(j, this._buttonBackground);\n    }\n  }\n  /** Remove the group from the given position\n   * @param groupNb is the position of the group in the list\n   */\n  removeGroup(groupNb) {\n    if (groupNb < 0 || groupNb >= this._groups.length) {\n      return;\n    }\n    const group = this._groups[groupNb];\n    this._panel.removeControl(group.groupPanel);\n    this._groups.splice(groupNb, 1);\n    if (groupNb < this._bars.length) {\n      this._panel.removeControl(this._bars[groupNb]);\n      this._bars.splice(groupNb, 1);\n    }\n  }\n  /** Change a group header label\n   * @param label is the new group header label\n   * @param groupNb is the number of the group to relabel\n   * */\n  setHeaderName(label, groupNb) {\n    if (groupNb < 0 || groupNb >= this._groups.length) {\n      return;\n    }\n    const group = this._groups[groupNb];\n    group.groupPanel.children[0].text = label;\n  }\n  /** Change selector label to the one given\n   * @param label is the new selector label\n   * @param groupNb is the number of the groupcontaining the selector\n   * @param selectorNb is the number of the selector within a group to relabel\n   * */\n  relabel(label, groupNb, selectorNb) {\n    if (groupNb < 0 || groupNb >= this._groups.length) {\n      return;\n    }\n    const group = this._groups[groupNb];\n    if (selectorNb < 0 || selectorNb >= group.selectors.length) {\n      return;\n    }\n    group._setSelectorLabel(selectorNb, label);\n  }\n  /** For a given group position remove the selector at the given position\n   * @param groupNb is the number of the group to remove the selector from\n   * @param selectorNb is the number of the selector within the group\n   */\n  removeFromGroupSelector(groupNb, selectorNb) {\n    if (groupNb < 0 || groupNb >= this._groups.length) {\n      return;\n    }\n    const group = this._groups[groupNb];\n    if (selectorNb < 0 || selectorNb >= group.selectors.length) {\n      return;\n    }\n    group.removeSelector(selectorNb);\n  }\n  /** For a given group position of correct type add a checkbox button\n   * @param groupNb is the number of the group to remove the selector from\n   * @param label is the label for the selector\n   * @param func is the function called when the Selector is checked\n   * @param checked is true when Selector is checked\n   */\n  addToGroupCheckbox(groupNb, label, func = () => {}, checked = false) {\n    if (groupNb < 0 || groupNb >= this._groups.length) {\n      return;\n    }\n    const group = this._groups[groupNb];\n    group.addCheckbox(label, func, checked);\n  }\n  /** For a given group position of correct type add a radio button\n   * @param groupNb is the number of the group to remove the selector from\n   * @param label is the label for the selector\n   * @param func is the function called when the Selector is checked\n   * @param checked is true when Selector is checked\n   */\n  addToGroupRadio(groupNb, label, func = () => {}, checked = false) {\n    if (groupNb < 0 || groupNb >= this._groups.length) {\n      return;\n    }\n    const group = this._groups[groupNb];\n    group.addRadio(label, func, checked);\n  }\n  /**\n   * For a given slider group add a slider\n   * @param groupNb is the number of the group to add the slider to\n   * @param label is the label for the Slider\n   * @param func is the function called when the Slider moves\n   * @param unit is a string describing the units used, eg degrees or metres\n   * @param min is the minimum value for the Slider\n   * @param max is the maximum value for the Slider\n   * @param value is the start value for the Slider between min and max\n   * @param onVal is the function used to format the value displayed, eg radians to degrees\n   */\n  addToGroupSlider(groupNb, label, func = () => {}, unit = \"Units\", min = 0, max = 0, value = 0, onVal = v => {\n    return v | 0;\n  }) {\n    if (groupNb < 0 || groupNb >= this._groups.length) {\n      return;\n    }\n    const group = this._groups[groupNb];\n    group.addSlider(label, func, unit, min, max, value, onVal);\n  }\n}","map":{"version":3,"names":["Rectangle","StackPanel","Control","TextBlock","Checkbox","RadioButton","Slider","Container","SelectorGroup","constructor","name","_groupPanel","_selectors","Array","verticalAlignment","VERTICAL_ALIGNMENT_TOP","horizontalAlignment","HORIZONTAL_ALIGNMENT_LEFT","_groupHeader","_addGroupHeader","groupPanel","selectors","header","text","label","groupHeading","width","height","textWrapping","color","textHorizontalAlignment","left","addControl","_getSelector","selectorNb","length","removeSelector","removeControl","splice","CheckboxGroup","addCheckbox","func","s","checked","button","background","onIsCheckedChangedObservable","add","state","_selector","AddHeader","isHorizontal","controlFirst","push","isChecked","parent","buttonColor","buttonBackground","_setSelectorLabel","children","_setSelectorLabelColor","_setSelectorButtonColor","_setSelectorButtonBackground","RadioGroup","_selectNb","addRadio","n","nb","group","SliderGroup","addSlider","v","unit","min","max","value","onValueChange","minimum","maximum","borderColor","paddingBottom","onValueChangedObservable","SelectionPanel","groups","_buttonColor","_buttonBackground","_headerColor","_barColor","_barHeight","_spacerHeight","_bars","_groups","thickness","_panel","top","i","_addSpacer","_getTypeName","panel","headerColor","_setHeaderColor","_setbuttonColor","j","labelColor","_labelColor","_setLabelColor","_setButtonBackground","barColor","_setBarColor","barHeight","_setBarHeight","spacerHeight","_setSpacerHeight","separator","bar","VERTICAL_ALIGNMENT_CENTER","addGroup","removeGroup","groupNb","setHeaderName","relabel","removeFromGroupSelector","addToGroupCheckbox","addToGroupRadio","addToGroupSlider","onVal"],"sources":["../../../../../dev/gui/src/2D/controls/selector.ts"],"sourcesContent":["import { Rectangle } from \"./rectangle\";\r\nimport { StackPanel } from \"./stackPanel\";\r\nimport { Control } from \"./control\";\r\nimport { TextBlock } from \"./textBlock\";\r\nimport { Checkbox } from \"./checkbox\";\r\nimport { RadioButton } from \"./radioButton\";\r\nimport { Slider } from \"./sliders/slider\";\r\nimport { Container } from \"./container\";\r\n\r\n/** Class used to create a RadioGroup\r\n * which contains groups of radio buttons\r\n */\r\nexport class SelectorGroup {\r\n    private _groupPanel = new StackPanel();\r\n    private _selectors: StackPanel[] = new Array();\r\n    private _groupHeader: TextBlock;\r\n\r\n    /**\r\n     * Creates a new SelectorGroup\r\n     * @param name of group, used as a group heading\r\n     */\r\n    constructor(\r\n        /** name of SelectorGroup */\r\n        public name: string\r\n    ) {\r\n        this._groupPanel.verticalAlignment = Control.VERTICAL_ALIGNMENT_TOP;\r\n        this._groupPanel.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        this._groupHeader = this._addGroupHeader(name);\r\n    }\r\n\r\n    /** Gets the groupPanel of the SelectorGroup  */\r\n    public get groupPanel(): StackPanel {\r\n        return this._groupPanel;\r\n    }\r\n\r\n    /** Gets the selectors array */\r\n    public get selectors(): StackPanel[] {\r\n        return this._selectors;\r\n    }\r\n\r\n    /** Gets and sets the group header */\r\n    public get header() {\r\n        return this._groupHeader.text;\r\n    }\r\n\r\n    public set header(label: string) {\r\n        if (this._groupHeader.text === \"label\") {\r\n            return;\r\n        }\r\n\r\n        this._groupHeader.text = label;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    private _addGroupHeader(text: string): TextBlock {\r\n        const groupHeading = new TextBlock(\"groupHead\", text);\r\n        groupHeading.width = 0.9;\r\n        groupHeading.height = \"30px\";\r\n        groupHeading.textWrapping = true;\r\n        groupHeading.color = \"black\";\r\n        groupHeading.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        groupHeading.textHorizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        groupHeading.left = \"2px\";\r\n        this._groupPanel.addControl(groupHeading);\r\n        return groupHeading;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _getSelector(selectorNb: number) {\r\n        if (selectorNb < 0 || selectorNb >= this._selectors.length) {\r\n            return;\r\n        }\r\n        return this._selectors[selectorNb];\r\n    }\r\n\r\n    /** Removes the selector at the given position\r\n     * @param selectorNb the position of the selector within the group\r\n     */\r\n    public removeSelector(selectorNb: number) {\r\n        if (selectorNb < 0 || selectorNb >= this._selectors.length) {\r\n            return;\r\n        }\r\n        this._groupPanel.removeControl(this._selectors[selectorNb]);\r\n        this._selectors.splice(selectorNb, 1);\r\n    }\r\n}\r\n\r\n/** Class used to create a CheckboxGroup\r\n * which contains groups of checkbox buttons\r\n */\r\nexport class CheckboxGroup extends SelectorGroup {\r\n    /** Adds a checkbox as a control\r\n     * @param text is the label for the selector\r\n     * @param func is the function called when the Selector is checked\r\n     * @param checked is true when Selector is checked\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    public addCheckbox(text: string, func = (s: boolean) => {}, checked: boolean = false): void {\r\n        checked = checked || false;\r\n        const button = new Checkbox();\r\n        button.width = \"20px\";\r\n        button.height = \"20px\";\r\n        button.color = \"#364249\";\r\n        button.background = \"#CCCCCC\";\r\n        button.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n\r\n        button.onIsCheckedChangedObservable.add(function (state) {\r\n            func(state);\r\n        });\r\n\r\n        const _selector = Control.AddHeader(button, text, \"200px\", { isHorizontal: true, controlFirst: true });\r\n        _selector.height = \"30px\";\r\n        _selector.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        _selector.left = \"4px\";\r\n\r\n        this.groupPanel.addControl(_selector);\r\n        this.selectors.push(_selector);\r\n        button.isChecked = checked;\r\n\r\n        if (this.groupPanel.parent && this.groupPanel.parent.parent) {\r\n            button.color = (<SelectionPanel>this.groupPanel.parent.parent).buttonColor;\r\n            button.background = (<SelectionPanel>this.groupPanel.parent.parent).buttonBackground;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _setSelectorLabel(selectorNb: number, label: string) {\r\n        (<TextBlock>this.selectors[selectorNb].children[1]).text = label;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _setSelectorLabelColor(selectorNb: number, color: string) {\r\n        (<TextBlock>this.selectors[selectorNb].children[1]).color = color;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _setSelectorButtonColor(selectorNb: number, color: string) {\r\n        this.selectors[selectorNb].children[0].color = color;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _setSelectorButtonBackground(selectorNb: number, color: string) {\r\n        (<Checkbox>this.selectors[selectorNb].children[0]).background = color;\r\n    }\r\n}\r\n\r\n/** Class used to create a RadioGroup\r\n * which contains groups of radio buttons\r\n */\r\nexport class RadioGroup extends SelectorGroup {\r\n    private _selectNb = 0;\r\n\r\n    /** Adds a radio button as a control\r\n     * @param label is the label for the selector\r\n     * @param func is the function called when the Selector is checked\r\n     * @param checked is true when Selector is checked\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    public addRadio(label: string, func = (n: number) => {}, checked = false): void {\r\n        const nb = this._selectNb++;\r\n        const button = new RadioButton();\r\n        button.name = label;\r\n        button.width = \"20px\";\r\n        button.height = \"20px\";\r\n        button.color = \"#364249\";\r\n        button.background = \"#CCCCCC\";\r\n        button.group = this.name;\r\n        button.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n\r\n        button.onIsCheckedChangedObservable.add(function (state) {\r\n            if (state) {\r\n                func(nb);\r\n            }\r\n        });\r\n\r\n        const _selector = Control.AddHeader(button, label, \"200px\", { isHorizontal: true, controlFirst: true });\r\n        _selector.height = \"30px\";\r\n        _selector.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        _selector.left = \"4px\";\r\n        this.groupPanel.addControl(_selector);\r\n        this.selectors.push(_selector);\r\n        button.isChecked = checked;\r\n\r\n        if (this.groupPanel.parent && this.groupPanel.parent.parent) {\r\n            button.color = (<SelectionPanel>this.groupPanel.parent.parent).buttonColor;\r\n            button.background = (<SelectionPanel>this.groupPanel.parent.parent).buttonBackground;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _setSelectorLabel(selectorNb: number, label: string) {\r\n        (<TextBlock>this.selectors[selectorNb].children[1]).text = label;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _setSelectorLabelColor(selectorNb: number, color: string) {\r\n        (<TextBlock>this.selectors[selectorNb].children[1]).color = color;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _setSelectorButtonColor(selectorNb: number, color: string) {\r\n        this.selectors[selectorNb].children[0].color = color;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _setSelectorButtonBackground(selectorNb: number, color: string) {\r\n        (<RadioButton>this.selectors[selectorNb].children[0]).background = color;\r\n    }\r\n}\r\n\r\n/** Class used to create a SliderGroup\r\n * which contains groups of slider buttons\r\n */\r\nexport class SliderGroup extends SelectorGroup {\r\n    /**\r\n     * Adds a slider to the SelectorGroup\r\n     * @param label is the label for the SliderBar\r\n     * @param func is the function called when the Slider moves\r\n     * @param unit is a string describing the units used, eg degrees or metres\r\n     * @param min is the minimum value for the Slider\r\n     * @param max is the maximum value for the Slider\r\n     * @param value is the start value for the Slider between min and max\r\n     * @param onValueChange is the function used to format the value displayed, eg radians to degrees\r\n     */\r\n    public addSlider(\r\n        label: string,\r\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n        func = (v: number) => {},\r\n        unit: string = \"Units\",\r\n        min: number = 0,\r\n        max: number = 0,\r\n        value: number = 0,\r\n        onValueChange = (v: number) => {\r\n            return v | 0;\r\n        }\r\n    ): void {\r\n        const button = new Slider();\r\n        button.name = unit;\r\n        button.value = value;\r\n        button.minimum = min;\r\n        button.maximum = max;\r\n        button.width = 0.9;\r\n        button.height = \"20px\";\r\n        button.color = \"#364249\";\r\n        button.background = \"#CCCCCC\";\r\n        button.borderColor = \"black\";\r\n        button.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        button.left = \"4px\";\r\n        button.paddingBottom = \"4px\";\r\n\r\n        button.onValueChangedObservable.add(function (value) {\r\n            (<TextBlock>button.parent!.children[0]).text = button.parent!.children[0].name + \": \" + onValueChange(value) + \" \" + button.name;\r\n            func(value);\r\n        });\r\n\r\n        const _selector = Control.AddHeader(button, label + \": \" + onValueChange(value) + \" \" + unit, \"30px\", { isHorizontal: false, controlFirst: false });\r\n        _selector.height = \"60px\";\r\n        _selector.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        _selector.left = \"4px\";\r\n        _selector.children[0].name = label;\r\n        this.groupPanel.addControl(_selector);\r\n        this.selectors.push(_selector);\r\n\r\n        if (this.groupPanel.parent && this.groupPanel.parent.parent) {\r\n            button.color = (<SelectionPanel>this.groupPanel.parent.parent).buttonColor;\r\n            button.background = (<SelectionPanel>this.groupPanel.parent.parent).buttonBackground;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _setSelectorLabel(selectorNb: number, label: string) {\r\n        this.selectors[selectorNb].children[0].name = label;\r\n        (<TextBlock>this.selectors[selectorNb].children[0]).text =\r\n            label + \": \" + (<Slider>this.selectors[selectorNb].children[1]).value + \" \" + this.selectors[selectorNb].children[1].name;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _setSelectorLabelColor(selectorNb: number, color: string) {\r\n        (<TextBlock>this.selectors[selectorNb].children[0]).color = color;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _setSelectorButtonColor(selectorNb: number, color: string) {\r\n        this.selectors[selectorNb].children[1].color = color;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _setSelectorButtonBackground(selectorNb: number, color: string) {\r\n        (<Slider>this.selectors[selectorNb].children[1]).background = color;\r\n    }\r\n}\r\n\r\n/** Class used to hold the controls for the checkboxes, radio buttons and sliders\r\n * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/selector\r\n */\r\nexport class SelectionPanel extends Rectangle {\r\n    private _panel: StackPanel;\r\n    private _buttonColor: string = \"#364249\";\r\n    private _buttonBackground: string = \"#CCCCCC\";\r\n    private _headerColor: string = \"black\";\r\n    private _barColor: string = \"white\";\r\n    private _barHeight: string = \"2px\";\r\n    private _spacerHeight: string = \"20px\";\r\n    private _labelColor: string;\r\n    private _groups: SelectorGroup[];\r\n    private _bars: any[] = new Array();\r\n\r\n    /**\r\n     * Creates a new SelectionPanel\r\n     * @param name of SelectionPanel\r\n     * @param groups is an array of SelectionGroups\r\n     */\r\n    constructor(\r\n        /** name of SelectionPanel */\r\n        public name: string,\r\n        /** an array of SelectionGroups */\r\n        public groups: SelectorGroup[] = []\r\n    ) {\r\n        super(name);\r\n        this._groups = groups;\r\n        this.thickness = 2;\r\n        this._panel = new StackPanel();\r\n        this._panel.verticalAlignment = Control.VERTICAL_ALIGNMENT_TOP;\r\n        this._panel.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        this._panel.top = 5;\r\n        this._panel.left = 5;\r\n        this._panel.width = 0.95;\r\n        if (groups.length > 0) {\r\n            for (let i = 0; i < groups.length - 1; i++) {\r\n                this._panel.addControl(groups[i].groupPanel);\r\n                this._addSpacer();\r\n            }\r\n            this._panel.addControl(groups[groups.length - 1].groupPanel);\r\n        }\r\n        this.addControl(this._panel);\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"SelectionPanel\";\r\n    }\r\n\r\n    /** Gets the (stack) panel of the SelectionPanel  */\r\n    public get panel(): StackPanel {\r\n        return this._panel;\r\n    }\r\n\r\n    /** Gets or sets the headerColor */\r\n    public get headerColor(): string {\r\n        return this._headerColor;\r\n    }\r\n\r\n    public set headerColor(color: string) {\r\n        if (this._headerColor === color) {\r\n            return;\r\n        }\r\n        this._headerColor = color;\r\n        this._setHeaderColor();\r\n    }\r\n\r\n    private _setHeaderColor() {\r\n        for (let i = 0; i < this._groups.length; i++) {\r\n            this._groups[i].groupPanel.children[0].color = this._headerColor;\r\n        }\r\n    }\r\n\r\n    /** Gets or sets the button color */\r\n    public get buttonColor(): string {\r\n        return this._buttonColor;\r\n    }\r\n\r\n    public set buttonColor(color: string) {\r\n        if (this._buttonColor === color) {\r\n            return;\r\n        }\r\n\r\n        this._buttonColor = color;\r\n        this._setbuttonColor();\r\n    }\r\n\r\n    private _setbuttonColor() {\r\n        for (let i = 0; i < this._groups.length; i++) {\r\n            for (let j = 0; j < this._groups[i].selectors.length; j++) {\r\n                (<CheckboxGroup | RadioGroup | SliderGroup>this._groups[i])._setSelectorButtonColor(j, this._buttonColor);\r\n            }\r\n        }\r\n    }\r\n\r\n    /** Gets or sets the label color */\r\n    public get labelColor(): string {\r\n        return this._labelColor;\r\n    }\r\n\r\n    public set labelColor(color: string) {\r\n        if (this._labelColor === color) {\r\n            return;\r\n        }\r\n        this._labelColor = color;\r\n        this._setLabelColor();\r\n    }\r\n\r\n    private _setLabelColor() {\r\n        for (let i = 0; i < this._groups.length; i++) {\r\n            for (let j = 0; j < this._groups[i].selectors.length; j++) {\r\n                (<CheckboxGroup | RadioGroup | SliderGroup>this._groups[i])._setSelectorLabelColor(j, this._labelColor);\r\n            }\r\n        }\r\n    }\r\n\r\n    /** Gets or sets the button background */\r\n    public get buttonBackground(): string {\r\n        return this._buttonBackground;\r\n    }\r\n\r\n    public set buttonBackground(color: string) {\r\n        if (this._buttonBackground === color) {\r\n            return;\r\n        }\r\n\r\n        this._buttonBackground = color;\r\n        this._setButtonBackground();\r\n    }\r\n\r\n    private _setButtonBackground() {\r\n        for (let i = 0; i < this._groups.length; i++) {\r\n            for (let j = 0; j < this._groups[i].selectors.length; j++) {\r\n                (<CheckboxGroup | RadioGroup | SliderGroup>this._groups[i])._setSelectorButtonBackground(j, this._buttonBackground);\r\n            }\r\n        }\r\n    }\r\n\r\n    /** Gets or sets the color of separator bar */\r\n    public get barColor(): string {\r\n        return this._barColor;\r\n    }\r\n\r\n    public set barColor(color: string) {\r\n        if (this._barColor === color) {\r\n            return;\r\n        }\r\n\r\n        this._barColor = color;\r\n        this._setBarColor();\r\n    }\r\n\r\n    private _setBarColor() {\r\n        for (let i = 0; i < this._bars.length; i++) {\r\n            this._bars[i].children[0].background = this._barColor;\r\n        }\r\n    }\r\n\r\n    /** Gets or sets the height of separator bar */\r\n    public get barHeight(): string {\r\n        return this._barHeight;\r\n    }\r\n\r\n    public set barHeight(value: string) {\r\n        if (this._barHeight === value) {\r\n            return;\r\n        }\r\n\r\n        this._barHeight = value;\r\n        this._setBarHeight();\r\n    }\r\n\r\n    private _setBarHeight() {\r\n        for (let i = 0; i < this._bars.length; i++) {\r\n            this._bars[i].children[0].height = this._barHeight;\r\n        }\r\n    }\r\n\r\n    /** Gets or sets the height of spacers*/\r\n    public get spacerHeight(): string {\r\n        return this._spacerHeight;\r\n    }\r\n\r\n    public set spacerHeight(value: string) {\r\n        if (this._spacerHeight === value) {\r\n            return;\r\n        }\r\n\r\n        this._spacerHeight = value;\r\n        this._setSpacerHeight();\r\n    }\r\n\r\n    private _setSpacerHeight() {\r\n        for (let i = 0; i < this._bars.length; i++) {\r\n            this._bars[i].height = this._spacerHeight;\r\n        }\r\n    }\r\n\r\n    /** Adds a bar between groups */\r\n    private _addSpacer(): void {\r\n        const separator = new Container();\r\n        separator.width = 1;\r\n        separator.height = this._spacerHeight;\r\n        separator.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n\r\n        const bar = new Rectangle();\r\n        bar.width = 1;\r\n        bar.height = this._barHeight;\r\n        bar.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        bar.verticalAlignment = Control.VERTICAL_ALIGNMENT_CENTER;\r\n        bar.background = this._barColor;\r\n        bar.color = \"transparent\";\r\n        separator.addControl(bar);\r\n\r\n        this._panel.addControl(separator);\r\n        this._bars.push(separator);\r\n    }\r\n\r\n    /** Add a group to the selection panel\r\n     * @param group is the selector group to add\r\n     */\r\n    public addGroup(group: SelectorGroup): void {\r\n        if (this._groups.length > 0) {\r\n            this._addSpacer();\r\n        }\r\n        this._panel.addControl(group.groupPanel);\r\n        this._groups.push(group);\r\n        group.groupPanel.children[0].color = this._headerColor;\r\n        for (let j = 0; j < group.selectors.length; j++) {\r\n            (<CheckboxGroup | RadioGroup | SliderGroup>group)._setSelectorButtonColor(j, this._buttonColor);\r\n            (<CheckboxGroup | RadioGroup | SliderGroup>group)._setSelectorButtonBackground(j, this._buttonBackground);\r\n        }\r\n    }\r\n\r\n    /** Remove the group from the given position\r\n     * @param groupNb is the position of the group in the list\r\n     */\r\n    public removeGroup(groupNb: number): void {\r\n        if (groupNb < 0 || groupNb >= this._groups.length) {\r\n            return;\r\n        }\r\n        const group = this._groups[groupNb];\r\n        this._panel.removeControl(group.groupPanel);\r\n        this._groups.splice(groupNb, 1);\r\n        if (groupNb < this._bars.length) {\r\n            this._panel.removeControl(this._bars[groupNb]);\r\n            this._bars.splice(groupNb, 1);\r\n        }\r\n    }\r\n\r\n    /** Change a group header label\r\n     * @param label is the new group header label\r\n     * @param groupNb is the number of the group to relabel\r\n     * */\r\n    public setHeaderName(label: string, groupNb: number) {\r\n        if (groupNb < 0 || groupNb >= this._groups.length) {\r\n            return;\r\n        }\r\n        const group = this._groups[groupNb];\r\n        (<TextBlock>group.groupPanel.children[0]).text = label;\r\n    }\r\n\r\n    /** Change selector label to the one given\r\n     * @param label is the new selector label\r\n     * @param groupNb is the number of the groupcontaining the selector\r\n     * @param selectorNb is the number of the selector within a group to relabel\r\n     * */\r\n    public relabel(label: string, groupNb: number, selectorNb: number): void {\r\n        if (groupNb < 0 || groupNb >= this._groups.length) {\r\n            return;\r\n        }\r\n        const group = this._groups[groupNb];\r\n        if (selectorNb < 0 || selectorNb >= group.selectors.length) {\r\n            return;\r\n        }\r\n        (<CheckboxGroup | RadioGroup | SliderGroup>group)._setSelectorLabel(selectorNb, label);\r\n    }\r\n\r\n    /** For a given group position remove the selector at the given position\r\n     * @param groupNb is the number of the group to remove the selector from\r\n     * @param selectorNb is the number of the selector within the group\r\n     */\r\n    public removeFromGroupSelector(groupNb: number, selectorNb: number): void {\r\n        if (groupNb < 0 || groupNb >= this._groups.length) {\r\n            return;\r\n        }\r\n        const group = this._groups[groupNb];\r\n        if (selectorNb < 0 || selectorNb >= group.selectors.length) {\r\n            return;\r\n        }\r\n        group.removeSelector(selectorNb);\r\n    }\r\n\r\n    /** For a given group position of correct type add a checkbox button\r\n     * @param groupNb is the number of the group to remove the selector from\r\n     * @param label is the label for the selector\r\n     * @param func is the function called when the Selector is checked\r\n     * @param checked is true when Selector is checked\r\n     */\r\n    public addToGroupCheckbox(groupNb: number, label: string, func = () => {}, checked: boolean = false): void {\r\n        if (groupNb < 0 || groupNb >= this._groups.length) {\r\n            return;\r\n        }\r\n        const group = this._groups[groupNb];\r\n        (<CheckboxGroup>group).addCheckbox(label, func, checked);\r\n    }\r\n\r\n    /** For a given group position of correct type add a radio button\r\n     * @param groupNb is the number of the group to remove the selector from\r\n     * @param label is the label for the selector\r\n     * @param func is the function called when the Selector is checked\r\n     * @param checked is true when Selector is checked\r\n     */\r\n    public addToGroupRadio(groupNb: number, label: string, func = () => {}, checked: boolean = false): void {\r\n        if (groupNb < 0 || groupNb >= this._groups.length) {\r\n            return;\r\n        }\r\n        const group = this._groups[groupNb];\r\n        (<RadioGroup>group).addRadio(label, func, checked);\r\n    }\r\n\r\n    /**\r\n     * For a given slider group add a slider\r\n     * @param groupNb is the number of the group to add the slider to\r\n     * @param label is the label for the Slider\r\n     * @param func is the function called when the Slider moves\r\n     * @param unit is a string describing the units used, eg degrees or metres\r\n     * @param min is the minimum value for the Slider\r\n     * @param max is the maximum value for the Slider\r\n     * @param value is the start value for the Slider between min and max\r\n     * @param onVal is the function used to format the value displayed, eg radians to degrees\r\n     */\r\n    public addToGroupSlider(\r\n        groupNb: number,\r\n        label: string,\r\n        func = () => {},\r\n        unit: string = \"Units\",\r\n        min: number = 0,\r\n        max: number = 0,\r\n        value: number = 0,\r\n        onVal = (v: number) => {\r\n            return v | 0;\r\n        }\r\n    ): void {\r\n        if (groupNb < 0 || groupNb >= this._groups.length) {\r\n            return;\r\n        }\r\n        const group = this._groups[groupNb];\r\n        (<SliderGroup>group).addSlider(label, func, unit, min, max, value, onVal);\r\n    }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}