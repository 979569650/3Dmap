{"ast":null,"code":"import { RegisterClass } from \"../../../../Misc/typeStore.js\";\nimport { NodeMaterialBlock } from \"../../nodeMaterialBlock.js\";\nimport { NodeMaterialBlockConnectionPointTypes } from \"../../Enums/nodeMaterialBlockConnectionPointTypes.js\";\nimport { NodeMaterialBlockTargets } from \"../../Enums/nodeMaterialBlockTargets.js\";\n/**\n * Defines a block used to receive a value from a teleport entry point\n */\nexport class NodeMaterialTeleportOutBlock extends NodeMaterialBlock {\n  /**\n   * Create a new TeleportOutBlock\n   * @param name defines the block name\n   */\n  constructor(name) {\n    super(name, NodeMaterialBlockTargets.Neutral);\n    /** @internal */\n    this._entryPoint = null;\n    /** @internal */\n    this._tempEntryPointUniqueId = null;\n    this.registerOutput(\"output\", NodeMaterialBlockConnectionPointTypes.BasedOnInput);\n  }\n  /**\n   * Gets the entry point\n   */\n  get entryPoint() {\n    return this._entryPoint;\n  }\n  /**\n   * Gets the current class name\n   * @returns the class name\n   */\n  getClassName() {\n    return \"NodeMaterialTeleportOutBlock\";\n  }\n  /**\n   * Gets the output component\n   */\n  get output() {\n    return this._outputs[0];\n  }\n  /**\n   * Gets or sets the target of the block\n   */\n  get target() {\n    return this._entryPoint ? this._entryPoint.target : this._target;\n  }\n  set target(value) {\n    if ((this._target & value) !== 0) {\n      return;\n    }\n    this._target = value;\n  }\n  /** Detach from entry point */\n  detach() {\n    if (!this._entryPoint) {\n      return;\n    }\n    this._entryPoint.detachFromEndpoint(this);\n  }\n  _buildBlock(state) {\n    super._buildBlock(state);\n    if (this.entryPoint) {\n      state.compilationString += this._declareOutput(this.output, state) + ` = ${this.entryPoint.input.associatedVariableName};\\n`;\n    }\n  }\n  /**\n   * Clone the current block to a new identical block\n   * @param scene defines the hosting scene\n   * @param rootUrl defines the root URL to use to load textures and relative dependencies\n   * @returns a copy of the current block\n   */\n  clone(scene, rootUrl = \"\") {\n    const clone = super.clone(scene, rootUrl);\n    if (this.entryPoint) {\n      this.entryPoint.attachToEndpoint(clone);\n    }\n    return clone;\n  }\n  _customBuildStep(state, activeBlocks) {\n    if (this.entryPoint) {\n      this.entryPoint.build(state, activeBlocks);\n    }\n  }\n  _dumpCode(uniqueNames, alreadyDumped) {\n    let codeString = \"\";\n    if (this.entryPoint) {\n      if (alreadyDumped.indexOf(this.entryPoint) === -1) {\n        codeString += this.entryPoint._dumpCode(uniqueNames, alreadyDumped);\n      }\n    }\n    return codeString + super._dumpCode(uniqueNames, alreadyDumped);\n  }\n  _dumpCodeForOutputConnections(alreadyDumped) {\n    let codeString = super._dumpCodeForOutputConnections(alreadyDumped);\n    if (this.entryPoint) {\n      codeString += this.entryPoint._dumpCodeForOutputConnections(alreadyDumped);\n    }\n    return codeString;\n  }\n  _dumpPropertiesCode() {\n    let codeString = super._dumpPropertiesCode();\n    if (this.entryPoint) {\n      codeString += `${this.entryPoint._codeVariableName}.attachToEndpoint(${this._codeVariableName});\\n`;\n    }\n    return codeString;\n  }\n  /**\n   * Serializes this block in a JSON representation\n   * @returns the serialized block object\n   */\n  serialize() {\n    var _a, _b;\n    const serializationObject = super.serialize();\n    serializationObject.entryPoint = (_b = (_a = this.entryPoint) === null || _a === void 0 ? void 0 : _a.uniqueId) !== null && _b !== void 0 ? _b : \"\";\n    return serializationObject;\n  }\n  _deserialize(serializationObject, scene, rootUrl) {\n    super._deserialize(serializationObject, scene, rootUrl);\n    this._tempEntryPointUniqueId = serializationObject.entryPoint;\n  }\n}\nRegisterClass(\"BABYLON.NodeMaterialTeleportOutBlock\", NodeMaterialTeleportOutBlock);","map":{"version":3,"names":["RegisterClass","NodeMaterialBlock","NodeMaterialBlockConnectionPointTypes","NodeMaterialBlockTargets","NodeMaterialTeleportOutBlock","constructor","name","Neutral","_entryPoint","_tempEntryPointUniqueId","registerOutput","BasedOnInput","entryPoint","getClassName","output","_outputs","target","_target","value","detach","detachFromEndpoint","_buildBlock","state","compilationString","_declareOutput","input","associatedVariableName","clone","scene","rootUrl","attachToEndpoint","_customBuildStep","activeBlocks","build","_dumpCode","uniqueNames","alreadyDumped","codeString","indexOf","_dumpCodeForOutputConnections","_dumpPropertiesCode","_codeVariableName","serialize","serializationObject","_b","_a","uniqueId","_deserialize"],"sources":["../../../../../../../dev/core/src/Materials/Node/Blocks/Teleport/teleportOutBlock.ts"],"sourcesContent":["import type { Nullable } from \"../../../../types\";\r\nimport { RegisterClass } from \"../../../../Misc/typeStore\";\r\nimport type { NodeMaterialTeleportInBlock } from \"./teleportInBlock\";\r\nimport { NodeMaterialBlock } from \"../../nodeMaterialBlock\";\r\nimport { NodeMaterialBlockConnectionPointTypes } from \"../../Enums/nodeMaterialBlockConnectionPointTypes\";\r\nimport type { NodeMaterialConnectionPoint } from \"../../nodeMaterialBlockConnectionPoint\";\r\nimport type { Scene } from \"../../../../scene\";\r\nimport { NodeMaterialBlockTargets } from \"../../Enums/nodeMaterialBlockTargets\";\r\nimport type { NodeMaterialBuildState } from \"../../nodeMaterialBuildState\";\r\n\r\n/**\r\n * Defines a block used to receive a value from a teleport entry point\r\n */\r\nexport class NodeMaterialTeleportOutBlock extends NodeMaterialBlock {\r\n    /** @internal */\r\n    public _entryPoint: Nullable<NodeMaterialTeleportInBlock> = null;\r\n    /** @internal */\r\n    public _tempEntryPointUniqueId: Nullable<number> = null;\r\n\r\n    /**\r\n     * Create a new TeleportOutBlock\r\n     * @param name defines the block name\r\n     */\r\n    public constructor(name: string) {\r\n        super(name, NodeMaterialBlockTargets.Neutral);\r\n\r\n        this.registerOutput(\"output\", NodeMaterialBlockConnectionPointTypes.BasedOnInput);\r\n    }\r\n\r\n    /**\r\n     * Gets the entry point\r\n     */\r\n    public get entryPoint() {\r\n        return this._entryPoint;\r\n    }\r\n\r\n    /**\r\n     * Gets the current class name\r\n     * @returns the class name\r\n     */\r\n    public getClassName() {\r\n        return \"NodeMaterialTeleportOutBlock\";\r\n    }\r\n\r\n    /**\r\n     * Gets the output component\r\n     */\r\n    public get output(): NodeMaterialConnectionPoint {\r\n        return this._outputs[0];\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the target of the block\r\n     */\r\n    public get target() {\r\n        return this._entryPoint ? this._entryPoint.target : this._target;\r\n    }\r\n\r\n    public set target(value: NodeMaterialBlockTargets) {\r\n        if ((this._target & value) !== 0) {\r\n            return;\r\n        }\r\n        this._target = value;\r\n    }\r\n\r\n    /** Detach from entry point */\r\n    public detach() {\r\n        if (!this._entryPoint) {\r\n            return;\r\n        }\r\n\r\n        this._entryPoint.detachFromEndpoint(this);\r\n    }\r\n\r\n    protected _buildBlock(state: NodeMaterialBuildState) {\r\n        super._buildBlock(state);\r\n\r\n        if (this.entryPoint) {\r\n            state.compilationString += this._declareOutput(this.output, state) + ` = ${this.entryPoint.input.associatedVariableName};\\n`;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Clone the current block to a new identical block\r\n     * @param scene defines the hosting scene\r\n     * @param rootUrl defines the root URL to use to load textures and relative dependencies\r\n     * @returns a copy of the current block\r\n     */\r\n    public clone(scene: Scene, rootUrl: string = \"\") {\r\n        const clone = super.clone(scene, rootUrl);\r\n\r\n        if (this.entryPoint) {\r\n            this.entryPoint.attachToEndpoint(clone as NodeMaterialTeleportOutBlock);\r\n        }\r\n\r\n        return clone;\r\n    }\r\n\r\n    protected _customBuildStep(state: NodeMaterialBuildState, activeBlocks: NodeMaterialBlock[]): void {\r\n        if (this.entryPoint) {\r\n            this.entryPoint.build(state, activeBlocks);\r\n        }\r\n    }\r\n\r\n    public _dumpCode(uniqueNames: string[], alreadyDumped: NodeMaterialBlock[]) {\r\n        let codeString: string = \"\";\r\n        if (this.entryPoint) {\r\n            if (alreadyDumped.indexOf(this.entryPoint) === -1) {\r\n                codeString += this.entryPoint._dumpCode(uniqueNames, alreadyDumped);\r\n            }\r\n        }\r\n\r\n        return codeString + super._dumpCode(uniqueNames, alreadyDumped);\r\n    }\r\n\r\n    public _dumpCodeForOutputConnections(alreadyDumped: NodeMaterialBlock[]) {\r\n        let codeString = super._dumpCodeForOutputConnections(alreadyDumped);\r\n\r\n        if (this.entryPoint) {\r\n            codeString += this.entryPoint._dumpCodeForOutputConnections(alreadyDumped);\r\n        }\r\n\r\n        return codeString;\r\n    }\r\n\r\n    protected _dumpPropertiesCode() {\r\n        let codeString = super._dumpPropertiesCode();\r\n\r\n        if (this.entryPoint) {\r\n            codeString += `${this.entryPoint._codeVariableName}.attachToEndpoint(${this._codeVariableName});\\n`;\r\n        }\r\n        return codeString;\r\n    }\r\n\r\n    /**\r\n     * Serializes this block in a JSON representation\r\n     * @returns the serialized block object\r\n     */\r\n    public serialize(): any {\r\n        const serializationObject = super.serialize();\r\n\r\n        serializationObject.entryPoint = this.entryPoint?.uniqueId ?? \"\";\r\n\r\n        return serializationObject;\r\n    }\r\n\r\n    public _deserialize(serializationObject: any, scene: Scene, rootUrl: string) {\r\n        super._deserialize(serializationObject, scene, rootUrl);\r\n\r\n        this._tempEntryPointUniqueId = serializationObject.entryPoint;\r\n    }\r\n}\r\n\r\nRegisterClass(\"BABYLON.NodeMaterialTeleportOutBlock\", NodeMaterialTeleportOutBlock);\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}