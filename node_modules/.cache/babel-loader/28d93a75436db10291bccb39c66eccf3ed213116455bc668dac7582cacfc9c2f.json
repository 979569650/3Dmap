{"ast":null,"code":"import { Observable } from \"../Misc/observable.js\";\nimport { Logger } from \"../Misc/logger.js\";\nimport { Engine } from \"../Engines/engine.js\";\nimport { IsWindowObjectExist } from \"../Misc/domManagement.js\";\n// Sets the default audio engine to Babylon.js\nEngine.AudioEngineFactory = (hostElement, audioContext, audioDestination) => {\n  return new AudioEngine(hostElement, audioContext, audioDestination);\n};\n/**\n * This represents the default audio engine used in babylon.\n * It is responsible to play, synchronize and analyse sounds throughout the  application.\n * @see https://doc.babylonjs.com/features/featuresDeepDive/audio/playingSoundsMusic\n */\nexport class AudioEngine {\n  /**\n   * Gets the current AudioContext if available.\n   */\n  get audioContext() {\n    if (!this._audioContextInitialized) {\n      this._initializeAudioContext();\n    }\n    return this._audioContext;\n  }\n  /**\n   * Instantiates a new audio engine.\n   *\n   * There should be only one per page as some browsers restrict the number\n   * of audio contexts you can create.\n   * @param hostElement defines the host element where to display the mute icon if necessary\n   * @param audioContext defines the audio context to be used by the audio engine\n   * @param audioDestination defines the audio destination node to be used by audio engine\n   */\n  constructor(hostElement = null, audioContext = null, audioDestination = null) {\n    this._audioContext = null;\n    this._audioContextInitialized = false;\n    this._muteButton = null;\n    this._audioDestination = null;\n    /**\n     * Gets whether the current host supports Web Audio and thus could create AudioContexts.\n     */\n    this.canUseWebAudio = false;\n    /**\n     * Defines if Babylon should emit a warning if WebAudio is not supported.\n     * @ignoreNaming\n     */\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    this.WarnedWebAudioUnsupported = false;\n    /**\n     * Gets whether or not mp3 are supported by your browser.\n     */\n    this.isMP3supported = false;\n    /**\n     * Gets whether or not ogg are supported by your browser.\n     */\n    this.isOGGsupported = false;\n    /**\n     * Gets whether audio has been unlocked on the device.\n     * Some Browsers have strong restrictions about Audio and won't autoplay unless\n     * a user interaction has happened.\n     */\n    this.unlocked = false;\n    /**\n     * Defines if the audio engine relies on a custom unlocked button.\n     * In this case, the embedded button will not be displayed.\n     */\n    this.useCustomUnlockedButton = false;\n    /**\n     * Event raised when audio has been unlocked on the browser.\n     */\n    this.onAudioUnlockedObservable = new Observable();\n    /**\n     * Event raised when audio has been locked on the browser.\n     */\n    this.onAudioLockedObservable = new Observable();\n    this._tryToRun = false;\n    this._onResize = () => {\n      this._moveButtonToTopLeft();\n    };\n    if (!IsWindowObjectExist()) {\n      return;\n    }\n    if (typeof window.AudioContext !== \"undefined\") {\n      this.canUseWebAudio = true;\n    }\n    const audioElem = document.createElement(\"audio\");\n    this._hostElement = hostElement;\n    this._audioContext = audioContext;\n    this._audioDestination = audioDestination;\n    try {\n      if (audioElem && !!audioElem.canPlayType && (audioElem.canPlayType('audio/mpeg; codecs=\"mp3\"').replace(/^no$/, \"\") || audioElem.canPlayType(\"audio/mp3\").replace(/^no$/, \"\"))) {\n        this.isMP3supported = true;\n      }\n    } catch (e) {\n      // protect error during capability check.\n    }\n    try {\n      if (audioElem && !!audioElem.canPlayType && audioElem.canPlayType('audio/ogg; codecs=\"vorbis\"').replace(/^no$/, \"\")) {\n        this.isOGGsupported = true;\n      }\n    } catch (e) {\n      // protect error during capability check.\n    }\n  }\n  /**\n   * Flags the audio engine in Locked state.\n   * This happens due to new browser policies preventing audio to autoplay.\n   */\n  lock() {\n    this._triggerSuspendedState();\n  }\n  /**\n   * Unlocks the audio engine once a user action has been done on the dom.\n   * This is helpful to resume play once browser policies have been satisfied.\n   */\n  unlock() {\n    var _a, _b;\n    if (((_a = this._audioContext) === null || _a === void 0 ? void 0 : _a.state) === \"running\") {\n      this._hideMuteButton();\n      return;\n    }\n    // On iOS, if the audio context resume request was sent from an event other than a `click` event, then\n    // the resume promise will never resolve and the only way to get the audio context unstuck is to\n    // suspend it and make another resume request.\n    if (this._tryToRun) {\n      (_b = this._audioContext) === null || _b === void 0 ? void 0 : _b.suspend().then(() => {\n        this._tryToRun = false;\n        this._triggerRunningState();\n      });\n    } else {\n      this._triggerRunningState();\n    }\n  }\n  _resumeAudioContext() {\n    var _a;\n    if ((_a = this._audioContext) === null || _a === void 0 ? void 0 : _a.resume) {\n      return this._audioContext.resume();\n    }\n    return Promise.resolve();\n  }\n  _initializeAudioContext() {\n    try {\n      if (this.canUseWebAudio) {\n        if (!this._audioContext) {\n          this._audioContext = new AudioContext();\n        }\n        // create a global volume gain node\n        this.masterGain = this._audioContext.createGain();\n        this.masterGain.gain.value = 1;\n        if (!this._audioDestination) {\n          this._audioDestination = this._audioContext.destination;\n        }\n        this.masterGain.connect(this._audioDestination);\n        this._audioContextInitialized = true;\n        if (this._audioContext.state === \"running\") {\n          // Do not wait for the promise to unlock.\n          this._triggerRunningState();\n        }\n      }\n    } catch (e) {\n      this.canUseWebAudio = false;\n      Logger.Error(\"Web Audio: \" + e.message);\n    }\n  }\n  _triggerRunningState() {\n    if (this._tryToRun) {\n      return;\n    }\n    this._tryToRun = true;\n    this._resumeAudioContext().then(() => {\n      this._tryToRun = false;\n      if (this._muteButton) {\n        this._hideMuteButton();\n      }\n      // Notify users that the audio stack is unlocked/unmuted\n      this.unlocked = true;\n      this.onAudioUnlockedObservable.notifyObservers(this);\n    }).catch(() => {\n      this._tryToRun = false;\n      this.unlocked = false;\n    });\n  }\n  _triggerSuspendedState() {\n    this.unlocked = false;\n    this.onAudioLockedObservable.notifyObservers(this);\n    this._displayMuteButton();\n  }\n  _displayMuteButton() {\n    if (this.useCustomUnlockedButton || this._muteButton) {\n      return;\n    }\n    this._muteButton = document.createElement(\"BUTTON\");\n    this._muteButton.className = \"babylonUnmuteIcon\";\n    this._muteButton.id = \"babylonUnmuteIconBtn\";\n    this._muteButton.title = \"Unmute\";\n    const imageUrl = !window.SVGSVGElement ? \"https://cdn.babylonjs.com/Assets/audio.png\" : \"data:image/svg+xml;charset=UTF-8,%3Csvg%20version%3D%221.1%22%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%20width%3D%2239%22%20height%3D%2232%22%20viewBox%3D%220%200%2039%2032%22%3E%3Cpath%20fill%3D%22white%22%20d%3D%22M9.625%2018.938l-0.031%200.016h-4.953q-0.016%200-0.031-0.016v-12.453q0-0.016%200.031-0.016h4.953q0.031%200%200.031%200.016v12.453zM12.125%207.688l8.719-8.703v27.453l-8.719-8.719-0.016-0.047v-9.938zM23.359%207.875l1.406-1.406%204.219%204.203%204.203-4.203%201.422%201.406-4.219%204.219%204.219%204.203-1.484%201.359-4.141-4.156-4.219%204.219-1.406-1.422%204.219-4.203z%22%3E%3C%2Fpath%3E%3C%2Fsvg%3E\";\n    const css = \".babylonUnmuteIcon { position: absolute; left: 20px; top: 20px; height: 40px; width: 60px; background-color: rgba(51,51,51,0.7); background-image: url(\" + imageUrl + \");  background-size: 80%; background-repeat:no-repeat; background-position: center; background-position-y: 4px; border: none; outline: none; transition: transform 0.125s ease-out; cursor: pointer; z-index: 9999; } .babylonUnmuteIcon:hover { transform: scale(1.05) } .babylonUnmuteIcon:active { background-color: rgba(51,51,51,1) }\";\n    const style = document.createElement(\"style\");\n    style.appendChild(document.createTextNode(css));\n    document.getElementsByTagName(\"head\")[0].appendChild(style);\n    document.body.appendChild(this._muteButton);\n    this._moveButtonToTopLeft();\n    this._muteButton.addEventListener(\"touchend\", () => {\n      this._triggerRunningState();\n    }, true);\n    this._muteButton.addEventListener(\"click\", () => {\n      this.unlock();\n    }, true);\n    window.addEventListener(\"resize\", this._onResize);\n  }\n  _moveButtonToTopLeft() {\n    if (this._hostElement && this._muteButton) {\n      this._muteButton.style.top = this._hostElement.offsetTop + 20 + \"px\";\n      this._muteButton.style.left = this._hostElement.offsetLeft + 20 + \"px\";\n    }\n  }\n  _hideMuteButton() {\n    if (this._muteButton) {\n      document.body.removeChild(this._muteButton);\n      this._muteButton = null;\n    }\n  }\n  /**\n   * Destroy and release the resources associated with the audio context.\n   */\n  dispose() {\n    if (this.canUseWebAudio && this._audioContextInitialized) {\n      if (this._connectedAnalyser && this._audioContext) {\n        this._connectedAnalyser.stopDebugCanvas();\n        this._connectedAnalyser.dispose();\n        this.masterGain.disconnect();\n        this.masterGain.connect(this._audioContext.destination);\n        this._connectedAnalyser = null;\n      }\n      this.masterGain.gain.value = 1;\n    }\n    this.WarnedWebAudioUnsupported = false;\n    this._hideMuteButton();\n    window.removeEventListener(\"resize\", this._onResize);\n    this.onAudioUnlockedObservable.clear();\n    this.onAudioLockedObservable.clear();\n  }\n  /**\n   * Gets the global volume sets on the master gain.\n   * @returns the global volume if set or -1 otherwise\n   */\n  getGlobalVolume() {\n    if (this.canUseWebAudio && this._audioContextInitialized) {\n      return this.masterGain.gain.value;\n    } else {\n      return -1;\n    }\n  }\n  /**\n   * Sets the global volume of your experience (sets on the master gain).\n   * @param newVolume Defines the new global volume of the application\n   */\n  setGlobalVolume(newVolume) {\n    if (this.canUseWebAudio && this._audioContextInitialized) {\n      this.masterGain.gain.value = newVolume;\n    }\n  }\n  /**\n   * Connect the audio engine to an audio analyser allowing some amazing\n   * synchronization between the sounds/music and your visualization (VuMeter for instance).\n   * @see https://doc.babylonjs.com/features/featuresDeepDive/audio/playingSoundsMusic#using-the-analyser\n   * @param analyser The analyser to connect to the engine\n   */\n  connectToAnalyser(analyser) {\n    if (this._connectedAnalyser) {\n      this._connectedAnalyser.stopDebugCanvas();\n    }\n    if (this.canUseWebAudio && this._audioContextInitialized && this._audioContext) {\n      this._connectedAnalyser = analyser;\n      this.masterGain.disconnect();\n      this._connectedAnalyser.connectAudioNodes(this.masterGain, this._audioContext.destination);\n    }\n  }\n}","map":{"version":3,"names":["Observable","Logger","Engine","IsWindowObjectExist","AudioEngineFactory","hostElement","audioContext","audioDestination","AudioEngine","_audioContextInitialized","_initializeAudioContext","_audioContext","constructor","_muteButton","_audioDestination","canUseWebAudio","WarnedWebAudioUnsupported","isMP3supported","isOGGsupported","unlocked","useCustomUnlockedButton","onAudioUnlockedObservable","onAudioLockedObservable","_tryToRun","_onResize","_moveButtonToTopLeft","window","AudioContext","audioElem","document","createElement","_hostElement","canPlayType","replace","e","lock","_triggerSuspendedState","unlock","_a","state","_hideMuteButton","_b","suspend","then","_triggerRunningState","_resumeAudioContext","resume","Promise","resolve","masterGain","createGain","gain","value","destination","connect","Error","message","notifyObservers","catch","_displayMuteButton","className","id","title","imageUrl","SVGSVGElement","css","style","appendChild","createTextNode","getElementsByTagName","body","addEventListener","top","offsetTop","left","offsetLeft","removeChild","dispose","_connectedAnalyser","stopDebugCanvas","disconnect","removeEventListener","clear","getGlobalVolume","setGlobalVolume","newVolume","connectToAnalyser","analyser","connectAudioNodes"],"sources":["../../../../dev/core/src/Audio/audioEngine.ts"],"sourcesContent":["import type { Analyser } from \"./analyser\";\r\n\r\nimport type { Nullable } from \"../types\";\r\nimport { Observable } from \"../Misc/observable\";\r\nimport { Logger } from \"../Misc/logger\";\r\nimport { Engine } from \"../Engines/engine\";\r\nimport type { IAudioEngine } from \"./Interfaces/IAudioEngine\";\r\nimport { IsWindowObjectExist } from \"../Misc/domManagement\";\r\n\r\n// Sets the default audio engine to Babylon.js\r\nEngine.AudioEngineFactory = (\r\n    hostElement: Nullable<HTMLElement>,\r\n    audioContext: Nullable<AudioContext>,\r\n    audioDestination: Nullable<AudioDestinationNode | MediaStreamAudioDestinationNode>\r\n) => {\r\n    return new AudioEngine(hostElement, audioContext, audioDestination);\r\n};\r\n\r\n/**\r\n * This represents the default audio engine used in babylon.\r\n * It is responsible to play, synchronize and analyse sounds throughout the  application.\r\n * @see https://doc.babylonjs.com/features/featuresDeepDive/audio/playingSoundsMusic\r\n */\r\nexport class AudioEngine implements IAudioEngine {\r\n    private _audioContext: Nullable<AudioContext> = null;\r\n    private _audioContextInitialized = false;\r\n    private _muteButton: Nullable<HTMLButtonElement> = null;\r\n    private _hostElement: Nullable<HTMLElement>;\r\n    private _audioDestination: Nullable<AudioDestinationNode | MediaStreamAudioDestinationNode> = null;\r\n\r\n    /**\r\n     * Gets whether the current host supports Web Audio and thus could create AudioContexts.\r\n     */\r\n    public canUseWebAudio: boolean = false;\r\n\r\n    /**\r\n     * The master gain node defines the global audio volume of your audio engine.\r\n     */\r\n    public masterGain: GainNode;\r\n\r\n    /**\r\n     * Defines if Babylon should emit a warning if WebAudio is not supported.\r\n     * @ignoreNaming\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    public WarnedWebAudioUnsupported: boolean = false;\r\n\r\n    /**\r\n     * Gets whether or not mp3 are supported by your browser.\r\n     */\r\n    public isMP3supported: boolean = false;\r\n\r\n    /**\r\n     * Gets whether or not ogg are supported by your browser.\r\n     */\r\n    public isOGGsupported: boolean = false;\r\n\r\n    /**\r\n     * Gets whether audio has been unlocked on the device.\r\n     * Some Browsers have strong restrictions about Audio and won't autoplay unless\r\n     * a user interaction has happened.\r\n     */\r\n    public unlocked: boolean = false;\r\n\r\n    /**\r\n     * Defines if the audio engine relies on a custom unlocked button.\r\n     * In this case, the embedded button will not be displayed.\r\n     */\r\n    public useCustomUnlockedButton: boolean = false;\r\n\r\n    /**\r\n     * Event raised when audio has been unlocked on the browser.\r\n     */\r\n    public onAudioUnlockedObservable = new Observable<IAudioEngine>();\r\n\r\n    /**\r\n     * Event raised when audio has been locked on the browser.\r\n     */\r\n    public onAudioLockedObservable = new Observable<IAudioEngine>();\r\n\r\n    /**\r\n     * Gets the current AudioContext if available.\r\n     */\r\n    public get audioContext(): Nullable<AudioContext> {\r\n        if (!this._audioContextInitialized) {\r\n            this._initializeAudioContext();\r\n        }\r\n        return this._audioContext;\r\n    }\r\n\r\n    private _connectedAnalyser: Nullable<Analyser>;\r\n\r\n    /**\r\n     * Instantiates a new audio engine.\r\n     *\r\n     * There should be only one per page as some browsers restrict the number\r\n     * of audio contexts you can create.\r\n     * @param hostElement defines the host element where to display the mute icon if necessary\r\n     * @param audioContext defines the audio context to be used by the audio engine\r\n     * @param audioDestination defines the audio destination node to be used by audio engine\r\n     */\r\n    constructor(\r\n        hostElement: Nullable<HTMLElement> = null,\r\n        audioContext: Nullable<AudioContext> = null,\r\n        audioDestination: Nullable<AudioDestinationNode | MediaStreamAudioDestinationNode> = null\r\n    ) {\r\n        if (!IsWindowObjectExist()) {\r\n            return;\r\n        }\r\n        if (typeof window.AudioContext !== \"undefined\") {\r\n            this.canUseWebAudio = true;\r\n        }\r\n\r\n        const audioElem = document.createElement(\"audio\");\r\n        this._hostElement = hostElement;\r\n        this._audioContext = audioContext;\r\n        this._audioDestination = audioDestination;\r\n\r\n        try {\r\n            if (\r\n                audioElem &&\r\n                !!audioElem.canPlayType &&\r\n                (audioElem.canPlayType('audio/mpeg; codecs=\"mp3\"').replace(/^no$/, \"\") || audioElem.canPlayType(\"audio/mp3\").replace(/^no$/, \"\"))\r\n            ) {\r\n                this.isMP3supported = true;\r\n            }\r\n        } catch (e) {\r\n            // protect error during capability check.\r\n        }\r\n\r\n        try {\r\n            if (audioElem && !!audioElem.canPlayType && audioElem.canPlayType('audio/ogg; codecs=\"vorbis\"').replace(/^no$/, \"\")) {\r\n                this.isOGGsupported = true;\r\n            }\r\n        } catch (e) {\r\n            // protect error during capability check.\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Flags the audio engine in Locked state.\r\n     * This happens due to new browser policies preventing audio to autoplay.\r\n     */\r\n    public lock() {\r\n        this._triggerSuspendedState();\r\n    }\r\n\r\n    /**\r\n     * Unlocks the audio engine once a user action has been done on the dom.\r\n     * This is helpful to resume play once browser policies have been satisfied.\r\n     */\r\n    public unlock() {\r\n        if (this._audioContext?.state === \"running\") {\r\n            this._hideMuteButton();\r\n            return;\r\n        }\r\n\r\n        // On iOS, if the audio context resume request was sent from an event other than a `click` event, then\r\n        // the resume promise will never resolve and the only way to get the audio context unstuck is to\r\n        // suspend it and make another resume request.\r\n        if (this._tryToRun) {\r\n            this._audioContext?.suspend().then(() => {\r\n                this._tryToRun = false;\r\n                this._triggerRunningState();\r\n            });\r\n        } else {\r\n            this._triggerRunningState();\r\n        }\r\n    }\r\n\r\n    private _resumeAudioContext(): Promise<void> {\r\n        if (this._audioContext?.resume) {\r\n            return this._audioContext.resume();\r\n        }\r\n        return Promise.resolve();\r\n    }\r\n\r\n    private _initializeAudioContext() {\r\n        try {\r\n            if (this.canUseWebAudio) {\r\n                if (!this._audioContext) {\r\n                    this._audioContext = new AudioContext();\r\n                }\r\n                // create a global volume gain node\r\n                this.masterGain = this._audioContext.createGain();\r\n                this.masterGain.gain.value = 1;\r\n                if (!this._audioDestination) {\r\n                    this._audioDestination = this._audioContext.destination;\r\n                }\r\n                this.masterGain.connect(this._audioDestination);\r\n                this._audioContextInitialized = true;\r\n                if (this._audioContext.state === \"running\") {\r\n                    // Do not wait for the promise to unlock.\r\n                    this._triggerRunningState();\r\n                }\r\n            }\r\n        } catch (e) {\r\n            this.canUseWebAudio = false;\r\n            Logger.Error(\"Web Audio: \" + e.message);\r\n        }\r\n    }\r\n\r\n    private _tryToRun = false;\r\n    private _triggerRunningState() {\r\n        if (this._tryToRun) {\r\n            return;\r\n        }\r\n        this._tryToRun = true;\r\n\r\n        this._resumeAudioContext()\r\n            .then(() => {\r\n                this._tryToRun = false;\r\n                if (this._muteButton) {\r\n                    this._hideMuteButton();\r\n                }\r\n                // Notify users that the audio stack is unlocked/unmuted\r\n                this.unlocked = true;\r\n                this.onAudioUnlockedObservable.notifyObservers(this);\r\n            })\r\n            .catch(() => {\r\n                this._tryToRun = false;\r\n                this.unlocked = false;\r\n            });\r\n    }\r\n\r\n    private _triggerSuspendedState() {\r\n        this.unlocked = false;\r\n        this.onAudioLockedObservable.notifyObservers(this);\r\n        this._displayMuteButton();\r\n    }\r\n\r\n    private _displayMuteButton() {\r\n        if (this.useCustomUnlockedButton || this._muteButton) {\r\n            return;\r\n        }\r\n\r\n        this._muteButton = <HTMLButtonElement>document.createElement(\"BUTTON\");\r\n        this._muteButton.className = \"babylonUnmuteIcon\";\r\n        this._muteButton.id = \"babylonUnmuteIconBtn\";\r\n        this._muteButton.title = \"Unmute\";\r\n        const imageUrl = !window.SVGSVGElement\r\n            ? \"https://cdn.babylonjs.com/Assets/audio.png\"\r\n            : \"data:image/svg+xml;charset=UTF-8,%3Csvg%20version%3D%221.1%22%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%20width%3D%2239%22%20height%3D%2232%22%20viewBox%3D%220%200%2039%2032%22%3E%3Cpath%20fill%3D%22white%22%20d%3D%22M9.625%2018.938l-0.031%200.016h-4.953q-0.016%200-0.031-0.016v-12.453q0-0.016%200.031-0.016h4.953q0.031%200%200.031%200.016v12.453zM12.125%207.688l8.719-8.703v27.453l-8.719-8.719-0.016-0.047v-9.938zM23.359%207.875l1.406-1.406%204.219%204.203%204.203-4.203%201.422%201.406-4.219%204.219%204.219%204.203-1.484%201.359-4.141-4.156-4.219%204.219-1.406-1.422%204.219-4.203z%22%3E%3C%2Fpath%3E%3C%2Fsvg%3E\";\r\n\r\n        const css =\r\n            \".babylonUnmuteIcon { position: absolute; left: 20px; top: 20px; height: 40px; width: 60px; background-color: rgba(51,51,51,0.7); background-image: url(\" +\r\n            imageUrl +\r\n            \");  background-size: 80%; background-repeat:no-repeat; background-position: center; background-position-y: 4px; border: none; outline: none; transition: transform 0.125s ease-out; cursor: pointer; z-index: 9999; } .babylonUnmuteIcon:hover { transform: scale(1.05) } .babylonUnmuteIcon:active { background-color: rgba(51,51,51,1) }\";\r\n\r\n        const style = document.createElement(\"style\");\r\n        style.appendChild(document.createTextNode(css));\r\n        document.getElementsByTagName(\"head\")[0].appendChild(style);\r\n\r\n        document.body.appendChild(this._muteButton);\r\n\r\n        this._moveButtonToTopLeft();\r\n\r\n        this._muteButton.addEventListener(\r\n            \"touchend\",\r\n            () => {\r\n                this._triggerRunningState();\r\n            },\r\n            true\r\n        );\r\n        this._muteButton.addEventListener(\r\n            \"click\",\r\n            () => {\r\n                this.unlock();\r\n            },\r\n            true\r\n        );\r\n\r\n        window.addEventListener(\"resize\", this._onResize);\r\n    }\r\n\r\n    private _moveButtonToTopLeft() {\r\n        if (this._hostElement && this._muteButton) {\r\n            this._muteButton.style.top = this._hostElement.offsetTop + 20 + \"px\";\r\n            this._muteButton.style.left = this._hostElement.offsetLeft + 20 + \"px\";\r\n        }\r\n    }\r\n\r\n    private _onResize = () => {\r\n        this._moveButtonToTopLeft();\r\n    };\r\n\r\n    private _hideMuteButton() {\r\n        if (this._muteButton) {\r\n            document.body.removeChild(this._muteButton);\r\n            this._muteButton = null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Destroy and release the resources associated with the audio context.\r\n     */\r\n    public dispose(): void {\r\n        if (this.canUseWebAudio && this._audioContextInitialized) {\r\n            if (this._connectedAnalyser && this._audioContext) {\r\n                this._connectedAnalyser.stopDebugCanvas();\r\n                this._connectedAnalyser.dispose();\r\n                this.masterGain.disconnect();\r\n                this.masterGain.connect(this._audioContext.destination);\r\n                this._connectedAnalyser = null;\r\n            }\r\n            this.masterGain.gain.value = 1;\r\n        }\r\n        this.WarnedWebAudioUnsupported = false;\r\n        this._hideMuteButton();\r\n        window.removeEventListener(\"resize\", this._onResize);\r\n\r\n        this.onAudioUnlockedObservable.clear();\r\n        this.onAudioLockedObservable.clear();\r\n    }\r\n\r\n    /**\r\n     * Gets the global volume sets on the master gain.\r\n     * @returns the global volume if set or -1 otherwise\r\n     */\r\n    public getGlobalVolume(): number {\r\n        if (this.canUseWebAudio && this._audioContextInitialized) {\r\n            return this.masterGain.gain.value;\r\n        } else {\r\n            return -1;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sets the global volume of your experience (sets on the master gain).\r\n     * @param newVolume Defines the new global volume of the application\r\n     */\r\n    public setGlobalVolume(newVolume: number): void {\r\n        if (this.canUseWebAudio && this._audioContextInitialized) {\r\n            this.masterGain.gain.value = newVolume;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Connect the audio engine to an audio analyser allowing some amazing\r\n     * synchronization between the sounds/music and your visualization (VuMeter for instance).\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/audio/playingSoundsMusic#using-the-analyser\r\n     * @param analyser The analyser to connect to the engine\r\n     */\r\n    public connectToAnalyser(analyser: Analyser): void {\r\n        if (this._connectedAnalyser) {\r\n            this._connectedAnalyser.stopDebugCanvas();\r\n        }\r\n        if (this.canUseWebAudio && this._audioContextInitialized && this._audioContext) {\r\n            this._connectedAnalyser = analyser;\r\n            this.masterGain.disconnect();\r\n            this._connectedAnalyser.connectAudioNodes(this.masterGain, this._audioContext.destination);\r\n        }\r\n    }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}