{"ast":null,"code":"import { FlowGraphBlock } from \"../../../flowGraphBlock.js\";\nimport { RichTypeBoolean, RichTypeNumber } from \"../../../flowGraphRichTypes.js\";\nimport { FlowGraphBinaryOperationBlock } from \"../flowGraphBinaryOperationBlock.js\";\nimport { FlowGraphConstantOperationBlock } from \"../flowGraphConstantOperationBlock.js\";\nimport { FlowGraphUnaryOperationBlock } from \"../flowGraphUnaryOperationBlock.js\";\nimport { RegisterClass } from \"../../../../Misc/typeStore.js\";\n/**\n * Module for all of the number math blocks.\n * @see https://docs.google.com/spreadsheets/d/1wSFUFLPpRFVlL-va3YtYC6sepNvPapVawG1-nzoTF34/edit#gid=0\n */\nconst ADDNAME = \"FGAddNumberBlock\";\n/**\n * Outputs the addition of the left and right inputs.\n * @experimental\n */\nexport class FlowGraphAddNumberBlock extends FlowGraphBinaryOperationBlock {\n  constructor(config) {\n    super(RichTypeNumber, RichTypeNumber, RichTypeNumber, (left, right) => left + right, ADDNAME, config);\n  }\n}\nRegisterClass(ADDNAME, FlowGraphAddNumberBlock);\nconst SUBNAME = \"FGSubtractNumberBlock\";\n/**\n * Outputs the subtraction of the left and right inputs.\n * @experimental\n */\nexport class FlowGraphSubtractNumberBlock extends FlowGraphBinaryOperationBlock {\n  constructor(config) {\n    super(RichTypeNumber, RichTypeNumber, RichTypeNumber, (left, right) => left - right, SUBNAME, config);\n  }\n}\nRegisterClass(SUBNAME, FlowGraphSubtractNumberBlock);\nconst MULTIPLYNAME = \"FGMultiplyNumberBlock\";\n/**\n * Outputs the multiplication of the left and right inputs.\n * @experimental\n */\nexport class FlowGraphMultiplyNumberBlock extends FlowGraphBinaryOperationBlock {\n  constructor(config) {\n    super(RichTypeNumber, RichTypeNumber, RichTypeNumber, (left, right) => left * right, MULTIPLYNAME, config);\n  }\n}\nRegisterClass(MULTIPLYNAME, FlowGraphMultiplyNumberBlock);\nconst DIVIDENAME = \"FGDivideNumberBlock\";\n/**\n * Ouputs the division of the left and right inputs.\n * @experimental\n */\nexport class FlowGraphDivideNumberBlock extends FlowGraphBinaryOperationBlock {\n  constructor(config) {\n    super(RichTypeNumber, RichTypeNumber, RichTypeNumber, (left, right) => left / right, DIVIDENAME, config);\n  }\n}\nRegisterClass(DIVIDENAME, FlowGraphDivideNumberBlock);\nconst MODNAME = \"FGModNumberBlock\";\n/**\n * Outputs the modulo of the left and right inputs.\n * @experimental\n */\nexport class FlowGraphModNumberBlock extends FlowGraphBinaryOperationBlock {\n  constructor(config) {\n    super(RichTypeNumber, RichTypeNumber, RichTypeNumber, (left, right) => left % right, MODNAME, config);\n  }\n}\nRegisterClass(MODNAME, FlowGraphModNumberBlock);\nconst POWNAME = \"FGPowNumberBlock\";\n/**\n * Outputs left to the power of right.\n * @experimental\n */\nexport class FlowGraphPowNumberBlock extends FlowGraphBinaryOperationBlock {\n  constructor(config) {\n    super(RichTypeNumber, RichTypeNumber, RichTypeNumber, (left, right) => Math.pow(left, right), POWNAME, config);\n  }\n}\nRegisterClass(POWNAME, FlowGraphPowNumberBlock);\nconst ISNANNAME = \"FGIsNaNNumberBlock\";\n/**\n * Outputs true if the number is NaN, false otherwise.\n * @experimental\n */\nexport class FlowGraphIsNaNNumberBlock extends FlowGraphUnaryOperationBlock {\n  constructor(config) {\n    super(RichTypeNumber, RichTypeBoolean, input => isNaN(input), ISNANNAME, config);\n  }\n}\nRegisterClass(ISNANNAME, FlowGraphIsNaNNumberBlock);\nconst ISINFINITENAME = \"FGIsInfinityNumberBlock\";\n/**\n * Outputs true if the number is infinite, false otherwise.\n * @experimental\n */\nexport class FlowGraphIsInfinityNumberBlock extends FlowGraphUnaryOperationBlock {\n  constructor(config) {\n    super(RichTypeNumber, RichTypeBoolean, input => !isFinite(input), ISINFINITENAME, config);\n  }\n}\nRegisterClass(ISINFINITENAME, FlowGraphIsInfinityNumberBlock);\nconst SQRTNAME = \"FGSqrtNumberBlock\";\n/**\n * Outputs the square root of the input.\n * @experimental\n */\nexport class FlowGraphSqrtNumberBlock extends FlowGraphUnaryOperationBlock {\n  constructor(config) {\n    super(RichTypeNumber, RichTypeNumber, input => Math.sqrt(input), SQRTNAME, config);\n  }\n}\nRegisterClass(SQRTNAME, FlowGraphSqrtNumberBlock);\nconst ABSNAME = \"FGAbsNumberBlock\";\n/**\n * Outputs the absolute value of the input.\n * @experimental\n */\nexport class FlowGraphAbsNumberBlock extends FlowGraphUnaryOperationBlock {\n  constructor(config) {\n    super(RichTypeNumber, RichTypeNumber, input => Math.abs(input), ABSNAME, config);\n  }\n}\nRegisterClass(ABSNAME, FlowGraphAbsNumberBlock);\nconst NEGNAME = \"FGNegateNumberBlock\";\n/**\n * Negates the input.\n * @experimental\n */\nexport class FlowGraphNegateNumberBlock extends FlowGraphUnaryOperationBlock {\n  constructor(config) {\n    super(RichTypeNumber, RichTypeNumber, input => -input, NEGNAME, config);\n  }\n}\nRegisterClass(NEGNAME, FlowGraphNegateNumberBlock);\nconst FLOORNAME = \"FGFloorNumberBlock\";\n/**\n * Outputs the floor of the input.\n * @experimental\n */\nexport class FlowGraphFloorNumberBlock extends FlowGraphUnaryOperationBlock {\n  constructor(config) {\n    super(RichTypeNumber, RichTypeNumber, input => Math.floor(input), FLOORNAME, config);\n  }\n}\nRegisterClass(FLOORNAME, FlowGraphFloorNumberBlock);\nconst CEILNAME = \"FGCeilNumberBlock\";\n/**\n * Outputs the ceiling of the input.\n * @experimental\n */\nexport class FlowGraphCeilNumberBlock extends FlowGraphUnaryOperationBlock {\n  constructor(config) {\n    super(RichTypeNumber, RichTypeNumber, input => Math.ceil(input), CEILNAME, config);\n  }\n}\nRegisterClass(CEILNAME, FlowGraphCeilNumberBlock);\nconst ROUNDNAME = \"FGRoundNumberBlock\";\n/**\n * Rounds the left input to right digits of precision.\n * @see rounding function from: https://docs.google.com/spreadsheets/d/1wSFUFLPpRFVlL-va3YtYC6sepNvPapVawG1-nzoTF34/edit#gid=0\n * @experimental\n */\nexport class FlowGraphRoundNumberBlock extends FlowGraphBinaryOperationBlock {\n  constructor(config) {\n    super(RichTypeNumber, RichTypeNumber, RichTypeNumber, (input, digits) => Math.round(input / Math.pow(10, digits)) / Math.pow(10, digits), ROUNDNAME, config);\n  }\n}\nRegisterClass(ROUNDNAME, FlowGraphRoundNumberBlock);\nconst TRUNCNAME = \"FGTruncNumberBlock\";\n/**\n * Truncates the input.\n * @experimental\n */\nexport class FlowGraphTruncNumberBlock extends FlowGraphUnaryOperationBlock {\n  constructor(config) {\n    super(RichTypeNumber, RichTypeNumber, input => Math.trunc(input), TRUNCNAME, config);\n  }\n}\nRegisterClass(TRUNCNAME, FlowGraphTruncNumberBlock);\nconst EXPNAME = \"FGExpNumberBlock\";\n/**\n * Outputs the exponential of the input.\n * @experimental\n */\nexport class FlowGraphExpNumberBlock extends FlowGraphUnaryOperationBlock {\n  constructor(config) {\n    super(RichTypeNumber, RichTypeNumber, input => Math.exp(input), EXPNAME, config);\n  }\n}\nRegisterClass(EXPNAME, FlowGraphExpNumberBlock);\nconst LOG10NAME = \"FGLog10NumberBlock\";\n/**\n * Outputs the base 10 logarithm of the input.\n * @experimental\n */\nexport class FlowGraphLog10NumberBlock extends FlowGraphUnaryOperationBlock {\n  constructor(config) {\n    super(RichTypeNumber, RichTypeNumber, input => Math.log10(input), LOG10NAME, config);\n  }\n}\nRegisterClass(LOG10NAME, FlowGraphLog10NumberBlock);\nconst LOGNAME = \"FGLogNumberBlock\";\n/**\n * Outputs the natural logarithm of the input.\n * @experimental\n */\nexport class FlowGraphLogNumberBlock extends FlowGraphUnaryOperationBlock {\n  constructor(config) {\n    super(RichTypeNumber, RichTypeNumber, input => Math.log(input), LOGNAME, config);\n  }\n}\nRegisterClass(LOGNAME, FlowGraphLogNumberBlock);\nconst LNNAME = \"FGLnNumberBlock\";\n/**\n * Outputs the base 2 logarithm of the input.\n * @experimental\n */\nexport class FlowGraphLnNumberBlock extends FlowGraphUnaryOperationBlock {\n  constructor(config) {\n    super(RichTypeNumber, RichTypeNumber, input => Math.log(input) / Math.LN2, LNNAME, config);\n  }\n}\nRegisterClass(LNNAME, FlowGraphLnNumberBlock);\nconst SINENAME = \"FGSineNumberBlock\";\n/**\n * Outputs the sine of the input.\n * @experimental\n */\nexport class FlowGraphSinNumberBlock extends FlowGraphUnaryOperationBlock {\n  constructor(config) {\n    super(RichTypeNumber, RichTypeNumber, input => Math.sin(input), SINENAME, config);\n  }\n}\nRegisterClass(SINENAME, FlowGraphSinNumberBlock);\nconst COSNAME = \"FGCosNumberBlock\";\n/**\n * Outputs the cosine of the input.\n * @experimental\n */\nexport class FlowGraphCosNumberBlock extends FlowGraphUnaryOperationBlock {\n  constructor(config) {\n    super(RichTypeNumber, RichTypeNumber, input => Math.cos(input), COSNAME, config);\n  }\n}\nRegisterClass(COSNAME, FlowGraphCosNumberBlock);\nconst TANNAME = \"FGTanNumberBlock\";\n/**\n * Outputs the tangent of the input.\n * @experimental\n */\nexport class FlowGraphTanNumberBlock extends FlowGraphUnaryOperationBlock {\n  constructor(config) {\n    super(RichTypeNumber, RichTypeNumber, input => Math.tan(input), TANNAME, config);\n  }\n}\nRegisterClass(TANNAME, FlowGraphTanNumberBlock);\nconst ASINENAME = \"FGASineNumberBlock\";\n/**\n * Outputs the arcsine of the input.\n * @experimental\n */\nexport class FlowGraphASinNumberBlock extends FlowGraphUnaryOperationBlock {\n  constructor(config) {\n    super(RichTypeNumber, RichTypeNumber, input => Math.asin(input), ASINENAME, config);\n  }\n}\nRegisterClass(ASINENAME, FlowGraphASinNumberBlock);\nconst ACOSNAME = \"FGACosNumberBlock\";\n/**\n * Outputs the arccosine of the input.\n * @experimental\n */\nexport class FlowGraphACosNumberBlock extends FlowGraphUnaryOperationBlock {\n  constructor(config) {\n    super(RichTypeNumber, RichTypeNumber, input => Math.acos(input), ACOSNAME, config);\n  }\n}\nRegisterClass(ACOSNAME, FlowGraphACosNumberBlock);\nconst ATANNAME = \"FGATanNumberBlock\";\n/**\n * Outputs the arctangent of the input.\n * @experimental\n */\nexport class FlowGraphATanNumberBlock extends FlowGraphUnaryOperationBlock {\n  constructor(config) {\n    super(RichTypeNumber, RichTypeNumber, input => Math.atan(input), ATANNAME, config);\n  }\n}\nRegisterClass(ATANNAME, FlowGraphATanNumberBlock);\nconst ENAME = \"FGENumberBlock\";\n/**\n * Outputs the number E.\n * @experimental\n */\nexport class FlowGraphENumberBlock extends FlowGraphConstantOperationBlock {\n  constructor(config) {\n    super(RichTypeNumber, () => Math.E, ENAME, config);\n  }\n}\nRegisterClass(ENAME, FlowGraphENumberBlock);\nconst PINAME = \"FGPiNumberBlock\";\n/**\n * Outputs the number PI.\n * @experimental\n */\nexport class FlowGraphPiNumberBlock extends FlowGraphConstantOperationBlock {\n  constructor(config) {\n    super(RichTypeNumber, () => Math.PI, PINAME, config);\n  }\n}\nRegisterClass(PINAME, FlowGraphPiNumberBlock);\nconst ATAN2NAME = \"FGATan2NumberBlock\";\n/**\n * Outputs the arctan2 of the left and right inputs.\n * @experimental\n */\nexport class FlowGraphATan2NumberBlock extends FlowGraphBinaryOperationBlock {\n  constructor(config) {\n    super(RichTypeNumber, RichTypeNumber, RichTypeNumber, (left, right) => Math.atan2(left, right), ATAN2NAME, config);\n  }\n}\nRegisterClass(ATAN2NAME, FlowGraphATan2NumberBlock);\nconst RNDNAME = \"FGRandomNumberBlock\";\n/**\n * @experimental\n * Outputs a number between left and right.\n */\nexport class FlowGraphRandomNumberBlock extends FlowGraphBinaryOperationBlock {\n  constructor(config) {\n    super(RichTypeNumber, RichTypeNumber, RichTypeNumber, (left, right) => left + Math.random() * (right - left), RNDNAME, config);\n  }\n}\nRegisterClass(RNDNAME, FlowGraphRandomNumberBlock);\nconst MINNAME = \"FGMinNumberBlock\";\n/**\n * Outputs the minimum of the left and right inputs.\n * @experimental\n */\nexport class FlowGraphMinNumberBlock extends FlowGraphBinaryOperationBlock {\n  constructor(config) {\n    super(RichTypeNumber, RichTypeNumber, RichTypeNumber, (left, right) => Math.min(left, right), MINNAME, config);\n  }\n}\nRegisterClass(MINNAME, FlowGraphMinNumberBlock);\nconst MAXNAME = \"FGMaxNumberBlock\";\n/**\n * Outputs the maximum of the left and right inputs.\n * @experimental\n */\nexport class FlowGraphMaxNumberBlock extends FlowGraphBinaryOperationBlock {\n  constructor(config) {\n    super(RichTypeNumber, RichTypeNumber, RichTypeNumber, (left, right) => Math.max(left, right), MAXNAME, config);\n  }\n}\nRegisterClass(MAXNAME, FlowGraphMaxNumberBlock);\nconst EQUALSNAME = \"FGEqualsNumberBlock\";\n/**\n * Outputs true if left is equal to right, false otherwise.\n * @experimental\n */\nexport class FlowGraphEqualsNumberBlock extends FlowGraphBinaryOperationBlock {\n  constructor(config) {\n    super(RichTypeNumber, RichTypeNumber, RichTypeBoolean, (left, right) => left === right, EQUALSNAME, config);\n  }\n}\nRegisterClass(EQUALSNAME, FlowGraphEqualsNumberBlock);\nconst GREATERTHANNAME = \"FGGreaterThanNumberBlock\";\n/**\n * Outputs true if left is greater than right, false otherwise.\n */\nexport class FlowGraphGreaterThanNumberBlock extends FlowGraphBinaryOperationBlock {\n  constructor(config) {\n    super(RichTypeNumber, RichTypeNumber, RichTypeBoolean, (left, right) => left > right, GREATERTHANNAME, config);\n  }\n}\nRegisterClass(GREATERTHANNAME, FlowGraphGreaterThanNumberBlock);\nconst GREATEROREQUALNAME = \"FGGreaterThanOrEqualsNumberBlock\";\n/**\n * Outputs true if left is greater than or equal to right, false otherwise.\n */\nexport class FlowGraphGreaterThanOrEqualsNumberBlock extends FlowGraphBinaryOperationBlock {\n  constructor(config) {\n    super(RichTypeNumber, RichTypeNumber, RichTypeBoolean, (left, right) => left >= right, GREATEROREQUALNAME, config);\n  }\n}\nRegisterClass(GREATEROREQUALNAME, FlowGraphGreaterThanOrEqualsNumberBlock);\nconst LESSTHANNAME = \"FGLessThanNumberBlock\";\n/**\n * Outputs true if left is less than right, false otherwise.\n */\nexport class FlowGraphLessThanNumberBlock extends FlowGraphBinaryOperationBlock {\n  constructor(config) {\n    super(RichTypeNumber, RichTypeNumber, RichTypeBoolean, (left, right) => left < right, LESSTHANNAME, config);\n  }\n}\nRegisterClass(LESSTHANNAME, FlowGraphLessThanNumberBlock);\nconst LESSOREQUALNAME = \"FGLessThanOrEqualsNumberBlock\";\n/**\n * Outputs true if left is less than or equal to right, false otherwise.\n */\nexport class FlowGraphLessThanOrEqualsNumberBlock extends FlowGraphBinaryOperationBlock {\n  constructor(config) {\n    super(RichTypeNumber, RichTypeNumber, RichTypeBoolean, (left, right) => left <= right, LESSOREQUALNAME, config);\n  }\n}\nRegisterClass(LESSOREQUALNAME, FlowGraphLessThanOrEqualsNumberBlock);\nconst MIXNAME = \"FGMixNumberBlock\";\n/**\n * Outputs a mix of left and right based on alpha.\n * @experimental\n */\nexport class FlowGraphMixNumberBlock extends FlowGraphBlock {\n  constructor(config) {\n    super(config);\n    this.leftInput = this._registerDataInput(\"leftInput\", RichTypeNumber);\n    this.rightInput = this._registerDataInput(\"rightInput\", RichTypeNumber);\n    this.alphaInput = this._registerDataInput(\"alphaInput\", RichTypeNumber);\n    this.resultOutput = this._registerDataOutput(\"resultOutput\", RichTypeNumber);\n  }\n  _updateOutputs(_context) {\n    const left = this.leftInput.getValue(_context);\n    const right = this.rightInput.getValue(_context);\n    const alpha = this.alphaInput.getValue(_context);\n    const mix = left + (right - left) * alpha;\n    this.resultOutput.setValue(mix, _context);\n  }\n  getClassName() {\n    return MIXNAME;\n  }\n}\nRegisterClass(MIXNAME, FlowGraphMixNumberBlock);","map":{"version":3,"names":["FlowGraphBlock","RichTypeBoolean","RichTypeNumber","FlowGraphBinaryOperationBlock","FlowGraphConstantOperationBlock","FlowGraphUnaryOperationBlock","RegisterClass","ADDNAME","FlowGraphAddNumberBlock","constructor","config","left","right","SUBNAME","FlowGraphSubtractNumberBlock","MULTIPLYNAME","FlowGraphMultiplyNumberBlock","DIVIDENAME","FlowGraphDivideNumberBlock","MODNAME","FlowGraphModNumberBlock","POWNAME","FlowGraphPowNumberBlock","Math","pow","ISNANNAME","FlowGraphIsNaNNumberBlock","input","isNaN","ISINFINITENAME","FlowGraphIsInfinityNumberBlock","isFinite","SQRTNAME","FlowGraphSqrtNumberBlock","sqrt","ABSNAME","FlowGraphAbsNumberBlock","abs","NEGNAME","FlowGraphNegateNumberBlock","FLOORNAME","FlowGraphFloorNumberBlock","floor","CEILNAME","FlowGraphCeilNumberBlock","ceil","ROUNDNAME","FlowGraphRoundNumberBlock","digits","round","TRUNCNAME","FlowGraphTruncNumberBlock","trunc","EXPNAME","FlowGraphExpNumberBlock","exp","LOG10NAME","FlowGraphLog10NumberBlock","log10","LOGNAME","FlowGraphLogNumberBlock","log","LNNAME","FlowGraphLnNumberBlock","LN2","SINENAME","FlowGraphSinNumberBlock","sin","COSNAME","FlowGraphCosNumberBlock","cos","TANNAME","FlowGraphTanNumberBlock","tan","ASINENAME","FlowGraphASinNumberBlock","asin","ACOSNAME","FlowGraphACosNumberBlock","acos","ATANNAME","FlowGraphATanNumberBlock","atan","ENAME","FlowGraphENumberBlock","E","PINAME","FlowGraphPiNumberBlock","PI","ATAN2NAME","FlowGraphATan2NumberBlock","atan2","RNDNAME","FlowGraphRandomNumberBlock","random","MINNAME","FlowGraphMinNumberBlock","min","MAXNAME","FlowGraphMaxNumberBlock","max","EQUALSNAME","FlowGraphEqualsNumberBlock","GREATERTHANNAME","FlowGraphGreaterThanNumberBlock","GREATEROREQUALNAME","FlowGraphGreaterThanOrEqualsNumberBlock","LESSTHANNAME","FlowGraphLessThanNumberBlock","LESSOREQUALNAME","FlowGraphLessThanOrEqualsNumberBlock","MIXNAME","FlowGraphMixNumberBlock","leftInput","_registerDataInput","rightInput","alphaInput","resultOutput","_registerDataOutput","_updateOutputs","_context","getValue","alpha","mix","setValue","getClassName"],"sources":["../../../../../../../dev/core/src/FlowGraph/Blocks/Data/Math/flowGraphNumberMathBlocks.ts"],"sourcesContent":["import type { IFlowGraphBlockConfiguration } from \"../../../flowGraphBlock\";\r\nimport { FlowGraphBlock } from \"../../../flowGraphBlock\";\r\nimport { RichTypeBoolean, RichTypeNumber } from \"../../../flowGraphRichTypes\";\r\nimport { FlowGraphBinaryOperationBlock } from \"../flowGraphBinaryOperationBlock\";\r\nimport { FlowGraphConstantOperationBlock } from \"../flowGraphConstantOperationBlock\";\r\nimport { FlowGraphUnaryOperationBlock } from \"../flowGraphUnaryOperationBlock\";\r\nimport type { FlowGraphDataConnection } from \"../../../flowGraphDataConnection\";\r\nimport type { FlowGraphContext } from \"../../../flowGraphContext\";\r\nimport { RegisterClass } from \"../../../../Misc/typeStore\";\r\n/**\r\n * Module for all of the number math blocks.\r\n * @see https://docs.google.com/spreadsheets/d/1wSFUFLPpRFVlL-va3YtYC6sepNvPapVawG1-nzoTF34/edit#gid=0\r\n */\r\n\r\nconst ADDNAME = \"FGAddNumberBlock\";\r\n/**\r\n * Outputs the addition of the left and right inputs.\r\n * @experimental\r\n */\r\nexport class FlowGraphAddNumberBlock extends FlowGraphBinaryOperationBlock<number, number, number> {\r\n    constructor(config?: IFlowGraphBlockConfiguration) {\r\n        super(RichTypeNumber, RichTypeNumber, RichTypeNumber, (left, right) => left + right, ADDNAME, config);\r\n    }\r\n}\r\nRegisterClass(ADDNAME, FlowGraphAddNumberBlock);\r\n\r\nconst SUBNAME = \"FGSubtractNumberBlock\";\r\n/**\r\n * Outputs the subtraction of the left and right inputs.\r\n * @experimental\r\n */\r\nexport class FlowGraphSubtractNumberBlock extends FlowGraphBinaryOperationBlock<number, number, number> {\r\n    constructor(config?: IFlowGraphBlockConfiguration) {\r\n        super(RichTypeNumber, RichTypeNumber, RichTypeNumber, (left, right) => left - right, SUBNAME, config);\r\n    }\r\n}\r\nRegisterClass(SUBNAME, FlowGraphSubtractNumberBlock);\r\n\r\nconst MULTIPLYNAME = \"FGMultiplyNumberBlock\";\r\n/**\r\n * Outputs the multiplication of the left and right inputs.\r\n * @experimental\r\n */\r\nexport class FlowGraphMultiplyNumberBlock extends FlowGraphBinaryOperationBlock<number, number, number> {\r\n    constructor(config?: IFlowGraphBlockConfiguration) {\r\n        super(RichTypeNumber, RichTypeNumber, RichTypeNumber, (left, right) => left * right, MULTIPLYNAME, config);\r\n    }\r\n}\r\nRegisterClass(MULTIPLYNAME, FlowGraphMultiplyNumberBlock);\r\n\r\nconst DIVIDENAME = \"FGDivideNumberBlock\";\r\n/**\r\n * Ouputs the division of the left and right inputs.\r\n * @experimental\r\n */\r\nexport class FlowGraphDivideNumberBlock extends FlowGraphBinaryOperationBlock<number, number, number> {\r\n    constructor(config?: IFlowGraphBlockConfiguration) {\r\n        super(RichTypeNumber, RichTypeNumber, RichTypeNumber, (left, right) => left / right, DIVIDENAME, config);\r\n    }\r\n}\r\nRegisterClass(DIVIDENAME, FlowGraphDivideNumberBlock);\r\n\r\nconst MODNAME = \"FGModNumberBlock\";\r\n/**\r\n * Outputs the modulo of the left and right inputs.\r\n * @experimental\r\n */\r\nexport class FlowGraphModNumberBlock extends FlowGraphBinaryOperationBlock<number, number, number> {\r\n    constructor(config?: IFlowGraphBlockConfiguration) {\r\n        super(RichTypeNumber, RichTypeNumber, RichTypeNumber, (left, right) => left % right, MODNAME, config);\r\n    }\r\n}\r\nRegisterClass(MODNAME, FlowGraphModNumberBlock);\r\n\r\nconst POWNAME = \"FGPowNumberBlock\";\r\n/**\r\n * Outputs left to the power of right.\r\n * @experimental\r\n */\r\nexport class FlowGraphPowNumberBlock extends FlowGraphBinaryOperationBlock<number, number, number> {\r\n    constructor(config?: IFlowGraphBlockConfiguration) {\r\n        super(RichTypeNumber, RichTypeNumber, RichTypeNumber, (left, right) => Math.pow(left, right), POWNAME, config);\r\n    }\r\n}\r\nRegisterClass(POWNAME, FlowGraphPowNumberBlock);\r\n\r\nconst ISNANNAME = \"FGIsNaNNumberBlock\";\r\n/**\r\n * Outputs true if the number is NaN, false otherwise.\r\n * @experimental\r\n */\r\nexport class FlowGraphIsNaNNumberBlock extends FlowGraphUnaryOperationBlock<number, boolean> {\r\n    constructor(config?: IFlowGraphBlockConfiguration) {\r\n        super(RichTypeNumber, RichTypeBoolean, (input) => isNaN(input), ISNANNAME, config);\r\n    }\r\n}\r\nRegisterClass(ISNANNAME, FlowGraphIsNaNNumberBlock);\r\n\r\nconst ISINFINITENAME = \"FGIsInfinityNumberBlock\";\r\n/**\r\n * Outputs true if the number is infinite, false otherwise.\r\n * @experimental\r\n */\r\nexport class FlowGraphIsInfinityNumberBlock extends FlowGraphUnaryOperationBlock<number, boolean> {\r\n    constructor(config?: IFlowGraphBlockConfiguration) {\r\n        super(RichTypeNumber, RichTypeBoolean, (input) => !isFinite(input), ISINFINITENAME, config);\r\n    }\r\n}\r\nRegisterClass(ISINFINITENAME, FlowGraphIsInfinityNumberBlock);\r\n\r\nconst SQRTNAME = \"FGSqrtNumberBlock\";\r\n/**\r\n * Outputs the square root of the input.\r\n * @experimental\r\n */\r\nexport class FlowGraphSqrtNumberBlock extends FlowGraphUnaryOperationBlock<number, number> {\r\n    constructor(config?: IFlowGraphBlockConfiguration) {\r\n        super(RichTypeNumber, RichTypeNumber, (input) => Math.sqrt(input), SQRTNAME, config);\r\n    }\r\n}\r\nRegisterClass(SQRTNAME, FlowGraphSqrtNumberBlock);\r\n\r\nconst ABSNAME = \"FGAbsNumberBlock\";\r\n/**\r\n * Outputs the absolute value of the input.\r\n * @experimental\r\n */\r\nexport class FlowGraphAbsNumberBlock extends FlowGraphUnaryOperationBlock<number, number> {\r\n    constructor(config?: IFlowGraphBlockConfiguration) {\r\n        super(RichTypeNumber, RichTypeNumber, (input) => Math.abs(input), ABSNAME, config);\r\n    }\r\n}\r\nRegisterClass(ABSNAME, FlowGraphAbsNumberBlock);\r\n\r\nconst NEGNAME = \"FGNegateNumberBlock\";\r\n/**\r\n * Negates the input.\r\n * @experimental\r\n */\r\nexport class FlowGraphNegateNumberBlock extends FlowGraphUnaryOperationBlock<number, number> {\r\n    constructor(config?: IFlowGraphBlockConfiguration) {\r\n        super(RichTypeNumber, RichTypeNumber, (input) => -input, NEGNAME, config);\r\n    }\r\n}\r\nRegisterClass(NEGNAME, FlowGraphNegateNumberBlock);\r\n\r\nconst FLOORNAME = \"FGFloorNumberBlock\";\r\n/**\r\n * Outputs the floor of the input.\r\n * @experimental\r\n */\r\nexport class FlowGraphFloorNumberBlock extends FlowGraphUnaryOperationBlock<number, number> {\r\n    constructor(config?: IFlowGraphBlockConfiguration) {\r\n        super(RichTypeNumber, RichTypeNumber, (input) => Math.floor(input), FLOORNAME, config);\r\n    }\r\n}\r\n\r\nRegisterClass(FLOORNAME, FlowGraphFloorNumberBlock);\r\n\r\nconst CEILNAME = \"FGCeilNumberBlock\";\r\n/**\r\n * Outputs the ceiling of the input.\r\n * @experimental\r\n */\r\nexport class FlowGraphCeilNumberBlock extends FlowGraphUnaryOperationBlock<number, number> {\r\n    constructor(config?: IFlowGraphBlockConfiguration) {\r\n        super(RichTypeNumber, RichTypeNumber, (input) => Math.ceil(input), CEILNAME, config);\r\n    }\r\n}\r\nRegisterClass(CEILNAME, FlowGraphCeilNumberBlock);\r\n\r\nconst ROUNDNAME = \"FGRoundNumberBlock\";\r\n/**\r\n * Rounds the left input to right digits of precision.\r\n * @see rounding function from: https://docs.google.com/spreadsheets/d/1wSFUFLPpRFVlL-va3YtYC6sepNvPapVawG1-nzoTF34/edit#gid=0\r\n * @experimental\r\n */\r\nexport class FlowGraphRoundNumberBlock extends FlowGraphBinaryOperationBlock<number, number, number> {\r\n    constructor(config?: IFlowGraphBlockConfiguration) {\r\n        super(RichTypeNumber, RichTypeNumber, RichTypeNumber, (input, digits) => Math.round(input / Math.pow(10, digits)) / Math.pow(10, digits), ROUNDNAME, config);\r\n    }\r\n}\r\nRegisterClass(ROUNDNAME, FlowGraphRoundNumberBlock);\r\n\r\nconst TRUNCNAME = \"FGTruncNumberBlock\";\r\n/**\r\n * Truncates the input.\r\n * @experimental\r\n */\r\nexport class FlowGraphTruncNumberBlock extends FlowGraphUnaryOperationBlock<number, number> {\r\n    constructor(config?: IFlowGraphBlockConfiguration) {\r\n        super(RichTypeNumber, RichTypeNumber, (input) => Math.trunc(input), TRUNCNAME, config);\r\n    }\r\n}\r\nRegisterClass(TRUNCNAME, FlowGraphTruncNumberBlock);\r\n\r\nconst EXPNAME = \"FGExpNumberBlock\";\r\n/**\r\n * Outputs the exponential of the input.\r\n * @experimental\r\n */\r\nexport class FlowGraphExpNumberBlock extends FlowGraphUnaryOperationBlock<number, number> {\r\n    constructor(config?: IFlowGraphBlockConfiguration) {\r\n        super(RichTypeNumber, RichTypeNumber, (input) => Math.exp(input), EXPNAME, config);\r\n    }\r\n}\r\nRegisterClass(EXPNAME, FlowGraphExpNumberBlock);\r\n\r\nconst LOG10NAME = \"FGLog10NumberBlock\";\r\n/**\r\n * Outputs the base 10 logarithm of the input.\r\n * @experimental\r\n */\r\nexport class FlowGraphLog10NumberBlock extends FlowGraphUnaryOperationBlock<number, number> {\r\n    constructor(config?: IFlowGraphBlockConfiguration) {\r\n        super(RichTypeNumber, RichTypeNumber, (input) => Math.log10(input), LOG10NAME, config);\r\n    }\r\n}\r\nRegisterClass(LOG10NAME, FlowGraphLog10NumberBlock);\r\n\r\nconst LOGNAME = \"FGLogNumberBlock\";\r\n/**\r\n * Outputs the natural logarithm of the input.\r\n * @experimental\r\n */\r\nexport class FlowGraphLogNumberBlock extends FlowGraphUnaryOperationBlock<number, number> {\r\n    constructor(config?: IFlowGraphBlockConfiguration) {\r\n        super(RichTypeNumber, RichTypeNumber, (input) => Math.log(input), LOGNAME, config);\r\n    }\r\n}\r\nRegisterClass(LOGNAME, FlowGraphLogNumberBlock);\r\n\r\nconst LNNAME = \"FGLnNumberBlock\";\r\n/**\r\n * Outputs the base 2 logarithm of the input.\r\n * @experimental\r\n */\r\nexport class FlowGraphLnNumberBlock extends FlowGraphUnaryOperationBlock<number, number> {\r\n    constructor(config?: IFlowGraphBlockConfiguration) {\r\n        super(RichTypeNumber, RichTypeNumber, (input) => Math.log(input) / Math.LN2, LNNAME, config);\r\n    }\r\n}\r\nRegisterClass(LNNAME, FlowGraphLnNumberBlock);\r\n\r\nconst SINENAME = \"FGSineNumberBlock\";\r\n/**\r\n * Outputs the sine of the input.\r\n * @experimental\r\n */\r\nexport class FlowGraphSinNumberBlock extends FlowGraphUnaryOperationBlock<number, number> {\r\n    constructor(config?: IFlowGraphBlockConfiguration) {\r\n        super(RichTypeNumber, RichTypeNumber, (input) => Math.sin(input), SINENAME, config);\r\n    }\r\n}\r\nRegisterClass(SINENAME, FlowGraphSinNumberBlock);\r\n\r\nconst COSNAME = \"FGCosNumberBlock\";\r\n/**\r\n * Outputs the cosine of the input.\r\n * @experimental\r\n */\r\nexport class FlowGraphCosNumberBlock extends FlowGraphUnaryOperationBlock<number, number> {\r\n    constructor(config?: IFlowGraphBlockConfiguration) {\r\n        super(RichTypeNumber, RichTypeNumber, (input) => Math.cos(input), COSNAME, config);\r\n    }\r\n}\r\nRegisterClass(COSNAME, FlowGraphCosNumberBlock);\r\n\r\nconst TANNAME = \"FGTanNumberBlock\";\r\n/**\r\n * Outputs the tangent of the input.\r\n * @experimental\r\n */\r\nexport class FlowGraphTanNumberBlock extends FlowGraphUnaryOperationBlock<number, number> {\r\n    constructor(config?: IFlowGraphBlockConfiguration) {\r\n        super(RichTypeNumber, RichTypeNumber, (input) => Math.tan(input), TANNAME, config);\r\n    }\r\n}\r\nRegisterClass(TANNAME, FlowGraphTanNumberBlock);\r\n\r\nconst ASINENAME = \"FGASineNumberBlock\";\r\n/**\r\n * Outputs the arcsine of the input.\r\n * @experimental\r\n */\r\nexport class FlowGraphASinNumberBlock extends FlowGraphUnaryOperationBlock<number, number> {\r\n    constructor(config?: IFlowGraphBlockConfiguration) {\r\n        super(RichTypeNumber, RichTypeNumber, (input) => Math.asin(input), ASINENAME, config);\r\n    }\r\n}\r\nRegisterClass(ASINENAME, FlowGraphASinNumberBlock);\r\n\r\nconst ACOSNAME = \"FGACosNumberBlock\";\r\n/**\r\n * Outputs the arccosine of the input.\r\n * @experimental\r\n */\r\nexport class FlowGraphACosNumberBlock extends FlowGraphUnaryOperationBlock<number, number> {\r\n    constructor(config?: IFlowGraphBlockConfiguration) {\r\n        super(RichTypeNumber, RichTypeNumber, (input) => Math.acos(input), ACOSNAME, config);\r\n    }\r\n}\r\nRegisterClass(ACOSNAME, FlowGraphACosNumberBlock);\r\n\r\nconst ATANNAME = \"FGATanNumberBlock\";\r\n/**\r\n * Outputs the arctangent of the input.\r\n * @experimental\r\n */\r\nexport class FlowGraphATanNumberBlock extends FlowGraphUnaryOperationBlock<number, number> {\r\n    constructor(config?: IFlowGraphBlockConfiguration) {\r\n        super(RichTypeNumber, RichTypeNumber, (input) => Math.atan(input), ATANNAME, config);\r\n    }\r\n}\r\nRegisterClass(ATANNAME, FlowGraphATanNumberBlock);\r\n\r\nconst ENAME = \"FGENumberBlock\";\r\n/**\r\n * Outputs the number E.\r\n * @experimental\r\n */\r\nexport class FlowGraphENumberBlock extends FlowGraphConstantOperationBlock<number> {\r\n    constructor(config?: IFlowGraphBlockConfiguration) {\r\n        super(RichTypeNumber, () => Math.E, ENAME, config);\r\n    }\r\n}\r\nRegisterClass(ENAME, FlowGraphENumberBlock);\r\n\r\nconst PINAME = \"FGPiNumberBlock\";\r\n/**\r\n * Outputs the number PI.\r\n * @experimental\r\n */\r\nexport class FlowGraphPiNumberBlock extends FlowGraphConstantOperationBlock<number> {\r\n    constructor(config?: IFlowGraphBlockConfiguration) {\r\n        super(RichTypeNumber, () => Math.PI, PINAME, config);\r\n    }\r\n}\r\nRegisterClass(PINAME, FlowGraphPiNumberBlock);\r\n\r\nconst ATAN2NAME = \"FGATan2NumberBlock\";\r\n/**\r\n * Outputs the arctan2 of the left and right inputs.\r\n * @experimental\r\n */\r\nexport class FlowGraphATan2NumberBlock extends FlowGraphBinaryOperationBlock<number, number, number> {\r\n    constructor(config?: IFlowGraphBlockConfiguration) {\r\n        super(RichTypeNumber, RichTypeNumber, RichTypeNumber, (left, right) => Math.atan2(left, right), ATAN2NAME, config);\r\n    }\r\n}\r\nRegisterClass(ATAN2NAME, FlowGraphATan2NumberBlock);\r\n\r\nconst RNDNAME = \"FGRandomNumberBlock\";\r\n/**\r\n * @experimental\r\n * Outputs a number between left and right.\r\n */\r\nexport class FlowGraphRandomNumberBlock extends FlowGraphBinaryOperationBlock<number, number, number> {\r\n    constructor(config?: IFlowGraphBlockConfiguration) {\r\n        super(RichTypeNumber, RichTypeNumber, RichTypeNumber, (left, right) => left + Math.random() * (right - left), RNDNAME, config);\r\n    }\r\n}\r\nRegisterClass(RNDNAME, FlowGraphRandomNumberBlock);\r\n\r\nconst MINNAME = \"FGMinNumberBlock\";\r\n/**\r\n * Outputs the minimum of the left and right inputs.\r\n * @experimental\r\n */\r\nexport class FlowGraphMinNumberBlock extends FlowGraphBinaryOperationBlock<number, number, number> {\r\n    constructor(config?: IFlowGraphBlockConfiguration) {\r\n        super(RichTypeNumber, RichTypeNumber, RichTypeNumber, (left, right) => Math.min(left, right), MINNAME, config);\r\n    }\r\n}\r\nRegisterClass(MINNAME, FlowGraphMinNumberBlock);\r\n\r\nconst MAXNAME = \"FGMaxNumberBlock\";\r\n/**\r\n * Outputs the maximum of the left and right inputs.\r\n * @experimental\r\n */\r\nexport class FlowGraphMaxNumberBlock extends FlowGraphBinaryOperationBlock<number, number, number> {\r\n    constructor(config?: IFlowGraphBlockConfiguration) {\r\n        super(RichTypeNumber, RichTypeNumber, RichTypeNumber, (left, right) => Math.max(left, right), MAXNAME, config);\r\n    }\r\n}\r\nRegisterClass(MAXNAME, FlowGraphMaxNumberBlock);\r\n\r\nconst EQUALSNAME = \"FGEqualsNumberBlock\";\r\n/**\r\n * Outputs true if left is equal to right, false otherwise.\r\n * @experimental\r\n */\r\nexport class FlowGraphEqualsNumberBlock extends FlowGraphBinaryOperationBlock<number, number, boolean> {\r\n    constructor(config?: IFlowGraphBlockConfiguration) {\r\n        super(RichTypeNumber, RichTypeNumber, RichTypeBoolean, (left, right) => left === right, EQUALSNAME, config);\r\n    }\r\n}\r\nRegisterClass(EQUALSNAME, FlowGraphEqualsNumberBlock);\r\n\r\nconst GREATERTHANNAME = \"FGGreaterThanNumberBlock\";\r\n/**\r\n * Outputs true if left is greater than right, false otherwise.\r\n */\r\nexport class FlowGraphGreaterThanNumberBlock extends FlowGraphBinaryOperationBlock<number, number, boolean> {\r\n    constructor(config?: IFlowGraphBlockConfiguration) {\r\n        super(RichTypeNumber, RichTypeNumber, RichTypeBoolean, (left, right) => left > right, GREATERTHANNAME, config);\r\n    }\r\n}\r\nRegisterClass(GREATERTHANNAME, FlowGraphGreaterThanNumberBlock);\r\n\r\nconst GREATEROREQUALNAME = \"FGGreaterThanOrEqualsNumberBlock\";\r\n/**\r\n * Outputs true if left is greater than or equal to right, false otherwise.\r\n */\r\nexport class FlowGraphGreaterThanOrEqualsNumberBlock extends FlowGraphBinaryOperationBlock<number, number, boolean> {\r\n    constructor(config?: IFlowGraphBlockConfiguration) {\r\n        super(RichTypeNumber, RichTypeNumber, RichTypeBoolean, (left, right) => left >= right, GREATEROREQUALNAME, config);\r\n    }\r\n}\r\nRegisterClass(GREATEROREQUALNAME, FlowGraphGreaterThanOrEqualsNumberBlock);\r\n\r\nconst LESSTHANNAME = \"FGLessThanNumberBlock\";\r\n/**\r\n * Outputs true if left is less than right, false otherwise.\r\n */\r\nexport class FlowGraphLessThanNumberBlock extends FlowGraphBinaryOperationBlock<number, number, boolean> {\r\n    constructor(config?: IFlowGraphBlockConfiguration) {\r\n        super(RichTypeNumber, RichTypeNumber, RichTypeBoolean, (left, right) => left < right, LESSTHANNAME, config);\r\n    }\r\n}\r\nRegisterClass(LESSTHANNAME, FlowGraphLessThanNumberBlock);\r\n\r\nconst LESSOREQUALNAME = \"FGLessThanOrEqualsNumberBlock\";\r\n/**\r\n * Outputs true if left is less than or equal to right, false otherwise.\r\n */\r\nexport class FlowGraphLessThanOrEqualsNumberBlock extends FlowGraphBinaryOperationBlock<number, number, boolean> {\r\n    constructor(config?: IFlowGraphBlockConfiguration) {\r\n        super(RichTypeNumber, RichTypeNumber, RichTypeBoolean, (left, right) => left <= right, LESSOREQUALNAME, config);\r\n    }\r\n}\r\nRegisterClass(LESSOREQUALNAME, FlowGraphLessThanOrEqualsNumberBlock);\r\n\r\nconst MIXNAME = \"FGMixNumberBlock\";\r\n/**\r\n * Outputs a mix of left and right based on alpha.\r\n * @experimental\r\n */\r\nexport class FlowGraphMixNumberBlock extends FlowGraphBlock {\r\n    public leftInput: FlowGraphDataConnection<number>;\r\n    public rightInput: FlowGraphDataConnection<number>;\r\n    public alphaInput: FlowGraphDataConnection<number>;\r\n\r\n    public resultOutput: FlowGraphDataConnection<number>;\r\n\r\n    constructor(config?: IFlowGraphBlockConfiguration) {\r\n        super(config);\r\n        this.leftInput = this._registerDataInput(\"leftInput\", RichTypeNumber);\r\n        this.rightInput = this._registerDataInput(\"rightInput\", RichTypeNumber);\r\n        this.alphaInput = this._registerDataInput(\"alphaInput\", RichTypeNumber);\r\n        this.resultOutput = this._registerDataOutput(\"resultOutput\", RichTypeNumber);\r\n    }\r\n\r\n    public _updateOutputs(_context: FlowGraphContext): void {\r\n        const left = this.leftInput.getValue(_context);\r\n        const right = this.rightInput.getValue(_context);\r\n        const alpha = this.alphaInput.getValue(_context);\r\n        const mix = left + (right - left) * alpha;\r\n        this.resultOutput.setValue(mix, _context);\r\n    }\r\n\r\n    public getClassName(): string {\r\n        return MIXNAME;\r\n    }\r\n}\r\nRegisterClass(MIXNAME, FlowGraphMixNumberBlock);\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}