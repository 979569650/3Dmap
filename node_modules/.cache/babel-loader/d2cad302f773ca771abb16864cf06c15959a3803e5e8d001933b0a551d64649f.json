{"ast":null,"code":"import { EventConstants } from \"../Events/deviceInputEvents.js\";\nimport { DeviceType, NativePointerInput, PointerInput } from \"./InputDevices/deviceEnums.js\";\n/**\n * Class to wrap DeviceInputSystem data into an event object\n */\nexport class DeviceEventFactory {\n  /**\n   * Create device input events based on provided type and slot\n   *\n   * @param deviceType Type of device\n   * @param deviceSlot \"Slot\" or index that device is referenced in\n   * @param inputIndex Id of input to be checked\n   * @param currentState Current value for given input\n   * @param deviceInputSystem Reference to DeviceInputSystem\n   * @param elementToAttachTo HTMLElement to reference as target for inputs\n   * @returns IUIEvent object\n   */\n  static CreateDeviceEvent(deviceType, deviceSlot, inputIndex, currentState, deviceInputSystem, elementToAttachTo, pointerId) {\n    switch (deviceType) {\n      case DeviceType.Keyboard:\n        return this._CreateKeyboardEvent(inputIndex, currentState, deviceInputSystem, elementToAttachTo);\n      case DeviceType.Mouse:\n        if (inputIndex === PointerInput.MouseWheelX || inputIndex === PointerInput.MouseWheelY || inputIndex === PointerInput.MouseWheelZ) {\n          return this._CreateWheelEvent(deviceType, deviceSlot, inputIndex, currentState, deviceInputSystem, elementToAttachTo);\n        }\n      // eslint-disable-next-line no-fallthrough\n      case DeviceType.Touch:\n        return this._CreatePointerEvent(deviceType, deviceSlot, inputIndex, currentState, deviceInputSystem, elementToAttachTo, pointerId);\n      default:\n        throw `Unable to generate event for device ${DeviceType[deviceType]}`;\n    }\n  }\n  /**\n   * Creates pointer event\n   *\n   * @param deviceType Type of device\n   * @param deviceSlot \"Slot\" or index that device is referenced in\n   * @param inputIndex Id of input to be checked\n   * @param currentState Current value for given input\n   * @param deviceInputSystem Reference to DeviceInputSystem\n   * @param elementToAttachTo HTMLElement to reference as target for inputs\n   * @returns IUIEvent object (Pointer)\n   */\n  static _CreatePointerEvent(deviceType, deviceSlot, inputIndex, currentState, deviceInputSystem, elementToAttachTo, pointerId) {\n    const evt = this._CreateMouseEvent(deviceType, deviceSlot, inputIndex, currentState, deviceInputSystem, elementToAttachTo);\n    if (deviceType === DeviceType.Mouse) {\n      evt.deviceType = DeviceType.Mouse;\n      evt.pointerId = 1;\n      evt.pointerType = \"mouse\";\n    } else {\n      evt.deviceType = DeviceType.Touch;\n      evt.pointerId = pointerId !== null && pointerId !== void 0 ? pointerId : deviceSlot;\n      evt.pointerType = \"touch\";\n    }\n    let buttons = 0;\n    // Populate buttons property with current state of all mouse buttons\n    // Uses values found on: https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/buttons\n    buttons += deviceInputSystem.pollInput(deviceType, deviceSlot, PointerInput.LeftClick);\n    buttons += deviceInputSystem.pollInput(deviceType, deviceSlot, PointerInput.RightClick) * 2;\n    buttons += deviceInputSystem.pollInput(deviceType, deviceSlot, PointerInput.MiddleClick) * 4;\n    evt.buttons = buttons;\n    if (inputIndex === PointerInput.Move) {\n      evt.type = \"pointermove\";\n    } else if (inputIndex >= PointerInput.LeftClick && inputIndex <= PointerInput.RightClick) {\n      evt.type = currentState === 1 ? \"pointerdown\" : \"pointerup\";\n      evt.button = inputIndex - 2;\n    }\n    return evt;\n  }\n  /**\n   * Create Mouse Wheel Event\n   * @param deviceType Type of device\n   * @param deviceSlot \"Slot\" or index that device is referenced in\n   * @param inputIndex Id of input to be checked\n   * @param currentState Current value for given input\n   * @param deviceInputSystem Reference to DeviceInputSystem\n   * @param elementToAttachTo HTMLElement to reference as target for inputs\n   * @returns IUIEvent object (Wheel)\n   */\n  static _CreateWheelEvent(deviceType, deviceSlot, inputIndex, currentState, deviceInputSystem, elementToAttachTo) {\n    const evt = this._CreateMouseEvent(deviceType, deviceSlot, inputIndex, currentState, deviceInputSystem, elementToAttachTo);\n    // While WheelEvents don't generally have a pointerId, we used to add one in the InputManager\n    // This line has been added to make the InputManager more platform-agnostic\n    // Similar code exists in the WebDeviceInputSystem to handle browser created events\n    evt.pointerId = 1;\n    evt.type = \"wheel\";\n    evt.deltaMode = EventConstants.DOM_DELTA_PIXEL;\n    evt.deltaX = 0;\n    evt.deltaY = 0;\n    evt.deltaZ = 0;\n    switch (inputIndex) {\n      case PointerInput.MouseWheelX:\n        evt.deltaX = currentState;\n        break;\n      case PointerInput.MouseWheelY:\n        evt.deltaY = currentState;\n        break;\n      case PointerInput.MouseWheelZ:\n        evt.deltaZ = currentState;\n        break;\n    }\n    return evt;\n  }\n  /**\n   * Create Mouse Event\n   * @param deviceType Type of device\n   * @param deviceSlot \"Slot\" or index that device is referenced in\n   * @param inputIndex Id of input to be checked\n   * @param currentState Current value for given input\n   * @param deviceInputSystem Reference to DeviceInputSystem\n   * @param elementToAttachTo HTMLElement to reference as target for inputs\n   * @returns IUIEvent object (Mouse)\n   */\n  static _CreateMouseEvent(deviceType, deviceSlot, inputIndex, currentState, deviceInputSystem, elementToAttachTo) {\n    const evt = this._CreateEvent(elementToAttachTo);\n    const pointerX = deviceInputSystem.pollInput(deviceType, deviceSlot, PointerInput.Horizontal);\n    const pointerY = deviceInputSystem.pollInput(deviceType, deviceSlot, PointerInput.Vertical);\n    // Handle offsets/deltas based on existence of HTMLElement\n    if (elementToAttachTo) {\n      evt.movementX = 0;\n      evt.movementY = 0;\n      evt.offsetX = evt.movementX - elementToAttachTo.getBoundingClientRect().x;\n      evt.offsetY = evt.movementY - elementToAttachTo.getBoundingClientRect().y;\n    } else {\n      evt.movementX = deviceInputSystem.pollInput(deviceType, deviceSlot, NativePointerInput.DeltaHorizontal); // DeltaHorizontal\n      evt.movementY = deviceInputSystem.pollInput(deviceType, deviceSlot, NativePointerInput.DeltaVertical); // DeltaVertical\n      evt.offsetX = 0;\n      evt.offsetY = 0;\n    }\n    this._CheckNonCharacterKeys(evt, deviceInputSystem);\n    evt.clientX = pointerX;\n    evt.clientY = pointerY;\n    evt.x = pointerX;\n    evt.y = pointerY;\n    evt.deviceType = deviceType;\n    evt.deviceSlot = deviceSlot;\n    evt.inputIndex = inputIndex;\n    return evt;\n  }\n  /**\n   * Create Keyboard Event\n   * @param inputIndex Id of input to be checked\n   * @param currentState Current value for given input\n   * @param deviceInputSystem Reference to DeviceInputSystem\n   * @param elementToAttachTo HTMLElement to reference as target for inputs\n   * @returns IEvent object (Keyboard)\n   */\n  static _CreateKeyboardEvent(inputIndex, currentState, deviceInputSystem, elementToAttachTo) {\n    const evt = this._CreateEvent(elementToAttachTo);\n    this._CheckNonCharacterKeys(evt, deviceInputSystem);\n    evt.deviceType = DeviceType.Keyboard;\n    evt.deviceSlot = 0;\n    evt.inputIndex = inputIndex;\n    evt.type = currentState === 1 ? \"keydown\" : \"keyup\";\n    evt.key = String.fromCharCode(inputIndex);\n    evt.keyCode = inputIndex;\n    return evt;\n  }\n  /**\n   * Add parameters for non-character keys (Ctrl, Alt, Meta, Shift)\n   * @param evt Event object to add parameters to\n   * @param deviceInputSystem DeviceInputSystem to pull values from\n   */\n  static _CheckNonCharacterKeys(evt, deviceInputSystem) {\n    const isKeyboardActive = deviceInputSystem.isDeviceAvailable(DeviceType.Keyboard);\n    const altKey = isKeyboardActive && deviceInputSystem.pollInput(DeviceType.Keyboard, 0, 18) === 1;\n    const ctrlKey = isKeyboardActive && deviceInputSystem.pollInput(DeviceType.Keyboard, 0, 17) === 1;\n    const metaKey = isKeyboardActive && (deviceInputSystem.pollInput(DeviceType.Keyboard, 0, 91) === 1 || deviceInputSystem.pollInput(DeviceType.Keyboard, 0, 92) === 1 || deviceInputSystem.pollInput(DeviceType.Keyboard, 0, 93) === 1);\n    const shiftKey = isKeyboardActive && deviceInputSystem.pollInput(DeviceType.Keyboard, 0, 16) === 1;\n    evt.altKey = altKey;\n    evt.ctrlKey = ctrlKey;\n    evt.metaKey = metaKey;\n    evt.shiftKey = shiftKey;\n  }\n  /**\n   * Create base event object\n   * @param elementToAttachTo Value to use as event target\n   * @returns\n   */\n  static _CreateEvent(elementToAttachTo) {\n    const evt = {};\n    evt.preventDefault = () => {};\n    evt.target = elementToAttachTo;\n    return evt;\n  }\n}","map":{"version":3,"names":["EventConstants","DeviceType","NativePointerInput","PointerInput","DeviceEventFactory","CreateDeviceEvent","deviceType","deviceSlot","inputIndex","currentState","deviceInputSystem","elementToAttachTo","pointerId","Keyboard","_CreateKeyboardEvent","Mouse","MouseWheelX","MouseWheelY","MouseWheelZ","_CreateWheelEvent","Touch","_CreatePointerEvent","evt","_CreateMouseEvent","pointerType","buttons","pollInput","LeftClick","RightClick","MiddleClick","Move","type","button","deltaMode","DOM_DELTA_PIXEL","deltaX","deltaY","deltaZ","_CreateEvent","pointerX","Horizontal","pointerY","Vertical","movementX","movementY","offsetX","getBoundingClientRect","x","offsetY","y","DeltaHorizontal","DeltaVertical","_CheckNonCharacterKeys","clientX","clientY","key","String","fromCharCode","keyCode","isKeyboardActive","isDeviceAvailable","altKey","ctrlKey","metaKey","shiftKey","preventDefault","target"],"sources":["../../../../dev/core/src/DeviceInput/eventFactory.ts"],"sourcesContent":["import { Constants } from \"../Engines/constants\";\r\nimport type { IUIEvent } from \"../Events/deviceInputEvents\";\r\nimport { EventConstants } from \"../Events/deviceInputEvents\";\r\nimport type { Nullable } from \"../types\";\r\nimport { DeviceType, NativePointerInput, PointerInput } from \"./InputDevices/deviceEnums\";\r\nimport type { IDeviceInputSystem } from \"./inputInterfaces\";\r\n\r\n/**\r\n * Class to wrap DeviceInputSystem data into an event object\r\n */\r\nexport class DeviceEventFactory {\r\n    /**\r\n     * Create device input events based on provided type and slot\r\n     *\r\n     * @param deviceType Type of device\r\n     * @param deviceSlot \"Slot\" or index that device is referenced in\r\n     * @param inputIndex Id of input to be checked\r\n     * @param currentState Current value for given input\r\n     * @param deviceInputSystem Reference to DeviceInputSystem\r\n     * @param elementToAttachTo HTMLElement to reference as target for inputs\r\n     * @returns IUIEvent object\r\n     */\r\n    public static CreateDeviceEvent(\r\n        deviceType: DeviceType,\r\n        deviceSlot: number,\r\n        inputIndex: number,\r\n        currentState: Nullable<number>,\r\n        deviceInputSystem: IDeviceInputSystem,\r\n        elementToAttachTo?: any,\r\n        pointerId?: number\r\n    ): IUIEvent {\r\n        switch (deviceType) {\r\n            case DeviceType.Keyboard:\r\n                return this._CreateKeyboardEvent(inputIndex, currentState, deviceInputSystem, elementToAttachTo);\r\n            case DeviceType.Mouse:\r\n                if (inputIndex === PointerInput.MouseWheelX || inputIndex === PointerInput.MouseWheelY || inputIndex === PointerInput.MouseWheelZ) {\r\n                    return this._CreateWheelEvent(deviceType, deviceSlot, inputIndex, currentState, deviceInputSystem, elementToAttachTo);\r\n                }\r\n            // eslint-disable-next-line no-fallthrough\r\n            case DeviceType.Touch:\r\n                return this._CreatePointerEvent(deviceType, deviceSlot, inputIndex, currentState, deviceInputSystem, elementToAttachTo, pointerId);\r\n            default:\r\n                throw `Unable to generate event for device ${DeviceType[deviceType]}`;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Creates pointer event\r\n     *\r\n     * @param deviceType Type of device\r\n     * @param deviceSlot \"Slot\" or index that device is referenced in\r\n     * @param inputIndex Id of input to be checked\r\n     * @param currentState Current value for given input\r\n     * @param deviceInputSystem Reference to DeviceInputSystem\r\n     * @param elementToAttachTo HTMLElement to reference as target for inputs\r\n     * @returns IUIEvent object (Pointer)\r\n     */\r\n    private static _CreatePointerEvent(\r\n        deviceType: DeviceType,\r\n        deviceSlot: number,\r\n        inputIndex: number,\r\n        currentState: Nullable<number>,\r\n        deviceInputSystem: IDeviceInputSystem,\r\n        elementToAttachTo?: any,\r\n        pointerId?: number\r\n    ): any {\r\n        const evt = this._CreateMouseEvent(deviceType, deviceSlot, inputIndex, currentState, deviceInputSystem, elementToAttachTo);\r\n\r\n        if (deviceType === DeviceType.Mouse) {\r\n            evt.deviceType = DeviceType.Mouse;\r\n            evt.pointerId = 1;\r\n            evt.pointerType = \"mouse\";\r\n        } else {\r\n            evt.deviceType = DeviceType.Touch;\r\n            evt.pointerId = pointerId ?? deviceSlot;\r\n            evt.pointerType = \"touch\";\r\n        }\r\n\r\n        let buttons = 0;\r\n\r\n        // Populate buttons property with current state of all mouse buttons\r\n        // Uses values found on: https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/buttons\r\n        buttons += deviceInputSystem.pollInput(deviceType, deviceSlot, PointerInput.LeftClick);\r\n        buttons += deviceInputSystem.pollInput(deviceType, deviceSlot, PointerInput.RightClick) * 2;\r\n        buttons += deviceInputSystem.pollInput(deviceType, deviceSlot, PointerInput.MiddleClick) * 4;\r\n        evt.buttons = buttons;\r\n\r\n        if (inputIndex === PointerInput.Move) {\r\n            evt.type = \"pointermove\";\r\n        } else if (inputIndex >= PointerInput.LeftClick && inputIndex <= PointerInput.RightClick) {\r\n            evt.type = currentState === 1 ? \"pointerdown\" : \"pointerup\";\r\n            evt.button = inputIndex - 2;\r\n        }\r\n\r\n        return evt;\r\n    }\r\n\r\n    /**\r\n     * Create Mouse Wheel Event\r\n     * @param deviceType Type of device\r\n     * @param deviceSlot \"Slot\" or index that device is referenced in\r\n     * @param inputIndex Id of input to be checked\r\n     * @param currentState Current value for given input\r\n     * @param deviceInputSystem Reference to DeviceInputSystem\r\n     * @param elementToAttachTo HTMLElement to reference as target for inputs\r\n     * @returns IUIEvent object (Wheel)\r\n     */\r\n    private static _CreateWheelEvent(\r\n        deviceType: DeviceType,\r\n        deviceSlot: number,\r\n        inputIndex: number,\r\n        currentState: Nullable<number>,\r\n        deviceInputSystem: IDeviceInputSystem,\r\n        elementToAttachTo: any\r\n    ): any {\r\n        const evt = this._CreateMouseEvent(deviceType, deviceSlot, inputIndex, currentState, deviceInputSystem, elementToAttachTo);\r\n\r\n        // While WheelEvents don't generally have a pointerId, we used to add one in the InputManager\r\n        // This line has been added to make the InputManager more platform-agnostic\r\n        // Similar code exists in the WebDeviceInputSystem to handle browser created events\r\n        evt.pointerId = 1;\r\n        evt.type = \"wheel\";\r\n        evt.deltaMode = EventConstants.DOM_DELTA_PIXEL;\r\n        evt.deltaX = 0;\r\n        evt.deltaY = 0;\r\n        evt.deltaZ = 0;\r\n\r\n        switch (inputIndex) {\r\n            case PointerInput.MouseWheelX:\r\n                evt.deltaX = currentState;\r\n                break;\r\n            case PointerInput.MouseWheelY:\r\n                evt.deltaY = currentState;\r\n                break;\r\n            case PointerInput.MouseWheelZ:\r\n                evt.deltaZ = currentState;\r\n                break;\r\n        }\r\n\r\n        return evt;\r\n    }\r\n\r\n    /**\r\n     * Create Mouse Event\r\n     * @param deviceType Type of device\r\n     * @param deviceSlot \"Slot\" or index that device is referenced in\r\n     * @param inputIndex Id of input to be checked\r\n     * @param currentState Current value for given input\r\n     * @param deviceInputSystem Reference to DeviceInputSystem\r\n     * @param elementToAttachTo HTMLElement to reference as target for inputs\r\n     * @returns IUIEvent object (Mouse)\r\n     */\r\n    private static _CreateMouseEvent(\r\n        deviceType: DeviceType,\r\n        deviceSlot: number,\r\n        inputIndex: number,\r\n        currentState: Nullable<number>,\r\n        deviceInputSystem: IDeviceInputSystem,\r\n        elementToAttachTo?: any\r\n    ): any {\r\n        const evt = this._CreateEvent(elementToAttachTo);\r\n        const pointerX = deviceInputSystem.pollInput(deviceType, deviceSlot, PointerInput.Horizontal);\r\n        const pointerY = deviceInputSystem.pollInput(deviceType, deviceSlot, PointerInput.Vertical);\r\n\r\n        // Handle offsets/deltas based on existence of HTMLElement\r\n        if (elementToAttachTo) {\r\n            evt.movementX = 0;\r\n            evt.movementY = 0;\r\n            evt.offsetX = evt.movementX - elementToAttachTo.getBoundingClientRect().x;\r\n            evt.offsetY = evt.movementY - elementToAttachTo.getBoundingClientRect().y;\r\n        } else {\r\n            evt.movementX = deviceInputSystem.pollInput(deviceType, deviceSlot, NativePointerInput.DeltaHorizontal); // DeltaHorizontal\r\n            evt.movementY = deviceInputSystem.pollInput(deviceType, deviceSlot, NativePointerInput.DeltaVertical); // DeltaVertical\r\n            evt.offsetX = 0;\r\n            evt.offsetY = 0;\r\n        }\r\n        this._CheckNonCharacterKeys(evt, deviceInputSystem);\r\n\r\n        evt.clientX = pointerX;\r\n        evt.clientY = pointerY;\r\n        evt.x = pointerX;\r\n        evt.y = pointerY;\r\n\r\n        evt.deviceType = deviceType;\r\n        evt.deviceSlot = deviceSlot;\r\n        evt.inputIndex = inputIndex;\r\n\r\n        return evt;\r\n    }\r\n\r\n    /**\r\n     * Create Keyboard Event\r\n     * @param inputIndex Id of input to be checked\r\n     * @param currentState Current value for given input\r\n     * @param deviceInputSystem Reference to DeviceInputSystem\r\n     * @param elementToAttachTo HTMLElement to reference as target for inputs\r\n     * @returns IEvent object (Keyboard)\r\n     */\r\n    private static _CreateKeyboardEvent(inputIndex: number, currentState: Nullable<number>, deviceInputSystem: IDeviceInputSystem, elementToAttachTo?: any): any {\r\n        const evt = this._CreateEvent(elementToAttachTo);\r\n        this._CheckNonCharacterKeys(evt, deviceInputSystem);\r\n        evt.deviceType = DeviceType.Keyboard;\r\n        evt.deviceSlot = 0;\r\n        evt.inputIndex = inputIndex;\r\n\r\n        evt.type = currentState === 1 ? \"keydown\" : \"keyup\";\r\n        evt.key = String.fromCharCode(inputIndex);\r\n        evt.keyCode = inputIndex;\r\n\r\n        return evt;\r\n    }\r\n\r\n    /**\r\n     * Add parameters for non-character keys (Ctrl, Alt, Meta, Shift)\r\n     * @param evt Event object to add parameters to\r\n     * @param deviceInputSystem DeviceInputSystem to pull values from\r\n     */\r\n    private static _CheckNonCharacterKeys(evt: any, deviceInputSystem: IDeviceInputSystem): void {\r\n        const isKeyboardActive = deviceInputSystem.isDeviceAvailable(DeviceType.Keyboard);\r\n        const altKey = isKeyboardActive && deviceInputSystem.pollInput(DeviceType.Keyboard, 0, Constants.INPUT_ALT_KEY) === 1;\r\n        const ctrlKey = isKeyboardActive && deviceInputSystem.pollInput(DeviceType.Keyboard, 0, Constants.INPUT_CTRL_KEY) === 1;\r\n        const metaKey =\r\n            isKeyboardActive &&\r\n            (deviceInputSystem.pollInput(DeviceType.Keyboard, 0, Constants.INPUT_META_KEY1) === 1 ||\r\n                deviceInputSystem.pollInput(DeviceType.Keyboard, 0, Constants.INPUT_META_KEY2) === 1 ||\r\n                deviceInputSystem.pollInput(DeviceType.Keyboard, 0, Constants.INPUT_META_KEY3) === 1);\r\n        const shiftKey = isKeyboardActive && deviceInputSystem.pollInput(DeviceType.Keyboard, 0, Constants.INPUT_SHIFT_KEY) === 1;\r\n\r\n        evt.altKey = altKey;\r\n        evt.ctrlKey = ctrlKey;\r\n        evt.metaKey = metaKey;\r\n        evt.shiftKey = shiftKey;\r\n    }\r\n\r\n    /**\r\n     * Create base event object\r\n     * @param elementToAttachTo Value to use as event target\r\n     * @returns\r\n     */\r\n    private static _CreateEvent(elementToAttachTo: any): any {\r\n        const evt: { [k: string]: any } = {};\r\n        evt.preventDefault = () => {};\r\n        evt.target = elementToAttachTo;\r\n\r\n        return evt;\r\n    }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}