{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { __decorate } from \"../../tslib.es6.js\";\nimport { serialize } from \"../../Misc/decorators.js\";\nimport { CameraInputTypes } from \"../../Cameras/cameraInputsManager.js\";\nimport { KeyboardEventTypes } from \"../../Events/keyboardEvents.js\";\nimport { Tools } from \"../../Misc/tools.js\";\n/**\n * Manage the keyboard inputs to control the movement of an arc rotate camera.\n * @see https://doc.babylonjs.com/features/featuresDeepDive/cameras/customizingCameraInputs\n */\nexport class ArcRotateCameraKeyboardMoveInput {\n  constructor() {\n    /**\n     * Defines the list of key codes associated with the up action (increase alpha)\n     */\n    this.keysUp = [38];\n    /**\n     * Defines the list of key codes associated with the down action (decrease alpha)\n     */\n    this.keysDown = [40];\n    /**\n     * Defines the list of key codes associated with the left action (increase beta)\n     */\n    this.keysLeft = [37];\n    /**\n     * Defines the list of key codes associated with the right action (decrease beta)\n     */\n    this.keysRight = [39];\n    /**\n     * Defines the list of key codes associated with the reset action.\n     * Those keys reset the camera to its last stored state (with the method camera.storeState())\n     */\n    this.keysReset = [220];\n    /**\n     * Defines the panning sensibility of the inputs.\n     * (How fast is the camera panning)\n     */\n    this.panningSensibility = 50.0;\n    /**\n     * Defines the zooming sensibility of the inputs.\n     * (How fast is the camera zooming)\n     */\n    this.zoomingSensibility = 25.0;\n    /**\n     * Defines whether maintaining the alt key down switch the movement mode from\n     * orientation to zoom.\n     */\n    this.useAltToZoom = true;\n    /**\n     * Rotation speed of the camera\n     */\n    this.angularSpeed = 0.01;\n    this._keys = new Array();\n  }\n  /**\n   * Attach the input controls to a specific dom element to get the input from.\n   * @param noPreventDefault Defines whether event caught by the controls should call preventdefault() (https://developer.mozilla.org/en-US/docs/Web/API/Event/preventDefault)\n   */\n  attachControl(noPreventDefault) {\n    // was there a second variable defined?\n    // eslint-disable-next-line prefer-rest-params\n    noPreventDefault = Tools.BackCompatCameraNoPreventDefault(arguments);\n    if (this._onCanvasBlurObserver) {\n      return;\n    }\n    this._scene = this.camera.getScene();\n    this._engine = this._scene.getEngine();\n    this._onCanvasBlurObserver = this._engine.onCanvasBlurObservable.add(() => {\n      this._keys.length = 0;\n    });\n    this._onKeyboardObserver = this._scene.onKeyboardObservable.add(info => {\n      const evt = info.event;\n      if (!evt.metaKey) {\n        if (info.type === KeyboardEventTypes.KEYDOWN) {\n          this._ctrlPressed = evt.ctrlKey;\n          this._altPressed = evt.altKey;\n          if (this.keysUp.indexOf(evt.keyCode) !== -1 || this.keysDown.indexOf(evt.keyCode) !== -1 || this.keysLeft.indexOf(evt.keyCode) !== -1 || this.keysRight.indexOf(evt.keyCode) !== -1 || this.keysReset.indexOf(evt.keyCode) !== -1) {\n            const index = this._keys.indexOf(evt.keyCode);\n            if (index === -1) {\n              this._keys.push(evt.keyCode);\n            }\n            if (evt.preventDefault) {\n              if (!noPreventDefault) {\n                evt.preventDefault();\n              }\n            }\n          }\n        } else {\n          if (this.keysUp.indexOf(evt.keyCode) !== -1 || this.keysDown.indexOf(evt.keyCode) !== -1 || this.keysLeft.indexOf(evt.keyCode) !== -1 || this.keysRight.indexOf(evt.keyCode) !== -1 || this.keysReset.indexOf(evt.keyCode) !== -1) {\n            const index = this._keys.indexOf(evt.keyCode);\n            if (index >= 0) {\n              this._keys.splice(index, 1);\n            }\n            if (evt.preventDefault) {\n              if (!noPreventDefault) {\n                evt.preventDefault();\n              }\n            }\n          }\n        }\n      }\n    });\n  }\n  /**\n   * Detach the current controls from the specified dom element.\n   */\n  detachControl() {\n    if (this._scene) {\n      if (this._onKeyboardObserver) {\n        this._scene.onKeyboardObservable.remove(this._onKeyboardObserver);\n      }\n      if (this._onCanvasBlurObserver) {\n        this._engine.onCanvasBlurObservable.remove(this._onCanvasBlurObserver);\n      }\n      this._onKeyboardObserver = null;\n      this._onCanvasBlurObserver = null;\n    }\n    this._keys.length = 0;\n  }\n  /**\n   * Update the current camera state depending on the inputs that have been used this frame.\n   * This is a dynamically created lambda to avoid the performance penalty of looping for inputs in the render loop.\n   */\n  checkInputs() {\n    if (this._onKeyboardObserver) {\n      const camera = this.camera;\n      for (let index = 0; index < this._keys.length; index++) {\n        const keyCode = this._keys[index];\n        if (this.keysLeft.indexOf(keyCode) !== -1) {\n          if (this._ctrlPressed && this.camera._useCtrlForPanning) {\n            camera.inertialPanningX -= 1 / this.panningSensibility;\n          } else {\n            camera.inertialAlphaOffset -= this.angularSpeed;\n          }\n        } else if (this.keysUp.indexOf(keyCode) !== -1) {\n          if (this._ctrlPressed && this.camera._useCtrlForPanning) {\n            camera.inertialPanningY += 1 / this.panningSensibility;\n          } else if (this._altPressed && this.useAltToZoom) {\n            camera.inertialRadiusOffset += 1 / this.zoomingSensibility;\n          } else {\n            camera.inertialBetaOffset -= this.angularSpeed;\n          }\n        } else if (this.keysRight.indexOf(keyCode) !== -1) {\n          if (this._ctrlPressed && this.camera._useCtrlForPanning) {\n            camera.inertialPanningX += 1 / this.panningSensibility;\n          } else {\n            camera.inertialAlphaOffset += this.angularSpeed;\n          }\n        } else if (this.keysDown.indexOf(keyCode) !== -1) {\n          if (this._ctrlPressed && this.camera._useCtrlForPanning) {\n            camera.inertialPanningY -= 1 / this.panningSensibility;\n          } else if (this._altPressed && this.useAltToZoom) {\n            camera.inertialRadiusOffset -= 1 / this.zoomingSensibility;\n          } else {\n            camera.inertialBetaOffset += this.angularSpeed;\n          }\n        } else if (this.keysReset.indexOf(keyCode) !== -1) {\n          if (camera.useInputToRestoreState) {\n            camera.restoreState();\n          }\n        }\n      }\n    }\n  }\n  /**\n   * Gets the class name of the current input.\n   * @returns the class name\n   */\n  getClassName() {\n    return \"ArcRotateCameraKeyboardMoveInput\";\n  }\n  /**\n   * Get the friendly name associated with the input class.\n   * @returns the input friendly name\n   */\n  getSimpleName() {\n    return \"keyboard\";\n  }\n}\n__decorate([serialize()], ArcRotateCameraKeyboardMoveInput.prototype, \"keysUp\", void 0);\n__decorate([serialize()], ArcRotateCameraKeyboardMoveInput.prototype, \"keysDown\", void 0);\n__decorate([serialize()], ArcRotateCameraKeyboardMoveInput.prototype, \"keysLeft\", void 0);\n__decorate([serialize()], ArcRotateCameraKeyboardMoveInput.prototype, \"keysRight\", void 0);\n__decorate([serialize()], ArcRotateCameraKeyboardMoveInput.prototype, \"keysReset\", void 0);\n__decorate([serialize()], ArcRotateCameraKeyboardMoveInput.prototype, \"panningSensibility\", void 0);\n__decorate([serialize()], ArcRotateCameraKeyboardMoveInput.prototype, \"zoomingSensibility\", void 0);\n__decorate([serialize()], ArcRotateCameraKeyboardMoveInput.prototype, \"useAltToZoom\", void 0);\n__decorate([serialize()], ArcRotateCameraKeyboardMoveInput.prototype, \"angularSpeed\", void 0);\nCameraInputTypes[\"ArcRotateCameraKeyboardMoveInput\"] = ArcRotateCameraKeyboardMoveInput;","map":{"version":3,"names":["serialize","CameraInputTypes","KeyboardEventTypes","Tools","ArcRotateCameraKeyboardMoveInput","constructor","keysUp","keysDown","keysLeft","keysRight","keysReset","panningSensibility","zoomingSensibility","useAltToZoom","angularSpeed","_keys","Array","attachControl","noPreventDefault","BackCompatCameraNoPreventDefault","arguments","_onCanvasBlurObserver","_scene","camera","getScene","_engine","getEngine","onCanvasBlurObservable","add","length","_onKeyboardObserver","onKeyboardObservable","info","evt","event","metaKey","type","KEYDOWN","_ctrlPressed","ctrlKey","_altPressed","altKey","indexOf","keyCode","index","push","preventDefault","splice","detachControl","remove","checkInputs","_useCtrlForPanning","inertialPanningX","inertialAlphaOffset","inertialPanningY","inertialRadiusOffset","inertialBetaOffset","useInputToRestoreState","restoreState","getClassName","getSimpleName","__decorate"],"sources":["../../../../../dev/core/src/Cameras/Inputs/arcRotateCameraKeyboardMoveInput.ts"],"sourcesContent":["import type { Nullable } from \"../../types\";\r\nimport { serialize } from \"../../Misc/decorators\";\r\nimport type { Observer } from \"../../Misc/observable\";\r\nimport type { Scene } from \"../../scene\";\r\nimport type { ArcRotateCamera } from \"../../Cameras/arcRotateCamera\";\r\nimport type { ICameraInput } from \"../../Cameras/cameraInputsManager\";\r\nimport { CameraInputTypes } from \"../../Cameras/cameraInputsManager\";\r\nimport type { Engine } from \"../../Engines/engine\";\r\nimport type { KeyboardInfo } from \"../../Events/keyboardEvents\";\r\nimport { KeyboardEventTypes } from \"../../Events/keyboardEvents\";\r\nimport { Tools } from \"../../Misc/tools\";\r\n\r\n/**\r\n * Manage the keyboard inputs to control the movement of an arc rotate camera.\r\n * @see https://doc.babylonjs.com/features/featuresDeepDive/cameras/customizingCameraInputs\r\n */\r\nexport class ArcRotateCameraKeyboardMoveInput implements ICameraInput<ArcRotateCamera> {\r\n    /**\r\n     * Defines the camera the input is attached to.\r\n     */\r\n    public camera: ArcRotateCamera;\r\n\r\n    /**\r\n     * Defines the list of key codes associated with the up action (increase alpha)\r\n     */\r\n    @serialize()\r\n    public keysUp = [38];\r\n\r\n    /**\r\n     * Defines the list of key codes associated with the down action (decrease alpha)\r\n     */\r\n    @serialize()\r\n    public keysDown = [40];\r\n\r\n    /**\r\n     * Defines the list of key codes associated with the left action (increase beta)\r\n     */\r\n    @serialize()\r\n    public keysLeft = [37];\r\n\r\n    /**\r\n     * Defines the list of key codes associated with the right action (decrease beta)\r\n     */\r\n    @serialize()\r\n    public keysRight = [39];\r\n\r\n    /**\r\n     * Defines the list of key codes associated with the reset action.\r\n     * Those keys reset the camera to its last stored state (with the method camera.storeState())\r\n     */\r\n    @serialize()\r\n    public keysReset = [220];\r\n\r\n    /**\r\n     * Defines the panning sensibility of the inputs.\r\n     * (How fast is the camera panning)\r\n     */\r\n    @serialize()\r\n    public panningSensibility: number = 50.0;\r\n\r\n    /**\r\n     * Defines the zooming sensibility of the inputs.\r\n     * (How fast is the camera zooming)\r\n     */\r\n    @serialize()\r\n    public zoomingSensibility: number = 25.0;\r\n\r\n    /**\r\n     * Defines whether maintaining the alt key down switch the movement mode from\r\n     * orientation to zoom.\r\n     */\r\n    @serialize()\r\n    public useAltToZoom: boolean = true;\r\n\r\n    /**\r\n     * Rotation speed of the camera\r\n     */\r\n    @serialize()\r\n    public angularSpeed = 0.01;\r\n\r\n    private _keys = new Array<number>();\r\n    private _ctrlPressed: boolean;\r\n    private _altPressed: boolean;\r\n    private _onCanvasBlurObserver: Nullable<Observer<Engine>>;\r\n    private _onKeyboardObserver: Nullable<Observer<KeyboardInfo>>;\r\n    private _engine: Engine;\r\n    private _scene: Scene;\r\n\r\n    /**\r\n     * Attach the input controls to a specific dom element to get the input from.\r\n     * @param noPreventDefault Defines whether event caught by the controls should call preventdefault() (https://developer.mozilla.org/en-US/docs/Web/API/Event/preventDefault)\r\n     */\r\n    public attachControl(noPreventDefault?: boolean): void {\r\n        // was there a second variable defined?\r\n        // eslint-disable-next-line prefer-rest-params\r\n        noPreventDefault = Tools.BackCompatCameraNoPreventDefault(arguments);\r\n\r\n        if (this._onCanvasBlurObserver) {\r\n            return;\r\n        }\r\n\r\n        this._scene = this.camera.getScene();\r\n        this._engine = this._scene.getEngine();\r\n\r\n        this._onCanvasBlurObserver = this._engine.onCanvasBlurObservable.add(() => {\r\n            this._keys.length = 0;\r\n        });\r\n\r\n        this._onKeyboardObserver = this._scene.onKeyboardObservable.add((info) => {\r\n            const evt = info.event;\r\n            if (!evt.metaKey) {\r\n                if (info.type === KeyboardEventTypes.KEYDOWN) {\r\n                    this._ctrlPressed = evt.ctrlKey;\r\n                    this._altPressed = evt.altKey;\r\n\r\n                    if (\r\n                        this.keysUp.indexOf(evt.keyCode) !== -1 ||\r\n                        this.keysDown.indexOf(evt.keyCode) !== -1 ||\r\n                        this.keysLeft.indexOf(evt.keyCode) !== -1 ||\r\n                        this.keysRight.indexOf(evt.keyCode) !== -1 ||\r\n                        this.keysReset.indexOf(evt.keyCode) !== -1\r\n                    ) {\r\n                        const index = this._keys.indexOf(evt.keyCode);\r\n\r\n                        if (index === -1) {\r\n                            this._keys.push(evt.keyCode);\r\n                        }\r\n\r\n                        if (evt.preventDefault) {\r\n                            if (!noPreventDefault) {\r\n                                evt.preventDefault();\r\n                            }\r\n                        }\r\n                    }\r\n                } else {\r\n                    if (\r\n                        this.keysUp.indexOf(evt.keyCode) !== -1 ||\r\n                        this.keysDown.indexOf(evt.keyCode) !== -1 ||\r\n                        this.keysLeft.indexOf(evt.keyCode) !== -1 ||\r\n                        this.keysRight.indexOf(evt.keyCode) !== -1 ||\r\n                        this.keysReset.indexOf(evt.keyCode) !== -1\r\n                    ) {\r\n                        const index = this._keys.indexOf(evt.keyCode);\r\n\r\n                        if (index >= 0) {\r\n                            this._keys.splice(index, 1);\r\n                        }\r\n\r\n                        if (evt.preventDefault) {\r\n                            if (!noPreventDefault) {\r\n                                evt.preventDefault();\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Detach the current controls from the specified dom element.\r\n     */\r\n    public detachControl(): void {\r\n        if (this._scene) {\r\n            if (this._onKeyboardObserver) {\r\n                this._scene.onKeyboardObservable.remove(this._onKeyboardObserver);\r\n            }\r\n            if (this._onCanvasBlurObserver) {\r\n                this._engine.onCanvasBlurObservable.remove(this._onCanvasBlurObserver);\r\n            }\r\n            this._onKeyboardObserver = null;\r\n            this._onCanvasBlurObserver = null;\r\n        }\r\n\r\n        this._keys.length = 0;\r\n    }\r\n\r\n    /**\r\n     * Update the current camera state depending on the inputs that have been used this frame.\r\n     * This is a dynamically created lambda to avoid the performance penalty of looping for inputs in the render loop.\r\n     */\r\n    public checkInputs(): void {\r\n        if (this._onKeyboardObserver) {\r\n            const camera = this.camera;\r\n\r\n            for (let index = 0; index < this._keys.length; index++) {\r\n                const keyCode = this._keys[index];\r\n                if (this.keysLeft.indexOf(keyCode) !== -1) {\r\n                    if (this._ctrlPressed && this.camera._useCtrlForPanning) {\r\n                        camera.inertialPanningX -= 1 / this.panningSensibility;\r\n                    } else {\r\n                        camera.inertialAlphaOffset -= this.angularSpeed;\r\n                    }\r\n                } else if (this.keysUp.indexOf(keyCode) !== -1) {\r\n                    if (this._ctrlPressed && this.camera._useCtrlForPanning) {\r\n                        camera.inertialPanningY += 1 / this.panningSensibility;\r\n                    } else if (this._altPressed && this.useAltToZoom) {\r\n                        camera.inertialRadiusOffset += 1 / this.zoomingSensibility;\r\n                    } else {\r\n                        camera.inertialBetaOffset -= this.angularSpeed;\r\n                    }\r\n                } else if (this.keysRight.indexOf(keyCode) !== -1) {\r\n                    if (this._ctrlPressed && this.camera._useCtrlForPanning) {\r\n                        camera.inertialPanningX += 1 / this.panningSensibility;\r\n                    } else {\r\n                        camera.inertialAlphaOffset += this.angularSpeed;\r\n                    }\r\n                } else if (this.keysDown.indexOf(keyCode) !== -1) {\r\n                    if (this._ctrlPressed && this.camera._useCtrlForPanning) {\r\n                        camera.inertialPanningY -= 1 / this.panningSensibility;\r\n                    } else if (this._altPressed && this.useAltToZoom) {\r\n                        camera.inertialRadiusOffset -= 1 / this.zoomingSensibility;\r\n                    } else {\r\n                        camera.inertialBetaOffset += this.angularSpeed;\r\n                    }\r\n                } else if (this.keysReset.indexOf(keyCode) !== -1) {\r\n                    if (camera.useInputToRestoreState) {\r\n                        camera.restoreState();\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets the class name of the current input.\r\n     * @returns the class name\r\n     */\r\n    public getClassName(): string {\r\n        return \"ArcRotateCameraKeyboardMoveInput\";\r\n    }\r\n\r\n    /**\r\n     * Get the friendly name associated with the input class.\r\n     * @returns the input friendly name\r\n     */\r\n    public getSimpleName(): string {\r\n        return \"keyboard\";\r\n    }\r\n}\r\n\r\n(<any>CameraInputTypes)[\"ArcRotateCameraKeyboardMoveInput\"] = ArcRotateCameraKeyboardMoveInput;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}