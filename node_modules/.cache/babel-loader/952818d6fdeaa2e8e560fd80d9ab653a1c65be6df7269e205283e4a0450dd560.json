{"ast":null,"code":"import { WebXRFeaturesManager, WebXRFeatureName } from \"../webXRFeaturesManager.js\";\nimport { WebXRAbstractFeature } from \"./WebXRAbstractFeature.js\";\nimport { Observable } from \"../../Misc/observable.js\";\nimport { Vector3, TmpVectors } from \"../../Maths/math.vector.js\";\nimport { Ray } from \"../../Culling/ray.js\";\n/**\n * The WebXR Eye Tracking feature grabs eye data from the device and provides it in an easy-access format.\n * Currently only enabled for BabylonNative applications.\n */\nexport class WebXREyeTracking extends WebXRAbstractFeature {\n  /**\n   * Creates a new instance of the XR eye tracking feature.\n   * @param _xrSessionManager An instance of WebXRSessionManager.\n   */\n  constructor(_xrSessionManager) {\n    super(_xrSessionManager);\n    /**\n     * This observable will notify registered observers when eye tracking starts\n     */\n    this.onEyeTrackingStartedObservable = new Observable();\n    /**\n     * This observable will notify registered observers when eye tracking ends\n     */\n    this.onEyeTrackingEndedObservable = new Observable();\n    /**\n     * This observable will notify registered observers on each frame that has valid tracking\n     */\n    this.onEyeTrackingFrameUpdateObservable = new Observable();\n    this._eyeTrackingStartListener = event => {\n      this._latestEyeSpace = event.gazeSpace;\n      this._gazeRay = new Ray(Vector3.Zero(), Vector3.Forward());\n      this.onEyeTrackingStartedObservable.notifyObservers(this._gazeRay);\n    };\n    this._eyeTrackingEndListener = () => {\n      this._latestEyeSpace = null;\n      this._gazeRay = null;\n      this.onEyeTrackingEndedObservable.notifyObservers();\n    };\n    this.xrNativeFeatureName = \"eye-tracking\";\n    if (this._xrSessionManager.session) {\n      this._init();\n    } else {\n      this._xrSessionManager.onXRSessionInit.addOnce(() => {\n        this._init();\n      });\n    }\n  }\n  /**\n   * Dispose this feature and all of the resources attached.\n   */\n  dispose() {\n    super.dispose();\n    this._xrSessionManager.session.removeEventListener(\"eyetrackingstart\", this._eyeTrackingStartListener);\n    this._xrSessionManager.session.removeEventListener(\"eyetrackingend\", this._eyeTrackingEndListener);\n    this.onEyeTrackingStartedObservable.clear();\n    this.onEyeTrackingEndedObservable.clear();\n    this.onEyeTrackingFrameUpdateObservable.clear();\n  }\n  /**\n   * Returns whether the gaze data is valid or not\n   * @returns true if the data is valid\n   */\n  get isEyeGazeValid() {\n    return !!this._gazeRay;\n  }\n  /**\n   * Get a reference to the gaze ray. This data is valid while eye tracking persists, and will be set to null when gaze data is no longer available\n   * @returns a reference to the gaze ray if it exists and is valid, returns null otherwise.\n   */\n  getEyeGaze() {\n    return this._gazeRay;\n  }\n  _onXRFrame(frame) {\n    if (!this.attached || !frame) {\n      return;\n    }\n    if (this._latestEyeSpace && this._gazeRay) {\n      const pose = frame.getPose(this._latestEyeSpace, this._xrSessionManager.referenceSpace);\n      if (pose) {\n        this._gazeRay.origin.set(pose.transform.position.x, pose.transform.position.y, pose.transform.position.z);\n        const quat = pose.transform.orientation;\n        TmpVectors.Quaternion[0].set(quat.x, quat.y, quat.z, quat.w);\n        if (!this._xrSessionManager.scene.useRightHandedSystem) {\n          this._gazeRay.origin.z *= -1;\n          TmpVectors.Quaternion[0].z *= -1;\n          TmpVectors.Quaternion[0].w *= -1;\n          Vector3.LeftHandedForwardReadOnly.rotateByQuaternionToRef(TmpVectors.Quaternion[0], this._gazeRay.direction);\n        } else {\n          Vector3.RightHandedForwardReadOnly.rotateByQuaternionToRef(TmpVectors.Quaternion[0], this._gazeRay.direction);\n        }\n        this.onEyeTrackingFrameUpdateObservable.notifyObservers(this._gazeRay);\n      }\n    }\n  }\n  _init() {\n    // Only supported by BabylonNative\n    if (this._xrSessionManager.isNative) {\n      this._xrSessionManager.session.addEventListener(\"eyetrackingstart\", this._eyeTrackingStartListener);\n      this._xrSessionManager.session.addEventListener(\"eyetrackingend\", this._eyeTrackingEndListener);\n    }\n  }\n}\n/**\n * The module's name\n */\nWebXREyeTracking.Name = WebXRFeatureName.EYE_TRACKING;\n/**\n * The (Babylon) version of this module.\n * This is an integer representing the implementation version.\n * This number does not correspond to the WebXR specs version\n */\nWebXREyeTracking.Version = 1;\nWebXRFeaturesManager.AddWebXRFeature(WebXREyeTracking.Name, xrSessionManager => {\n  return () => new WebXREyeTracking(xrSessionManager);\n}, WebXREyeTracking.Version, false);","map":{"version":3,"names":["WebXRFeaturesManager","WebXRFeatureName","WebXRAbstractFeature","Observable","Vector3","TmpVectors","Ray","WebXREyeTracking","constructor","_xrSessionManager","onEyeTrackingStartedObservable","onEyeTrackingEndedObservable","onEyeTrackingFrameUpdateObservable","_eyeTrackingStartListener","event","_latestEyeSpace","gazeSpace","_gazeRay","Zero","Forward","notifyObservers","_eyeTrackingEndListener","xrNativeFeatureName","session","_init","onXRSessionInit","addOnce","dispose","removeEventListener","clear","isEyeGazeValid","getEyeGaze","_onXRFrame","frame","attached","pose","getPose","referenceSpace","origin","set","transform","position","x","y","z","quat","orientation","Quaternion","w","scene","useRightHandedSystem","LeftHandedForwardReadOnly","rotateByQuaternionToRef","direction","RightHandedForwardReadOnly","isNative","addEventListener","Name","EYE_TRACKING","Version","AddWebXRFeature","xrSessionManager"],"sources":["../../../../../dev/core/src/XR/features/WebXREyeTracking.ts"],"sourcesContent":["import { WebXRFeaturesManager, WebXRFeatureName } from \"../webXRFeaturesManager\";\r\nimport { WebXRAbstractFeature } from \"./WebXRAbstractFeature\";\r\nimport type { WebXRSessionManager } from \"../webXRSessionManager\";\r\nimport { Observable } from \"../../Misc/observable\";\r\nimport { Vector3, TmpVectors } from \"../../Maths/math.vector\";\r\nimport { Ray } from \"../../Culling/ray\";\r\nimport type { Nullable } from \"../../types\";\r\n\r\n/**\r\n * The WebXR Eye Tracking feature grabs eye data from the device and provides it in an easy-access format.\r\n * Currently only enabled for BabylonNative applications.\r\n */\r\nexport class WebXREyeTracking extends WebXRAbstractFeature {\r\n    private _latestEyeSpace: Nullable<XRSpace>;\r\n    private _gazeRay: Nullable<Ray>;\r\n\r\n    /**\r\n     * The module's name\r\n     */\r\n    public static readonly Name = WebXRFeatureName.EYE_TRACKING;\r\n    /**\r\n     * The (Babylon) version of this module.\r\n     * This is an integer representing the implementation version.\r\n     * This number does not correspond to the WebXR specs version\r\n     */\r\n    public static readonly Version = 1;\r\n\r\n    /**\r\n     * This observable will notify registered observers when eye tracking starts\r\n     */\r\n    public readonly onEyeTrackingStartedObservable: Observable<Ray> = new Observable();\r\n    /**\r\n     * This observable will notify registered observers when eye tracking ends\r\n     */\r\n    public readonly onEyeTrackingEndedObservable: Observable<void> = new Observable();\r\n    /**\r\n     * This observable will notify registered observers on each frame that has valid tracking\r\n     */\r\n    public readonly onEyeTrackingFrameUpdateObservable: Observable<Ray> = new Observable();\r\n\r\n    /**\r\n     * Creates a new instance of the XR eye tracking feature.\r\n     * @param _xrSessionManager An instance of WebXRSessionManager.\r\n     */\r\n    constructor(_xrSessionManager: WebXRSessionManager) {\r\n        super(_xrSessionManager);\r\n        this.xrNativeFeatureName = \"eye-tracking\";\r\n        if (this._xrSessionManager.session) {\r\n            this._init();\r\n        } else {\r\n            this._xrSessionManager.onXRSessionInit.addOnce(() => {\r\n                this._init();\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Dispose this feature and all of the resources attached.\r\n     */\r\n    public dispose(): void {\r\n        super.dispose();\r\n\r\n        this._xrSessionManager.session.removeEventListener(\"eyetrackingstart\", this._eyeTrackingStartListener);\r\n        this._xrSessionManager.session.removeEventListener(\"eyetrackingend\", this._eyeTrackingEndListener);\r\n\r\n        this.onEyeTrackingStartedObservable.clear();\r\n        this.onEyeTrackingEndedObservable.clear();\r\n        this.onEyeTrackingFrameUpdateObservable.clear();\r\n    }\r\n\r\n    /**\r\n     * Returns whether the gaze data is valid or not\r\n     * @returns true if the data is valid\r\n     */\r\n    public get isEyeGazeValid(): boolean {\r\n        return !!this._gazeRay;\r\n    }\r\n\r\n    /**\r\n     * Get a reference to the gaze ray. This data is valid while eye tracking persists, and will be set to null when gaze data is no longer available\r\n     * @returns a reference to the gaze ray if it exists and is valid, returns null otherwise.\r\n     */\r\n    public getEyeGaze(): Nullable<Ray> {\r\n        return this._gazeRay;\r\n    }\r\n\r\n    protected _onXRFrame(frame: XRFrame) {\r\n        if (!this.attached || !frame) {\r\n            return;\r\n        }\r\n\r\n        if (this._latestEyeSpace && this._gazeRay) {\r\n            const pose = frame.getPose(this._latestEyeSpace, this._xrSessionManager.referenceSpace);\r\n            if (pose) {\r\n                this._gazeRay.origin.set(pose.transform.position.x, pose.transform.position.y, pose.transform.position.z);\r\n                const quat = pose.transform.orientation;\r\n                TmpVectors.Quaternion[0].set(quat.x, quat.y, quat.z, quat.w);\r\n\r\n                if (!this._xrSessionManager.scene.useRightHandedSystem) {\r\n                    this._gazeRay.origin.z *= -1;\r\n                    TmpVectors.Quaternion[0].z *= -1;\r\n                    TmpVectors.Quaternion[0].w *= -1;\r\n\r\n                    Vector3.LeftHandedForwardReadOnly.rotateByQuaternionToRef(TmpVectors.Quaternion[0], this._gazeRay.direction);\r\n                } else {\r\n                    Vector3.RightHandedForwardReadOnly.rotateByQuaternionToRef(TmpVectors.Quaternion[0], this._gazeRay.direction);\r\n                }\r\n\r\n                this.onEyeTrackingFrameUpdateObservable.notifyObservers(this._gazeRay);\r\n            }\r\n        }\r\n    }\r\n\r\n    private _eyeTrackingStartListener = (event: XREyeTrackingSourceEvent) => {\r\n        this._latestEyeSpace = event.gazeSpace;\r\n        this._gazeRay = new Ray(Vector3.Zero(), Vector3.Forward());\r\n        this.onEyeTrackingStartedObservable.notifyObservers(this._gazeRay);\r\n    };\r\n\r\n    private _eyeTrackingEndListener = () => {\r\n        this._latestEyeSpace = null;\r\n        this._gazeRay = null;\r\n        this.onEyeTrackingEndedObservable.notifyObservers();\r\n    };\r\n\r\n    private _init() {\r\n        // Only supported by BabylonNative\r\n        if (this._xrSessionManager.isNative) {\r\n            this._xrSessionManager.session.addEventListener(\"eyetrackingstart\", this._eyeTrackingStartListener);\r\n            this._xrSessionManager.session.addEventListener(\"eyetrackingend\", this._eyeTrackingEndListener);\r\n        }\r\n    }\r\n}\r\n\r\nWebXRFeaturesManager.AddWebXRFeature(\r\n    WebXREyeTracking.Name,\r\n    (xrSessionManager) => {\r\n        return () => new WebXREyeTracking(xrSessionManager);\r\n    },\r\n    WebXREyeTracking.Version,\r\n    false\r\n);\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}