{"ast":null,"code":"import \"core-js/modules/es.typed-array.to-reversed.js\";\nimport \"core-js/modules/es.typed-array.to-sorted.js\";\nimport \"core-js/modules/es.typed-array.with.js\";\nimport { __decorate } from \"../../../tslib.es6.js\";\n/* eslint-disable @typescript-eslint/naming-convention */\nimport { Vector2, TmpVectors } from \"../../../Maths/math.vector.js\";\nimport { Texture } from \"../../../Materials/Textures/texture.js\";\nimport { PostProcess } from \"../../../PostProcesses/postProcess.js\";\nimport { PostProcessRenderPipeline } from \"../../../PostProcesses/RenderPipeline/postProcessRenderPipeline.js\";\nimport { PostProcessRenderEffect } from \"../../../PostProcesses/RenderPipeline/postProcessRenderEffect.js\";\nimport { PassPostProcess } from \"../../../PostProcesses/passPostProcess.js\";\nimport { BlurPostProcess } from \"../../../PostProcesses/blurPostProcess.js\";\nimport { serialize } from \"../../../Misc/decorators.js\";\nimport { RawTexture } from \"../../../Materials/Textures/rawTexture.js\";\nimport { Scalar } from \"../../../Maths/math.scalar.js\";\nimport \"../../../PostProcesses/RenderPipeline/postProcessRenderPipelineManagerSceneComponent.js\";\nimport \"../../../Shaders/ssao.fragment.js\";\nimport \"../../../Shaders/ssaoCombine.fragment.js\";\n/**\n * Render pipeline to produce ssao effect\n */\nexport class SSAORenderingPipeline extends PostProcessRenderPipeline {\n  /**\n   * Gets active scene\n   */\n  get scene() {\n    return this._scene;\n  }\n  /**\n   * @constructor\n   * @param name - The rendering pipeline name\n   * @param scene - The scene linked to this pipeline\n   * @param ratio - The size of the postprocesses. Can be a number shared between passes or an object for more precision: { ssaoRatio: 0.5, combineRatio: 1.0 }\n   * @param cameras - The array of cameras that the rendering pipeline will be attached to\n   */\n  constructor(name, scene, ratio, cameras) {\n    super(scene.getEngine(), name);\n    // Members\n    /**\n     * @ignore\n     * The PassPostProcess id in the pipeline that contains the original scene color\n     */\n    this.SSAOOriginalSceneColorEffect = \"SSAOOriginalSceneColorEffect\";\n    /**\n     * @ignore\n     * The SSAO PostProcess id in the pipeline\n     */\n    this.SSAORenderEffect = \"SSAORenderEffect\";\n    /**\n     * @ignore\n     * The horizontal blur PostProcess id in the pipeline\n     */\n    this.SSAOBlurHRenderEffect = \"SSAOBlurHRenderEffect\";\n    /**\n     * @ignore\n     * The vertical blur PostProcess id in the pipeline\n     */\n    this.SSAOBlurVRenderEffect = \"SSAOBlurVRenderEffect\";\n    /**\n     * @ignore\n     * The PostProcess id in the pipeline that combines the SSAO-Blur output with the original scene color (SSAOOriginalSceneColorEffect)\n     */\n    this.SSAOCombineRenderEffect = \"SSAOCombineRenderEffect\";\n    /**\n     * The output strength of the SSAO post-process. Default value is 1.0.\n     */\n    this.totalStrength = 1.0;\n    /**\n     * The radius around the analyzed pixel used by the SSAO post-process. Default value is 0.0006\n     */\n    this.radius = 0.0001;\n    /**\n     * Related to fallOff, used to interpolate SSAO samples (first interpolate function input) based on the occlusion difference of each pixel\n     * Must not be equal to fallOff and superior to fallOff.\n     * Default value is 0.0075\n     */\n    this.area = 0.0075;\n    /**\n     * Related to area, used to interpolate SSAO samples (second interpolate function input) based on the occlusion difference of each pixel\n     * Must not be equal to area and inferior to area.\n     * Default value is 0.000001\n     */\n    this.fallOff = 0.000001;\n    /**\n     * The base color of the SSAO post-process\n     * The final result is \"base + ssao\" between [0, 1]\n     */\n    this.base = 0.5;\n    this._firstUpdate = true;\n    this._scene = scene;\n    // Set up assets\n    this._createRandomTexture();\n    const ssaoRatio = ratio.ssaoRatio || ratio;\n    const combineRatio = ratio.combineRatio || ratio;\n    this._originalColorPostProcess = new PassPostProcess(\"SSAOOriginalSceneColor\", combineRatio, null, Texture.BILINEAR_SAMPLINGMODE, scene.getEngine(), false);\n    this._createSSAOPostProcess(ssaoRatio);\n    this._createBlurPostProcess(ssaoRatio);\n    this._createSSAOCombinePostProcess(combineRatio);\n    // Set up pipeline\n    this.addEffect(new PostProcessRenderEffect(scene.getEngine(), this.SSAOOriginalSceneColorEffect, () => {\n      return this._originalColorPostProcess;\n    }, true));\n    this.addEffect(new PostProcessRenderEffect(scene.getEngine(), this.SSAORenderEffect, () => {\n      return this._ssaoPostProcess;\n    }, true));\n    this.addEffect(new PostProcessRenderEffect(scene.getEngine(), this.SSAOBlurHRenderEffect, () => {\n      return this._blurHPostProcess;\n    }, true));\n    this.addEffect(new PostProcessRenderEffect(scene.getEngine(), this.SSAOBlurVRenderEffect, () => {\n      return this._blurVPostProcess;\n    }, true));\n    this.addEffect(new PostProcessRenderEffect(scene.getEngine(), this.SSAOCombineRenderEffect, () => {\n      return this._ssaoCombinePostProcess;\n    }, true));\n    // Finish\n    scene.postProcessRenderPipelineManager.addPipeline(this);\n    if (cameras) {\n      scene.postProcessRenderPipelineManager.attachCamerasToRenderPipeline(name, cameras);\n    }\n  }\n  /**\n   * @internal\n   */\n  _attachCameras(cameras, unique) {\n    super._attachCameras(cameras, unique);\n    for (const camera of this._cameras) {\n      this._scene.enableDepthRenderer(camera).getDepthMap(); // Force depth renderer \"on\"\n    }\n  }\n  // Public Methods\n  /**\n   * Get the class name\n   * @returns \"SSAORenderingPipeline\"\n   */\n  getClassName() {\n    return \"SSAORenderingPipeline\";\n  }\n  /**\n   * Removes the internal pipeline assets and detaches the pipeline from the scene cameras\n   * @param disableDepthRender\n   */\n  dispose(disableDepthRender = false) {\n    for (let i = 0; i < this._scene.cameras.length; i++) {\n      const camera = this._scene.cameras[i];\n      this._originalColorPostProcess.dispose(camera);\n      this._ssaoPostProcess.dispose(camera);\n      this._blurHPostProcess.dispose(camera);\n      this._blurVPostProcess.dispose(camera);\n      this._ssaoCombinePostProcess.dispose(camera);\n    }\n    this._randomTexture.dispose();\n    if (disableDepthRender) {\n      this._scene.disableDepthRenderer();\n    }\n    this._scene.postProcessRenderPipelineManager.detachCamerasFromRenderPipeline(this._name, this._scene.cameras);\n    super.dispose();\n  }\n  // Private Methods\n  _createBlurPostProcess(ratio) {\n    const size = 16;\n    this._blurHPostProcess = new BlurPostProcess(\"BlurH\", new Vector2(1, 0), size, ratio, null, Texture.BILINEAR_SAMPLINGMODE, this._scene.getEngine(), false, 0);\n    this._blurVPostProcess = new BlurPostProcess(\"BlurV\", new Vector2(0, 1), size, ratio, null, Texture.BILINEAR_SAMPLINGMODE, this._scene.getEngine(), false, 0);\n    this._blurHPostProcess.onActivateObservable.add(() => {\n      const dw = this._blurHPostProcess.width / this._scene.getEngine().getRenderWidth();\n      this._blurHPostProcess.kernel = size * dw;\n    });\n    this._blurVPostProcess.onActivateObservable.add(() => {\n      const dw = this._blurVPostProcess.height / this._scene.getEngine().getRenderHeight();\n      this._blurVPostProcess.kernel = size * dw;\n    });\n  }\n  /** @internal */\n  _rebuild() {\n    this._firstUpdate = true;\n    super._rebuild();\n  }\n  _createSSAOPostProcess(ratio) {\n    const numSamples = 16;\n    const sampleSphere = [0.5381, 0.1856, -0.4319, 0.1379, 0.2486, 0.443, 0.3371, 0.5679, -0.0057, -0.6999, -0.0451, -0.0019, 0.0689, -0.1598, -0.8547, 0.056, 0.0069, -0.1843, -0.0146, 0.1402, 0.0762, 0.01, -0.1924, -0.0344, -0.3577, -0.5301, -0.4358, -0.3169, 0.1063, 0.0158, 0.0103, -0.5869, 0.0046, -0.0897, -0.494, 0.3287, 0.7119, -0.0154, -0.0918, -0.0533, 0.0596, -0.5411, 0.0352, -0.0631, 0.546, -0.4776, 0.2847, -0.0271];\n    const samplesFactor = 1.0 / numSamples;\n    this._ssaoPostProcess = new PostProcess(\"ssao\", \"ssao\", [\"sampleSphere\", \"samplesFactor\", \"randTextureTiles\", \"totalStrength\", \"radius\", \"area\", \"fallOff\", \"base\", \"range\", \"viewport\"], [\"randomSampler\"], ratio, null, Texture.BILINEAR_SAMPLINGMODE, this._scene.getEngine(), false, \"#define SAMPLES \" + numSamples + \"\\n#define SSAO\");\n    this._ssaoPostProcess.externalTextureSamplerBinding = true;\n    this._ssaoPostProcess.onApply = effect => {\n      if (this._firstUpdate) {\n        effect.setArray3(\"sampleSphere\", sampleSphere);\n        effect.setFloat(\"samplesFactor\", samplesFactor);\n        effect.setFloat(\"randTextureTiles\", 4.0);\n      }\n      effect.setFloat(\"totalStrength\", this.totalStrength);\n      effect.setFloat(\"radius\", this.radius);\n      effect.setFloat(\"area\", this.area);\n      effect.setFloat(\"fallOff\", this.fallOff);\n      effect.setFloat(\"base\", this.base);\n      effect.setTexture(\"textureSampler\", this._scene.enableDepthRenderer(this._scene.activeCamera).getDepthMap());\n      effect.setTexture(\"randomSampler\", this._randomTexture);\n    };\n  }\n  _createSSAOCombinePostProcess(ratio) {\n    this._ssaoCombinePostProcess = new PostProcess(\"ssaoCombine\", \"ssaoCombine\", [], [\"originalColor\", \"viewport\"], ratio, null, Texture.BILINEAR_SAMPLINGMODE, this._scene.getEngine(), false);\n    this._ssaoCombinePostProcess.onApply = effect => {\n      effect.setVector4(\"viewport\", TmpVectors.Vector4[0].copyFromFloats(0, 0, 1.0, 1.0));\n      effect.setTextureFromPostProcess(\"originalColor\", this._originalColorPostProcess);\n    };\n  }\n  _createRandomTexture() {\n    const size = 512;\n    const data = new Uint8Array(size * size * 4);\n    for (let index = 0; index < data.length;) {\n      data[index++] = Math.floor(Math.max(0.0, Scalar.RandomRange(-1.0, 1.0)) * 255);\n      data[index++] = Math.floor(Math.max(0.0, Scalar.RandomRange(-1.0, 1.0)) * 255);\n      data[index++] = Math.floor(Math.max(0.0, Scalar.RandomRange(-1.0, 1.0)) * 255);\n      data[index++] = 255;\n    }\n    const texture = RawTexture.CreateRGBATexture(data, size, size, this._scene, false, false, 2);\n    texture.name = \"SSAORandomTexture\";\n    texture.wrapU = Texture.WRAP_ADDRESSMODE;\n    texture.wrapV = Texture.WRAP_ADDRESSMODE;\n    this._randomTexture = texture;\n  }\n}\n__decorate([serialize()], SSAORenderingPipeline.prototype, \"totalStrength\", void 0);\n__decorate([serialize()], SSAORenderingPipeline.prototype, \"radius\", void 0);\n__decorate([serialize()], SSAORenderingPipeline.prototype, \"area\", void 0);\n__decorate([serialize()], SSAORenderingPipeline.prototype, \"fallOff\", void 0);\n__decorate([serialize()], SSAORenderingPipeline.prototype, \"base\", void 0);","map":{"version":3,"names":["Vector2","TmpVectors","Texture","PostProcess","PostProcessRenderPipeline","PostProcessRenderEffect","PassPostProcess","BlurPostProcess","serialize","RawTexture","Scalar","SSAORenderingPipeline","scene","_scene","constructor","name","ratio","cameras","getEngine","SSAOOriginalSceneColorEffect","SSAORenderEffect","SSAOBlurHRenderEffect","SSAOBlurVRenderEffect","SSAOCombineRenderEffect","totalStrength","radius","area","fallOff","base","_firstUpdate","_createRandomTexture","ssaoRatio","combineRatio","_originalColorPostProcess","BILINEAR_SAMPLINGMODE","_createSSAOPostProcess","_createBlurPostProcess","_createSSAOCombinePostProcess","addEffect","_ssaoPostProcess","_blurHPostProcess","_blurVPostProcess","_ssaoCombinePostProcess","postProcessRenderPipelineManager","addPipeline","attachCamerasToRenderPipeline","_attachCameras","unique","camera","_cameras","enableDepthRenderer","getDepthMap","getClassName","dispose","disableDepthRender","i","length","_randomTexture","disableDepthRenderer","detachCamerasFromRenderPipeline","_name","size","onActivateObservable","add","dw","width","getRenderWidth","kernel","height","getRenderHeight","_rebuild","numSamples","sampleSphere","samplesFactor","externalTextureSamplerBinding","onApply","effect","setArray3","setFloat","setTexture","activeCamera","setVector4","Vector4","copyFromFloats","setTextureFromPostProcess","data","Uint8Array","index","Math","floor","max","RandomRange","texture","CreateRGBATexture","wrapU","WRAP_ADDRESSMODE","wrapV","__decorate"],"sources":["../../../../../../dev/core/src/PostProcesses/RenderPipeline/Pipelines/ssaoRenderingPipeline.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/naming-convention */\r\nimport { Vector2, TmpVectors } from \"../../../Maths/math.vector\";\r\nimport type { Camera } from \"../../../Cameras/camera\";\r\nimport type { Effect } from \"../../../Materials/effect\";\r\nimport { Texture } from \"../../../Materials/Textures/texture\";\r\nimport { PostProcess } from \"../../../PostProcesses/postProcess\";\r\nimport { PostProcessRenderPipeline } from \"../../../PostProcesses/RenderPipeline/postProcessRenderPipeline\";\r\nimport { PostProcessRenderEffect } from \"../../../PostProcesses/RenderPipeline/postProcessRenderEffect\";\r\nimport { PassPostProcess } from \"../../../PostProcesses/passPostProcess\";\r\nimport { BlurPostProcess } from \"../../../PostProcesses/blurPostProcess\";\r\nimport { Constants } from \"../../../Engines/constants\";\r\nimport { serialize } from \"../../../Misc/decorators\";\r\nimport type { Scene } from \"../../../scene\";\r\nimport { RawTexture } from \"../../../Materials/Textures/rawTexture\";\r\nimport { Scalar } from \"../../../Maths/math.scalar\";\r\n\r\nimport \"../../../PostProcesses/RenderPipeline/postProcessRenderPipelineManagerSceneComponent\";\r\n\r\nimport \"../../../Shaders/ssao.fragment\";\r\nimport \"../../../Shaders/ssaoCombine.fragment\";\r\n\r\n/**\r\n * Render pipeline to produce ssao effect\r\n */\r\nexport class SSAORenderingPipeline extends PostProcessRenderPipeline {\r\n    // Members\r\n\r\n    /**\r\n     * @ignore\r\n     * The PassPostProcess id in the pipeline that contains the original scene color\r\n     */\r\n    public SSAOOriginalSceneColorEffect: string = \"SSAOOriginalSceneColorEffect\";\r\n    /**\r\n     * @ignore\r\n     * The SSAO PostProcess id in the pipeline\r\n     */\r\n    public SSAORenderEffect: string = \"SSAORenderEffect\";\r\n    /**\r\n     * @ignore\r\n     * The horizontal blur PostProcess id in the pipeline\r\n     */\r\n    public SSAOBlurHRenderEffect: string = \"SSAOBlurHRenderEffect\";\r\n    /**\r\n     * @ignore\r\n     * The vertical blur PostProcess id in the pipeline\r\n     */\r\n    public SSAOBlurVRenderEffect: string = \"SSAOBlurVRenderEffect\";\r\n    /**\r\n     * @ignore\r\n     * The PostProcess id in the pipeline that combines the SSAO-Blur output with the original scene color (SSAOOriginalSceneColorEffect)\r\n     */\r\n    public SSAOCombineRenderEffect: string = \"SSAOCombineRenderEffect\";\r\n\r\n    /**\r\n     * The output strength of the SSAO post-process. Default value is 1.0.\r\n     */\r\n    @serialize()\r\n    public totalStrength: number = 1.0;\r\n\r\n    /**\r\n     * The radius around the analyzed pixel used by the SSAO post-process. Default value is 0.0006\r\n     */\r\n    @serialize()\r\n    public radius: number = 0.0001;\r\n\r\n    /**\r\n     * Related to fallOff, used to interpolate SSAO samples (first interpolate function input) based on the occlusion difference of each pixel\r\n     * Must not be equal to fallOff and superior to fallOff.\r\n     * Default value is 0.0075\r\n     */\r\n    @serialize()\r\n    public area: number = 0.0075;\r\n\r\n    /**\r\n     * Related to area, used to interpolate SSAO samples (second interpolate function input) based on the occlusion difference of each pixel\r\n     * Must not be equal to area and inferior to area.\r\n     * Default value is 0.000001\r\n     */\r\n    @serialize()\r\n    public fallOff: number = 0.000001;\r\n\r\n    /**\r\n     * The base color of the SSAO post-process\r\n     * The final result is \"base + ssao\" between [0, 1]\r\n     */\r\n    @serialize()\r\n    public base: number = 0.5;\r\n\r\n    private _scene: Scene;\r\n    private _randomTexture: Texture;\r\n\r\n    private _originalColorPostProcess: PassPostProcess;\r\n    private _ssaoPostProcess: PostProcess;\r\n    private _blurHPostProcess: BlurPostProcess;\r\n    private _blurVPostProcess: BlurPostProcess;\r\n    private _ssaoCombinePostProcess: PostProcess;\r\n\r\n    private _firstUpdate: boolean = true;\r\n\r\n    /**\r\n     * Gets active scene\r\n     */\r\n    public get scene(): Scene {\r\n        return this._scene;\r\n    }\r\n\r\n    /**\r\n     * @constructor\r\n     * @param name - The rendering pipeline name\r\n     * @param scene - The scene linked to this pipeline\r\n     * @param ratio - The size of the postprocesses. Can be a number shared between passes or an object for more precision: { ssaoRatio: 0.5, combineRatio: 1.0 }\r\n     * @param cameras - The array of cameras that the rendering pipeline will be attached to\r\n     */\r\n    constructor(name: string, scene: Scene, ratio: any, cameras?: Camera[]) {\r\n        super(scene.getEngine(), name);\r\n\r\n        this._scene = scene;\r\n\r\n        // Set up assets\r\n        this._createRandomTexture();\r\n\r\n        const ssaoRatio = ratio.ssaoRatio || ratio;\r\n        const combineRatio = ratio.combineRatio || ratio;\r\n\r\n        this._originalColorPostProcess = new PassPostProcess(\"SSAOOriginalSceneColor\", combineRatio, null, Texture.BILINEAR_SAMPLINGMODE, scene.getEngine(), false);\r\n        this._createSSAOPostProcess(ssaoRatio);\r\n        this._createBlurPostProcess(ssaoRatio);\r\n        this._createSSAOCombinePostProcess(combineRatio);\r\n\r\n        // Set up pipeline\r\n        this.addEffect(\r\n            new PostProcessRenderEffect(\r\n                scene.getEngine(),\r\n                this.SSAOOriginalSceneColorEffect,\r\n                () => {\r\n                    return this._originalColorPostProcess;\r\n                },\r\n                true\r\n            )\r\n        );\r\n        this.addEffect(\r\n            new PostProcessRenderEffect(\r\n                scene.getEngine(),\r\n                this.SSAORenderEffect,\r\n                () => {\r\n                    return this._ssaoPostProcess;\r\n                },\r\n                true\r\n            )\r\n        );\r\n        this.addEffect(\r\n            new PostProcessRenderEffect(\r\n                scene.getEngine(),\r\n                this.SSAOBlurHRenderEffect,\r\n                () => {\r\n                    return this._blurHPostProcess;\r\n                },\r\n                true\r\n            )\r\n        );\r\n        this.addEffect(\r\n            new PostProcessRenderEffect(\r\n                scene.getEngine(),\r\n                this.SSAOBlurVRenderEffect,\r\n                () => {\r\n                    return this._blurVPostProcess;\r\n                },\r\n                true\r\n            )\r\n        );\r\n\r\n        this.addEffect(\r\n            new PostProcessRenderEffect(\r\n                scene.getEngine(),\r\n                this.SSAOCombineRenderEffect,\r\n                () => {\r\n                    return this._ssaoCombinePostProcess;\r\n                },\r\n                true\r\n            )\r\n        );\r\n\r\n        // Finish\r\n        scene.postProcessRenderPipelineManager.addPipeline(this);\r\n        if (cameras) {\r\n            scene.postProcessRenderPipelineManager.attachCamerasToRenderPipeline(name, cameras);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _attachCameras(cameras: any, unique: boolean): void {\r\n        super._attachCameras(cameras, unique);\r\n\r\n        for (const camera of this._cameras) {\r\n            this._scene.enableDepthRenderer(camera).getDepthMap(); // Force depth renderer \"on\"\r\n        }\r\n    }\r\n\r\n    // Public Methods\r\n\r\n    /**\r\n     * Get the class name\r\n     * @returns \"SSAORenderingPipeline\"\r\n     */\r\n    public getClassName(): string {\r\n        return \"SSAORenderingPipeline\";\r\n    }\r\n\r\n    /**\r\n     * Removes the internal pipeline assets and detaches the pipeline from the scene cameras\r\n     * @param disableDepthRender\r\n     */\r\n    public dispose(disableDepthRender: boolean = false): void {\r\n        for (let i = 0; i < this._scene.cameras.length; i++) {\r\n            const camera = this._scene.cameras[i];\r\n\r\n            this._originalColorPostProcess.dispose(camera);\r\n            this._ssaoPostProcess.dispose(camera);\r\n            this._blurHPostProcess.dispose(camera);\r\n            this._blurVPostProcess.dispose(camera);\r\n            this._ssaoCombinePostProcess.dispose(camera);\r\n        }\r\n\r\n        this._randomTexture.dispose();\r\n\r\n        if (disableDepthRender) {\r\n            this._scene.disableDepthRenderer();\r\n        }\r\n\r\n        this._scene.postProcessRenderPipelineManager.detachCamerasFromRenderPipeline(this._name, this._scene.cameras);\r\n\r\n        super.dispose();\r\n    }\r\n\r\n    // Private Methods\r\n    private _createBlurPostProcess(ratio: number): void {\r\n        const size = 16;\r\n\r\n        this._blurHPostProcess = new BlurPostProcess(\r\n            \"BlurH\",\r\n            new Vector2(1, 0),\r\n            size,\r\n            ratio,\r\n            null,\r\n            Texture.BILINEAR_SAMPLINGMODE,\r\n            this._scene.getEngine(),\r\n            false,\r\n            Constants.TEXTURETYPE_UNSIGNED_INT\r\n        );\r\n        this._blurVPostProcess = new BlurPostProcess(\r\n            \"BlurV\",\r\n            new Vector2(0, 1),\r\n            size,\r\n            ratio,\r\n            null,\r\n            Texture.BILINEAR_SAMPLINGMODE,\r\n            this._scene.getEngine(),\r\n            false,\r\n            Constants.TEXTURETYPE_UNSIGNED_INT\r\n        );\r\n\r\n        this._blurHPostProcess.onActivateObservable.add(() => {\r\n            const dw = this._blurHPostProcess.width / this._scene.getEngine().getRenderWidth();\r\n            this._blurHPostProcess.kernel = size * dw;\r\n        });\r\n\r\n        this._blurVPostProcess.onActivateObservable.add(() => {\r\n            const dw = this._blurVPostProcess.height / this._scene.getEngine().getRenderHeight();\r\n            this._blurVPostProcess.kernel = size * dw;\r\n        });\r\n    }\r\n\r\n    /** @internal */\r\n    public _rebuild() {\r\n        this._firstUpdate = true;\r\n        super._rebuild();\r\n    }\r\n\r\n    private _createSSAOPostProcess(ratio: number): void {\r\n        const numSamples = 16;\r\n        const sampleSphere = [\r\n            0.5381, 0.1856, -0.4319, 0.1379, 0.2486, 0.443, 0.3371, 0.5679, -0.0057, -0.6999, -0.0451, -0.0019, 0.0689, -0.1598, -0.8547, 0.056, 0.0069, -0.1843, -0.0146, 0.1402,\r\n            0.0762, 0.01, -0.1924, -0.0344, -0.3577, -0.5301, -0.4358, -0.3169, 0.1063, 0.0158, 0.0103, -0.5869, 0.0046, -0.0897, -0.494, 0.3287, 0.7119, -0.0154, -0.0918, -0.0533,\r\n            0.0596, -0.5411, 0.0352, -0.0631, 0.546, -0.4776, 0.2847, -0.0271,\r\n        ];\r\n        const samplesFactor = 1.0 / numSamples;\r\n\r\n        this._ssaoPostProcess = new PostProcess(\r\n            \"ssao\",\r\n            \"ssao\",\r\n            [\"sampleSphere\", \"samplesFactor\", \"randTextureTiles\", \"totalStrength\", \"radius\", \"area\", \"fallOff\", \"base\", \"range\", \"viewport\"],\r\n            [\"randomSampler\"],\r\n            ratio,\r\n            null,\r\n            Texture.BILINEAR_SAMPLINGMODE,\r\n            this._scene.getEngine(),\r\n            false,\r\n            \"#define SAMPLES \" + numSamples + \"\\n#define SSAO\"\r\n        );\r\n\r\n        this._ssaoPostProcess.externalTextureSamplerBinding = true;\r\n        this._ssaoPostProcess.onApply = (effect: Effect) => {\r\n            if (this._firstUpdate) {\r\n                effect.setArray3(\"sampleSphere\", sampleSphere);\r\n                effect.setFloat(\"samplesFactor\", samplesFactor);\r\n                effect.setFloat(\"randTextureTiles\", 4.0);\r\n            }\r\n\r\n            effect.setFloat(\"totalStrength\", this.totalStrength);\r\n            effect.setFloat(\"radius\", this.radius);\r\n            effect.setFloat(\"area\", this.area);\r\n            effect.setFloat(\"fallOff\", this.fallOff);\r\n            effect.setFloat(\"base\", this.base);\r\n\r\n            effect.setTexture(\"textureSampler\", this._scene.enableDepthRenderer(this._scene.activeCamera).getDepthMap());\r\n            effect.setTexture(\"randomSampler\", this._randomTexture);\r\n        };\r\n    }\r\n\r\n    private _createSSAOCombinePostProcess(ratio: number): void {\r\n        this._ssaoCombinePostProcess = new PostProcess(\r\n            \"ssaoCombine\",\r\n            \"ssaoCombine\",\r\n            [],\r\n            [\"originalColor\", \"viewport\"],\r\n            ratio,\r\n            null,\r\n            Texture.BILINEAR_SAMPLINGMODE,\r\n            this._scene.getEngine(),\r\n            false\r\n        );\r\n\r\n        this._ssaoCombinePostProcess.onApply = (effect: Effect) => {\r\n            effect.setVector4(\"viewport\", TmpVectors.Vector4[0].copyFromFloats(0, 0, 1.0, 1.0));\r\n            effect.setTextureFromPostProcess(\"originalColor\", this._originalColorPostProcess);\r\n        };\r\n    }\r\n\r\n    private _createRandomTexture(): void {\r\n        const size = 512;\r\n\r\n        const data = new Uint8Array(size * size * 4);\r\n        for (let index = 0; index < data.length; ) {\r\n            data[index++] = Math.floor(Math.max(0.0, Scalar.RandomRange(-1.0, 1.0)) * 255);\r\n            data[index++] = Math.floor(Math.max(0.0, Scalar.RandomRange(-1.0, 1.0)) * 255);\r\n            data[index++] = Math.floor(Math.max(0.0, Scalar.RandomRange(-1.0, 1.0)) * 255);\r\n            data[index++] = 255;\r\n        }\r\n\r\n        const texture = RawTexture.CreateRGBATexture(data, size, size, this._scene, false, false, Constants.TEXTURE_BILINEAR_SAMPLINGMODE);\r\n        texture.name = \"SSAORandomTexture\";\r\n        texture.wrapU = Texture.WRAP_ADDRESSMODE;\r\n        texture.wrapV = Texture.WRAP_ADDRESSMODE;\r\n        this._randomTexture = texture;\r\n    }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}