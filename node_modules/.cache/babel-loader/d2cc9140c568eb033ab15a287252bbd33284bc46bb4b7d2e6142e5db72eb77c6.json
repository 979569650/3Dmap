{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { RawTexture } from \"../Textures/rawTexture.js\";\nimport { ShaderMaterial } from \"../shaderMaterial.js\";\nimport { Color3 } from \"../../Maths/math.color.js\";\nimport { Vector2 } from \"../../Maths/math.vector.js\";\nimport \"../../Shaders/greasedLine.fragment.js\";\nimport \"../../Shaders/greasedLine.vertex.js\";\nimport { GreasedLineMeshColorDistributionType, GreasedLineMeshColorMode } from \"./greasedLineMaterialInterfaces.js\";\nimport { GreasedLineTools } from \"../../Misc/greasedLineTools.js\";\nimport { GreasedLineMaterialDefaults } from \"./greasedLineMaterialDefaults.js\";\n/**\n * GreasedLineSimpleMaterial\n */\nexport class GreasedLineSimpleMaterial extends ShaderMaterial {\n  /**\n   * GreasedLineSimple material constructor\n   * @param name material name\n   * @param scene the scene\n   * @param options material options\n   */\n  constructor(name, scene, options) {\n    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p;\n    const defines = [`COLOR_DISTRIBUTION_TYPE_LINE ${GreasedLineMeshColorDistributionType.COLOR_DISTRIBUTION_TYPE_LINE}.`, `COLOR_DISTRIBUTION_TYPE_SEGMENT ${GreasedLineMeshColorDistributionType.COLOR_DISTRIBUTION_TYPE_SEGMENT}.`, `COLOR_MODE_SET ${GreasedLineMeshColorMode.COLOR_MODE_SET}.`, `COLOR_MODE_ADD ${GreasedLineMeshColorMode.COLOR_MODE_ADD}.`, `COLOR_MODE_MULTIPLY ${GreasedLineMeshColorMode.COLOR_MODE_MULTIPLY}.`];\n    const attributes = [\"position\", \"grl_widths\", \"grl_offsets\", \"grl_colorPointers\"];\n    scene.useRightHandedSystem && defines.push(\"GREASED_LINE_RIGHT_HANDED_COORDINATE_SYSTEM\");\n    if (options.cameraFacing) {\n      defines.push(\"GREASED_LINE_CAMERA_FACING\");\n      attributes.push(\"grl_previousAndSide\", \"grl_nextAndCounters\");\n    } else {\n      attributes.push(\"grl_slopes\");\n      attributes.push(\"grl_counters\");\n    }\n    super(name, scene, {\n      vertex: \"greasedLine\",\n      fragment: \"greasedLine\"\n    }, {\n      attributes,\n      uniforms: [\"worldViewProjection\", \"projection\", \"grlColorsWidth\", \"grlUseColors\", \"grlWidth\", \"grlColor\", \"grl_colorModeAndColorDistributionType\", \"grlResolution\", \"grlAspect\", \"grlAizeAttenuation\", \"grlDashArray\", \"grlDashOffset\", \"grlDashRatio\", \"grlUseDash\", \"grlVisibility\"],\n      samplers: [\"grlColors\"],\n      defines\n    });\n    this._color = Color3.White();\n    this._colorsDistributionType = GreasedLineMeshColorDistributionType.COLOR_DISTRIBUTION_TYPE_SEGMENT;\n    this._colorsTexture = null;\n    options = options || {\n      color: GreasedLineMaterialDefaults.DEFAULT_COLOR\n    };\n    const engine = scene.getEngine();\n    this.visibility = (_a = options.visibility) !== null && _a !== void 0 ? _a : 1;\n    this.useDash = (_b = options.useDash) !== null && _b !== void 0 ? _b : false;\n    this.dashRatio = (_c = options.dashRatio) !== null && _c !== void 0 ? _c : 0.5;\n    this.dashOffset = (_d = options.dashOffset) !== null && _d !== void 0 ? _d : 0;\n    this.dashCount = (_e = options.dashCount) !== null && _e !== void 0 ? _e : 1; // calculate the _dashArray value, call the setter\n    this.width = options.width ? options.width : options.sizeAttenuation && options.cameraFacing ? GreasedLineMaterialDefaults.DEFAULT_WIDTH_ATTENUATED : GreasedLineMaterialDefaults.DEFAULT_WIDTH;\n    this.sizeAttenuation = (_f = options.sizeAttenuation) !== null && _f !== void 0 ? _f : false;\n    this.color = (_g = options.color) !== null && _g !== void 0 ? _g : Color3.White();\n    this.useColors = (_h = options.useColors) !== null && _h !== void 0 ? _h : false;\n    this.colorsDistributionType = (_j = options.colorDistributionType) !== null && _j !== void 0 ? _j : GreasedLineMeshColorDistributionType.COLOR_DISTRIBUTION_TYPE_SEGMENT;\n    this.colorsSampling = (_k = options.colorsSampling) !== null && _k !== void 0 ? _k : RawTexture.NEAREST_NEAREST;\n    this.colorMode = (_l = options.colorMode) !== null && _l !== void 0 ? _l : GreasedLineMeshColorMode.COLOR_MODE_SET;\n    this._colors = (_m = options.colors) !== null && _m !== void 0 ? _m : null;\n    this._cameraFacing = (_o = options.cameraFacing) !== null && _o !== void 0 ? _o : true;\n    this.resolution = (_p = options.resolution) !== null && _p !== void 0 ? _p : new Vector2(engine.getRenderWidth(), engine.getRenderHeight()); // calculate aspect call the setter\n    if (options.colorsTexture) {\n      this.colorsTexture = options.colorsTexture;\n    }\n    if (this._colors) {\n      this.setColors(this._colors);\n    }\n    engine.onDisposeObservable.add(() => {\n      GreasedLineTools.DisposeEmptyColorsTexture();\n    });\n  }\n  /**\n   * Disposes the plugin material.\n   */\n  dispose() {\n    var _a;\n    (_a = this._colorsTexture) === null || _a === void 0 ? void 0 : _a.dispose();\n    super.dispose();\n  }\n  _setColorModeAndColorDistributionType() {\n    this.setVector2(\"grl_colorModeAndColorDistributionType\", new Vector2(this._colorMode, this._colorsDistributionType));\n  }\n  /**\n   * Updates the material. Use when material created in lazy mode.\n   */\n  updateLazy() {\n    if (this._colors) {\n      this.setColors(this._colors, false, true);\n    }\n  }\n  /**\n   * Returns the colors used to colorize the line\n   */\n  get colors() {\n    return this._colors;\n  }\n  /**\n   * Sets the colors used to colorize the line\n   */\n  set colors(value) {\n    this.setColors(value);\n  }\n  /**\n   * Creates or updates the colors texture\n   * @param colors color table RGBA\n   * @param lazy if lazy, the colors are not updated\n   * @param forceNewTexture force creation of a new texture\n   * @returns\n   */\n  setColors(colors, lazy = false, forceNewTexture = false) {\n    var _a, _b, _c, _d;\n    const origColorsCount = (_b = (_a = this._colors) === null || _a === void 0 ? void 0 : _a.length) !== null && _b !== void 0 ? _b : 0;\n    this._colors = colors;\n    if (colors === null || colors.length === 0) {\n      (_c = this._colorsTexture) === null || _c === void 0 ? void 0 : _c.dispose();\n      return;\n    }\n    if (lazy && !forceNewTexture) {\n      return;\n    }\n    if (this._colorsTexture && origColorsCount === colors.length && !forceNewTexture) {\n      const colorArray = GreasedLineTools.Color3toRGBAUint8(colors);\n      this._colorsTexture.update(colorArray);\n    } else {\n      (_d = this._colorsTexture) === null || _d === void 0 ? void 0 : _d.dispose();\n      this.colorsTexture = GreasedLineTools.CreateColorsTexture(`${this.name}-colors-texture`, colors, this.colorsSampling, this.getScene());\n    }\n  }\n  /**\n   * Gets the colors texture\n   */\n  get colorsTexture() {\n    var _a;\n    return (_a = this._colorsTexture) !== null && _a !== void 0 ? _a : null;\n  }\n  /**\n   * Sets the colorsTexture\n   */\n  set colorsTexture(value) {\n    this._colorsTexture = value;\n    this.setFloat(\"grlColorsWidth\", this._colorsTexture.getSize().width);\n    this.setTexture(\"grlColors\", this._colorsTexture);\n  }\n  /**\n   * Line base width. At each point the line width is calculated by widths[pointIndex] * width\n   */\n  get width() {\n    return this._width;\n  }\n  /**\n   * Line base width. At each point the line width is calculated by widths[pointIndex] * width\n   */\n  set width(value) {\n    this._width = value;\n    this.setFloat(\"grlWidth\", value);\n  }\n  /**\n   * Whether to use the colors option to colorize the line\n   */\n  get useColors() {\n    return this._useColors;\n  }\n  set useColors(value) {\n    this._useColors = value;\n    this.setFloat(\"grlUseColors\", GreasedLineTools.BooleanToNumber(value));\n  }\n  /**\n   * The type of sampling of the colors texture. The values are the same when using with textures.\n   */\n  get colorsSampling() {\n    return this._colorsSampling;\n  }\n  /**\n   * The type of sampling of the colors texture. The values are the same when using with textures.\n   */\n  set colorsSampling(value) {\n    this._colorsSampling = value;\n  }\n  /**\n   * Normalized value of how much of the line will be visible\n   * 0 - 0% of the line will be visible\n   * 1 - 100% of the line will be visible\n   */\n  get visibility() {\n    return this._visibility;\n  }\n  set visibility(value) {\n    this._visibility = value;\n    this.setFloat(\"grlVisibility\", value);\n  }\n  /**\n   * Turns on/off dash mode\n   */\n  get useDash() {\n    return this._useDash;\n  }\n  /**\n   * Turns on/off dash mode\n   */\n  set useDash(value) {\n    this._useDash = value;\n    this.setFloat(\"grlUseDash\", GreasedLineTools.BooleanToNumber(value));\n  }\n  /**\n   * Gets the dash offset\n   */\n  get dashOffset() {\n    return this._dashOffset;\n  }\n  /**\n   * Sets the dash offset\n   */\n  set dashOffset(value) {\n    this._dashOffset = value;\n    this.setFloat(\"grlDashOffset\", value);\n  }\n  /**\n   * Length of the dash. 0 to 1. 0.5 means half empty, half drawn.\n   */\n  get dashRatio() {\n    return this._dashRatio;\n  }\n  /**\n   * Length of the dash. 0 to 1. 0.5 means half empty, half drawn.\n   */\n  set dashRatio(value) {\n    this._dashRatio = value;\n    this.setFloat(\"grlDashRatio\", value);\n  }\n  /**\n   * Gets the number of dashes in the line\n   */\n  get dashCount() {\n    return this._dashCount;\n  }\n  /**\n   * Sets the number of dashes in the line\n   * @param value dash\n   */\n  set dashCount(value) {\n    this._dashCount = value;\n    this._dashArray = 1 / value;\n    this.setFloat(\"grlDashArray\", this._dashArray);\n  }\n  /**\n   * False means 1 unit in width = 1 unit on scene, true means 1 unit in width is reduced on the screen to make better looking lines\n   */\n  get sizeAttenuation() {\n    return this._sizeAttenuation;\n  }\n  /**\n   * Turn on/off attenuation of the width option and widths array.\n   * @param value false means 1 unit in width = 1 unit on scene, true means 1 unit in width is reduced on the screen to make better looking lines\n   */\n  set sizeAttenuation(value) {\n    this._sizeAttenuation = value;\n    this.setFloat(\"grlSizeAttenuation\", GreasedLineTools.BooleanToNumber(value));\n  }\n  /**\n   * Gets the color of the line\n   */\n  get color() {\n    return this.color;\n  }\n  /**\n   * Sets the color of the line\n   * @param value Color3\n   */\n  set color(value) {\n    this.setColor(value);\n  }\n  /**\n   * Sets the color of the line. If set the whole line will be mixed with this color according to the colorMode option.\n   * The simple material always needs a color to be set. If you set it to null it will set the color to the default color (GreasedLineSimpleMaterial.DEFAULT_COLOR).\n   * @param value color\n   */\n  setColor(value) {\n    value = value !== null && value !== void 0 ? value : GreasedLineMaterialDefaults.DEFAULT_COLOR;\n    this._color = value;\n    this.setColor3(\"grlColor\", value);\n  }\n  /**\n   * Gets the color distributiopn type\n   */\n  get colorsDistributionType() {\n    return this._colorsDistributionType;\n  }\n  /**\n   * Sets the color distribution type\n   * @see GreasedLineMeshColorDistributionType\n   * @param value color distribution type\n   */\n  set colorsDistributionType(value) {\n    this._colorsDistributionType = value;\n    this._setColorModeAndColorDistributionType();\n  }\n  /**\n   * Gets the mixing mode of the color and colors paramaters. Default value is GreasedLineMeshColorMode.SET.\n   * MATERIAL_TYPE_SIMPLE mixes the color and colors of the greased line material.\n   * @see GreasedLineMeshColorMode\n   */\n  get colorMode() {\n    return this._colorMode;\n  }\n  /**\n   * Sets the mixing mode of the color and colors paramaters. Default value is GreasedLineMeshColorMode.SET.\n   * MATERIAL_TYPE_SIMPLE mixes the color and colors of the greased line material.\n   * @see GreasedLineMeshColorMode\n   */\n  set colorMode(value) {\n    this._colorMode = value;\n    this._setColorModeAndColorDistributionType();\n  }\n  /**\n   * Gets the resolution\n   */\n  get resolution() {\n    return this._resolution;\n  }\n  /**\n   * Sets the resolution\n   * @param value resolution of the screen for GreasedLine\n   */\n  set resolution(value) {\n    this._resolution = value;\n    this.setVector2(\"grlResolution\", value);\n    this.setFloat(\"grlAspect\", value.x / value.y);\n  }\n  /**\n   * Serializes this plugin material\n   * @returns serializationObjec\n   */\n  serialize() {\n    const serializationObject = super.serialize();\n    const greasedLineMaterialOptions = {\n      colorDistributionType: this._colorsDistributionType,\n      colorsSampling: this._colorsSampling,\n      colorMode: this._colorMode,\n      color: this._color,\n      dashCount: this._dashCount,\n      dashOffset: this._dashOffset,\n      dashRatio: this._dashRatio,\n      resolution: this._resolution,\n      sizeAttenuation: this._sizeAttenuation,\n      useColors: this._useColors,\n      useDash: this._useDash,\n      visibility: this._visibility,\n      width: this._width,\n      cameraFacing: this._cameraFacing\n    };\n    this._colors && (greasedLineMaterialOptions.colors = this._colors);\n    serializationObject.greasedLineMaterialOptions = greasedLineMaterialOptions;\n    return serializationObject;\n  }\n  /**\n   * Parses a serialized objects\n   * @param source serialized object\n   * @param scene scene\n   * @param _rootUrl root url for textures\n   */\n  parse(source, scene, _rootUrl) {\n    var _a, _b;\n    // TODO: super.parse?\n    const greasedLineMaterialOptions = source.greasedLineMaterialOptions;\n    (_a = this._colorsTexture) === null || _a === void 0 ? void 0 : _a.dispose();\n    greasedLineMaterialOptions.color && (this.color = greasedLineMaterialOptions.color);\n    greasedLineMaterialOptions.colorDistributionType && (this.colorsDistributionType = greasedLineMaterialOptions.colorDistributionType);\n    greasedLineMaterialOptions.colorsSampling && (this.colorsSampling = greasedLineMaterialOptions.colorsSampling);\n    greasedLineMaterialOptions.colorMode && (this.colorMode = greasedLineMaterialOptions.colorMode);\n    greasedLineMaterialOptions.useColors && (this.useColors = greasedLineMaterialOptions.useColors);\n    greasedLineMaterialOptions.visibility && (this.visibility = greasedLineMaterialOptions.visibility);\n    greasedLineMaterialOptions.useDash && (this.useDash = greasedLineMaterialOptions.useDash);\n    greasedLineMaterialOptions.dashCount && (this.dashCount = greasedLineMaterialOptions.dashCount);\n    greasedLineMaterialOptions.dashRatio && (this.dashRatio = greasedLineMaterialOptions.dashRatio);\n    greasedLineMaterialOptions.dashOffset && (this.dashOffset = greasedLineMaterialOptions.dashOffset);\n    greasedLineMaterialOptions.width && (this.width = greasedLineMaterialOptions.width);\n    greasedLineMaterialOptions.sizeAttenuation && (this.sizeAttenuation = greasedLineMaterialOptions.sizeAttenuation);\n    greasedLineMaterialOptions.resolution && (this.resolution = greasedLineMaterialOptions.resolution);\n    if (greasedLineMaterialOptions.colors) {\n      this.colorsTexture = GreasedLineTools.CreateColorsTexture(`${this.name}-colors-texture`, greasedLineMaterialOptions.colors, this.colorsSampling, this.getScene());\n    } else {\n      GreasedLineTools.PrepareEmptyColorsTexture(scene);\n    }\n    this._cameraFacing = (_b = greasedLineMaterialOptions.cameraFacing) !== null && _b !== void 0 ? _b : true;\n    this.setDefine(\"GREASED_LINE_CAMERA_FACING\", this._cameraFacing);\n  }\n}","map":{"version":3,"names":["RawTexture","ShaderMaterial","Color3","Vector2","GreasedLineMeshColorDistributionType","GreasedLineMeshColorMode","GreasedLineTools","GreasedLineMaterialDefaults","GreasedLineSimpleMaterial","constructor","name","scene","options","defines","COLOR_DISTRIBUTION_TYPE_LINE","COLOR_DISTRIBUTION_TYPE_SEGMENT","COLOR_MODE_SET","COLOR_MODE_ADD","COLOR_MODE_MULTIPLY","attributes","useRightHandedSystem","push","cameraFacing","vertex","fragment","uniforms","samplers","_color","White","_colorsDistributionType","_colorsTexture","color","DEFAULT_COLOR","engine","getEngine","visibility","_a","useDash","_b","dashRatio","_c","dashOffset","_d","dashCount","_e","width","sizeAttenuation","DEFAULT_WIDTH_ATTENUATED","DEFAULT_WIDTH","_f","_g","useColors","_h","colorsDistributionType","_j","colorDistributionType","colorsSampling","_k","NEAREST_NEAREST","colorMode","_l","_colors","_m","colors","_cameraFacing","_o","resolution","_p","getRenderWidth","getRenderHeight","colorsTexture","setColors","onDisposeObservable","add","DisposeEmptyColorsTexture","dispose","_setColorModeAndColorDistributionType","setVector2","_colorMode","updateLazy","value","lazy","forceNewTexture","origColorsCount","length","colorArray","Color3toRGBAUint8","update","CreateColorsTexture","getScene","setFloat","getSize","setTexture","_width","_useColors","BooleanToNumber","_colorsSampling","_visibility","_useDash","_dashOffset","_dashRatio","_dashCount","_dashArray","_sizeAttenuation","setColor","setColor3","_resolution","x","y","serialize","serializationObject","greasedLineMaterialOptions","parse","source","_rootUrl","PrepareEmptyColorsTexture","setDefine"],"sources":["../../../../../dev/core/src/Materials/GreasedLine/greasedLineSimpleMaterial.ts"],"sourcesContent":["import type { Scene } from \"../../scene\";\r\nimport { RawTexture } from \"../Textures/rawTexture\";\r\n\r\nimport { ShaderMaterial } from \"../shaderMaterial\";\r\nimport type { Nullable } from \"../../types\";\r\nimport { Color3 } from \"../../Maths/math.color\";\r\nimport { Vector2 } from \"../../Maths/math.vector\";\r\n\r\nimport \"../../Shaders/greasedLine.fragment\";\r\nimport \"../../Shaders/greasedLine.vertex\";\r\nimport type { GreasedLineMaterialOptions, IGreasedLineMaterial } from \"./greasedLineMaterialInterfaces\";\r\nimport { GreasedLineMeshColorDistributionType, GreasedLineMeshColorMode } from \"./greasedLineMaterialInterfaces\";\r\nimport { GreasedLineTools } from \"../../Misc/greasedLineTools\";\r\nimport { GreasedLineMaterialDefaults } from \"./greasedLineMaterialDefaults\";\r\n\r\n/**\r\n * GreasedLineSimpleMaterial\r\n */\r\nexport class GreasedLineSimpleMaterial extends ShaderMaterial implements IGreasedLineMaterial {\r\n    private _visibility: number;\r\n    private _width: number;\r\n    private _useDash: boolean;\r\n    private _dashCount: number;\r\n    private _dashArray: number;\r\n    private _dashRatio: number;\r\n    private _dashOffset: number;\r\n    private _useColors: boolean;\r\n    private _color: Color3 = Color3.White();\r\n    private _colors: Nullable<Color3[]>;\r\n    private _colorsDistributionType: GreasedLineMeshColorDistributionType = GreasedLineMeshColorDistributionType.COLOR_DISTRIBUTION_TYPE_SEGMENT;\r\n    private _colorMode: GreasedLineMeshColorMode;\r\n    private _colorsSampling: number;\r\n    private _resolution: Vector2;\r\n    private _sizeAttenuation: boolean;\r\n    private _colorsTexture: Nullable<RawTexture> = null;\r\n    private _cameraFacing: boolean;\r\n\r\n    /**\r\n     * GreasedLineSimple material constructor\r\n     * @param name material name\r\n     * @param scene the scene\r\n     * @param options material options\r\n     */\r\n    constructor(name: string, scene: Scene, options: GreasedLineMaterialOptions) {\r\n        const defines = [\r\n            `COLOR_DISTRIBUTION_TYPE_LINE ${GreasedLineMeshColorDistributionType.COLOR_DISTRIBUTION_TYPE_LINE}.`,\r\n            `COLOR_DISTRIBUTION_TYPE_SEGMENT ${GreasedLineMeshColorDistributionType.COLOR_DISTRIBUTION_TYPE_SEGMENT}.`,\r\n            `COLOR_MODE_SET ${GreasedLineMeshColorMode.COLOR_MODE_SET}.`,\r\n            `COLOR_MODE_ADD ${GreasedLineMeshColorMode.COLOR_MODE_ADD}.`,\r\n            `COLOR_MODE_MULTIPLY ${GreasedLineMeshColorMode.COLOR_MODE_MULTIPLY}.`,\r\n        ];\r\n        const attributes = [\"position\", \"grl_widths\", \"grl_offsets\", \"grl_colorPointers\"];\r\n\r\n        scene.useRightHandedSystem && defines.push(\"GREASED_LINE_RIGHT_HANDED_COORDINATE_SYSTEM\");\r\n\r\n        if (options.cameraFacing) {\r\n            defines.push(\"GREASED_LINE_CAMERA_FACING\");\r\n            attributes.push(\"grl_previousAndSide\", \"grl_nextAndCounters\");\r\n        } else {\r\n            attributes.push(\"grl_slopes\");\r\n            attributes.push(\"grl_counters\");\r\n        }\r\n\r\n        super(\r\n            name,\r\n            scene,\r\n            {\r\n                vertex: \"greasedLine\",\r\n                fragment: \"greasedLine\",\r\n            },\r\n            {\r\n                attributes,\r\n                uniforms: [\r\n                    \"worldViewProjection\",\r\n                    \"projection\",\r\n                    \"grlColorsWidth\",\r\n                    \"grlUseColors\",\r\n                    \"grlWidth\",\r\n                    \"grlColor\",\r\n                    \"grl_colorModeAndColorDistributionType\",\r\n                    \"grlResolution\",\r\n                    \"grlAspect\",\r\n                    \"grlAizeAttenuation\",\r\n                    \"grlDashArray\",\r\n                    \"grlDashOffset\",\r\n                    \"grlDashRatio\",\r\n                    \"grlUseDash\",\r\n                    \"grlVisibility\",\r\n                ],\r\n                samplers: [\"grlColors\"],\r\n                defines,\r\n            }\r\n        );\r\n        options = options || {\r\n            color: GreasedLineMaterialDefaults.DEFAULT_COLOR,\r\n        };\r\n\r\n        const engine = scene.getEngine();\r\n\r\n        this.visibility = options.visibility ?? 1;\r\n        this.useDash = options.useDash ?? false;\r\n        this.dashRatio = options.dashRatio ?? 0.5;\r\n        this.dashOffset = options.dashOffset ?? 0;\r\n        this.dashCount = options.dashCount ?? 1; // calculate the _dashArray value, call the setter\r\n        this.width = options.width\r\n            ? options.width\r\n            : options.sizeAttenuation && options.cameraFacing\r\n            ? GreasedLineMaterialDefaults.DEFAULT_WIDTH_ATTENUATED\r\n            : GreasedLineMaterialDefaults.DEFAULT_WIDTH;\r\n        this.sizeAttenuation = options.sizeAttenuation ?? false;\r\n        this.color = options.color ?? Color3.White();\r\n        this.useColors = options.useColors ?? false;\r\n        this.colorsDistributionType = options.colorDistributionType ?? GreasedLineMeshColorDistributionType.COLOR_DISTRIBUTION_TYPE_SEGMENT;\r\n        this.colorsSampling = options.colorsSampling ?? RawTexture.NEAREST_NEAREST;\r\n        this.colorMode = options.colorMode ?? GreasedLineMeshColorMode.COLOR_MODE_SET;\r\n        this._colors = options.colors ?? null;\r\n        this._cameraFacing = options.cameraFacing ?? true;\r\n        this.resolution = options.resolution ?? new Vector2(engine.getRenderWidth(), engine.getRenderHeight()); // calculate aspect call the setter\r\n\r\n        if (options.colorsTexture) {\r\n            this.colorsTexture = options.colorsTexture;\r\n        }\r\n\r\n        if (this._colors) {\r\n            this.setColors(this._colors);\r\n        }\r\n\r\n        engine.onDisposeObservable.add(() => {\r\n            GreasedLineTools.DisposeEmptyColorsTexture();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Disposes the plugin material.\r\n     */\r\n    public dispose(): void {\r\n        this._colorsTexture?.dispose();\r\n        super.dispose();\r\n    }\r\n\r\n    private _setColorModeAndColorDistributionType() {\r\n        this.setVector2(\"grl_colorModeAndColorDistributionType\", new Vector2(this._colorMode, this._colorsDistributionType));\r\n    }\r\n\r\n    /**\r\n     * Updates the material. Use when material created in lazy mode.\r\n     */\r\n    public updateLazy() {\r\n        if (this._colors) {\r\n            this.setColors(this._colors, false, true);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns the colors used to colorize the line\r\n     */\r\n    get colors() {\r\n        return this._colors;\r\n    }\r\n\r\n    /**\r\n     * Sets the colors used to colorize the line\r\n     */\r\n    set colors(value: Nullable<Color3[]>) {\r\n        this.setColors(value);\r\n    }\r\n\r\n    /**\r\n     * Creates or updates the colors texture\r\n     * @param colors color table RGBA\r\n     * @param lazy if lazy, the colors are not updated\r\n     * @param forceNewTexture force creation of a new texture\r\n     * @returns\r\n     */\r\n    public setColors(colors: Nullable<Color3[]>, lazy = false, forceNewTexture = false): void {\r\n        const origColorsCount = this._colors?.length ?? 0;\r\n\r\n        this._colors = colors;\r\n\r\n        if (colors === null || colors.length === 0) {\r\n            this._colorsTexture?.dispose();\r\n            return;\r\n        }\r\n\r\n        if (lazy && !forceNewTexture) {\r\n            return;\r\n        }\r\n\r\n        if (this._colorsTexture && origColorsCount === colors.length && !forceNewTexture) {\r\n            const colorArray = GreasedLineTools.Color3toRGBAUint8(colors);\r\n            this._colorsTexture.update(colorArray);\r\n        } else {\r\n            this._colorsTexture?.dispose();\r\n            this.colorsTexture = GreasedLineTools.CreateColorsTexture(`${this.name}-colors-texture`, colors, this.colorsSampling, this.getScene());\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets the colors texture\r\n     */\r\n    get colorsTexture() {\r\n        return (this._colorsTexture as RawTexture) ?? null;\r\n    }\r\n\r\n    /**\r\n     * Sets the colorsTexture\r\n     */\r\n    set colorsTexture(value: RawTexture) {\r\n        this._colorsTexture = value;\r\n        this.setFloat(\"grlColorsWidth\", this._colorsTexture.getSize().width);\r\n        this.setTexture(\"grlColors\", this._colorsTexture);\r\n    }\r\n\r\n    /**\r\n     * Line base width. At each point the line width is calculated by widths[pointIndex] * width\r\n     */\r\n    get width() {\r\n        return this._width;\r\n    }\r\n\r\n    /**\r\n     * Line base width. At each point the line width is calculated by widths[pointIndex] * width\r\n     */\r\n    set width(value: number) {\r\n        this._width = value;\r\n        this.setFloat(\"grlWidth\", value);\r\n    }\r\n\r\n    /**\r\n     * Whether to use the colors option to colorize the line\r\n     */\r\n    get useColors() {\r\n        return this._useColors;\r\n    }\r\n\r\n    set useColors(value: boolean) {\r\n        this._useColors = value;\r\n        this.setFloat(\"grlUseColors\", GreasedLineTools.BooleanToNumber(value));\r\n    }\r\n\r\n    /**\r\n     * The type of sampling of the colors texture. The values are the same when using with textures.\r\n     */\r\n    get colorsSampling() {\r\n        return this._colorsSampling;\r\n    }\r\n\r\n    /**\r\n     * The type of sampling of the colors texture. The values are the same when using with textures.\r\n     */\r\n    set colorsSampling(value: number) {\r\n        this._colorsSampling = value;\r\n    }\r\n\r\n    /**\r\n     * Normalized value of how much of the line will be visible\r\n     * 0 - 0% of the line will be visible\r\n     * 1 - 100% of the line will be visible\r\n     */\r\n    get visibility() {\r\n        return this._visibility;\r\n    }\r\n\r\n    set visibility(value: number) {\r\n        this._visibility = value;\r\n        this.setFloat(\"grlVisibility\", value);\r\n    }\r\n\r\n    /**\r\n     * Turns on/off dash mode\r\n     */\r\n    get useDash() {\r\n        return this._useDash;\r\n    }\r\n\r\n    /**\r\n     * Turns on/off dash mode\r\n     */\r\n    set useDash(value: boolean) {\r\n        this._useDash = value;\r\n        this.setFloat(\"grlUseDash\", GreasedLineTools.BooleanToNumber(value));\r\n    }\r\n\r\n    /**\r\n     * Gets the dash offset\r\n     */\r\n    get dashOffset() {\r\n        return this._dashOffset;\r\n    }\r\n\r\n    /**\r\n     * Sets the dash offset\r\n     */\r\n    set dashOffset(value: number) {\r\n        this._dashOffset = value;\r\n        this.setFloat(\"grlDashOffset\", value);\r\n    }\r\n\r\n    /**\r\n     * Length of the dash. 0 to 1. 0.5 means half empty, half drawn.\r\n     */\r\n    get dashRatio() {\r\n        return this._dashRatio;\r\n    }\r\n\r\n    /**\r\n     * Length of the dash. 0 to 1. 0.5 means half empty, half drawn.\r\n     */\r\n    set dashRatio(value: number) {\r\n        this._dashRatio = value;\r\n        this.setFloat(\"grlDashRatio\", value);\r\n    }\r\n\r\n    /**\r\n     * Gets the number of dashes in the line\r\n     */\r\n    get dashCount() {\r\n        return this._dashCount;\r\n    }\r\n    /**\r\n     * Sets the number of dashes in the line\r\n     * @param value dash\r\n     */\r\n    set dashCount(value: number) {\r\n        this._dashCount = value;\r\n        this._dashArray = 1 / value;\r\n        this.setFloat(\"grlDashArray\", this._dashArray);\r\n    }\r\n\r\n    /**\r\n     * False means 1 unit in width = 1 unit on scene, true means 1 unit in width is reduced on the screen to make better looking lines\r\n     */\r\n    get sizeAttenuation() {\r\n        return this._sizeAttenuation;\r\n    }\r\n\r\n    /**\r\n     * Turn on/off attenuation of the width option and widths array.\r\n     * @param value false means 1 unit in width = 1 unit on scene, true means 1 unit in width is reduced on the screen to make better looking lines\r\n     */\r\n    set sizeAttenuation(value: boolean) {\r\n        this._sizeAttenuation = value;\r\n        this.setFloat(\"grlSizeAttenuation\", GreasedLineTools.BooleanToNumber(value));\r\n    }\r\n\r\n    /**\r\n     * Gets the color of the line\r\n     */\r\n    get color() {\r\n        return this.color;\r\n    }\r\n\r\n    /**\r\n     * Sets the color of the line\r\n     * @param value Color3\r\n     */\r\n    set color(value: Color3) {\r\n        this.setColor(value);\r\n    }\r\n\r\n    /**\r\n     * Sets the color of the line. If set the whole line will be mixed with this color according to the colorMode option.\r\n     * The simple material always needs a color to be set. If you set it to null it will set the color to the default color (GreasedLineSimpleMaterial.DEFAULT_COLOR).\r\n     * @param value color\r\n     */\r\n    public setColor(value: Nullable<Color3>) {\r\n        value = value ?? GreasedLineMaterialDefaults.DEFAULT_COLOR;\r\n        this._color = value;\r\n        this.setColor3(\"grlColor\", value);\r\n    }\r\n\r\n    /**\r\n     * Gets the color distributiopn type\r\n     */\r\n    get colorsDistributionType() {\r\n        return this._colorsDistributionType;\r\n    }\r\n\r\n    /**\r\n     * Sets the color distribution type\r\n     * @see GreasedLineMeshColorDistributionType\r\n     * @param value color distribution type\r\n     */\r\n    set colorsDistributionType(value: GreasedLineMeshColorDistributionType) {\r\n        this._colorsDistributionType = value;\r\n        this._setColorModeAndColorDistributionType();\r\n    }\r\n\r\n    /**\r\n     * Gets the mixing mode of the color and colors paramaters. Default value is GreasedLineMeshColorMode.SET.\r\n     * MATERIAL_TYPE_SIMPLE mixes the color and colors of the greased line material.\r\n     * @see GreasedLineMeshColorMode\r\n     */\r\n    get colorMode() {\r\n        return this._colorMode;\r\n    }\r\n\r\n    /**\r\n     * Sets the mixing mode of the color and colors paramaters. Default value is GreasedLineMeshColorMode.SET.\r\n     * MATERIAL_TYPE_SIMPLE mixes the color and colors of the greased line material.\r\n     * @see GreasedLineMeshColorMode\r\n     */\r\n    set colorMode(value: GreasedLineMeshColorMode) {\r\n        this._colorMode = value;\r\n        this._setColorModeAndColorDistributionType();\r\n    }\r\n\r\n    /**\r\n     * Gets the resolution\r\n     */\r\n    get resolution() {\r\n        return this._resolution;\r\n    }\r\n\r\n    /**\r\n     * Sets the resolution\r\n     * @param value resolution of the screen for GreasedLine\r\n     */\r\n    set resolution(value: Vector2) {\r\n        this._resolution = value;\r\n        this.setVector2(\"grlResolution\", value);\r\n        this.setFloat(\"grlAspect\", value.x / value.y);\r\n    }\r\n\r\n    /**\r\n     * Serializes this plugin material\r\n     * @returns serializationObjec\r\n     */\r\n    public serialize(): any {\r\n        const serializationObject = super.serialize();\r\n\r\n        const greasedLineMaterialOptions: GreasedLineMaterialOptions = {\r\n            colorDistributionType: this._colorsDistributionType,\r\n            colorsSampling: this._colorsSampling,\r\n            colorMode: this._colorMode,\r\n            color: this._color,\r\n            dashCount: this._dashCount,\r\n            dashOffset: this._dashOffset,\r\n            dashRatio: this._dashRatio,\r\n            resolution: this._resolution,\r\n            sizeAttenuation: this._sizeAttenuation,\r\n            useColors: this._useColors,\r\n            useDash: this._useDash,\r\n            visibility: this._visibility,\r\n            width: this._width,\r\n            cameraFacing: this._cameraFacing,\r\n        };\r\n\r\n        this._colors && (greasedLineMaterialOptions.colors = this._colors);\r\n\r\n        serializationObject.greasedLineMaterialOptions = greasedLineMaterialOptions;\r\n\r\n        return serializationObject;\r\n    }\r\n\r\n    /**\r\n     * Parses a serialized objects\r\n     * @param source serialized object\r\n     * @param scene scene\r\n     * @param _rootUrl root url for textures\r\n     */\r\n    public parse(source: any, scene: Scene, _rootUrl: string): void {\r\n        // TODO: super.parse?\r\n        const greasedLineMaterialOptions = <GreasedLineMaterialOptions>source.greasedLineMaterialOptions;\r\n\r\n        this._colorsTexture?.dispose();\r\n\r\n        greasedLineMaterialOptions.color && (this.color = greasedLineMaterialOptions.color);\r\n        greasedLineMaterialOptions.colorDistributionType && (this.colorsDistributionType = greasedLineMaterialOptions.colorDistributionType);\r\n        greasedLineMaterialOptions.colorsSampling && (this.colorsSampling = greasedLineMaterialOptions.colorsSampling);\r\n        greasedLineMaterialOptions.colorMode && (this.colorMode = greasedLineMaterialOptions.colorMode);\r\n        greasedLineMaterialOptions.useColors && (this.useColors = greasedLineMaterialOptions.useColors);\r\n        greasedLineMaterialOptions.visibility && (this.visibility = greasedLineMaterialOptions.visibility);\r\n        greasedLineMaterialOptions.useDash && (this.useDash = greasedLineMaterialOptions.useDash);\r\n        greasedLineMaterialOptions.dashCount && (this.dashCount = greasedLineMaterialOptions.dashCount);\r\n        greasedLineMaterialOptions.dashRatio && (this.dashRatio = greasedLineMaterialOptions.dashRatio);\r\n        greasedLineMaterialOptions.dashOffset && (this.dashOffset = greasedLineMaterialOptions.dashOffset);\r\n        greasedLineMaterialOptions.width && (this.width = greasedLineMaterialOptions.width);\r\n        greasedLineMaterialOptions.sizeAttenuation && (this.sizeAttenuation = greasedLineMaterialOptions.sizeAttenuation);\r\n        greasedLineMaterialOptions.resolution && (this.resolution = greasedLineMaterialOptions.resolution);\r\n\r\n        if (greasedLineMaterialOptions.colors) {\r\n            this.colorsTexture = GreasedLineTools.CreateColorsTexture(`${this.name}-colors-texture`, greasedLineMaterialOptions.colors, this.colorsSampling, this.getScene());\r\n        } else {\r\n            GreasedLineTools.PrepareEmptyColorsTexture(scene);\r\n        }\r\n\r\n        this._cameraFacing = greasedLineMaterialOptions.cameraFacing ?? true;\r\n        this.setDefine(\"GREASED_LINE_CAMERA_FACING\", this._cameraFacing);\r\n    }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}