{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\n/** @internal */\nexport class ShaderCodeCursor {\n  constructor() {\n    this._lines = [];\n  }\n  get currentLine() {\n    return this._lines[this.lineIndex];\n  }\n  get canRead() {\n    return this.lineIndex < this._lines.length - 1;\n  }\n  set lines(value) {\n    this._lines.length = 0;\n    for (const line of value) {\n      // Skip empty lines\n      if (!line || line === \"\\r\") {\n        continue;\n      }\n      // Prevent removing line break in macros.\n      if (line[0] === \"#\") {\n        this._lines.push(line);\n        continue;\n      }\n      // Do not split single line comments\n      const trimmedLine = line.trim();\n      if (!trimmedLine) {\n        continue;\n      }\n      if (trimmedLine.startsWith(\"//\")) {\n        this._lines.push(line);\n        continue;\n      }\n      // Work with semicolon in the line\n      const semicolonIndex = trimmedLine.indexOf(\";\");\n      if (semicolonIndex === -1) {\n        // No semicolon in the line\n        this._lines.push(trimmedLine);\n      } else if (semicolonIndex === trimmedLine.length - 1) {\n        // Single semicolon at the end of the line\n        // If trimmedLine == \";\", we must not push, to be backward compatible with the old code!\n        if (trimmedLine.length > 1) {\n          this._lines.push(trimmedLine);\n        }\n      } else {\n        // Semicolon in the middle of the line\n        const split = line.split(\";\");\n        for (let index = 0; index < split.length; index++) {\n          let subLine = split[index];\n          if (!subLine) {\n            continue;\n          }\n          subLine = subLine.trim();\n          if (!subLine) {\n            continue;\n          }\n          this._lines.push(subLine + (index !== split.length - 1 ? \";\" : \"\"));\n        }\n      }\n    }\n  }\n}","map":{"version":3,"names":["ShaderCodeCursor","constructor","_lines","currentLine","lineIndex","canRead","length","lines","value","line","push","trimmedLine","trim","startsWith","semicolonIndex","indexOf","split","index","subLine"],"sources":["../../../../../dev/core/src/Engines/Processors/shaderCodeCursor.ts"],"sourcesContent":["/** @internal */\r\nexport class ShaderCodeCursor {\r\n    private _lines: string[] = [];\r\n    lineIndex: number;\r\n\r\n    get currentLine(): string {\r\n        return this._lines[this.lineIndex];\r\n    }\r\n\r\n    get canRead(): boolean {\r\n        return this.lineIndex < this._lines.length - 1;\r\n    }\r\n\r\n    set lines(value: string[]) {\r\n        this._lines.length = 0;\r\n\r\n        for (const line of value) {\r\n            // Skip empty lines\r\n            if (!line || line === \"\\r\") {\r\n                continue;\r\n            }\r\n\r\n            // Prevent removing line break in macros.\r\n            if (line[0] === \"#\") {\r\n                this._lines.push(line);\r\n                continue;\r\n            }\r\n\r\n            // Do not split single line comments\r\n            const trimmedLine = line.trim();\r\n\r\n            if (!trimmedLine) {\r\n                continue;\r\n            }\r\n\r\n            if (trimmedLine.startsWith(\"//\")) {\r\n                this._lines.push(line);\r\n                continue;\r\n            }\r\n\r\n            // Work with semicolon in the line\r\n            const semicolonIndex = trimmedLine.indexOf(\";\");\r\n\r\n            if (semicolonIndex === -1) {\r\n                // No semicolon in the line\r\n                this._lines.push(trimmedLine);\r\n            } else if (semicolonIndex === trimmedLine.length - 1) {\r\n                // Single semicolon at the end of the line\r\n                // If trimmedLine == \";\", we must not push, to be backward compatible with the old code!\r\n                if (trimmedLine.length > 1) {\r\n                    this._lines.push(trimmedLine);\r\n                }\r\n            } else {\r\n                // Semicolon in the middle of the line\r\n                const split = line.split(\";\");\r\n\r\n                for (let index = 0; index < split.length; index++) {\r\n                    let subLine = split[index];\r\n\r\n                    if (!subLine) {\r\n                        continue;\r\n                    }\r\n\r\n                    subLine = subLine.trim();\r\n\r\n                    if (!subLine) {\r\n                        continue;\r\n                    }\r\n\r\n                    this._lines.push(subLine + (index !== split.length - 1 ? \";\" : \"\"));\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n"],"mappings":";AAAA;AACA,OAAM,MAAOA,gBAAgB;EAA7BC,YAAA;IACY,KAAAC,MAAM,GAAa,EAAE;EAwEjC;EArEI,IAAIC,WAAWA,CAAA;IACX,OAAO,IAAI,CAACD,MAAM,CAAC,IAAI,CAACE,SAAS,CAAC;EACtC;EAEA,IAAIC,OAAOA,CAAA;IACP,OAAO,IAAI,CAACD,SAAS,GAAG,IAAI,CAACF,MAAM,CAACI,MAAM,GAAG,CAAC;EAClD;EAEA,IAAIC,KAAKA,CAACC,KAAe;IACrB,IAAI,CAACN,MAAM,CAACI,MAAM,GAAG,CAAC;IAEtB,KAAK,MAAMG,IAAI,IAAID,KAAK,EAAE;MACtB;MACA,IAAI,CAACC,IAAI,IAAIA,IAAI,KAAK,IAAI,EAAE;QACxB;;MAGJ;MACA,IAAIA,IAAI,CAAC,CAAC,CAAC,KAAK,GAAG,EAAE;QACjB,IAAI,CAACP,MAAM,CAACQ,IAAI,CAACD,IAAI,CAAC;QACtB;;MAGJ;MACA,MAAME,WAAW,GAAGF,IAAI,CAACG,IAAI,EAAE;MAE/B,IAAI,CAACD,WAAW,EAAE;QACd;;MAGJ,IAAIA,WAAW,CAACE,UAAU,CAAC,IAAI,CAAC,EAAE;QAC9B,IAAI,CAACX,MAAM,CAACQ,IAAI,CAACD,IAAI,CAAC;QACtB;;MAGJ;MACA,MAAMK,cAAc,GAAGH,WAAW,CAACI,OAAO,CAAC,GAAG,CAAC;MAE/C,IAAID,cAAc,KAAK,CAAC,CAAC,EAAE;QACvB;QACA,IAAI,CAACZ,MAAM,CAACQ,IAAI,CAACC,WAAW,CAAC;OAChC,MAAM,IAAIG,cAAc,KAAKH,WAAW,CAACL,MAAM,GAAG,CAAC,EAAE;QAClD;QACA;QACA,IAAIK,WAAW,CAACL,MAAM,GAAG,CAAC,EAAE;UACxB,IAAI,CAACJ,MAAM,CAACQ,IAAI,CAACC,WAAW,CAAC;;OAEpC,MAAM;QACH;QACA,MAAMK,KAAK,GAAGP,IAAI,CAACO,KAAK,CAAC,GAAG,CAAC;QAE7B,KAAK,IAAIC,KAAK,GAAG,CAAC,EAAEA,KAAK,GAAGD,KAAK,CAACV,MAAM,EAAEW,KAAK,EAAE,EAAE;UAC/C,IAAIC,OAAO,GAAGF,KAAK,CAACC,KAAK,CAAC;UAE1B,IAAI,CAACC,OAAO,EAAE;YACV;;UAGJA,OAAO,GAAGA,OAAO,CAACN,IAAI,EAAE;UAExB,IAAI,CAACM,OAAO,EAAE;YACV;;UAGJ,IAAI,CAAChB,MAAM,CAACQ,IAAI,CAACQ,OAAO,IAAID,KAAK,KAAKD,KAAK,CAACV,MAAM,GAAG,CAAC,GAAG,GAAG,GAAG,EAAE,CAAC,CAAC;;;;EAInF"},"metadata":{},"sourceType":"module","externalDependencies":[]}