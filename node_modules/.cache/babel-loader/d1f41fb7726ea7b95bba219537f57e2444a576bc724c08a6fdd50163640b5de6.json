{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.typed-array.to-reversed.js\";\nimport \"core-js/modules/es.typed-array.to-sorted.js\";\nimport \"core-js/modules/es.typed-array.with.js\";\nimport { SmartArray } from \"../Misc/smartArray.js\";\nimport { Logger } from \"../Misc/logger.js\";\nimport { EngineStore } from \"../Engines/engineStore.js\";\nimport { MorphTarget } from \"./morphTarget.js\";\nimport { RawTexture2DArray } from \"../Materials/Textures/rawTexture2DArray.js\";\n/**\n * This class is used to deform meshes using morphing between different targets\n * @see https://doc.babylonjs.com/features/featuresDeepDive/mesh/morphTargets\n */\nexport class MorphTargetManager {\n  /**\n   * Sets a boolean indicating that adding new target or updating an existing target will not update the underlying data buffers\n   */\n  set areUpdatesFrozen(block) {\n    if (block) {\n      this._blockCounter++;\n    } else {\n      this._blockCounter--;\n      if (this._blockCounter <= 0) {\n        this._blockCounter = 0;\n        this._syncActiveTargets(true);\n      }\n    }\n  }\n  get areUpdatesFrozen() {\n    return this._blockCounter > 0;\n  }\n  /**\n   * Creates a new MorphTargetManager\n   * @param scene defines the current scene\n   */\n  constructor(scene = null) {\n    this._targets = new Array();\n    this._targetInfluenceChangedObservers = new Array();\n    this._targetDataLayoutChangedObservers = new Array();\n    this._activeTargets = new SmartArray(16);\n    this._supportsNormals = false;\n    this._supportsTangents = false;\n    this._supportsUVs = false;\n    this._vertexCount = 0;\n    this._textureVertexStride = 0;\n    this._textureWidth = 0;\n    this._textureHeight = 1;\n    this._uniqueId = 0;\n    this._tempInfluences = new Array();\n    this._canUseTextureForTargets = false;\n    this._blockCounter = 0;\n    /** @internal */\n    this._parentContainer = null;\n    /**\n     * Gets or sets a boolean indicating if influencers must be optimized (eg. recompiling the shader if less influencers are used)\n     */\n    this.optimizeInfluencers = true;\n    /**\n     * Gets or sets a boolean indicating if normals must be morphed\n     */\n    this.enableNormalMorphing = true;\n    /**\n     * Gets or sets a boolean indicating if tangents must be morphed\n     */\n    this.enableTangentMorphing = true;\n    /**\n     * Gets or sets a boolean indicating if UV must be morphed\n     */\n    this.enableUVMorphing = true;\n    this._useTextureToStoreTargets = true;\n    if (!scene) {\n      scene = EngineStore.LastCreatedScene;\n    }\n    this._scene = scene;\n    if (this._scene) {\n      this._scene.addMorphTargetManager(this);\n      this._uniqueId = this._scene.getUniqueId();\n      const engineCaps = this._scene.getEngine().getCaps();\n      this._canUseTextureForTargets = engineCaps.canUseGLVertexID && engineCaps.textureFloat && engineCaps.maxVertexTextureImageUnits > 0 && engineCaps.texture2DArrayMaxLayerCount > 1;\n    }\n  }\n  /**\n   * Gets the unique ID of this manager\n   */\n  get uniqueId() {\n    return this._uniqueId;\n  }\n  /**\n   * Gets the number of vertices handled by this manager\n   */\n  get vertexCount() {\n    return this._vertexCount;\n  }\n  /**\n   * Gets a boolean indicating if this manager supports morphing of normals\n   */\n  get supportsNormals() {\n    return this._supportsNormals && this.enableNormalMorphing;\n  }\n  /**\n   * Gets a boolean indicating if this manager supports morphing of tangents\n   */\n  get supportsTangents() {\n    return this._supportsTangents && this.enableTangentMorphing;\n  }\n  /**\n   * Gets a boolean indicating if this manager supports morphing of texture coordinates\n   */\n  get supportsUVs() {\n    return this._supportsUVs && this.enableUVMorphing;\n  }\n  /**\n   * Gets the number of targets stored in this manager\n   */\n  get numTargets() {\n    return this._targets.length;\n  }\n  /**\n   * Gets the number of influencers (ie. the number of targets with influences > 0)\n   */\n  get numInfluencers() {\n    return this._activeTargets.length;\n  }\n  /**\n   * Gets the list of influences (one per target)\n   */\n  get influences() {\n    return this._influences;\n  }\n  /**\n   * Gets or sets a boolean indicating that targets should be stored as a texture instead of using vertex attributes (default is true).\n   * Please note that this option is not available if the hardware does not support it\n   */\n  get useTextureToStoreTargets() {\n    return this._useTextureToStoreTargets;\n  }\n  set useTextureToStoreTargets(value) {\n    this._useTextureToStoreTargets = value;\n  }\n  /**\n   * Gets a boolean indicating that the targets are stored into a texture (instead of as attributes)\n   */\n  get isUsingTextureForTargets() {\n    var _a;\n    return MorphTargetManager.EnableTextureStorage && this.useTextureToStoreTargets && this._canUseTextureForTargets && !((_a = this._scene) === null || _a === void 0 ? void 0 : _a.getEngine().getCaps().disableMorphTargetTexture);\n  }\n  /**\n   * Gets the active target at specified index. An active target is a target with an influence > 0\n   * @param index defines the index to check\n   * @returns the requested target\n   */\n  getActiveTarget(index) {\n    return this._activeTargets.data[index];\n  }\n  /**\n   * Gets the target at specified index\n   * @param index defines the index to check\n   * @returns the requested target\n   */\n  getTarget(index) {\n    return this._targets[index];\n  }\n  /**\n   * Add a new target to this manager\n   * @param target defines the target to add\n   */\n  addTarget(target) {\n    this._targets.push(target);\n    this._targetInfluenceChangedObservers.push(target.onInfluenceChanged.add(needUpdate => {\n      this._syncActiveTargets(needUpdate);\n    }));\n    this._targetDataLayoutChangedObservers.push(target._onDataLayoutChanged.add(() => {\n      this._syncActiveTargets(true);\n    }));\n    this._syncActiveTargets(true);\n  }\n  /**\n   * Removes a target from the manager\n   * @param target defines the target to remove\n   */\n  removeTarget(target) {\n    const index = this._targets.indexOf(target);\n    if (index >= 0) {\n      this._targets.splice(index, 1);\n      target.onInfluenceChanged.remove(this._targetInfluenceChangedObservers.splice(index, 1)[0]);\n      target._onDataLayoutChanged.remove(this._targetDataLayoutChangedObservers.splice(index, 1)[0]);\n      this._syncActiveTargets(true);\n    }\n    if (this._scene) {\n      this._scene.stopAnimation(target);\n    }\n  }\n  /**\n   * @internal\n   */\n  _bind(effect) {\n    effect.setFloat3(\"morphTargetTextureInfo\", this._textureVertexStride, this._textureWidth, this._textureHeight);\n    effect.setFloatArray(\"morphTargetTextureIndices\", this._morphTargetTextureIndices);\n    effect.setTexture(\"morphTargets\", this._targetStoreTexture);\n  }\n  /**\n   * Clone the current manager\n   * @returns a new MorphTargetManager\n   */\n  clone() {\n    const copy = new MorphTargetManager(this._scene);\n    for (const target of this._targets) {\n      copy.addTarget(target.clone());\n    }\n    copy.enableNormalMorphing = this.enableNormalMorphing;\n    copy.enableTangentMorphing = this.enableTangentMorphing;\n    copy.enableUVMorphing = this.enableUVMorphing;\n    return copy;\n  }\n  /**\n   * Serializes the current manager into a Serialization object\n   * @returns the serialized object\n   */\n  serialize() {\n    const serializationObject = {};\n    serializationObject.id = this.uniqueId;\n    serializationObject.targets = [];\n    for (const target of this._targets) {\n      serializationObject.targets.push(target.serialize());\n    }\n    return serializationObject;\n  }\n  _syncActiveTargets(needUpdate) {\n    if (this.areUpdatesFrozen) {\n      return;\n    }\n    let influenceCount = 0;\n    this._activeTargets.reset();\n    this._supportsNormals = true;\n    this._supportsTangents = true;\n    this._supportsUVs = true;\n    this._vertexCount = 0;\n    if (this._scene && this._targets.length > this._scene.getEngine().getCaps().texture2DArrayMaxLayerCount) {\n      this.useTextureToStoreTargets = false;\n    }\n    if (!this._morphTargetTextureIndices || this._morphTargetTextureIndices.length !== this._targets.length) {\n      this._morphTargetTextureIndices = new Float32Array(this._targets.length);\n    }\n    let targetIndex = -1;\n    for (const target of this._targets) {\n      targetIndex++;\n      if (target.influence === 0 && this.optimizeInfluencers) {\n        continue;\n      }\n      if (this._activeTargets.length >= MorphTargetManager.MaxActiveMorphTargetsInVertexAttributeMode && !this.isUsingTextureForTargets) {\n        break;\n      }\n      this._activeTargets.push(target);\n      this._morphTargetTextureIndices[influenceCount] = targetIndex;\n      this._tempInfluences[influenceCount++] = target.influence;\n      this._supportsNormals = this._supportsNormals && target.hasNormals;\n      this._supportsTangents = this._supportsTangents && target.hasTangents;\n      this._supportsUVs = this._supportsUVs && target.hasUVs;\n      const positions = target.getPositions();\n      if (positions) {\n        const vertexCount = positions.length / 3;\n        if (this._vertexCount === 0) {\n          this._vertexCount = vertexCount;\n        } else if (this._vertexCount !== vertexCount) {\n          Logger.Error(\"Incompatible target. Targets must all have the same vertices count.\");\n          return;\n        }\n      }\n    }\n    if (this._morphTargetTextureIndices.length !== influenceCount) {\n      this._morphTargetTextureIndices = this._morphTargetTextureIndices.slice(0, influenceCount);\n    }\n    if (!this._influences || this._influences.length !== influenceCount) {\n      this._influences = new Float32Array(influenceCount);\n    }\n    for (let index = 0; index < influenceCount; index++) {\n      this._influences[index] = this._tempInfluences[index];\n    }\n    if (needUpdate) {\n      this.synchronize();\n    }\n  }\n  /**\n   * Synchronize the targets with all the meshes using this morph target manager\n   */\n  synchronize() {\n    if (!this._scene || this.areUpdatesFrozen) {\n      return;\n    }\n    if (this.isUsingTextureForTargets && this._vertexCount) {\n      this._textureVertexStride = 1;\n      if (this._supportsNormals) {\n        this._textureVertexStride++;\n      }\n      if (this._supportsTangents) {\n        this._textureVertexStride++;\n      }\n      if (this._supportsUVs) {\n        this._textureVertexStride++;\n      }\n      this._textureWidth = this._vertexCount * this._textureVertexStride;\n      this._textureHeight = 1;\n      const maxTextureSize = this._scene.getEngine().getCaps().maxTextureSize;\n      if (this._textureWidth > maxTextureSize) {\n        this._textureHeight = Math.ceil(this._textureWidth / maxTextureSize);\n        this._textureWidth = maxTextureSize;\n      }\n      let mustUpdateTexture = true;\n      if (this._targetStoreTexture) {\n        const textureSize = this._targetStoreTexture.getSize();\n        if (textureSize.width === this._textureWidth && textureSize.height === this._textureHeight && this._targetStoreTexture.depth === this._targets.length) {\n          mustUpdateTexture = false;\n        }\n      }\n      if (mustUpdateTexture) {\n        if (this._targetStoreTexture) {\n          this._targetStoreTexture.dispose();\n        }\n        const targetCount = this._targets.length;\n        const data = new Float32Array(targetCount * this._textureWidth * this._textureHeight * 4);\n        let offset = 0;\n        for (let index = 0; index < targetCount; index++) {\n          const target = this._targets[index];\n          const positions = target.getPositions();\n          const normals = target.getNormals();\n          const uvs = target.getUVs();\n          const tangents = target.getTangents();\n          if (!positions) {\n            if (index === 0) {\n              Logger.Error(\"Invalid morph target. Target must have positions.\");\n            }\n            return;\n          }\n          offset = index * this._textureWidth * this._textureHeight * 4;\n          for (let vertex = 0; vertex < this._vertexCount; vertex++) {\n            data[offset] = positions[vertex * 3];\n            data[offset + 1] = positions[vertex * 3 + 1];\n            data[offset + 2] = positions[vertex * 3 + 2];\n            offset += 4;\n            if (this._supportsNormals && normals) {\n              data[offset] = normals[vertex * 3];\n              data[offset + 1] = normals[vertex * 3 + 1];\n              data[offset + 2] = normals[vertex * 3 + 2];\n              offset += 4;\n            }\n            if (this._supportsUVs && uvs) {\n              data[offset] = uvs[vertex * 2];\n              data[offset + 1] = uvs[vertex * 2 + 1];\n              offset += 4;\n            }\n            if (this._supportsTangents && tangents) {\n              data[offset] = tangents[vertex * 3];\n              data[offset + 1] = tangents[vertex * 3 + 1];\n              data[offset + 2] = tangents[vertex * 3 + 2];\n              offset += 4;\n            }\n          }\n        }\n        this._targetStoreTexture = RawTexture2DArray.CreateRGBATexture(data, this._textureWidth, this._textureHeight, targetCount, this._scene, false, false, 1, 1);\n      }\n    }\n    // Flag meshes as dirty to resync with the active targets\n    for (const mesh of this._scene.meshes) {\n      if (mesh.morphTargetManager === this) {\n        mesh._syncGeometryWithMorphTargetManager();\n      }\n    }\n  }\n  /**\n   * Release all resources\n   */\n  dispose() {\n    if (this._targetStoreTexture) {\n      this._targetStoreTexture.dispose();\n    }\n    this._targetStoreTexture = null;\n    // Remove from scene\n    if (this._scene) {\n      this._scene.removeMorphTargetManager(this);\n      if (this._parentContainer) {\n        const index = this._parentContainer.morphTargetManagers.indexOf(this);\n        if (index > -1) {\n          this._parentContainer.morphTargetManagers.splice(index, 1);\n        }\n        this._parentContainer = null;\n      }\n      for (const morph of this._targets) {\n        this._scene.stopAnimation(morph);\n      }\n    }\n  }\n  // Statics\n  /**\n   * Creates a new MorphTargetManager from serialized data\n   * @param serializationObject defines the serialized data\n   * @param scene defines the hosting scene\n   * @returns the new MorphTargetManager\n   */\n  static Parse(serializationObject, scene) {\n    const result = new MorphTargetManager(scene);\n    result._uniqueId = serializationObject.id;\n    for (const targetData of serializationObject.targets) {\n      result.addTarget(MorphTarget.Parse(targetData, scene));\n    }\n    return result;\n  }\n}\n/** Enable storing morph target data into textures when set to true (true by default) */\nMorphTargetManager.EnableTextureStorage = true;\n/** Maximum number of active morph targets supported in the \"vertex attribute\" mode (i.e., not the \"texture\" mode) */\nMorphTargetManager.MaxActiveMorphTargetsInVertexAttributeMode = 8;","map":{"version":3,"names":["SmartArray","Logger","EngineStore","MorphTarget","RawTexture2DArray","MorphTargetManager","areUpdatesFrozen","block","_blockCounter","_syncActiveTargets","constructor","scene","_targets","Array","_targetInfluenceChangedObservers","_targetDataLayoutChangedObservers","_activeTargets","_supportsNormals","_supportsTangents","_supportsUVs","_vertexCount","_textureVertexStride","_textureWidth","_textureHeight","_uniqueId","_tempInfluences","_canUseTextureForTargets","_parentContainer","optimizeInfluencers","enableNormalMorphing","enableTangentMorphing","enableUVMorphing","_useTextureToStoreTargets","LastCreatedScene","_scene","addMorphTargetManager","getUniqueId","engineCaps","getEngine","getCaps","canUseGLVertexID","textureFloat","maxVertexTextureImageUnits","texture2DArrayMaxLayerCount","uniqueId","vertexCount","supportsNormals","supportsTangents","supportsUVs","numTargets","length","numInfluencers","influences","_influences","useTextureToStoreTargets","value","isUsingTextureForTargets","EnableTextureStorage","_a","disableMorphTargetTexture","getActiveTarget","index","data","getTarget","addTarget","target","push","onInfluenceChanged","add","needUpdate","_onDataLayoutChanged","removeTarget","indexOf","splice","remove","stopAnimation","_bind","effect","setFloat3","setFloatArray","_morphTargetTextureIndices","setTexture","_targetStoreTexture","clone","copy","serialize","serializationObject","id","targets","influenceCount","reset","Float32Array","targetIndex","influence","MaxActiveMorphTargetsInVertexAttributeMode","hasNormals","hasTangents","hasUVs","positions","getPositions","Error","slice","synchronize","maxTextureSize","Math","ceil","mustUpdateTexture","textureSize","getSize","width","height","depth","dispose","targetCount","offset","normals","getNormals","uvs","getUVs","tangents","getTangents","vertex","CreateRGBATexture","mesh","meshes","morphTargetManager","_syncGeometryWithMorphTargetManager","removeMorphTargetManager","morphTargetManagers","morph","Parse","result","targetData"],"sources":["../../../../dev/core/src/Morph/morphTargetManager.ts"],"sourcesContent":["import type { Observer } from \"../Misc/observable\";\r\nimport { SmartArray } from \"../Misc/smartArray\";\r\nimport { Logger } from \"../Misc/logger\";\r\nimport type { Nullable } from \"../types\";\r\nimport type { IDisposable, Scene } from \"../scene\";\r\nimport { EngineStore } from \"../Engines/engineStore\";\r\nimport type { Mesh } from \"../Meshes/mesh\";\r\nimport { MorphTarget } from \"./morphTarget\";\r\nimport { Constants } from \"../Engines/constants\";\r\nimport type { Effect } from \"../Materials/effect\";\r\nimport { RawTexture2DArray } from \"../Materials/Textures/rawTexture2DArray\";\r\nimport type { AbstractScene } from \"../abstractScene\";\r\n/**\r\n * This class is used to deform meshes using morphing between different targets\r\n * @see https://doc.babylonjs.com/features/featuresDeepDive/mesh/morphTargets\r\n */\r\nexport class MorphTargetManager implements IDisposable {\r\n    /** Enable storing morph target data into textures when set to true (true by default) */\r\n    public static EnableTextureStorage = true;\r\n\r\n    /** Maximum number of active morph targets supported in the \"vertex attribute\" mode (i.e., not the \"texture\" mode) */\r\n    public static MaxActiveMorphTargetsInVertexAttributeMode = 8;\r\n\r\n    private _targets = new Array<MorphTarget>();\r\n    private _targetInfluenceChangedObservers = new Array<Nullable<Observer<boolean>>>();\r\n    private _targetDataLayoutChangedObservers = new Array<Nullable<Observer<void>>>();\r\n    private _activeTargets = new SmartArray<MorphTarget>(16);\r\n    private _scene: Nullable<Scene>;\r\n    private _influences: Float32Array;\r\n    private _morphTargetTextureIndices: Float32Array;\r\n    private _supportsNormals = false;\r\n    private _supportsTangents = false;\r\n    private _supportsUVs = false;\r\n    private _vertexCount = 0;\r\n    private _textureVertexStride = 0;\r\n    private _textureWidth = 0;\r\n    private _textureHeight = 1;\r\n    private _uniqueId = 0;\r\n    private _tempInfluences = new Array<number>();\r\n    private _canUseTextureForTargets = false;\r\n    private _blockCounter = 0;\r\n\r\n    /** @internal */\r\n    public _parentContainer: Nullable<AbstractScene> = null;\r\n\r\n    /** @internal */\r\n    public _targetStoreTexture: Nullable<RawTexture2DArray>;\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if influencers must be optimized (eg. recompiling the shader if less influencers are used)\r\n     */\r\n    public optimizeInfluencers = true;\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if normals must be morphed\r\n     */\r\n    public enableNormalMorphing = true;\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if tangents must be morphed\r\n     */\r\n    public enableTangentMorphing = true;\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if UV must be morphed\r\n     */\r\n    public enableUVMorphing = true;\r\n\r\n    /**\r\n     * Sets a boolean indicating that adding new target or updating an existing target will not update the underlying data buffers\r\n     */\r\n    public set areUpdatesFrozen(block: boolean) {\r\n        if (block) {\r\n            this._blockCounter++;\r\n        } else {\r\n            this._blockCounter--;\r\n            if (this._blockCounter <= 0) {\r\n                this._blockCounter = 0;\r\n\r\n                this._syncActiveTargets(true);\r\n            }\r\n        }\r\n    }\r\n\r\n    public get areUpdatesFrozen() {\r\n        return this._blockCounter > 0;\r\n    }\r\n\r\n    /**\r\n     * Creates a new MorphTargetManager\r\n     * @param scene defines the current scene\r\n     */\r\n    public constructor(scene: Nullable<Scene> = null) {\r\n        if (!scene) {\r\n            scene = EngineStore.LastCreatedScene;\r\n        }\r\n\r\n        this._scene = scene;\r\n\r\n        if (this._scene) {\r\n            this._scene.addMorphTargetManager(this);\r\n\r\n            this._uniqueId = this._scene.getUniqueId();\r\n\r\n            const engineCaps = this._scene.getEngine().getCaps();\r\n            this._canUseTextureForTargets =\r\n                engineCaps.canUseGLVertexID && engineCaps.textureFloat && engineCaps.maxVertexTextureImageUnits > 0 && engineCaps.texture2DArrayMaxLayerCount > 1;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets the unique ID of this manager\r\n     */\r\n    public get uniqueId(): number {\r\n        return this._uniqueId;\r\n    }\r\n\r\n    /**\r\n     * Gets the number of vertices handled by this manager\r\n     */\r\n    public get vertexCount(): number {\r\n        return this._vertexCount;\r\n    }\r\n\r\n    /**\r\n     * Gets a boolean indicating if this manager supports morphing of normals\r\n     */\r\n    public get supportsNormals(): boolean {\r\n        return this._supportsNormals && this.enableNormalMorphing;\r\n    }\r\n\r\n    /**\r\n     * Gets a boolean indicating if this manager supports morphing of tangents\r\n     */\r\n    public get supportsTangents(): boolean {\r\n        return this._supportsTangents && this.enableTangentMorphing;\r\n    }\r\n\r\n    /**\r\n     * Gets a boolean indicating if this manager supports morphing of texture coordinates\r\n     */\r\n    public get supportsUVs(): boolean {\r\n        return this._supportsUVs && this.enableUVMorphing;\r\n    }\r\n\r\n    /**\r\n     * Gets the number of targets stored in this manager\r\n     */\r\n    public get numTargets(): number {\r\n        return this._targets.length;\r\n    }\r\n\r\n    /**\r\n     * Gets the number of influencers (ie. the number of targets with influences > 0)\r\n     */\r\n    public get numInfluencers(): number {\r\n        return this._activeTargets.length;\r\n    }\r\n\r\n    /**\r\n     * Gets the list of influences (one per target)\r\n     */\r\n    public get influences(): Float32Array {\r\n        return this._influences;\r\n    }\r\n\r\n    private _useTextureToStoreTargets = true;\r\n    /**\r\n     * Gets or sets a boolean indicating that targets should be stored as a texture instead of using vertex attributes (default is true).\r\n     * Please note that this option is not available if the hardware does not support it\r\n     */\r\n    public get useTextureToStoreTargets(): boolean {\r\n        return this._useTextureToStoreTargets;\r\n    }\r\n\r\n    public set useTextureToStoreTargets(value: boolean) {\r\n        this._useTextureToStoreTargets = value;\r\n    }\r\n\r\n    /**\r\n     * Gets a boolean indicating that the targets are stored into a texture (instead of as attributes)\r\n     */\r\n    public get isUsingTextureForTargets() {\r\n        return (\r\n            MorphTargetManager.EnableTextureStorage &&\r\n            this.useTextureToStoreTargets &&\r\n            this._canUseTextureForTargets &&\r\n            !this._scene?.getEngine().getCaps().disableMorphTargetTexture\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Gets the active target at specified index. An active target is a target with an influence > 0\r\n     * @param index defines the index to check\r\n     * @returns the requested target\r\n     */\r\n    public getActiveTarget(index: number): MorphTarget {\r\n        return this._activeTargets.data[index];\r\n    }\r\n\r\n    /**\r\n     * Gets the target at specified index\r\n     * @param index defines the index to check\r\n     * @returns the requested target\r\n     */\r\n    public getTarget(index: number): MorphTarget {\r\n        return this._targets[index];\r\n    }\r\n\r\n    /**\r\n     * Add a new target to this manager\r\n     * @param target defines the target to add\r\n     */\r\n    public addTarget(target: MorphTarget): void {\r\n        this._targets.push(target);\r\n        this._targetInfluenceChangedObservers.push(\r\n            target.onInfluenceChanged.add((needUpdate) => {\r\n                this._syncActiveTargets(needUpdate);\r\n            })\r\n        );\r\n        this._targetDataLayoutChangedObservers.push(\r\n            target._onDataLayoutChanged.add(() => {\r\n                this._syncActiveTargets(true);\r\n            })\r\n        );\r\n        this._syncActiveTargets(true);\r\n    }\r\n\r\n    /**\r\n     * Removes a target from the manager\r\n     * @param target defines the target to remove\r\n     */\r\n    public removeTarget(target: MorphTarget): void {\r\n        const index = this._targets.indexOf(target);\r\n        if (index >= 0) {\r\n            this._targets.splice(index, 1);\r\n\r\n            target.onInfluenceChanged.remove(this._targetInfluenceChangedObservers.splice(index, 1)[0]);\r\n            target._onDataLayoutChanged.remove(this._targetDataLayoutChangedObservers.splice(index, 1)[0]);\r\n            this._syncActiveTargets(true);\r\n        }\r\n\r\n        if (this._scene) {\r\n            this._scene.stopAnimation(target);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _bind(effect: Effect) {\r\n        effect.setFloat3(\"morphTargetTextureInfo\", this._textureVertexStride, this._textureWidth, this._textureHeight);\r\n        effect.setFloatArray(\"morphTargetTextureIndices\", this._morphTargetTextureIndices);\r\n        effect.setTexture(\"morphTargets\", this._targetStoreTexture);\r\n    }\r\n\r\n    /**\r\n     * Clone the current manager\r\n     * @returns a new MorphTargetManager\r\n     */\r\n    public clone(): MorphTargetManager {\r\n        const copy = new MorphTargetManager(this._scene);\r\n\r\n        for (const target of this._targets) {\r\n            copy.addTarget(target.clone());\r\n        }\r\n\r\n        copy.enableNormalMorphing = this.enableNormalMorphing;\r\n        copy.enableTangentMorphing = this.enableTangentMorphing;\r\n        copy.enableUVMorphing = this.enableUVMorphing;\r\n\r\n        return copy;\r\n    }\r\n\r\n    /**\r\n     * Serializes the current manager into a Serialization object\r\n     * @returns the serialized object\r\n     */\r\n    public serialize(): any {\r\n        const serializationObject: any = {};\r\n\r\n        serializationObject.id = this.uniqueId;\r\n\r\n        serializationObject.targets = [];\r\n        for (const target of this._targets) {\r\n            serializationObject.targets.push(target.serialize());\r\n        }\r\n\r\n        return serializationObject;\r\n    }\r\n\r\n    private _syncActiveTargets(needUpdate: boolean): void {\r\n        if (this.areUpdatesFrozen) {\r\n            return;\r\n        }\r\n\r\n        let influenceCount = 0;\r\n        this._activeTargets.reset();\r\n        this._supportsNormals = true;\r\n        this._supportsTangents = true;\r\n        this._supportsUVs = true;\r\n        this._vertexCount = 0;\r\n\r\n        if (this._scene && this._targets.length > this._scene.getEngine().getCaps().texture2DArrayMaxLayerCount) {\r\n            this.useTextureToStoreTargets = false;\r\n        }\r\n\r\n        if (!this._morphTargetTextureIndices || this._morphTargetTextureIndices.length !== this._targets.length) {\r\n            this._morphTargetTextureIndices = new Float32Array(this._targets.length);\r\n        }\r\n\r\n        let targetIndex = -1;\r\n        for (const target of this._targets) {\r\n            targetIndex++;\r\n            if (target.influence === 0 && this.optimizeInfluencers) {\r\n                continue;\r\n            }\r\n\r\n            if (this._activeTargets.length >= MorphTargetManager.MaxActiveMorphTargetsInVertexAttributeMode && !this.isUsingTextureForTargets) {\r\n                break;\r\n            }\r\n\r\n            this._activeTargets.push(target);\r\n            this._morphTargetTextureIndices[influenceCount] = targetIndex;\r\n            this._tempInfluences[influenceCount++] = target.influence;\r\n\r\n            this._supportsNormals = this._supportsNormals && target.hasNormals;\r\n            this._supportsTangents = this._supportsTangents && target.hasTangents;\r\n            this._supportsUVs = this._supportsUVs && target.hasUVs;\r\n\r\n            const positions = target.getPositions();\r\n            if (positions) {\r\n                const vertexCount = positions.length / 3;\r\n                if (this._vertexCount === 0) {\r\n                    this._vertexCount = vertexCount;\r\n                } else if (this._vertexCount !== vertexCount) {\r\n                    Logger.Error(\"Incompatible target. Targets must all have the same vertices count.\");\r\n                    return;\r\n                }\r\n            }\r\n        }\r\n\r\n        if (this._morphTargetTextureIndices.length !== influenceCount) {\r\n            this._morphTargetTextureIndices = this._morphTargetTextureIndices.slice(0, influenceCount);\r\n        }\r\n\r\n        if (!this._influences || this._influences.length !== influenceCount) {\r\n            this._influences = new Float32Array(influenceCount);\r\n        }\r\n\r\n        for (let index = 0; index < influenceCount; index++) {\r\n            this._influences[index] = this._tempInfluences[index];\r\n        }\r\n\r\n        if (needUpdate) {\r\n            this.synchronize();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Synchronize the targets with all the meshes using this morph target manager\r\n     */\r\n    public synchronize(): void {\r\n        if (!this._scene || this.areUpdatesFrozen) {\r\n            return;\r\n        }\r\n\r\n        if (this.isUsingTextureForTargets && this._vertexCount) {\r\n            this._textureVertexStride = 1;\r\n\r\n            if (this._supportsNormals) {\r\n                this._textureVertexStride++;\r\n            }\r\n\r\n            if (this._supportsTangents) {\r\n                this._textureVertexStride++;\r\n            }\r\n\r\n            if (this._supportsUVs) {\r\n                this._textureVertexStride++;\r\n            }\r\n\r\n            this._textureWidth = this._vertexCount * this._textureVertexStride;\r\n            this._textureHeight = 1;\r\n\r\n            const maxTextureSize = this._scene.getEngine().getCaps().maxTextureSize;\r\n            if (this._textureWidth > maxTextureSize) {\r\n                this._textureHeight = Math.ceil(this._textureWidth / maxTextureSize);\r\n                this._textureWidth = maxTextureSize;\r\n            }\r\n\r\n            let mustUpdateTexture = true;\r\n            if (this._targetStoreTexture) {\r\n                const textureSize = this._targetStoreTexture.getSize();\r\n                if (textureSize.width === this._textureWidth && textureSize.height === this._textureHeight && this._targetStoreTexture.depth === this._targets.length) {\r\n                    mustUpdateTexture = false;\r\n                }\r\n            }\r\n\r\n            if (mustUpdateTexture) {\r\n                if (this._targetStoreTexture) {\r\n                    this._targetStoreTexture.dispose();\r\n                }\r\n\r\n                const targetCount = this._targets.length;\r\n                const data = new Float32Array(targetCount * this._textureWidth * this._textureHeight * 4);\r\n\r\n                let offset = 0;\r\n                for (let index = 0; index < targetCount; index++) {\r\n                    const target = this._targets[index];\r\n\r\n                    const positions = target.getPositions();\r\n                    const normals = target.getNormals();\r\n                    const uvs = target.getUVs();\r\n                    const tangents = target.getTangents();\r\n\r\n                    if (!positions) {\r\n                        if (index === 0) {\r\n                            Logger.Error(\"Invalid morph target. Target must have positions.\");\r\n                        }\r\n                        return;\r\n                    }\r\n\r\n                    offset = index * this._textureWidth * this._textureHeight * 4;\r\n                    for (let vertex = 0; vertex < this._vertexCount; vertex++) {\r\n                        data[offset] = positions[vertex * 3];\r\n                        data[offset + 1] = positions[vertex * 3 + 1];\r\n                        data[offset + 2] = positions[vertex * 3 + 2];\r\n\r\n                        offset += 4;\r\n\r\n                        if (this._supportsNormals && normals) {\r\n                            data[offset] = normals[vertex * 3];\r\n                            data[offset + 1] = normals[vertex * 3 + 1];\r\n                            data[offset + 2] = normals[vertex * 3 + 2];\r\n                            offset += 4;\r\n                        }\r\n\r\n                        if (this._supportsUVs && uvs) {\r\n                            data[offset] = uvs[vertex * 2];\r\n                            data[offset + 1] = uvs[vertex * 2 + 1];\r\n                            offset += 4;\r\n                        }\r\n\r\n                        if (this._supportsTangents && tangents) {\r\n                            data[offset] = tangents[vertex * 3];\r\n                            data[offset + 1] = tangents[vertex * 3 + 1];\r\n                            data[offset + 2] = tangents[vertex * 3 + 2];\r\n                            offset += 4;\r\n                        }\r\n                    }\r\n                }\r\n\r\n                this._targetStoreTexture = RawTexture2DArray.CreateRGBATexture(\r\n                    data,\r\n                    this._textureWidth,\r\n                    this._textureHeight,\r\n                    targetCount,\r\n                    this._scene,\r\n                    false,\r\n                    false,\r\n                    Constants.TEXTURE_NEAREST_SAMPLINGMODE,\r\n                    Constants.TEXTURETYPE_FLOAT\r\n                );\r\n            }\r\n        }\r\n\r\n        // Flag meshes as dirty to resync with the active targets\r\n        for (const mesh of this._scene.meshes) {\r\n            if ((<any>mesh).morphTargetManager === this) {\r\n                (<Mesh>mesh)._syncGeometryWithMorphTargetManager();\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Release all resources\r\n     */\r\n    public dispose() {\r\n        if (this._targetStoreTexture) {\r\n            this._targetStoreTexture.dispose();\r\n        }\r\n\r\n        this._targetStoreTexture = null;\r\n\r\n        // Remove from scene\r\n        if (this._scene) {\r\n            this._scene.removeMorphTargetManager(this);\r\n\r\n            if (this._parentContainer) {\r\n                const index = this._parentContainer.morphTargetManagers.indexOf(this);\r\n                if (index > -1) {\r\n                    this._parentContainer.morphTargetManagers.splice(index, 1);\r\n                }\r\n                this._parentContainer = null;\r\n            }\r\n\r\n            for (const morph of this._targets) {\r\n                this._scene.stopAnimation(morph);\r\n            }\r\n        }\r\n    }\r\n\r\n    // Statics\r\n\r\n    /**\r\n     * Creates a new MorphTargetManager from serialized data\r\n     * @param serializationObject defines the serialized data\r\n     * @param scene defines the hosting scene\r\n     * @returns the new MorphTargetManager\r\n     */\r\n    public static Parse(serializationObject: any, scene: Scene): MorphTargetManager {\r\n        const result = new MorphTargetManager(scene);\r\n\r\n        result._uniqueId = serializationObject.id;\r\n\r\n        for (const targetData of serializationObject.targets) {\r\n            result.addTarget(MorphTarget.Parse(targetData, scene));\r\n        }\r\n\r\n        return result;\r\n    }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}