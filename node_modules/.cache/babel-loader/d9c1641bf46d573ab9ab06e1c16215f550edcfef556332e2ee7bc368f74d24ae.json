{"ast":null,"code":"import { RichTypeNumber } from \"../../../flowGraphRichTypes.js\";\nimport { FlowGraphWithOnDoneExecutionBlock } from \"../../../flowGraphWithOnDoneExecutionBlock.js\";\nimport { RegisterClass } from \"../../../../Misc/typeStore.js\";\n/**\n * @experimental\n * This block debounces the execution of a input, i.e. ensures that the input is only executed once every X times\n */\nexport class FlowGraphDebounceBlock extends FlowGraphWithOnDoneExecutionBlock {\n  constructor(config) {\n    super(config);\n    this.count = this._registerDataInput(\"count\", RichTypeNumber);\n    this.reset = this._registerSignalInput(\"reset\");\n    this.currentCount = this._registerDataOutput(\"currentCount\", RichTypeNumber);\n  }\n  _execute(context, callingSignal) {\n    if (callingSignal === this.reset) {\n      context._setExecutionVariable(this, \"debounceCount\", 0);\n      return;\n    }\n    const count = this.count.getValue(context);\n    const currentCount = context._getExecutionVariable(this, \"debounceCount\", 0);\n    const newCount = currentCount + 1;\n    this.currentCount.setValue(newCount, context);\n    context._setExecutionVariable(this, \"debounceCount\", newCount);\n    if (newCount >= count) {\n      this.onDone._activateSignal(context);\n      context._setExecutionVariable(this, \"debounceCount\", 0);\n    }\n  }\n  getClassName() {\n    return \"FGDebounceBlock\";\n  }\n}\nRegisterClass(\"FGDebounceBlock\", FlowGraphDebounceBlock);","map":{"version":3,"names":["RichTypeNumber","FlowGraphWithOnDoneExecutionBlock","RegisterClass","FlowGraphDebounceBlock","constructor","config","count","_registerDataInput","reset","_registerSignalInput","currentCount","_registerDataOutput","_execute","context","callingSignal","_setExecutionVariable","getValue","_getExecutionVariable","newCount","setValue","onDone","_activateSignal","getClassName"],"sources":["../../../../../../../dev/core/src/FlowGraph/Blocks/Execution/ControlFlow/flowGraphDebounceBlock.ts"],"sourcesContent":["import type { FlowGraphContext } from \"core/FlowGraph/flowGraphContext\";\r\nimport type { FlowGraphDataConnection } from \"core/FlowGraph/flowGraphDataConnection\";\r\nimport { RichTypeNumber } from \"core/FlowGraph/flowGraphRichTypes\";\r\nimport type { FlowGraphSignalConnection } from \"core/FlowGraph/flowGraphSignalConnection\";\r\nimport { FlowGraphWithOnDoneExecutionBlock } from \"core/FlowGraph/flowGraphWithOnDoneExecutionBlock\";\r\nimport { RegisterClass } from \"../../../../Misc/typeStore\";\r\nimport type { IFlowGraphBlockConfiguration } from \"../../../flowGraphBlock\";\r\n\r\n/**\r\n * @experimental\r\n * This block debounces the execution of a input, i.e. ensures that the input is only executed once every X times\r\n */\r\nexport class FlowGraphDebounceBlock extends FlowGraphWithOnDoneExecutionBlock {\r\n    /**\r\n     * Input: The number of times the input must be executed before the onDone signal is activated\r\n     */\r\n    public readonly count: FlowGraphDataConnection<number>;\r\n    /**\r\n     * Input: Resets the debounce counter\r\n     */\r\n    public readonly reset: FlowGraphSignalConnection;\r\n    /**\r\n     * Output: The current count of the debounce counter\r\n     */\r\n    public readonly currentCount: FlowGraphDataConnection<number>;\r\n\r\n    constructor(config?: IFlowGraphBlockConfiguration) {\r\n        super(config);\r\n        this.count = this._registerDataInput(\"count\", RichTypeNumber);\r\n        this.reset = this._registerSignalInput(\"reset\");\r\n        this.currentCount = this._registerDataOutput(\"currentCount\", RichTypeNumber);\r\n    }\r\n\r\n    public _execute(context: FlowGraphContext, callingSignal: FlowGraphSignalConnection): void {\r\n        if (callingSignal === this.reset) {\r\n            context._setExecutionVariable(this, \"debounceCount\", 0);\r\n            return;\r\n        }\r\n        const count = this.count.getValue(context);\r\n        const currentCount = context._getExecutionVariable(this, \"debounceCount\", 0);\r\n        const newCount = currentCount + 1;\r\n\r\n        this.currentCount.setValue(newCount, context);\r\n        context._setExecutionVariable(this, \"debounceCount\", newCount);\r\n        if (newCount >= count) {\r\n            this.onDone._activateSignal(context);\r\n            context._setExecutionVariable(this, \"debounceCount\", 0);\r\n        }\r\n    }\r\n\r\n    public getClassName(): string {\r\n        return \"FGDebounceBlock\";\r\n    }\r\n}\r\nRegisterClass(\"FGDebounceBlock\", FlowGraphDebounceBlock);\r\n"],"mappings":"AAEA,SAASA,cAAc,QAAE;AAEzB,SAASC,iCAAiC,QAAE;AAC5C,SAASC,aAAa,QAAQ,+BAA6B;AAG3D;;;;AAIA,OAAM,MAAOC,sBAAuB,SAAQF,iCAAiC;EAczEG,YAAYC,MAAqC;IAC7C,KAAK,CAACA,MAAM,CAAC;IACb,IAAI,CAACC,KAAK,GAAG,IAAI,CAACC,kBAAkB,CAAC,OAAO,EAAEP,cAAc,CAAC;IAC7D,IAAI,CAACQ,KAAK,GAAG,IAAI,CAACC,oBAAoB,CAAC,OAAO,CAAC;IAC/C,IAAI,CAACC,YAAY,GAAG,IAAI,CAACC,mBAAmB,CAAC,cAAc,EAAEX,cAAc,CAAC;EAChF;EAEOY,QAAQA,CAACC,OAAyB,EAAEC,aAAwC;IAC/E,IAAIA,aAAa,KAAK,IAAI,CAACN,KAAK,EAAE;MAC9BK,OAAO,CAACE,qBAAqB,CAAC,IAAI,EAAE,eAAe,EAAE,CAAC,CAAC;MACvD;;IAEJ,MAAMT,KAAK,GAAG,IAAI,CAACA,KAAK,CAACU,QAAQ,CAACH,OAAO,CAAC;IAC1C,MAAMH,YAAY,GAAGG,OAAO,CAACI,qBAAqB,CAAC,IAAI,EAAE,eAAe,EAAE,CAAC,CAAC;IAC5E,MAAMC,QAAQ,GAAGR,YAAY,GAAG,CAAC;IAEjC,IAAI,CAACA,YAAY,CAACS,QAAQ,CAACD,QAAQ,EAAEL,OAAO,CAAC;IAC7CA,OAAO,CAACE,qBAAqB,CAAC,IAAI,EAAE,eAAe,EAAEG,QAAQ,CAAC;IAC9D,IAAIA,QAAQ,IAAIZ,KAAK,EAAE;MACnB,IAAI,CAACc,MAAM,CAACC,eAAe,CAACR,OAAO,CAAC;MACpCA,OAAO,CAACE,qBAAqB,CAAC,IAAI,EAAE,eAAe,EAAE,CAAC,CAAC;;EAE/D;EAEOO,YAAYA,CAAA;IACf,OAAO,iBAAiB;EAC5B;;AAEJpB,aAAa,CAAC,iBAAiB,EAAEC,sBAAsB,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}