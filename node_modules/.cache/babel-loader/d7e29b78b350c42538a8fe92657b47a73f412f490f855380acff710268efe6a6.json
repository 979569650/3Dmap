{"ast":null,"code":"import { RichTypeBoolean } from \"../../../flowGraphRichTypes.js\";\nimport { FlowGraphBinaryOperationBlock } from \"../flowGraphBinaryOperationBlock.js\";\nimport { FlowGraphUnaryOperationBlock } from \"../flowGraphUnaryOperationBlock.js\";\nimport { RegisterClass } from \"../../../../Misc/typeStore.js\";\nconst PREFIX = \"FGLogic\";\nconst AND = \"AndBlock\";\nconst OR = \"OrBlock\";\nconst NOT = \"NotBlock\";\n/**\n * Performs an AND operation on two boolean values.\n * @experimental\n */\nexport class FlowGraphLogicAndBlock extends FlowGraphBinaryOperationBlock {\n  constructor(config) {\n    super(RichTypeBoolean, RichTypeBoolean, RichTypeBoolean, (left, right) => left && right, `${PREFIX}${AND}`, config);\n  }\n}\nRegisterClass(`${PREFIX}${AND}`, FlowGraphLogicAndBlock);\n/**\n * Performs an OR operation on two boolean values.\n * @experimental\n */\nexport class FlowGraphLogicOrBlock extends FlowGraphBinaryOperationBlock {\n  constructor(config) {\n    super(RichTypeBoolean, RichTypeBoolean, RichTypeBoolean, (left, right) => left || right, `${PREFIX}${OR}`, config);\n  }\n}\nRegisterClass(`${PREFIX}${OR}`, FlowGraphLogicOrBlock);\n/**\n * Performs a NOT operation on a boolean value\n * @experimental\n */\nexport class FlowGraphLogicNotBlock extends FlowGraphUnaryOperationBlock {\n  constructor(config) {\n    super(RichTypeBoolean, RichTypeBoolean, value => !value, `${PREFIX}${NOT}`, config);\n  }\n}\nRegisterClass(`${PREFIX}${NOT}`, FlowGraphLogicNotBlock);","map":{"version":3,"names":["RichTypeBoolean","FlowGraphBinaryOperationBlock","FlowGraphUnaryOperationBlock","RegisterClass","PREFIX","AND","OR","NOT","FlowGraphLogicAndBlock","constructor","config","left","right","FlowGraphLogicOrBlock","FlowGraphLogicNotBlock","value"],"sources":["../../../../../../../dev/core/src/FlowGraph/Blocks/Data/Logic/flowGraphLogicBlocks.ts"],"sourcesContent":["import { RichTypeBoolean } from \"core/FlowGraph/flowGraphRichTypes\";\r\nimport { FlowGraphBinaryOperationBlock } from \"../flowGraphBinaryOperationBlock\";\r\nimport { FlowGraphUnaryOperationBlock } from \"../flowGraphUnaryOperationBlock\";\r\nimport type { IFlowGraphBlockConfiguration } from \"../../../flowGraphBlock\";\r\nimport { RegisterClass } from \"../../../../Misc/typeStore\";\r\n\r\nconst PREFIX = \"FGLogic\";\r\nconst AND = \"AndBlock\";\r\nconst OR = \"OrBlock\";\r\nconst NOT = \"NotBlock\";\r\n\r\n/**\r\n * Performs an AND operation on two boolean values.\r\n * @experimental\r\n */\r\nexport class FlowGraphLogicAndBlock extends FlowGraphBinaryOperationBlock<boolean, boolean, boolean> {\r\n    constructor(config: IFlowGraphBlockConfiguration) {\r\n        super(RichTypeBoolean, RichTypeBoolean, RichTypeBoolean, (left, right) => left && right, `${PREFIX}${AND}`, config);\r\n    }\r\n}\r\nRegisterClass(`${PREFIX}${AND}`, FlowGraphLogicAndBlock);\r\n\r\n/**\r\n * Performs an OR operation on two boolean values.\r\n * @experimental\r\n */\r\nexport class FlowGraphLogicOrBlock extends FlowGraphBinaryOperationBlock<boolean, boolean, boolean> {\r\n    constructor(config: IFlowGraphBlockConfiguration) {\r\n        super(RichTypeBoolean, RichTypeBoolean, RichTypeBoolean, (left, right) => left || right, `${PREFIX}${OR}`, config);\r\n    }\r\n}\r\nRegisterClass(`${PREFIX}${OR}`, FlowGraphLogicOrBlock);\r\n\r\n/**\r\n * Performs a NOT operation on a boolean value\r\n * @experimental\r\n */\r\nexport class FlowGraphLogicNotBlock extends FlowGraphUnaryOperationBlock<boolean, boolean> {\r\n    constructor(config: IFlowGraphBlockConfiguration) {\r\n        super(RichTypeBoolean, RichTypeBoolean, (value) => !value, `${PREFIX}${NOT}`, config);\r\n    }\r\n}\r\nRegisterClass(`${PREFIX}${NOT}`, FlowGraphLogicNotBlock);\r\n"],"mappings":"AAAA,SAASA,eAAe,QAAE;AAC1B,SAASC,6BAA6B,QAAQ,qCAAmC;AACjF,SAASC,4BAA4B,QAAQ,oCAAkC;AAE/E,SAASC,aAAa,QAAQ,+BAA6B;AAE3D,MAAMC,MAAM,GAAG,SAAS;AACxB,MAAMC,GAAG,GAAG,UAAU;AACtB,MAAMC,EAAE,GAAG,SAAS;AACpB,MAAMC,GAAG,GAAG,UAAU;AAEtB;;;;AAIA,OAAM,MAAOC,sBAAuB,SAAQP,6BAAwD;EAChGQ,YAAYC,MAAoC;IAC5C,KAAK,CAACV,eAAe,EAAEA,eAAe,EAAEA,eAAe,EAAE,CAACW,IAAI,EAAEC,KAAK,KAAKD,IAAI,IAAIC,KAAK,EAAE,GAAGR,MAAM,GAAGC,GAAG,EAAE,EAAEK,MAAM,CAAC;EACvH;;AAEJP,aAAa,CAAC,GAAGC,MAAM,GAAGC,GAAG,EAAE,EAAEG,sBAAsB,CAAC;AAExD;;;;AAIA,OAAM,MAAOK,qBAAsB,SAAQZ,6BAAwD;EAC/FQ,YAAYC,MAAoC;IAC5C,KAAK,CAACV,eAAe,EAAEA,eAAe,EAAEA,eAAe,EAAE,CAACW,IAAI,EAAEC,KAAK,KAAKD,IAAI,IAAIC,KAAK,EAAE,GAAGR,MAAM,GAAGE,EAAE,EAAE,EAAEI,MAAM,CAAC;EACtH;;AAEJP,aAAa,CAAC,GAAGC,MAAM,GAAGE,EAAE,EAAE,EAAEO,qBAAqB,CAAC;AAEtD;;;;AAIA,OAAM,MAAOC,sBAAuB,SAAQZ,4BAA8C;EACtFO,YAAYC,MAAoC;IAC5C,KAAK,CAACV,eAAe,EAAEA,eAAe,EAAGe,KAAK,IAAK,CAACA,KAAK,EAAE,GAAGX,MAAM,GAAGG,GAAG,EAAE,EAAEG,MAAM,CAAC;EACzF;;AAEJP,aAAa,CAAC,GAAGC,MAAM,GAAGG,GAAG,EAAE,EAAEO,sBAAsB,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}