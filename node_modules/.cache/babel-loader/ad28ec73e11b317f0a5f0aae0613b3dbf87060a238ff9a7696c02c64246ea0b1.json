{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { __decorate } from \"../../tslib.es6.js\";\nimport { serialize, serializeAsTexture, expandToProperty, serializeAsColor3 } from \"../../Misc/decorators.js\";\nimport { Color3 } from \"../../Maths/math.color.js\";\nimport { MaterialFlags } from \"../materialFlags.js\";\nimport { MaterialHelper } from \"../../Materials/materialHelper.js\";\nimport { MaterialPluginBase } from \"../materialPluginBase.js\";\nimport { MaterialDefines } from \"../materialDefines.js\";\n/**\n * @internal\n */\nexport class MaterialClearCoatDefines extends MaterialDefines {\n  constructor() {\n    super(...arguments);\n    this.CLEARCOAT = false;\n    this.CLEARCOAT_DEFAULTIOR = false;\n    this.CLEARCOAT_TEXTURE = false;\n    this.CLEARCOAT_TEXTURE_ROUGHNESS = false;\n    this.CLEARCOAT_TEXTUREDIRECTUV = 0;\n    this.CLEARCOAT_TEXTURE_ROUGHNESSDIRECTUV = 0;\n    this.CLEARCOAT_BUMP = false;\n    this.CLEARCOAT_BUMPDIRECTUV = 0;\n    this.CLEARCOAT_USE_ROUGHNESS_FROM_MAINTEXTURE = false;\n    this.CLEARCOAT_TEXTURE_ROUGHNESS_IDENTICAL = false;\n    this.CLEARCOAT_REMAP_F0 = false;\n    this.CLEARCOAT_TINT = false;\n    this.CLEARCOAT_TINT_TEXTURE = false;\n    this.CLEARCOAT_TINT_TEXTUREDIRECTUV = 0;\n    this.CLEARCOAT_TINT_GAMMATEXTURE = false;\n  }\n}\n/**\n * Plugin that implements the clear coat component of the PBR material\n */\nexport class PBRClearCoatConfiguration extends MaterialPluginBase {\n  /** @internal */\n  _markAllSubMeshesAsTexturesDirty() {\n    this._enable(this._isEnabled);\n    this._internalMarkAllSubMeshesAsTexturesDirty();\n  }\n  constructor(material, addToPluginList = true) {\n    super(material, \"PBRClearCoat\", 100, new MaterialClearCoatDefines(), addToPluginList);\n    this._isEnabled = false;\n    /**\n     * Defines if the clear coat is enabled in the material.\n     */\n    this.isEnabled = false;\n    /**\n     * Defines the clear coat layer strength (between 0 and 1) it defaults to 1.\n     */\n    this.intensity = 1;\n    /**\n     * Defines the clear coat layer roughness.\n     */\n    this.roughness = 0;\n    this._indexOfRefraction = PBRClearCoatConfiguration._DefaultIndexOfRefraction;\n    /**\n     * Defines the index of refraction of the clear coat.\n     * This defaults to 1.5 corresponding to a 0.04 f0 or a 4% reflectance at normal incidence\n     * The default fits with a polyurethane material.\n     * Changing the default value is more performance intensive.\n     */\n    this.indexOfRefraction = PBRClearCoatConfiguration._DefaultIndexOfRefraction;\n    this._texture = null;\n    /**\n     * Stores the clear coat values in a texture (red channel is intensity and green channel is roughness)\n     * If useRoughnessFromMainTexture is false, the green channel of texture is not used and the green channel of textureRoughness is used instead\n     * if textureRoughness is not empty, else no texture roughness is used\n     */\n    this.texture = null;\n    this._useRoughnessFromMainTexture = true;\n    /**\n     * Indicates that the green channel of the texture property will be used for roughness (default: true)\n     * If false, the green channel from textureRoughness is used for roughness\n     */\n    this.useRoughnessFromMainTexture = true;\n    this._textureRoughness = null;\n    /**\n     * Stores the clear coat roughness in a texture (green channel)\n     * Not used if useRoughnessFromMainTexture is true\n     */\n    this.textureRoughness = null;\n    this._remapF0OnInterfaceChange = true;\n    /**\n     * Defines if the F0 value should be remapped to account for the interface change in the material.\n     */\n    this.remapF0OnInterfaceChange = true;\n    this._bumpTexture = null;\n    /**\n     * Define the clear coat specific bump texture.\n     */\n    this.bumpTexture = null;\n    this._isTintEnabled = false;\n    /**\n     * Defines if the clear coat tint is enabled in the material.\n     */\n    this.isTintEnabled = false;\n    /**\n     * Defines the clear coat tint of the material.\n     * This is only use if tint is enabled\n     */\n    this.tintColor = Color3.White();\n    /**\n     * Defines the distance at which the tint color should be found in the\n     * clear coat media.\n     * This is only use if tint is enabled\n     */\n    this.tintColorAtDistance = 1;\n    /**\n     * Defines the clear coat layer thickness.\n     * This is only use if tint is enabled\n     */\n    this.tintThickness = 1;\n    this._tintTexture = null;\n    /**\n     * Stores the clear tint values in a texture.\n     * rgb is tint\n     * a is a thickness factor\n     */\n    this.tintTexture = null;\n    this._internalMarkAllSubMeshesAsTexturesDirty = material._dirtyCallbacks[1];\n  }\n  isReadyForSubMesh(defines, scene, engine) {\n    if (!this._isEnabled) {\n      return true;\n    }\n    const disableBumpMap = this._material._disableBumpMap;\n    if (defines._areTexturesDirty) {\n      if (scene.texturesEnabled) {\n        if (this._texture && MaterialFlags.ClearCoatTextureEnabled) {\n          if (!this._texture.isReadyOrNotBlocking()) {\n            return false;\n          }\n        }\n        if (this._textureRoughness && MaterialFlags.ClearCoatTextureEnabled) {\n          if (!this._textureRoughness.isReadyOrNotBlocking()) {\n            return false;\n          }\n        }\n        if (engine.getCaps().standardDerivatives && this._bumpTexture && MaterialFlags.ClearCoatBumpTextureEnabled && !disableBumpMap) {\n          // Bump texture cannot be not blocking.\n          if (!this._bumpTexture.isReady()) {\n            return false;\n          }\n        }\n        if (this._isTintEnabled && this._tintTexture && MaterialFlags.ClearCoatTintTextureEnabled) {\n          if (!this._tintTexture.isReadyOrNotBlocking()) {\n            return false;\n          }\n        }\n      }\n    }\n    return true;\n  }\n  prepareDefinesBeforeAttributes(defines, scene) {\n    var _a;\n    if (this._isEnabled) {\n      defines.CLEARCOAT = true;\n      defines.CLEARCOAT_USE_ROUGHNESS_FROM_MAINTEXTURE = this._useRoughnessFromMainTexture;\n      defines.CLEARCOAT_TEXTURE_ROUGHNESS_IDENTICAL = this._texture !== null && this._texture._texture === ((_a = this._textureRoughness) === null || _a === void 0 ? void 0 : _a._texture) && this._texture.checkTransformsAreIdentical(this._textureRoughness);\n      defines.CLEARCOAT_REMAP_F0 = this._remapF0OnInterfaceChange;\n      if (defines._areTexturesDirty) {\n        if (scene.texturesEnabled) {\n          if (this._texture && MaterialFlags.ClearCoatTextureEnabled) {\n            MaterialHelper.PrepareDefinesForMergedUV(this._texture, defines, \"CLEARCOAT_TEXTURE\");\n          } else {\n            defines.CLEARCOAT_TEXTURE = false;\n          }\n          if (this._textureRoughness && MaterialFlags.ClearCoatTextureEnabled) {\n            MaterialHelper.PrepareDefinesForMergedUV(this._textureRoughness, defines, \"CLEARCOAT_TEXTURE_ROUGHNESS\");\n          } else {\n            defines.CLEARCOAT_TEXTURE_ROUGHNESS = false;\n          }\n          if (this._bumpTexture && MaterialFlags.ClearCoatBumpTextureEnabled) {\n            MaterialHelper.PrepareDefinesForMergedUV(this._bumpTexture, defines, \"CLEARCOAT_BUMP\");\n          } else {\n            defines.CLEARCOAT_BUMP = false;\n          }\n          defines.CLEARCOAT_DEFAULTIOR = this._indexOfRefraction === PBRClearCoatConfiguration._DefaultIndexOfRefraction;\n          if (this._isTintEnabled) {\n            defines.CLEARCOAT_TINT = true;\n            if (this._tintTexture && MaterialFlags.ClearCoatTintTextureEnabled) {\n              MaterialHelper.PrepareDefinesForMergedUV(this._tintTexture, defines, \"CLEARCOAT_TINT_TEXTURE\");\n              defines.CLEARCOAT_TINT_GAMMATEXTURE = this._tintTexture.gammaSpace;\n            } else {\n              defines.CLEARCOAT_TINT_TEXTURE = false;\n            }\n          } else {\n            defines.CLEARCOAT_TINT = false;\n            defines.CLEARCOAT_TINT_TEXTURE = false;\n          }\n        }\n      }\n    } else {\n      defines.CLEARCOAT = false;\n      defines.CLEARCOAT_TEXTURE = false;\n      defines.CLEARCOAT_TEXTURE_ROUGHNESS = false;\n      defines.CLEARCOAT_BUMP = false;\n      defines.CLEARCOAT_TINT = false;\n      defines.CLEARCOAT_TINT_TEXTURE = false;\n      defines.CLEARCOAT_USE_ROUGHNESS_FROM_MAINTEXTURE = false;\n      defines.CLEARCOAT_TEXTURE_ROUGHNESS_IDENTICAL = false;\n      defines.CLEARCOAT_DEFAULTIOR = false;\n      defines.CLEARCOAT_TEXTUREDIRECTUV = 0;\n      defines.CLEARCOAT_TEXTURE_ROUGHNESSDIRECTUV = 0;\n      defines.CLEARCOAT_BUMPDIRECTUV = 0;\n      defines.CLEARCOAT_REMAP_F0 = false;\n      defines.CLEARCOAT_TINT_TEXTUREDIRECTUV = 0;\n      defines.CLEARCOAT_TINT_GAMMATEXTURE = false;\n    }\n  }\n  bindForSubMesh(uniformBuffer, scene, engine, subMesh) {\n    var _a, _b, _c, _d, _e, _f, _g, _h;\n    if (!this._isEnabled) {\n      return;\n    }\n    const defines = subMesh.materialDefines;\n    const isFrozen = this._material.isFrozen;\n    const disableBumpMap = this._material._disableBumpMap;\n    const invertNormalMapX = this._material._invertNormalMapX;\n    const invertNormalMapY = this._material._invertNormalMapY;\n    const identicalTextures = defines.CLEARCOAT_TEXTURE_ROUGHNESS_IDENTICAL;\n    if (!uniformBuffer.useUbo || !isFrozen || !uniformBuffer.isSync) {\n      if (identicalTextures && MaterialFlags.ClearCoatTextureEnabled) {\n        uniformBuffer.updateFloat4(\"vClearCoatInfos\", this._texture.coordinatesIndex, this._texture.level, -1, -1);\n        MaterialHelper.BindTextureMatrix(this._texture, uniformBuffer, \"clearCoat\");\n      } else if ((this._texture || this._textureRoughness) && MaterialFlags.ClearCoatTextureEnabled) {\n        uniformBuffer.updateFloat4(\"vClearCoatInfos\", (_b = (_a = this._texture) === null || _a === void 0 ? void 0 : _a.coordinatesIndex) !== null && _b !== void 0 ? _b : 0, (_d = (_c = this._texture) === null || _c === void 0 ? void 0 : _c.level) !== null && _d !== void 0 ? _d : 0, (_f = (_e = this._textureRoughness) === null || _e === void 0 ? void 0 : _e.coordinatesIndex) !== null && _f !== void 0 ? _f : 0, (_h = (_g = this._textureRoughness) === null || _g === void 0 ? void 0 : _g.level) !== null && _h !== void 0 ? _h : 0);\n        if (this._texture) {\n          MaterialHelper.BindTextureMatrix(this._texture, uniformBuffer, \"clearCoat\");\n        }\n        if (this._textureRoughness && !identicalTextures && !defines.CLEARCOAT_USE_ROUGHNESS_FROM_MAINTEXTURE) {\n          MaterialHelper.BindTextureMatrix(this._textureRoughness, uniformBuffer, \"clearCoatRoughness\");\n        }\n      }\n      if (this._bumpTexture && engine.getCaps().standardDerivatives && MaterialFlags.ClearCoatTextureEnabled && !disableBumpMap) {\n        uniformBuffer.updateFloat2(\"vClearCoatBumpInfos\", this._bumpTexture.coordinatesIndex, this._bumpTexture.level);\n        MaterialHelper.BindTextureMatrix(this._bumpTexture, uniformBuffer, \"clearCoatBump\");\n        if (scene._mirroredCameraPosition) {\n          uniformBuffer.updateFloat2(\"vClearCoatTangentSpaceParams\", invertNormalMapX ? 1.0 : -1.0, invertNormalMapY ? 1.0 : -1.0);\n        } else {\n          uniformBuffer.updateFloat2(\"vClearCoatTangentSpaceParams\", invertNormalMapX ? -1.0 : 1.0, invertNormalMapY ? -1.0 : 1.0);\n        }\n      }\n      if (this._tintTexture && MaterialFlags.ClearCoatTintTextureEnabled) {\n        uniformBuffer.updateFloat2(\"vClearCoatTintInfos\", this._tintTexture.coordinatesIndex, this._tintTexture.level);\n        MaterialHelper.BindTextureMatrix(this._tintTexture, uniformBuffer, \"clearCoatTint\");\n      }\n      // Clear Coat General params\n      uniformBuffer.updateFloat2(\"vClearCoatParams\", this.intensity, this.roughness);\n      // Clear Coat Refraction params\n      const a = 1 - this._indexOfRefraction;\n      const b = 1 + this._indexOfRefraction;\n      const f0 = Math.pow(-a / b, 2); // Schlicks approx: (ior1 - ior2) / (ior1 + ior2) where ior2 for air is close to vacuum = 1.\n      const eta = 1 / this._indexOfRefraction;\n      uniformBuffer.updateFloat4(\"vClearCoatRefractionParams\", f0, eta, a, b);\n      if (this._isTintEnabled) {\n        uniformBuffer.updateFloat4(\"vClearCoatTintParams\", this.tintColor.r, this.tintColor.g, this.tintColor.b, Math.max(0.00001, this.tintThickness));\n        uniformBuffer.updateFloat(\"clearCoatColorAtDistance\", Math.max(0.00001, this.tintColorAtDistance));\n      }\n    }\n    // Textures\n    if (scene.texturesEnabled) {\n      if (this._texture && MaterialFlags.ClearCoatTextureEnabled) {\n        uniformBuffer.setTexture(\"clearCoatSampler\", this._texture);\n      }\n      if (this._textureRoughness && !identicalTextures && !defines.CLEARCOAT_USE_ROUGHNESS_FROM_MAINTEXTURE && MaterialFlags.ClearCoatTextureEnabled) {\n        uniformBuffer.setTexture(\"clearCoatRoughnessSampler\", this._textureRoughness);\n      }\n      if (this._bumpTexture && engine.getCaps().standardDerivatives && MaterialFlags.ClearCoatBumpTextureEnabled && !disableBumpMap) {\n        uniformBuffer.setTexture(\"clearCoatBumpSampler\", this._bumpTexture);\n      }\n      if (this._isTintEnabled && this._tintTexture && MaterialFlags.ClearCoatTintTextureEnabled) {\n        uniformBuffer.setTexture(\"clearCoatTintSampler\", this._tintTexture);\n      }\n    }\n  }\n  hasTexture(texture) {\n    if (this._texture === texture) {\n      return true;\n    }\n    if (this._textureRoughness === texture) {\n      return true;\n    }\n    if (this._bumpTexture === texture) {\n      return true;\n    }\n    if (this._tintTexture === texture) {\n      return true;\n    }\n    return false;\n  }\n  getActiveTextures(activeTextures) {\n    if (this._texture) {\n      activeTextures.push(this._texture);\n    }\n    if (this._textureRoughness) {\n      activeTextures.push(this._textureRoughness);\n    }\n    if (this._bumpTexture) {\n      activeTextures.push(this._bumpTexture);\n    }\n    if (this._tintTexture) {\n      activeTextures.push(this._tintTexture);\n    }\n  }\n  getAnimatables(animatables) {\n    if (this._texture && this._texture.animations && this._texture.animations.length > 0) {\n      animatables.push(this._texture);\n    }\n    if (this._textureRoughness && this._textureRoughness.animations && this._textureRoughness.animations.length > 0) {\n      animatables.push(this._textureRoughness);\n    }\n    if (this._bumpTexture && this._bumpTexture.animations && this._bumpTexture.animations.length > 0) {\n      animatables.push(this._bumpTexture);\n    }\n    if (this._tintTexture && this._tintTexture.animations && this._tintTexture.animations.length > 0) {\n      animatables.push(this._tintTexture);\n    }\n  }\n  dispose(forceDisposeTextures) {\n    var _a, _b, _c, _d;\n    if (forceDisposeTextures) {\n      (_a = this._texture) === null || _a === void 0 ? void 0 : _a.dispose();\n      (_b = this._textureRoughness) === null || _b === void 0 ? void 0 : _b.dispose();\n      (_c = this._bumpTexture) === null || _c === void 0 ? void 0 : _c.dispose();\n      (_d = this._tintTexture) === null || _d === void 0 ? void 0 : _d.dispose();\n    }\n  }\n  getClassName() {\n    return \"PBRClearCoatConfiguration\";\n  }\n  addFallbacks(defines, fallbacks, currentRank) {\n    if (defines.CLEARCOAT_BUMP) {\n      fallbacks.addFallback(currentRank++, \"CLEARCOAT_BUMP\");\n    }\n    if (defines.CLEARCOAT_TINT) {\n      fallbacks.addFallback(currentRank++, \"CLEARCOAT_TINT\");\n    }\n    if (defines.CLEARCOAT) {\n      fallbacks.addFallback(currentRank++, \"CLEARCOAT\");\n    }\n    return currentRank;\n  }\n  getSamplers(samplers) {\n    samplers.push(\"clearCoatSampler\", \"clearCoatRoughnessSampler\", \"clearCoatBumpSampler\", \"clearCoatTintSampler\");\n  }\n  getUniforms() {\n    return {\n      ubo: [{\n        name: \"vClearCoatParams\",\n        size: 2,\n        type: \"vec2\"\n      }, {\n        name: \"vClearCoatRefractionParams\",\n        size: 4,\n        type: \"vec4\"\n      }, {\n        name: \"vClearCoatInfos\",\n        size: 4,\n        type: \"vec4\"\n      }, {\n        name: \"clearCoatMatrix\",\n        size: 16,\n        type: \"mat4\"\n      }, {\n        name: \"clearCoatRoughnessMatrix\",\n        size: 16,\n        type: \"mat4\"\n      }, {\n        name: \"vClearCoatBumpInfos\",\n        size: 2,\n        type: \"vec2\"\n      }, {\n        name: \"vClearCoatTangentSpaceParams\",\n        size: 2,\n        type: \"vec2\"\n      }, {\n        name: \"clearCoatBumpMatrix\",\n        size: 16,\n        type: \"mat4\"\n      }, {\n        name: \"vClearCoatTintParams\",\n        size: 4,\n        type: \"vec4\"\n      }, {\n        name: \"clearCoatColorAtDistance\",\n        size: 1,\n        type: \"float\"\n      }, {\n        name: \"vClearCoatTintInfos\",\n        size: 2,\n        type: \"vec2\"\n      }, {\n        name: \"clearCoatTintMatrix\",\n        size: 16,\n        type: \"mat4\"\n      }]\n    };\n  }\n}\n/**\n * This defaults to 1.5 corresponding to a 0.04 f0 or a 4% reflectance at normal incidence\n * The default fits with a polyurethane material.\n * @internal\n */\nPBRClearCoatConfiguration._DefaultIndexOfRefraction = 1.5;\n__decorate([serialize(), expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")], PBRClearCoatConfiguration.prototype, \"isEnabled\", void 0);\n__decorate([serialize()], PBRClearCoatConfiguration.prototype, \"intensity\", void 0);\n__decorate([serialize()], PBRClearCoatConfiguration.prototype, \"roughness\", void 0);\n__decorate([serialize(), expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")], PBRClearCoatConfiguration.prototype, \"indexOfRefraction\", void 0);\n__decorate([serializeAsTexture(), expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")], PBRClearCoatConfiguration.prototype, \"texture\", void 0);\n__decorate([serialize(), expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")], PBRClearCoatConfiguration.prototype, \"useRoughnessFromMainTexture\", void 0);\n__decorate([serializeAsTexture(), expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")], PBRClearCoatConfiguration.prototype, \"textureRoughness\", void 0);\n__decorate([serialize(), expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")], PBRClearCoatConfiguration.prototype, \"remapF0OnInterfaceChange\", void 0);\n__decorate([serializeAsTexture(), expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")], PBRClearCoatConfiguration.prototype, \"bumpTexture\", void 0);\n__decorate([serialize(), expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")], PBRClearCoatConfiguration.prototype, \"isTintEnabled\", void 0);\n__decorate([serializeAsColor3()], PBRClearCoatConfiguration.prototype, \"tintColor\", void 0);\n__decorate([serialize()], PBRClearCoatConfiguration.prototype, \"tintColorAtDistance\", void 0);\n__decorate([serialize()], PBRClearCoatConfiguration.prototype, \"tintThickness\", void 0);\n__decorate([serializeAsTexture(), expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")], PBRClearCoatConfiguration.prototype, \"tintTexture\", void 0);","map":{"version":3,"names":["serialize","serializeAsTexture","expandToProperty","serializeAsColor3","Color3","MaterialFlags","MaterialHelper","MaterialPluginBase","MaterialDefines","MaterialClearCoatDefines","constructor","CLEARCOAT","CLEARCOAT_DEFAULTIOR","CLEARCOAT_TEXTURE","CLEARCOAT_TEXTURE_ROUGHNESS","CLEARCOAT_TEXTUREDIRECTUV","CLEARCOAT_TEXTURE_ROUGHNESSDIRECTUV","CLEARCOAT_BUMP","CLEARCOAT_BUMPDIRECTUV","CLEARCOAT_USE_ROUGHNESS_FROM_MAINTEXTURE","CLEARCOAT_TEXTURE_ROUGHNESS_IDENTICAL","CLEARCOAT_REMAP_F0","CLEARCOAT_TINT","CLEARCOAT_TINT_TEXTURE","CLEARCOAT_TINT_TEXTUREDIRECTUV","CLEARCOAT_TINT_GAMMATEXTURE","PBRClearCoatConfiguration","_markAllSubMeshesAsTexturesDirty","_enable","_isEnabled","_internalMarkAllSubMeshesAsTexturesDirty","material","addToPluginList","isEnabled","intensity","roughness","_indexOfRefraction","_DefaultIndexOfRefraction","indexOfRefraction","_texture","texture","_useRoughnessFromMainTexture","useRoughnessFromMainTexture","_textureRoughness","textureRoughness","_remapF0OnInterfaceChange","remapF0OnInterfaceChange","_bumpTexture","bumpTexture","_isTintEnabled","isTintEnabled","tintColor","White","tintColorAtDistance","tintThickness","_tintTexture","tintTexture","_dirtyCallbacks","isReadyForSubMesh","defines","scene","engine","disableBumpMap","_material","_disableBumpMap","_areTexturesDirty","texturesEnabled","ClearCoatTextureEnabled","isReadyOrNotBlocking","getCaps","standardDerivatives","ClearCoatBumpTextureEnabled","isReady","ClearCoatTintTextureEnabled","prepareDefinesBeforeAttributes","_a","checkTransformsAreIdentical","PrepareDefinesForMergedUV","gammaSpace","bindForSubMesh","uniformBuffer","subMesh","materialDefines","isFrozen","invertNormalMapX","_invertNormalMapX","invertNormalMapY","_invertNormalMapY","identicalTextures","useUbo","isSync","updateFloat4","coordinatesIndex","level","BindTextureMatrix","_b","_d","_c","_f","_e","_h","_g","updateFloat2","_mirroredCameraPosition","a","b","f0","Math","pow","eta","r","g","max","updateFloat","setTexture","hasTexture","getActiveTextures","activeTextures","push","getAnimatables","animatables","animations","length","dispose","forceDisposeTextures","getClassName","addFallbacks","fallbacks","currentRank","addFallback","getSamplers","samplers","getUniforms","ubo","name","size","type","__decorate"],"sources":["../../../../../dev/core/src/Materials/PBR/pbrClearCoatConfiguration.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/naming-convention */\r\nimport type { Nullable } from \"../../types\";\r\nimport { serialize, serializeAsTexture, expandToProperty, serializeAsColor3 } from \"../../Misc/decorators\";\r\nimport { Color3 } from \"../../Maths/math.color\";\r\nimport type { BaseTexture } from \"../../Materials/Textures/baseTexture\";\r\nimport { MaterialFlags } from \"../materialFlags\";\r\nimport type { UniformBuffer } from \"../../Materials/uniformBuffer\";\r\nimport { MaterialHelper } from \"../../Materials/materialHelper\";\r\nimport type { IAnimatable } from \"../../Animations/animatable.interface\";\r\nimport type { EffectFallbacks } from \"../effectFallbacks\";\r\nimport type { SubMesh } from \"../../Meshes/subMesh\";\r\nimport { Constants } from \"../../Engines/constants\";\r\nimport { MaterialPluginBase } from \"../materialPluginBase\";\r\nimport { MaterialDefines } from \"../materialDefines\";\r\n\r\nimport type { Engine } from \"../../Engines/engine\";\r\nimport type { Scene } from \"../../scene\";\r\nimport type { PBRBaseMaterial } from \"./pbrBaseMaterial\";\r\n\r\n/**\r\n * @internal\r\n */\r\nexport class MaterialClearCoatDefines extends MaterialDefines {\r\n    public CLEARCOAT = false;\r\n    public CLEARCOAT_DEFAULTIOR = false;\r\n    public CLEARCOAT_TEXTURE = false;\r\n    public CLEARCOAT_TEXTURE_ROUGHNESS = false;\r\n    public CLEARCOAT_TEXTUREDIRECTUV = 0;\r\n    public CLEARCOAT_TEXTURE_ROUGHNESSDIRECTUV = 0;\r\n    public CLEARCOAT_BUMP = false;\r\n    public CLEARCOAT_BUMPDIRECTUV = 0;\r\n    public CLEARCOAT_USE_ROUGHNESS_FROM_MAINTEXTURE = false;\r\n    public CLEARCOAT_TEXTURE_ROUGHNESS_IDENTICAL = false;\r\n    public CLEARCOAT_REMAP_F0 = false;\r\n\r\n    public CLEARCOAT_TINT = false;\r\n    public CLEARCOAT_TINT_TEXTURE = false;\r\n    public CLEARCOAT_TINT_TEXTUREDIRECTUV = 0;\r\n    public CLEARCOAT_TINT_GAMMATEXTURE = false;\r\n}\r\n\r\n/**\r\n * Plugin that implements the clear coat component of the PBR material\r\n */\r\nexport class PBRClearCoatConfiguration extends MaterialPluginBase {\r\n    protected _material: PBRBaseMaterial;\r\n\r\n    /**\r\n     * This defaults to 1.5 corresponding to a 0.04 f0 or a 4% reflectance at normal incidence\r\n     * The default fits with a polyurethane material.\r\n     * @internal\r\n     */\r\n    public static readonly _DefaultIndexOfRefraction = 1.5;\r\n\r\n    private _isEnabled = false;\r\n    /**\r\n     * Defines if the clear coat is enabled in the material.\r\n     */\r\n    @serialize()\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public isEnabled = false;\r\n\r\n    /**\r\n     * Defines the clear coat layer strength (between 0 and 1) it defaults to 1.\r\n     */\r\n    @serialize()\r\n    public intensity: number = 1;\r\n\r\n    /**\r\n     * Defines the clear coat layer roughness.\r\n     */\r\n    @serialize()\r\n    public roughness: number = 0;\r\n\r\n    private _indexOfRefraction = PBRClearCoatConfiguration._DefaultIndexOfRefraction;\r\n    /**\r\n     * Defines the index of refraction of the clear coat.\r\n     * This defaults to 1.5 corresponding to a 0.04 f0 or a 4% reflectance at normal incidence\r\n     * The default fits with a polyurethane material.\r\n     * Changing the default value is more performance intensive.\r\n     */\r\n    @serialize()\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public indexOfRefraction = PBRClearCoatConfiguration._DefaultIndexOfRefraction;\r\n\r\n    private _texture: Nullable<BaseTexture> = null;\r\n    /**\r\n     * Stores the clear coat values in a texture (red channel is intensity and green channel is roughness)\r\n     * If useRoughnessFromMainTexture is false, the green channel of texture is not used and the green channel of textureRoughness is used instead\r\n     * if textureRoughness is not empty, else no texture roughness is used\r\n     */\r\n    @serializeAsTexture()\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public texture: Nullable<BaseTexture> = null;\r\n\r\n    private _useRoughnessFromMainTexture = true;\r\n    /**\r\n     * Indicates that the green channel of the texture property will be used for roughness (default: true)\r\n     * If false, the green channel from textureRoughness is used for roughness\r\n     */\r\n    @serialize()\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public useRoughnessFromMainTexture = true;\r\n\r\n    private _textureRoughness: Nullable<BaseTexture> = null;\r\n    /**\r\n     * Stores the clear coat roughness in a texture (green channel)\r\n     * Not used if useRoughnessFromMainTexture is true\r\n     */\r\n    @serializeAsTexture()\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public textureRoughness: Nullable<BaseTexture> = null;\r\n\r\n    private _remapF0OnInterfaceChange = true;\r\n    /**\r\n     * Defines if the F0 value should be remapped to account for the interface change in the material.\r\n     */\r\n    @serialize()\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public remapF0OnInterfaceChange = true;\r\n\r\n    private _bumpTexture: Nullable<BaseTexture> = null;\r\n    /**\r\n     * Define the clear coat specific bump texture.\r\n     */\r\n    @serializeAsTexture()\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public bumpTexture: Nullable<BaseTexture> = null;\r\n\r\n    private _isTintEnabled = false;\r\n    /**\r\n     * Defines if the clear coat tint is enabled in the material.\r\n     */\r\n    @serialize()\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public isTintEnabled = false;\r\n\r\n    /**\r\n     * Defines the clear coat tint of the material.\r\n     * This is only use if tint is enabled\r\n     */\r\n    @serializeAsColor3()\r\n    public tintColor = Color3.White();\r\n\r\n    /**\r\n     * Defines the distance at which the tint color should be found in the\r\n     * clear coat media.\r\n     * This is only use if tint is enabled\r\n     */\r\n    @serialize()\r\n    public tintColorAtDistance = 1;\r\n\r\n    /**\r\n     * Defines the clear coat layer thickness.\r\n     * This is only use if tint is enabled\r\n     */\r\n    @serialize()\r\n    public tintThickness: number = 1;\r\n\r\n    private _tintTexture: Nullable<BaseTexture> = null;\r\n    /**\r\n     * Stores the clear tint values in a texture.\r\n     * rgb is tint\r\n     * a is a thickness factor\r\n     */\r\n    @serializeAsTexture()\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public tintTexture: Nullable<BaseTexture> = null;\r\n\r\n    /** @internal */\r\n    private _internalMarkAllSubMeshesAsTexturesDirty: () => void;\r\n\r\n    /** @internal */\r\n    public _markAllSubMeshesAsTexturesDirty(): void {\r\n        this._enable(this._isEnabled);\r\n        this._internalMarkAllSubMeshesAsTexturesDirty();\r\n    }\r\n\r\n    constructor(material: PBRBaseMaterial, addToPluginList = true) {\r\n        super(material, \"PBRClearCoat\", 100, new MaterialClearCoatDefines(), addToPluginList);\r\n\r\n        this._internalMarkAllSubMeshesAsTexturesDirty = material._dirtyCallbacks[Constants.MATERIAL_TextureDirtyFlag];\r\n    }\r\n\r\n    public isReadyForSubMesh(defines: MaterialClearCoatDefines, scene: Scene, engine: Engine): boolean {\r\n        if (!this._isEnabled) {\r\n            return true;\r\n        }\r\n\r\n        const disableBumpMap = this._material._disableBumpMap;\r\n        if (defines._areTexturesDirty) {\r\n            if (scene.texturesEnabled) {\r\n                if (this._texture && MaterialFlags.ClearCoatTextureEnabled) {\r\n                    if (!this._texture.isReadyOrNotBlocking()) {\r\n                        return false;\r\n                    }\r\n                }\r\n\r\n                if (this._textureRoughness && MaterialFlags.ClearCoatTextureEnabled) {\r\n                    if (!this._textureRoughness.isReadyOrNotBlocking()) {\r\n                        return false;\r\n                    }\r\n                }\r\n\r\n                if (engine.getCaps().standardDerivatives && this._bumpTexture && MaterialFlags.ClearCoatBumpTextureEnabled && !disableBumpMap) {\r\n                    // Bump texture cannot be not blocking.\r\n                    if (!this._bumpTexture.isReady()) {\r\n                        return false;\r\n                    }\r\n                }\r\n\r\n                if (this._isTintEnabled && this._tintTexture && MaterialFlags.ClearCoatTintTextureEnabled) {\r\n                    if (!this._tintTexture.isReadyOrNotBlocking()) {\r\n                        return false;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    public prepareDefinesBeforeAttributes(defines: MaterialClearCoatDefines, scene: Scene): void {\r\n        if (this._isEnabled) {\r\n            defines.CLEARCOAT = true;\r\n            defines.CLEARCOAT_USE_ROUGHNESS_FROM_MAINTEXTURE = this._useRoughnessFromMainTexture;\r\n            defines.CLEARCOAT_TEXTURE_ROUGHNESS_IDENTICAL =\r\n                this._texture !== null && this._texture._texture === this._textureRoughness?._texture && this._texture.checkTransformsAreIdentical(this._textureRoughness);\r\n            defines.CLEARCOAT_REMAP_F0 = this._remapF0OnInterfaceChange;\r\n\r\n            if (defines._areTexturesDirty) {\r\n                if (scene.texturesEnabled) {\r\n                    if (this._texture && MaterialFlags.ClearCoatTextureEnabled) {\r\n                        MaterialHelper.PrepareDefinesForMergedUV(this._texture, defines, \"CLEARCOAT_TEXTURE\");\r\n                    } else {\r\n                        defines.CLEARCOAT_TEXTURE = false;\r\n                    }\r\n\r\n                    if (this._textureRoughness && MaterialFlags.ClearCoatTextureEnabled) {\r\n                        MaterialHelper.PrepareDefinesForMergedUV(this._textureRoughness, defines, \"CLEARCOAT_TEXTURE_ROUGHNESS\");\r\n                    } else {\r\n                        defines.CLEARCOAT_TEXTURE_ROUGHNESS = false;\r\n                    }\r\n\r\n                    if (this._bumpTexture && MaterialFlags.ClearCoatBumpTextureEnabled) {\r\n                        MaterialHelper.PrepareDefinesForMergedUV(this._bumpTexture, defines, \"CLEARCOAT_BUMP\");\r\n                    } else {\r\n                        defines.CLEARCOAT_BUMP = false;\r\n                    }\r\n\r\n                    defines.CLEARCOAT_DEFAULTIOR = this._indexOfRefraction === PBRClearCoatConfiguration._DefaultIndexOfRefraction;\r\n\r\n                    if (this._isTintEnabled) {\r\n                        defines.CLEARCOAT_TINT = true;\r\n                        if (this._tintTexture && MaterialFlags.ClearCoatTintTextureEnabled) {\r\n                            MaterialHelper.PrepareDefinesForMergedUV(this._tintTexture, defines, \"CLEARCOAT_TINT_TEXTURE\");\r\n                            defines.CLEARCOAT_TINT_GAMMATEXTURE = this._tintTexture.gammaSpace;\r\n                        } else {\r\n                            defines.CLEARCOAT_TINT_TEXTURE = false;\r\n                        }\r\n                    } else {\r\n                        defines.CLEARCOAT_TINT = false;\r\n                        defines.CLEARCOAT_TINT_TEXTURE = false;\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            defines.CLEARCOAT = false;\r\n            defines.CLEARCOAT_TEXTURE = false;\r\n            defines.CLEARCOAT_TEXTURE_ROUGHNESS = false;\r\n            defines.CLEARCOAT_BUMP = false;\r\n            defines.CLEARCOAT_TINT = false;\r\n            defines.CLEARCOAT_TINT_TEXTURE = false;\r\n            defines.CLEARCOAT_USE_ROUGHNESS_FROM_MAINTEXTURE = false;\r\n            defines.CLEARCOAT_TEXTURE_ROUGHNESS_IDENTICAL = false;\r\n            defines.CLEARCOAT_DEFAULTIOR = false;\r\n            defines.CLEARCOAT_TEXTUREDIRECTUV = 0;\r\n            defines.CLEARCOAT_TEXTURE_ROUGHNESSDIRECTUV = 0;\r\n            defines.CLEARCOAT_BUMPDIRECTUV = 0;\r\n            defines.CLEARCOAT_REMAP_F0 = false;\r\n            defines.CLEARCOAT_TINT_TEXTUREDIRECTUV = 0;\r\n            defines.CLEARCOAT_TINT_GAMMATEXTURE = false;\r\n        }\r\n    }\r\n\r\n    public bindForSubMesh(uniformBuffer: UniformBuffer, scene: Scene, engine: Engine, subMesh: SubMesh): void {\r\n        if (!this._isEnabled) {\r\n            return;\r\n        }\r\n\r\n        const defines = subMesh!.materialDefines as unknown as MaterialClearCoatDefines;\r\n\r\n        const isFrozen = this._material.isFrozen;\r\n\r\n        const disableBumpMap = this._material._disableBumpMap;\r\n        const invertNormalMapX = this._material._invertNormalMapX;\r\n        const invertNormalMapY = this._material._invertNormalMapY;\r\n\r\n        const identicalTextures = defines.CLEARCOAT_TEXTURE_ROUGHNESS_IDENTICAL;\r\n\r\n        if (!uniformBuffer.useUbo || !isFrozen || !uniformBuffer.isSync) {\r\n            if (identicalTextures && MaterialFlags.ClearCoatTextureEnabled) {\r\n                uniformBuffer.updateFloat4(\"vClearCoatInfos\", this._texture!.coordinatesIndex, this._texture!.level, -1, -1);\r\n                MaterialHelper.BindTextureMatrix(this._texture!, uniformBuffer, \"clearCoat\");\r\n            } else if ((this._texture || this._textureRoughness) && MaterialFlags.ClearCoatTextureEnabled) {\r\n                uniformBuffer.updateFloat4(\r\n                    \"vClearCoatInfos\",\r\n                    this._texture?.coordinatesIndex ?? 0,\r\n                    this._texture?.level ?? 0,\r\n                    this._textureRoughness?.coordinatesIndex ?? 0,\r\n                    this._textureRoughness?.level ?? 0\r\n                );\r\n                if (this._texture) {\r\n                    MaterialHelper.BindTextureMatrix(this._texture, uniformBuffer, \"clearCoat\");\r\n                }\r\n                if (this._textureRoughness && !identicalTextures && !defines.CLEARCOAT_USE_ROUGHNESS_FROM_MAINTEXTURE) {\r\n                    MaterialHelper.BindTextureMatrix(this._textureRoughness, uniformBuffer, \"clearCoatRoughness\");\r\n                }\r\n            }\r\n\r\n            if (this._bumpTexture && engine.getCaps().standardDerivatives && MaterialFlags.ClearCoatTextureEnabled && !disableBumpMap) {\r\n                uniformBuffer.updateFloat2(\"vClearCoatBumpInfos\", this._bumpTexture.coordinatesIndex, this._bumpTexture.level);\r\n                MaterialHelper.BindTextureMatrix(this._bumpTexture, uniformBuffer, \"clearCoatBump\");\r\n\r\n                if (scene._mirroredCameraPosition) {\r\n                    uniformBuffer.updateFloat2(\"vClearCoatTangentSpaceParams\", invertNormalMapX ? 1.0 : -1.0, invertNormalMapY ? 1.0 : -1.0);\r\n                } else {\r\n                    uniformBuffer.updateFloat2(\"vClearCoatTangentSpaceParams\", invertNormalMapX ? -1.0 : 1.0, invertNormalMapY ? -1.0 : 1.0);\r\n                }\r\n            }\r\n\r\n            if (this._tintTexture && MaterialFlags.ClearCoatTintTextureEnabled) {\r\n                uniformBuffer.updateFloat2(\"vClearCoatTintInfos\", this._tintTexture.coordinatesIndex, this._tintTexture.level);\r\n                MaterialHelper.BindTextureMatrix(this._tintTexture, uniformBuffer, \"clearCoatTint\");\r\n            }\r\n\r\n            // Clear Coat General params\r\n            uniformBuffer.updateFloat2(\"vClearCoatParams\", this.intensity, this.roughness);\r\n\r\n            // Clear Coat Refraction params\r\n            const a = 1 - this._indexOfRefraction;\r\n            const b = 1 + this._indexOfRefraction;\r\n            const f0 = Math.pow(-a / b, 2); // Schlicks approx: (ior1 - ior2) / (ior1 + ior2) where ior2 for air is close to vacuum = 1.\r\n            const eta = 1 / this._indexOfRefraction;\r\n            uniformBuffer.updateFloat4(\"vClearCoatRefractionParams\", f0, eta, a, b);\r\n\r\n            if (this._isTintEnabled) {\r\n                uniformBuffer.updateFloat4(\"vClearCoatTintParams\", this.tintColor.r, this.tintColor.g, this.tintColor.b, Math.max(0.00001, this.tintThickness));\r\n                uniformBuffer.updateFloat(\"clearCoatColorAtDistance\", Math.max(0.00001, this.tintColorAtDistance));\r\n            }\r\n        }\r\n\r\n        // Textures\r\n        if (scene.texturesEnabled) {\r\n            if (this._texture && MaterialFlags.ClearCoatTextureEnabled) {\r\n                uniformBuffer.setTexture(\"clearCoatSampler\", this._texture);\r\n            }\r\n\r\n            if (this._textureRoughness && !identicalTextures && !defines.CLEARCOAT_USE_ROUGHNESS_FROM_MAINTEXTURE && MaterialFlags.ClearCoatTextureEnabled) {\r\n                uniformBuffer.setTexture(\"clearCoatRoughnessSampler\", this._textureRoughness);\r\n            }\r\n\r\n            if (this._bumpTexture && engine.getCaps().standardDerivatives && MaterialFlags.ClearCoatBumpTextureEnabled && !disableBumpMap) {\r\n                uniformBuffer.setTexture(\"clearCoatBumpSampler\", this._bumpTexture);\r\n            }\r\n\r\n            if (this._isTintEnabled && this._tintTexture && MaterialFlags.ClearCoatTintTextureEnabled) {\r\n                uniformBuffer.setTexture(\"clearCoatTintSampler\", this._tintTexture);\r\n            }\r\n        }\r\n    }\r\n\r\n    public hasTexture(texture: BaseTexture): boolean {\r\n        if (this._texture === texture) {\r\n            return true;\r\n        }\r\n\r\n        if (this._textureRoughness === texture) {\r\n            return true;\r\n        }\r\n\r\n        if (this._bumpTexture === texture) {\r\n            return true;\r\n        }\r\n\r\n        if (this._tintTexture === texture) {\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    public getActiveTextures(activeTextures: BaseTexture[]): void {\r\n        if (this._texture) {\r\n            activeTextures.push(this._texture);\r\n        }\r\n\r\n        if (this._textureRoughness) {\r\n            activeTextures.push(this._textureRoughness);\r\n        }\r\n\r\n        if (this._bumpTexture) {\r\n            activeTextures.push(this._bumpTexture);\r\n        }\r\n\r\n        if (this._tintTexture) {\r\n            activeTextures.push(this._tintTexture);\r\n        }\r\n    }\r\n\r\n    public getAnimatables(animatables: IAnimatable[]): void {\r\n        if (this._texture && this._texture.animations && this._texture.animations.length > 0) {\r\n            animatables.push(this._texture);\r\n        }\r\n\r\n        if (this._textureRoughness && this._textureRoughness.animations && this._textureRoughness.animations.length > 0) {\r\n            animatables.push(this._textureRoughness);\r\n        }\r\n\r\n        if (this._bumpTexture && this._bumpTexture.animations && this._bumpTexture.animations.length > 0) {\r\n            animatables.push(this._bumpTexture);\r\n        }\r\n\r\n        if (this._tintTexture && this._tintTexture.animations && this._tintTexture.animations.length > 0) {\r\n            animatables.push(this._tintTexture);\r\n        }\r\n    }\r\n\r\n    public dispose(forceDisposeTextures?: boolean): void {\r\n        if (forceDisposeTextures) {\r\n            this._texture?.dispose();\r\n            this._textureRoughness?.dispose();\r\n            this._bumpTexture?.dispose();\r\n            this._tintTexture?.dispose();\r\n        }\r\n    }\r\n\r\n    public getClassName(): string {\r\n        return \"PBRClearCoatConfiguration\";\r\n    }\r\n\r\n    public addFallbacks(defines: MaterialClearCoatDefines, fallbacks: EffectFallbacks, currentRank: number): number {\r\n        if (defines.CLEARCOAT_BUMP) {\r\n            fallbacks.addFallback(currentRank++, \"CLEARCOAT_BUMP\");\r\n        }\r\n        if (defines.CLEARCOAT_TINT) {\r\n            fallbacks.addFallback(currentRank++, \"CLEARCOAT_TINT\");\r\n        }\r\n        if (defines.CLEARCOAT) {\r\n            fallbacks.addFallback(currentRank++, \"CLEARCOAT\");\r\n        }\r\n        return currentRank;\r\n    }\r\n\r\n    public getSamplers(samplers: string[]): void {\r\n        samplers.push(\"clearCoatSampler\", \"clearCoatRoughnessSampler\", \"clearCoatBumpSampler\", \"clearCoatTintSampler\");\r\n    }\r\n\r\n    public getUniforms(): { ubo?: Array<{ name: string; size: number; type: string }>; vertex?: string; fragment?: string } {\r\n        return {\r\n            ubo: [\r\n                { name: \"vClearCoatParams\", size: 2, type: \"vec2\" },\r\n                { name: \"vClearCoatRefractionParams\", size: 4, type: \"vec4\" },\r\n                { name: \"vClearCoatInfos\", size: 4, type: \"vec4\" },\r\n                { name: \"clearCoatMatrix\", size: 16, type: \"mat4\" },\r\n                { name: \"clearCoatRoughnessMatrix\", size: 16, type: \"mat4\" },\r\n                { name: \"vClearCoatBumpInfos\", size: 2, type: \"vec2\" },\r\n                { name: \"vClearCoatTangentSpaceParams\", size: 2, type: \"vec2\" },\r\n                { name: \"clearCoatBumpMatrix\", size: 16, type: \"mat4\" },\r\n                { name: \"vClearCoatTintParams\", size: 4, type: \"vec4\" },\r\n                { name: \"clearCoatColorAtDistance\", size: 1, type: \"float\" },\r\n                { name: \"vClearCoatTintInfos\", size: 2, type: \"vec2\" },\r\n                { name: \"clearCoatTintMatrix\", size: 16, type: \"mat4\" },\r\n            ],\r\n        };\r\n    }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}