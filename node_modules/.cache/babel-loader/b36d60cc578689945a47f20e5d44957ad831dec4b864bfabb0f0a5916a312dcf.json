{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { Vector3 } from \"../../Maths/math.vector.js\";\nimport { _WarnImport } from \"../../Misc/devTools.js\";\n/**\n * Class used to control physics engine\n * @see https://doc.babylonjs.com/features/featuresDeepDive/physics/usingPhysicsEngine\n */\nexport class PhysicsEngine {\n  /**\n   *\n   * @returns version\n   */\n  getPluginVersion() {\n    return this._physicsPlugin.getPluginVersion();\n  }\n  /**\n   * Factory used to create the default physics plugin.\n   * @returns The default physics plugin\n   */\n  static DefaultPluginFactory() {\n    throw _WarnImport(\"CannonJSPlugin\");\n  }\n  /**\n   * Creates a new Physics Engine\n   * @param gravity defines the gravity vector used by the simulation\n   * @param _physicsPlugin defines the plugin to use (CannonJS by default)\n   */\n  constructor(gravity, _physicsPlugin = PhysicsEngine.DefaultPluginFactory()) {\n    this._physicsPlugin = _physicsPlugin;\n    /**\n     * Global value used to control the smallest number supported by the simulation\n     */\n    this._impostors = [];\n    this._joints = [];\n    this._subTimeStep = 0;\n    this._uniqueIdCounter = 0;\n    if (!this._physicsPlugin.isSupported()) {\n      throw new Error(\"Physics Engine \" + this._physicsPlugin.name + \" cannot be found. \" + \"Please make sure it is included.\");\n    }\n    gravity = gravity || new Vector3(0, -9.807, 0);\n    this.setGravity(gravity);\n    this.setTimeStep();\n  }\n  /**\n   * Sets the gravity vector used by the simulation\n   * @param gravity defines the gravity vector to use\n   */\n  setGravity(gravity) {\n    this.gravity = gravity;\n    this._physicsPlugin.setGravity(this.gravity);\n  }\n  /**\n   * Set the time step of the physics engine.\n   * Default is 1/60.\n   * To slow it down, enter 1/600 for example.\n   * To speed it up, 1/30\n   * @param newTimeStep defines the new timestep to apply to this world.\n   */\n  setTimeStep(newTimeStep = 1 / 60) {\n    this._physicsPlugin.setTimeStep(newTimeStep);\n  }\n  /**\n   * Get the time step of the physics engine.\n   * @returns the current time step\n   */\n  getTimeStep() {\n    return this._physicsPlugin.getTimeStep();\n  }\n  /**\n   * Set the sub time step of the physics engine.\n   * Default is 0 meaning there is no sub steps\n   * To increase physics resolution precision, set a small value (like 1 ms)\n   * @param subTimeStep defines the new sub timestep used for physics resolution.\n   */\n  setSubTimeStep(subTimeStep = 0) {\n    this._subTimeStep = subTimeStep;\n  }\n  /**\n   * Get the sub time step of the physics engine.\n   * @returns the current sub time step\n   */\n  getSubTimeStep() {\n    return this._subTimeStep;\n  }\n  /**\n   * Release all resources\n   */\n  dispose() {\n    this._impostors.forEach(function (impostor) {\n      impostor.dispose();\n    });\n    this._physicsPlugin.dispose();\n  }\n  /**\n   * Gets the name of the current physics plugin\n   * @returns the name of the plugin\n   */\n  getPhysicsPluginName() {\n    return this._physicsPlugin.name;\n  }\n  /**\n   * Adding a new impostor for the impostor tracking.\n   * This will be done by the impostor itself.\n   * @param impostor the impostor to add\n   */\n  addImpostor(impostor) {\n    this._impostors.push(impostor);\n    impostor.uniqueId = this._uniqueIdCounter++;\n    //if no parent, generate the body\n    if (!impostor.parent) {\n      this._physicsPlugin.generatePhysicsBody(impostor);\n    }\n  }\n  /**\n   * Remove an impostor from the engine.\n   * This impostor and its mesh will not longer be updated by the physics engine.\n   * @param impostor the impostor to remove\n   */\n  removeImpostor(impostor) {\n    const index = this._impostors.indexOf(impostor);\n    if (index > -1) {\n      const removed = this._impostors.splice(index, 1);\n      //Is it needed?\n      if (removed.length) {\n        this.getPhysicsPlugin().removePhysicsBody(impostor);\n      }\n    }\n  }\n  /**\n   * Add a joint to the physics engine\n   * @param mainImpostor defines the main impostor to which the joint is added.\n   * @param connectedImpostor defines the impostor that is connected to the main impostor using this joint\n   * @param joint defines the joint that will connect both impostors.\n   */\n  addJoint(mainImpostor, connectedImpostor, joint) {\n    const impostorJoint = {\n      mainImpostor: mainImpostor,\n      connectedImpostor: connectedImpostor,\n      joint: joint\n    };\n    joint.physicsPlugin = this._physicsPlugin;\n    this._joints.push(impostorJoint);\n    this._physicsPlugin.generateJoint(impostorJoint);\n  }\n  /**\n   * Removes a joint from the simulation\n   * @param mainImpostor defines the impostor used with the joint\n   * @param connectedImpostor defines the other impostor connected to the main one by the joint\n   * @param joint defines the joint to remove\n   */\n  removeJoint(mainImpostor, connectedImpostor, joint) {\n    const matchingJoints = this._joints.filter(function (impostorJoint) {\n      return impostorJoint.connectedImpostor === connectedImpostor && impostorJoint.joint === joint && impostorJoint.mainImpostor === mainImpostor;\n    });\n    if (matchingJoints.length) {\n      this._physicsPlugin.removeJoint(matchingJoints[0]);\n      //TODO remove it from the list as well\n    }\n  }\n  /**\n   * Called by the scene. No need to call it.\n   * @param delta defines the timespan between frames\n   */\n  _step(delta) {\n    //check if any mesh has no body / requires an update\n    this._impostors.forEach(impostor => {\n      if (impostor.isBodyInitRequired()) {\n        this._physicsPlugin.generatePhysicsBody(impostor);\n      }\n    });\n    if (delta > 0.1) {\n      delta = 0.1;\n    } else if (delta <= 0) {\n      delta = 1.0 / 60.0;\n    }\n    this._physicsPlugin.executeStep(delta, this._impostors);\n  }\n  /**\n   * Gets the current plugin used to run the simulation\n   * @returns current plugin\n   */\n  getPhysicsPlugin() {\n    return this._physicsPlugin;\n  }\n  /**\n   * Gets the list of physic impostors\n   * @returns an array of PhysicsImpostor\n   */\n  getImpostors() {\n    return this._impostors;\n  }\n  /**\n   * Gets the impostor for a physics enabled object\n   * @param object defines the object impersonated by the impostor\n   * @returns the PhysicsImpostor or null if not found\n   */\n  getImpostorForPhysicsObject(object) {\n    for (let i = 0; i < this._impostors.length; ++i) {\n      if (this._impostors[i].object === object) {\n        return this._impostors[i];\n      }\n    }\n    return null;\n  }\n  /**\n   * Gets the impostor for a physics body object\n   * @param body defines physics body used by the impostor\n   * @returns the PhysicsImpostor or null if not found\n   */\n  getImpostorWithPhysicsBody(body) {\n    for (let i = 0; i < this._impostors.length; ++i) {\n      if (this._impostors[i].physicsBody === body) {\n        return this._impostors[i];\n      }\n    }\n    return null;\n  }\n  /**\n   * Does a raycast in the physics world\n   * @param from when should the ray start?\n   * @param to when should the ray end?\n   * @returns PhysicsRaycastResult\n   */\n  raycast(from, to) {\n    return this._physicsPlugin.raycast(from, to);\n  }\n  /**\n   * Does a raycast in the physics world\n   * @param from when should the ray start?\n   * @param to when should the ray end?\n   * @param result resulting PhysicsRaycastResult\n   */\n  raycastToRef(from, to, result) {\n    return this._physicsPlugin.raycastToRef(from, to, result);\n  }\n}","map":{"version":3,"names":["Vector3","_WarnImport","PhysicsEngine","getPluginVersion","_physicsPlugin","DefaultPluginFactory","constructor","gravity","_impostors","_joints","_subTimeStep","_uniqueIdCounter","isSupported","Error","name","setGravity","setTimeStep","newTimeStep","getTimeStep","setSubTimeStep","subTimeStep","getSubTimeStep","dispose","forEach","impostor","getPhysicsPluginName","addImpostor","push","uniqueId","parent","generatePhysicsBody","removeImpostor","index","indexOf","removed","splice","length","getPhysicsPlugin","removePhysicsBody","addJoint","mainImpostor","connectedImpostor","joint","impostorJoint","physicsPlugin","generateJoint","removeJoint","matchingJoints","filter","_step","delta","isBodyInitRequired","executeStep","getImpostors","getImpostorForPhysicsObject","object","i","getImpostorWithPhysicsBody","body","physicsBody","raycast","from","to","raycastToRef","result"],"sources":["../../../../../dev/core/src/Physics/v1/physicsEngine.ts"],"sourcesContent":["import type { Nullable } from \"../../types\";\r\nimport { Vector3 } from \"../../Maths/math.vector\";\r\nimport type { PhysicsImpostorJoint, IPhysicsEnginePlugin } from \"./IPhysicsEnginePlugin\";\r\nimport type { IPhysicsEngine } from \"../IPhysicsEngine\";\r\nimport type { PhysicsImpostor, IPhysicsEnabledObject } from \"./physicsImpostor\";\r\nimport type { PhysicsJoint } from \"./physicsJoint\";\r\nimport type { PhysicsRaycastResult } from \"../physicsRaycastResult\";\r\nimport { _WarnImport } from \"../../Misc/devTools\";\r\n\r\n/**\r\n * Class used to control physics engine\r\n * @see https://doc.babylonjs.com/features/featuresDeepDive/physics/usingPhysicsEngine\r\n */\r\nexport class PhysicsEngine implements IPhysicsEngine {\r\n    /**\r\n     * Global value used to control the smallest number supported by the simulation\r\n     */\r\n    private _impostors: Array<PhysicsImpostor> = [];\r\n    private _joints: Array<PhysicsImpostorJoint> = [];\r\n    private _subTimeStep: number = 0;\r\n    private _uniqueIdCounter = 0;\r\n\r\n    /**\r\n     * Gets the gravity vector used by the simulation\r\n     */\r\n    public gravity: Vector3;\r\n\r\n    /**\r\n     *\r\n     * @returns version\r\n     */\r\n    public getPluginVersion(): number {\r\n        return this._physicsPlugin.getPluginVersion();\r\n    }\r\n    /**\r\n     * Factory used to create the default physics plugin.\r\n     * @returns The default physics plugin\r\n     */\r\n    public static DefaultPluginFactory(): IPhysicsEnginePlugin {\r\n        throw _WarnImport(\"CannonJSPlugin\");\r\n    }\r\n\r\n    /**\r\n     * Creates a new Physics Engine\r\n     * @param gravity defines the gravity vector used by the simulation\r\n     * @param _physicsPlugin defines the plugin to use (CannonJS by default)\r\n     */\r\n    constructor(gravity: Nullable<Vector3>, private _physicsPlugin: IPhysicsEnginePlugin = PhysicsEngine.DefaultPluginFactory()) {\r\n        if (!this._physicsPlugin.isSupported()) {\r\n            throw new Error(\"Physics Engine \" + this._physicsPlugin.name + \" cannot be found. \" + \"Please make sure it is included.\");\r\n        }\r\n        gravity = gravity || new Vector3(0, -9.807, 0);\r\n        this.setGravity(gravity);\r\n        this.setTimeStep();\r\n    }\r\n\r\n    /**\r\n     * Sets the gravity vector used by the simulation\r\n     * @param gravity defines the gravity vector to use\r\n     */\r\n    public setGravity(gravity: Vector3): void {\r\n        this.gravity = gravity;\r\n        this._physicsPlugin.setGravity(this.gravity);\r\n    }\r\n\r\n    /**\r\n     * Set the time step of the physics engine.\r\n     * Default is 1/60.\r\n     * To slow it down, enter 1/600 for example.\r\n     * To speed it up, 1/30\r\n     * @param newTimeStep defines the new timestep to apply to this world.\r\n     */\r\n    public setTimeStep(newTimeStep: number = 1 / 60) {\r\n        this._physicsPlugin.setTimeStep(newTimeStep);\r\n    }\r\n\r\n    /**\r\n     * Get the time step of the physics engine.\r\n     * @returns the current time step\r\n     */\r\n    public getTimeStep(): number {\r\n        return this._physicsPlugin.getTimeStep();\r\n    }\r\n\r\n    /**\r\n     * Set the sub time step of the physics engine.\r\n     * Default is 0 meaning there is no sub steps\r\n     * To increase physics resolution precision, set a small value (like 1 ms)\r\n     * @param subTimeStep defines the new sub timestep used for physics resolution.\r\n     */\r\n    public setSubTimeStep(subTimeStep: number = 0) {\r\n        this._subTimeStep = subTimeStep;\r\n    }\r\n\r\n    /**\r\n     * Get the sub time step of the physics engine.\r\n     * @returns the current sub time step\r\n     */\r\n    public getSubTimeStep() {\r\n        return this._subTimeStep;\r\n    }\r\n\r\n    /**\r\n     * Release all resources\r\n     */\r\n    public dispose(): void {\r\n        this._impostors.forEach(function (impostor) {\r\n            impostor.dispose();\r\n        });\r\n        this._physicsPlugin.dispose();\r\n    }\r\n\r\n    /**\r\n     * Gets the name of the current physics plugin\r\n     * @returns the name of the plugin\r\n     */\r\n    public getPhysicsPluginName(): string {\r\n        return this._physicsPlugin.name;\r\n    }\r\n\r\n    /**\r\n     * Adding a new impostor for the impostor tracking.\r\n     * This will be done by the impostor itself.\r\n     * @param impostor the impostor to add\r\n     */\r\n    public addImpostor(impostor: PhysicsImpostor) {\r\n        this._impostors.push(impostor);\r\n        impostor.uniqueId = this._uniqueIdCounter++;\r\n        //if no parent, generate the body\r\n        if (!impostor.parent) {\r\n            this._physicsPlugin.generatePhysicsBody(impostor);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Remove an impostor from the engine.\r\n     * This impostor and its mesh will not longer be updated by the physics engine.\r\n     * @param impostor the impostor to remove\r\n     */\r\n    public removeImpostor(impostor: PhysicsImpostor) {\r\n        const index = this._impostors.indexOf(impostor);\r\n        if (index > -1) {\r\n            const removed = this._impostors.splice(index, 1);\r\n            //Is it needed?\r\n            if (removed.length) {\r\n                this.getPhysicsPlugin().removePhysicsBody(impostor);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Add a joint to the physics engine\r\n     * @param mainImpostor defines the main impostor to which the joint is added.\r\n     * @param connectedImpostor defines the impostor that is connected to the main impostor using this joint\r\n     * @param joint defines the joint that will connect both impostors.\r\n     */\r\n    public addJoint(mainImpostor: PhysicsImpostor, connectedImpostor: PhysicsImpostor, joint: PhysicsJoint) {\r\n        const impostorJoint = {\r\n            mainImpostor: mainImpostor,\r\n            connectedImpostor: connectedImpostor,\r\n            joint: joint,\r\n        };\r\n        joint.physicsPlugin = this._physicsPlugin;\r\n        this._joints.push(impostorJoint);\r\n        this._physicsPlugin.generateJoint(impostorJoint);\r\n    }\r\n\r\n    /**\r\n     * Removes a joint from the simulation\r\n     * @param mainImpostor defines the impostor used with the joint\r\n     * @param connectedImpostor defines the other impostor connected to the main one by the joint\r\n     * @param joint defines the joint to remove\r\n     */\r\n    public removeJoint(mainImpostor: PhysicsImpostor, connectedImpostor: PhysicsImpostor, joint: PhysicsJoint) {\r\n        const matchingJoints = this._joints.filter(function (impostorJoint) {\r\n            return impostorJoint.connectedImpostor === connectedImpostor && impostorJoint.joint === joint && impostorJoint.mainImpostor === mainImpostor;\r\n        });\r\n        if (matchingJoints.length) {\r\n            this._physicsPlugin.removeJoint(matchingJoints[0]);\r\n            //TODO remove it from the list as well\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Called by the scene. No need to call it.\r\n     * @param delta defines the timespan between frames\r\n     */\r\n    public _step(delta: number) {\r\n        //check if any mesh has no body / requires an update\r\n        this._impostors.forEach((impostor) => {\r\n            if (impostor.isBodyInitRequired()) {\r\n                this._physicsPlugin.generatePhysicsBody(impostor);\r\n            }\r\n        });\r\n\r\n        if (delta > 0.1) {\r\n            delta = 0.1;\r\n        } else if (delta <= 0) {\r\n            delta = 1.0 / 60.0;\r\n        }\r\n\r\n        this._physicsPlugin.executeStep(delta, this._impostors);\r\n    }\r\n\r\n    /**\r\n     * Gets the current plugin used to run the simulation\r\n     * @returns current plugin\r\n     */\r\n    public getPhysicsPlugin(): IPhysicsEnginePlugin {\r\n        return this._physicsPlugin;\r\n    }\r\n\r\n    /**\r\n     * Gets the list of physic impostors\r\n     * @returns an array of PhysicsImpostor\r\n     */\r\n    public getImpostors(): Array<PhysicsImpostor> {\r\n        return this._impostors;\r\n    }\r\n\r\n    /**\r\n     * Gets the impostor for a physics enabled object\r\n     * @param object defines the object impersonated by the impostor\r\n     * @returns the PhysicsImpostor or null if not found\r\n     */\r\n    public getImpostorForPhysicsObject(object: IPhysicsEnabledObject): Nullable<PhysicsImpostor> {\r\n        for (let i = 0; i < this._impostors.length; ++i) {\r\n            if (this._impostors[i].object === object) {\r\n                return this._impostors[i];\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Gets the impostor for a physics body object\r\n     * @param body defines physics body used by the impostor\r\n     * @returns the PhysicsImpostor or null if not found\r\n     */\r\n    public getImpostorWithPhysicsBody(body: any): Nullable<PhysicsImpostor> {\r\n        for (let i = 0; i < this._impostors.length; ++i) {\r\n            if (this._impostors[i].physicsBody === body) {\r\n                return this._impostors[i];\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Does a raycast in the physics world\r\n     * @param from when should the ray start?\r\n     * @param to when should the ray end?\r\n     * @returns PhysicsRaycastResult\r\n     */\r\n    public raycast(from: Vector3, to: Vector3): PhysicsRaycastResult {\r\n        return this._physicsPlugin.raycast(from, to);\r\n    }\r\n\r\n    /**\r\n     * Does a raycast in the physics world\r\n     * @param from when should the ray start?\r\n     * @param to when should the ray end?\r\n     * @param result resulting PhysicsRaycastResult\r\n     */\r\n    public raycastToRef(from: Vector3, to: Vector3, result: PhysicsRaycastResult) {\r\n        return this._physicsPlugin.raycastToRef(from, to, result);\r\n    }\r\n}\r\n"],"mappings":";AACA,SAASA,OAAO,QAAQ,4BAA0B;AAMlD,SAASC,WAAW,QAAQ,wBAAsB;AAElD;;;;AAIA,OAAM,MAAOC,aAAa;EActB;;;;EAIOC,gBAAgBA,CAAA;IACnB,OAAO,IAAI,CAACC,cAAc,CAACD,gBAAgB,EAAE;EACjD;EACA;;;;EAIO,OAAOE,oBAAoBA,CAAA;IAC9B,MAAMJ,WAAW,CAAC,gBAAgB,CAAC;EACvC;EAEA;;;;;EAKAK,YAAYC,OAA0B,EAAUH,cAAA,GAAuCF,aAAa,CAACG,oBAAoB,EAAE;IAA3E,KAAAD,cAAc,GAAdA,cAAc;IAjC9D;;;IAGQ,KAAAI,UAAU,GAA2B,EAAE;IACvC,KAAAC,OAAO,GAAgC,EAAE;IACzC,KAAAC,YAAY,GAAW,CAAC;IACxB,KAAAC,gBAAgB,GAAG,CAAC;IA4BxB,IAAI,CAAC,IAAI,CAACP,cAAc,CAACQ,WAAW,EAAE,EAAE;MACpC,MAAM,IAAIC,KAAK,CAAC,iBAAiB,GAAG,IAAI,CAACT,cAAc,CAACU,IAAI,GAAG,oBAAoB,GAAG,kCAAkC,CAAC;;IAE7HP,OAAO,GAAGA,OAAO,IAAI,IAAIP,OAAO,CAAC,CAAC,EAAE,CAAC,KAAK,EAAE,CAAC,CAAC;IAC9C,IAAI,CAACe,UAAU,CAACR,OAAO,CAAC;IACxB,IAAI,CAACS,WAAW,EAAE;EACtB;EAEA;;;;EAIOD,UAAUA,CAACR,OAAgB;IAC9B,IAAI,CAACA,OAAO,GAAGA,OAAO;IACtB,IAAI,CAACH,cAAc,CAACW,UAAU,CAAC,IAAI,CAACR,OAAO,CAAC;EAChD;EAEA;;;;;;;EAOOS,WAAWA,CAACC,WAAA,GAAsB,CAAC,GAAG,EAAE;IAC3C,IAAI,CAACb,cAAc,CAACY,WAAW,CAACC,WAAW,CAAC;EAChD;EAEA;;;;EAIOC,WAAWA,CAAA;IACd,OAAO,IAAI,CAACd,cAAc,CAACc,WAAW,EAAE;EAC5C;EAEA;;;;;;EAMOC,cAAcA,CAACC,WAAA,GAAsB,CAAC;IACzC,IAAI,CAACV,YAAY,GAAGU,WAAW;EACnC;EAEA;;;;EAIOC,cAAcA,CAAA;IACjB,OAAO,IAAI,CAACX,YAAY;EAC5B;EAEA;;;EAGOY,OAAOA,CAAA;IACV,IAAI,CAACd,UAAU,CAACe,OAAO,CAAC,UAAUC,QAAQ;MACtCA,QAAQ,CAACF,OAAO,EAAE;IACtB,CAAC,CAAC;IACF,IAAI,CAAClB,cAAc,CAACkB,OAAO,EAAE;EACjC;EAEA;;;;EAIOG,oBAAoBA,CAAA;IACvB,OAAO,IAAI,CAACrB,cAAc,CAACU,IAAI;EACnC;EAEA;;;;;EAKOY,WAAWA,CAACF,QAAyB;IACxC,IAAI,CAAChB,UAAU,CAACmB,IAAI,CAACH,QAAQ,CAAC;IAC9BA,QAAQ,CAACI,QAAQ,GAAG,IAAI,CAACjB,gBAAgB,EAAE;IAC3C;IACA,IAAI,CAACa,QAAQ,CAACK,MAAM,EAAE;MAClB,IAAI,CAACzB,cAAc,CAAC0B,mBAAmB,CAACN,QAAQ,CAAC;;EAEzD;EAEA;;;;;EAKOO,cAAcA,CAACP,QAAyB;IAC3C,MAAMQ,KAAK,GAAG,IAAI,CAACxB,UAAU,CAACyB,OAAO,CAACT,QAAQ,CAAC;IAC/C,IAAIQ,KAAK,GAAG,CAAC,CAAC,EAAE;MACZ,MAAME,OAAO,GAAG,IAAI,CAAC1B,UAAU,CAAC2B,MAAM,CAACH,KAAK,EAAE,CAAC,CAAC;MAChD;MACA,IAAIE,OAAO,CAACE,MAAM,EAAE;QAChB,IAAI,CAACC,gBAAgB,EAAE,CAACC,iBAAiB,CAACd,QAAQ,CAAC;;;EAG/D;EAEA;;;;;;EAMOe,QAAQA,CAACC,YAA6B,EAAEC,iBAAkC,EAAEC,KAAmB;IAClG,MAAMC,aAAa,GAAG;MAClBH,YAAY,EAAEA,YAAY;MAC1BC,iBAAiB,EAAEA,iBAAiB;MACpCC,KAAK,EAAEA;KACV;IACDA,KAAK,CAACE,aAAa,GAAG,IAAI,CAACxC,cAAc;IACzC,IAAI,CAACK,OAAO,CAACkB,IAAI,CAACgB,aAAa,CAAC;IAChC,IAAI,CAACvC,cAAc,CAACyC,aAAa,CAACF,aAAa,CAAC;EACpD;EAEA;;;;;;EAMOG,WAAWA,CAACN,YAA6B,EAAEC,iBAAkC,EAAEC,KAAmB;IACrG,MAAMK,cAAc,GAAG,IAAI,CAACtC,OAAO,CAACuC,MAAM,CAAC,UAAUL,aAAa;MAC9D,OAAOA,aAAa,CAACF,iBAAiB,KAAKA,iBAAiB,IAAIE,aAAa,CAACD,KAAK,KAAKA,KAAK,IAAIC,aAAa,CAACH,YAAY,KAAKA,YAAY;IAChJ,CAAC,CAAC;IACF,IAAIO,cAAc,CAACX,MAAM,EAAE;MACvB,IAAI,CAAChC,cAAc,CAAC0C,WAAW,CAACC,cAAc,CAAC,CAAC,CAAC,CAAC;MAClD;;EAER;EAEA;;;;EAIOE,KAAKA,CAACC,KAAa;IACtB;IACA,IAAI,CAAC1C,UAAU,CAACe,OAAO,CAAEC,QAAQ,IAAI;MACjC,IAAIA,QAAQ,CAAC2B,kBAAkB,EAAE,EAAE;QAC/B,IAAI,CAAC/C,cAAc,CAAC0B,mBAAmB,CAACN,QAAQ,CAAC;;IAEzD,CAAC,CAAC;IAEF,IAAI0B,KAAK,GAAG,GAAG,EAAE;MACbA,KAAK,GAAG,GAAG;KACd,MAAM,IAAIA,KAAK,IAAI,CAAC,EAAE;MACnBA,KAAK,GAAG,GAAG,GAAG,IAAI;;IAGtB,IAAI,CAAC9C,cAAc,CAACgD,WAAW,CAACF,KAAK,EAAE,IAAI,CAAC1C,UAAU,CAAC;EAC3D;EAEA;;;;EAIO6B,gBAAgBA,CAAA;IACnB,OAAO,IAAI,CAACjC,cAAc;EAC9B;EAEA;;;;EAIOiD,YAAYA,CAAA;IACf,OAAO,IAAI,CAAC7C,UAAU;EAC1B;EAEA;;;;;EAKO8C,2BAA2BA,CAACC,MAA6B;IAC5D,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,IAAI,CAAChD,UAAU,CAAC4B,MAAM,EAAE,EAAEoB,CAAC,EAAE;MAC7C,IAAI,IAAI,CAAChD,UAAU,CAACgD,CAAC,CAAC,CAACD,MAAM,KAAKA,MAAM,EAAE;QACtC,OAAO,IAAI,CAAC/C,UAAU,CAACgD,CAAC,CAAC;;;IAIjC,OAAO,IAAI;EACf;EAEA;;;;;EAKOC,0BAA0BA,CAACC,IAAS;IACvC,KAAK,IAAIF,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,IAAI,CAAChD,UAAU,CAAC4B,MAAM,EAAE,EAAEoB,CAAC,EAAE;MAC7C,IAAI,IAAI,CAAChD,UAAU,CAACgD,CAAC,CAAC,CAACG,WAAW,KAAKD,IAAI,EAAE;QACzC,OAAO,IAAI,CAAClD,UAAU,CAACgD,CAAC,CAAC;;;IAIjC,OAAO,IAAI;EACf;EAEA;;;;;;EAMOI,OAAOA,CAACC,IAAa,EAAEC,EAAW;IACrC,OAAO,IAAI,CAAC1D,cAAc,CAACwD,OAAO,CAACC,IAAI,EAAEC,EAAE,CAAC;EAChD;EAEA;;;;;;EAMOC,YAAYA,CAACF,IAAa,EAAEC,EAAW,EAAEE,MAA4B;IACxE,OAAO,IAAI,CAAC5D,cAAc,CAAC2D,YAAY,CAACF,IAAI,EAAEC,EAAE,EAAEE,MAAM,CAAC;EAC7D"},"metadata":{},"sourceType":"module","externalDependencies":[]}