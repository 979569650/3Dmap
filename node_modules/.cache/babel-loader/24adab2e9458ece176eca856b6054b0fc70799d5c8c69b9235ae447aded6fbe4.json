{"ast":null,"code":"import { Vector2, Vector3, Vector4, Matrix, Quaternion } from \"../Maths/math.vector.js\";\nimport { Color3, Color4 } from \"../Maths/math.color.js\";\n/**\n * A rich type represents extra information about a type,\n * such as its name and a default value constructor.\n * @experimental\n */\nexport class RichType {\n  constructor(typeName, defaultValue) {\n    this.typeName = typeName;\n    this.defaultValue = defaultValue;\n  }\n  serialize(serializationObject) {\n    serializationObject.typeName = this.typeName;\n    serializationObject.defaultValue = this.defaultValue;\n  }\n  static Parse(serializationObject) {\n    return new RichType(serializationObject.typeName, serializationObject.defaultValue);\n  }\n}\nexport const RichTypeAny = new RichType(\"any\", undefined);\nexport const RichTypeString = new RichType(\"string\", \"\");\nexport const RichTypeNumber = new RichType(\"number\", 0);\nexport const RichTypeBoolean = new RichType(\"boolean\", false);\nexport const RichTypeVector2 = new RichType(\"Vector2\", Vector2.Zero());\nexport const RichTypeVector3 = new RichType(\"Vector3\", Vector3.Zero());\nexport const RichTypeVector4 = new RichType(\"Vector4\", Vector4.Zero());\nexport const RichTypeMatrix = new RichType(\"Matrix\", Matrix.Identity());\nexport const RichTypeColor3 = new RichType(\"Color3\", Color3.Black());\nexport const RichTypeColor4 = new RichType(\"Color4\", new Color4(0, 0, 0, 0));\nexport const RichTypeQuaternion = new RichType(\"Quaternion\", Quaternion.Identity());\n/**\n * Given a value, try to deduce its rich type.\n * @param value the value to deduce the rich type from\n * @returns the value's rich type, or RichTypeAny if the type could not be deduced.\n */\nexport function getRichTypeFromValue(value) {\n  switch (typeof value) {\n    case \"string\":\n      return RichTypeString;\n    case \"number\":\n      return RichTypeNumber;\n    case \"boolean\":\n      return RichTypeBoolean;\n    case \"object\":\n      if (value instanceof Vector2) {\n        return RichTypeVector2;\n      } else if (value instanceof Vector3) {\n        return RichTypeVector3;\n      } else if (value instanceof Vector4) {\n        return RichTypeVector4;\n      } else if (value instanceof Color3) {\n        return RichTypeColor3;\n      } else if (value instanceof Color4) {\n        return RichTypeColor4;\n      } else if (value instanceof Quaternion) {\n        return RichTypeQuaternion;\n      } else {\n        return RichTypeAny;\n      }\n    default:\n      return RichTypeAny;\n  }\n}","map":{"version":3,"names":["Vector2","Vector3","Vector4","Matrix","Quaternion","Color3","Color4","RichType","constructor","typeName","defaultValue","serialize","serializationObject","Parse","RichTypeAny","undefined","RichTypeString","RichTypeNumber","RichTypeBoolean","RichTypeVector2","Zero","RichTypeVector3","RichTypeVector4","RichTypeMatrix","Identity","RichTypeColor3","Black","RichTypeColor4","RichTypeQuaternion","getRichTypeFromValue","value"],"sources":["../../../../dev/core/src/FlowGraph/flowGraphRichTypes.ts"],"sourcesContent":["import { Vector2, Vector3, Vector4, Matrix, Quaternion } from \"../Maths/math.vector\";\r\nimport { Color3, Color4 } from \"../Maths/math.color\";\r\n\r\n/**\r\n * A rich type represents extra information about a type,\r\n * such as its name and a default value constructor.\r\n * @experimental\r\n */\r\nexport class RichType<T> {\r\n    constructor(public typeName: string, public defaultValue: T) {}\r\n\r\n    serialize(serializationObject: any) {\r\n        serializationObject.typeName = this.typeName;\r\n        serializationObject.defaultValue = this.defaultValue;\r\n    }\r\n\r\n    static Parse(serializationObject: any): RichType<any> {\r\n        return new RichType(serializationObject.typeName, serializationObject.defaultValue);\r\n    }\r\n}\r\n\r\nexport const RichTypeAny: RichType<any> = new RichType(\"any\", undefined);\r\n\r\nexport const RichTypeString: RichType<string> = new RichType(\"string\", \"\");\r\n\r\nexport const RichTypeNumber: RichType<number> = new RichType(\"number\", 0);\r\n\r\nexport const RichTypeBoolean: RichType<boolean> = new RichType(\"boolean\", false);\r\n\r\nexport const RichTypeVector2: RichType<Vector2> = new RichType(\"Vector2\", Vector2.Zero());\r\n\r\nexport const RichTypeVector3: RichType<Vector3> = new RichType(\"Vector3\", Vector3.Zero());\r\n\r\nexport const RichTypeVector4: RichType<Vector4> = new RichType(\"Vector4\", Vector4.Zero());\r\n\r\nexport const RichTypeMatrix: RichType<Matrix> = new RichType(\"Matrix\", Matrix.Identity());\r\n\r\nexport const RichTypeColor3: RichType<Color3> = new RichType(\"Color3\", Color3.Black());\r\n\r\nexport const RichTypeColor4: RichType<Color4> = new RichType(\"Color4\", new Color4(0, 0, 0, 0));\r\n\r\nexport const RichTypeQuaternion: RichType<Quaternion> = new RichType(\"Quaternion\", Quaternion.Identity());\r\n\r\n/**\r\n * Given a value, try to deduce its rich type.\r\n * @param value the value to deduce the rich type from\r\n * @returns the value's rich type, or RichTypeAny if the type could not be deduced.\r\n */\r\nexport function getRichTypeFromValue<T>(value: T): RichType<T> {\r\n    switch (typeof value) {\r\n        case \"string\":\r\n            return RichTypeString as RichType<T>;\r\n        case \"number\":\r\n            return RichTypeNumber as RichType<T>;\r\n        case \"boolean\":\r\n            return RichTypeBoolean as RichType<T>;\r\n        case \"object\":\r\n            if (value instanceof Vector2) {\r\n                return RichTypeVector2 as RichType<T>;\r\n            } else if (value instanceof Vector3) {\r\n                return RichTypeVector3 as RichType<T>;\r\n            } else if (value instanceof Vector4) {\r\n                return RichTypeVector4 as RichType<T>;\r\n            } else if (value instanceof Color3) {\r\n                return RichTypeColor3 as RichType<T>;\r\n            } else if (value instanceof Color4) {\r\n                return RichTypeColor4 as RichType<T>;\r\n            } else if (value instanceof Quaternion) {\r\n                return RichTypeQuaternion as RichType<T>;\r\n            } else {\r\n                return RichTypeAny as RichType<T>;\r\n            }\r\n        default:\r\n            return RichTypeAny as RichType<T>;\r\n    }\r\n}\r\n"],"mappings":"AAAA,SAASA,OAAO,EAAEC,OAAO,EAAEC,OAAO,EAAEC,MAAM,EAAEC,UAAU,QAAQ,yBAAuB;AACrF,SAASC,MAAM,EAAEC,MAAM,QAAQ,wBAAsB;AAErD;;;;;AAKA,OAAM,MAAOC,QAAQ;EACjBC,YAAmBC,QAAgB,EAASC,YAAe;IAAxC,KAAAD,QAAQ,GAARA,QAAQ;IAAiB,KAAAC,YAAY,GAAZA,YAAY;EAAM;EAE9DC,SAASA,CAACC,mBAAwB;IAC9BA,mBAAmB,CAACH,QAAQ,GAAG,IAAI,CAACA,QAAQ;IAC5CG,mBAAmB,CAACF,YAAY,GAAG,IAAI,CAACA,YAAY;EACxD;EAEA,OAAOG,KAAKA,CAACD,mBAAwB;IACjC,OAAO,IAAIL,QAAQ,CAACK,mBAAmB,CAACH,QAAQ,EAAEG,mBAAmB,CAACF,YAAY,CAAC;EACvF;;AAGJ,OAAO,MAAMI,WAAW,GAAkB,IAAIP,QAAQ,CAAC,KAAK,EAAEQ,SAAS,CAAC;AAExE,OAAO,MAAMC,cAAc,GAAqB,IAAIT,QAAQ,CAAC,QAAQ,EAAE,EAAE,CAAC;AAE1E,OAAO,MAAMU,cAAc,GAAqB,IAAIV,QAAQ,CAAC,QAAQ,EAAE,CAAC,CAAC;AAEzE,OAAO,MAAMW,eAAe,GAAsB,IAAIX,QAAQ,CAAC,SAAS,EAAE,KAAK,CAAC;AAEhF,OAAO,MAAMY,eAAe,GAAsB,IAAIZ,QAAQ,CAAC,SAAS,EAAEP,OAAO,CAACoB,IAAI,EAAE,CAAC;AAEzF,OAAO,MAAMC,eAAe,GAAsB,IAAId,QAAQ,CAAC,SAAS,EAAEN,OAAO,CAACmB,IAAI,EAAE,CAAC;AAEzF,OAAO,MAAME,eAAe,GAAsB,IAAIf,QAAQ,CAAC,SAAS,EAAEL,OAAO,CAACkB,IAAI,EAAE,CAAC;AAEzF,OAAO,MAAMG,cAAc,GAAqB,IAAIhB,QAAQ,CAAC,QAAQ,EAAEJ,MAAM,CAACqB,QAAQ,EAAE,CAAC;AAEzF,OAAO,MAAMC,cAAc,GAAqB,IAAIlB,QAAQ,CAAC,QAAQ,EAAEF,MAAM,CAACqB,KAAK,EAAE,CAAC;AAEtF,OAAO,MAAMC,cAAc,GAAqB,IAAIpB,QAAQ,CAAC,QAAQ,EAAE,IAAID,MAAM,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;AAE9F,OAAO,MAAMsB,kBAAkB,GAAyB,IAAIrB,QAAQ,CAAC,YAAY,EAAEH,UAAU,CAACoB,QAAQ,EAAE,CAAC;AAEzG;;;;;AAKA,OAAM,SAAUK,oBAAoBA,CAAIC,KAAQ;EAC5C,QAAQ,OAAOA,KAAK;IAChB,KAAK,QAAQ;MACT,OAAOd,cAA6B;IACxC,KAAK,QAAQ;MACT,OAAOC,cAA6B;IACxC,KAAK,SAAS;MACV,OAAOC,eAA8B;IACzC,KAAK,QAAQ;MACT,IAAIY,KAAK,YAAY9B,OAAO,EAAE;QAC1B,OAAOmB,eAA8B;OACxC,MAAM,IAAIW,KAAK,YAAY7B,OAAO,EAAE;QACjC,OAAOoB,eAA8B;OACxC,MAAM,IAAIS,KAAK,YAAY5B,OAAO,EAAE;QACjC,OAAOoB,eAA8B;OACxC,MAAM,IAAIQ,KAAK,YAAYzB,MAAM,EAAE;QAChC,OAAOoB,cAA6B;OACvC,MAAM,IAAIK,KAAK,YAAYxB,MAAM,EAAE;QAChC,OAAOqB,cAA6B;OACvC,MAAM,IAAIG,KAAK,YAAY1B,UAAU,EAAE;QACpC,OAAOwB,kBAAiC;OAC3C,MAAM;QACH,OAAOd,WAA0B;;IAEzC;MACI,OAAOA,WAA0B;;AAE7C"},"metadata":{},"sourceType":"module","externalDependencies":[]}