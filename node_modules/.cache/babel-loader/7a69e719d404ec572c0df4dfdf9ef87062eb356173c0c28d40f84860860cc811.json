{"ast":null,"code":"import { NodeGeometryBlock } from \"../../nodeGeometryBlock.js\";\nimport { RegisterClass } from \"../../../../Misc/typeStore.js\";\nimport { NodeGeometryBlockConnectionPointTypes } from \"../../Enums/nodeGeometryConnectionPointTypes.js\";\nimport { Matrix, Vector3 } from \"../../../../Maths/math.vector.js\";\n/**\n * Block used to get a align matrix\n */\nexport class AlignBlock extends NodeGeometryBlock {\n  /**\n   * Create a new AlignBlock\n   * @param name defines the block name\n   */\n  constructor(name) {\n    super(name);\n    this.registerInput(\"source\", NodeGeometryBlockConnectionPointTypes.Vector3, true, Vector3.Up());\n    this.registerInput(\"target\", NodeGeometryBlockConnectionPointTypes.Vector3, true, Vector3.Left());\n    this.registerOutput(\"matrix\", NodeGeometryBlockConnectionPointTypes.Matrix);\n  }\n  /**\n   * Gets the current class name\n   * @returns the class name\n   */\n  getClassName() {\n    return \"AlignBlock\";\n  }\n  /**\n   * Gets the source input component\n   */\n  get source() {\n    return this._inputs[0];\n  }\n  /**\n   * Gets the target input component\n   */\n  get target() {\n    return this._inputs[1];\n  }\n  /**\n   * Gets the matrix output component\n   */\n  get matrix() {\n    return this._outputs[0];\n  }\n  _buildBlock(state) {\n    super._buildBlock(state);\n    this.matrix._storedFunction = state => {\n      const source = this.source.getConnectedValue(state).clone();\n      const target = this.target.getConnectedValue(state).clone();\n      const result = new Matrix();\n      source.normalize();\n      target.normalize();\n      Matrix.RotationAlignToRef(source, target, result, true);\n      return result;\n    };\n  }\n}\nRegisterClass(\"BABYLON.AlignBlock\", AlignBlock);","map":{"version":3,"names":["NodeGeometryBlock","RegisterClass","NodeGeometryBlockConnectionPointTypes","Matrix","Vector3","AlignBlock","constructor","name","registerInput","Up","Left","registerOutput","getClassName","source","_inputs","target","matrix","_outputs","_buildBlock","state","_storedFunction","getConnectedValue","clone","result","normalize","RotationAlignToRef"],"sources":["../../../../../../../dev/core/src/Meshes/Node/Blocks/Matrices/alignBlock.ts"],"sourcesContent":["import { NodeGeometryBlock } from \"../../nodeGeometryBlock\";\r\nimport type { NodeGeometryConnectionPoint } from \"../../nodeGeometryBlockConnectionPoint\";\r\nimport { RegisterClass } from \"../../../../Misc/typeStore\";\r\nimport { NodeGeometryBlockConnectionPointTypes } from \"../../Enums/nodeGeometryConnectionPointTypes\";\r\nimport type { NodeGeometryBuildState } from \"../../nodeGeometryBuildState\";\r\nimport { Matrix, Vector3 } from \"../../../../Maths/math.vector\";\r\n\r\n/**\r\n * Block used to get a align matrix\r\n */\r\nexport class AlignBlock extends NodeGeometryBlock {\r\n    /**\r\n     * Create a new AlignBlock\r\n     * @param name defines the block name\r\n     */\r\n    public constructor(name: string) {\r\n        super(name);\r\n\r\n        this.registerInput(\"source\", NodeGeometryBlockConnectionPointTypes.Vector3, true, Vector3.Up());\r\n        this.registerInput(\"target\", NodeGeometryBlockConnectionPointTypes.Vector3, true, Vector3.Left());\r\n        this.registerOutput(\"matrix\", NodeGeometryBlockConnectionPointTypes.Matrix);\r\n    }\r\n\r\n    /**\r\n     * Gets the current class name\r\n     * @returns the class name\r\n     */\r\n    public getClassName() {\r\n        return \"AlignBlock\";\r\n    }\r\n\r\n    /**\r\n     * Gets the source input component\r\n     */\r\n    public get source(): NodeGeometryConnectionPoint {\r\n        return this._inputs[0];\r\n    }\r\n\r\n    /**\r\n     * Gets the target input component\r\n     */\r\n    public get target(): NodeGeometryConnectionPoint {\r\n        return this._inputs[1];\r\n    }\r\n\r\n    /**\r\n     * Gets the matrix output component\r\n     */\r\n    public get matrix(): NodeGeometryConnectionPoint {\r\n        return this._outputs[0];\r\n    }\r\n\r\n    protected _buildBlock(state: NodeGeometryBuildState) {\r\n        super._buildBlock(state);\r\n\r\n        this.matrix._storedFunction = (state) => {\r\n            const source = (this.source.getConnectedValue(state) as Vector3).clone();\r\n            const target = (this.target.getConnectedValue(state) as Vector3).clone();\r\n            const result = new Matrix();\r\n\r\n            source.normalize();\r\n            target.normalize();\r\n\r\n            Matrix.RotationAlignToRef(source, target, result, true);\r\n\r\n            return result;\r\n        };\r\n    }\r\n}\r\n\r\nRegisterClass(\"BABYLON.AlignBlock\", AlignBlock);\r\n"],"mappings":"AAAA,SAASA,iBAAiB,QAAQ,4BAA0B;AAE5D,SAASC,aAAa,QAAQ,+BAA6B;AAC3D,SAASC,qCAAqC,QAAQ,iDAA+C;AAErG,SAASC,MAAM,EAAEC,OAAO,QAAQ,kCAAgC;AAEhE;;;AAGA,OAAM,MAAOC,UAAW,SAAQL,iBAAiB;EAC7C;;;;EAIAM,YAAmBC,IAAY;IAC3B,KAAK,CAACA,IAAI,CAAC;IAEX,IAAI,CAACC,aAAa,CAAC,QAAQ,EAAEN,qCAAqC,CAACE,OAAO,EAAE,IAAI,EAAEA,OAAO,CAACK,EAAE,EAAE,CAAC;IAC/F,IAAI,CAACD,aAAa,CAAC,QAAQ,EAAEN,qCAAqC,CAACE,OAAO,EAAE,IAAI,EAAEA,OAAO,CAACM,IAAI,EAAE,CAAC;IACjG,IAAI,CAACC,cAAc,CAAC,QAAQ,EAAET,qCAAqC,CAACC,MAAM,CAAC;EAC/E;EAEA;;;;EAIOS,YAAYA,CAAA;IACf,OAAO,YAAY;EACvB;EAEA;;;EAGA,IAAWC,MAAMA,CAAA;IACb,OAAO,IAAI,CAACC,OAAO,CAAC,CAAC,CAAC;EAC1B;EAEA;;;EAGA,IAAWC,MAAMA,CAAA;IACb,OAAO,IAAI,CAACD,OAAO,CAAC,CAAC,CAAC;EAC1B;EAEA;;;EAGA,IAAWE,MAAMA,CAAA;IACb,OAAO,IAAI,CAACC,QAAQ,CAAC,CAAC,CAAC;EAC3B;EAEUC,WAAWA,CAACC,KAA6B;IAC/C,KAAK,CAACD,WAAW,CAACC,KAAK,CAAC;IAExB,IAAI,CAACH,MAAM,CAACI,eAAe,GAAID,KAAK,IAAI;MACpC,MAAMN,MAAM,GAAI,IAAI,CAACA,MAAM,CAACQ,iBAAiB,CAACF,KAAK,CAAa,CAACG,KAAK,EAAE;MACxE,MAAMP,MAAM,GAAI,IAAI,CAACA,MAAM,CAACM,iBAAiB,CAACF,KAAK,CAAa,CAACG,KAAK,EAAE;MACxE,MAAMC,MAAM,GAAG,IAAIpB,MAAM,EAAE;MAE3BU,MAAM,CAACW,SAAS,EAAE;MAClBT,MAAM,CAACS,SAAS,EAAE;MAElBrB,MAAM,CAACsB,kBAAkB,CAACZ,MAAM,EAAEE,MAAM,EAAEQ,MAAM,EAAE,IAAI,CAAC;MAEvD,OAAOA,MAAM;IACjB,CAAC;EACL;;AAGJtB,aAAa,CAAC,oBAAoB,EAAEI,UAAU,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}