{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { WebXRFeaturesManager, WebXRFeatureName } from \"../webXRFeaturesManager.js\";\nimport { Observable } from \"../../Misc/observable.js\";\nimport { Vector3 } from \"../../Maths/math.vector.js\";\nimport { WebXRAbstractFeature } from \"./WebXRAbstractFeature.js\";\n/**\n * The feature point system is used to detect feature points from real world geometry.\n * This feature is currently experimental and only supported on BabylonNative, and should not be used in the browser.\n * The newly introduced API can be seen in webxr.nativeextensions.d.ts and described in FeaturePoints.md.\n */\nexport class WebXRFeaturePointSystem extends WebXRAbstractFeature {\n  /**\n   * The current feature point cloud maintained across frames.\n   */\n  get featurePointCloud() {\n    return this._featurePointCloud;\n  }\n  /**\n   * construct the feature point system\n   * @param _xrSessionManager an instance of xr Session manager\n   */\n  constructor(_xrSessionManager) {\n    super(_xrSessionManager);\n    this._enabled = false;\n    this._featurePointCloud = [];\n    /**\n     * Observers registered here will be executed whenever new feature points are added (on XRFrame while the session is tracking).\n     * Will notify the observers about which feature points have been added.\n     */\n    this.onFeaturePointsAddedObservable = new Observable();\n    /**\n     * Observers registered here will be executed whenever a feature point has been updated (on XRFrame while the session is tracking).\n     * Will notify the observers about which feature points have been updated.\n     */\n    this.onFeaturePointsUpdatedObservable = new Observable();\n    this.xrNativeFeatureName = \"bjsfeature-points\";\n    if (this._xrSessionManager.session) {\n      this._init();\n    } else {\n      this._xrSessionManager.onXRSessionInit.addOnce(() => {\n        this._init();\n      });\n    }\n  }\n  /**\n   * Detach this feature.\n   * Will usually be called by the features manager\n   *\n   * @returns true if successful.\n   */\n  detach() {\n    if (!super.detach()) {\n      return false;\n    }\n    this.featurePointCloud.length = 0;\n    return true;\n  }\n  /**\n   * Dispose this feature and all of the resources attached\n   */\n  dispose() {\n    super.dispose();\n    this._featurePointCloud.length = 0;\n    this.onFeaturePointsUpdatedObservable.clear();\n    this.onFeaturePointsAddedObservable.clear();\n  }\n  /**\n   * On receiving a new XR frame if this feature is attached notify observers new feature point data is available.\n   * @param frame\n   */\n  _onXRFrame(frame) {\n    if (!this.attached || !this._enabled || !frame) {\n      return;\n    }\n    const featurePointRawData = frame.featurePointCloud;\n    if (!featurePointRawData || featurePointRawData.length === 0) {\n      return;\n    } else {\n      if (featurePointRawData.length % 5 !== 0) {\n        throw new Error(\"Received malformed feature point cloud of length: \" + featurePointRawData.length);\n      }\n      const numberOfFeaturePoints = featurePointRawData.length / 5;\n      const updatedFeaturePoints = new Array();\n      const addedFeaturePoints = new Array();\n      for (let i = 0; i < numberOfFeaturePoints; i++) {\n        const rawIndex = i * 5;\n        const id = featurePointRawData[rawIndex + 4];\n        // IDs should be durable across frames and strictly increasing from 0 up, so use them as indexing into the feature point array.\n        if (!this._featurePointCloud[id]) {\n          this._featurePointCloud[id] = {\n            position: new Vector3(),\n            confidenceValue: 0\n          };\n          addedFeaturePoints.push(id);\n        } else {\n          updatedFeaturePoints.push(id);\n        }\n        // Set the feature point values.\n        this._featurePointCloud[id].position.x = featurePointRawData[rawIndex];\n        this._featurePointCloud[id].position.y = featurePointRawData[rawIndex + 1];\n        this._featurePointCloud[id].position.z = featurePointRawData[rawIndex + 2];\n        this._featurePointCloud[id].confidenceValue = featurePointRawData[rawIndex + 3];\n      }\n      // Signal observers that feature points have been added if necessary.\n      if (addedFeaturePoints.length > 0) {\n        this.onFeaturePointsAddedObservable.notifyObservers(addedFeaturePoints);\n      }\n      // Signal observers that feature points have been updated if necessary.\n      if (updatedFeaturePoints.length > 0) {\n        this.onFeaturePointsUpdatedObservable.notifyObservers(updatedFeaturePoints);\n      }\n    }\n  }\n  /**\n   * Initializes the feature. If the feature point feature is not available for this environment do not mark the feature as enabled.\n   */\n  _init() {\n    if (!this._xrSessionManager.session.trySetFeaturePointCloudEnabled || !this._xrSessionManager.session.trySetFeaturePointCloudEnabled(true)) {\n      // fail silently\n      return;\n    }\n    this._enabled = true;\n  }\n}\n/**\n * The module's name\n */\nWebXRFeaturePointSystem.Name = WebXRFeatureName.FEATURE_POINTS;\n/**\n * The (Babylon) version of this module.\n * This is an integer representing the implementation version.\n * This number does not correspond to the WebXR specs version\n */\nWebXRFeaturePointSystem.Version = 1;\n// register the plugin\nWebXRFeaturesManager.AddWebXRFeature(WebXRFeaturePointSystem.Name, xrSessionManager => {\n  return () => new WebXRFeaturePointSystem(xrSessionManager);\n}, WebXRFeaturePointSystem.Version);","map":{"version":3,"names":["WebXRFeaturesManager","WebXRFeatureName","Observable","Vector3","WebXRAbstractFeature","WebXRFeaturePointSystem","featurePointCloud","_featurePointCloud","constructor","_xrSessionManager","_enabled","onFeaturePointsAddedObservable","onFeaturePointsUpdatedObservable","xrNativeFeatureName","session","_init","onXRSessionInit","addOnce","detach","length","dispose","clear","_onXRFrame","frame","attached","featurePointRawData","Error","numberOfFeaturePoints","updatedFeaturePoints","Array","addedFeaturePoints","i","rawIndex","id","position","confidenceValue","push","x","y","z","notifyObservers","trySetFeaturePointCloudEnabled","Name","FEATURE_POINTS","Version","AddWebXRFeature","xrSessionManager"],"sources":["../../../../../dev/core/src/XR/features/WebXRFeaturePointSystem.ts"],"sourcesContent":["import { WebXRFeaturesManager, WebXRFeatureName } from \"../webXRFeaturesManager\";\r\nimport type { WebXRSessionManager } from \"../webXRSessionManager\";\r\nimport { Observable } from \"../../Misc/observable\";\r\nimport { Vector3 } from \"../../Maths/math.vector\";\r\nimport { WebXRAbstractFeature } from \"./WebXRAbstractFeature\";\r\n\r\n/**\r\n * A babylon interface for a \"WebXR\" feature point.\r\n * Represents the position and confidence value of a given feature point.\r\n */\r\nexport interface IWebXRFeaturePoint {\r\n    /**\r\n     * Represents the position of the feature point in world space.\r\n     */\r\n    position: Vector3;\r\n    /**\r\n     * Represents the confidence value of the feature point in world space. 0 being least confident, and 1 being most confident.\r\n     */\r\n    confidenceValue: number;\r\n}\r\n\r\n/**\r\n * The feature point system is used to detect feature points from real world geometry.\r\n * This feature is currently experimental and only supported on BabylonNative, and should not be used in the browser.\r\n * The newly introduced API can be seen in webxr.nativeextensions.d.ts and described in FeaturePoints.md.\r\n */\r\nexport class WebXRFeaturePointSystem extends WebXRAbstractFeature {\r\n    private _enabled: boolean = false;\r\n    private _featurePointCloud: Array<IWebXRFeaturePoint> = [];\r\n\r\n    /**\r\n     * The module's name\r\n     */\r\n    public static readonly Name = WebXRFeatureName.FEATURE_POINTS;\r\n    /**\r\n     * The (Babylon) version of this module.\r\n     * This is an integer representing the implementation version.\r\n     * This number does not correspond to the WebXR specs version\r\n     */\r\n    public static readonly Version = 1;\r\n    /**\r\n     * Observers registered here will be executed whenever new feature points are added (on XRFrame while the session is tracking).\r\n     * Will notify the observers about which feature points have been added.\r\n     */\r\n    public readonly onFeaturePointsAddedObservable: Observable<number[]> = new Observable();\r\n    /**\r\n     * Observers registered here will be executed whenever a feature point has been updated (on XRFrame while the session is tracking).\r\n     * Will notify the observers about which feature points have been updated.\r\n     */\r\n    public readonly onFeaturePointsUpdatedObservable: Observable<number[]> = new Observable();\r\n    /**\r\n     * The current feature point cloud maintained across frames.\r\n     */\r\n    public get featurePointCloud(): Array<IWebXRFeaturePoint> {\r\n        return this._featurePointCloud;\r\n    }\r\n\r\n    /**\r\n     * construct the feature point system\r\n     * @param _xrSessionManager an instance of xr Session manager\r\n     */\r\n    constructor(_xrSessionManager: WebXRSessionManager) {\r\n        super(_xrSessionManager);\r\n        this.xrNativeFeatureName = \"bjsfeature-points\";\r\n        if (this._xrSessionManager.session) {\r\n            this._init();\r\n        } else {\r\n            this._xrSessionManager.onXRSessionInit.addOnce(() => {\r\n                this._init();\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Detach this feature.\r\n     * Will usually be called by the features manager\r\n     *\r\n     * @returns true if successful.\r\n     */\r\n    public detach(): boolean {\r\n        if (!super.detach()) {\r\n            return false;\r\n        }\r\n\r\n        this.featurePointCloud.length = 0;\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Dispose this feature and all of the resources attached\r\n     */\r\n    public dispose(): void {\r\n        super.dispose();\r\n\r\n        this._featurePointCloud.length = 0;\r\n        this.onFeaturePointsUpdatedObservable.clear();\r\n        this.onFeaturePointsAddedObservable.clear();\r\n    }\r\n\r\n    /**\r\n     * On receiving a new XR frame if this feature is attached notify observers new feature point data is available.\r\n     * @param frame\r\n     */\r\n    protected _onXRFrame(frame: XRFrame) {\r\n        if (!this.attached || !this._enabled || !frame) {\r\n            return;\r\n        }\r\n\r\n        const featurePointRawData: number[] | undefined = frame.featurePointCloud;\r\n        if (!featurePointRawData || featurePointRawData.length === 0) {\r\n            return;\r\n        } else {\r\n            if (featurePointRawData.length % 5 !== 0) {\r\n                throw new Error(\"Received malformed feature point cloud of length: \" + featurePointRawData.length);\r\n            }\r\n\r\n            const numberOfFeaturePoints: number = featurePointRawData.length / 5;\r\n            const updatedFeaturePoints = new Array();\r\n            const addedFeaturePoints = new Array();\r\n            for (let i = 0; i < numberOfFeaturePoints; i++) {\r\n                const rawIndex: number = i * 5;\r\n                const id = featurePointRawData[rawIndex + 4];\r\n\r\n                // IDs should be durable across frames and strictly increasing from 0 up, so use them as indexing into the feature point array.\r\n                if (!this._featurePointCloud[id]) {\r\n                    this._featurePointCloud[id] = { position: new Vector3(), confidenceValue: 0 };\r\n                    addedFeaturePoints.push(id);\r\n                } else {\r\n                    updatedFeaturePoints.push(id);\r\n                }\r\n\r\n                // Set the feature point values.\r\n                this._featurePointCloud[id].position.x = featurePointRawData[rawIndex];\r\n                this._featurePointCloud[id].position.y = featurePointRawData[rawIndex + 1];\r\n                this._featurePointCloud[id].position.z = featurePointRawData[rawIndex + 2];\r\n                this._featurePointCloud[id].confidenceValue = featurePointRawData[rawIndex + 3];\r\n            }\r\n\r\n            // Signal observers that feature points have been added if necessary.\r\n            if (addedFeaturePoints.length > 0) {\r\n                this.onFeaturePointsAddedObservable.notifyObservers(addedFeaturePoints);\r\n            }\r\n\r\n            // Signal observers that feature points have been updated if necessary.\r\n            if (updatedFeaturePoints.length > 0) {\r\n                this.onFeaturePointsUpdatedObservable.notifyObservers(updatedFeaturePoints);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Initializes the feature. If the feature point feature is not available for this environment do not mark the feature as enabled.\r\n     */\r\n    private _init() {\r\n        if (!this._xrSessionManager.session.trySetFeaturePointCloudEnabled || !this._xrSessionManager.session.trySetFeaturePointCloudEnabled(true)) {\r\n            // fail silently\r\n            return;\r\n        }\r\n\r\n        this._enabled = true;\r\n    }\r\n}\r\n\r\n// register the plugin\r\nWebXRFeaturesManager.AddWebXRFeature(\r\n    WebXRFeaturePointSystem.Name,\r\n    (xrSessionManager) => {\r\n        return () => new WebXRFeaturePointSystem(xrSessionManager);\r\n    },\r\n    WebXRFeaturePointSystem.Version\r\n);\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}