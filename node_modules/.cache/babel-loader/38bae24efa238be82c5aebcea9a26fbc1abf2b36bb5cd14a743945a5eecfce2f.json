{"ast":null,"code":"import { RichTypeBoolean } from \"../../../flowGraphRichTypes.js\";\nimport { FlowGraphExecutionBlock } from \"../../../flowGraphExecutionBlock.js\";\nimport { RegisterClass } from \"../../../../Misc/typeStore.js\";\n/**\n * @experimental\n * A block that evaluates a condition and executes one of two branches.\n */\nexport class FlowGraphBranchBlock extends FlowGraphExecutionBlock {\n  constructor(config) {\n    super(config);\n    this.condition = this._registerDataInput(\"condition\", RichTypeBoolean);\n    this.onTrue = this._registerSignalOutput(\"onTrue\");\n    this.onFalse = this._registerSignalOutput(\"onFalse\");\n  }\n  _execute(context) {\n    if (this.condition.getValue(context)) {\n      this.onTrue._activateSignal(context);\n    } else {\n      this.onFalse._activateSignal(context);\n    }\n  }\n  getClassName() {\n    return \"FGBranchBlock\";\n  }\n}\nRegisterClass(\"FGBranchBlock\", FlowGraphBranchBlock);","map":{"version":3,"names":["RichTypeBoolean","FlowGraphExecutionBlock","RegisterClass","FlowGraphBranchBlock","constructor","config","condition","_registerDataInput","onTrue","_registerSignalOutput","onFalse","_execute","context","getValue","_activateSignal","getClassName"],"sources":["../../../../../../../dev/core/src/FlowGraph/Blocks/Execution/ControlFlow/flowGraphBranchBlock.ts"],"sourcesContent":["import { RichTypeBoolean } from \"../../../flowGraphRichTypes\";\r\nimport type { FlowGraphContext } from \"../../../flowGraphContext\";\r\nimport type { FlowGraphDataConnection } from \"../../../flowGraphDataConnection\";\r\nimport { FlowGraphExecutionBlock } from \"../../../flowGraphExecutionBlock\";\r\nimport type { FlowGraphSignalConnection } from \"../../../flowGraphSignalConnection\";\r\nimport { RegisterClass } from \"../../../../Misc/typeStore\";\r\nimport type { IFlowGraphBlockConfiguration } from \"../../../flowGraphBlock\";\r\n\r\n/**\r\n * @experimental\r\n * A block that evaluates a condition and executes one of two branches.\r\n */\r\nexport class FlowGraphBranchBlock extends FlowGraphExecutionBlock {\r\n    /**\r\n     * Input connection: The condition to evaluate.\r\n     */\r\n    public readonly condition: FlowGraphDataConnection<boolean>;\r\n    /**\r\n     * Output connection: The branch to execute if the condition is true.\r\n     */\r\n    public readonly onTrue: FlowGraphSignalConnection;\r\n    /**\r\n     * Output connection: The branch to execute if the condition is false.\r\n     */\r\n    public readonly onFalse: FlowGraphSignalConnection;\r\n\r\n    constructor(config?: IFlowGraphBlockConfiguration) {\r\n        super(config);\r\n\r\n        this.condition = this._registerDataInput(\"condition\", RichTypeBoolean);\r\n\r\n        this.onTrue = this._registerSignalOutput(\"onTrue\");\r\n        this.onFalse = this._registerSignalOutput(\"onFalse\");\r\n    }\r\n\r\n    public _execute(context: FlowGraphContext): void {\r\n        if (this.condition.getValue(context)) {\r\n            this.onTrue._activateSignal(context);\r\n        } else {\r\n            this.onFalse._activateSignal(context);\r\n        }\r\n    }\r\n\r\n    public getClassName(): string {\r\n        return \"FGBranchBlock\";\r\n    }\r\n}\r\nRegisterClass(\"FGBranchBlock\", FlowGraphBranchBlock);\r\n"],"mappings":"AAAA,SAASA,eAAe,QAAQ,gCAA8B;AAG9D,SAASC,uBAAuB,QAAQ,qCAAmC;AAE3E,SAASC,aAAa,QAAQ,+BAA6B;AAG3D;;;;AAIA,OAAM,MAAOC,oBAAqB,SAAQF,uBAAuB;EAc7DG,YAAYC,MAAqC;IAC7C,KAAK,CAACA,MAAM,CAAC;IAEb,IAAI,CAACC,SAAS,GAAG,IAAI,CAACC,kBAAkB,CAAC,WAAW,EAAEP,eAAe,CAAC;IAEtE,IAAI,CAACQ,MAAM,GAAG,IAAI,CAACC,qBAAqB,CAAC,QAAQ,CAAC;IAClD,IAAI,CAACC,OAAO,GAAG,IAAI,CAACD,qBAAqB,CAAC,SAAS,CAAC;EACxD;EAEOE,QAAQA,CAACC,OAAyB;IACrC,IAAI,IAAI,CAACN,SAAS,CAACO,QAAQ,CAACD,OAAO,CAAC,EAAE;MAClC,IAAI,CAACJ,MAAM,CAACM,eAAe,CAACF,OAAO,CAAC;KACvC,MAAM;MACH,IAAI,CAACF,OAAO,CAACI,eAAe,CAACF,OAAO,CAAC;;EAE7C;EAEOG,YAAYA,CAAA;IACf,OAAO,eAAe;EAC1B;;AAEJb,aAAa,CAAC,eAAe,EAAEC,oBAAoB,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}