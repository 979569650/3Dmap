{"ast":null,"code":"import { __decorate } from \"@babylonjs/core/tslib.es6.js\";\nimport { BaseSlider } from \"./baseSlider.js\";\nimport { RegisterClass } from \"@babylonjs/core/Misc/typeStore.js\";\nimport { serialize } from \"@babylonjs/core/Misc/decorators.js\";\nimport { Tools } from \"@babylonjs/core/Misc/tools.js\";\n/**\n * Class used to create slider controls\n */\nexport class Slider extends BaseSlider {\n  /** Gets or sets a boolean indicating if the value bar must be rendered */\n  get displayValueBar() {\n    return this._displayValueBar;\n  }\n  set displayValueBar(value) {\n    if (this._displayValueBar === value) {\n      return;\n    }\n    this._displayValueBar = value;\n    this._markAsDirty();\n  }\n  /** Gets or sets border color */\n  get borderColor() {\n    return this._borderColor;\n  }\n  set borderColor(value) {\n    if (this._borderColor === value) {\n      return;\n    }\n    this._borderColor = value;\n    this._markAsDirty();\n  }\n  /** Gets or sets background color */\n  get background() {\n    return this._background;\n  }\n  set background(value) {\n    if (this._background === value) {\n      return;\n    }\n    this._background = value;\n    this._markAsDirty();\n  }\n  /** Gets or sets background gradient */\n  get backgroundGradient() {\n    return this._backgroundGradient;\n  }\n  set backgroundGradient(value) {\n    if (this._backgroundGradient === value) {\n      return;\n    }\n    this._backgroundGradient = value;\n    this._markAsDirty();\n  }\n  /** Gets or sets thumb's color */\n  get thumbColor() {\n    return this._thumbColor;\n  }\n  set thumbColor(value) {\n    if (this._thumbColor === value) {\n      return;\n    }\n    this._thumbColor = value;\n    this._markAsDirty();\n  }\n  /** Gets or sets a boolean indicating if the thumb should be round or square */\n  get isThumbCircle() {\n    return this._isThumbCircle;\n  }\n  set isThumbCircle(value) {\n    if (this._isThumbCircle === value) {\n      return;\n    }\n    this._isThumbCircle = value;\n    this._markAsDirty();\n  }\n  /**\n   * Creates a new Slider\n   * @param name defines the control name\n   */\n  constructor(name) {\n    super(name);\n    this.name = name;\n    this._background = \"black\";\n    this._borderColor = \"white\";\n    this._thumbColor = \"\";\n    this._isThumbCircle = false;\n    this._displayValueBar = true;\n    this._backgroundGradient = null;\n  }\n  _getTypeName() {\n    return \"Slider\";\n  }\n  _getBackgroundColor(context) {\n    return this._backgroundGradient ? this._backgroundGradient.getCanvasGradient(context) : this._background;\n  }\n  _draw(context) {\n    context.save();\n    this._applyStates(context);\n    this._prepareRenderingData(this.isThumbCircle ? \"circle\" : \"rectangle\");\n    let left = this._renderLeft;\n    let top = this._renderTop;\n    const width = this._renderWidth;\n    const height = this._renderHeight;\n    let radius = 0;\n    if (this.isThumbClamped && this.isThumbCircle) {\n      if (this.isVertical) {\n        top += this._effectiveThumbThickness / 2;\n      } else {\n        left += this._effectiveThumbThickness / 2;\n      }\n      radius = this._backgroundBoxThickness / 2;\n    } else {\n      radius = (this._effectiveThumbThickness - this._effectiveBarOffset) / 2;\n    }\n    if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\n      context.shadowColor = this.shadowColor;\n      context.shadowBlur = this.shadowBlur;\n      context.shadowOffsetX = this.shadowOffsetX;\n      context.shadowOffsetY = this.shadowOffsetY;\n    }\n    const thumbPosition = this._getThumbPosition();\n    context.fillStyle = this._getBackgroundColor(context);\n    if (this.isVertical) {\n      if (this.isThumbClamped) {\n        if (this.isThumbCircle) {\n          context.beginPath();\n          context.arc(left + this._backgroundBoxThickness / 2, top, radius, Math.PI, 2 * Math.PI);\n          context.fill();\n          context.fillRect(left, top, width, height);\n        } else {\n          context.fillRect(left, top, width, height + this._effectiveThumbThickness);\n        }\n      } else {\n        context.fillRect(left, top, width, height);\n      }\n    } else {\n      if (this.isThumbClamped) {\n        if (this.isThumbCircle) {\n          context.beginPath();\n          context.arc(left + this._backgroundBoxLength, top + this._backgroundBoxThickness / 2, radius, 0, 2 * Math.PI);\n          context.fill();\n          context.fillRect(left, top, width, height);\n        } else {\n          context.fillRect(left, top, width + this._effectiveThumbThickness, height);\n        }\n      } else {\n        context.fillRect(left, top, width, height);\n      }\n    }\n    if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\n      context.shadowBlur = 0;\n      context.shadowOffsetX = 0;\n      context.shadowOffsetY = 0;\n    }\n    // Value bar\n    context.fillStyle = this._getColor(context);\n    if (this._displayValueBar) {\n      if (this.isVertical) {\n        if (this.isThumbClamped) {\n          if (this.isThumbCircle) {\n            context.beginPath();\n            context.arc(left + this._backgroundBoxThickness / 2, top + this._backgroundBoxLength, radius, 0, 2 * Math.PI);\n            context.fill();\n            context.fillRect(left, top + thumbPosition, width, height - thumbPosition);\n          } else {\n            context.fillRect(left, top + thumbPosition, width, height - thumbPosition + this._effectiveThumbThickness);\n          }\n        } else {\n          context.fillRect(left, top + thumbPosition, width, height - thumbPosition);\n        }\n      } else {\n        if (this.isThumbClamped) {\n          if (this.isThumbCircle) {\n            context.beginPath();\n            context.arc(left, top + this._backgroundBoxThickness / 2, radius, 0, 2 * Math.PI);\n            context.fill();\n            context.fillRect(left, top, thumbPosition, height);\n          } else {\n            context.fillRect(left, top, thumbPosition, height);\n          }\n        } else {\n          context.fillRect(left, top, thumbPosition, height);\n        }\n      }\n    }\n    // Thumb\n    context.fillStyle = this._thumbColor || this._getColor(context);\n    if (this.displayThumb) {\n      if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\n        context.shadowColor = this.shadowColor;\n        context.shadowBlur = this.shadowBlur;\n        context.shadowOffsetX = this.shadowOffsetX;\n        context.shadowOffsetY = this.shadowOffsetY;\n      }\n      if (this._isThumbCircle) {\n        context.beginPath();\n        if (this.isVertical) {\n          context.arc(left + this._backgroundBoxThickness / 2, top + thumbPosition, radius, 0, 2 * Math.PI);\n        } else {\n          context.arc(left + thumbPosition, top + this._backgroundBoxThickness / 2, radius, 0, 2 * Math.PI);\n        }\n        context.fill();\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\n          context.shadowBlur = 0;\n          context.shadowOffsetX = 0;\n          context.shadowOffsetY = 0;\n        }\n        context.strokeStyle = this._borderColor;\n        context.stroke();\n      } else {\n        if (this.isVertical) {\n          context.fillRect(left - this._effectiveBarOffset, this._currentMeasure.top + thumbPosition, this._currentMeasure.width, this._effectiveThumbThickness);\n        } else {\n          context.fillRect(this._currentMeasure.left + thumbPosition, this._currentMeasure.top, this._effectiveThumbThickness, this._currentMeasure.height);\n        }\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\n          context.shadowBlur = 0;\n          context.shadowOffsetX = 0;\n          context.shadowOffsetY = 0;\n        }\n        context.strokeStyle = this._borderColor;\n        if (this.isVertical) {\n          context.strokeRect(left - this._effectiveBarOffset, this._currentMeasure.top + thumbPosition, this._currentMeasure.width, this._effectiveThumbThickness);\n        } else {\n          context.strokeRect(this._currentMeasure.left + thumbPosition, this._currentMeasure.top, this._effectiveThumbThickness, this._currentMeasure.height);\n        }\n      }\n    }\n    context.restore();\n  }\n  serialize(serializationObject) {\n    super.serialize(serializationObject);\n    if (this.backgroundGradient) {\n      serializationObject.backgroundGradient = {};\n      this.backgroundGradient.serialize(serializationObject.backgroundGradient);\n    }\n  }\n  /** @internal */\n  _parseFromContent(serializedObject, host) {\n    super._parseFromContent(serializedObject, host);\n    if (serializedObject.backgroundGradient) {\n      const className = Tools.Instantiate(\"BABYLON.GUI.\" + serializedObject.backgroundGradient.className);\n      this.backgroundGradient = new className();\n      this.backgroundGradient.parse(serializedObject.backgroundGradient);\n    }\n  }\n}\n__decorate([serialize()], Slider.prototype, \"displayValueBar\", null);\n__decorate([serialize()], Slider.prototype, \"borderColor\", null);\n__decorate([serialize()], Slider.prototype, \"background\", null);\n__decorate([serialize()], Slider.prototype, \"thumbColor\", null);\n__decorate([serialize()], Slider.prototype, \"isThumbCircle\", null);\nRegisterClass(\"BABYLON.GUI.Slider\", Slider);","map":{"version":3,"names":["BaseSlider","RegisterClass","serialize","Tools","Slider","displayValueBar","_displayValueBar","value","_markAsDirty","borderColor","_borderColor","background","_background","backgroundGradient","_backgroundGradient","thumbColor","_thumbColor","isThumbCircle","_isThumbCircle","constructor","name","_getTypeName","_getBackgroundColor","context","getCanvasGradient","_draw","save","_applyStates","_prepareRenderingData","left","_renderLeft","top","_renderTop","width","_renderWidth","height","_renderHeight","radius","isThumbClamped","isVertical","_effectiveThumbThickness","_backgroundBoxThickness","_effectiveBarOffset","shadowBlur","shadowOffsetX","shadowOffsetY","shadowColor","thumbPosition","_getThumbPosition","fillStyle","beginPath","arc","Math","PI","fill","fillRect","_backgroundBoxLength","_getColor","displayThumb","strokeStyle","stroke","_currentMeasure","strokeRect","restore","serializationObject","_parseFromContent","serializedObject","host","className","Instantiate","parse","__decorate"],"sources":["../../../../../../dev/gui/src/2D/controls/sliders/slider.ts"],"sourcesContent":["import { BaseSlider } from \"./baseSlider\";\r\nimport { RegisterClass } from \"core/Misc/typeStore\";\r\nimport { serialize } from \"core/Misc/decorators\";\r\nimport type { ICanvasRenderingContext } from \"core/Engines/ICanvas\";\r\nimport type { Nullable } from \"core/types\";\r\nimport type { BaseGradient } from \"../gradient/BaseGradient\";\r\nimport type { AdvancedDynamicTexture } from \"gui/2D/advancedDynamicTexture\";\r\nimport { Tools } from \"core/Misc/tools\";\r\n\r\n/**\r\n * Class used to create slider controls\r\n */\r\nexport class Slider extends BaseSlider {\r\n    private _background = \"black\";\r\n    private _borderColor = \"white\";\r\n    private _thumbColor = \"\";\r\n    private _isThumbCircle = false;\r\n    protected _displayValueBar = true;\r\n    private _backgroundGradient: Nullable<BaseGradient> = null;\r\n\r\n    /** Gets or sets a boolean indicating if the value bar must be rendered */\r\n    @serialize()\r\n    public get displayValueBar(): boolean {\r\n        return this._displayValueBar;\r\n    }\r\n\r\n    public set displayValueBar(value: boolean) {\r\n        if (this._displayValueBar === value) {\r\n            return;\r\n        }\r\n\r\n        this._displayValueBar = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets border color */\r\n    @serialize()\r\n    public get borderColor(): string {\r\n        return this._borderColor;\r\n    }\r\n\r\n    public set borderColor(value: string) {\r\n        if (this._borderColor === value) {\r\n            return;\r\n        }\r\n\r\n        this._borderColor = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets background color */\r\n    @serialize()\r\n    public get background(): string {\r\n        return this._background;\r\n    }\r\n\r\n    public set background(value: string) {\r\n        if (this._background === value) {\r\n            return;\r\n        }\r\n\r\n        this._background = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets background gradient */\r\n    public get backgroundGradient(): Nullable<BaseGradient> {\r\n        return this._backgroundGradient;\r\n    }\r\n\r\n    public set backgroundGradient(value: Nullable<BaseGradient>) {\r\n        if (this._backgroundGradient === value) {\r\n            return;\r\n        }\r\n\r\n        this._backgroundGradient = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets thumb's color */\r\n    @serialize()\r\n    public get thumbColor(): string {\r\n        return this._thumbColor;\r\n    }\r\n\r\n    public set thumbColor(value: string) {\r\n        if (this._thumbColor === value) {\r\n            return;\r\n        }\r\n\r\n        this._thumbColor = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets a boolean indicating if the thumb should be round or square */\r\n    @serialize()\r\n    public get isThumbCircle(): boolean {\r\n        return this._isThumbCircle;\r\n    }\r\n\r\n    public set isThumbCircle(value: boolean) {\r\n        if (this._isThumbCircle === value) {\r\n            return;\r\n        }\r\n\r\n        this._isThumbCircle = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Creates a new Slider\r\n     * @param name defines the control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Slider\";\r\n    }\r\n\r\n    protected _getBackgroundColor(context: ICanvasRenderingContext) {\r\n        return this._backgroundGradient ? this._backgroundGradient.getCanvasGradient(context) : this._background;\r\n    }\r\n\r\n    public _draw(context: ICanvasRenderingContext): void {\r\n        context.save();\r\n\r\n        this._applyStates(context);\r\n        this._prepareRenderingData(this.isThumbCircle ? \"circle\" : \"rectangle\");\r\n        let left = this._renderLeft;\r\n        let top = this._renderTop;\r\n        const width = this._renderWidth;\r\n        const height = this._renderHeight;\r\n\r\n        let radius = 0;\r\n\r\n        if (this.isThumbClamped && this.isThumbCircle) {\r\n            if (this.isVertical) {\r\n                top += this._effectiveThumbThickness / 2;\r\n            } else {\r\n                left += this._effectiveThumbThickness / 2;\r\n            }\r\n\r\n            radius = this._backgroundBoxThickness / 2;\r\n        } else {\r\n            radius = (this._effectiveThumbThickness - this._effectiveBarOffset) / 2;\r\n        }\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            context.shadowColor = this.shadowColor;\r\n            context.shadowBlur = this.shadowBlur;\r\n            context.shadowOffsetX = this.shadowOffsetX;\r\n            context.shadowOffsetY = this.shadowOffsetY;\r\n        }\r\n\r\n        const thumbPosition = this._getThumbPosition();\r\n        context.fillStyle = this._getBackgroundColor(context);\r\n\r\n        if (this.isVertical) {\r\n            if (this.isThumbClamped) {\r\n                if (this.isThumbCircle) {\r\n                    context.beginPath();\r\n                    context.arc(left + this._backgroundBoxThickness / 2, top, radius, Math.PI, 2 * Math.PI);\r\n                    context.fill();\r\n                    context.fillRect(left, top, width, height);\r\n                } else {\r\n                    context.fillRect(left, top, width, height + this._effectiveThumbThickness);\r\n                }\r\n            } else {\r\n                context.fillRect(left, top, width, height);\r\n            }\r\n        } else {\r\n            if (this.isThumbClamped) {\r\n                if (this.isThumbCircle) {\r\n                    context.beginPath();\r\n                    context.arc(left + this._backgroundBoxLength, top + this._backgroundBoxThickness / 2, radius, 0, 2 * Math.PI);\r\n                    context.fill();\r\n                    context.fillRect(left, top, width, height);\r\n                } else {\r\n                    context.fillRect(left, top, width + this._effectiveThumbThickness, height);\r\n                }\r\n            } else {\r\n                context.fillRect(left, top, width, height);\r\n            }\r\n        }\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            context.shadowBlur = 0;\r\n            context.shadowOffsetX = 0;\r\n            context.shadowOffsetY = 0;\r\n        }\r\n\r\n        // Value bar\r\n        context.fillStyle = this._getColor(context);\r\n        if (this._displayValueBar) {\r\n            if (this.isVertical) {\r\n                if (this.isThumbClamped) {\r\n                    if (this.isThumbCircle) {\r\n                        context.beginPath();\r\n                        context.arc(left + this._backgroundBoxThickness / 2, top + this._backgroundBoxLength, radius, 0, 2 * Math.PI);\r\n                        context.fill();\r\n                        context.fillRect(left, top + thumbPosition, width, height - thumbPosition);\r\n                    } else {\r\n                        context.fillRect(left, top + thumbPosition, width, height - thumbPosition + this._effectiveThumbThickness);\r\n                    }\r\n                } else {\r\n                    context.fillRect(left, top + thumbPosition, width, height - thumbPosition);\r\n                }\r\n            } else {\r\n                if (this.isThumbClamped) {\r\n                    if (this.isThumbCircle) {\r\n                        context.beginPath();\r\n                        context.arc(left, top + this._backgroundBoxThickness / 2, radius, 0, 2 * Math.PI);\r\n                        context.fill();\r\n                        context.fillRect(left, top, thumbPosition, height);\r\n                    } else {\r\n                        context.fillRect(left, top, thumbPosition, height);\r\n                    }\r\n                } else {\r\n                    context.fillRect(left, top, thumbPosition, height);\r\n                }\r\n            }\r\n        }\r\n\r\n        // Thumb\r\n        context.fillStyle = this._thumbColor || this._getColor(context);\r\n        if (this.displayThumb) {\r\n            if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n                context.shadowColor = this.shadowColor;\r\n                context.shadowBlur = this.shadowBlur;\r\n                context.shadowOffsetX = this.shadowOffsetX;\r\n                context.shadowOffsetY = this.shadowOffsetY;\r\n            }\r\n            if (this._isThumbCircle) {\r\n                context.beginPath();\r\n                if (this.isVertical) {\r\n                    context.arc(left + this._backgroundBoxThickness / 2, top + thumbPosition, radius, 0, 2 * Math.PI);\r\n                } else {\r\n                    context.arc(left + thumbPosition, top + this._backgroundBoxThickness / 2, radius, 0, 2 * Math.PI);\r\n                }\r\n                context.fill();\r\n                if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n                    context.shadowBlur = 0;\r\n                    context.shadowOffsetX = 0;\r\n                    context.shadowOffsetY = 0;\r\n                }\r\n                context.strokeStyle = this._borderColor;\r\n                context.stroke();\r\n            } else {\r\n                if (this.isVertical) {\r\n                    context.fillRect(left - this._effectiveBarOffset, this._currentMeasure.top + thumbPosition, this._currentMeasure.width, this._effectiveThumbThickness);\r\n                } else {\r\n                    context.fillRect(this._currentMeasure.left + thumbPosition, this._currentMeasure.top, this._effectiveThumbThickness, this._currentMeasure.height);\r\n                }\r\n                if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n                    context.shadowBlur = 0;\r\n                    context.shadowOffsetX = 0;\r\n                    context.shadowOffsetY = 0;\r\n                }\r\n                context.strokeStyle = this._borderColor;\r\n                if (this.isVertical) {\r\n                    context.strokeRect(left - this._effectiveBarOffset, this._currentMeasure.top + thumbPosition, this._currentMeasure.width, this._effectiveThumbThickness);\r\n                } else {\r\n                    context.strokeRect(this._currentMeasure.left + thumbPosition, this._currentMeasure.top, this._effectiveThumbThickness, this._currentMeasure.height);\r\n                }\r\n            }\r\n        }\r\n        context.restore();\r\n    }\r\n\r\n    public serialize(serializationObject: any) {\r\n        super.serialize(serializationObject);\r\n\r\n        if (this.backgroundGradient) {\r\n            serializationObject.backgroundGradient = {};\r\n            this.backgroundGradient.serialize(serializationObject.backgroundGradient);\r\n        }\r\n    }\r\n\r\n    /** @internal */\r\n    public _parseFromContent(serializedObject: any, host: AdvancedDynamicTexture) {\r\n        super._parseFromContent(serializedObject, host);\r\n\r\n        if (serializedObject.backgroundGradient) {\r\n            const className = Tools.Instantiate(\"BABYLON.GUI.\" + serializedObject.backgroundGradient.className);\r\n            this.backgroundGradient = new className();\r\n            this.backgroundGradient!.parse(serializedObject.backgroundGradient);\r\n        }\r\n    }\r\n}\r\nRegisterClass(\"BABYLON.GUI.Slider\", Slider);\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}