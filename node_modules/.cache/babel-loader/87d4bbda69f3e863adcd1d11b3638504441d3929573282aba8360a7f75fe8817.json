{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { RegisterClass } from \"../../../Misc/typeStore.js\";\nimport { NodeGeometryBlockConnectionPointTypes } from \"../Enums/nodeGeometryConnectionPointTypes.js\";\nimport { NodeGeometryBlock } from \"../nodeGeometryBlock.js\";\n/**\n * Defines a block used to move a value from a range to another\n */\nexport class MapRangeBlock extends NodeGeometryBlock {\n  /**\n   * Create a new MapRangeBlock\n   * @param name defines the block name\n   */\n  constructor(name) {\n    super(name);\n    this.registerInput(\"value\", NodeGeometryBlockConnectionPointTypes.AutoDetect);\n    this.registerInput(\"fromMin\", NodeGeometryBlockConnectionPointTypes.Float, true, 0);\n    this.registerInput(\"fromMax\", NodeGeometryBlockConnectionPointTypes.Float, true, 1);\n    this.registerInput(\"toMin\", NodeGeometryBlockConnectionPointTypes.Float, true, 0);\n    this.registerInput(\"toMax\", NodeGeometryBlockConnectionPointTypes.Float, true, 1);\n    this.registerOutput(\"output\", NodeGeometryBlockConnectionPointTypes.BasedOnInput);\n    this._inputs[0].excludedConnectionPointTypes.push(NodeGeometryBlockConnectionPointTypes.Vector2);\n    this._inputs[0].excludedConnectionPointTypes.push(NodeGeometryBlockConnectionPointTypes.Vector3);\n    this._inputs[0].excludedConnectionPointTypes.push(NodeGeometryBlockConnectionPointTypes.Vector4);\n    this._inputs[0].excludedConnectionPointTypes.push(NodeGeometryBlockConnectionPointTypes.Matrix);\n    this._inputs[0].excludedConnectionPointTypes.push(NodeGeometryBlockConnectionPointTypes.Geometry);\n    this._inputs[0].excludedConnectionPointTypes.push(NodeGeometryBlockConnectionPointTypes.Texture);\n    this._outputs[0]._typeConnectionSource = this._inputs[0];\n  }\n  /**\n   * Gets the current class name\n   * @returns the class name\n   */\n  getClassName() {\n    return \"MapRangeBlock\";\n  }\n  /**\n   * Gets the value input component\n   */\n  get value() {\n    return this._inputs[0];\n  }\n  /**\n   * Gets the fromMin input component\n   */\n  get fromMin() {\n    return this._inputs[1];\n  }\n  /**\n   * Gets the fromMax input component\n   */\n  get fromMax() {\n    return this._inputs[2];\n  }\n  /**\n   * Gets the toMin input component\n   */\n  get toMin() {\n    return this._inputs[3];\n  }\n  /**\n   * Gets the toMax input component\n   */\n  get toMax() {\n    return this._inputs[4];\n  }\n  /**\n   * Gets the output component\n   */\n  get output() {\n    return this._outputs[0];\n  }\n  _buildBlock() {\n    if (!this.value.isConnected) {\n      this.output._storedFunction = null;\n      this.output._storedValue = null;\n      return;\n    }\n    this.output._storedFunction = state => {\n      const value = this.value.getConnectedValue(state);\n      const fromMin = this.fromMin.getConnectedValue(state);\n      const fromMax = this.fromMax.getConnectedValue(state);\n      const toMin = this.toMin.getConnectedValue(state);\n      const toMax = this.toMax.getConnectedValue(state);\n      const result = (value - fromMin) / (fromMax - fromMin) * (toMax - toMin) + toMin;\n      if (this.output.type === NodeGeometryBlockConnectionPointTypes.Int) {\n        return Math.floor(result);\n      }\n      return result;\n    };\n  }\n}\nRegisterClass(\"BABYLON.MapRangeBlock\", MapRangeBlock);","map":{"version":3,"names":["RegisterClass","NodeGeometryBlockConnectionPointTypes","NodeGeometryBlock","MapRangeBlock","constructor","name","registerInput","AutoDetect","Float","registerOutput","BasedOnInput","_inputs","excludedConnectionPointTypes","push","Vector2","Vector3","Vector4","Matrix","Geometry","Texture","_outputs","_typeConnectionSource","getClassName","value","fromMin","fromMax","toMin","toMax","output","_buildBlock","isConnected","_storedFunction","_storedValue","state","getConnectedValue","result","type","Int","Math","floor"],"sources":["../../../../../../dev/core/src/Meshes/Node/Blocks/mapRangeBlock.ts"],"sourcesContent":["import { RegisterClass } from \"../../../Misc/typeStore\";\r\nimport { NodeGeometryBlockConnectionPointTypes } from \"../Enums/nodeGeometryConnectionPointTypes\";\r\nimport { NodeGeometryBlock } from \"../nodeGeometryBlock\";\r\nimport type { NodeGeometryConnectionPoint } from \"../nodeGeometryBlockConnectionPoint\";\r\n\r\n/**\r\n * Defines a block used to move a value from a range to another\r\n */\r\nexport class MapRangeBlock extends NodeGeometryBlock {\r\n    /**\r\n     * Create a new MapRangeBlock\r\n     * @param name defines the block name\r\n     */\r\n    public constructor(name: string) {\r\n        super(name);\r\n\r\n        this.registerInput(\"value\", NodeGeometryBlockConnectionPointTypes.AutoDetect);\r\n        this.registerInput(\"fromMin\", NodeGeometryBlockConnectionPointTypes.Float, true, 0);\r\n        this.registerInput(\"fromMax\", NodeGeometryBlockConnectionPointTypes.Float, true, 1);\r\n        this.registerInput(\"toMin\", NodeGeometryBlockConnectionPointTypes.Float, true, 0);\r\n        this.registerInput(\"toMax\", NodeGeometryBlockConnectionPointTypes.Float, true, 1);\r\n\r\n        this.registerOutput(\"output\", NodeGeometryBlockConnectionPointTypes.BasedOnInput);\r\n\r\n        this._inputs[0].excludedConnectionPointTypes.push(NodeGeometryBlockConnectionPointTypes.Vector2);\r\n        this._inputs[0].excludedConnectionPointTypes.push(NodeGeometryBlockConnectionPointTypes.Vector3);\r\n        this._inputs[0].excludedConnectionPointTypes.push(NodeGeometryBlockConnectionPointTypes.Vector4);\r\n        this._inputs[0].excludedConnectionPointTypes.push(NodeGeometryBlockConnectionPointTypes.Matrix);\r\n        this._inputs[0].excludedConnectionPointTypes.push(NodeGeometryBlockConnectionPointTypes.Geometry);\r\n        this._inputs[0].excludedConnectionPointTypes.push(NodeGeometryBlockConnectionPointTypes.Texture);\r\n        this._outputs[0]._typeConnectionSource = this._inputs[0];\r\n    }\r\n\r\n    /**\r\n     * Gets the current class name\r\n     * @returns the class name\r\n     */\r\n    public getClassName() {\r\n        return \"MapRangeBlock\";\r\n    }\r\n\r\n    /**\r\n     * Gets the value input component\r\n     */\r\n    public get value(): NodeGeometryConnectionPoint {\r\n        return this._inputs[0];\r\n    }\r\n\r\n    /**\r\n     * Gets the fromMin input component\r\n     */\r\n    public get fromMin(): NodeGeometryConnectionPoint {\r\n        return this._inputs[1];\r\n    }\r\n\r\n    /**\r\n     * Gets the fromMax input component\r\n     */\r\n    public get fromMax(): NodeGeometryConnectionPoint {\r\n        return this._inputs[2];\r\n    }\r\n\r\n    /**\r\n     * Gets the toMin input component\r\n     */\r\n    public get toMin(): NodeGeometryConnectionPoint {\r\n        return this._inputs[3];\r\n    }\r\n\r\n    /**\r\n     * Gets the toMax input component\r\n     */\r\n    public get toMax(): NodeGeometryConnectionPoint {\r\n        return this._inputs[4];\r\n    }\r\n\r\n    /**\r\n     * Gets the output component\r\n     */\r\n    public get output(): NodeGeometryConnectionPoint {\r\n        return this._outputs[0];\r\n    }\r\n\r\n    protected _buildBlock() {\r\n        if (!this.value.isConnected) {\r\n            this.output._storedFunction = null;\r\n            this.output._storedValue = null;\r\n            return;\r\n        }\r\n\r\n        this.output._storedFunction = (state) => {\r\n            const value = this.value.getConnectedValue(state);\r\n            const fromMin = this.fromMin.getConnectedValue(state);\r\n            const fromMax = this.fromMax.getConnectedValue(state);\r\n            const toMin = this.toMin.getConnectedValue(state);\r\n            const toMax = this.toMax.getConnectedValue(state);\r\n\r\n            const result = ((value - fromMin) / (fromMax - fromMin)) * (toMax - toMin) + toMin;\r\n\r\n            if (this.output.type === NodeGeometryBlockConnectionPointTypes.Int) {\r\n                return Math.floor(result);\r\n            }\r\n\r\n            return result;\r\n        };\r\n    }\r\n}\r\n\r\nRegisterClass(\"BABYLON.MapRangeBlock\", MapRangeBlock);\r\n"],"mappings":";AAAA,SAASA,aAAa,QAAQ,4BAA0B;AACxD,SAASC,qCAAqC,QAAQ,8CAA4C;AAClG,SAASC,iBAAiB,QAAQ,yBAAuB;AAGzD;;;AAGA,OAAM,MAAOC,aAAc,SAAQD,iBAAiB;EAChD;;;;EAIAE,YAAmBC,IAAY;IAC3B,KAAK,CAACA,IAAI,CAAC;IAEX,IAAI,CAACC,aAAa,CAAC,OAAO,EAAEL,qCAAqC,CAACM,UAAU,CAAC;IAC7E,IAAI,CAACD,aAAa,CAAC,SAAS,EAAEL,qCAAqC,CAACO,KAAK,EAAE,IAAI,EAAE,CAAC,CAAC;IACnF,IAAI,CAACF,aAAa,CAAC,SAAS,EAAEL,qCAAqC,CAACO,KAAK,EAAE,IAAI,EAAE,CAAC,CAAC;IACnF,IAAI,CAACF,aAAa,CAAC,OAAO,EAAEL,qCAAqC,CAACO,KAAK,EAAE,IAAI,EAAE,CAAC,CAAC;IACjF,IAAI,CAACF,aAAa,CAAC,OAAO,EAAEL,qCAAqC,CAACO,KAAK,EAAE,IAAI,EAAE,CAAC,CAAC;IAEjF,IAAI,CAACC,cAAc,CAAC,QAAQ,EAAER,qCAAqC,CAACS,YAAY,CAAC;IAEjF,IAAI,CAACC,OAAO,CAAC,CAAC,CAAC,CAACC,4BAA4B,CAACC,IAAI,CAACZ,qCAAqC,CAACa,OAAO,CAAC;IAChG,IAAI,CAACH,OAAO,CAAC,CAAC,CAAC,CAACC,4BAA4B,CAACC,IAAI,CAACZ,qCAAqC,CAACc,OAAO,CAAC;IAChG,IAAI,CAACJ,OAAO,CAAC,CAAC,CAAC,CAACC,4BAA4B,CAACC,IAAI,CAACZ,qCAAqC,CAACe,OAAO,CAAC;IAChG,IAAI,CAACL,OAAO,CAAC,CAAC,CAAC,CAACC,4BAA4B,CAACC,IAAI,CAACZ,qCAAqC,CAACgB,MAAM,CAAC;IAC/F,IAAI,CAACN,OAAO,CAAC,CAAC,CAAC,CAACC,4BAA4B,CAACC,IAAI,CAACZ,qCAAqC,CAACiB,QAAQ,CAAC;IACjG,IAAI,CAACP,OAAO,CAAC,CAAC,CAAC,CAACC,4BAA4B,CAACC,IAAI,CAACZ,qCAAqC,CAACkB,OAAO,CAAC;IAChG,IAAI,CAACC,QAAQ,CAAC,CAAC,CAAC,CAACC,qBAAqB,GAAG,IAAI,CAACV,OAAO,CAAC,CAAC,CAAC;EAC5D;EAEA;;;;EAIOW,YAAYA,CAAA;IACf,OAAO,eAAe;EAC1B;EAEA;;;EAGA,IAAWC,KAAKA,CAAA;IACZ,OAAO,IAAI,CAACZ,OAAO,CAAC,CAAC,CAAC;EAC1B;EAEA;;;EAGA,IAAWa,OAAOA,CAAA;IACd,OAAO,IAAI,CAACb,OAAO,CAAC,CAAC,CAAC;EAC1B;EAEA;;;EAGA,IAAWc,OAAOA,CAAA;IACd,OAAO,IAAI,CAACd,OAAO,CAAC,CAAC,CAAC;EAC1B;EAEA;;;EAGA,IAAWe,KAAKA,CAAA;IACZ,OAAO,IAAI,CAACf,OAAO,CAAC,CAAC,CAAC;EAC1B;EAEA;;;EAGA,IAAWgB,KAAKA,CAAA;IACZ,OAAO,IAAI,CAAChB,OAAO,CAAC,CAAC,CAAC;EAC1B;EAEA;;;EAGA,IAAWiB,MAAMA,CAAA;IACb,OAAO,IAAI,CAACR,QAAQ,CAAC,CAAC,CAAC;EAC3B;EAEUS,WAAWA,CAAA;IACjB,IAAI,CAAC,IAAI,CAACN,KAAK,CAACO,WAAW,EAAE;MACzB,IAAI,CAACF,MAAM,CAACG,eAAe,GAAG,IAAI;MAClC,IAAI,CAACH,MAAM,CAACI,YAAY,GAAG,IAAI;MAC/B;;IAGJ,IAAI,CAACJ,MAAM,CAACG,eAAe,GAAIE,KAAK,IAAI;MACpC,MAAMV,KAAK,GAAG,IAAI,CAACA,KAAK,CAACW,iBAAiB,CAACD,KAAK,CAAC;MACjD,MAAMT,OAAO,GAAG,IAAI,CAACA,OAAO,CAACU,iBAAiB,CAACD,KAAK,CAAC;MACrD,MAAMR,OAAO,GAAG,IAAI,CAACA,OAAO,CAACS,iBAAiB,CAACD,KAAK,CAAC;MACrD,MAAMP,KAAK,GAAG,IAAI,CAACA,KAAK,CAACQ,iBAAiB,CAACD,KAAK,CAAC;MACjD,MAAMN,KAAK,GAAG,IAAI,CAACA,KAAK,CAACO,iBAAiB,CAACD,KAAK,CAAC;MAEjD,MAAME,MAAM,GAAI,CAACZ,KAAK,GAAGC,OAAO,KAAKC,OAAO,GAAGD,OAAO,CAAC,IAAKG,KAAK,GAAGD,KAAK,CAAC,GAAGA,KAAK;MAElF,IAAI,IAAI,CAACE,MAAM,CAACQ,IAAI,KAAKnC,qCAAqC,CAACoC,GAAG,EAAE;QAChE,OAAOC,IAAI,CAACC,KAAK,CAACJ,MAAM,CAAC;;MAG7B,OAAOA,MAAM;IACjB,CAAC;EACL;;AAGJnC,aAAa,CAAC,uBAAuB,EAAEG,aAAa,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}