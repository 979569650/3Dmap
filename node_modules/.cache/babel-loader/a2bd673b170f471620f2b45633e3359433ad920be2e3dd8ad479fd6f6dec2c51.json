{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { __decorate } from \"../../../tslib.es6.js\";\nimport { NodeMaterialBlock } from \"../nodeMaterialBlock.js\";\nimport { NodeMaterialBlockConnectionPointTypes } from \"../Enums/nodeMaterialBlockConnectionPointTypes.js\";\nimport { NodeMaterialBlockTargets } from \"../Enums/nodeMaterialBlockTargets.js\";\nimport { RegisterClass } from \"../../../Misc/typeStore.js\";\nimport { editableInPropertyPage, PropertyTypeForEdition } from \"../../../Decorators/nodeDecorator.js\";\n/**\n * block used to Generate Fractal Brownian Motion Clouds\n */\nexport class CloudBlock extends NodeMaterialBlock {\n  /**\n   * Creates a new CloudBlock\n   * @param name defines the block name\n   */\n  constructor(name) {\n    super(name, NodeMaterialBlockTargets.Neutral);\n    /** Gets or sets the number of octaves */\n    this.octaves = 6.0;\n    this.registerInput(\"seed\", NodeMaterialBlockConnectionPointTypes.AutoDetect);\n    this.registerInput(\"chaos\", NodeMaterialBlockConnectionPointTypes.AutoDetect, true);\n    this.registerInput(\"offsetX\", NodeMaterialBlockConnectionPointTypes.Float, true);\n    this.registerInput(\"offsetY\", NodeMaterialBlockConnectionPointTypes.Float, true);\n    this.registerInput(\"offsetZ\", NodeMaterialBlockConnectionPointTypes.Float, true);\n    this.registerOutput(\"output\", NodeMaterialBlockConnectionPointTypes.Float);\n    this._inputs[0].acceptedConnectionPointTypes.push(NodeMaterialBlockConnectionPointTypes.Vector2);\n    this._inputs[0].acceptedConnectionPointTypes.push(NodeMaterialBlockConnectionPointTypes.Vector3);\n    this._linkConnectionTypes(0, 1);\n  }\n  /**\n   * Gets the current class name\n   * @returns the class name\n   */\n  getClassName() {\n    return \"CloudBlock\";\n  }\n  /**\n   * Gets the seed input component\n   */\n  get seed() {\n    return this._inputs[0];\n  }\n  /**\n   * Gets the chaos input component\n   */\n  get chaos() {\n    return this._inputs[1];\n  }\n  /**\n   * Gets the offset X input component\n   */\n  get offsetX() {\n    return this._inputs[2];\n  }\n  /**\n   * Gets the offset Y input component\n   */\n  get offsetY() {\n    return this._inputs[3];\n  }\n  /**\n   * Gets the offset Z input component\n   */\n  get offsetZ() {\n    return this._inputs[4];\n  }\n  /**\n   * Gets the output component\n   */\n  get output() {\n    return this._outputs[0];\n  }\n  _buildBlock(state) {\n    var _a, _b;\n    super._buildBlock(state);\n    if (!this.seed.isConnected) {\n      return;\n    }\n    if (!this._outputs[0].hasEndpoints) {\n      return;\n    }\n    const functionString = `\n\n        float cloudRandom(in float p) { p = fract(p * 0.011); p *= p + 7.5; p *= p + p; return fract(p); }\n\n        // Based on Morgan McGuire @morgan3d\n        // https://www.shadertoy.com/view/4dS3Wd\n        float cloudNoise(in vec2 x, in vec2 chaos) {\n            vec2 step = chaos * vec2(75., 120.) + vec2(75., 120.);\n\n            vec2 i = floor(x);\n            vec2 f = fract(x);\n\n            float n = dot(i, step);\n\n            vec2 u = f * f * (3.0 - 2.0 * f);\n            return mix(\n                    mix(cloudRandom(n + dot(step, vec2(0, 0))), cloudRandom(n + dot(step, vec2(1, 0))), u.x),\n                    mix(cloudRandom(n + dot(step, vec2(0, 1))), cloudRandom(n + dot(step, vec2(1, 1))), u.x),\n                    u.y\n                );\n        }\n\n        float cloudNoise(in vec3 x, in vec3 chaos) {\n            vec3 step = chaos * vec3(60., 120., 75.) + vec3(60., 120., 75.);\n\n            vec3 i = floor(x);\n            vec3 f = fract(x);\n\n            float n = dot(i, step);\n\n            vec3 u = f * f * (3.0 - 2.0 * f);\n            return mix(mix(mix( cloudRandom(n + dot(step, vec3(0, 0, 0))), cloudRandom(n + dot(step, vec3(1, 0, 0))), u.x),\n                           mix( cloudRandom(n + dot(step, vec3(0, 1, 0))), cloudRandom(n + dot(step, vec3(1, 1, 0))), u.x), u.y),\n                       mix(mix( cloudRandom(n + dot(step, vec3(0, 0, 1))), cloudRandom(n + dot(step, vec3(1, 0, 1))), u.x),\n                           mix( cloudRandom(n + dot(step, vec3(0, 1, 1))), cloudRandom(n + dot(step, vec3(1, 1, 1))), u.x), u.y), u.z);\n        }`;\n    const fractalBrownianString = `\n        float fbm(in vec2 st, in vec2 chaos) {\n            // Initial values\n            float value = 0.0;\n            float amplitude = .5;\n            float frequency = 0.;\n\n            // Loop of octaves\n            for (int i = 0; i < OCTAVES; i++) {\n                value += amplitude * cloudNoise(st, chaos);\n                st *= 2.0;\n                amplitude *= 0.5;\n            }\n            return value;\n        }\n\n        float fbm(in vec3 x, in vec3 chaos) {\n            // Initial values\n            float value = 0.0;\n            float amplitude = 0.5;\n            for (int i = 0; i < OCTAVES; ++i) {\n                value += amplitude * cloudNoise(x, chaos);\n                x = x * 2.0;\n                amplitude *= 0.5;\n            }\n            return value;\n        }`;\n    const fbmNewName = `fbm${this.octaves}`;\n    state._emitFunction(\"CloudBlockCode\", functionString, \"// CloudBlockCode\");\n    state._emitFunction(\"CloudBlockCodeFBM\" + this.octaves, fractalBrownianString.replace(/fbm/gi, fbmNewName).replace(/OCTAVES/gi, (this.octaves | 0).toString()), \"// CloudBlockCode FBM\");\n    const localVariable = state._getFreeVariableName(\"st\");\n    const seedType = ((_a = this.seed.connectedPoint) === null || _a === void 0 ? void 0 : _a.type) === NodeMaterialBlockConnectionPointTypes.Vector2 ? \"vec2\" : \"vec3\";\n    state.compilationString += `${seedType} ${localVariable} = ${this.seed.associatedVariableName};\\n`;\n    if (this.offsetX.isConnected) {\n      state.compilationString += `${localVariable}.x += 0.1 * ${this.offsetX.associatedVariableName};\\n`;\n    }\n    if (this.offsetY.isConnected) {\n      state.compilationString += `${localVariable}.y += 0.1 * ${this.offsetY.associatedVariableName};\\n`;\n    }\n    if (this.offsetZ.isConnected && seedType === \"vec3\") {\n      state.compilationString += `${localVariable}.z += 0.1 * ${this.offsetZ.associatedVariableName};\\n`;\n    }\n    let chaosValue = \"\";\n    if (this.chaos.isConnected) {\n      chaosValue = this.chaos.associatedVariableName;\n    } else {\n      chaosValue = ((_b = this.seed.connectedPoint) === null || _b === void 0 ? void 0 : _b.type) === NodeMaterialBlockConnectionPointTypes.Vector2 ? \"vec2(0., 0.)\" : \"vec3(0., 0., 0.)\";\n    }\n    state.compilationString += this._declareOutput(this._outputs[0], state) + ` = ${fbmNewName}(${localVariable}, ${chaosValue});\\n`;\n    return this;\n  }\n  _dumpPropertiesCode() {\n    const codeString = super._dumpPropertiesCode() + `${this._codeVariableName}.octaves = ${this.octaves};\\n`;\n    return codeString;\n  }\n  serialize() {\n    const serializationObject = super.serialize();\n    serializationObject.octaves = this.octaves;\n    return serializationObject;\n  }\n  _deserialize(serializationObject, scene, rootUrl) {\n    super._deserialize(serializationObject, scene, rootUrl);\n    this.octaves = serializationObject.octaves;\n  }\n}\n__decorate([editableInPropertyPage(\"Octaves\", PropertyTypeForEdition.Int)], CloudBlock.prototype, \"octaves\", void 0);\nRegisterClass(\"BABYLON.CloudBlock\", CloudBlock);","map":{"version":3,"names":["NodeMaterialBlock","NodeMaterialBlockConnectionPointTypes","NodeMaterialBlockTargets","RegisterClass","editableInPropertyPage","PropertyTypeForEdition","CloudBlock","constructor","name","Neutral","octaves","registerInput","AutoDetect","Float","registerOutput","_inputs","acceptedConnectionPointTypes","push","Vector2","Vector3","_linkConnectionTypes","getClassName","seed","chaos","offsetX","offsetY","offsetZ","output","_outputs","_buildBlock","state","isConnected","hasEndpoints","functionString","fractalBrownianString","fbmNewName","_emitFunction","replace","toString","localVariable","_getFreeVariableName","seedType","_a","connectedPoint","type","compilationString","associatedVariableName","chaosValue","_b","_declareOutput","_dumpPropertiesCode","codeString","_codeVariableName","serialize","serializationObject","_deserialize","scene","rootUrl","__decorate","Int"],"sources":["../../../../../../dev/core/src/Materials/Node/Blocks/cloudBlock.ts"],"sourcesContent":["import { NodeMaterialBlock } from \"../nodeMaterialBlock\";\r\nimport { NodeMaterialBlockConnectionPointTypes } from \"../Enums/nodeMaterialBlockConnectionPointTypes\";\r\nimport type { NodeMaterialBuildState } from \"../nodeMaterialBuildState\";\r\nimport type { NodeMaterialConnectionPoint } from \"../nodeMaterialBlockConnectionPoint\";\r\nimport { NodeMaterialBlockTargets } from \"../Enums/nodeMaterialBlockTargets\";\r\nimport { RegisterClass } from \"../../../Misc/typeStore\";\r\nimport { editableInPropertyPage, PropertyTypeForEdition } from \"../../../Decorators/nodeDecorator\";\r\nimport type { Scene } from \"../../../scene\";\r\n/**\r\n * block used to Generate Fractal Brownian Motion Clouds\r\n */\r\nexport class CloudBlock extends NodeMaterialBlock {\r\n    /** Gets or sets the number of octaves */\r\n    @editableInPropertyPage(\"Octaves\", PropertyTypeForEdition.Int)\r\n    public octaves = 6.0;\r\n\r\n    /**\r\n     * Creates a new CloudBlock\r\n     * @param name defines the block name\r\n     */\r\n    public constructor(name: string) {\r\n        super(name, NodeMaterialBlockTargets.Neutral);\r\n        this.registerInput(\"seed\", NodeMaterialBlockConnectionPointTypes.AutoDetect);\r\n        this.registerInput(\"chaos\", NodeMaterialBlockConnectionPointTypes.AutoDetect, true);\r\n        this.registerInput(\"offsetX\", NodeMaterialBlockConnectionPointTypes.Float, true);\r\n        this.registerInput(\"offsetY\", NodeMaterialBlockConnectionPointTypes.Float, true);\r\n        this.registerInput(\"offsetZ\", NodeMaterialBlockConnectionPointTypes.Float, true);\r\n        this.registerOutput(\"output\", NodeMaterialBlockConnectionPointTypes.Float);\r\n\r\n        this._inputs[0].acceptedConnectionPointTypes.push(NodeMaterialBlockConnectionPointTypes.Vector2);\r\n        this._inputs[0].acceptedConnectionPointTypes.push(NodeMaterialBlockConnectionPointTypes.Vector3);\r\n        this._linkConnectionTypes(0, 1);\r\n    }\r\n\r\n    /**\r\n     * Gets the current class name\r\n     * @returns the class name\r\n     */\r\n    public getClassName() {\r\n        return \"CloudBlock\";\r\n    }\r\n\r\n    /**\r\n     * Gets the seed input component\r\n     */\r\n    public get seed(): NodeMaterialConnectionPoint {\r\n        return this._inputs[0];\r\n    }\r\n\r\n    /**\r\n     * Gets the chaos input component\r\n     */\r\n    public get chaos(): NodeMaterialConnectionPoint {\r\n        return this._inputs[1];\r\n    }\r\n\r\n    /**\r\n     * Gets the offset X input component\r\n     */\r\n    public get offsetX(): NodeMaterialConnectionPoint {\r\n        return this._inputs[2];\r\n    }\r\n\r\n    /**\r\n     * Gets the offset Y input component\r\n     */\r\n    public get offsetY(): NodeMaterialConnectionPoint {\r\n        return this._inputs[3];\r\n    }\r\n\r\n    /**\r\n     * Gets the offset Z input component\r\n     */\r\n    public get offsetZ(): NodeMaterialConnectionPoint {\r\n        return this._inputs[4];\r\n    }\r\n\r\n    /**\r\n     * Gets the output component\r\n     */\r\n    public get output(): NodeMaterialConnectionPoint {\r\n        return this._outputs[0];\r\n    }\r\n\r\n    protected _buildBlock(state: NodeMaterialBuildState) {\r\n        super._buildBlock(state);\r\n\r\n        if (!this.seed.isConnected) {\r\n            return;\r\n        }\r\n\r\n        if (!this._outputs[0].hasEndpoints) {\r\n            return;\r\n        }\r\n\r\n        const functionString = `\r\n\r\n        float cloudRandom(in float p) { p = fract(p * 0.011); p *= p + 7.5; p *= p + p; return fract(p); }\r\n\r\n        // Based on Morgan McGuire @morgan3d\r\n        // https://www.shadertoy.com/view/4dS3Wd\r\n        float cloudNoise(in vec2 x, in vec2 chaos) {\r\n            vec2 step = chaos * vec2(75., 120.) + vec2(75., 120.);\r\n\r\n            vec2 i = floor(x);\r\n            vec2 f = fract(x);\r\n\r\n            float n = dot(i, step);\r\n\r\n            vec2 u = f * f * (3.0 - 2.0 * f);\r\n            return mix(\r\n                    mix(cloudRandom(n + dot(step, vec2(0, 0))), cloudRandom(n + dot(step, vec2(1, 0))), u.x),\r\n                    mix(cloudRandom(n + dot(step, vec2(0, 1))), cloudRandom(n + dot(step, vec2(1, 1))), u.x),\r\n                    u.y\r\n                );\r\n        }\r\n\r\n        float cloudNoise(in vec3 x, in vec3 chaos) {\r\n            vec3 step = chaos * vec3(60., 120., 75.) + vec3(60., 120., 75.);\r\n\r\n            vec3 i = floor(x);\r\n            vec3 f = fract(x);\r\n\r\n            float n = dot(i, step);\r\n\r\n            vec3 u = f * f * (3.0 - 2.0 * f);\r\n            return mix(mix(mix( cloudRandom(n + dot(step, vec3(0, 0, 0))), cloudRandom(n + dot(step, vec3(1, 0, 0))), u.x),\r\n                           mix( cloudRandom(n + dot(step, vec3(0, 1, 0))), cloudRandom(n + dot(step, vec3(1, 1, 0))), u.x), u.y),\r\n                       mix(mix( cloudRandom(n + dot(step, vec3(0, 0, 1))), cloudRandom(n + dot(step, vec3(1, 0, 1))), u.x),\r\n                           mix( cloudRandom(n + dot(step, vec3(0, 1, 1))), cloudRandom(n + dot(step, vec3(1, 1, 1))), u.x), u.y), u.z);\r\n        }`;\r\n\r\n        const fractalBrownianString = `\r\n        float fbm(in vec2 st, in vec2 chaos) {\r\n            // Initial values\r\n            float value = 0.0;\r\n            float amplitude = .5;\r\n            float frequency = 0.;\r\n\r\n            // Loop of octaves\r\n            for (int i = 0; i < OCTAVES; i++) {\r\n                value += amplitude * cloudNoise(st, chaos);\r\n                st *= 2.0;\r\n                amplitude *= 0.5;\r\n            }\r\n            return value;\r\n        }\r\n\r\n        float fbm(in vec3 x, in vec3 chaos) {\r\n            // Initial values\r\n            float value = 0.0;\r\n            float amplitude = 0.5;\r\n            for (int i = 0; i < OCTAVES; ++i) {\r\n                value += amplitude * cloudNoise(x, chaos);\r\n                x = x * 2.0;\r\n                amplitude *= 0.5;\r\n            }\r\n            return value;\r\n        }`;\r\n\r\n        const fbmNewName = `fbm${this.octaves}`;\r\n        state._emitFunction(\"CloudBlockCode\", functionString, \"// CloudBlockCode\");\r\n        state._emitFunction(\r\n            \"CloudBlockCodeFBM\" + this.octaves,\r\n            fractalBrownianString.replace(/fbm/gi, fbmNewName).replace(/OCTAVES/gi, (this.octaves | 0).toString()),\r\n            \"// CloudBlockCode FBM\"\r\n        );\r\n\r\n        const localVariable = state._getFreeVariableName(\"st\");\r\n        const seedType = this.seed.connectedPoint?.type === NodeMaterialBlockConnectionPointTypes.Vector2 ? \"vec2\" : \"vec3\";\r\n\r\n        state.compilationString += `${seedType} ${localVariable} = ${this.seed.associatedVariableName};\\n`;\r\n        if (this.offsetX.isConnected) {\r\n            state.compilationString += `${localVariable}.x += 0.1 * ${this.offsetX.associatedVariableName};\\n`;\r\n        }\r\n        if (this.offsetY.isConnected) {\r\n            state.compilationString += `${localVariable}.y += 0.1 * ${this.offsetY.associatedVariableName};\\n`;\r\n        }\r\n        if (this.offsetZ.isConnected && seedType === \"vec3\") {\r\n            state.compilationString += `${localVariable}.z += 0.1 * ${this.offsetZ.associatedVariableName};\\n`;\r\n        }\r\n\r\n        let chaosValue = \"\";\r\n        if (this.chaos.isConnected) {\r\n            chaosValue = this.chaos.associatedVariableName;\r\n        } else {\r\n            chaosValue = this.seed.connectedPoint?.type === NodeMaterialBlockConnectionPointTypes.Vector2 ? \"vec2(0., 0.)\" : \"vec3(0., 0., 0.)\";\r\n        }\r\n\r\n        state.compilationString += this._declareOutput(this._outputs[0], state) + ` = ${fbmNewName}(${localVariable}, ${chaosValue});\\n`;\r\n\r\n        return this;\r\n    }\r\n\r\n    protected _dumpPropertiesCode() {\r\n        const codeString = super._dumpPropertiesCode() + `${this._codeVariableName}.octaves = ${this.octaves};\\n`;\r\n        return codeString;\r\n    }\r\n\r\n    public serialize(): any {\r\n        const serializationObject = super.serialize();\r\n\r\n        serializationObject.octaves = this.octaves;\r\n\r\n        return serializationObject;\r\n    }\r\n\r\n    public _deserialize(serializationObject: any, scene: Scene, rootUrl: string) {\r\n        super._deserialize(serializationObject, scene, rootUrl);\r\n\r\n        this.octaves = serializationObject.octaves;\r\n    }\r\n}\r\n\r\nRegisterClass(\"BABYLON.CloudBlock\", CloudBlock);\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}