{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.typed-array.to-reversed.js\";\nimport \"core-js/modules/es.typed-array.to-sorted.js\";\nimport \"core-js/modules/es.typed-array.with.js\";\nimport { Matrix } from \"../Maths/math.vector.js\";\nimport { VertexBuffer } from \"../Buffers/buffer.js\";\nimport { Texture } from \"../Materials/Textures/texture.js\";\nimport { MultiRenderTarget } from \"../Materials/Textures/multiRenderTarget.js\";\nimport { MaterialHelper } from \"../Materials/materialHelper.js\";\nimport { Color4 } from \"../Maths/math.color.js\";\nimport { _WarnImport } from \"../Misc/devTools.js\";\nimport { Material } from \"../Materials/material.js\";\nimport \"../Shaders/geometry.fragment.js\";\nimport \"../Shaders/geometry.vertex.js\";\nimport { MaterialFlags } from \"../Materials/materialFlags.js\";\nimport { addClipPlaneUniforms, bindClipPlane, prepareStringDefinesForClipPlanes } from \"../Materials/clipPlaneMaterialHelper.js\";\n/** list the uniforms used by the geometry renderer */\nconst uniforms = [\"world\", \"mBones\", \"viewProjection\", \"diffuseMatrix\", \"view\", \"previousWorld\", \"previousViewProjection\", \"mPreviousBones\", \"bumpMatrix\", \"reflectivityMatrix\", \"albedoMatrix\", \"reflectivityColor\", \"albedoColor\", \"metallic\", \"glossiness\", \"vTangentSpaceParams\", \"vBumpInfos\", \"morphTargetInfluences\", \"morphTargetTextureInfo\", \"morphTargetTextureIndices\"];\naddClipPlaneUniforms(uniforms);\n/**\n * This renderer is helpful to fill one of the render target with a geometry buffer.\n */\nexport class GeometryBufferRenderer {\n  /**\n   * @internal\n   * Sets up internal structures to share outputs with PrePassRenderer\n   * This method should only be called by the PrePassRenderer itself\n   */\n  _linkPrePassRenderer(prePassRenderer) {\n    this._linkedWithPrePass = true;\n    this._prePassRenderer = prePassRenderer;\n    if (this._multiRenderTarget) {\n      // prevents clearing of the RT since it's done by prepass\n      this._multiRenderTarget.onClearObservable.clear();\n      this._multiRenderTarget.onClearObservable.add(() => {\n        // pass\n      });\n    }\n  }\n  /**\n   * @internal\n   * Separates internal structures from PrePassRenderer so the geometry buffer can now operate by itself.\n   * This method should only be called by the PrePassRenderer itself\n   */\n  _unlinkPrePassRenderer() {\n    this._linkedWithPrePass = false;\n    this._createRenderTargets();\n  }\n  /**\n   * @internal\n   * Resets the geometry buffer layout\n   */\n  _resetLayout() {\n    this._enablePosition = false;\n    this._enableReflectivity = false;\n    this._enableVelocity = false;\n    this._attachmentsFromPrePass = [];\n  }\n  /**\n   * @internal\n   * Replaces a texture in the geometry buffer renderer\n   * Useful when linking textures of the prepass renderer\n   */\n  _forceTextureType(geometryBufferType, index) {\n    if (geometryBufferType === GeometryBufferRenderer.POSITION_TEXTURE_TYPE) {\n      this._positionIndex = index;\n      this._enablePosition = true;\n    } else if (geometryBufferType === GeometryBufferRenderer.VELOCITY_TEXTURE_TYPE) {\n      this._velocityIndex = index;\n      this._enableVelocity = true;\n    } else if (geometryBufferType === GeometryBufferRenderer.REFLECTIVITY_TEXTURE_TYPE) {\n      this._reflectivityIndex = index;\n      this._enableReflectivity = true;\n    } else if (geometryBufferType === GeometryBufferRenderer.DEPTH_TEXTURE_TYPE) {\n      this._depthIndex = index;\n    } else if (geometryBufferType === GeometryBufferRenderer.NORMAL_TEXTURE_TYPE) {\n      this._normalIndex = index;\n    }\n  }\n  /**\n   * @internal\n   * Sets texture attachments\n   * Useful when linking textures of the prepass renderer\n   */\n  _setAttachments(attachments) {\n    this._attachmentsFromPrePass = attachments;\n  }\n  /**\n   * @internal\n   * Replaces the first texture which is hard coded as a depth texture in the geometry buffer\n   * Useful when linking textures of the prepass renderer\n   */\n  _linkInternalTexture(internalTexture) {\n    this._multiRenderTarget.setInternalTexture(internalTexture, 0, false);\n  }\n  /**\n   * Gets the render list (meshes to be rendered) used in the G buffer.\n   */\n  get renderList() {\n    return this._multiRenderTarget.renderList;\n  }\n  /**\n   * Set the render list (meshes to be rendered) used in the G buffer.\n   */\n  set renderList(meshes) {\n    this._multiRenderTarget.renderList = meshes;\n  }\n  /**\n   * Gets whether or not G buffer are supported by the running hardware.\n   * This requires draw buffer supports\n   */\n  get isSupported() {\n    return this._multiRenderTarget.isSupported;\n  }\n  /**\n   * Returns the index of the given texture type in the G-Buffer textures array\n   * @param textureType The texture type constant. For example GeometryBufferRenderer.POSITION_TEXTURE_INDEX\n   * @returns the index of the given texture type in the G-Buffer textures array\n   */\n  getTextureIndex(textureType) {\n    switch (textureType) {\n      case GeometryBufferRenderer.POSITION_TEXTURE_TYPE:\n        return this._positionIndex;\n      case GeometryBufferRenderer.VELOCITY_TEXTURE_TYPE:\n        return this._velocityIndex;\n      case GeometryBufferRenderer.REFLECTIVITY_TEXTURE_TYPE:\n        return this._reflectivityIndex;\n      case GeometryBufferRenderer.DEPTH_TEXTURE_TYPE:\n        return this._linkedWithPrePass ? this._depthIndex : 0;\n      case GeometryBufferRenderer.NORMAL_TEXTURE_TYPE:\n        return this._linkedWithPrePass ? this._normalIndex : 1;\n      default:\n        return -1;\n    }\n  }\n  /**\n   * Gets a boolean indicating if objects positions are enabled for the G buffer.\n   */\n  get enablePosition() {\n    return this._enablePosition;\n  }\n  /**\n   * Sets whether or not objects positions are enabled for the G buffer.\n   */\n  set enablePosition(enable) {\n    this._enablePosition = enable;\n    // PrePass handles index and texture links\n    if (!this._linkedWithPrePass) {\n      this.dispose();\n      this._createRenderTargets();\n    }\n  }\n  /**\n   * Gets a boolean indicating if objects velocities are enabled for the G buffer.\n   */\n  get enableVelocity() {\n    return this._enableVelocity;\n  }\n  /**\n   * Sets whether or not objects velocities are enabled for the G buffer.\n   */\n  set enableVelocity(enable) {\n    this._enableVelocity = enable;\n    if (!enable) {\n      this._previousTransformationMatrices = {};\n    }\n    if (!this._linkedWithPrePass) {\n      this.dispose();\n      this._createRenderTargets();\n    }\n    this._scene.needsPreviousWorldMatrices = enable;\n  }\n  /**\n   * Gets a boolean indicating if objects reflectivity are enabled in the G buffer.\n   */\n  get enableReflectivity() {\n    return this._enableReflectivity;\n  }\n  /**\n   * Sets whether or not objects reflectivity are enabled for the G buffer.\n   * For Metallic-Roughness workflow with ORM texture, we assume that ORM texture is defined according to the default layout:\n   * pbr.useRoughnessFromMetallicTextureAlpha = false;\n   * pbr.useRoughnessFromMetallicTextureGreen = true;\n   * pbr.useMetallnessFromMetallicTextureBlue = true;\n   */\n  set enableReflectivity(enable) {\n    this._enableReflectivity = enable;\n    if (!this._linkedWithPrePass) {\n      this.dispose();\n      this._createRenderTargets();\n    }\n  }\n  /**\n   * Gets the scene associated with the buffer.\n   */\n  get scene() {\n    return this._scene;\n  }\n  /**\n   * Gets the ratio used by the buffer during its creation.\n   * How big is the buffer related to the main canvas.\n   */\n  get ratio() {\n    return this._ratio;\n  }\n  /**\n   * Creates a new G Buffer for the scene\n   * @param scene The scene the buffer belongs to\n   * @param ratio How big is the buffer related to the main canvas (default: 1)\n   * @param depthFormat Format of the depth texture (default: 15)\n   */\n  constructor(scene, ratio = 1, depthFormat = 15) {\n    /**\n     * Dictionary used to store the previous transformation matrices of each rendered mesh\n     * in order to compute objects velocities when enableVelocity is set to \"true\"\n     * @internal\n     */\n    this._previousTransformationMatrices = {};\n    /**\n     * Dictionary used to store the previous bones transformation matrices of each rendered mesh\n     * in order to compute objects velocities when enableVelocity is set to \"true\"\n     * @internal\n     */\n    this._previousBonesTransformationMatrices = {};\n    /**\n     * Array used to store the ignored skinned meshes while computing velocity map (typically used by the motion blur post-process).\n     * Avoids computing bones velocities and computes only mesh's velocity itself (position, rotation, scaling).\n     */\n    this.excludedSkinnedMeshesFromVelocity = [];\n    /** Gets or sets a boolean indicating if transparent meshes should be rendered */\n    this.renderTransparentMeshes = true;\n    /**\n     * Gets or sets a boolean indicating if normals should be generated in world space (default: false, meaning normals are generated in view space)\n     */\n    this.generateNormalsInWorldSpace = false;\n    this._resizeObserver = null;\n    this._enablePosition = false;\n    this._enableVelocity = false;\n    this._enableReflectivity = false;\n    this._clearColor = new Color4(0, 0, 0, 0);\n    this._clearDepthColor = new Color4(1e8, 0, 0, 1); // \"infinity\" value - depth in the depth texture is view.z, not a 0..1 value!\n    this._positionIndex = -1;\n    this._velocityIndex = -1;\n    this._reflectivityIndex = -1;\n    this._depthIndex = -1;\n    this._normalIndex = -1;\n    this._linkedWithPrePass = false;\n    /**\n     * If set to true (default: false), the depth texture will be cleared with the depth value corresponding to the far plane (1 in normal mode, 0 in reverse depth buffer mode)\n     * If set to false, the depth texture is always cleared with 0.\n     */\n    this.useSpecificClearForDepthTexture = false;\n    this._scene = scene;\n    this._ratio = ratio;\n    this._useUbo = scene.getEngine().supportsUniformBuffers;\n    this._depthFormat = depthFormat;\n    GeometryBufferRenderer._SceneComponentInitialization(this._scene);\n    // Render target\n    this._createRenderTargets();\n  }\n  /**\n   * Checks whether everything is ready to render a submesh to the G buffer.\n   * @param subMesh the submesh to check readiness for\n   * @param useInstances is the mesh drawn using instance or not\n   * @returns true if ready otherwise false\n   */\n  isReady(subMesh, useInstances) {\n    const material = subMesh.getMaterial();\n    if (material && material.disableDepthWrite) {\n      return false;\n    }\n    const defines = [];\n    const attribs = [VertexBuffer.PositionKind, VertexBuffer.NormalKind];\n    const mesh = subMesh.getMesh();\n    // Alpha test\n    if (material) {\n      let needUv = false;\n      if (material.needAlphaTesting() && material.getAlphaTestTexture()) {\n        defines.push(\"#define ALPHATEST\");\n        defines.push(`#define ALPHATEST_UV${material.getAlphaTestTexture().coordinatesIndex + 1}`);\n        needUv = true;\n      }\n      if (material.bumpTexture && MaterialFlags.BumpTextureEnabled) {\n        defines.push(\"#define BUMP\");\n        defines.push(`#define BUMP_UV${material.bumpTexture.coordinatesIndex + 1}`);\n        needUv = true;\n      }\n      if (this._enableReflectivity) {\n        let metallicWorkflow = false;\n        // for PBR materials: cf. https://doc.babylonjs.com/features/featuresDeepDive/materials/using/masterPBR\n        if (material.getClassName() === \"PBRMetallicRoughnessMaterial\") {\n          // if it is a PBR material in MetallicRoughness Mode:\n          if (material.metallicRoughnessTexture !== null) {\n            defines.push(\"#define ORMTEXTURE\");\n            defines.push(`#define REFLECTIVITY_UV${material.metallicRoughnessTexture.coordinatesIndex + 1}`);\n            defines.push(\"#define METALLICWORKFLOW\");\n            needUv = true;\n            metallicWorkflow = true;\n          }\n          if (material.metallic !== null) {\n            defines.push(\"#define METALLIC\");\n            defines.push(\"#define METALLICWORKFLOW\");\n            metallicWorkflow = true;\n          }\n          if (material.roughness !== null) {\n            defines.push(\"#define ROUGHNESS\");\n            defines.push(\"#define METALLICWORKFLOW\");\n            metallicWorkflow = true;\n          }\n          if (metallicWorkflow) {\n            if (material.baseTexture !== null) {\n              defines.push(\"#define ALBEDOTEXTURE\");\n              defines.push(`#define ALBEDO_UV${material.baseTexture.coordinatesIndex + 1}`);\n              if (material.baseTexture.gammaSpace) {\n                defines.push(\"#define GAMMAALBEDO\");\n              }\n              needUv = true;\n            }\n            if (material.baseColor !== null) {\n              defines.push(\"#define ALBEDOCOLOR\");\n            }\n          }\n        } else if (material.getClassName() === \"PBRSpecularGlossinessMaterial\") {\n          // if it is a PBR material in Specular/Glossiness Mode:\n          if (material.specularGlossinessTexture !== null) {\n            defines.push(\"#define SPECULARGLOSSINESSTEXTURE\");\n            defines.push(`#define REFLECTIVITY_UV${material.specularGlossinessTexture.coordinatesIndex + 1}`);\n            needUv = true;\n            if (material.specularGlossinessTexture.gammaSpace) {\n              defines.push(\"#define GAMMAREFLECTIVITYTEXTURE\");\n            }\n          } else {\n            if (material.specularColor !== null) {\n              defines.push(\"#define REFLECTIVITYCOLOR\");\n            }\n          }\n          if (material.glossiness !== null) {\n            defines.push(\"#define GLOSSINESS\");\n          }\n        } else if (material.getClassName() === \"PBRMaterial\") {\n          // if it is the bigger PBRMaterial\n          if (material.metallicTexture !== null) {\n            defines.push(\"#define ORMTEXTURE\");\n            defines.push(`#define REFLECTIVITY_UV${material.metallicTexture.coordinatesIndex + 1}`);\n            defines.push(\"#define METALLICWORKFLOW\");\n            needUv = true;\n            metallicWorkflow = true;\n          }\n          if (material.metallic !== null) {\n            defines.push(\"#define METALLIC\");\n            defines.push(\"#define METALLICWORKFLOW\");\n            metallicWorkflow = true;\n          }\n          if (material.roughness !== null) {\n            defines.push(\"#define ROUGHNESS\");\n            defines.push(\"#define METALLICWORKFLOW\");\n            metallicWorkflow = true;\n          }\n          if (metallicWorkflow) {\n            if (material.albedoTexture !== null) {\n              defines.push(\"#define ALBEDOTEXTURE\");\n              defines.push(`#define ALBEDO_UV${material.albedoTexture.coordinatesIndex + 1}`);\n              if (material.albedoTexture.gammaSpace) {\n                defines.push(\"#define GAMMAALBEDO\");\n              }\n              needUv = true;\n            }\n            if (material.albedoColor !== null) {\n              defines.push(\"#define ALBEDOCOLOR\");\n            }\n          } else {\n            // SpecularGlossiness Model\n            if (material.reflectivityTexture !== null) {\n              defines.push(\"#define SPECULARGLOSSINESSTEXTURE\");\n              defines.push(`#define REFLECTIVITY_UV${material.reflectivityTexture.coordinatesIndex + 1}`);\n              if (material.reflectivityTexture.gammaSpace) {\n                defines.push(\"#define GAMMAREFLECTIVITYTEXTURE\");\n              }\n              needUv = true;\n            } else if (material.reflectivityColor !== null) {\n              defines.push(\"#define REFLECTIVITYCOLOR\");\n            }\n            if (material.microSurface !== null) {\n              defines.push(\"#define GLOSSINESS\");\n            }\n          }\n        } else if (material.getClassName() === \"StandardMaterial\") {\n          // if StandardMaterial:\n          if (material.specularTexture !== null) {\n            defines.push(\"#define REFLECTIVITYTEXTURE\");\n            defines.push(`#define REFLECTIVITY_UV${material.specularTexture.coordinatesIndex + 1}`);\n            if (material.specularTexture.gammaSpace) {\n              defines.push(\"#define GAMMAREFLECTIVITYTEXTURE\");\n            }\n            needUv = true;\n          }\n          if (material.specularColor !== null) {\n            defines.push(\"#define REFLECTIVITYCOLOR\");\n          }\n        }\n      }\n      if (needUv) {\n        defines.push(\"#define NEED_UV\");\n        if (mesh.isVerticesDataPresent(VertexBuffer.UVKind)) {\n          attribs.push(VertexBuffer.UVKind);\n          defines.push(\"#define UV1\");\n        }\n        if (mesh.isVerticesDataPresent(VertexBuffer.UV2Kind)) {\n          attribs.push(VertexBuffer.UV2Kind);\n          defines.push(\"#define UV2\");\n        }\n      }\n    }\n    // PrePass\n    if (this._linkedWithPrePass) {\n      defines.push(\"#define PREPASS\");\n      if (this._depthIndex !== -1) {\n        defines.push(\"#define DEPTH_INDEX \" + this._depthIndex);\n        defines.push(\"#define PREPASS_DEPTH\");\n      }\n      if (this._normalIndex !== -1) {\n        defines.push(\"#define NORMAL_INDEX \" + this._normalIndex);\n        defines.push(\"#define PREPASS_NORMAL\");\n      }\n    }\n    // Buffers\n    if (this._enablePosition) {\n      defines.push(\"#define POSITION\");\n      defines.push(\"#define POSITION_INDEX \" + this._positionIndex);\n    }\n    if (this._enableVelocity) {\n      defines.push(\"#define VELOCITY\");\n      defines.push(\"#define VELOCITY_INDEX \" + this._velocityIndex);\n      if (this.excludedSkinnedMeshesFromVelocity.indexOf(mesh) === -1) {\n        defines.push(\"#define BONES_VELOCITY_ENABLED\");\n      }\n    }\n    if (this._enableReflectivity) {\n      defines.push(\"#define REFLECTIVITY\");\n      defines.push(\"#define REFLECTIVITY_INDEX \" + this._reflectivityIndex);\n    }\n    if (this.generateNormalsInWorldSpace) {\n      defines.push(\"#define NORMAL_WORLDSPACE\");\n    }\n    // Bones\n    if (mesh.useBones && mesh.computeBonesUsingShaders) {\n      attribs.push(VertexBuffer.MatricesIndicesKind);\n      attribs.push(VertexBuffer.MatricesWeightsKind);\n      if (mesh.numBoneInfluencers > 4) {\n        attribs.push(VertexBuffer.MatricesIndicesExtraKind);\n        attribs.push(VertexBuffer.MatricesWeightsExtraKind);\n      }\n      defines.push(\"#define NUM_BONE_INFLUENCERS \" + mesh.numBoneInfluencers);\n      defines.push(\"#define BonesPerMesh \" + (mesh.skeleton ? mesh.skeleton.bones.length + 1 : 0));\n    } else {\n      defines.push(\"#define NUM_BONE_INFLUENCERS 0\");\n    }\n    // Morph targets\n    const morphTargetManager = mesh.morphTargetManager;\n    let numMorphInfluencers = 0;\n    if (morphTargetManager) {\n      if (morphTargetManager.numInfluencers > 0) {\n        numMorphInfluencers = morphTargetManager.numInfluencers;\n        defines.push(\"#define MORPHTARGETS\");\n        defines.push(\"#define NUM_MORPH_INFLUENCERS \" + numMorphInfluencers);\n        if (morphTargetManager.isUsingTextureForTargets) {\n          defines.push(\"#define MORPHTARGETS_TEXTURE\");\n        }\n        MaterialHelper.PrepareAttributesForMorphTargetsInfluencers(attribs, mesh, numMorphInfluencers);\n      }\n    }\n    // Instances\n    if (useInstances) {\n      defines.push(\"#define INSTANCES\");\n      MaterialHelper.PushAttributesForInstances(attribs, this._enableVelocity);\n      if (subMesh.getRenderingMesh().hasThinInstances) {\n        defines.push(\"#define THIN_INSTANCES\");\n      }\n    }\n    // Setup textures count\n    if (this._linkedWithPrePass) {\n      defines.push(\"#define RENDER_TARGET_COUNT \" + this._attachmentsFromPrePass.length);\n    } else {\n      defines.push(\"#define RENDER_TARGET_COUNT \" + this._multiRenderTarget.textures.length);\n    }\n    prepareStringDefinesForClipPlanes(material, this._scene, defines);\n    // Get correct effect\n    const engine = this._scene.getEngine();\n    const drawWrapper = subMesh._getDrawWrapper(undefined, true);\n    const cachedDefines = drawWrapper.defines;\n    const join = defines.join(\"\\n\");\n    if (cachedDefines !== join) {\n      drawWrapper.setEffect(engine.createEffect(\"geometry\", {\n        attributes: attribs,\n        uniformsNames: uniforms,\n        samplers: [\"diffuseSampler\", \"bumpSampler\", \"reflectivitySampler\", \"albedoSampler\", \"morphTargets\"],\n        defines: join,\n        onCompiled: null,\n        fallbacks: null,\n        onError: null,\n        uniformBuffersNames: [\"Scene\"],\n        indexParameters: {\n          buffersCount: this._multiRenderTarget.textures.length - 1,\n          maxSimultaneousMorphTargets: numMorphInfluencers\n        }\n      }, engine), join);\n    }\n    return drawWrapper.effect.isReady();\n  }\n  /**\n   * Gets the current underlying G Buffer.\n   * @returns the buffer\n   */\n  getGBuffer() {\n    return this._multiRenderTarget;\n  }\n  /**\n   * Gets the number of samples used to render the buffer (anti aliasing).\n   */\n  get samples() {\n    return this._multiRenderTarget.samples;\n  }\n  /**\n   * Sets the number of samples used to render the buffer (anti aliasing).\n   */\n  set samples(value) {\n    this._multiRenderTarget.samples = value;\n  }\n  /**\n   * Disposes the renderer and frees up associated resources.\n   */\n  dispose() {\n    if (this._resizeObserver) {\n      const engine = this._scene.getEngine();\n      engine.onResizeObservable.remove(this._resizeObserver);\n      this._resizeObserver = null;\n    }\n    this.getGBuffer().dispose();\n  }\n  _assignRenderTargetIndices() {\n    const textureNames = [];\n    let count = 2;\n    textureNames.push(\"gBuffer_Depth\", \"gBuffer_Normal\");\n    if (this._enablePosition) {\n      this._positionIndex = count;\n      count++;\n      textureNames.push(\"gBuffer_Position\");\n    }\n    if (this._enableVelocity) {\n      this._velocityIndex = count;\n      count++;\n      textureNames.push(\"gBuffer_Velocity\");\n    }\n    if (this._enableReflectivity) {\n      this._reflectivityIndex = count;\n      count++;\n      textureNames.push(\"gBuffer_Reflectivity\");\n    }\n    return [count, textureNames];\n  }\n  _createRenderTargets() {\n    const engine = this._scene.getEngine();\n    const [count, textureNames] = this._assignRenderTargetIndices();\n    let type = 0;\n    if (engine._caps.textureFloat && engine._caps.textureFloatLinearFiltering) {\n      type = 1;\n    } else if (engine._caps.textureHalfFloat && engine._caps.textureHalfFloatLinearFiltering) {\n      type = 2;\n    }\n    this._multiRenderTarget = new MultiRenderTarget(\"gBuffer\", {\n      width: engine.getRenderWidth() * this._ratio,\n      height: engine.getRenderHeight() * this._ratio\n    }, count, this._scene, {\n      generateMipMaps: false,\n      generateDepthTexture: true,\n      defaultType: type,\n      depthTextureFormat: this._depthFormat\n    }, textureNames.concat(\"gBuffer_DepthBuffer\"));\n    if (!this.isSupported) {\n      return;\n    }\n    this._multiRenderTarget.wrapU = Texture.CLAMP_ADDRESSMODE;\n    this._multiRenderTarget.wrapV = Texture.CLAMP_ADDRESSMODE;\n    this._multiRenderTarget.refreshRate = 1;\n    this._multiRenderTarget.renderParticles = false;\n    this._multiRenderTarget.renderList = null;\n    // Depth is always the first texture in the geometry buffer renderer!\n    const layoutAttachmentsAll = [true];\n    const layoutAttachmentsAllButDepth = [false];\n    const layoutAttachmentsDepthOnly = [true];\n    for (let i = 1; i < count; ++i) {\n      layoutAttachmentsAll.push(true);\n      layoutAttachmentsDepthOnly.push(false);\n      layoutAttachmentsAllButDepth.push(true);\n    }\n    const attachmentsAll = engine.buildTextureLayout(layoutAttachmentsAll);\n    const attachmentsAllButDepth = engine.buildTextureLayout(layoutAttachmentsAllButDepth);\n    const attachmentsDepthOnly = engine.buildTextureLayout(layoutAttachmentsDepthOnly);\n    this._multiRenderTarget.onClearObservable.add(engine => {\n      engine.bindAttachments(this.useSpecificClearForDepthTexture ? attachmentsAllButDepth : attachmentsAll);\n      engine.clear(this._clearColor, true, true, true);\n      if (this.useSpecificClearForDepthTexture) {\n        engine.bindAttachments(attachmentsDepthOnly);\n        engine.clear(this._clearDepthColor, true, true, true);\n      }\n      engine.bindAttachments(attachmentsAll);\n    });\n    this._resizeObserver = engine.onResizeObservable.add(() => {\n      if (this._multiRenderTarget) {\n        this._multiRenderTarget.resize({\n          width: engine.getRenderWidth() * this._ratio,\n          height: engine.getRenderHeight() * this._ratio\n        });\n      }\n    });\n    // Custom render function\n    const renderSubMesh = subMesh => {\n      const renderingMesh = subMesh.getRenderingMesh();\n      const effectiveMesh = subMesh.getEffectiveMesh();\n      const scene = this._scene;\n      const engine = scene.getEngine();\n      const material = subMesh.getMaterial();\n      if (!material) {\n        return;\n      }\n      effectiveMesh._internalAbstractMeshDataInfo._isActiveIntermediate = false;\n      // Velocity\n      if (this._enableVelocity && !this._previousTransformationMatrices[effectiveMesh.uniqueId]) {\n        this._previousTransformationMatrices[effectiveMesh.uniqueId] = {\n          world: Matrix.Identity(),\n          viewProjection: scene.getTransformMatrix()\n        };\n        if (renderingMesh.skeleton) {\n          const bonesTransformations = renderingMesh.skeleton.getTransformMatrices(renderingMesh);\n          this._previousBonesTransformationMatrices[renderingMesh.uniqueId] = this._copyBonesTransformationMatrices(bonesTransformations, new Float32Array(bonesTransformations.length));\n        }\n      }\n      // Managing instances\n      const batch = renderingMesh._getInstancesRenderList(subMesh._id, !!subMesh.getReplacementMesh());\n      if (batch.mustReturn) {\n        return;\n      }\n      const hardwareInstancedRendering = engine.getCaps().instancedArrays && (batch.visibleInstances[subMesh._id] !== null || renderingMesh.hasThinInstances);\n      const world = effectiveMesh.getWorldMatrix();\n      if (this.isReady(subMesh, hardwareInstancedRendering)) {\n        const drawWrapper = subMesh._getDrawWrapper();\n        if (!drawWrapper) {\n          return;\n        }\n        const effect = drawWrapper.effect;\n        engine.enableEffect(drawWrapper);\n        if (!hardwareInstancedRendering) {\n          renderingMesh._bind(subMesh, effect, material.fillMode);\n        }\n        if (!this._useUbo) {\n          effect.setMatrix(\"viewProjection\", scene.getTransformMatrix());\n          effect.setMatrix(\"view\", scene.getViewMatrix());\n        } else {\n          MaterialHelper.BindSceneUniformBuffer(effect, this._scene.getSceneUniformBuffer());\n          this._scene.finalizeSceneUbo();\n        }\n        let sideOrientation;\n        const instanceDataStorage = renderingMesh._instanceDataStorage;\n        if (!instanceDataStorage.isFrozen && (material.backFaceCulling || renderingMesh.overrideMaterialSideOrientation !== null)) {\n          const mainDeterminant = effectiveMesh._getWorldMatrixDeterminant();\n          sideOrientation = renderingMesh.overrideMaterialSideOrientation;\n          if (sideOrientation === null) {\n            sideOrientation = material.sideOrientation;\n          }\n          if (mainDeterminant < 0) {\n            sideOrientation = sideOrientation === Material.ClockWiseSideOrientation ? Material.CounterClockWiseSideOrientation : Material.ClockWiseSideOrientation;\n          }\n        } else {\n          sideOrientation = instanceDataStorage.sideOrientation;\n        }\n        material._preBind(drawWrapper, sideOrientation);\n        // Alpha test\n        if (material.needAlphaTesting()) {\n          const alphaTexture = material.getAlphaTestTexture();\n          if (alphaTexture) {\n            effect.setTexture(\"diffuseSampler\", alphaTexture);\n            effect.setMatrix(\"diffuseMatrix\", alphaTexture.getTextureMatrix());\n          }\n        }\n        // Bump\n        if (material.bumpTexture && scene.getEngine().getCaps().standardDerivatives && MaterialFlags.BumpTextureEnabled) {\n          effect.setFloat3(\"vBumpInfos\", material.bumpTexture.coordinatesIndex, 1.0 / material.bumpTexture.level, material.parallaxScaleBias);\n          effect.setMatrix(\"bumpMatrix\", material.bumpTexture.getTextureMatrix());\n          effect.setTexture(\"bumpSampler\", material.bumpTexture);\n          effect.setFloat2(\"vTangentSpaceParams\", material.invertNormalMapX ? -1.0 : 1.0, material.invertNormalMapY ? -1.0 : 1.0);\n        }\n        // Reflectivity\n        if (this._enableReflectivity) {\n          // for PBR materials: cf. https://doc.babylonjs.com/features/featuresDeepDive/materials/using/masterPBR\n          if (material.getClassName() === \"PBRMetallicRoughnessMaterial\") {\n            // if it is a PBR material in MetallicRoughness Mode:\n            if (material.metallicRoughnessTexture !== null) {\n              effect.setTexture(\"reflectivitySampler\", material.metallicRoughnessTexture);\n              effect.setMatrix(\"reflectivityMatrix\", material.metallicRoughnessTexture.getTextureMatrix());\n            }\n            if (material.metallic !== null) {\n              effect.setFloat(\"metallic\", material.metallic);\n            }\n            if (material.roughness !== null) {\n              effect.setFloat(\"glossiness\", 1.0 - material.roughness);\n            }\n            if (material.baseTexture !== null) {\n              effect.setTexture(\"albedoSampler\", material.baseTexture);\n              effect.setMatrix(\"albedoMatrix\", material.baseTexture.getTextureMatrix());\n            }\n            if (material.baseColor !== null) {\n              effect.setColor3(\"albedoColor\", material.baseColor);\n            }\n          } else if (material.getClassName() === \"PBRSpecularGlossinessMaterial\") {\n            // if it is a PBR material in Specular/Glossiness Mode:\n            if (material.specularGlossinessTexture !== null) {\n              effect.setTexture(\"reflectivitySampler\", material.specularGlossinessTexture);\n              effect.setMatrix(\"reflectivityMatrix\", material.specularGlossinessTexture.getTextureMatrix());\n            } else {\n              if (material.specularColor !== null) {\n                effect.setColor3(\"reflectivityColor\", material.specularColor);\n              }\n            }\n            if (material.glossiness !== null) {\n              effect.setFloat(\"glossiness\", material.glossiness);\n            }\n          } else if (material.getClassName() === \"PBRMaterial\") {\n            // if it is the bigger PBRMaterial\n            if (material.metallicTexture !== null) {\n              effect.setTexture(\"reflectivitySampler\", material.metallicTexture);\n              effect.setMatrix(\"reflectivityMatrix\", material.metallicTexture.getTextureMatrix());\n            }\n            if (material.metallic !== null) {\n              effect.setFloat(\"metallic\", material.metallic);\n            }\n            if (material.roughness !== null) {\n              effect.setFloat(\"glossiness\", 1.0 - material.roughness);\n            }\n            if (material.roughness !== null || material.metallic !== null || material.metallicTexture !== null) {\n              // MetallicRoughness Model\n              if (material.albedoTexture !== null) {\n                effect.setTexture(\"albedoSampler\", material.albedoTexture);\n                effect.setMatrix(\"albedoMatrix\", material.albedoTexture.getTextureMatrix());\n              }\n              if (material.albedoColor !== null) {\n                effect.setColor3(\"albedoColor\", material.albedoColor);\n              }\n            } else {\n              // SpecularGlossiness Model\n              if (material.reflectivityTexture !== null) {\n                effect.setTexture(\"reflectivitySampler\", material.reflectivityTexture);\n                effect.setMatrix(\"reflectivityMatrix\", material.reflectivityTexture.getTextureMatrix());\n              } else if (material.reflectivityColor !== null) {\n                effect.setColor3(\"reflectivityColor\", material.reflectivityColor);\n              }\n              if (material.microSurface !== null) {\n                effect.setFloat(\"glossiness\", material.microSurface);\n              }\n            }\n          } else if (material.getClassName() === \"StandardMaterial\") {\n            // if StandardMaterial:\n            if (material.specularTexture !== null) {\n              effect.setTexture(\"reflectivitySampler\", material.specularTexture);\n              effect.setMatrix(\"reflectivityMatrix\", material.specularTexture.getTextureMatrix());\n            }\n            if (material.specularColor !== null) {\n              effect.setColor3(\"reflectivityColor\", material.specularColor);\n            }\n          }\n        }\n        // Clip plane\n        bindClipPlane(effect, material, this._scene);\n        // Bones\n        if (renderingMesh.useBones && renderingMesh.computeBonesUsingShaders && renderingMesh.skeleton) {\n          effect.setMatrices(\"mBones\", renderingMesh.skeleton.getTransformMatrices(renderingMesh));\n          if (this._enableVelocity) {\n            effect.setMatrices(\"mPreviousBones\", this._previousBonesTransformationMatrices[renderingMesh.uniqueId]);\n          }\n        }\n        // Morph targets\n        MaterialHelper.BindMorphTargetParameters(renderingMesh, effect);\n        if (renderingMesh.morphTargetManager && renderingMesh.morphTargetManager.isUsingTextureForTargets) {\n          renderingMesh.morphTargetManager._bind(effect);\n        }\n        // Velocity\n        if (this._enableVelocity) {\n          effect.setMatrix(\"previousWorld\", this._previousTransformationMatrices[effectiveMesh.uniqueId].world);\n          effect.setMatrix(\"previousViewProjection\", this._previousTransformationMatrices[effectiveMesh.uniqueId].viewProjection);\n        }\n        if (hardwareInstancedRendering && renderingMesh.hasThinInstances) {\n          effect.setMatrix(\"world\", world);\n        }\n        // Draw\n        renderingMesh._processRendering(effectiveMesh, subMesh, effect, material.fillMode, batch, hardwareInstancedRendering, (isInstance, w) => {\n          if (!isInstance) {\n            effect.setMatrix(\"world\", w);\n          }\n        });\n      }\n      // Velocity\n      if (this._enableVelocity) {\n        this._previousTransformationMatrices[effectiveMesh.uniqueId].world = world.clone();\n        this._previousTransformationMatrices[effectiveMesh.uniqueId].viewProjection = this._scene.getTransformMatrix().clone();\n        if (renderingMesh.skeleton) {\n          this._copyBonesTransformationMatrices(renderingMesh.skeleton.getTransformMatrices(renderingMesh), this._previousBonesTransformationMatrices[effectiveMesh.uniqueId]);\n        }\n      }\n    };\n    this._multiRenderTarget.customIsReadyFunction = (mesh, refreshRate, preWarm) => {\n      if ((preWarm || refreshRate === 0) && mesh.subMeshes) {\n        for (let i = 0; i < mesh.subMeshes.length; ++i) {\n          const subMesh = mesh.subMeshes[i];\n          const material = subMesh.getMaterial();\n          const renderingMesh = subMesh.getRenderingMesh();\n          if (!material) {\n            continue;\n          }\n          const batch = renderingMesh._getInstancesRenderList(subMesh._id, !!subMesh.getReplacementMesh());\n          const hardwareInstancedRendering = engine.getCaps().instancedArrays && (batch.visibleInstances[subMesh._id] !== null || renderingMesh.hasThinInstances);\n          if (!this.isReady(subMesh, hardwareInstancedRendering)) {\n            return false;\n          }\n        }\n      }\n      return true;\n    };\n    this._multiRenderTarget.customRenderFunction = (opaqueSubMeshes, alphaTestSubMeshes, transparentSubMeshes, depthOnlySubMeshes) => {\n      let index;\n      if (this._linkedWithPrePass) {\n        if (!this._prePassRenderer.enabled) {\n          return;\n        }\n        this._scene.getEngine().bindAttachments(this._attachmentsFromPrePass);\n      }\n      if (depthOnlySubMeshes.length) {\n        engine.setColorWrite(false);\n        for (index = 0; index < depthOnlySubMeshes.length; index++) {\n          renderSubMesh(depthOnlySubMeshes.data[index]);\n        }\n        engine.setColorWrite(true);\n      }\n      for (index = 0; index < opaqueSubMeshes.length; index++) {\n        renderSubMesh(opaqueSubMeshes.data[index]);\n      }\n      engine.setDepthWrite(false);\n      for (index = 0; index < alphaTestSubMeshes.length; index++) {\n        renderSubMesh(alphaTestSubMeshes.data[index]);\n      }\n      if (this.renderTransparentMeshes) {\n        for (index = 0; index < transparentSubMeshes.length; index++) {\n          renderSubMesh(transparentSubMeshes.data[index]);\n        }\n      }\n      engine.setDepthWrite(true);\n    };\n  }\n  // Copies the bones transformation matrices into the target array and returns the target's reference\n  _copyBonesTransformationMatrices(source, target) {\n    for (let i = 0; i < source.length; i++) {\n      target[i] = source[i];\n    }\n    return target;\n  }\n}\n/**\n * Constant used to retrieve the depth texture index in the G-Buffer textures array\n * using getIndex(GeometryBufferRenderer.DEPTH_TEXTURE_INDEX)\n */\nGeometryBufferRenderer.DEPTH_TEXTURE_TYPE = 0;\n/**\n * Constant used to retrieve the normal texture index in the G-Buffer textures array\n * using getIndex(GeometryBufferRenderer.NORMAL_TEXTURE_INDEX)\n */\nGeometryBufferRenderer.NORMAL_TEXTURE_TYPE = 1;\n/**\n * Constant used to retrieve the position texture index in the G-Buffer textures array\n * using getIndex(GeometryBufferRenderer.POSITION_TEXTURE_INDEX)\n */\nGeometryBufferRenderer.POSITION_TEXTURE_TYPE = 2;\n/**\n * Constant used to retrieve the velocity texture index in the G-Buffer textures array\n * using getIndex(GeometryBufferRenderer.VELOCITY_TEXTURE_INDEX)\n */\nGeometryBufferRenderer.VELOCITY_TEXTURE_TYPE = 3;\n/**\n * Constant used to retrieve the reflectivity texture index in the G-Buffer textures array\n * using the getIndex(GeometryBufferRenderer.REFLECTIVITY_TEXTURE_TYPE)\n */\nGeometryBufferRenderer.REFLECTIVITY_TEXTURE_TYPE = 4;\n/**\n * @internal\n */\nGeometryBufferRenderer._SceneComponentInitialization = _ => {\n  throw _WarnImport(\"GeometryBufferRendererSceneComponent\");\n};","map":{"version":3,"names":["Matrix","VertexBuffer","Texture","MultiRenderTarget","MaterialHelper","Color4","_WarnImport","Material","MaterialFlags","addClipPlaneUniforms","bindClipPlane","prepareStringDefinesForClipPlanes","uniforms","GeometryBufferRenderer","_linkPrePassRenderer","prePassRenderer","_linkedWithPrePass","_prePassRenderer","_multiRenderTarget","onClearObservable","clear","add","_unlinkPrePassRenderer","_createRenderTargets","_resetLayout","_enablePosition","_enableReflectivity","_enableVelocity","_attachmentsFromPrePass","_forceTextureType","geometryBufferType","index","POSITION_TEXTURE_TYPE","_positionIndex","VELOCITY_TEXTURE_TYPE","_velocityIndex","REFLECTIVITY_TEXTURE_TYPE","_reflectivityIndex","DEPTH_TEXTURE_TYPE","_depthIndex","NORMAL_TEXTURE_TYPE","_normalIndex","_setAttachments","attachments","_linkInternalTexture","internalTexture","setInternalTexture","renderList","meshes","isSupported","getTextureIndex","textureType","enablePosition","enable","dispose","enableVelocity","_previousTransformationMatrices","_scene","needsPreviousWorldMatrices","enableReflectivity","scene","ratio","_ratio","constructor","depthFormat","_previousBonesTransformationMatrices","excludedSkinnedMeshesFromVelocity","renderTransparentMeshes","generateNormalsInWorldSpace","_resizeObserver","_clearColor","_clearDepthColor","useSpecificClearForDepthTexture","_useUbo","getEngine","supportsUniformBuffers","_depthFormat","_SceneComponentInitialization","isReady","subMesh","useInstances","material","getMaterial","disableDepthWrite","defines","attribs","PositionKind","NormalKind","mesh","getMesh","needUv","needAlphaTesting","getAlphaTestTexture","push","coordinatesIndex","bumpTexture","BumpTextureEnabled","metallicWorkflow","getClassName","metallicRoughnessTexture","metallic","roughness","baseTexture","gammaSpace","baseColor","specularGlossinessTexture","specularColor","glossiness","metallicTexture","albedoTexture","albedoColor","reflectivityTexture","reflectivityColor","microSurface","specularTexture","isVerticesDataPresent","UVKind","UV2Kind","indexOf","useBones","computeBonesUsingShaders","MatricesIndicesKind","MatricesWeightsKind","numBoneInfluencers","MatricesIndicesExtraKind","MatricesWeightsExtraKind","skeleton","bones","length","morphTargetManager","numMorphInfluencers","numInfluencers","isUsingTextureForTargets","PrepareAttributesForMorphTargetsInfluencers","PushAttributesForInstances","getRenderingMesh","hasThinInstances","textures","engine","drawWrapper","_getDrawWrapper","undefined","cachedDefines","join","setEffect","createEffect","attributes","uniformsNames","samplers","onCompiled","fallbacks","onError","uniformBuffersNames","indexParameters","buffersCount","maxSimultaneousMorphTargets","effect","getGBuffer","samples","value","onResizeObservable","remove","_assignRenderTargetIndices","textureNames","count","type","_caps","textureFloat","textureFloatLinearFiltering","textureHalfFloat","textureHalfFloatLinearFiltering","width","getRenderWidth","height","getRenderHeight","generateMipMaps","generateDepthTexture","defaultType","depthTextureFormat","concat","wrapU","CLAMP_ADDRESSMODE","wrapV","refreshRate","renderParticles","layoutAttachmentsAll","layoutAttachmentsAllButDepth","layoutAttachmentsDepthOnly","i","attachmentsAll","buildTextureLayout","attachmentsAllButDepth","attachmentsDepthOnly","bindAttachments","resize","renderSubMesh","renderingMesh","effectiveMesh","getEffectiveMesh","_internalAbstractMeshDataInfo","_isActiveIntermediate","uniqueId","world","Identity","viewProjection","getTransformMatrix","bonesTransformations","getTransformMatrices","_copyBonesTransformationMatrices","Float32Array","batch","_getInstancesRenderList","_id","getReplacementMesh","mustReturn","hardwareInstancedRendering","getCaps","instancedArrays","visibleInstances","getWorldMatrix","enableEffect","_bind","fillMode","setMatrix","getViewMatrix","BindSceneUniformBuffer","getSceneUniformBuffer","finalizeSceneUbo","sideOrientation","instanceDataStorage","_instanceDataStorage","isFrozen","backFaceCulling","overrideMaterialSideOrientation","mainDeterminant","_getWorldMatrixDeterminant","ClockWiseSideOrientation","CounterClockWiseSideOrientation","_preBind","alphaTexture","setTexture","getTextureMatrix","standardDerivatives","setFloat3","level","parallaxScaleBias","setFloat2","invertNormalMapX","invertNormalMapY","setFloat","setColor3","setMatrices","BindMorphTargetParameters","_processRendering","isInstance","w","clone","customIsReadyFunction","preWarm","subMeshes","customRenderFunction","opaqueSubMeshes","alphaTestSubMeshes","transparentSubMeshes","depthOnlySubMeshes","enabled","setColorWrite","data","setDepthWrite","source","target","_"],"sources":["../../../../dev/core/src/Rendering/geometryBufferRenderer.ts"],"sourcesContent":["import { Matrix } from \"../Maths/math.vector\";\r\nimport { VertexBuffer } from \"../Buffers/buffer\";\r\nimport type { SubMesh } from \"../Meshes/subMesh\";\r\nimport type { Mesh } from \"../Meshes/mesh\";\r\nimport { Constants } from \"../Engines/constants\";\r\nimport type { SmartArray } from \"../Misc/smartArray\";\r\nimport { Texture } from \"../Materials/Textures/texture\";\r\nimport type { InternalTexture } from \"../Materials/Textures/internalTexture\";\r\nimport { MultiRenderTarget } from \"../Materials/Textures/multiRenderTarget\";\r\nimport type { PrePassRenderer } from \"../Rendering/prePassRenderer\";\r\nimport { MaterialHelper } from \"../Materials/materialHelper\";\r\nimport type { Scene } from \"../scene\";\r\nimport type { AbstractMesh } from \"../Meshes/abstractMesh\";\r\nimport { Color4 } from \"../Maths/math.color\";\r\nimport { _WarnImport } from \"../Misc/devTools\";\r\nimport type { Observer } from \"../Misc/observable\";\r\nimport type { Engine } from \"../Engines/engine\";\r\nimport type { Nullable } from \"../types\";\r\nimport { Material } from \"../Materials/material\";\r\n\r\nimport \"../Shaders/geometry.fragment\";\r\nimport \"../Shaders/geometry.vertex\";\r\nimport { MaterialFlags } from \"../Materials/materialFlags\";\r\nimport { addClipPlaneUniforms, bindClipPlane, prepareStringDefinesForClipPlanes } from \"../Materials/clipPlaneMaterialHelper\";\r\n\r\n/** @internal */\r\ninterface ISavedTransformationMatrix {\r\n    world: Matrix;\r\n    viewProjection: Matrix;\r\n}\r\n\r\n/** list the uniforms used by the geometry renderer */\r\nconst uniforms = [\r\n    \"world\",\r\n    \"mBones\",\r\n    \"viewProjection\",\r\n    \"diffuseMatrix\",\r\n    \"view\",\r\n    \"previousWorld\",\r\n    \"previousViewProjection\",\r\n    \"mPreviousBones\",\r\n    \"bumpMatrix\",\r\n    \"reflectivityMatrix\",\r\n    \"albedoMatrix\",\r\n    \"reflectivityColor\",\r\n    \"albedoColor\",\r\n    \"metallic\",\r\n    \"glossiness\",\r\n    \"vTangentSpaceParams\",\r\n    \"vBumpInfos\",\r\n    \"morphTargetInfluences\",\r\n    \"morphTargetTextureInfo\",\r\n    \"morphTargetTextureIndices\",\r\n];\r\naddClipPlaneUniforms(uniforms);\r\n\r\n/**\r\n * This renderer is helpful to fill one of the render target with a geometry buffer.\r\n */\r\nexport class GeometryBufferRenderer {\r\n    /**\r\n     * Constant used to retrieve the depth texture index in the G-Buffer textures array\r\n     * using getIndex(GeometryBufferRenderer.DEPTH_TEXTURE_INDEX)\r\n     */\r\n    public static readonly DEPTH_TEXTURE_TYPE = 0;\r\n    /**\r\n     * Constant used to retrieve the normal texture index in the G-Buffer textures array\r\n     * using getIndex(GeometryBufferRenderer.NORMAL_TEXTURE_INDEX)\r\n     */\r\n    public static readonly NORMAL_TEXTURE_TYPE = 1;\r\n    /**\r\n     * Constant used to retrieve the position texture index in the G-Buffer textures array\r\n     * using getIndex(GeometryBufferRenderer.POSITION_TEXTURE_INDEX)\r\n     */\r\n    public static readonly POSITION_TEXTURE_TYPE = 2;\r\n    /**\r\n     * Constant used to retrieve the velocity texture index in the G-Buffer textures array\r\n     * using getIndex(GeometryBufferRenderer.VELOCITY_TEXTURE_INDEX)\r\n     */\r\n    public static readonly VELOCITY_TEXTURE_TYPE = 3;\r\n    /**\r\n     * Constant used to retrieve the reflectivity texture index in the G-Buffer textures array\r\n     * using the getIndex(GeometryBufferRenderer.REFLECTIVITY_TEXTURE_TYPE)\r\n     */\r\n    public static readonly REFLECTIVITY_TEXTURE_TYPE = 4;\r\n\r\n    /**\r\n     * Dictionary used to store the previous transformation matrices of each rendered mesh\r\n     * in order to compute objects velocities when enableVelocity is set to \"true\"\r\n     * @internal\r\n     */\r\n    public _previousTransformationMatrices: { [index: number]: ISavedTransformationMatrix } = {};\r\n    /**\r\n     * Dictionary used to store the previous bones transformation matrices of each rendered mesh\r\n     * in order to compute objects velocities when enableVelocity is set to \"true\"\r\n     * @internal\r\n     */\r\n    public _previousBonesTransformationMatrices: { [index: number]: Float32Array } = {};\r\n    /**\r\n     * Array used to store the ignored skinned meshes while computing velocity map (typically used by the motion blur post-process).\r\n     * Avoids computing bones velocities and computes only mesh's velocity itself (position, rotation, scaling).\r\n     */\r\n    public excludedSkinnedMeshesFromVelocity: AbstractMesh[] = [];\r\n\r\n    /** Gets or sets a boolean indicating if transparent meshes should be rendered */\r\n    public renderTransparentMeshes = true;\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if normals should be generated in world space (default: false, meaning normals are generated in view space)\r\n     */\r\n    public generateNormalsInWorldSpace = false;\r\n\r\n    private _scene: Scene;\r\n    private _resizeObserver: Nullable<Observer<Engine>> = null;\r\n    private _multiRenderTarget: MultiRenderTarget;\r\n    private _ratio: number;\r\n    private _enablePosition: boolean = false;\r\n    private _enableVelocity: boolean = false;\r\n    private _enableReflectivity: boolean = false;\r\n    private _depthFormat: number;\r\n    private _clearColor = new Color4(0, 0, 0, 0);\r\n    private _clearDepthColor = new Color4(1e8, 0, 0, 1); // \"infinity\" value - depth in the depth texture is view.z, not a 0..1 value!\r\n\r\n    private _positionIndex: number = -1;\r\n    private _velocityIndex: number = -1;\r\n    private _reflectivityIndex: number = -1;\r\n    private _depthIndex: number = -1;\r\n    private _normalIndex: number = -1;\r\n\r\n    private _linkedWithPrePass: boolean = false;\r\n    private _prePassRenderer: PrePassRenderer;\r\n    private _attachmentsFromPrePass: number[];\r\n    private _useUbo: boolean;\r\n\r\n    protected _cachedDefines: string;\r\n\r\n    /**\r\n     * @internal\r\n     * Sets up internal structures to share outputs with PrePassRenderer\r\n     * This method should only be called by the PrePassRenderer itself\r\n     */\r\n    public _linkPrePassRenderer(prePassRenderer: PrePassRenderer) {\r\n        this._linkedWithPrePass = true;\r\n        this._prePassRenderer = prePassRenderer;\r\n\r\n        if (this._multiRenderTarget) {\r\n            // prevents clearing of the RT since it's done by prepass\r\n            this._multiRenderTarget.onClearObservable.clear();\r\n            this._multiRenderTarget.onClearObservable.add(() => {\r\n                // pass\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * Separates internal structures from PrePassRenderer so the geometry buffer can now operate by itself.\r\n     * This method should only be called by the PrePassRenderer itself\r\n     */\r\n    public _unlinkPrePassRenderer() {\r\n        this._linkedWithPrePass = false;\r\n        this._createRenderTargets();\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * Resets the geometry buffer layout\r\n     */\r\n    public _resetLayout() {\r\n        this._enablePosition = false;\r\n        this._enableReflectivity = false;\r\n        this._enableVelocity = false;\r\n        this._attachmentsFromPrePass = [];\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * Replaces a texture in the geometry buffer renderer\r\n     * Useful when linking textures of the prepass renderer\r\n     */\r\n    public _forceTextureType(geometryBufferType: number, index: number) {\r\n        if (geometryBufferType === GeometryBufferRenderer.POSITION_TEXTURE_TYPE) {\r\n            this._positionIndex = index;\r\n            this._enablePosition = true;\r\n        } else if (geometryBufferType === GeometryBufferRenderer.VELOCITY_TEXTURE_TYPE) {\r\n            this._velocityIndex = index;\r\n            this._enableVelocity = true;\r\n        } else if (geometryBufferType === GeometryBufferRenderer.REFLECTIVITY_TEXTURE_TYPE) {\r\n            this._reflectivityIndex = index;\r\n            this._enableReflectivity = true;\r\n        } else if (geometryBufferType === GeometryBufferRenderer.DEPTH_TEXTURE_TYPE) {\r\n            this._depthIndex = index;\r\n        } else if (geometryBufferType === GeometryBufferRenderer.NORMAL_TEXTURE_TYPE) {\r\n            this._normalIndex = index;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * Sets texture attachments\r\n     * Useful when linking textures of the prepass renderer\r\n     */\r\n    public _setAttachments(attachments: number[]) {\r\n        this._attachmentsFromPrePass = attachments;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * Replaces the first texture which is hard coded as a depth texture in the geometry buffer\r\n     * Useful when linking textures of the prepass renderer\r\n     */\r\n    public _linkInternalTexture(internalTexture: InternalTexture) {\r\n        this._multiRenderTarget.setInternalTexture(internalTexture, 0, false);\r\n    }\r\n\r\n    /**\r\n     * Gets the render list (meshes to be rendered) used in the G buffer.\r\n     */\r\n    public get renderList() {\r\n        return this._multiRenderTarget.renderList;\r\n    }\r\n\r\n    /**\r\n     * Set the render list (meshes to be rendered) used in the G buffer.\r\n     */\r\n    public set renderList(meshes: Nullable<AbstractMesh[]>) {\r\n        this._multiRenderTarget.renderList = meshes;\r\n    }\r\n\r\n    /**\r\n     * Gets whether or not G buffer are supported by the running hardware.\r\n     * This requires draw buffer supports\r\n     */\r\n    public get isSupported(): boolean {\r\n        return this._multiRenderTarget.isSupported;\r\n    }\r\n\r\n    /**\r\n     * Returns the index of the given texture type in the G-Buffer textures array\r\n     * @param textureType The texture type constant. For example GeometryBufferRenderer.POSITION_TEXTURE_INDEX\r\n     * @returns the index of the given texture type in the G-Buffer textures array\r\n     */\r\n    public getTextureIndex(textureType: number): number {\r\n        switch (textureType) {\r\n            case GeometryBufferRenderer.POSITION_TEXTURE_TYPE:\r\n                return this._positionIndex;\r\n            case GeometryBufferRenderer.VELOCITY_TEXTURE_TYPE:\r\n                return this._velocityIndex;\r\n            case GeometryBufferRenderer.REFLECTIVITY_TEXTURE_TYPE:\r\n                return this._reflectivityIndex;\r\n            case GeometryBufferRenderer.DEPTH_TEXTURE_TYPE:\r\n                return this._linkedWithPrePass ? this._depthIndex : 0;\r\n            case GeometryBufferRenderer.NORMAL_TEXTURE_TYPE:\r\n                return this._linkedWithPrePass ? this._normalIndex : 1;\r\n            default:\r\n                return -1;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets a boolean indicating if objects positions are enabled for the G buffer.\r\n     */\r\n    public get enablePosition(): boolean {\r\n        return this._enablePosition;\r\n    }\r\n\r\n    /**\r\n     * Sets whether or not objects positions are enabled for the G buffer.\r\n     */\r\n    public set enablePosition(enable: boolean) {\r\n        this._enablePosition = enable;\r\n\r\n        // PrePass handles index and texture links\r\n        if (!this._linkedWithPrePass) {\r\n            this.dispose();\r\n            this._createRenderTargets();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets a boolean indicating if objects velocities are enabled for the G buffer.\r\n     */\r\n    public get enableVelocity(): boolean {\r\n        return this._enableVelocity;\r\n    }\r\n\r\n    /**\r\n     * Sets whether or not objects velocities are enabled for the G buffer.\r\n     */\r\n    public set enableVelocity(enable: boolean) {\r\n        this._enableVelocity = enable;\r\n\r\n        if (!enable) {\r\n            this._previousTransformationMatrices = {};\r\n        }\r\n\r\n        if (!this._linkedWithPrePass) {\r\n            this.dispose();\r\n            this._createRenderTargets();\r\n        }\r\n\r\n        this._scene.needsPreviousWorldMatrices = enable;\r\n    }\r\n\r\n    /**\r\n     * Gets a boolean indicating if objects reflectivity are enabled in the G buffer.\r\n     */\r\n    public get enableReflectivity(): boolean {\r\n        return this._enableReflectivity;\r\n    }\r\n\r\n    /**\r\n     * Sets whether or not objects reflectivity are enabled for the G buffer.\r\n     * For Metallic-Roughness workflow with ORM texture, we assume that ORM texture is defined according to the default layout:\r\n     * pbr.useRoughnessFromMetallicTextureAlpha = false;\r\n     * pbr.useRoughnessFromMetallicTextureGreen = true;\r\n     * pbr.useMetallnessFromMetallicTextureBlue = true;\r\n     */\r\n    public set enableReflectivity(enable: boolean) {\r\n        this._enableReflectivity = enable;\r\n\r\n        if (!this._linkedWithPrePass) {\r\n            this.dispose();\r\n            this._createRenderTargets();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * If set to true (default: false), the depth texture will be cleared with the depth value corresponding to the far plane (1 in normal mode, 0 in reverse depth buffer mode)\r\n     * If set to false, the depth texture is always cleared with 0.\r\n     */\r\n    public useSpecificClearForDepthTexture = false;\r\n\r\n    /**\r\n     * Gets the scene associated with the buffer.\r\n     */\r\n    public get scene(): Scene {\r\n        return this._scene;\r\n    }\r\n\r\n    /**\r\n     * Gets the ratio used by the buffer during its creation.\r\n     * How big is the buffer related to the main canvas.\r\n     */\r\n    public get ratio(): number {\r\n        return this._ratio;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public static _SceneComponentInitialization: (scene: Scene) => void = (_) => {\r\n        throw _WarnImport(\"GeometryBufferRendererSceneComponent\");\r\n    };\r\n\r\n    /**\r\n     * Creates a new G Buffer for the scene\r\n     * @param scene The scene the buffer belongs to\r\n     * @param ratio How big is the buffer related to the main canvas (default: 1)\r\n     * @param depthFormat Format of the depth texture (default: Constants.TEXTUREFORMAT_DEPTH16)\r\n     */\r\n    constructor(scene: Scene, ratio: number = 1, depthFormat = Constants.TEXTUREFORMAT_DEPTH16) {\r\n        this._scene = scene;\r\n        this._ratio = ratio;\r\n        this._useUbo = scene.getEngine().supportsUniformBuffers;\r\n        this._depthFormat = depthFormat;\r\n\r\n        GeometryBufferRenderer._SceneComponentInitialization(this._scene);\r\n\r\n        // Render target\r\n        this._createRenderTargets();\r\n    }\r\n\r\n    /**\r\n     * Checks whether everything is ready to render a submesh to the G buffer.\r\n     * @param subMesh the submesh to check readiness for\r\n     * @param useInstances is the mesh drawn using instance or not\r\n     * @returns true if ready otherwise false\r\n     */\r\n    public isReady(subMesh: SubMesh, useInstances: boolean): boolean {\r\n        const material = <any>subMesh.getMaterial();\r\n\r\n        if (material && material.disableDepthWrite) {\r\n            return false;\r\n        }\r\n\r\n        const defines = [];\r\n        const attribs = [VertexBuffer.PositionKind, VertexBuffer.NormalKind];\r\n        const mesh = subMesh.getMesh();\r\n\r\n        // Alpha test\r\n        if (material) {\r\n            let needUv = false;\r\n            if (material.needAlphaTesting() && material.getAlphaTestTexture()) {\r\n                defines.push(\"#define ALPHATEST\");\r\n                defines.push(`#define ALPHATEST_UV${material.getAlphaTestTexture().coordinatesIndex + 1}`);\r\n                needUv = true;\r\n            }\r\n\r\n            if (material.bumpTexture && MaterialFlags.BumpTextureEnabled) {\r\n                defines.push(\"#define BUMP\");\r\n                defines.push(`#define BUMP_UV${material.bumpTexture.coordinatesIndex + 1}`);\r\n                needUv = true;\r\n            }\r\n\r\n            if (this._enableReflectivity) {\r\n                let metallicWorkflow = false;\r\n                // for PBR materials: cf. https://doc.babylonjs.com/features/featuresDeepDive/materials/using/masterPBR\r\n                if (material.getClassName() === \"PBRMetallicRoughnessMaterial\") {\r\n                    // if it is a PBR material in MetallicRoughness Mode:\r\n                    if (material.metallicRoughnessTexture !== null) {\r\n                        defines.push(\"#define ORMTEXTURE\");\r\n                        defines.push(`#define REFLECTIVITY_UV${material.metallicRoughnessTexture.coordinatesIndex + 1}`);\r\n                        defines.push(\"#define METALLICWORKFLOW\");\r\n                        needUv = true;\r\n                        metallicWorkflow = true;\r\n                    }\r\n                    if (material.metallic !== null) {\r\n                        defines.push(\"#define METALLIC\");\r\n                        defines.push(\"#define METALLICWORKFLOW\");\r\n                        metallicWorkflow = true;\r\n                    }\r\n                    if (material.roughness !== null) {\r\n                        defines.push(\"#define ROUGHNESS\");\r\n                        defines.push(\"#define METALLICWORKFLOW\");\r\n                        metallicWorkflow = true;\r\n                    }\r\n                    if (metallicWorkflow) {\r\n                        if (material.baseTexture !== null) {\r\n                            defines.push(\"#define ALBEDOTEXTURE\");\r\n                            defines.push(`#define ALBEDO_UV${material.baseTexture.coordinatesIndex + 1}`);\r\n                            if (material.baseTexture.gammaSpace) {\r\n                                defines.push(\"#define GAMMAALBEDO\");\r\n                            }\r\n                            needUv = true;\r\n                        }\r\n                        if (material.baseColor !== null) {\r\n                            defines.push(\"#define ALBEDOCOLOR\");\r\n                        }\r\n                    }\r\n                } else if (material.getClassName() === \"PBRSpecularGlossinessMaterial\") {\r\n                    // if it is a PBR material in Specular/Glossiness Mode:\r\n                    if (material.specularGlossinessTexture !== null) {\r\n                        defines.push(\"#define SPECULARGLOSSINESSTEXTURE\");\r\n                        defines.push(`#define REFLECTIVITY_UV${material.specularGlossinessTexture.coordinatesIndex + 1}`);\r\n                        needUv = true;\r\n                        if (material.specularGlossinessTexture.gammaSpace) {\r\n                            defines.push(\"#define GAMMAREFLECTIVITYTEXTURE\");\r\n                        }\r\n                    } else {\r\n                        if (material.specularColor !== null) {\r\n                            defines.push(\"#define REFLECTIVITYCOLOR\");\r\n                        }\r\n                    }\r\n                    if (material.glossiness !== null) {\r\n                        defines.push(\"#define GLOSSINESS\");\r\n                    }\r\n                } else if (material.getClassName() === \"PBRMaterial\") {\r\n                    // if it is the bigger PBRMaterial\r\n                    if (material.metallicTexture !== null) {\r\n                        defines.push(\"#define ORMTEXTURE\");\r\n                        defines.push(`#define REFLECTIVITY_UV${material.metallicTexture.coordinatesIndex + 1}`);\r\n                        defines.push(\"#define METALLICWORKFLOW\");\r\n                        needUv = true;\r\n                        metallicWorkflow = true;\r\n                    }\r\n                    if (material.metallic !== null) {\r\n                        defines.push(\"#define METALLIC\");\r\n                        defines.push(\"#define METALLICWORKFLOW\");\r\n                        metallicWorkflow = true;\r\n                    }\r\n\r\n                    if (material.roughness !== null) {\r\n                        defines.push(\"#define ROUGHNESS\");\r\n                        defines.push(\"#define METALLICWORKFLOW\");\r\n                        metallicWorkflow = true;\r\n                    }\r\n\r\n                    if (metallicWorkflow) {\r\n                        if (material.albedoTexture !== null) {\r\n                            defines.push(\"#define ALBEDOTEXTURE\");\r\n                            defines.push(`#define ALBEDO_UV${material.albedoTexture.coordinatesIndex + 1}`);\r\n                            if (material.albedoTexture.gammaSpace) {\r\n                                defines.push(\"#define GAMMAALBEDO\");\r\n                            }\r\n                            needUv = true;\r\n                        }\r\n                        if (material.albedoColor !== null) {\r\n                            defines.push(\"#define ALBEDOCOLOR\");\r\n                        }\r\n                    } else {\r\n                        // SpecularGlossiness Model\r\n                        if (material.reflectivityTexture !== null) {\r\n                            defines.push(\"#define SPECULARGLOSSINESSTEXTURE\");\r\n                            defines.push(`#define REFLECTIVITY_UV${material.reflectivityTexture.coordinatesIndex + 1}`);\r\n                            if (material.reflectivityTexture.gammaSpace) {\r\n                                defines.push(\"#define GAMMAREFLECTIVITYTEXTURE\");\r\n                            }\r\n                            needUv = true;\r\n                        } else if (material.reflectivityColor !== null) {\r\n                            defines.push(\"#define REFLECTIVITYCOLOR\");\r\n                        }\r\n                        if (material.microSurface !== null) {\r\n                            defines.push(\"#define GLOSSINESS\");\r\n                        }\r\n                    }\r\n                } else if (material.getClassName() === \"StandardMaterial\") {\r\n                    // if StandardMaterial:\r\n                    if (material.specularTexture !== null) {\r\n                        defines.push(\"#define REFLECTIVITYTEXTURE\");\r\n                        defines.push(`#define REFLECTIVITY_UV${material.specularTexture.coordinatesIndex + 1}`);\r\n                        if (material.specularTexture.gammaSpace) {\r\n                            defines.push(\"#define GAMMAREFLECTIVITYTEXTURE\");\r\n                        }\r\n                        needUv = true;\r\n                    }\r\n                    if (material.specularColor !== null) {\r\n                        defines.push(\"#define REFLECTIVITYCOLOR\");\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (needUv) {\r\n                defines.push(\"#define NEED_UV\");\r\n                if (mesh.isVerticesDataPresent(VertexBuffer.UVKind)) {\r\n                    attribs.push(VertexBuffer.UVKind);\r\n                    defines.push(\"#define UV1\");\r\n                }\r\n                if (mesh.isVerticesDataPresent(VertexBuffer.UV2Kind)) {\r\n                    attribs.push(VertexBuffer.UV2Kind);\r\n                    defines.push(\"#define UV2\");\r\n                }\r\n            }\r\n        }\r\n\r\n        // PrePass\r\n        if (this._linkedWithPrePass) {\r\n            defines.push(\"#define PREPASS\");\r\n            if (this._depthIndex !== -1) {\r\n                defines.push(\"#define DEPTH_INDEX \" + this._depthIndex);\r\n                defines.push(\"#define PREPASS_DEPTH\");\r\n            }\r\n            if (this._normalIndex !== -1) {\r\n                defines.push(\"#define NORMAL_INDEX \" + this._normalIndex);\r\n                defines.push(\"#define PREPASS_NORMAL\");\r\n            }\r\n        }\r\n\r\n        // Buffers\r\n        if (this._enablePosition) {\r\n            defines.push(\"#define POSITION\");\r\n            defines.push(\"#define POSITION_INDEX \" + this._positionIndex);\r\n        }\r\n\r\n        if (this._enableVelocity) {\r\n            defines.push(\"#define VELOCITY\");\r\n            defines.push(\"#define VELOCITY_INDEX \" + this._velocityIndex);\r\n            if (this.excludedSkinnedMeshesFromVelocity.indexOf(mesh) === -1) {\r\n                defines.push(\"#define BONES_VELOCITY_ENABLED\");\r\n            }\r\n        }\r\n\r\n        if (this._enableReflectivity) {\r\n            defines.push(\"#define REFLECTIVITY\");\r\n            defines.push(\"#define REFLECTIVITY_INDEX \" + this._reflectivityIndex);\r\n        }\r\n\r\n        if (this.generateNormalsInWorldSpace) {\r\n            defines.push(\"#define NORMAL_WORLDSPACE\");\r\n        }\r\n\r\n        // Bones\r\n        if (mesh.useBones && mesh.computeBonesUsingShaders) {\r\n            attribs.push(VertexBuffer.MatricesIndicesKind);\r\n            attribs.push(VertexBuffer.MatricesWeightsKind);\r\n            if (mesh.numBoneInfluencers > 4) {\r\n                attribs.push(VertexBuffer.MatricesIndicesExtraKind);\r\n                attribs.push(VertexBuffer.MatricesWeightsExtraKind);\r\n            }\r\n            defines.push(\"#define NUM_BONE_INFLUENCERS \" + mesh.numBoneInfluencers);\r\n            defines.push(\"#define BonesPerMesh \" + (mesh.skeleton ? mesh.skeleton.bones.length + 1 : 0));\r\n        } else {\r\n            defines.push(\"#define NUM_BONE_INFLUENCERS 0\");\r\n        }\r\n\r\n        // Morph targets\r\n        const morphTargetManager = (mesh as Mesh).morphTargetManager;\r\n        let numMorphInfluencers = 0;\r\n        if (morphTargetManager) {\r\n            if (morphTargetManager.numInfluencers > 0) {\r\n                numMorphInfluencers = morphTargetManager.numInfluencers;\r\n\r\n                defines.push(\"#define MORPHTARGETS\");\r\n                defines.push(\"#define NUM_MORPH_INFLUENCERS \" + numMorphInfluencers);\r\n                if (morphTargetManager.isUsingTextureForTargets) {\r\n                    defines.push(\"#define MORPHTARGETS_TEXTURE\");\r\n                }\r\n                MaterialHelper.PrepareAttributesForMorphTargetsInfluencers(attribs, mesh, numMorphInfluencers);\r\n            }\r\n        }\r\n\r\n        // Instances\r\n        if (useInstances) {\r\n            defines.push(\"#define INSTANCES\");\r\n            MaterialHelper.PushAttributesForInstances(attribs, this._enableVelocity);\r\n            if (subMesh.getRenderingMesh().hasThinInstances) {\r\n                defines.push(\"#define THIN_INSTANCES\");\r\n            }\r\n        }\r\n\r\n        // Setup textures count\r\n        if (this._linkedWithPrePass) {\r\n            defines.push(\"#define RENDER_TARGET_COUNT \" + this._attachmentsFromPrePass.length);\r\n        } else {\r\n            defines.push(\"#define RENDER_TARGET_COUNT \" + this._multiRenderTarget.textures.length);\r\n        }\r\n\r\n        prepareStringDefinesForClipPlanes(material, this._scene, defines);\r\n\r\n        // Get correct effect\r\n        const engine = this._scene.getEngine();\r\n        const drawWrapper = subMesh._getDrawWrapper(undefined, true)!;\r\n        const cachedDefines = drawWrapper.defines;\r\n        const join = defines.join(\"\\n\");\r\n        if (cachedDefines !== join) {\r\n            drawWrapper.setEffect(\r\n                engine.createEffect(\r\n                    \"geometry\",\r\n                    {\r\n                        attributes: attribs,\r\n                        uniformsNames: uniforms,\r\n                        samplers: [\"diffuseSampler\", \"bumpSampler\", \"reflectivitySampler\", \"albedoSampler\", \"morphTargets\"],\r\n                        defines: join,\r\n                        onCompiled: null,\r\n                        fallbacks: null,\r\n                        onError: null,\r\n                        uniformBuffersNames: [\"Scene\"],\r\n                        indexParameters: { buffersCount: this._multiRenderTarget.textures.length - 1, maxSimultaneousMorphTargets: numMorphInfluencers },\r\n                    },\r\n                    engine\r\n                ),\r\n                join\r\n            );\r\n        }\r\n\r\n        return drawWrapper.effect!.isReady();\r\n    }\r\n\r\n    /**\r\n     * Gets the current underlying G Buffer.\r\n     * @returns the buffer\r\n     */\r\n    public getGBuffer(): MultiRenderTarget {\r\n        return this._multiRenderTarget;\r\n    }\r\n\r\n    /**\r\n     * Gets the number of samples used to render the buffer (anti aliasing).\r\n     */\r\n    public get samples(): number {\r\n        return this._multiRenderTarget.samples;\r\n    }\r\n\r\n    /**\r\n     * Sets the number of samples used to render the buffer (anti aliasing).\r\n     */\r\n    public set samples(value: number) {\r\n        this._multiRenderTarget.samples = value;\r\n    }\r\n\r\n    /**\r\n     * Disposes the renderer and frees up associated resources.\r\n     */\r\n    public dispose(): void {\r\n        if (this._resizeObserver) {\r\n            const engine = this._scene.getEngine();\r\n            engine.onResizeObservable.remove(this._resizeObserver);\r\n            this._resizeObserver = null;\r\n        }\r\n        this.getGBuffer().dispose();\r\n    }\r\n\r\n    private _assignRenderTargetIndices(): [number, string[]] {\r\n        const textureNames: string[] = [];\r\n        let count = 2;\r\n\r\n        textureNames.push(\"gBuffer_Depth\", \"gBuffer_Normal\");\r\n\r\n        if (this._enablePosition) {\r\n            this._positionIndex = count;\r\n            count++;\r\n            textureNames.push(\"gBuffer_Position\");\r\n        }\r\n\r\n        if (this._enableVelocity) {\r\n            this._velocityIndex = count;\r\n            count++;\r\n            textureNames.push(\"gBuffer_Velocity\");\r\n        }\r\n\r\n        if (this._enableReflectivity) {\r\n            this._reflectivityIndex = count;\r\n            count++;\r\n            textureNames.push(\"gBuffer_Reflectivity\");\r\n        }\r\n\r\n        return [count, textureNames];\r\n    }\r\n\r\n    protected _createRenderTargets(): void {\r\n        const engine = this._scene.getEngine();\r\n        const [count, textureNames] = this._assignRenderTargetIndices();\r\n\r\n        let type = Constants.TEXTURETYPE_UNSIGNED_BYTE;\r\n        if (engine._caps.textureFloat && engine._caps.textureFloatLinearFiltering) {\r\n            type = Constants.TEXTURETYPE_FLOAT;\r\n        } else if (engine._caps.textureHalfFloat && engine._caps.textureHalfFloatLinearFiltering) {\r\n            type = Constants.TEXTURETYPE_HALF_FLOAT;\r\n        }\r\n\r\n        this._multiRenderTarget = new MultiRenderTarget(\r\n            \"gBuffer\",\r\n            { width: engine.getRenderWidth() * this._ratio, height: engine.getRenderHeight() * this._ratio },\r\n            count,\r\n            this._scene,\r\n            { generateMipMaps: false, generateDepthTexture: true, defaultType: type, depthTextureFormat: this._depthFormat },\r\n            textureNames.concat(\"gBuffer_DepthBuffer\")\r\n        );\r\n        if (!this.isSupported) {\r\n            return;\r\n        }\r\n        this._multiRenderTarget.wrapU = Texture.CLAMP_ADDRESSMODE;\r\n        this._multiRenderTarget.wrapV = Texture.CLAMP_ADDRESSMODE;\r\n        this._multiRenderTarget.refreshRate = 1;\r\n        this._multiRenderTarget.renderParticles = false;\r\n        this._multiRenderTarget.renderList = null;\r\n\r\n        // Depth is always the first texture in the geometry buffer renderer!\r\n        const layoutAttachmentsAll = [true];\r\n        const layoutAttachmentsAllButDepth = [false];\r\n        const layoutAttachmentsDepthOnly = [true];\r\n\r\n        for (let i = 1; i < count; ++i) {\r\n            layoutAttachmentsAll.push(true);\r\n            layoutAttachmentsDepthOnly.push(false);\r\n            layoutAttachmentsAllButDepth.push(true);\r\n        }\r\n\r\n        const attachmentsAll = engine.buildTextureLayout(layoutAttachmentsAll);\r\n        const attachmentsAllButDepth = engine.buildTextureLayout(layoutAttachmentsAllButDepth);\r\n        const attachmentsDepthOnly = engine.buildTextureLayout(layoutAttachmentsDepthOnly);\r\n\r\n        this._multiRenderTarget.onClearObservable.add((engine) => {\r\n            engine.bindAttachments(this.useSpecificClearForDepthTexture ? attachmentsAllButDepth : attachmentsAll);\r\n            engine.clear(this._clearColor, true, true, true);\r\n            if (this.useSpecificClearForDepthTexture) {\r\n                engine.bindAttachments(attachmentsDepthOnly);\r\n                engine.clear(this._clearDepthColor, true, true, true);\r\n            }\r\n            engine.bindAttachments(attachmentsAll);\r\n        });\r\n\r\n        this._resizeObserver = engine.onResizeObservable.add(() => {\r\n            if (this._multiRenderTarget) {\r\n                this._multiRenderTarget.resize({ width: engine.getRenderWidth() * this._ratio, height: engine.getRenderHeight() * this._ratio });\r\n            }\r\n        });\r\n\r\n        // Custom render function\r\n        const renderSubMesh = (subMesh: SubMesh): void => {\r\n            const renderingMesh = subMesh.getRenderingMesh();\r\n            const effectiveMesh = subMesh.getEffectiveMesh();\r\n            const scene = this._scene;\r\n            const engine = scene.getEngine();\r\n            const material = <any>subMesh.getMaterial();\r\n\r\n            if (!material) {\r\n                return;\r\n            }\r\n\r\n            effectiveMesh._internalAbstractMeshDataInfo._isActiveIntermediate = false;\r\n\r\n            // Velocity\r\n            if (this._enableVelocity && !this._previousTransformationMatrices[effectiveMesh.uniqueId]) {\r\n                this._previousTransformationMatrices[effectiveMesh.uniqueId] = {\r\n                    world: Matrix.Identity(),\r\n                    viewProjection: scene.getTransformMatrix(),\r\n                };\r\n\r\n                if (renderingMesh.skeleton) {\r\n                    const bonesTransformations = renderingMesh.skeleton.getTransformMatrices(renderingMesh);\r\n                    this._previousBonesTransformationMatrices[renderingMesh.uniqueId] = this._copyBonesTransformationMatrices(\r\n                        bonesTransformations,\r\n                        new Float32Array(bonesTransformations.length)\r\n                    );\r\n                }\r\n            }\r\n\r\n            // Managing instances\r\n            const batch = renderingMesh._getInstancesRenderList(subMesh._id, !!subMesh.getReplacementMesh());\r\n\r\n            if (batch.mustReturn) {\r\n                return;\r\n            }\r\n\r\n            const hardwareInstancedRendering = engine.getCaps().instancedArrays && (batch.visibleInstances[subMesh._id] !== null || renderingMesh.hasThinInstances);\r\n            const world = effectiveMesh.getWorldMatrix();\r\n\r\n            if (this.isReady(subMesh, hardwareInstancedRendering)) {\r\n                const drawWrapper = subMesh._getDrawWrapper();\r\n\r\n                if (!drawWrapper) {\r\n                    return;\r\n                }\r\n\r\n                const effect = drawWrapper.effect!;\r\n\r\n                engine.enableEffect(drawWrapper);\r\n                if (!hardwareInstancedRendering) {\r\n                    renderingMesh._bind(subMesh, effect, material.fillMode);\r\n                }\r\n\r\n                if (!this._useUbo) {\r\n                    effect.setMatrix(\"viewProjection\", scene.getTransformMatrix());\r\n                    effect.setMatrix(\"view\", scene.getViewMatrix());\r\n                } else {\r\n                    MaterialHelper.BindSceneUniformBuffer(effect, this._scene.getSceneUniformBuffer());\r\n                    this._scene.finalizeSceneUbo();\r\n                }\r\n\r\n                let sideOrientation: Nullable<number>;\r\n                const instanceDataStorage = (renderingMesh as Mesh)._instanceDataStorage;\r\n\r\n                if (!instanceDataStorage.isFrozen && (material.backFaceCulling || renderingMesh.overrideMaterialSideOrientation !== null)) {\r\n                    const mainDeterminant = effectiveMesh._getWorldMatrixDeterminant();\r\n                    sideOrientation = renderingMesh.overrideMaterialSideOrientation;\r\n                    if (sideOrientation === null) {\r\n                        sideOrientation = material.sideOrientation;\r\n                    }\r\n                    if (mainDeterminant < 0) {\r\n                        sideOrientation = sideOrientation === Material.ClockWiseSideOrientation ? Material.CounterClockWiseSideOrientation : Material.ClockWiseSideOrientation;\r\n                    }\r\n                } else {\r\n                    sideOrientation = instanceDataStorage.sideOrientation;\r\n                }\r\n\r\n                material._preBind(drawWrapper, sideOrientation);\r\n\r\n                // Alpha test\r\n                if (material.needAlphaTesting()) {\r\n                    const alphaTexture = material.getAlphaTestTexture();\r\n                    if (alphaTexture) {\r\n                        effect.setTexture(\"diffuseSampler\", alphaTexture);\r\n                        effect.setMatrix(\"diffuseMatrix\", alphaTexture.getTextureMatrix());\r\n                    }\r\n                }\r\n\r\n                // Bump\r\n                if (material.bumpTexture && scene.getEngine().getCaps().standardDerivatives && MaterialFlags.BumpTextureEnabled) {\r\n                    effect.setFloat3(\"vBumpInfos\", material.bumpTexture.coordinatesIndex, 1.0 / material.bumpTexture.level, material.parallaxScaleBias);\r\n                    effect.setMatrix(\"bumpMatrix\", material.bumpTexture.getTextureMatrix());\r\n                    effect.setTexture(\"bumpSampler\", material.bumpTexture);\r\n                    effect.setFloat2(\"vTangentSpaceParams\", material.invertNormalMapX ? -1.0 : 1.0, material.invertNormalMapY ? -1.0 : 1.0);\r\n                }\r\n\r\n                // Reflectivity\r\n                if (this._enableReflectivity) {\r\n                    // for PBR materials: cf. https://doc.babylonjs.com/features/featuresDeepDive/materials/using/masterPBR\r\n                    if (material.getClassName() === \"PBRMetallicRoughnessMaterial\") {\r\n                        // if it is a PBR material in MetallicRoughness Mode:\r\n                        if (material.metallicRoughnessTexture !== null) {\r\n                            effect.setTexture(\"reflectivitySampler\", material.metallicRoughnessTexture);\r\n                            effect.setMatrix(\"reflectivityMatrix\", material.metallicRoughnessTexture.getTextureMatrix());\r\n                        }\r\n                        if (material.metallic !== null) {\r\n                            effect.setFloat(\"metallic\", material.metallic);\r\n                        }\r\n                        if (material.roughness !== null) {\r\n                            effect.setFloat(\"glossiness\", 1.0 - material.roughness);\r\n                        }\r\n                        if (material.baseTexture !== null) {\r\n                            effect.setTexture(\"albedoSampler\", material.baseTexture);\r\n                            effect.setMatrix(\"albedoMatrix\", material.baseTexture.getTextureMatrix());\r\n                        }\r\n                        if (material.baseColor !== null) {\r\n                            effect.setColor3(\"albedoColor\", material.baseColor);\r\n                        }\r\n                    } else if (material.getClassName() === \"PBRSpecularGlossinessMaterial\") {\r\n                        // if it is a PBR material in Specular/Glossiness Mode:\r\n                        if (material.specularGlossinessTexture !== null) {\r\n                            effect.setTexture(\"reflectivitySampler\", material.specularGlossinessTexture);\r\n                            effect.setMatrix(\"reflectivityMatrix\", material.specularGlossinessTexture.getTextureMatrix());\r\n                        } else {\r\n                            if (material.specularColor !== null) {\r\n                                effect.setColor3(\"reflectivityColor\", material.specularColor);\r\n                            }\r\n                        }\r\n                        if (material.glossiness !== null) {\r\n                            effect.setFloat(\"glossiness\", material.glossiness);\r\n                        }\r\n                    } else if (material.getClassName() === \"PBRMaterial\") {\r\n                        // if it is the bigger PBRMaterial\r\n                        if (material.metallicTexture !== null) {\r\n                            effect.setTexture(\"reflectivitySampler\", material.metallicTexture);\r\n                            effect.setMatrix(\"reflectivityMatrix\", material.metallicTexture.getTextureMatrix());\r\n                        }\r\n                        if (material.metallic !== null) {\r\n                            effect.setFloat(\"metallic\", material.metallic);\r\n                        }\r\n\r\n                        if (material.roughness !== null) {\r\n                            effect.setFloat(\"glossiness\", 1.0 - material.roughness);\r\n                        }\r\n\r\n                        if (material.roughness !== null || material.metallic !== null || material.metallicTexture !== null) {\r\n                            // MetallicRoughness Model\r\n                            if (material.albedoTexture !== null) {\r\n                                effect.setTexture(\"albedoSampler\", material.albedoTexture);\r\n                                effect.setMatrix(\"albedoMatrix\", material.albedoTexture.getTextureMatrix());\r\n                            }\r\n                            if (material.albedoColor !== null) {\r\n                                effect.setColor3(\"albedoColor\", material.albedoColor);\r\n                            }\r\n                        } else {\r\n                            // SpecularGlossiness Model\r\n                            if (material.reflectivityTexture !== null) {\r\n                                effect.setTexture(\"reflectivitySampler\", material.reflectivityTexture);\r\n                                effect.setMatrix(\"reflectivityMatrix\", material.reflectivityTexture.getTextureMatrix());\r\n                            } else if (material.reflectivityColor !== null) {\r\n                                effect.setColor3(\"reflectivityColor\", material.reflectivityColor);\r\n                            }\r\n                            if (material.microSurface !== null) {\r\n                                effect.setFloat(\"glossiness\", material.microSurface);\r\n                            }\r\n                        }\r\n                    } else if (material.getClassName() === \"StandardMaterial\") {\r\n                        // if StandardMaterial:\r\n                        if (material.specularTexture !== null) {\r\n                            effect.setTexture(\"reflectivitySampler\", material.specularTexture);\r\n                            effect.setMatrix(\"reflectivityMatrix\", material.specularTexture.getTextureMatrix());\r\n                        }\r\n                        if (material.specularColor !== null) {\r\n                            effect.setColor3(\"reflectivityColor\", material.specularColor);\r\n                        }\r\n                    }\r\n                }\r\n\r\n                // Clip plane\r\n                bindClipPlane(effect, material, this._scene);\r\n\r\n                // Bones\r\n                if (renderingMesh.useBones && renderingMesh.computeBonesUsingShaders && renderingMesh.skeleton) {\r\n                    effect.setMatrices(\"mBones\", renderingMesh.skeleton.getTransformMatrices(renderingMesh));\r\n                    if (this._enableVelocity) {\r\n                        effect.setMatrices(\"mPreviousBones\", this._previousBonesTransformationMatrices[renderingMesh.uniqueId]);\r\n                    }\r\n                }\r\n\r\n                // Morph targets\r\n                MaterialHelper.BindMorphTargetParameters(renderingMesh, effect);\r\n                if (renderingMesh.morphTargetManager && renderingMesh.morphTargetManager.isUsingTextureForTargets) {\r\n                    renderingMesh.morphTargetManager._bind(effect);\r\n                }\r\n\r\n                // Velocity\r\n                if (this._enableVelocity) {\r\n                    effect.setMatrix(\"previousWorld\", this._previousTransformationMatrices[effectiveMesh.uniqueId].world);\r\n                    effect.setMatrix(\"previousViewProjection\", this._previousTransformationMatrices[effectiveMesh.uniqueId].viewProjection);\r\n                }\r\n\r\n                if (hardwareInstancedRendering && renderingMesh.hasThinInstances) {\r\n                    effect.setMatrix(\"world\", world);\r\n                }\r\n\r\n                // Draw\r\n                renderingMesh._processRendering(effectiveMesh, subMesh, effect, material.fillMode, batch, hardwareInstancedRendering, (isInstance, w) => {\r\n                    if (!isInstance) {\r\n                        effect.setMatrix(\"world\", w);\r\n                    }\r\n                });\r\n            }\r\n\r\n            // Velocity\r\n            if (this._enableVelocity) {\r\n                this._previousTransformationMatrices[effectiveMesh.uniqueId].world = world.clone();\r\n                this._previousTransformationMatrices[effectiveMesh.uniqueId].viewProjection = this._scene.getTransformMatrix().clone();\r\n                if (renderingMesh.skeleton) {\r\n                    this._copyBonesTransformationMatrices(\r\n                        renderingMesh.skeleton.getTransformMatrices(renderingMesh),\r\n                        this._previousBonesTransformationMatrices[effectiveMesh.uniqueId]\r\n                    );\r\n                }\r\n            }\r\n        };\r\n\r\n        this._multiRenderTarget.customIsReadyFunction = (mesh: AbstractMesh, refreshRate: number, preWarm?: boolean) => {\r\n            if ((preWarm || refreshRate === 0) && mesh.subMeshes) {\r\n                for (let i = 0; i < mesh.subMeshes.length; ++i) {\r\n                    const subMesh = mesh.subMeshes[i];\r\n                    const material = subMesh.getMaterial();\r\n                    const renderingMesh = subMesh.getRenderingMesh();\r\n\r\n                    if (!material) {\r\n                        continue;\r\n                    }\r\n\r\n                    const batch = renderingMesh._getInstancesRenderList(subMesh._id, !!subMesh.getReplacementMesh());\r\n                    const hardwareInstancedRendering = engine.getCaps().instancedArrays && (batch.visibleInstances[subMesh._id] !== null || renderingMesh.hasThinInstances);\r\n\r\n                    if (!this.isReady(subMesh, hardwareInstancedRendering)) {\r\n                        return false;\r\n                    }\r\n                }\r\n            }\r\n\r\n            return true;\r\n        };\r\n\r\n        this._multiRenderTarget.customRenderFunction = (\r\n            opaqueSubMeshes: SmartArray<SubMesh>,\r\n            alphaTestSubMeshes: SmartArray<SubMesh>,\r\n            transparentSubMeshes: SmartArray<SubMesh>,\r\n            depthOnlySubMeshes: SmartArray<SubMesh>\r\n        ): void => {\r\n            let index;\r\n\r\n            if (this._linkedWithPrePass) {\r\n                if (!this._prePassRenderer.enabled) {\r\n                    return;\r\n                }\r\n                this._scene.getEngine().bindAttachments(this._attachmentsFromPrePass);\r\n            }\r\n\r\n            if (depthOnlySubMeshes.length) {\r\n                engine.setColorWrite(false);\r\n                for (index = 0; index < depthOnlySubMeshes.length; index++) {\r\n                    renderSubMesh(depthOnlySubMeshes.data[index]);\r\n                }\r\n                engine.setColorWrite(true);\r\n            }\r\n\r\n            for (index = 0; index < opaqueSubMeshes.length; index++) {\r\n                renderSubMesh(opaqueSubMeshes.data[index]);\r\n            }\r\n\r\n            engine.setDepthWrite(false);\r\n            for (index = 0; index < alphaTestSubMeshes.length; index++) {\r\n                renderSubMesh(alphaTestSubMeshes.data[index]);\r\n            }\r\n\r\n            if (this.renderTransparentMeshes) {\r\n                for (index = 0; index < transparentSubMeshes.length; index++) {\r\n                    renderSubMesh(transparentSubMeshes.data[index]);\r\n                }\r\n            }\r\n            engine.setDepthWrite(true);\r\n        };\r\n    }\r\n\r\n    // Copies the bones transformation matrices into the target array and returns the target's reference\r\n    private _copyBonesTransformationMatrices(source: Float32Array, target: Float32Array): Float32Array {\r\n        for (let i = 0; i < source.length; i++) {\r\n            target[i] = source[i];\r\n        }\r\n\r\n        return target;\r\n    }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}