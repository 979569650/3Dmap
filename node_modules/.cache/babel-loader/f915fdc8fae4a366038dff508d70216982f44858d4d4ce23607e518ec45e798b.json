{"ast":null,"code":"import { CameraInputTypes } from \"../../Cameras/cameraInputsManager.js\";\nimport { ArcRotateCameraInputsManager } from \"../../Cameras/arcRotateCameraInputsManager.js\";\nimport { Tools } from \"../../Misc/tools.js\";\n/**\n * Add orientation input support to the input manager.\n * @returns the current input manager\n */\nArcRotateCameraInputsManager.prototype.addVRDeviceOrientation = function () {\n  this.add(new ArcRotateCameraVRDeviceOrientationInput());\n  return this;\n};\n/**\n * Manage the device orientation inputs (gyroscope) to control an arc rotate camera.\n * @see https://doc.babylonjs.com/features/featuresDeepDive/cameras/customizingCameraInputs\n */\nexport class ArcRotateCameraVRDeviceOrientationInput {\n  /**\n   * Instantiate a new ArcRotateCameraVRDeviceOrientationInput.\n   */\n  constructor() {\n    /**\n     * Defines a correction factor applied on the alpha value retrieved from the orientation events.\n     */\n    this.alphaCorrection = 1;\n    /**\n     * Defines a correction factor applied on the gamma value retrieved from the orientation events.\n     */\n    this.gammaCorrection = 1;\n    this._alpha = 0;\n    this._gamma = 0;\n    this._dirty = false;\n    this._deviceOrientationHandler = evt => this._onOrientationEvent(evt);\n  }\n  /**\n   * Attach the input controls to a specific dom element to get the input from.\n   * @param noPreventDefault Defines whether event caught by the controls should call preventdefault() (https://developer.mozilla.org/en-US/docs/Web/API/Event/preventDefault)\n   */\n  attachControl(noPreventDefault) {\n    // eslint-disable-next-line prefer-rest-params\n    noPreventDefault = Tools.BackCompatCameraNoPreventDefault(arguments);\n    this.camera.attachControl(noPreventDefault);\n    const hostWindow = this.camera.getScene().getEngine().getHostWindow();\n    if (hostWindow) {\n      // check iOS 13+ support\n      if (typeof DeviceOrientationEvent !== \"undefined\" && typeof DeviceOrientationEvent.requestPermission === \"function\") {\n        DeviceOrientationEvent.requestPermission().then(response => {\n          if (response === \"granted\") {\n            hostWindow.addEventListener(\"deviceorientation\", this._deviceOrientationHandler);\n          } else {\n            Tools.Warn(\"Permission not granted.\");\n          }\n        }).catch(error => {\n          Tools.Error(error);\n        });\n      } else {\n        hostWindow.addEventListener(\"deviceorientation\", this._deviceOrientationHandler);\n      }\n    }\n  }\n  /**\n   * @internal\n   */\n  _onOrientationEvent(evt) {\n    if (evt.alpha !== null) {\n      this._alpha = (+evt.alpha | 0) * this.alphaCorrection;\n    }\n    if (evt.gamma !== null) {\n      this._gamma = (+evt.gamma | 0) * this.gammaCorrection;\n    }\n    this._dirty = true;\n  }\n  /**\n   * Update the current camera state depending on the inputs that have been used this frame.\n   * This is a dynamically created lambda to avoid the performance penalty of looping for inputs in the render loop.\n   */\n  checkInputs() {\n    if (this._dirty) {\n      this._dirty = false;\n      if (this._gamma < 0) {\n        this._gamma = 180 + this._gamma;\n      }\n      this.camera.alpha = -this._alpha / 180.0 * Math.PI % Math.PI * 2;\n      this.camera.beta = this._gamma / 180.0 * Math.PI;\n    }\n  }\n  /**\n   * Detach the current controls from the specified dom element.\n   */\n  detachControl() {\n    window.removeEventListener(\"deviceorientation\", this._deviceOrientationHandler);\n  }\n  /**\n   * Gets the class name of the current input.\n   * @returns the class name\n   */\n  getClassName() {\n    return \"ArcRotateCameraVRDeviceOrientationInput\";\n  }\n  /**\n   * Get the friendly name associated with the input class.\n   * @returns the input friendly name\n   */\n  getSimpleName() {\n    return \"VRDeviceOrientation\";\n  }\n}\nCameraInputTypes[\"ArcRotateCameraVRDeviceOrientationInput\"] = ArcRotateCameraVRDeviceOrientationInput;","map":{"version":3,"names":["CameraInputTypes","ArcRotateCameraInputsManager","Tools","prototype","addVRDeviceOrientation","add","ArcRotateCameraVRDeviceOrientationInput","constructor","alphaCorrection","gammaCorrection","_alpha","_gamma","_dirty","_deviceOrientationHandler","evt","_onOrientationEvent","attachControl","noPreventDefault","BackCompatCameraNoPreventDefault","arguments","camera","hostWindow","getScene","getEngine","getHostWindow","DeviceOrientationEvent","requestPermission","then","response","addEventListener","Warn","catch","error","Error","alpha","gamma","checkInputs","Math","PI","beta","detachControl","window","removeEventListener","getClassName","getSimpleName"],"sources":["../../../../../dev/core/src/Cameras/Inputs/arcRotateCameraVRDeviceOrientationInput.ts"],"sourcesContent":["import type { ArcRotateCamera } from \"../../Cameras/arcRotateCamera\";\r\nimport type { ICameraInput } from \"../../Cameras/cameraInputsManager\";\r\nimport { CameraInputTypes } from \"../../Cameras/cameraInputsManager\";\r\nimport { ArcRotateCameraInputsManager } from \"../../Cameras/arcRotateCameraInputsManager\";\r\nimport { Tools } from \"../../Misc/tools\";\r\n\r\n// Module augmentation to abstract orientation inputs from camera.\r\ndeclare module \"../../Cameras/arcRotateCameraInputsManager\" {\r\n    export interface ArcRotateCameraInputsManager {\r\n        /**\r\n         * Add orientation input support to the input manager.\r\n         * @returns the current input manager\r\n         */\r\n        addVRDeviceOrientation(): ArcRotateCameraInputsManager;\r\n    }\r\n}\r\n\r\n/**\r\n * Add orientation input support to the input manager.\r\n * @returns the current input manager\r\n */\r\nArcRotateCameraInputsManager.prototype.addVRDeviceOrientation = function (): ArcRotateCameraInputsManager {\r\n    this.add(new ArcRotateCameraVRDeviceOrientationInput());\r\n    return this;\r\n};\r\n\r\n/**\r\n * Manage the device orientation inputs (gyroscope) to control an arc rotate camera.\r\n * @see https://doc.babylonjs.com/features/featuresDeepDive/cameras/customizingCameraInputs\r\n */\r\nexport class ArcRotateCameraVRDeviceOrientationInput implements ICameraInput<ArcRotateCamera> {\r\n    /**\r\n     * Defines the camera the input is attached to.\r\n     */\r\n    public camera: ArcRotateCamera;\r\n\r\n    /**\r\n     * Defines a correction factor applied on the alpha value retrieved from the orientation events.\r\n     */\r\n    public alphaCorrection = 1;\r\n\r\n    /**\r\n     * Defines a correction factor applied on the gamma value retrieved from the orientation events.\r\n     */\r\n    public gammaCorrection = 1;\r\n\r\n    private _alpha = 0;\r\n    private _gamma = 0;\r\n    private _dirty = false;\r\n\r\n    private _deviceOrientationHandler: (evt: DeviceOrientationEvent) => void;\r\n\r\n    /**\r\n     * Instantiate a new ArcRotateCameraVRDeviceOrientationInput.\r\n     */\r\n    constructor() {\r\n        this._deviceOrientationHandler = (evt: DeviceOrientationEvent) => this._onOrientationEvent(evt);\r\n    }\r\n\r\n    /**\r\n     * Attach the input controls to a specific dom element to get the input from.\r\n     * @param noPreventDefault Defines whether event caught by the controls should call preventdefault() (https://developer.mozilla.org/en-US/docs/Web/API/Event/preventDefault)\r\n     */\r\n    public attachControl(noPreventDefault?: boolean): void {\r\n        // eslint-disable-next-line prefer-rest-params\r\n        noPreventDefault = Tools.BackCompatCameraNoPreventDefault(arguments);\r\n\r\n        this.camera.attachControl(noPreventDefault);\r\n\r\n        const hostWindow = this.camera.getScene().getEngine().getHostWindow();\r\n\r\n        if (hostWindow) {\r\n            // check iOS 13+ support\r\n            if (typeof DeviceOrientationEvent !== \"undefined\" && typeof (<any>DeviceOrientationEvent).requestPermission === \"function\") {\r\n                (<any>DeviceOrientationEvent)\r\n                    .requestPermission()\r\n                    .then((response: string) => {\r\n                        if (response === \"granted\") {\r\n                            hostWindow!.addEventListener(\"deviceorientation\", this._deviceOrientationHandler);\r\n                        } else {\r\n                            Tools.Warn(\"Permission not granted.\");\r\n                        }\r\n                    })\r\n                    .catch((error: any) => {\r\n                        Tools.Error(error);\r\n                    });\r\n            } else {\r\n                hostWindow.addEventListener(\"deviceorientation\", this._deviceOrientationHandler);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _onOrientationEvent(evt: DeviceOrientationEvent): void {\r\n        if (evt.alpha !== null) {\r\n            this._alpha = (+evt.alpha | 0) * this.alphaCorrection;\r\n        }\r\n\r\n        if (evt.gamma !== null) {\r\n            this._gamma = (+evt.gamma | 0) * this.gammaCorrection;\r\n        }\r\n        this._dirty = true;\r\n    }\r\n\r\n    /**\r\n     * Update the current camera state depending on the inputs that have been used this frame.\r\n     * This is a dynamically created lambda to avoid the performance penalty of looping for inputs in the render loop.\r\n     */\r\n    public checkInputs(): void {\r\n        if (this._dirty) {\r\n            this._dirty = false;\r\n\r\n            if (this._gamma < 0) {\r\n                this._gamma = 180 + this._gamma;\r\n            }\r\n\r\n            this.camera.alpha = (((-this._alpha / 180.0) * Math.PI) % Math.PI) * 2;\r\n            this.camera.beta = (this._gamma / 180.0) * Math.PI;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Detach the current controls from the specified dom element.\r\n     */\r\n    public detachControl(): void {\r\n        window.removeEventListener(\"deviceorientation\", this._deviceOrientationHandler);\r\n    }\r\n\r\n    /**\r\n     * Gets the class name of the current input.\r\n     * @returns the class name\r\n     */\r\n    public getClassName(): string {\r\n        return \"ArcRotateCameraVRDeviceOrientationInput\";\r\n    }\r\n\r\n    /**\r\n     * Get the friendly name associated with the input class.\r\n     * @returns the input friendly name\r\n     */\r\n    public getSimpleName(): string {\r\n        return \"VRDeviceOrientation\";\r\n    }\r\n}\r\n\r\n(<any>CameraInputTypes)[\"ArcRotateCameraVRDeviceOrientationInput\"] = ArcRotateCameraVRDeviceOrientationInput;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}