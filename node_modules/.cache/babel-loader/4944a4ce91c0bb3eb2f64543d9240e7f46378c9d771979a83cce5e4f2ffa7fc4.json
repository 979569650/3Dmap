{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { __decorate } from \"../../../tslib.es6.js\";\nimport { NodeGeometryBlock } from \"../nodeGeometryBlock.js\";\nimport { RegisterClass } from \"../../../Misc/typeStore.js\";\nimport { NodeGeometryBlockConnectionPointTypes } from \"../Enums/nodeGeometryConnectionPointTypes.js\";\nimport { PropertyTypeForEdition, editableInPropertyPage } from \"../../../Decorators/nodeDecorator.js\";\n/**\n * Block used to randomly pick a geometry from a collection\n */\nexport class GeometryCollectionBlock extends NodeGeometryBlock {\n  /**\n   * Create a new GeometryCollectionBlock\n   * @param name defines the block name\n   */\n  constructor(name) {\n    super(name);\n    /**\n     * Gets or sets a boolean indicating that this block can evaluate context\n     * Build performance is improved when this value is set to false as the system will cache values instead of reevaluating everything per context change\n     */\n    this.evaluateContext = true;\n    this.registerInput(\"geometry0\", NodeGeometryBlockConnectionPointTypes.Geometry, true);\n    this.registerInput(\"geometry1\", NodeGeometryBlockConnectionPointTypes.Geometry, true);\n    this.registerInput(\"geometry2\", NodeGeometryBlockConnectionPointTypes.Geometry, true);\n    this.registerInput(\"geometry3\", NodeGeometryBlockConnectionPointTypes.Geometry, true);\n    this.registerInput(\"geometry4\", NodeGeometryBlockConnectionPointTypes.Geometry, true);\n    this.registerInput(\"geometry5\", NodeGeometryBlockConnectionPointTypes.Geometry, true);\n    this.registerInput(\"geometry6\", NodeGeometryBlockConnectionPointTypes.Geometry, true);\n    this.registerInput(\"geometry7\", NodeGeometryBlockConnectionPointTypes.Geometry, true);\n    this.registerInput(\"geometry8\", NodeGeometryBlockConnectionPointTypes.Geometry, true);\n    this.registerInput(\"geometry9\", NodeGeometryBlockConnectionPointTypes.Geometry, true);\n    this.registerOutput(\"output\", NodeGeometryBlockConnectionPointTypes.Geometry);\n    this._outputs[0]._typeConnectionSource = this._inputs[0];\n    this._linkConnectionTypes(0, 1);\n  }\n  /**\n   * Gets the current class name\n   * @returns the class name\n   */\n  getClassName() {\n    return \"GeometryCollectionBlock\";\n  }\n  /**\n   * Gets the geometry0 input component\n   */\n  get geometry0() {\n    return this._inputs[0];\n  }\n  /**\n   * Gets the geometry1 input component\n   */\n  get geometry1() {\n    return this._inputs[1];\n  }\n  /**\n   * Gets the geometry2 input component\n   */\n  get geometry2() {\n    return this._inputs[2];\n  }\n  /**\n   * Gets the geometry3 input component\n   */\n  get geometry3() {\n    return this._inputs[3];\n  }\n  /**\n   * Gets the geometry4 input component\n   */\n  get geometry4() {\n    return this._inputs[4];\n  }\n  /**\n   * Gets the geometry5 input component\n   */\n  get geometry5() {\n    return this._inputs[5];\n  }\n  /**\n   * Gets the geometry6 input component\n   */\n  get geometry6() {\n    return this._inputs[6];\n  }\n  /**\n   * Gets the geometry7 input component\n   */\n  get geometry7() {\n    return this._inputs[7];\n  }\n  /**\n   * Gets the geometry8 input component\n   */\n  get geometry8() {\n    return this._inputs[8];\n  }\n  /**\n   * Gets the geometry9 input component\n   */\n  get geometry9() {\n    return this._inputs[9];\n  }\n  /**\n   * Gets the geometry output component\n   */\n  get output() {\n    return this._outputs[0];\n  }\n  _storeGeometry(input, state, index, availables) {\n    if (input.isConnected) {\n      const vertexData = input.getConnectedValue(state);\n      if (!vertexData) {\n        return;\n      }\n      vertexData.metadata = vertexData.metadata || {};\n      vertexData.metadata.collectionId = index;\n      availables.push(vertexData);\n    }\n  }\n  _buildBlock(state) {\n    const func = state => {\n      const availables = [];\n      this._storeGeometry(this.geometry0, state, 0, availables);\n      this._storeGeometry(this.geometry1, state, 1, availables);\n      this._storeGeometry(this.geometry2, state, 2, availables);\n      this._storeGeometry(this.geometry3, state, 3, availables);\n      this._storeGeometry(this.geometry4, state, 4, availables);\n      this._storeGeometry(this.geometry5, state, 5, availables);\n      this._storeGeometry(this.geometry6, state, 6, availables);\n      this._storeGeometry(this.geometry7, state, 7, availables);\n      this._storeGeometry(this.geometry8, state, 8, availables);\n      this._storeGeometry(this.geometry9, state, 9, availables);\n      if (!availables.length) {\n        return null;\n      }\n      return availables[Math.round(Math.random() * (availables.length - 1))];\n    };\n    if (this.evaluateContext) {\n      this.output._storedFunction = func;\n    } else {\n      this.output._storedFunction = null;\n      this.output._storedValue = func(state);\n    }\n  }\n  _dumpPropertiesCode() {\n    const codeString = super._dumpPropertiesCode() + `${this._codeVariableName}.evaluateContext = ${this.evaluateContext ? \"true\" : \"false\"};\\n`;\n    return codeString;\n  }\n  /**\n   * Serializes this block in a JSON representation\n   * @returns the serialized block object\n   */\n  serialize() {\n    const serializationObject = super.serialize();\n    serializationObject.evaluateContext = this.evaluateContext;\n    return serializationObject;\n  }\n  _deserialize(serializationObject) {\n    super._deserialize(serializationObject);\n    this.evaluateContext = serializationObject.evaluateContext;\n  }\n}\n__decorate([editableInPropertyPage(\"Evaluate context\", PropertyTypeForEdition.Boolean, \"ADVANCED\", {\n  notifiers: {\n    rebuild: true\n  }\n})], GeometryCollectionBlock.prototype, \"evaluateContext\", void 0);\nRegisterClass(\"BABYLON.GeometryCollectionBlock\", GeometryCollectionBlock);","map":{"version":3,"names":["NodeGeometryBlock","RegisterClass","NodeGeometryBlockConnectionPointTypes","PropertyTypeForEdition","editableInPropertyPage","GeometryCollectionBlock","constructor","name","evaluateContext","registerInput","Geometry","registerOutput","_outputs","_typeConnectionSource","_inputs","_linkConnectionTypes","getClassName","geometry0","geometry1","geometry2","geometry3","geometry4","geometry5","geometry6","geometry7","geometry8","geometry9","output","_storeGeometry","input","state","index","availables","isConnected","vertexData","getConnectedValue","metadata","collectionId","push","_buildBlock","func","length","Math","round","random","_storedFunction","_storedValue","_dumpPropertiesCode","codeString","_codeVariableName","serialize","serializationObject","_deserialize","__decorate","Boolean","notifiers","rebuild"],"sources":["../../../../../../dev/core/src/Meshes/Node/Blocks/geometryCollectionBlock.ts"],"sourcesContent":["import { NodeGeometryBlock } from \"../nodeGeometryBlock\";\r\nimport type { NodeGeometryConnectionPoint } from \"../nodeGeometryBlockConnectionPoint\";\r\nimport { RegisterClass } from \"../../../Misc/typeStore\";\r\nimport { NodeGeometryBlockConnectionPointTypes } from \"../Enums/nodeGeometryConnectionPointTypes\";\r\nimport type { VertexData } from \"../../mesh.vertexData\";\r\nimport type { NodeGeometryBuildState } from \"../nodeGeometryBuildState\";\r\nimport { PropertyTypeForEdition, editableInPropertyPage } from \"../../../Decorators/nodeDecorator\";\r\n\r\n/**\r\n * Block used to randomly pick a geometry from a collection\r\n */\r\nexport class GeometryCollectionBlock extends NodeGeometryBlock {\r\n    /**\r\n     * Gets or sets a boolean indicating that this block can evaluate context\r\n     * Build performance is improved when this value is set to false as the system will cache values instead of reevaluating everything per context change\r\n     */\r\n    @editableInPropertyPage(\"Evaluate context\", PropertyTypeForEdition.Boolean, \"ADVANCED\", { notifiers: { rebuild: true } })\r\n    public evaluateContext = true;\r\n\r\n    /**\r\n     * Create a new GeometryCollectionBlock\r\n     * @param name defines the block name\r\n     */\r\n    public constructor(name: string) {\r\n        super(name);\r\n\r\n        this.registerInput(\"geometry0\", NodeGeometryBlockConnectionPointTypes.Geometry, true);\r\n        this.registerInput(\"geometry1\", NodeGeometryBlockConnectionPointTypes.Geometry, true);\r\n        this.registerInput(\"geometry2\", NodeGeometryBlockConnectionPointTypes.Geometry, true);\r\n        this.registerInput(\"geometry3\", NodeGeometryBlockConnectionPointTypes.Geometry, true);\r\n        this.registerInput(\"geometry4\", NodeGeometryBlockConnectionPointTypes.Geometry, true);\r\n        this.registerInput(\"geometry5\", NodeGeometryBlockConnectionPointTypes.Geometry, true);\r\n        this.registerInput(\"geometry6\", NodeGeometryBlockConnectionPointTypes.Geometry, true);\r\n        this.registerInput(\"geometry7\", NodeGeometryBlockConnectionPointTypes.Geometry, true);\r\n        this.registerInput(\"geometry8\", NodeGeometryBlockConnectionPointTypes.Geometry, true);\r\n        this.registerInput(\"geometry9\", NodeGeometryBlockConnectionPointTypes.Geometry, true);\r\n\r\n        this.registerOutput(\"output\", NodeGeometryBlockConnectionPointTypes.Geometry);\r\n\r\n        this._outputs[0]._typeConnectionSource = this._inputs[0];\r\n        this._linkConnectionTypes(0, 1);\r\n    }\r\n\r\n    /**\r\n     * Gets the current class name\r\n     * @returns the class name\r\n     */\r\n    public getClassName() {\r\n        return \"GeometryCollectionBlock\";\r\n    }\r\n\r\n    /**\r\n     * Gets the geometry0 input component\r\n     */\r\n    public get geometry0(): NodeGeometryConnectionPoint {\r\n        return this._inputs[0];\r\n    }\r\n\r\n    /**\r\n     * Gets the geometry1 input component\r\n     */\r\n    public get geometry1(): NodeGeometryConnectionPoint {\r\n        return this._inputs[1];\r\n    }\r\n\r\n    /**\r\n     * Gets the geometry2 input component\r\n     */\r\n    public get geometry2(): NodeGeometryConnectionPoint {\r\n        return this._inputs[2];\r\n    }\r\n\r\n    /**\r\n     * Gets the geometry3 input component\r\n     */\r\n    public get geometry3(): NodeGeometryConnectionPoint {\r\n        return this._inputs[3];\r\n    }\r\n\r\n    /**\r\n     * Gets the geometry4 input component\r\n     */\r\n    public get geometry4(): NodeGeometryConnectionPoint {\r\n        return this._inputs[4];\r\n    }\r\n\r\n    /**\r\n     * Gets the geometry5 input component\r\n     */\r\n    public get geometry5(): NodeGeometryConnectionPoint {\r\n        return this._inputs[5];\r\n    }\r\n\r\n    /**\r\n     * Gets the geometry6 input component\r\n     */\r\n    public get geometry6(): NodeGeometryConnectionPoint {\r\n        return this._inputs[6];\r\n    }\r\n\r\n    /**\r\n     * Gets the geometry7 input component\r\n     */\r\n    public get geometry7(): NodeGeometryConnectionPoint {\r\n        return this._inputs[7];\r\n    }\r\n\r\n    /**\r\n     * Gets the geometry8 input component\r\n     */\r\n    public get geometry8(): NodeGeometryConnectionPoint {\r\n        return this._inputs[8];\r\n    }\r\n\r\n    /**\r\n     * Gets the geometry9 input component\r\n     */\r\n    public get geometry9(): NodeGeometryConnectionPoint {\r\n        return this._inputs[9];\r\n    }\r\n\r\n    /**\r\n     * Gets the geometry output component\r\n     */\r\n    public get output(): NodeGeometryConnectionPoint {\r\n        return this._outputs[0];\r\n    }\r\n\r\n    private _storeGeometry(input: NodeGeometryConnectionPoint, state: NodeGeometryBuildState, index: number, availables: VertexData[]) {\r\n        if (input.isConnected) {\r\n            const vertexData = input.getConnectedValue(state) as VertexData;\r\n            if (!vertexData) {\r\n                return;\r\n            }\r\n            vertexData.metadata = vertexData.metadata || {};\r\n            vertexData.metadata.collectionId = index;\r\n            availables.push(vertexData);\r\n        }\r\n    }\r\n\r\n    protected _buildBlock(state: NodeGeometryBuildState) {\r\n        const func = (state: NodeGeometryBuildState) => {\r\n            const availables: VertexData[] = [];\r\n\r\n            this._storeGeometry(this.geometry0, state, 0, availables);\r\n            this._storeGeometry(this.geometry1, state, 1, availables);\r\n            this._storeGeometry(this.geometry2, state, 2, availables);\r\n            this._storeGeometry(this.geometry3, state, 3, availables);\r\n            this._storeGeometry(this.geometry4, state, 4, availables);\r\n            this._storeGeometry(this.geometry5, state, 5, availables);\r\n            this._storeGeometry(this.geometry6, state, 6, availables);\r\n            this._storeGeometry(this.geometry7, state, 7, availables);\r\n            this._storeGeometry(this.geometry8, state, 8, availables);\r\n            this._storeGeometry(this.geometry9, state, 9, availables);\r\n\r\n            if (!availables.length) {\r\n                return null;\r\n            }\r\n            return availables[Math.round(Math.random() * (availables.length - 1))];\r\n        };\r\n\r\n        if (this.evaluateContext) {\r\n            this.output._storedFunction = func;\r\n        } else {\r\n            this.output._storedFunction = null;\r\n            this.output._storedValue = func(state);\r\n        }\r\n    }\r\n\r\n    protected _dumpPropertiesCode() {\r\n        const codeString = super._dumpPropertiesCode() + `${this._codeVariableName}.evaluateContext = ${this.evaluateContext ? \"true\" : \"false\"};\\n`;\r\n        return codeString;\r\n    }\r\n\r\n    /**\r\n     * Serializes this block in a JSON representation\r\n     * @returns the serialized block object\r\n     */\r\n    public serialize(): any {\r\n        const serializationObject = super.serialize();\r\n\r\n        serializationObject.evaluateContext = this.evaluateContext;\r\n\r\n        return serializationObject;\r\n    }\r\n\r\n    public _deserialize(serializationObject: any) {\r\n        super._deserialize(serializationObject);\r\n\r\n        this.evaluateContext = serializationObject.evaluateContext;\r\n    }\r\n}\r\n\r\nRegisterClass(\"BABYLON.GeometryCollectionBlock\", GeometryCollectionBlock);\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}