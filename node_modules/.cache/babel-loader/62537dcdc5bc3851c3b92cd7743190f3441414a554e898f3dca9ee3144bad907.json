{"ast":null,"code":"import { FlowGraphWithOnDoneExecutionBlock } from \"../../../flowGraphWithOnDoneExecutionBlock.js\";\nimport { RichTypeNumber } from \"../../../flowGraphRichTypes.js\";\nimport { RegisterClass } from \"../../../../Misc/typeStore.js\";\n/**\n * @experimental\n * Block that executes an action in a loop.\n */\nexport class FlowGraphForLoopBlock extends FlowGraphWithOnDoneExecutionBlock {\n  constructor(config) {\n    super(config);\n    this.startIndex = this._registerDataInput(\"startIndex\", RichTypeNumber);\n    this.endIndex = this._registerDataInput(\"endIndex\", RichTypeNumber);\n    this.step = this._registerDataInput(\"step\", RichTypeNumber);\n    this.index = this._registerDataOutput(\"index\", RichTypeNumber);\n    this.onLoop = this._registerSignalOutput(\"onLoop\");\n    this.onDone = this._registerSignalOutput(\"onDone\");\n  }\n  _executeLoop(context) {\n    let index = context._getExecutionVariable(this, \"index\");\n    const endIndex = context._getExecutionVariable(this, \"endIndex\");\n    if (index < endIndex) {\n      this.index.setValue(index, context);\n      this.onLoop._activateSignal(context);\n      const step = context._getExecutionVariable(this, \"step\", 1);\n      index += step;\n      context._setExecutionVariable(this, \"index\", index);\n      this._executeLoop(context);\n    } else {\n      this.onDone._activateSignal(context);\n    }\n  }\n  /**\n   * @internal\n   */\n  _execute(context) {\n    const index = this.startIndex.getValue(context);\n    const endIndex = this.endIndex.getValue(context);\n    const step = this.step.getValue(context);\n    context._setExecutionVariable(this, \"index\", index);\n    context._setExecutionVariable(this, \"endIndex\", endIndex);\n    context._setExecutionVariable(this, \"step\", step);\n    this._executeLoop(context);\n  }\n  getClassName() {\n    return \"FGForLoopBlock\";\n  }\n}\nRegisterClass(\"FGForLoopBlock\", FlowGraphForLoopBlock);","map":{"version":3,"names":["FlowGraphWithOnDoneExecutionBlock","RichTypeNumber","RegisterClass","FlowGraphForLoopBlock","constructor","config","startIndex","_registerDataInput","endIndex","step","index","_registerDataOutput","onLoop","_registerSignalOutput","onDone","_executeLoop","context","_getExecutionVariable","setValue","_activateSignal","_setExecutionVariable","_execute","getValue","getClassName"],"sources":["../../../../../../../dev/core/src/FlowGraph/Blocks/Execution/ControlFlow/flowGraphForLoopBlock.ts"],"sourcesContent":["import type { FlowGraphSignalConnection } from \"../../../flowGraphSignalConnection\";\r\nimport type { FlowGraphDataConnection } from \"../../../flowGraphDataConnection\";\r\nimport { FlowGraphWithOnDoneExecutionBlock } from \"core/FlowGraph/flowGraphWithOnDoneExecutionBlock\";\r\nimport type { FlowGraphContext } from \"../../../flowGraphContext\";\r\nimport { RichTypeNumber } from \"../../../flowGraphRichTypes\";\r\nimport { RegisterClass } from \"../../../../Misc/typeStore\";\r\nimport type { IFlowGraphBlockConfiguration } from \"../../../flowGraphBlock\";\r\n/**\r\n * @experimental\r\n * Block that executes an action in a loop.\r\n */\r\nexport class FlowGraphForLoopBlock extends FlowGraphWithOnDoneExecutionBlock {\r\n    /**\r\n     * Input connection: The start index of the loop.\r\n     */\r\n    public readonly startIndex: FlowGraphDataConnection<number>;\r\n    /**\r\n     * Input connection: The end index of the loop.\r\n     */\r\n    public readonly endIndex: FlowGraphDataConnection<number>;\r\n    /**\r\n     * Input connection: The step of the loop.\r\n     */\r\n    public readonly step: FlowGraphDataConnection<number>;\r\n    /**\r\n     * Output connection: The current index of the loop.\r\n     */\r\n    public readonly index: FlowGraphDataConnection<number>;\r\n    /**\r\n     * Output connection: The signal that is activated when the loop body is executed.\r\n     */\r\n    public readonly onLoop: FlowGraphSignalConnection;\r\n    /**\r\n     * Output connection: The signal that is activated when the loop is done.\r\n     */\r\n    public readonly onDone: FlowGraphSignalConnection;\r\n\r\n    public constructor(config?: IFlowGraphBlockConfiguration) {\r\n        super(config);\r\n\r\n        this.startIndex = this._registerDataInput(\"startIndex\", RichTypeNumber);\r\n        this.endIndex = this._registerDataInput(\"endIndex\", RichTypeNumber);\r\n        this.step = this._registerDataInput(\"step\", RichTypeNumber);\r\n\r\n        this.index = this._registerDataOutput(\"index\", RichTypeNumber);\r\n        this.onLoop = this._registerSignalOutput(\"onLoop\");\r\n        this.onDone = this._registerSignalOutput(\"onDone\");\r\n    }\r\n\r\n    private _executeLoop(context: FlowGraphContext) {\r\n        let index = context._getExecutionVariable(this, \"index\");\r\n        const endIndex = context._getExecutionVariable(this, \"endIndex\");\r\n        if (index < endIndex) {\r\n            this.index.setValue(index, context);\r\n            this.onLoop._activateSignal(context);\r\n            const step = context._getExecutionVariable(this, \"step\", 1);\r\n            index += step;\r\n            context._setExecutionVariable(this, \"index\", index);\r\n            this._executeLoop(context);\r\n        } else {\r\n            this.onDone._activateSignal(context);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _execute(context: FlowGraphContext): void {\r\n        const index = this.startIndex.getValue(context);\r\n        const endIndex = this.endIndex.getValue(context);\r\n        const step = this.step.getValue(context);\r\n        context._setExecutionVariable(this, \"index\", index);\r\n        context._setExecutionVariable(this, \"endIndex\", endIndex);\r\n        context._setExecutionVariable(this, \"step\", step);\r\n        this._executeLoop(context);\r\n    }\r\n\r\n    public getClassName(): string {\r\n        return \"FGForLoopBlock\";\r\n    }\r\n}\r\nRegisterClass(\"FGForLoopBlock\", FlowGraphForLoopBlock);\r\n"],"mappings":"AAEA,SAASA,iCAAiC,QAAE;AAE5C,SAASC,cAAc,QAAQ,gCAA8B;AAC7D,SAASC,aAAa,QAAQ,+BAA6B;AAE3D;;;;AAIA,OAAM,MAAOC,qBAAsB,SAAQH,iCAAiC;EA0BxEI,YAAmBC,MAAqC;IACpD,KAAK,CAACA,MAAM,CAAC;IAEb,IAAI,CAACC,UAAU,GAAG,IAAI,CAACC,kBAAkB,CAAC,YAAY,EAAEN,cAAc,CAAC;IACvE,IAAI,CAACO,QAAQ,GAAG,IAAI,CAACD,kBAAkB,CAAC,UAAU,EAAEN,cAAc,CAAC;IACnE,IAAI,CAACQ,IAAI,GAAG,IAAI,CAACF,kBAAkB,CAAC,MAAM,EAAEN,cAAc,CAAC;IAE3D,IAAI,CAACS,KAAK,GAAG,IAAI,CAACC,mBAAmB,CAAC,OAAO,EAAEV,cAAc,CAAC;IAC9D,IAAI,CAACW,MAAM,GAAG,IAAI,CAACC,qBAAqB,CAAC,QAAQ,CAAC;IAClD,IAAI,CAACC,MAAM,GAAG,IAAI,CAACD,qBAAqB,CAAC,QAAQ,CAAC;EACtD;EAEQE,YAAYA,CAACC,OAAyB;IAC1C,IAAIN,KAAK,GAAGM,OAAO,CAACC,qBAAqB,CAAC,IAAI,EAAE,OAAO,CAAC;IACxD,MAAMT,QAAQ,GAAGQ,OAAO,CAACC,qBAAqB,CAAC,IAAI,EAAE,UAAU,CAAC;IAChE,IAAIP,KAAK,GAAGF,QAAQ,EAAE;MAClB,IAAI,CAACE,KAAK,CAACQ,QAAQ,CAACR,KAAK,EAAEM,OAAO,CAAC;MACnC,IAAI,CAACJ,MAAM,CAACO,eAAe,CAACH,OAAO,CAAC;MACpC,MAAMP,IAAI,GAAGO,OAAO,CAACC,qBAAqB,CAAC,IAAI,EAAE,MAAM,EAAE,CAAC,CAAC;MAC3DP,KAAK,IAAID,IAAI;MACbO,OAAO,CAACI,qBAAqB,CAAC,IAAI,EAAE,OAAO,EAAEV,KAAK,CAAC;MACnD,IAAI,CAACK,YAAY,CAACC,OAAO,CAAC;KAC7B,MAAM;MACH,IAAI,CAACF,MAAM,CAACK,eAAe,CAACH,OAAO,CAAC;;EAE5C;EAEA;;;EAGOK,QAAQA,CAACL,OAAyB;IACrC,MAAMN,KAAK,GAAG,IAAI,CAACJ,UAAU,CAACgB,QAAQ,CAACN,OAAO,CAAC;IAC/C,MAAMR,QAAQ,GAAG,IAAI,CAACA,QAAQ,CAACc,QAAQ,CAACN,OAAO,CAAC;IAChD,MAAMP,IAAI,GAAG,IAAI,CAACA,IAAI,CAACa,QAAQ,CAACN,OAAO,CAAC;IACxCA,OAAO,CAACI,qBAAqB,CAAC,IAAI,EAAE,OAAO,EAAEV,KAAK,CAAC;IACnDM,OAAO,CAACI,qBAAqB,CAAC,IAAI,EAAE,UAAU,EAAEZ,QAAQ,CAAC;IACzDQ,OAAO,CAACI,qBAAqB,CAAC,IAAI,EAAE,MAAM,EAAEX,IAAI,CAAC;IACjD,IAAI,CAACM,YAAY,CAACC,OAAO,CAAC;EAC9B;EAEOO,YAAYA,CAAA;IACf,OAAO,gBAAgB;EAC3B;;AAEJrB,aAAa,CAAC,gBAAgB,EAAEC,qBAAqB,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}