{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\n/**\n * Enum defining the type of properties that can be edited in the property pages in the node editor\n */\nexport var PropertyTypeForEdition;\n(function (PropertyTypeForEdition) {\n  /** property is a boolean */\n  PropertyTypeForEdition[PropertyTypeForEdition[\"Boolean\"] = 0] = \"Boolean\";\n  /** property is a float */\n  PropertyTypeForEdition[PropertyTypeForEdition[\"Float\"] = 1] = \"Float\";\n  /** property is a int */\n  PropertyTypeForEdition[PropertyTypeForEdition[\"Int\"] = 2] = \"Int\";\n  /** property is a Vector2 */\n  PropertyTypeForEdition[PropertyTypeForEdition[\"Vector2\"] = 3] = \"Vector2\";\n  /** property is a list of values */\n  PropertyTypeForEdition[PropertyTypeForEdition[\"List\"] = 4] = \"List\";\n})(PropertyTypeForEdition || (PropertyTypeForEdition = {}));\n/**\n * Decorator that flags a property in a node block as being editable\n * @param displayName\n * @param propertyType\n * @param groupName\n * @param options\n */\nexport function editableInPropertyPage(displayName, propertyType = PropertyTypeForEdition.Boolean, groupName = \"PROPERTIES\", options) {\n  return (target, propertyKey) => {\n    let propStore = target._propStore;\n    if (!propStore) {\n      propStore = [];\n      target._propStore = propStore;\n    }\n    propStore.push({\n      propertyName: propertyKey,\n      displayName: displayName,\n      type: propertyType,\n      groupName: groupName,\n      options: options !== null && options !== void 0 ? options : {}\n    });\n  };\n}","map":{"version":3,"names":["PropertyTypeForEdition","editableInPropertyPage","displayName","propertyType","Boolean","groupName","options","target","propertyKey","propStore","_propStore","push","propertyName","type"],"sources":["../../../../dev/core/src/Decorators/nodeDecorator.ts"],"sourcesContent":["import type { Nullable } from \"../types\";\r\nimport type { Scene } from \"../scene\";\r\n\r\n/**\r\n * Enum defining the type of properties that can be edited in the property pages in the node editor\r\n */\r\nexport enum PropertyTypeForEdition {\r\n    /** property is a boolean */\r\n    Boolean,\r\n    /** property is a float */\r\n    Float,\r\n    /** property is a int */\r\n    Int,\r\n    /** property is a Vector2 */\r\n    Vector2,\r\n    /** property is a list of values */\r\n    List,\r\n}\r\n\r\n/**\r\n * Interface that defines an option in a variable of type list\r\n */\r\nexport interface IEditablePropertyListOption {\r\n    /** label of the option */\r\n    label: string;\r\n    /** value of the option */\r\n    value: number;\r\n}\r\n\r\n/**\r\n * Interface that defines the options available for an editable property\r\n */\r\nexport interface IEditablePropertyOption {\r\n    /** min value */\r\n    min?: number;\r\n    /** max value */\r\n    max?: number;\r\n    /** notifiers: indicates which actions to take when the property is changed */\r\n    notifiers?: {\r\n        /** the entity should be rebuilt */\r\n        rebuild?: boolean;\r\n        /** the preview should be updated */\r\n        update?: boolean;\r\n        /** the onPreviewCommandActivated observer of the preview manager should be triggered */\r\n        activatePreviewCommand?: boolean;\r\n        /** a callback to trigger */\r\n        callback?: (scene: Nullable<Scene>, block: any) => boolean | undefined | void;\r\n        /** a callback to validate the property. Returns true if the property is ok, else false. If false, the rebuild/update/callback events won't be called */\r\n        onValidation?: (block: any, propertyName: string) => boolean;\r\n    };\r\n    /** list of the options for a variable of type list */\r\n    options?: IEditablePropertyListOption[];\r\n}\r\n\r\n/**\r\n * Interface that describes an editable property\r\n */\r\nexport interface IPropertyDescriptionForEdition {\r\n    /** name of the property */\r\n    propertyName: string;\r\n    /** display name of the property */\r\n    displayName: string;\r\n    /** type of the property */\r\n    type: PropertyTypeForEdition;\r\n    /** group of the property - all properties with the same group value will be displayed in a specific section */\r\n    groupName: string;\r\n    /** options for the property */\r\n    options: IEditablePropertyOption;\r\n}\r\n\r\n/**\r\n * Decorator that flags a property in a node block as being editable\r\n * @param displayName\r\n * @param propertyType\r\n * @param groupName\r\n * @param options\r\n */\r\nexport function editableInPropertyPage(\r\n    displayName: string,\r\n    propertyType: PropertyTypeForEdition = PropertyTypeForEdition.Boolean,\r\n    groupName: string = \"PROPERTIES\",\r\n    options?: IEditablePropertyOption\r\n) {\r\n    return (target: any, propertyKey: string) => {\r\n        let propStore: IPropertyDescriptionForEdition[] = target._propStore;\r\n        if (!propStore) {\r\n            propStore = [];\r\n            target._propStore = propStore;\r\n        }\r\n        propStore.push({\r\n            propertyName: propertyKey,\r\n            displayName: displayName,\r\n            type: propertyType,\r\n            groupName: groupName,\r\n            options: options ?? {},\r\n        });\r\n    };\r\n}\r\n"],"mappings":";AAGA;;;AAGA,WAAYA,sBAWX;AAXD,WAAYA,sBAAsB;EAC9B;EACAA,sBAAA,CAAAA,sBAAA,4BAAO;EACP;EACAA,sBAAA,CAAAA,sBAAA,wBAAK;EACL;EACAA,sBAAA,CAAAA,sBAAA,oBAAG;EACH;EACAA,sBAAA,CAAAA,sBAAA,4BAAO;EACP;EACAA,sBAAA,CAAAA,sBAAA,sBAAI;AACR,CAAC,EAXWA,sBAAsB,KAAtBA,sBAAsB;AAgElC;;;;;;;AAOA,OAAM,SAAUC,sBAAsBA,CAClCC,WAAmB,EACnBC,YAAA,GAAuCH,sBAAsB,CAACI,OAAO,EACrEC,SAAA,GAAoB,YAAY,EAChCC,OAAiC;EAEjC,OAAO,CAACC,MAAW,EAAEC,WAAmB,KAAI;IACxC,IAAIC,SAAS,GAAqCF,MAAM,CAACG,UAAU;IACnE,IAAI,CAACD,SAAS,EAAE;MACZA,SAAS,GAAG,EAAE;MACdF,MAAM,CAACG,UAAU,GAAGD,SAAS;;IAEjCA,SAAS,CAACE,IAAI,CAAC;MACXC,YAAY,EAAEJ,WAAW;MACzBN,WAAW,EAAEA,WAAW;MACxBW,IAAI,EAAEV,YAAY;MAClBE,SAAS,EAAEA,SAAS;MACpBC,OAAO,EAAEA,OAAO,aAAPA,OAAO,cAAPA,OAAO,GAAI;KACvB,CAAC;EACN,CAAC;AACL"},"metadata":{},"sourceType":"module","externalDependencies":[]}