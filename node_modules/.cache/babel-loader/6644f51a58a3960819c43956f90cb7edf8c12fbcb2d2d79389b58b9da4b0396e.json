{"ast":null,"code":"import { AdvancedDynamicTexture } from \"../../2D/advancedDynamicTexture.js\";\nimport { Control3D } from \"./control3D.js\";\nimport { Texture } from \"@babylonjs/core/Materials/Textures/texture.js\";\n/**\n * The base class for controls that display content\n */\nexport class ContentDisplay3D extends Control3D {\n  constructor() {\n    super(...arguments);\n    this._contentResolution = 512;\n    this._contentScaleRatio = 2;\n  }\n  /**\n   * Gets or sets the GUI 2D content used to display the button's facade\n   */\n  get content() {\n    return this._content;\n  }\n  set content(value) {\n    this._content = value;\n    if (!value || !this._host || !this._host.utilityLayer) {\n      return;\n    }\n    if (!this._facadeTexture) {\n      this._facadeTexture = new AdvancedDynamicTexture(\"Facade\", this._contentResolution, this._contentResolution, this._host.utilityLayer.utilityLayerScene, true, Texture.TRILINEAR_SAMPLINGMODE);\n      this._setFacadeTextureScaling();\n      this._facadeTexture.premulAlpha = true;\n    } else {\n      this._facadeTexture.rootContainer.clearControls();\n    }\n    this._facadeTexture.addControl(value);\n    this._applyFacade(this._facadeTexture);\n  }\n  _setFacadeTextureScaling() {\n    var _a;\n    if (this._facadeTexture) {\n      this._facadeTexture.rootContainer.scaleX = this._contentScaleRatio;\n      this._facadeTexture.rootContainer.scaleY = (_a = this._contentScaleRatioY) !== null && _a !== void 0 ? _a : this._contentScaleRatio;\n    }\n  }\n  /**\n   * Gets or sets the texture resolution used to render content (512 by default)\n   */\n  get contentResolution() {\n    return this._contentResolution;\n  }\n  set contentResolution(value) {\n    if (this._contentResolution === value) {\n      return;\n    }\n    this._contentResolution = value;\n    this._resetContent();\n  }\n  _disposeFacadeTexture() {\n    if (this._facadeTexture) {\n      this._facadeTexture.dispose();\n      this._facadeTexture = null;\n    }\n  }\n  _resetContent() {\n    this._disposeFacadeTexture();\n    this.content = this._content;\n  }\n  /**\n   * Apply the facade texture (created from the content property).\n   * This function can be overloaded by child classes\n   * @param facadeTexture defines the AdvancedDynamicTexture to use\n   */\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  _applyFacade(facadeTexture) {}\n}","map":{"version":3,"names":["AdvancedDynamicTexture","Control3D","Texture","ContentDisplay3D","constructor","_contentResolution","_contentScaleRatio","content","_content","value","_host","utilityLayer","_facadeTexture","utilityLayerScene","TRILINEAR_SAMPLINGMODE","_setFacadeTextureScaling","premulAlpha","rootContainer","clearControls","addControl","_applyFacade","scaleX","scaleY","_a","_contentScaleRatioY","contentResolution","_resetContent","_disposeFacadeTexture","dispose","facadeTexture"],"sources":["../../../../../dev/gui/src/3D/controls/contentDisplay3D.ts"],"sourcesContent":["import type { Control } from \"../../2D/controls/control\";\r\nimport { AdvancedDynamicTexture } from \"../../2D/advancedDynamicTexture\";\r\nimport type { Nullable } from \"core/types\";\r\nimport { Control3D } from \"./control3D\";\r\nimport { Texture } from \"core/Materials/Textures/texture\";\r\n\r\n/**\r\n * The base class for controls that display content\r\n */\r\nexport class ContentDisplay3D extends Control3D {\r\n    private _content: Control;\r\n    private _facadeTexture: Nullable<AdvancedDynamicTexture>;\r\n    protected _contentResolution = 512;\r\n    protected _contentScaleRatio = 2;\r\n    protected _contentScaleRatioY?: number;\r\n\r\n    /**\r\n     * Gets or sets the GUI 2D content used to display the button's facade\r\n     */\r\n    public get content(): Control {\r\n        return this._content;\r\n    }\r\n\r\n    public set content(value: Control) {\r\n        this._content = value;\r\n\r\n        if (!value || !this._host || !this._host.utilityLayer) {\r\n            return;\r\n        }\r\n\r\n        if (!this._facadeTexture) {\r\n            this._facadeTexture = new AdvancedDynamicTexture(\r\n                \"Facade\",\r\n                this._contentResolution,\r\n                this._contentResolution,\r\n                this._host.utilityLayer.utilityLayerScene,\r\n                true,\r\n                Texture.TRILINEAR_SAMPLINGMODE\r\n            );\r\n            this._setFacadeTextureScaling();\r\n            this._facadeTexture.premulAlpha = true;\r\n        } else {\r\n            this._facadeTexture.rootContainer.clearControls();\r\n        }\r\n\r\n        this._facadeTexture.addControl(value);\r\n\r\n        this._applyFacade(this._facadeTexture);\r\n    }\r\n\r\n    protected _setFacadeTextureScaling() {\r\n        if (this._facadeTexture) {\r\n            this._facadeTexture.rootContainer.scaleX = this._contentScaleRatio;\r\n            this._facadeTexture.rootContainer.scaleY = this._contentScaleRatioY ?? this._contentScaleRatio;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the texture resolution used to render content (512 by default)\r\n     */\r\n    public get contentResolution(): number {\r\n        return this._contentResolution;\r\n    }\r\n\r\n    public set contentResolution(value: number) {\r\n        if (this._contentResolution === value) {\r\n            return;\r\n        }\r\n\r\n        this._contentResolution = value;\r\n        this._resetContent();\r\n    }\r\n\r\n    protected _disposeFacadeTexture() {\r\n        if (this._facadeTexture) {\r\n            this._facadeTexture.dispose();\r\n            this._facadeTexture = null;\r\n        }\r\n    }\r\n\r\n    protected _resetContent() {\r\n        this._disposeFacadeTexture();\r\n        this.content = this._content;\r\n    }\r\n\r\n    /**\r\n     * Apply the facade texture (created from the content property).\r\n     * This function can be overloaded by child classes\r\n     * @param facadeTexture defines the AdvancedDynamicTexture to use\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    protected _applyFacade(facadeTexture: AdvancedDynamicTexture) {}\r\n}\r\n"],"mappings":"AACA,SAASA,sBAAsB,QAAQ,oCAAkC;AAEzE,SAASC,SAAS,QAAQ,gBAAc;AACxC,SAASC,OAAO,QAAE;AAElB;;;AAGA,OAAM,MAAOC,gBAAiB,SAAQF,SAAS;EAA/CG,YAAA;;IAGc,KAAAC,kBAAkB,GAAG,GAAG;IACxB,KAAAC,kBAAkB,GAAG,CAAC;EA+EpC;EA5EI;;;EAGA,IAAWC,OAAOA,CAAA;IACd,OAAO,IAAI,CAACC,QAAQ;EACxB;EAEA,IAAWD,OAAOA,CAACE,KAAc;IAC7B,IAAI,CAACD,QAAQ,GAAGC,KAAK;IAErB,IAAI,CAACA,KAAK,IAAI,CAAC,IAAI,CAACC,KAAK,IAAI,CAAC,IAAI,CAACA,KAAK,CAACC,YAAY,EAAE;MACnD;;IAGJ,IAAI,CAAC,IAAI,CAACC,cAAc,EAAE;MACtB,IAAI,CAACA,cAAc,GAAG,IAAIZ,sBAAsB,CAC5C,QAAQ,EACR,IAAI,CAACK,kBAAkB,EACvB,IAAI,CAACA,kBAAkB,EACvB,IAAI,CAACK,KAAK,CAACC,YAAY,CAACE,iBAAiB,EACzC,IAAI,EACJX,OAAO,CAACY,sBAAsB,CACjC;MACD,IAAI,CAACC,wBAAwB,EAAE;MAC/B,IAAI,CAACH,cAAc,CAACI,WAAW,GAAG,IAAI;KACzC,MAAM;MACH,IAAI,CAACJ,cAAc,CAACK,aAAa,CAACC,aAAa,EAAE;;IAGrD,IAAI,CAACN,cAAc,CAACO,UAAU,CAACV,KAAK,CAAC;IAErC,IAAI,CAACW,YAAY,CAAC,IAAI,CAACR,cAAc,CAAC;EAC1C;EAEUG,wBAAwBA,CAAA;;IAC9B,IAAI,IAAI,CAACH,cAAc,EAAE;MACrB,IAAI,CAACA,cAAc,CAACK,aAAa,CAACI,MAAM,GAAG,IAAI,CAACf,kBAAkB;MAClE,IAAI,CAACM,cAAc,CAACK,aAAa,CAACK,MAAM,GAAG,CAAAC,EAAA,OAAI,CAACC,mBAAmB,cAAAD,EAAA,cAAAA,EAAA,GAAI,IAAI,CAACjB,kBAAkB;;EAEtG;EAEA;;;EAGA,IAAWmB,iBAAiBA,CAAA;IACxB,OAAO,IAAI,CAACpB,kBAAkB;EAClC;EAEA,IAAWoB,iBAAiBA,CAAChB,KAAa;IACtC,IAAI,IAAI,CAACJ,kBAAkB,KAAKI,KAAK,EAAE;MACnC;;IAGJ,IAAI,CAACJ,kBAAkB,GAAGI,KAAK;IAC/B,IAAI,CAACiB,aAAa,EAAE;EACxB;EAEUC,qBAAqBA,CAAA;IAC3B,IAAI,IAAI,CAACf,cAAc,EAAE;MACrB,IAAI,CAACA,cAAc,CAACgB,OAAO,EAAE;MAC7B,IAAI,CAAChB,cAAc,GAAG,IAAI;;EAElC;EAEUc,aAAaA,CAAA;IACnB,IAAI,CAACC,qBAAqB,EAAE;IAC5B,IAAI,CAACpB,OAAO,GAAG,IAAI,CAACC,QAAQ;EAChC;EAEA;;;;;EAKA;EACUY,YAAYA,CAACS,aAAqC,GAAG"},"metadata":{},"sourceType":"module","externalDependencies":[]}