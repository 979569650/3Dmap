{"ast":null,"code":"/**\n * Wrapper over subclasses of XRLayer.\n * @internal\n */\nexport class WebXRLayerWrapper {\n  /**\n   * Check if fixed foveation is supported on this device\n   */\n  get isFixedFoveationSupported() {\n    return this.layerType == \"XRWebGLLayer\" && typeof this.layer.fixedFoveation == \"number\";\n  }\n  /**\n   * Get the fixed foveation currently set, as specified by the webxr specs\n   * If this returns null, then fixed foveation is not supported\n   */\n  get fixedFoveation() {\n    if (this.isFixedFoveationSupported) {\n      return this.layer.fixedFoveation;\n    }\n    return null;\n  }\n  /**\n   * Set the fixed foveation to the specified value, as specified by the webxr specs\n   * This value will be normalized to be between 0 and 1, 1 being max foveation, 0 being no foveation\n   */\n  set fixedFoveation(value) {\n    if (this.isFixedFoveationSupported) {\n      const val = Math.max(0, Math.min(1, value || 0));\n      this.layer.fixedFoveation = val;\n    }\n  }\n  constructor( /** The width of the layer's framebuffer. */\n  getWidth, /** The height of the layer's framebuffer. */\n  getHeight, /** The XR layer that this WebXRLayerWrapper wraps. */\n  layer, /** The type of XR layer that is being wrapped. */\n  layerType, /** Create a render target provider for the wrapped layer. */\n  createRenderTargetTextureProvider) {\n    this.getWidth = getWidth;\n    this.getHeight = getHeight;\n    this.layer = layer;\n    this.layerType = layerType;\n    this.createRenderTargetTextureProvider = createRenderTargetTextureProvider;\n  }\n}","map":{"version":3,"names":["WebXRLayerWrapper","isFixedFoveationSupported","layerType","layer","fixedFoveation","value","val","Math","max","min","constructor","getWidth","getHeight","createRenderTargetTextureProvider"],"sources":["../../../../dev/core/src/XR/webXRLayerWrapper.ts"],"sourcesContent":["import type { Nullable } from \"../types\";\r\nimport type { WebXRLayerRenderTargetTextureProvider } from \"./webXRRenderTargetTextureProvider\";\r\nimport type { WebXRSessionManager } from \"./webXRSessionManager\";\r\n\r\n/** Covers all supported subclasses of WebXR's XRCompositionLayer */\r\n// TODO (rgerd): Extend for all other subclasses of XRCompositionLayer.\r\nexport type WebXRCompositionLayerType = \"XRProjectionLayer\";\r\n\r\n/** Covers all supported subclasses of WebXR's XRLayer */\r\nexport type WebXRLayerType = \"XRWebGLLayer\" | WebXRCompositionLayerType;\r\n\r\n/**\r\n * Wrapper over subclasses of XRLayer.\r\n * @internal\r\n */\r\nexport class WebXRLayerWrapper {\r\n    /**\r\n     * Check if fixed foveation is supported on this device\r\n     */\r\n    public get isFixedFoveationSupported(): boolean {\r\n        return this.layerType == \"XRWebGLLayer\" && typeof (this.layer as XRWebGLLayer).fixedFoveation == \"number\";\r\n    }\r\n\r\n    /**\r\n     * Get the fixed foveation currently set, as specified by the webxr specs\r\n     * If this returns null, then fixed foveation is not supported\r\n     */\r\n    public get fixedFoveation(): Nullable<number> {\r\n        if (this.isFixedFoveationSupported) {\r\n            return (this.layer as XRWebGLLayer).fixedFoveation!;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Set the fixed foveation to the specified value, as specified by the webxr specs\r\n     * This value will be normalized to be between 0 and 1, 1 being max foveation, 0 being no foveation\r\n     */\r\n    public set fixedFoveation(value: Nullable<number>) {\r\n        if (this.isFixedFoveationSupported) {\r\n            const val = Math.max(0, Math.min(1, value || 0));\r\n            (this.layer as XRWebGLLayer).fixedFoveation = val;\r\n        }\r\n    }\r\n\r\n    protected constructor(\r\n        /** The width of the layer's framebuffer. */\r\n        public getWidth: () => number,\r\n        /** The height of the layer's framebuffer. */\r\n        public getHeight: () => number,\r\n        /** The XR layer that this WebXRLayerWrapper wraps. */\r\n        public readonly layer: XRLayer,\r\n        /** The type of XR layer that is being wrapped. */\r\n        public readonly layerType: WebXRLayerType,\r\n        /** Create a render target provider for the wrapped layer. */\r\n        public createRenderTargetTextureProvider: (xrSessionManager: WebXRSessionManager) => WebXRLayerRenderTargetTextureProvider\r\n    ) {}\r\n}\r\n"],"mappings":"AAWA;;;;AAIA,OAAM,MAAOA,iBAAiB;EAC1B;;;EAGA,IAAWC,yBAAyBA,CAAA;IAChC,OAAO,IAAI,CAACC,SAAS,IAAI,cAAc,IAAI,OAAQ,IAAI,CAACC,KAAsB,CAACC,cAAc,IAAI,QAAQ;EAC7G;EAEA;;;;EAIA,IAAWA,cAAcA,CAAA;IACrB,IAAI,IAAI,CAACH,yBAAyB,EAAE;MAChC,OAAQ,IAAI,CAACE,KAAsB,CAACC,cAAe;;IAEvD,OAAO,IAAI;EACf;EAEA;;;;EAIA,IAAWA,cAAcA,CAACC,KAAuB;IAC7C,IAAI,IAAI,CAACJ,yBAAyB,EAAE;MAChC,MAAMK,GAAG,GAAGC,IAAI,CAACC,GAAG,CAAC,CAAC,EAAED,IAAI,CAACE,GAAG,CAAC,CAAC,EAAEJ,KAAK,IAAI,CAAC,CAAC,CAAC;MAC/C,IAAI,CAACF,KAAsB,CAACC,cAAc,GAAGE,GAAG;;EAEzD;EAEAI,YAAA,CACI;EACOC,QAAsB,EAC7B;EACOC,SAAuB,EAC9B;EACgBT,KAAc,EAC9B;EACgBD,SAAyB,EACzC;EACOW,iCAAmH;IARnH,KAAAF,QAAQ,GAARA,QAAQ;IAER,KAAAC,SAAS,GAATA,SAAS;IAEA,KAAAT,KAAK,GAALA,KAAK;IAEL,KAAAD,SAAS,GAATA,SAAS;IAElB,KAAAW,iCAAiC,GAAjCA,iCAAiC;EACzC"},"metadata":{},"sourceType":"module","externalDependencies":[]}