{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { AdvancedDynamicTexture } from \"../../../2D/advancedDynamicTexture.js\";\nimport { Animation } from \"@babylonjs/core/Animations/animation.js\";\nimport { AnimationGroup } from \"@babylonjs/core/Animations/animationGroup.js\";\nimport { Color3, Color4 } from \"@babylonjs/core/Maths/math.color.js\";\nimport { Control } from \"../../../2D/controls/control.js\";\nimport { CreatePlane } from \"@babylonjs/core/Meshes/Builders/planeBuilder.js\";\nimport { CreateBox } from \"@babylonjs/core/Meshes/Builders/boxBuilder.js\";\nimport { IsDocumentAvailable } from \"@babylonjs/core/Misc/domManagement.js\";\nimport { FadeInOutBehavior } from \"@babylonjs/core/Behaviors/Meshes/fadeInOutBehavior.js\";\nimport { Grid } from \"../../../2D/controls/grid.js\";\nimport { Image } from \"../../../2D/controls/image.js\";\nimport { MRDLBackglowMaterial } from \"../../materials/mrdl/mrdlBackglowMaterial.js\";\nimport { MRDLBackplateMaterial } from \"../../materials/mrdl/mrdlBackplateMaterial.js\";\nimport { MRDLFrontplateMaterial } from \"../../materials/mrdl/mrdlFrontplateMaterial.js\";\nimport { MRDLInnerquadMaterial } from \"../../materials/mrdl/mrdlInnerquadMaterial.js\";\nimport { Rectangle } from \"../../../2D/controls/rectangle.js\";\nimport { SceneLoader } from \"@babylonjs/core/Loading/sceneLoader.js\";\nimport { StackPanel } from \"../../../2D/controls/stackPanel.js\";\nimport { StandardMaterial } from \"@babylonjs/core/Materials/standardMaterial.js\";\nimport { TextBlock } from \"../../../2D/controls/textBlock.js\";\nimport { TouchButton3D } from \"../touchButton3D.js\";\nimport { TransformNode } from \"@babylonjs/core/Meshes/transformNode.js\";\nimport { Vector3 } from \"@babylonjs/core/Maths/math.vector.js\";\n/**\n * Class used to create the mrtkv3 button\n */\nexport class TouchHolographicButton extends TouchButton3D {\n  _disposeTooltip() {\n    this._tooltipFade = null;\n    if (this._tooltipTextBlock) {\n      this._tooltipTextBlock.dispose();\n    }\n    if (this._tooltipTexture) {\n      this._tooltipTexture.dispose();\n    }\n    if (this._tooltipMesh) {\n      this._tooltipMesh.dispose();\n    }\n    this.onPointerEnterObservable.remove(this._tooltipHoverObserver);\n    this.onPointerOutObservable.remove(this._tooltipOutObserver);\n  }\n  /**\n   * Rendering ground id of all the mesh in the button\n   */\n  set renderingGroupId(id) {\n    this._backPlate.renderingGroupId = id;\n    this._textPlate.renderingGroupId = id;\n    this._frontPlate.renderingGroupId = id;\n    this._backGlow.renderingGroupId = id;\n    this._innerQuad.renderingGroupId = id;\n    if (this._tooltipMesh) {\n      this._tooltipMesh.renderingGroupId = id;\n    }\n  }\n  get renderingGroupId() {\n    return this._backPlate.renderingGroupId;\n  }\n  /**\n   * Gets the mesh used to render this control\n   */\n  get mesh() {\n    return this._backPlate;\n  }\n  /**\n   * Text to be displayed on the tooltip shown when hovering on the button. When set to null tooltip is disabled. (Default: null)\n   * Set this property after adding the button to the GUI3DManager\n   */\n  set tooltipText(text) {\n    if (!text) {\n      this._disposeTooltip();\n      return;\n    }\n    if (!this._tooltipFade) {\n      const rightHandedScene = this._backPlate._scene.useRightHandedSystem;\n      // Create tooltip with mesh and text\n      this._tooltipMesh = CreatePlane(\"\", {\n        size: 1\n      }, this._backPlate._scene);\n      this._tooltipMesh.position = Vector3.Down().scale(0.7).add(Vector3.Forward(rightHandedScene).scale(-0.15));\n      this._tooltipMesh.isPickable = false;\n      this._tooltipMesh.parent = this._frontPlateCollisionMesh;\n      // Create text texture for the tooltip\n      this._tooltipTexture = AdvancedDynamicTexture.CreateForMesh(this._tooltipMesh);\n      const tooltipBackground = new Rectangle();\n      tooltipBackground.height = 0.25;\n      tooltipBackground.width = 0.8;\n      tooltipBackground.cornerRadius = 25;\n      tooltipBackground.color = \"#ffffff\";\n      tooltipBackground.thickness = 20;\n      tooltipBackground.background = \"#060668\";\n      this._tooltipTexture.addControl(tooltipBackground);\n      this._tooltipTextBlock = new TextBlock();\n      this._tooltipTextBlock.color = \"white\";\n      this._tooltipTextBlock.fontSize = 100;\n      this._tooltipTexture.addControl(this._tooltipTextBlock);\n      // Add hover action to tooltip\n      this._tooltipFade = new FadeInOutBehavior();\n      this._tooltipFade.delay = 500;\n      this._tooltipMesh.addBehavior(this._tooltipFade);\n      this._tooltipHoverObserver = this.onPointerEnterObservable.add(() => {\n        if (this._tooltipFade) {\n          this._tooltipFade.fadeIn(true);\n        }\n      });\n      this._tooltipOutObserver = this.onPointerOutObservable.add(() => {\n        if (this._tooltipFade) {\n          this._tooltipFade.fadeIn(false);\n        }\n      });\n    }\n    if (this._tooltipTextBlock) {\n      this._tooltipTextBlock.text = text;\n    }\n  }\n  get tooltipText() {\n    var _a;\n    return ((_a = this._tooltipTextBlock) === null || _a === void 0 ? void 0 : _a.text) || null;\n  }\n  /**\n   * Gets or sets text for the button\n   */\n  get text() {\n    return this._text;\n  }\n  set text(value) {\n    if (this._text === value) {\n      return;\n    }\n    this._text = value;\n    this._rebuildContent();\n  }\n  /**\n   * Gets or sets subtext for a button with larger width\n   */\n  get subtext() {\n    return this._subtext;\n  }\n  set subtext(value) {\n    if (this._subtext === value) {\n      return;\n    }\n    this._subtext = value;\n    this._rebuildContent();\n  }\n  /**\n   * Gets or sets the image url for the button\n   */\n  get imageUrl() {\n    return this._imageUrl;\n  }\n  set imageUrl(value) {\n    if (this._imageUrl === value) {\n      return;\n    }\n    this._imageUrl = value;\n    this._rebuildContent();\n  }\n  /**\n   * Gets the back material used by this button\n   */\n  get backMaterial() {\n    return this._backMaterial;\n  }\n  /**\n   * Gets the front material used by this button\n   */\n  get frontMaterial() {\n    return this._frontMaterial;\n  }\n  /**\n   * Gets the back glow material used by this button\n   */\n  get backGlowMaterial() {\n    return this._backGlowMaterial;\n  }\n  /**\n   * Gets the inner quad material used by this button\n   */\n  get innerQuadMaterial() {\n    return this._innerQuadMaterial;\n  }\n  /**\n   * Gets the plate material used by this button\n   */\n  get plateMaterial() {\n    return this._plateMaterial;\n  }\n  /**\n   * Gets a boolean indicating if this button shares its material with other V3 Buttons\n   */\n  get shareMaterials() {\n    return this._shareMaterials;\n  }\n  /**\n   * Sets whether the backplate is visible or hidden. Hiding the backplate is not recommended without some sort of replacement\n   */\n  set isBackplateVisible(isVisible) {\n    if (this.mesh && this._backMaterial) {\n      if (isVisible && !this._isBackplateVisible) {\n        this._backPlate.visibility = 1;\n      } else if (!isVisible && this._isBackplateVisible) {\n        this._backPlate.visibility = 0;\n      }\n    }\n    this._isBackplateVisible = isVisible;\n  }\n  /**\n   * Creates a new button\n   * @param name defines the control name\n   * @param shareMaterials\n   */\n  constructor(name, shareMaterials = true) {\n    super(name);\n    /**\n     * Gets or sets the horizontal scaling for the button.\n     */\n    this.width = 1;\n    /**\n     * Gets or sets the vertical scaling for the button.\n     */\n    this.height = 1;\n    /**\n     * Gets or sets the bevel radius for the button.\n     */\n    this.radius = 0.14;\n    /**\n     * Gets or sets the font size of the button text in pixels.\n     * This is only adjustable for a button with width to height ratio greater than 1.\n     */\n    this.textSizeInPixels = 18;\n    /**\n     * Gets or sets the size of the button image in pixels.\n     * This is only adjustable for a button with width to height ratio greater than 1.\n     */\n    this.imageSizeInPixels = 40;\n    /**\n     * Gets or sets the color of the button plate.\n     */\n    this.plateMaterialColor = new Color3(0.4, 0.4, 0.4);\n    // Shared variables for meshes\n    /**\n     * Gets or sets the depth of the button's front plate.\n     * This variable determines the z scaling and z position for some of the button's meshes.\n     */\n    this.frontPlateDepth = 0.2;\n    /**\n     * Gets or sets the depth of the button's back plate.\n     * This variable determines the z scaling and z position for some of the button's meshes.\n     */\n    this.backPlateDepth = 0.04;\n    /**\n     * Gets or sets the offset value for button's back glow.\n     * This variable determines the x, y scaling of the button's meshes.\n     */\n    this.backGlowOffset = 0.1;\n    /**\n     * Gets or sets the value that determines the z scaling and z position for the innerQuad and BackGlow meshes.\n     */\n    this.flatPlaneDepth = 0.001;\n    /**\n     * Gets or sets the radius for FrontMaterial and innerQuadMaterial.\n     */\n    this.innerQuadRadius = this.radius - 0.04;\n    /**\n     * Gets or sets the color for innerQuadMaterial.\n     */\n    this.innerQuadColor = new Color4(0, 0, 0, 0);\n    /**\n     * Gets or sets the color for innerQuadMaterial for when it is toggled.\n     */\n    this.innerQuadToggledColor = new Color4(0.5197843, 0.6485234, 0.9607843, 0.6);\n    /**\n     * Gets or sets the color for innerQuadMaterial for when it is hovered.\n     */\n    this.innerQuadHoverColor = new Color4(1, 1, 1, 0.05);\n    /**\n     * Gets or sets the color for innerQuadMaterial for when it is toggled and hovered.\n     */\n    this.innerQuadToggledHoverColor = new Color4(0.5197843, 0.6485234, 0.9607843, 1);\n    this._isBackplateVisible = true;\n    // Materials\n    this._shareMaterials = true;\n    this._shareMaterials = shareMaterials;\n    this.pointerEnterAnimation = () => {\n      if (this._frontPlate && this._textPlate && !this.isToggleButton) {\n        this._performEnterExitAnimation(1);\n      }\n      if (this.isToggleButton && this._innerQuadMaterial) {\n        if (this.isToggled) {\n          this._innerQuadMaterial.color = this.innerQuadToggledHoverColor;\n        } else {\n          this._innerQuadMaterial.color = this.innerQuadHoverColor;\n        }\n      }\n    };\n    this.pointerOutAnimation = () => {\n      if (this._frontPlate && this._textPlate && !this.isToggleButton) {\n        this._performEnterExitAnimation(-0.8);\n      }\n      if (this.isToggleButton && this._innerQuadMaterial) {\n        this._onToggle(this.isToggled);\n      }\n    };\n    this.pointerDownAnimation = () => {\n      // Do nothing\n    };\n    this.pointerUpAnimation = () => {\n      // Do nothing\n    };\n    this._pointerClickObserver = this.onPointerClickObservable.add(() => {\n      if (this._frontPlate && this._backGlow && !this.isActiveNearInteraction) {\n        this._performClickAnimation();\n      }\n      if (this.isToggleButton && this._innerQuadMaterial) {\n        this._onToggle(this.isToggled);\n      }\n    });\n    this._pointerEnterObserver = this.onPointerEnterObservable.add(() => {\n      this.pointerEnterAnimation();\n    });\n    this._pointerOutObserver = this.onPointerOutObservable.add(() => {\n      this.pointerOutAnimation();\n    });\n    this._toggleObserver = this.onToggleObservable.add(isToggled => {\n      if (isToggled) {\n        this._innerQuadMaterial.color = this.innerQuadToggledColor;\n      } else {\n        this._innerQuadMaterial.color = this.innerQuadColor;\n      }\n    });\n  }\n  _getTypeName() {\n    return \"TouchHolographicButton\";\n  }\n  _rebuildContent() {\n    let content;\n    if (this._getAspectRatio() <= 1) {\n      // align text and image vertically\n      content = this._alignContentVertically();\n    } else {\n      // align text and image horizontally\n      content = this._alignContentHorizontally();\n    }\n    this.content = content;\n  }\n  _getAspectRatio() {\n    return this.width / this.height;\n  }\n  _alignContentVertically() {\n    const panel = new StackPanel();\n    panel.isVertical = true;\n    if (IsDocumentAvailable() && !!document.createElement) {\n      if (this._imageUrl) {\n        const image = new Image();\n        image.source = this._imageUrl;\n        image.heightInPixels = 180;\n        image.widthInPixels = 100;\n        image.paddingTopInPixels = 40;\n        image.paddingBottomInPixels = 40;\n        panel.addControl(image);\n      }\n    }\n    if (this._text) {\n      const text = new TextBlock();\n      text.text = this._text;\n      text.color = \"white\";\n      text.heightInPixels = 30;\n      text.fontSize = 24;\n      panel.addControl(text);\n    }\n    return panel;\n  }\n  _alignContentHorizontally() {\n    let totalPanelWidthInPixels = 240;\n    const padding = 15;\n    const contentContainer = new Rectangle();\n    contentContainer.widthInPixels = totalPanelWidthInPixels;\n    contentContainer.heightInPixels = totalPanelWidthInPixels;\n    contentContainer.color = \"transparent\";\n    contentContainer.setPaddingInPixels(padding, padding, padding, padding);\n    totalPanelWidthInPixels -= padding * 2;\n    const panel = new StackPanel();\n    panel.isVertical = false;\n    panel.scaleY = this._getAspectRatio();\n    if (IsDocumentAvailable() && !!document.createElement) {\n      if (this._imageUrl) {\n        const imageContainer = new Rectangle(`${this.name}_image`);\n        imageContainer.widthInPixels = this.imageSizeInPixels;\n        imageContainer.heightInPixels = this.imageSizeInPixels;\n        imageContainer.color = \"transparent\";\n        totalPanelWidthInPixels -= this.imageSizeInPixels;\n        const image = new Image();\n        image.source = this._imageUrl;\n        imageContainer.addControl(image);\n        panel.addControl(imageContainer);\n      }\n    }\n    if (this._text) {\n      const text = new TextBlock(`${this.name}_text`);\n      text.text = this._text;\n      text.color = \"white\";\n      text.fontSize = this.textSizeInPixels;\n      text.widthInPixels = totalPanelWidthInPixels;\n      if (this._imageUrl) {\n        text.textHorizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\n        text.paddingLeftInPixels = padding;\n      }\n      if (this._subtext) {\n        const textContainer = new Grid();\n        textContainer.addColumnDefinition(1);\n        textContainer.addRowDefinition(0.5);\n        textContainer.addRowDefinition(0.5);\n        textContainer.widthInPixels = totalPanelWidthInPixels;\n        textContainer.heightInPixels = 45;\n        const subtext = new TextBlock(`${this.name}_subtext`);\n        subtext.text = this._subtext;\n        subtext.color = \"#EEEEEEAB\";\n        subtext.fontSize = this.textSizeInPixels * 0.75;\n        subtext.fontWeight = \"600\";\n        if (this._imageUrl) {\n          subtext.textHorizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\n          subtext.paddingLeftInPixels = padding;\n        }\n        textContainer.addControl(text, 0);\n        textContainer.addControl(subtext, 1);\n        panel.addControl(textContainer);\n      } else {\n        panel.addControl(text);\n      }\n    }\n    contentContainer.addControl(panel);\n    return contentContainer;\n  }\n  // Mesh association\n  _createNode(scene) {\n    var _a;\n    this.name = (_a = this.name) !== null && _a !== void 0 ? _a : \"TouchHolographicButton\";\n    const backPlateMesh = this._createBackPlate(scene);\n    const collisionMesh = this._createFrontPlate(scene);\n    const innerQuadMesh = this._createInnerQuad(scene);\n    const backGlowMesh = this._createBackGlow(scene);\n    this._frontPlateCollisionMesh = collisionMesh;\n    this._textPlate = super._createNode(scene);\n    this._textPlate.name = `${this.name}_textPlate`;\n    this._textPlate.isPickable = false;\n    this._textPlate.scaling.x = this.width;\n    this._textPlate.parent = collisionMesh;\n    this._backPlate = backPlateMesh;\n    this._backPlate.position = Vector3.Forward(scene.useRightHandedSystem).scale(this.backPlateDepth / 2);\n    this._backPlate.isPickable = false;\n    this._backPlate.addChild(collisionMesh);\n    this._backPlate.addChild(innerQuadMesh);\n    if (backGlowMesh) {\n      this._backPlate.addChild(backGlowMesh);\n    }\n    const tn = new TransformNode(`${this.name}_root`, scene);\n    this._backPlate.setParent(tn);\n    this.collisionMesh = collisionMesh;\n    this.collidableFrontDirection = this._backPlate.forward.negate(); // Mesh is facing the wrong way\n    return tn;\n  }\n  _createBackPlate(scene) {\n    const backPlateMesh = CreateBox(`${this.name}_backPlate`, {}, scene);\n    backPlateMesh.isPickable = false;\n    backPlateMesh.visibility = 0;\n    backPlateMesh.scaling.z = 0.2;\n    SceneLoader.ImportMeshAsync(undefined, TouchHolographicButton.MRTK_ASSET_BASE_URL, TouchHolographicButton.BACKPLATE_MODEL_FILENAME, scene).then(result => {\n      const backPlateModel = result.meshes[1];\n      backPlateModel.visibility = 0;\n      if (this._isBackplateVisible) {\n        backPlateModel.visibility = 1;\n        backPlateModel.name = `${this.name}_backPlate`;\n        backPlateModel.isPickable = false;\n        backPlateModel.scaling.x = this.width;\n        backPlateModel.scaling.y = this.height;\n        backPlateModel.parent = backPlateMesh;\n      }\n      if (this._backMaterial) {\n        backPlateModel.material = this._backMaterial;\n      }\n      this._backPlate = backPlateModel;\n    });\n    return backPlateMesh;\n  }\n  _createFrontPlate(scene) {\n    const collisionMesh = CreateBox(`${this.name}_frontPlate`, {\n      width: this.width,\n      height: this.height,\n      depth: this.frontPlateDepth\n    }, scene);\n    collisionMesh.isPickable = true;\n    collisionMesh.isNearPickable = true;\n    collisionMesh.visibility = 0;\n    collisionMesh.position = Vector3.Forward(scene.useRightHandedSystem).scale((this.backPlateDepth - this.frontPlateDepth) / 2);\n    SceneLoader.ImportMeshAsync(undefined, TouchHolographicButton.MRTK_ASSET_BASE_URL, TouchHolographicButton.FRONTPLATE_MODEL_FILENAME, scene).then(result => {\n      const collisionPlate = CreateBox(`${this.name}_collisionPlate`, {\n        width: this.width,\n        height: this.height\n      }, scene);\n      collisionPlate.isPickable = false;\n      collisionPlate.scaling.z = this.frontPlateDepth;\n      collisionPlate.visibility = 0;\n      collisionPlate.parent = collisionMesh;\n      this._collisionPlate = collisionPlate;\n      const frontPlateModel = result.meshes[1];\n      frontPlateModel.name = `${this.name}_frontPlate`;\n      frontPlateModel.isPickable = false;\n      frontPlateModel.scaling.x = this.width - this.backGlowOffset;\n      frontPlateModel.scaling.y = this.height - this.backGlowOffset;\n      frontPlateModel.position = Vector3.Forward(scene.useRightHandedSystem).scale(-0.5);\n      frontPlateModel.parent = collisionPlate;\n      if (this.isToggleButton) {\n        frontPlateModel.visibility = 0;\n      }\n      if (this._frontMaterial) {\n        frontPlateModel.material = this._frontMaterial;\n      }\n      this._textPlate.scaling.x = 1;\n      this._textPlate.parent = frontPlateModel;\n      this._frontPlate = frontPlateModel;\n    });\n    return collisionMesh;\n  }\n  _createInnerQuad(scene) {\n    const innerQuadMesh = CreateBox(`${this.name}_innerQuad`, {}, scene);\n    innerQuadMesh.isPickable = false;\n    innerQuadMesh.visibility = 0;\n    innerQuadMesh.scaling.z = this.flatPlaneDepth;\n    innerQuadMesh.position.z += this.backPlateDepth / 2 - this.flatPlaneDepth;\n    SceneLoader.ImportMeshAsync(undefined, TouchHolographicButton.MRTK_ASSET_BASE_URL, TouchHolographicButton.INNERQUAD_MODEL_FILENAME, scene).then(result => {\n      const innerQuadModel = result.meshes[1];\n      innerQuadModel.name = `${this.name}_innerQuad`;\n      innerQuadModel.isPickable = false;\n      innerQuadModel.scaling.x = this.width - this.backGlowOffset;\n      innerQuadModel.scaling.y = this.height - this.backGlowOffset;\n      innerQuadModel.parent = innerQuadMesh;\n      if (this._innerQuadMaterial) {\n        innerQuadModel.material = this._innerQuadMaterial;\n      }\n      this._innerQuad = innerQuadModel;\n    });\n    return innerQuadMesh;\n  }\n  _createBackGlow(scene) {\n    if (this.isToggleButton) {\n      return;\n    }\n    const backGlowMesh = CreateBox(`${this.name}_backGlow`, {}, scene);\n    backGlowMesh.isPickable = false;\n    backGlowMesh.visibility = 0;\n    backGlowMesh.scaling.z = this.flatPlaneDepth;\n    backGlowMesh.position.z += this.backPlateDepth / 2 - this.flatPlaneDepth * 2;\n    SceneLoader.ImportMeshAsync(undefined, TouchHolographicButton.MRTK_ASSET_BASE_URL, TouchHolographicButton.BACKGLOW_MODEL_FILENAME, scene).then(result => {\n      const backGlowModel = result.meshes[1];\n      backGlowModel.name = `${this.name}_backGlow`;\n      backGlowModel.isPickable = false;\n      backGlowModel.scaling.x = this.width - this.backGlowOffset;\n      backGlowModel.scaling.y = this.height - this.backGlowOffset;\n      backGlowModel.parent = backGlowMesh;\n      if (this._backGlowMaterial) {\n        backGlowModel.material = this._backGlowMaterial;\n      }\n      this._backGlow = backGlowModel;\n    });\n    return backGlowMesh;\n  }\n  _applyFacade(facadeTexture) {\n    this._plateMaterial.emissiveTexture = facadeTexture;\n    this._plateMaterial.opacityTexture = facadeTexture;\n    this._plateMaterial.diffuseColor = this.plateMaterialColor;\n  }\n  _performClickAnimation() {\n    const frameRate = 60;\n    const animationGroup = new AnimationGroup(\"Click Animation Group\");\n    const animations = [{\n      name: \"backGlowMotion\",\n      mesh: this._backGlow,\n      property: \"material.motion\",\n      keys: [{\n        frame: 0,\n        values: [0, 0, 0]\n      }, {\n        frame: 20,\n        values: [1, 0.0144, 0.0144]\n      }, {\n        frame: 40,\n        values: [0.0027713229489760476, 0, 0]\n      }, {\n        frame: 45,\n        values: [0.0027713229489760476]\n      }]\n    }, {\n      name: \"_collisionPlateZSlide\",\n      mesh: this._collisionPlate,\n      property: \"position.z\",\n      keys: [{\n        frame: 0,\n        values: [0.0, 0.0, 0.0]\n      }, {\n        frame: 20,\n        values: [Vector3.Forward(this._collisionPlate._scene.useRightHandedSystem).scale(this.frontPlateDepth / 2).z, 0.0, 0.0]\n      }, {\n        frame: 40,\n        values: [0.0, 0.005403332496794331]\n      }, {\n        frame: 45,\n        values: [0.0]\n      }]\n    }, {\n      name: \"_collisionPlateZScale\",\n      mesh: this._collisionPlate,\n      property: \"scaling.z\",\n      keys: [{\n        frame: 0,\n        values: [this.frontPlateDepth, 0.0, 0.0]\n      }, {\n        frame: 20,\n        values: [this.backPlateDepth, 0.0, 0.0]\n      }, {\n        frame: 40,\n        values: [this.frontPlateDepth, 0.0054]\n      }, {\n        frame: 45,\n        values: [this.frontPlateDepth]\n      }]\n    }];\n    for (const animation of animations) {\n      const anim = new Animation(animation.name, animation.property, frameRate, Animation.ANIMATIONTYPE_FLOAT, Animation.ANIMATIONLOOPMODE_CYCLE);\n      const animkeyFrames = [];\n      for (const key of animation.keys) {\n        animkeyFrames.push({\n          frame: key.frame,\n          value: key.values[0],\n          inTangent: key.values[1],\n          outTangent: key.values[2],\n          interpolation: key.values[3]\n        });\n      }\n      anim.setKeys(animkeyFrames);\n      if (!animation.mesh) {\n        continue;\n      }\n      animationGroup.addTargetedAnimation(anim, animation.mesh);\n    }\n    animationGroup.normalize(0, 45);\n    animationGroup.speedRatio = 1;\n    animationGroup.play();\n  }\n  _performEnterExitAnimation(speedRatio) {\n    const frameRate = 60;\n    const animationGroup = new AnimationGroup(\"Enter Exit Animation Group\");\n    const animations = [{\n      name: \"frontPlateFadeOut\",\n      mesh: this._frontPlate,\n      property: \"material.fadeOut\",\n      keys: [{\n        frame: 0,\n        values: [0, 0, 0.025045314830017686, 0]\n      }, {\n        frame: 40,\n        values: [1.00205599570012, 0.025045314830017686, 0, 0]\n      }]\n    }, {\n      name: \"textPlateZSlide\",\n      mesh: this._textPlate,\n      property: \"position.z\",\n      keys: [{\n        frame: 0,\n        values: [0, 0.0, 0.0]\n      }, {\n        frame: 40,\n        values: [Vector3.Forward(this._textPlate._scene.useRightHandedSystem).scale(-0.15).z, 0.0, 0.0]\n      }]\n    }];\n    for (const animation of animations) {\n      const anim = new Animation(animation.name, animation.property, frameRate, Animation.ANIMATIONTYPE_FLOAT, Animation.ANIMATIONLOOPMODE_CYCLE);\n      const animkeyFrames = [];\n      for (const key of animation.keys) {\n        animkeyFrames.push({\n          frame: key.frame,\n          value: key.values[0],\n          inTangent: key.values[1],\n          outTangent: key.values[2],\n          interpolation: key.values[3]\n        });\n      }\n      anim.setKeys(animkeyFrames);\n      if (!animation.mesh) {\n        continue;\n      }\n      animationGroup.addTargetedAnimation(anim, animation.mesh);\n    }\n    animationGroup.normalize(0, 45);\n    animationGroup.speedRatio = speedRatio;\n    animationGroup.play();\n  }\n  _createBackMaterial(mesh) {\n    var _a;\n    this._backMaterial = (_a = this._backMaterial) !== null && _a !== void 0 ? _a : new MRDLBackplateMaterial(this.name + \"backPlateMaterial\", mesh.getScene());\n    this._backMaterial.absoluteSizes = true;\n    this._backMaterial.radius = this.radius;\n    this._backMaterial.lineWidth = 0.02;\n  }\n  _createFrontMaterial(mesh) {\n    var _a;\n    this._frontMaterial = (_a = this._frontMaterial) !== null && _a !== void 0 ? _a : new MRDLFrontplateMaterial(this.name + \"Front Material\", mesh.getScene());\n    this.frontMaterial.radius = this.innerQuadRadius;\n    this.frontMaterial.fadeOut = 0.0;\n  }\n  _createBackGlowMaterial(mesh) {\n    var _a;\n    const glowRadius = this.radius + 0.04;\n    this._backGlowMaterial = (_a = this._backGlowMaterial) !== null && _a !== void 0 ? _a : new MRDLBackglowMaterial(this.name + \"Back Glow Material\", mesh.getScene());\n    this._backGlowMaterial.bevelRadius = glowRadius;\n    this._backGlowMaterial.lineWidth = glowRadius;\n    this._backGlowMaterial.motion = 0.0;\n  }\n  _createInnerQuadMaterial(mesh) {\n    var _a;\n    this._innerQuadMaterial = (_a = this._innerQuadMaterial) !== null && _a !== void 0 ? _a : new MRDLInnerquadMaterial(\"inner_quad\", mesh.getScene());\n    this._innerQuadMaterial.radius = this.innerQuadRadius;\n    if (this.isToggleButton) {\n      this._innerQuadMaterial.color = this.innerQuadColor;\n    }\n  }\n  _createPlateMaterial(mesh) {\n    var _a;\n    this._plateMaterial = (_a = this._plateMaterial) !== null && _a !== void 0 ? _a : new StandardMaterial(this.name + \"Plate Material\", mesh.getScene());\n    this._plateMaterial.specularColor = Color3.Black();\n  }\n  _onToggle(newState) {\n    super._onToggle(newState);\n  }\n  _affectMaterial(mesh) {\n    if (this._shareMaterials) {\n      // Back\n      if (!this._host._touchSharedMaterials[\"mrdlBackplateMaterial\"]) {\n        this._createBackMaterial(mesh);\n        this._host._touchSharedMaterials[\"mrdlBackplateMaterial\"] = this._backMaterial;\n      } else {\n        this._backMaterial = this._host._touchSharedMaterials[\"mrdlBackplateMaterial\"];\n      }\n      // Front\n      if (!this._host._touchSharedMaterials[\"mrdlFrontplateMaterial\"]) {\n        this._createFrontMaterial(mesh);\n        this._host._touchSharedMaterials[\"mrdlFrontplateMaterial\"] = this._frontMaterial;\n      } else {\n        this._frontMaterial = this._host._touchSharedMaterials[\"mrdlFrontplateMaterial\"];\n      }\n      // Back glow\n      if (!this._host._touchSharedMaterials[\"mrdlBackglowMaterial\"]) {\n        this._createBackGlowMaterial(mesh);\n        this._host._touchSharedMaterials[\"mrdlBackglowMaterial\"] = this._backGlowMaterial;\n      } else {\n        this._backGlowMaterial = this._host._touchSharedMaterials[\"mrdlBackglowMaterial\"];\n      }\n      // Inner quad\n      if (!this._host._touchSharedMaterials[\"mrdlInnerQuadMaterial\"]) {\n        this._createInnerQuadMaterial(mesh);\n        this._host._touchSharedMaterials[\"mrdlInnerQuadMaterial\"] = this._innerQuadMaterial;\n      } else {\n        this._innerQuadMaterial = this._host._touchSharedMaterials[\"mrdlInnerQuadMaterial\"];\n      }\n    } else {\n      this._createBackMaterial(mesh);\n      this._createFrontMaterial(mesh);\n      this._createBackGlowMaterial(mesh);\n      this._createInnerQuadMaterial(mesh);\n    }\n    this._createPlateMaterial(mesh);\n    this._backPlate.material = this._backMaterial;\n    this._textPlate.material = this._plateMaterial;\n    if (!this._isBackplateVisible) {\n      this._backPlate.visibility = 0;\n    }\n    if (this._frontPlate) {\n      this._frontPlate.material = this._frontMaterial;\n    }\n    if (this._backGlow) {\n      this._backGlow.material = this._backGlowMaterial;\n    }\n    if (this._innerQuad) {\n      this._innerQuad.material = this._innerQuadMaterial;\n    }\n    this._rebuildContent();\n  }\n  /**\n   * Releases all associated resources\n   */\n  dispose() {\n    super.dispose(); // will dispose main mesh ie. back plate\n    this._disposeTooltip();\n    this.onPointerClickObservable.remove(this._pointerClickObserver);\n    this.onPointerEnterObservable.remove(this._pointerEnterObserver);\n    this.onPointerOutObservable.remove(this._pointerOutObserver);\n    this.onToggleObservable.remove(this._toggleObserver);\n    if (!this.shareMaterials) {\n      this._backMaterial.dispose();\n      this._frontMaterial.dispose();\n      this._plateMaterial.dispose();\n      this._backGlowMaterial.dispose();\n      this._innerQuadMaterial.dispose();\n      if (this._pickedPointObserver) {\n        this._host.onPickedPointChangedObservable.remove(this._pickedPointObserver);\n        this._pickedPointObserver = null;\n      }\n    }\n  }\n}\n/**\n * Base Url for the frontplate model.\n */\nTouchHolographicButton.MRTK_ASSET_BASE_URL = \"https://assets.babylonjs.com/meshes/MRTK/\";\n/**\n * File name for the frontplate model.\n */\nTouchHolographicButton.FRONTPLATE_MODEL_FILENAME = \"mrtk-fluent-frontplate.glb\";\n/**\n * File name for the backplate model.\n */\nTouchHolographicButton.BACKPLATE_MODEL_FILENAME = \"mrtk-fluent-backplate.glb\";\n/**\n * File name for the backglow model.\n */\nTouchHolographicButton.BACKGLOW_MODEL_FILENAME = \"mrtk-fluent-button.glb\";\n/**\n * File name for the innerquad model.\n */\nTouchHolographicButton.INNERQUAD_MODEL_FILENAME = \"SlateProximity.glb\";","map":{"version":3,"names":["AdvancedDynamicTexture","Animation","AnimationGroup","Color3","Color4","Control","CreatePlane","CreateBox","IsDocumentAvailable","FadeInOutBehavior","Grid","Image","MRDLBackglowMaterial","MRDLBackplateMaterial","MRDLFrontplateMaterial","MRDLInnerquadMaterial","Rectangle","SceneLoader","StackPanel","StandardMaterial","TextBlock","TouchButton3D","TransformNode","Vector3","TouchHolographicButton","_disposeTooltip","_tooltipFade","_tooltipTextBlock","dispose","_tooltipTexture","_tooltipMesh","onPointerEnterObservable","remove","_tooltipHoverObserver","onPointerOutObservable","_tooltipOutObserver","renderingGroupId","id","_backPlate","_textPlate","_frontPlate","_backGlow","_innerQuad","mesh","tooltipText","text","rightHandedScene","_scene","useRightHandedSystem","size","position","Down","scale","add","Forward","isPickable","parent","_frontPlateCollisionMesh","CreateForMesh","tooltipBackground","height","width","cornerRadius","color","thickness","background","addControl","fontSize","delay","addBehavior","fadeIn","_a","_text","value","_rebuildContent","subtext","_subtext","imageUrl","_imageUrl","backMaterial","_backMaterial","frontMaterial","_frontMaterial","backGlowMaterial","_backGlowMaterial","innerQuadMaterial","_innerQuadMaterial","plateMaterial","_plateMaterial","shareMaterials","_shareMaterials","isBackplateVisible","isVisible","_isBackplateVisible","visibility","constructor","name","radius","textSizeInPixels","imageSizeInPixels","plateMaterialColor","frontPlateDepth","backPlateDepth","backGlowOffset","flatPlaneDepth","innerQuadRadius","innerQuadColor","innerQuadToggledColor","innerQuadHoverColor","innerQuadToggledHoverColor","pointerEnterAnimation","isToggleButton","_performEnterExitAnimation","isToggled","pointerOutAnimation","_onToggle","pointerDownAnimation","pointerUpAnimation","_pointerClickObserver","onPointerClickObservable","isActiveNearInteraction","_performClickAnimation","_pointerEnterObserver","_pointerOutObserver","_toggleObserver","onToggleObservable","_getTypeName","content","_getAspectRatio","_alignContentVertically","_alignContentHorizontally","panel","isVertical","document","createElement","image","source","heightInPixels","widthInPixels","paddingTopInPixels","paddingBottomInPixels","totalPanelWidthInPixels","padding","contentContainer","setPaddingInPixels","scaleY","imageContainer","textHorizontalAlignment","HORIZONTAL_ALIGNMENT_LEFT","paddingLeftInPixels","textContainer","addColumnDefinition","addRowDefinition","fontWeight","_createNode","scene","backPlateMesh","_createBackPlate","collisionMesh","_createFrontPlate","innerQuadMesh","_createInnerQuad","backGlowMesh","_createBackGlow","scaling","x","addChild","tn","setParent","collidableFrontDirection","forward","negate","z","ImportMeshAsync","undefined","MRTK_ASSET_BASE_URL","BACKPLATE_MODEL_FILENAME","then","result","backPlateModel","meshes","y","material","depth","isNearPickable","FRONTPLATE_MODEL_FILENAME","collisionPlate","_collisionPlate","frontPlateModel","INNERQUAD_MODEL_FILENAME","innerQuadModel","BACKGLOW_MODEL_FILENAME","backGlowModel","_applyFacade","facadeTexture","emissiveTexture","opacityTexture","diffuseColor","frameRate","animationGroup","animations","property","keys","frame","values","animation","anim","ANIMATIONTYPE_FLOAT","ANIMATIONLOOPMODE_CYCLE","animkeyFrames","key","push","inTangent","outTangent","interpolation","setKeys","addTargetedAnimation","normalize","speedRatio","play","_createBackMaterial","getScene","absoluteSizes","lineWidth","_createFrontMaterial","fadeOut","_createBackGlowMaterial","glowRadius","bevelRadius","motion","_createInnerQuadMaterial","_createPlateMaterial","specularColor","Black","newState","_affectMaterial","_host","_touchSharedMaterials","_pickedPointObserver","onPickedPointChangedObservable"],"sources":["../../../../../../dev/gui/src/3D/controls/MRTK3/touchHolographicButton.ts"],"sourcesContent":["import type { AbstractMesh } from \"core/Meshes/abstractMesh\";\r\nimport type { Control3D } from \"../control3D\";\r\nimport type { Mesh } from \"core/Meshes/mesh\";\r\nimport type { Nullable } from \"core/types\";\r\nimport type { Observer } from \"core/Misc/observable\";\r\nimport type { Scene } from \"core/scene\";\r\nimport type { Vector3WithInfo } from \"../../vector3WithInfo\";\r\n\r\nimport { AdvancedDynamicTexture } from \"../../../2D/advancedDynamicTexture\";\r\nimport { Animation } from \"core/Animations/animation\";\r\nimport { AnimationGroup } from \"core/Animations/animationGroup\";\r\nimport { Color3, Color4 } from \"core/Maths/math.color\";\r\nimport { Control } from \"../../../2D/controls/control\";\r\nimport { CreatePlane } from \"core/Meshes/Builders/planeBuilder\";\r\nimport { CreateBox } from \"core/Meshes/Builders/boxBuilder\";\r\nimport { IsDocumentAvailable } from \"core/Misc/domManagement\";\r\nimport { FadeInOutBehavior } from \"core/Behaviors/Meshes/fadeInOutBehavior\";\r\nimport { Grid } from \"../../../2D/controls/grid\";\r\nimport { Image } from \"../../../2D/controls/image\";\r\nimport { MRDLBackglowMaterial } from \"../../materials/mrdl/mrdlBackglowMaterial\";\r\nimport { MRDLBackplateMaterial } from \"../../materials/mrdl/mrdlBackplateMaterial\";\r\nimport { MRDLFrontplateMaterial } from \"../../materials/mrdl/mrdlFrontplateMaterial\";\r\nimport { MRDLInnerquadMaterial } from \"../../materials/mrdl/mrdlInnerquadMaterial\";\r\nimport { Rectangle } from \"../../../2D/controls/rectangle\";\r\nimport { SceneLoader } from \"core/Loading/sceneLoader\";\r\nimport { StackPanel } from \"../../../2D/controls/stackPanel\";\r\nimport { StandardMaterial } from \"core/Materials/standardMaterial\";\r\nimport { TextBlock } from \"../../../2D/controls/textBlock\";\r\nimport { TouchButton3D } from \"../touchButton3D\";\r\nimport { TransformNode } from \"core/Meshes/transformNode\";\r\nimport { Vector3 } from \"core/Maths/math.vector\";\r\n\r\n/**\r\n * Class used to create the mrtkv3 button\r\n */\r\nexport class TouchHolographicButton extends TouchButton3D {\r\n    /**\r\n     * Base Url for the frontplate model.\r\n     */\r\n    public static MRTK_ASSET_BASE_URL = \"https://assets.babylonjs.com/meshes/MRTK/\";\r\n\r\n    /**\r\n     * File name for the frontplate model.\r\n     */\r\n    public static FRONTPLATE_MODEL_FILENAME = \"mrtk-fluent-frontplate.glb\";\r\n\r\n    /**\r\n     * File name for the backplate model.\r\n     */\r\n    public static BACKPLATE_MODEL_FILENAME = \"mrtk-fluent-backplate.glb\";\r\n\r\n    /**\r\n     * File name for the backglow model.\r\n     */\r\n    public static BACKGLOW_MODEL_FILENAME = \"mrtk-fluent-button.glb\";\r\n\r\n    /**\r\n     * File name for the innerquad model.\r\n     */\r\n    public static INNERQUAD_MODEL_FILENAME = \"SlateProximity.glb\";\r\n\r\n    /**\r\n     * Gets or sets the horizontal scaling for the button.\r\n     */\r\n    public width = 1;\r\n\r\n    /**\r\n     * Gets or sets the vertical scaling for the button.\r\n     */\r\n    public height = 1;\r\n\r\n    /**\r\n     * Gets or sets the bevel radius for the button.\r\n     */\r\n    public radius = 0.14;\r\n\r\n    /**\r\n     * Gets or sets the font size of the button text in pixels.\r\n     * This is only adjustable for a button with width to height ratio greater than 1.\r\n     */\r\n    public textSizeInPixels = 18;\r\n\r\n    /**\r\n     * Gets or sets the size of the button image in pixels.\r\n     * This is only adjustable for a button with width to height ratio greater than 1.\r\n     */\r\n    public imageSizeInPixels = 40;\r\n\r\n    /**\r\n     * Gets or sets the color of the button plate.\r\n     */\r\n    public plateMaterialColor = new Color3(0.4, 0.4, 0.4);\r\n\r\n    // Shared variables for meshes\r\n    /**\r\n     * Gets or sets the depth of the button's front plate.\r\n     * This variable determines the z scaling and z position for some of the button's meshes.\r\n     */\r\n    public frontPlateDepth = 0.2;\r\n\r\n    /**\r\n     * Gets or sets the depth of the button's back plate.\r\n     * This variable determines the z scaling and z position for some of the button's meshes.\r\n     */\r\n    public backPlateDepth = 0.04;\r\n\r\n    /**\r\n     * Gets or sets the offset value for button's back glow.\r\n     * This variable determines the x, y scaling of the button's meshes.\r\n     */\r\n    public backGlowOffset = 0.1;\r\n\r\n    /**\r\n     * Gets or sets the value that determines the z scaling and z position for the innerQuad and BackGlow meshes.\r\n     */\r\n    public flatPlaneDepth = 0.001;\r\n\r\n    /**\r\n     * Gets or sets the radius for FrontMaterial and innerQuadMaterial.\r\n     */\r\n    public innerQuadRadius = this.radius - 0.04;\r\n\r\n    /**\r\n     * Gets or sets the color for innerQuadMaterial.\r\n     */\r\n    public innerQuadColor = new Color4(0, 0, 0, 0);\r\n\r\n    /**\r\n     * Gets or sets the color for innerQuadMaterial for when it is toggled.\r\n     */\r\n    public innerQuadToggledColor = new Color4(0.5197843, 0.6485234, 0.9607843, 0.6);\r\n\r\n    /**\r\n     * Gets or sets the color for innerQuadMaterial for when it is hovered.\r\n     */\r\n    public innerQuadHoverColor = new Color4(1, 1, 1, 0.05);\r\n\r\n    /**\r\n     * Gets or sets the color for innerQuadMaterial for when it is toggled and hovered.\r\n     */\r\n    public innerQuadToggledHoverColor = new Color4(0.5197843, 0.6485234, 0.9607843, 1);\r\n\r\n    // Meshes\r\n    private _backPlate: AbstractMesh;\r\n    private _textPlate: Mesh;\r\n    private _frontPlate: AbstractMesh;\r\n    private _backGlow: AbstractMesh;\r\n    private _innerQuad: AbstractMesh;\r\n    private _collisionPlate: AbstractMesh;\r\n    private _frontPlateCollisionMesh: AbstractMesh;\r\n    private _isBackplateVisible = true;\r\n\r\n    // Content\r\n    private _text: string;\r\n    private _subtext: string;\r\n    private _imageUrl: string;\r\n\r\n    // Materials\r\n    private _shareMaterials = true;\r\n    private _frontMaterial: MRDLFrontplateMaterial;\r\n    private _backMaterial: MRDLBackplateMaterial;\r\n    private _backGlowMaterial: MRDLBackglowMaterial;\r\n    private _innerQuadMaterial: MRDLInnerquadMaterial;\r\n    private _plateMaterial: StandardMaterial;\r\n\r\n    // Events\r\n    private _pickedPointObserver: Nullable<Observer<Nullable<Vector3>>>;\r\n    private _pointerClickObserver: Nullable<Observer<Vector3WithInfo>>;\r\n    private _pointerEnterObserver: Nullable<Observer<Control3D>>;\r\n    private _pointerOutObserver: Nullable<Observer<Control3D>>;\r\n    private _toggleObserver: Nullable<Observer<boolean>>;\r\n\r\n    // Tooltip\r\n    private _tooltipFade: Nullable<FadeInOutBehavior>;\r\n    private _tooltipTextBlock: Nullable<TextBlock>;\r\n    private _tooltipTexture: Nullable<AdvancedDynamicTexture>;\r\n    private _tooltipMesh: Nullable<Mesh>;\r\n    private _tooltipHoverObserver: Nullable<Observer<Control3D>>;\r\n    private _tooltipOutObserver: Nullable<Observer<Control3D>>;\r\n\r\n    private _disposeTooltip() {\r\n        this._tooltipFade = null;\r\n        if (this._tooltipTextBlock) {\r\n            this._tooltipTextBlock.dispose();\r\n        }\r\n        if (this._tooltipTexture) {\r\n            this._tooltipTexture.dispose();\r\n        }\r\n        if (this._tooltipMesh) {\r\n            this._tooltipMesh.dispose();\r\n        }\r\n        this.onPointerEnterObservable.remove(this._tooltipHoverObserver);\r\n        this.onPointerOutObservable.remove(this._tooltipOutObserver);\r\n    }\r\n\r\n    /**\r\n     * Rendering ground id of all the mesh in the button\r\n     */\r\n    public set renderingGroupId(id: number) {\r\n        this._backPlate.renderingGroupId = id;\r\n        this._textPlate.renderingGroupId = id;\r\n        this._frontPlate.renderingGroupId = id;\r\n        this._backGlow.renderingGroupId = id;\r\n        this._innerQuad.renderingGroupId = id;\r\n\r\n        if (this._tooltipMesh) {\r\n            this._tooltipMesh.renderingGroupId = id;\r\n        }\r\n    }\r\n    public get renderingGroupId(): number {\r\n        return this._backPlate.renderingGroupId;\r\n    }\r\n\r\n    /**\r\n     * Gets the mesh used to render this control\r\n     */\r\n    public get mesh(): Nullable<AbstractMesh> {\r\n        return this._backPlate as AbstractMesh;\r\n    }\r\n\r\n    /**\r\n     * Text to be displayed on the tooltip shown when hovering on the button. When set to null tooltip is disabled. (Default: null)\r\n     * Set this property after adding the button to the GUI3DManager\r\n     */\r\n    public set tooltipText(text: Nullable<string>) {\r\n        if (!text) {\r\n            this._disposeTooltip();\r\n            return;\r\n        }\r\n        if (!this._tooltipFade) {\r\n            const rightHandedScene = this._backPlate._scene.useRightHandedSystem;\r\n            // Create tooltip with mesh and text\r\n            this._tooltipMesh = CreatePlane(\"\", { size: 1 }, this._backPlate._scene);\r\n            this._tooltipMesh.position = Vector3.Down().scale(0.7).add(Vector3.Forward(rightHandedScene).scale(-0.15));\r\n            this._tooltipMesh.isPickable = false;\r\n            this._tooltipMesh.parent = this._frontPlateCollisionMesh;\r\n\r\n            // Create text texture for the tooltip\r\n            this._tooltipTexture = AdvancedDynamicTexture.CreateForMesh(this._tooltipMesh);\r\n            const tooltipBackground = new Rectangle();\r\n            tooltipBackground.height = 0.25;\r\n            tooltipBackground.width = 0.8;\r\n            tooltipBackground.cornerRadius = 25;\r\n            tooltipBackground.color = \"#ffffff\";\r\n            tooltipBackground.thickness = 20;\r\n            tooltipBackground.background = \"#060668\";\r\n            this._tooltipTexture.addControl(tooltipBackground);\r\n\r\n            this._tooltipTextBlock = new TextBlock();\r\n            this._tooltipTextBlock.color = \"white\";\r\n            this._tooltipTextBlock.fontSize = 100;\r\n            this._tooltipTexture.addControl(this._tooltipTextBlock);\r\n\r\n            // Add hover action to tooltip\r\n            this._tooltipFade = new FadeInOutBehavior();\r\n            this._tooltipFade.delay = 500;\r\n            this._tooltipMesh.addBehavior(this._tooltipFade);\r\n            this._tooltipHoverObserver = this.onPointerEnterObservable.add(() => {\r\n                if (this._tooltipFade) {\r\n                    this._tooltipFade.fadeIn(true);\r\n                }\r\n            });\r\n            this._tooltipOutObserver = this.onPointerOutObservable.add(() => {\r\n                if (this._tooltipFade) {\r\n                    this._tooltipFade.fadeIn(false);\r\n                }\r\n            });\r\n        }\r\n        if (this._tooltipTextBlock) {\r\n            this._tooltipTextBlock.text = text;\r\n        }\r\n    }\r\n\r\n    public get tooltipText() {\r\n        return this._tooltipTextBlock?.text || null;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets text for the button\r\n     */\r\n    public get text(): string {\r\n        return this._text;\r\n    }\r\n\r\n    public set text(value: string) {\r\n        if (this._text === value) {\r\n            return;\r\n        }\r\n\r\n        this._text = value;\r\n        this._rebuildContent();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets subtext for a button with larger width\r\n     */\r\n    public get subtext(): string {\r\n        return this._subtext;\r\n    }\r\n\r\n    public set subtext(value: string) {\r\n        if (this._subtext === value) {\r\n            return;\r\n        }\r\n\r\n        this._subtext = value;\r\n        this._rebuildContent();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the image url for the button\r\n     */\r\n    public get imageUrl(): string {\r\n        return this._imageUrl;\r\n    }\r\n\r\n    public set imageUrl(value: string) {\r\n        if (this._imageUrl === value) {\r\n            return;\r\n        }\r\n\r\n        this._imageUrl = value;\r\n        this._rebuildContent();\r\n    }\r\n\r\n    /**\r\n     * Gets the back material used by this button\r\n     */\r\n    public get backMaterial(): MRDLBackplateMaterial {\r\n        return this._backMaterial;\r\n    }\r\n\r\n    /**\r\n     * Gets the front material used by this button\r\n     */\r\n    public get frontMaterial(): MRDLFrontplateMaterial {\r\n        return this._frontMaterial;\r\n    }\r\n\r\n    /**\r\n     * Gets the back glow material used by this button\r\n     */\r\n    public get backGlowMaterial(): MRDLBackglowMaterial {\r\n        return this._backGlowMaterial;\r\n    }\r\n\r\n    /**\r\n     * Gets the inner quad material used by this button\r\n     */\r\n    public get innerQuadMaterial(): MRDLInnerquadMaterial {\r\n        return this._innerQuadMaterial;\r\n    }\r\n\r\n    /**\r\n     * Gets the plate material used by this button\r\n     */\r\n    public get plateMaterial(): StandardMaterial {\r\n        return this._plateMaterial;\r\n    }\r\n\r\n    /**\r\n     * Gets a boolean indicating if this button shares its material with other V3 Buttons\r\n     */\r\n    public get shareMaterials(): boolean {\r\n        return this._shareMaterials;\r\n    }\r\n\r\n    /**\r\n     * Sets whether the backplate is visible or hidden. Hiding the backplate is not recommended without some sort of replacement\r\n     */\r\n    public set isBackplateVisible(isVisible: boolean) {\r\n        if (this.mesh && this._backMaterial) {\r\n            if (isVisible && !this._isBackplateVisible) {\r\n                this._backPlate.visibility = 1;\r\n            } else if (!isVisible && this._isBackplateVisible) {\r\n                this._backPlate.visibility = 0;\r\n            }\r\n        }\r\n\r\n        this._isBackplateVisible = isVisible;\r\n    }\r\n\r\n    /**\r\n     * Creates a new button\r\n     * @param name defines the control name\r\n     * @param shareMaterials\r\n     */\r\n    constructor(name?: string, shareMaterials = true) {\r\n        super(name);\r\n\r\n        this._shareMaterials = shareMaterials;\r\n\r\n        this.pointerEnterAnimation = () => {\r\n            if (this._frontPlate && this._textPlate && !this.isToggleButton) {\r\n                this._performEnterExitAnimation(1);\r\n            }\r\n\r\n            if (this.isToggleButton && this._innerQuadMaterial) {\r\n                if (this.isToggled) {\r\n                    this._innerQuadMaterial.color = this.innerQuadToggledHoverColor;\r\n                } else {\r\n                    this._innerQuadMaterial.color = this.innerQuadHoverColor;\r\n                }\r\n            }\r\n        };\r\n\r\n        this.pointerOutAnimation = () => {\r\n            if (this._frontPlate && this._textPlate && !this.isToggleButton) {\r\n                this._performEnterExitAnimation(-0.8);\r\n            }\r\n\r\n            if (this.isToggleButton && this._innerQuadMaterial) {\r\n                this._onToggle(this.isToggled);\r\n            }\r\n        };\r\n\r\n        this.pointerDownAnimation = () => {\r\n            // Do nothing\r\n        };\r\n\r\n        this.pointerUpAnimation = () => {\r\n            // Do nothing\r\n        };\r\n\r\n        this._pointerClickObserver = this.onPointerClickObservable.add(() => {\r\n            if (this._frontPlate && this._backGlow && !this.isActiveNearInteraction) {\r\n                this._performClickAnimation();\r\n            }\r\n\r\n            if (this.isToggleButton && this._innerQuadMaterial) {\r\n                this._onToggle(this.isToggled);\r\n            }\r\n        });\r\n\r\n        this._pointerEnterObserver = this.onPointerEnterObservable.add(() => {\r\n            this.pointerEnterAnimation();\r\n        });\r\n\r\n        this._pointerOutObserver = this.onPointerOutObservable.add(() => {\r\n            this.pointerOutAnimation();\r\n        });\r\n\r\n        this._toggleObserver = this.onToggleObservable.add((isToggled) => {\r\n            if (isToggled) {\r\n                this._innerQuadMaterial.color = this.innerQuadToggledColor;\r\n            } else {\r\n                this._innerQuadMaterial.color = this.innerQuadColor;\r\n            }\r\n        });\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"TouchHolographicButton\";\r\n    }\r\n\r\n    private _rebuildContent(): void {\r\n        let content: Control;\r\n\r\n        if (this._getAspectRatio() <= 1) {\r\n            // align text and image vertically\r\n            content = this._alignContentVertically();\r\n        } else {\r\n            // align text and image horizontally\r\n            content = this._alignContentHorizontally();\r\n        }\r\n\r\n        this.content = content;\r\n    }\r\n\r\n    private _getAspectRatio() {\r\n        return this.width / this.height;\r\n    }\r\n\r\n    private _alignContentVertically() {\r\n        const panel = new StackPanel();\r\n        panel.isVertical = true;\r\n\r\n        if (IsDocumentAvailable() && !!document.createElement) {\r\n            if (this._imageUrl) {\r\n                const image = new Image();\r\n                image.source = this._imageUrl;\r\n                image.heightInPixels = 180;\r\n                image.widthInPixels = 100;\r\n                image.paddingTopInPixels = 40;\r\n                image.paddingBottomInPixels = 40;\r\n                panel.addControl(image);\r\n            }\r\n        }\r\n\r\n        if (this._text) {\r\n            const text = new TextBlock();\r\n            text.text = this._text;\r\n            text.color = \"white\";\r\n            text.heightInPixels = 30;\r\n            text.fontSize = 24;\r\n            panel.addControl(text);\r\n        }\r\n\r\n        return panel;\r\n    }\r\n\r\n    private _alignContentHorizontally() {\r\n        let totalPanelWidthInPixels = 240;\r\n        const padding = 15;\r\n\r\n        const contentContainer = new Rectangle();\r\n        contentContainer.widthInPixels = totalPanelWidthInPixels;\r\n        contentContainer.heightInPixels = totalPanelWidthInPixels;\r\n        contentContainer.color = \"transparent\";\r\n        contentContainer.setPaddingInPixels(padding, padding, padding, padding);\r\n        totalPanelWidthInPixels -= padding * 2;\r\n\r\n        const panel = new StackPanel();\r\n        panel.isVertical = false;\r\n        panel.scaleY = this._getAspectRatio();\r\n\r\n        if (IsDocumentAvailable() && !!document.createElement) {\r\n            if (this._imageUrl) {\r\n                const imageContainer = new Rectangle(`${this.name}_image`);\r\n                imageContainer.widthInPixels = this.imageSizeInPixels;\r\n                imageContainer.heightInPixels = this.imageSizeInPixels;\r\n                imageContainer.color = \"transparent\";\r\n                totalPanelWidthInPixels -= this.imageSizeInPixels;\r\n\r\n                const image = new Image();\r\n                image.source = this._imageUrl;\r\n\r\n                imageContainer.addControl(image);\r\n                panel.addControl(imageContainer);\r\n            }\r\n        }\r\n\r\n        if (this._text) {\r\n            const text = new TextBlock(`${this.name}_text`);\r\n            text.text = this._text;\r\n            text.color = \"white\";\r\n            text.fontSize = this.textSizeInPixels;\r\n            text.widthInPixels = totalPanelWidthInPixels;\r\n\r\n            if (this._imageUrl) {\r\n                text.textHorizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n                text.paddingLeftInPixels = padding;\r\n            }\r\n\r\n            if (this._subtext) {\r\n                const textContainer = new Grid();\r\n                textContainer.addColumnDefinition(1);\r\n                textContainer.addRowDefinition(0.5);\r\n                textContainer.addRowDefinition(0.5);\r\n                textContainer.widthInPixels = totalPanelWidthInPixels;\r\n                textContainer.heightInPixels = 45;\r\n\r\n                const subtext = new TextBlock(`${this.name}_subtext`);\r\n                subtext.text = this._subtext;\r\n                subtext.color = \"#EEEEEEAB\";\r\n                subtext.fontSize = this.textSizeInPixels * 0.75;\r\n                subtext.fontWeight = \"600\";\r\n\r\n                if (this._imageUrl) {\r\n                    subtext.textHorizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n                    subtext.paddingLeftInPixels = padding;\r\n                }\r\n\r\n                textContainer.addControl(text, 0);\r\n                textContainer.addControl(subtext, 1);\r\n                panel.addControl(textContainer);\r\n            } else {\r\n                panel.addControl(text);\r\n            }\r\n        }\r\n\r\n        contentContainer.addControl(panel);\r\n        return contentContainer;\r\n    }\r\n\r\n    // Mesh association\r\n    protected _createNode(scene: Scene): TransformNode {\r\n        this.name = this.name ?? \"TouchHolographicButton\";\r\n\r\n        const backPlateMesh = this._createBackPlate(scene);\r\n        const collisionMesh = this._createFrontPlate(scene);\r\n        const innerQuadMesh = this._createInnerQuad(scene);\r\n        const backGlowMesh = this._createBackGlow(scene);\r\n\r\n        this._frontPlateCollisionMesh = collisionMesh;\r\n        this._textPlate = <Mesh>super._createNode(scene);\r\n        this._textPlate.name = `${this.name}_textPlate`;\r\n        this._textPlate.isPickable = false;\r\n        this._textPlate.scaling.x = this.width;\r\n        this._textPlate.parent = collisionMesh;\r\n\r\n        this._backPlate = backPlateMesh;\r\n        this._backPlate.position = Vector3.Forward(scene.useRightHandedSystem).scale(this.backPlateDepth / 2);\r\n        this._backPlate.isPickable = false;\r\n\r\n        this._backPlate.addChild(collisionMesh);\r\n        this._backPlate.addChild(innerQuadMesh);\r\n\r\n        if (backGlowMesh) {\r\n            this._backPlate.addChild(backGlowMesh);\r\n        }\r\n\r\n        const tn = new TransformNode(`${this.name}_root`, scene);\r\n        this._backPlate.setParent(tn);\r\n\r\n        this.collisionMesh = collisionMesh;\r\n        this.collidableFrontDirection = this._backPlate.forward.negate(); // Mesh is facing the wrong way\r\n\r\n        return tn;\r\n    }\r\n\r\n    private _createBackPlate(scene: Scene) {\r\n        const backPlateMesh = CreateBox(`${this.name}_backPlate`, {}, scene);\r\n        backPlateMesh.isPickable = false;\r\n        backPlateMesh.visibility = 0;\r\n        backPlateMesh.scaling.z = 0.2;\r\n\r\n        SceneLoader.ImportMeshAsync(undefined, TouchHolographicButton.MRTK_ASSET_BASE_URL, TouchHolographicButton.BACKPLATE_MODEL_FILENAME, scene).then((result) => {\r\n            const backPlateModel = result.meshes[1];\r\n            backPlateModel.visibility = 0;\r\n\r\n            if (this._isBackplateVisible) {\r\n                backPlateModel.visibility = 1;\r\n                backPlateModel.name = `${this.name}_backPlate`;\r\n                backPlateModel.isPickable = false;\r\n                backPlateModel.scaling.x = this.width;\r\n                backPlateModel.scaling.y = this.height;\r\n                backPlateModel.parent = backPlateMesh;\r\n            }\r\n\r\n            if (this._backMaterial) {\r\n                backPlateModel.material = this._backMaterial;\r\n            }\r\n\r\n            this._backPlate = backPlateModel;\r\n        });\r\n\r\n        return backPlateMesh;\r\n    }\r\n\r\n    private _createFrontPlate(scene: Scene) {\r\n        const collisionMesh = CreateBox(\r\n            `${this.name}_frontPlate`,\r\n            {\r\n                width: this.width,\r\n                height: this.height,\r\n                depth: this.frontPlateDepth,\r\n            },\r\n            scene\r\n        );\r\n        collisionMesh.isPickable = true;\r\n        collisionMesh.isNearPickable = true;\r\n        collisionMesh.visibility = 0;\r\n        collisionMesh.position = Vector3.Forward(scene.useRightHandedSystem).scale((this.backPlateDepth - this.frontPlateDepth) / 2);\r\n\r\n        SceneLoader.ImportMeshAsync(undefined, TouchHolographicButton.MRTK_ASSET_BASE_URL, TouchHolographicButton.FRONTPLATE_MODEL_FILENAME, scene).then((result) => {\r\n            const collisionPlate = CreateBox(\r\n                `${this.name}_collisionPlate`,\r\n                {\r\n                    width: this.width,\r\n                    height: this.height,\r\n                },\r\n                scene\r\n            );\r\n            collisionPlate.isPickable = false;\r\n            collisionPlate.scaling.z = this.frontPlateDepth;\r\n            collisionPlate.visibility = 0;\r\n            collisionPlate.parent = collisionMesh;\r\n            this._collisionPlate = collisionPlate;\r\n\r\n            const frontPlateModel = result.meshes[1];\r\n            frontPlateModel.name = `${this.name}_frontPlate`;\r\n            frontPlateModel.isPickable = false;\r\n            frontPlateModel.scaling.x = this.width - this.backGlowOffset;\r\n            frontPlateModel.scaling.y = this.height - this.backGlowOffset;\r\n            frontPlateModel.position = Vector3.Forward(scene.useRightHandedSystem).scale(-0.5);\r\n            frontPlateModel.parent = collisionPlate;\r\n\r\n            if (this.isToggleButton) {\r\n                frontPlateModel.visibility = 0;\r\n            }\r\n\r\n            if (this._frontMaterial) {\r\n                frontPlateModel.material = this._frontMaterial;\r\n            }\r\n\r\n            this._textPlate.scaling.x = 1;\r\n            this._textPlate.parent = frontPlateModel;\r\n            this._frontPlate = frontPlateModel;\r\n        });\r\n\r\n        return collisionMesh;\r\n    }\r\n\r\n    private _createInnerQuad(scene: Scene) {\r\n        const innerQuadMesh = CreateBox(`${this.name}_innerQuad`, {}, scene);\r\n        innerQuadMesh.isPickable = false;\r\n        innerQuadMesh.visibility = 0;\r\n        innerQuadMesh.scaling.z = this.flatPlaneDepth;\r\n        innerQuadMesh.position.z += this.backPlateDepth / 2 - this.flatPlaneDepth;\r\n\r\n        SceneLoader.ImportMeshAsync(undefined, TouchHolographicButton.MRTK_ASSET_BASE_URL, TouchHolographicButton.INNERQUAD_MODEL_FILENAME, scene).then((result) => {\r\n            const innerQuadModel = result.meshes[1];\r\n            innerQuadModel.name = `${this.name}_innerQuad`;\r\n            innerQuadModel.isPickable = false;\r\n            innerQuadModel.scaling.x = this.width - this.backGlowOffset;\r\n            innerQuadModel.scaling.y = this.height - this.backGlowOffset;\r\n            innerQuadModel.parent = innerQuadMesh;\r\n\r\n            if (this._innerQuadMaterial) {\r\n                innerQuadModel.material = this._innerQuadMaterial;\r\n            }\r\n\r\n            this._innerQuad = innerQuadModel;\r\n        });\r\n\r\n        return innerQuadMesh;\r\n    }\r\n\r\n    private _createBackGlow(scene: Scene) {\r\n        if (this.isToggleButton) {\r\n            return;\r\n        }\r\n\r\n        const backGlowMesh = CreateBox(`${this.name}_backGlow`, {}, scene);\r\n        backGlowMesh.isPickable = false;\r\n        backGlowMesh.visibility = 0;\r\n        backGlowMesh.scaling.z = this.flatPlaneDepth;\r\n        backGlowMesh.position.z += this.backPlateDepth / 2 - this.flatPlaneDepth * 2;\r\n\r\n        SceneLoader.ImportMeshAsync(undefined, TouchHolographicButton.MRTK_ASSET_BASE_URL, TouchHolographicButton.BACKGLOW_MODEL_FILENAME, scene).then((result) => {\r\n            const backGlowModel = result.meshes[1];\r\n            backGlowModel.name = `${this.name}_backGlow`;\r\n            backGlowModel.isPickable = false;\r\n            backGlowModel.scaling.x = this.width - this.backGlowOffset;\r\n            backGlowModel.scaling.y = this.height - this.backGlowOffset;\r\n            backGlowModel.parent = backGlowMesh;\r\n\r\n            if (this._backGlowMaterial) {\r\n                backGlowModel.material = this._backGlowMaterial;\r\n            }\r\n\r\n            this._backGlow = backGlowModel;\r\n        });\r\n\r\n        return backGlowMesh;\r\n    }\r\n\r\n    protected _applyFacade(facadeTexture: AdvancedDynamicTexture) {\r\n        this._plateMaterial.emissiveTexture = facadeTexture;\r\n        this._plateMaterial.opacityTexture = facadeTexture;\r\n        this._plateMaterial.diffuseColor = this.plateMaterialColor;\r\n    }\r\n\r\n    private _performClickAnimation() {\r\n        const frameRate = 60;\r\n        const animationGroup = new AnimationGroup(\"Click Animation Group\");\r\n\r\n        const animations = [\r\n            {\r\n                name: \"backGlowMotion\",\r\n                mesh: this._backGlow,\r\n                property: \"material.motion\",\r\n                keys: [\r\n                    {\r\n                        frame: 0,\r\n                        values: [0, 0, 0],\r\n                    },\r\n                    {\r\n                        frame: 20,\r\n                        values: [1, 0.0144, 0.0144],\r\n                    },\r\n                    {\r\n                        frame: 40,\r\n                        values: [0.0027713229489760476, 0, 0],\r\n                    },\r\n                    {\r\n                        frame: 45,\r\n                        values: [0.0027713229489760476],\r\n                    },\r\n                ],\r\n            },\r\n            {\r\n                name: \"_collisionPlateZSlide\",\r\n                mesh: this._collisionPlate,\r\n                property: \"position.z\",\r\n                keys: [\r\n                    {\r\n                        frame: 0,\r\n                        values: [0.0, 0.0, 0.0],\r\n                    },\r\n                    {\r\n                        frame: 20,\r\n                        values: [Vector3.Forward(this._collisionPlate._scene.useRightHandedSystem).scale(this.frontPlateDepth / 2).z, 0.0, 0.0],\r\n                    },\r\n                    {\r\n                        frame: 40,\r\n                        values: [0.0, 0.005403332496794331],\r\n                    },\r\n                    {\r\n                        frame: 45,\r\n                        values: [0.0],\r\n                    },\r\n                ],\r\n            },\r\n            {\r\n                name: \"_collisionPlateZScale\",\r\n                mesh: this._collisionPlate,\r\n                property: \"scaling.z\",\r\n                keys: [\r\n                    {\r\n                        frame: 0,\r\n                        values: [this.frontPlateDepth, 0.0, 0.0],\r\n                    },\r\n                    {\r\n                        frame: 20,\r\n                        values: [this.backPlateDepth, 0.0, 0.0],\r\n                    },\r\n                    {\r\n                        frame: 40,\r\n                        values: [this.frontPlateDepth, 0.0054],\r\n                    },\r\n                    {\r\n                        frame: 45,\r\n                        values: [this.frontPlateDepth],\r\n                    },\r\n                ],\r\n            },\r\n        ];\r\n\r\n        for (const animation of animations) {\r\n            const anim = new Animation(animation.name, animation.property, frameRate, Animation.ANIMATIONTYPE_FLOAT, Animation.ANIMATIONLOOPMODE_CYCLE);\r\n            const animkeyFrames = [];\r\n\r\n            for (const key of animation.keys) {\r\n                animkeyFrames.push({\r\n                    frame: key.frame,\r\n                    value: key.values[0],\r\n                    inTangent: key.values[1],\r\n                    outTangent: key.values[2],\r\n                    interpolation: key.values[3],\r\n                });\r\n            }\r\n\r\n            anim.setKeys(animkeyFrames);\r\n\r\n            if (!animation.mesh) {\r\n                continue;\r\n            }\r\n\r\n            animationGroup.addTargetedAnimation(anim, animation.mesh);\r\n        }\r\n\r\n        animationGroup.normalize(0, 45);\r\n        animationGroup.speedRatio = 1;\r\n\r\n        animationGroup.play();\r\n    }\r\n\r\n    private _performEnterExitAnimation(speedRatio: number) {\r\n        const frameRate = 60;\r\n        const animationGroup = new AnimationGroup(\"Enter Exit Animation Group\");\r\n\r\n        const animations = [\r\n            {\r\n                name: \"frontPlateFadeOut\",\r\n                mesh: this._frontPlate,\r\n                property: \"material.fadeOut\",\r\n                keys: [\r\n                    {\r\n                        frame: 0,\r\n                        values: [0, 0, 0.025045314830017686, 0],\r\n                    },\r\n                    {\r\n                        frame: 40,\r\n                        values: [1.00205599570012, 0.025045314830017686, 0, 0],\r\n                    },\r\n                ],\r\n            },\r\n            {\r\n                name: \"textPlateZSlide\",\r\n                mesh: this._textPlate,\r\n                property: \"position.z\",\r\n                keys: [\r\n                    {\r\n                        frame: 0,\r\n                        values: [0, 0.0, 0.0],\r\n                    },\r\n                    {\r\n                        frame: 40,\r\n                        values: [Vector3.Forward(this._textPlate._scene.useRightHandedSystem).scale(-0.15).z, 0.0, 0.0],\r\n                    },\r\n                ],\r\n            },\r\n        ];\r\n\r\n        for (const animation of animations) {\r\n            const anim = new Animation(animation.name, animation.property, frameRate, Animation.ANIMATIONTYPE_FLOAT, Animation.ANIMATIONLOOPMODE_CYCLE);\r\n            const animkeyFrames = [];\r\n\r\n            for (const key of animation.keys) {\r\n                animkeyFrames.push({\r\n                    frame: key.frame,\r\n                    value: key.values[0],\r\n                    inTangent: key.values[1],\r\n                    outTangent: key.values[2],\r\n                    interpolation: key.values[3],\r\n                });\r\n            }\r\n\r\n            anim.setKeys(animkeyFrames);\r\n\r\n            if (!animation.mesh) {\r\n                continue;\r\n            }\r\n\r\n            animationGroup.addTargetedAnimation(anim, animation.mesh);\r\n        }\r\n\r\n        animationGroup.normalize(0, 45);\r\n        animationGroup.speedRatio = speedRatio;\r\n\r\n        animationGroup.play();\r\n    }\r\n\r\n    private _createBackMaterial(mesh: Mesh) {\r\n        this._backMaterial = this._backMaterial ?? new MRDLBackplateMaterial(this.name + \"backPlateMaterial\", mesh.getScene());\r\n        this._backMaterial.absoluteSizes = true;\r\n        this._backMaterial.radius = this.radius;\r\n        this._backMaterial.lineWidth = 0.02;\r\n    }\r\n\r\n    private _createFrontMaterial(mesh: Mesh) {\r\n        this._frontMaterial = this._frontMaterial ?? new MRDLFrontplateMaterial(this.name + \"Front Material\", mesh.getScene());\r\n        this.frontMaterial.radius = this.innerQuadRadius;\r\n        this.frontMaterial.fadeOut = 0.0;\r\n    }\r\n\r\n    private _createBackGlowMaterial(mesh: Mesh) {\r\n        const glowRadius = this.radius + 0.04;\r\n        this._backGlowMaterial = this._backGlowMaterial ?? new MRDLBackglowMaterial(this.name + \"Back Glow Material\", mesh.getScene());\r\n        this._backGlowMaterial.bevelRadius = glowRadius;\r\n        this._backGlowMaterial.lineWidth = glowRadius;\r\n        this._backGlowMaterial.motion = 0.0;\r\n    }\r\n\r\n    private _createInnerQuadMaterial(mesh: Mesh) {\r\n        this._innerQuadMaterial = this._innerQuadMaterial ?? new MRDLInnerquadMaterial(\"inner_quad\", mesh.getScene());\r\n        this._innerQuadMaterial.radius = this.innerQuadRadius;\r\n\r\n        if (this.isToggleButton) {\r\n            this._innerQuadMaterial.color = this.innerQuadColor;\r\n        }\r\n    }\r\n\r\n    private _createPlateMaterial(mesh: Mesh) {\r\n        this._plateMaterial = this._plateMaterial ?? new StandardMaterial(this.name + \"Plate Material\", mesh.getScene());\r\n        this._plateMaterial.specularColor = Color3.Black();\r\n    }\r\n\r\n    protected _onToggle(newState: boolean) {\r\n        super._onToggle(newState);\r\n    }\r\n\r\n    protected _affectMaterial(mesh: Mesh) {\r\n        if (this._shareMaterials) {\r\n            // Back\r\n            if (!this._host._touchSharedMaterials[\"mrdlBackplateMaterial\"]) {\r\n                this._createBackMaterial(mesh);\r\n                this._host._touchSharedMaterials[\"mrdlBackplateMaterial\"] = this._backMaterial;\r\n            } else {\r\n                this._backMaterial = this._host._touchSharedMaterials[\"mrdlBackplateMaterial\"] as MRDLBackplateMaterial;\r\n            }\r\n\r\n            // Front\r\n            if (!this._host._touchSharedMaterials[\"mrdlFrontplateMaterial\"]) {\r\n                this._createFrontMaterial(mesh);\r\n                this._host._touchSharedMaterials[\"mrdlFrontplateMaterial\"] = this._frontMaterial;\r\n            } else {\r\n                this._frontMaterial = this._host._touchSharedMaterials[\"mrdlFrontplateMaterial\"] as MRDLFrontplateMaterial;\r\n            }\r\n\r\n            // Back glow\r\n            if (!this._host._touchSharedMaterials[\"mrdlBackglowMaterial\"]) {\r\n                this._createBackGlowMaterial(mesh);\r\n                this._host._touchSharedMaterials[\"mrdlBackglowMaterial\"] = this._backGlowMaterial;\r\n            } else {\r\n                this._backGlowMaterial = this._host._touchSharedMaterials[\"mrdlBackglowMaterial\"] as MRDLBackglowMaterial;\r\n            }\r\n\r\n            // Inner quad\r\n            if (!this._host._touchSharedMaterials[\"mrdlInnerQuadMaterial\"]) {\r\n                this._createInnerQuadMaterial(mesh);\r\n                this._host._touchSharedMaterials[\"mrdlInnerQuadMaterial\"] = this._innerQuadMaterial;\r\n            } else {\r\n                this._innerQuadMaterial = this._host._touchSharedMaterials[\"mrdlInnerQuadMaterial\"] as MRDLInnerquadMaterial;\r\n            }\r\n        } else {\r\n            this._createBackMaterial(mesh);\r\n            this._createFrontMaterial(mesh);\r\n            this._createBackGlowMaterial(mesh);\r\n            this._createInnerQuadMaterial(mesh);\r\n        }\r\n\r\n        this._createPlateMaterial(mesh);\r\n        this._backPlate.material = this._backMaterial;\r\n        this._textPlate.material = this._plateMaterial;\r\n\r\n        if (!this._isBackplateVisible) {\r\n            this._backPlate.visibility = 0;\r\n        }\r\n\r\n        if (this._frontPlate) {\r\n            this._frontPlate.material = this._frontMaterial;\r\n        }\r\n\r\n        if (this._backGlow) {\r\n            this._backGlow.material = this._backGlowMaterial;\r\n        }\r\n\r\n        if (this._innerQuad) {\r\n            this._innerQuad.material = this._innerQuadMaterial;\r\n        }\r\n\r\n        this._rebuildContent();\r\n    }\r\n\r\n    /**\r\n     * Releases all associated resources\r\n     */\r\n    public dispose() {\r\n        super.dispose(); // will dispose main mesh ie. back plate\r\n\r\n        this._disposeTooltip();\r\n        this.onPointerClickObservable.remove(this._pointerClickObserver);\r\n        this.onPointerEnterObservable.remove(this._pointerEnterObserver);\r\n        this.onPointerOutObservable.remove(this._pointerOutObserver);\r\n        this.onToggleObservable.remove(this._toggleObserver);\r\n\r\n        if (!this.shareMaterials) {\r\n            this._backMaterial.dispose();\r\n            this._frontMaterial.dispose();\r\n            this._plateMaterial.dispose();\r\n            this._backGlowMaterial.dispose();\r\n            this._innerQuadMaterial.dispose();\r\n\r\n            if (this._pickedPointObserver) {\r\n                this._host.onPickedPointChangedObservable.remove(this._pickedPointObserver);\r\n                this._pickedPointObserver = null;\r\n            }\r\n        }\r\n    }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}