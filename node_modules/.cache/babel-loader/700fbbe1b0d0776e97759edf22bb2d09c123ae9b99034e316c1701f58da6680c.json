{"ast":null,"code":"import { NodeGeometryBlock } from \"../nodeGeometryBlock.js\";\nimport { RegisterClass } from \"../../../Misc/typeStore.js\";\nimport { NodeGeometryBlockConnectionPointTypes } from \"../Enums/nodeGeometryConnectionPointTypes.js\";\n/**\n * Block used to compose two matrices\n */\nexport class MatrixComposeBlock extends NodeGeometryBlock {\n  /**\n   * Create a new MatrixComposeBlock\n   * @param name defines the block name\n   */\n  constructor(name) {\n    super(name);\n    this.registerInput(\"matrix0\", NodeGeometryBlockConnectionPointTypes.Matrix);\n    this.registerInput(\"matrix1\", NodeGeometryBlockConnectionPointTypes.Matrix);\n    this.registerOutput(\"output\", NodeGeometryBlockConnectionPointTypes.Matrix);\n  }\n  /**\n   * Gets the current class name\n   * @returns the class name\n   */\n  getClassName() {\n    return \"MatrixComposeBlock\";\n  }\n  /**\n   * Gets the matrix0 input component\n   */\n  get matrix0() {\n    return this._inputs[0];\n  }\n  /**\n   * Gets the matrix1 input component\n   */\n  get matrix1() {\n    return this._inputs[1];\n  }\n  /**\n   * Gets the output component\n   */\n  get output() {\n    return this._outputs[0];\n  }\n  _buildBlock() {\n    this.output._storedFunction = state => {\n      if (!this.matrix0.isConnected || !this.matrix1.isConnected) {\n        return null;\n      }\n      const matrix0 = this.matrix0.getConnectedValue(state);\n      const matrix1 = this.matrix1.getConnectedValue(state);\n      if (!matrix0 || !matrix1) {\n        return null;\n      }\n      return matrix0.multiply(matrix1);\n    };\n  }\n}\nRegisterClass(\"BABYLON.MatrixComposeBlock\", MatrixComposeBlock);","map":{"version":3,"names":["NodeGeometryBlock","RegisterClass","NodeGeometryBlockConnectionPointTypes","MatrixComposeBlock","constructor","name","registerInput","Matrix","registerOutput","getClassName","matrix0","_inputs","matrix1","output","_outputs","_buildBlock","_storedFunction","state","isConnected","getConnectedValue","multiply"],"sources":["../../../../../../dev/core/src/Meshes/Node/Blocks/matrixComposeBlock.ts"],"sourcesContent":["import { NodeGeometryBlock } from \"../nodeGeometryBlock\";\r\nimport type { NodeGeometryConnectionPoint } from \"../nodeGeometryBlockConnectionPoint\";\r\nimport { RegisterClass } from \"../../../Misc/typeStore\";\r\nimport { NodeGeometryBlockConnectionPointTypes } from \"../Enums/nodeGeometryConnectionPointTypes\";\r\nimport type { NodeGeometryBuildState } from \"../nodeGeometryBuildState\";\r\nimport type { Matrix } from \"core/Maths/math.vector\";\r\n\r\n/**\r\n * Block used to compose two matrices\r\n */\r\nexport class MatrixComposeBlock extends NodeGeometryBlock {\r\n    /**\r\n     * Create a new MatrixComposeBlock\r\n     * @param name defines the block name\r\n     */\r\n    public constructor(name: string) {\r\n        super(name);\r\n\r\n        this.registerInput(\"matrix0\", NodeGeometryBlockConnectionPointTypes.Matrix);\r\n        this.registerInput(\"matrix1\", NodeGeometryBlockConnectionPointTypes.Matrix);\r\n\r\n        this.registerOutput(\"output\", NodeGeometryBlockConnectionPointTypes.Matrix);\r\n    }\r\n\r\n    /**\r\n     * Gets the current class name\r\n     * @returns the class name\r\n     */\r\n    public getClassName() {\r\n        return \"MatrixComposeBlock\";\r\n    }\r\n\r\n    /**\r\n     * Gets the matrix0 input component\r\n     */\r\n    public get matrix0(): NodeGeometryConnectionPoint {\r\n        return this._inputs[0];\r\n    }\r\n\r\n    /**\r\n     * Gets the matrix1 input component\r\n     */\r\n    public get matrix1(): NodeGeometryConnectionPoint {\r\n        return this._inputs[1];\r\n    }\r\n\r\n    /**\r\n     * Gets the output component\r\n     */\r\n    public get output(): NodeGeometryConnectionPoint {\r\n        return this._outputs[0];\r\n    }\r\n\r\n    protected _buildBlock() {\r\n        this.output._storedFunction = (state: NodeGeometryBuildState) => {\r\n            if (!this.matrix0.isConnected || !this.matrix1.isConnected) {\r\n                return null;\r\n            }\r\n\r\n            const matrix0 = this.matrix0.getConnectedValue(state) as Matrix;\r\n            const matrix1 = this.matrix1.getConnectedValue(state) as Matrix;\r\n\r\n            if (!matrix0 || !matrix1) {\r\n                return null;\r\n            }\r\n            return matrix0.multiply(matrix1);\r\n        };\r\n    }\r\n}\r\n\r\nRegisterClass(\"BABYLON.MatrixComposeBlock\", MatrixComposeBlock);\r\n"],"mappings":"AAAA,SAASA,iBAAiB,QAAQ,yBAAuB;AAEzD,SAASC,aAAa,QAAQ,4BAA0B;AACxD,SAASC,qCAAqC,QAAQ,8CAA4C;AAIlG;;;AAGA,OAAM,MAAOC,kBAAmB,SAAQH,iBAAiB;EACrD;;;;EAIAI,YAAmBC,IAAY;IAC3B,KAAK,CAACA,IAAI,CAAC;IAEX,IAAI,CAACC,aAAa,CAAC,SAAS,EAAEJ,qCAAqC,CAACK,MAAM,CAAC;IAC3E,IAAI,CAACD,aAAa,CAAC,SAAS,EAAEJ,qCAAqC,CAACK,MAAM,CAAC;IAE3E,IAAI,CAACC,cAAc,CAAC,QAAQ,EAAEN,qCAAqC,CAACK,MAAM,CAAC;EAC/E;EAEA;;;;EAIOE,YAAYA,CAAA;IACf,OAAO,oBAAoB;EAC/B;EAEA;;;EAGA,IAAWC,OAAOA,CAAA;IACd,OAAO,IAAI,CAACC,OAAO,CAAC,CAAC,CAAC;EAC1B;EAEA;;;EAGA,IAAWC,OAAOA,CAAA;IACd,OAAO,IAAI,CAACD,OAAO,CAAC,CAAC,CAAC;EAC1B;EAEA;;;EAGA,IAAWE,MAAMA,CAAA;IACb,OAAO,IAAI,CAACC,QAAQ,CAAC,CAAC,CAAC;EAC3B;EAEUC,WAAWA,CAAA;IACjB,IAAI,CAACF,MAAM,CAACG,eAAe,GAAIC,KAA6B,IAAI;MAC5D,IAAI,CAAC,IAAI,CAACP,OAAO,CAACQ,WAAW,IAAI,CAAC,IAAI,CAACN,OAAO,CAACM,WAAW,EAAE;QACxD,OAAO,IAAI;;MAGf,MAAMR,OAAO,GAAG,IAAI,CAACA,OAAO,CAACS,iBAAiB,CAACF,KAAK,CAAW;MAC/D,MAAML,OAAO,GAAG,IAAI,CAACA,OAAO,CAACO,iBAAiB,CAACF,KAAK,CAAW;MAE/D,IAAI,CAACP,OAAO,IAAI,CAACE,OAAO,EAAE;QACtB,OAAO,IAAI;;MAEf,OAAOF,OAAO,CAACU,QAAQ,CAACR,OAAO,CAAC;IACpC,CAAC;EACL;;AAGJX,aAAa,CAAC,4BAA4B,EAAEE,kBAAkB,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}