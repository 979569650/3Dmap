{"ast":null,"code":"import { PhysicsConstraintAxis, PhysicsConstraintType } from \"./IPhysicsEnginePlugin.js\";\n/**\n * This is a holder class for the physics constraint created by the physics plugin\n * It holds a set of functions to control the underlying constraint\n * @see https://doc.babylonjs.com/features/featuresDeepDive/physics/usingPhysicsEngine\n */\nexport class PhysicsConstraint {\n  /**\n   * Constructs a new constraint for the physics constraint.\n   * @param type The type of constraint to create.\n   * @param options The options for the constraint.\n   * @param scene The scene the constraint belongs to.\n   *\n   * This code is useful for creating a new constraint for the physics engine. It checks if the scene has a physics engine, and if the plugin version is correct.\n   * If all checks pass, it initializes the constraint with the given type and options.\n   */\n  constructor(type, options, scene) {\n    /**\n     * V2 Physics plugin private data for a physics material\n     */\n    this._pluginData = undefined;\n    if (!scene) {\n      throw new Error(\"Missing scene parameter for constraint constructor.\");\n    }\n    const physicsEngine = scene.getPhysicsEngine();\n    if (!physicsEngine) {\n      throw new Error(\"No Physics Engine available.\");\n    }\n    if (physicsEngine.getPluginVersion() != 2) {\n      throw new Error(\"Plugin version is incorrect. Expected version 2.\");\n    }\n    const physicsPlugin = physicsEngine.getPhysicsPlugin();\n    if (!physicsPlugin) {\n      throw new Error(\"No Physics Plugin available.\");\n    }\n    this._physicsPlugin = physicsPlugin;\n    this._options = options;\n    this._type = type;\n  }\n  /**\n   * Gets the type of the constraint.\n   *\n   * @returns The type of the constraint.\n   *\n   */\n  get type() {\n    return this._type;\n  }\n  /**\n   * Retrieves the options of the physics constraint.\n   *\n   * @returns The physics constraint parameters.\n   *\n   */\n  get options() {\n    return this._options;\n  }\n  /**\n   * Enable/disable the constraint\n   * @param isEnabled value for the constraint\n   */\n  set isEnabled(isEnabled) {\n    this._physicsPlugin.setEnabled(this, isEnabled);\n  }\n  /**\n   *\n   * @returns true if constraint is enabled\n   */\n  get isEnabled() {\n    return this._physicsPlugin.getEnabled(this);\n  }\n  /**\n   * Enables or disables collisions for the physics engine.\n   *\n   * @param isEnabled - A boolean value indicating whether collisions should be enabled or disabled.\n   *\n   */\n  set isCollisionsEnabled(isEnabled) {\n    this._physicsPlugin.setCollisionsEnabled(this, isEnabled);\n  }\n  /**\n   * Gets whether collisions are enabled for this physics object.\n   *\n   * @returns `true` if collisions are enabled, `false` otherwise.\n   *\n   */\n  get isCollisionsEnabled() {\n    return this._physicsPlugin.getCollisionsEnabled(this);\n  }\n  /**\n   * Gets all bodies that are using this constraint\n   * @returns\n   */\n  getBodiesUsingConstraint() {\n    return this._physicsPlugin.getBodiesUsingConstraint(this);\n  }\n  /**\n   * Disposes the constraint from the physics engine.\n   *\n   * This method is useful for cleaning up the physics engine when a body is no longer needed. Disposing the body will free up resources and prevent memory leaks.\n   */\n  dispose() {\n    this._physicsPlugin.disposeConstraint(this);\n  }\n}\n/**\n * This describes a single limit used by Physics6DoFConstraint\n */\nexport class Physics6DoFLimit {}\n/**\n * A generic constraint, which can be used to build more complex constraints than those specified\n * in PhysicsConstraintType. The axis and pivot options in PhysicsConstraintParameters define the space\n * the constraint operates in. This constraint contains a set of limits, which restrict the\n * relative movement of the bodies in that coordinate system\n */\nexport class Physics6DoFConstraint extends PhysicsConstraint {\n  constructor(constraintParams, limits, scene) {\n    super(PhysicsConstraintType.SIX_DOF, constraintParams, scene);\n    this.limits = limits;\n  }\n  /**\n   * Sets the friction of the given axis of the physics engine.\n   * @param axis - The axis of the physics engine to set the friction for.\n   * @param friction - The friction to set for the given axis.\n   *\n   */\n  setAxisFriction(axis, friction) {\n    this._physicsPlugin.setAxisFriction(this, axis, friction);\n  }\n  /**\n   * Gets the friction of the given axis of the physics engine.\n   * @param axis - The axis of the physics engine.\n   * @returns The friction of the given axis, or null if the constraint hasn't been initialized yet.\n   *\n   */\n  getAxisFriction(axis) {\n    return this._physicsPlugin.getAxisFriction(this, axis);\n  }\n  /**\n   * Sets the limit mode for the given axis of the constraint.\n   * @param axis The axis to set the limit mode for.\n   * @param limitMode The limit mode to set.\n   *\n   * This method is useful for setting the limit mode for a given axis of the constraint. This is important for\n   * controlling the behavior of the physics engine when the constraint is reached. By setting the limit mode,\n   * the engine can be configured to either stop the motion of the objects, or to allow them to continue\n   * moving beyond the constraint.\n   */\n  setAxisMode(axis, limitMode) {\n    this._physicsPlugin.setAxisMode(this, axis, limitMode);\n  }\n  /**\n   * Gets the limit mode of the given axis of the constraint.\n   *\n   * @param axis - The axis of the constraint.\n   * @returns The limit mode of the given axis, or null if the constraint hasn't been initialized yet.\n   *\n   */\n  getAxisMode(axis) {\n    return this._physicsPlugin.getAxisMode(this, axis);\n  }\n  /**\n   * Sets the minimum limit of a given axis of a constraint.\n   * @param axis - The axis of the constraint.\n   * @param minLimit - The minimum limit of the axis.\n   *\n   */\n  setAxisMinLimit(axis, minLimit) {\n    this._physicsPlugin.setAxisMinLimit(this, axis, minLimit);\n  }\n  /**\n   * Gets the minimum limit of the given axis of the physics engine.\n   * @param axis - The axis of the physics engine.\n   * @returns The minimum limit of the given axis, or null if the constraint hasn't been initialized yet.\n   *\n   */\n  getAxisMinLimit(axis) {\n    return this._physicsPlugin.getAxisMinLimit(this, axis);\n  }\n  /**\n   * Sets the maximum limit of the given axis for the physics engine.\n   * @param axis - The axis to set the limit for.\n   * @param limit - The maximum limit of the axis.\n   *\n   * This method is useful for setting the maximum limit of the given axis for the physics engine,\n   * which can be used to control the movement of the physics object. This helps to ensure that the\n   * physics object does not move beyond the given limit.\n   */\n  setAxisMaxLimit(axis, limit) {\n    this._physicsPlugin.setAxisMaxLimit(this, axis, limit);\n  }\n  /**\n   * Gets the maximum limit of the given axis of the physics engine.\n   * @param axis - The axis of the physics engine.\n   * @returns The maximum limit of the given axis, or null if the constraint hasn't been initialized yet.\n   *\n   */\n  getAxisMaxLimit(axis) {\n    return this._physicsPlugin.getAxisMaxLimit(this, axis);\n  }\n  /**\n   * Sets the motor type of the given axis of the constraint.\n   * @param axis - The axis of the constraint.\n   * @param motorType - The type of motor to use.\n   * @returns void\n   *\n   */\n  setAxisMotorType(axis, motorType) {\n    this._physicsPlugin.setAxisMotorType(this, axis, motorType);\n  }\n  /**\n   * Gets the motor type of the specified axis of the constraint.\n   *\n   * @param axis - The axis of the constraint.\n   * @returns The motor type of the specified axis, or null if the constraint hasn't been initialized yet.\n   *\n   */\n  getAxisMotorType(axis) {\n    return this._physicsPlugin.getAxisMotorType(this, axis);\n  }\n  /**\n   * Sets the target velocity of the motor associated with the given axis of the constraint.\n   * @param axis - The axis of the constraint.\n   * @param target - The target velocity of the motor.\n   *\n   * This method is useful for setting the target velocity of the motor associated with the given axis of the constraint.\n   */\n  setAxisMotorTarget(axis, target) {\n    this._physicsPlugin.setAxisMotorTarget(this, axis, target);\n  }\n  /**\n   * Gets the target velocity of the motor associated to the given constraint axis.\n   * @param axis - The constraint axis associated to the motor.\n   * @returns The target velocity of the motor, or null if the constraint hasn't been initialized yet.\n   *\n   */\n  getAxisMotorTarget(axis) {\n    return this._physicsPlugin.getAxisMotorTarget(this, axis);\n  }\n  /**\n   * Sets the maximum force of the motor of the given axis of the constraint.\n   * @param axis - The axis of the constraint.\n   * @param maxForce - The maximum force of the motor.\n   *\n   */\n  setAxisMotorMaxForce(axis, maxForce) {\n    this._physicsPlugin.setAxisMotorMaxForce(this, axis, maxForce);\n  }\n  /**\n   * Gets the maximum force of the motor of the given axis of the constraint.\n   * @param axis - The axis of the constraint.\n   * @returns The maximum force of the motor, or null if the constraint hasn't been initialized yet.\n   *\n   */\n  getAxisMotorMaxForce(axis) {\n    return this._physicsPlugin.getAxisMotorMaxForce(this, axis);\n  }\n}\n/**\n * Represents a Ball and Socket Constraint, used to simulate a joint\n *\n * @param pivotA - The first pivot, defined locally in the first body frame\n * @param pivotB - The second pivot, defined locally in the second body frame\n * @param axisA - The axis of the first body\n * @param axisB - The axis of the second body\n * @param scene - The scene the constraint is applied to\n * @returns The Ball and Socket Constraint\n *\n * This class is useful for simulating a joint between two bodies in a physics engine.\n * It allows for the two bodies to move relative to each other in a way that mimics a ball and socket joint, such as a shoulder or hip joint.\n */\nexport class BallAndSocketConstraint extends PhysicsConstraint {\n  constructor(pivotA, pivotB, axisA, axisB, scene) {\n    super(PhysicsConstraintType.BALL_AND_SOCKET, {\n      pivotA: pivotA,\n      pivotB: pivotB,\n      axisA: axisA,\n      axisB: axisB\n    }, scene);\n  }\n}\n/**\n * Creates a distance constraint.\n * @param maxDistance distance between bodies\n * @param scene The scene the constraint belongs to\n * @returns DistanceConstraint\n *\n * This code is useful for creating a distance constraint in a physics engine.\n * A distance constraint is a type of constraint that keeps two objects at a certain distance from each other.\n * The scene is used to add the constraint to the physics engine.\n */\nexport class DistanceConstraint extends PhysicsConstraint {\n  constructor(maxDistance, scene) {\n    super(PhysicsConstraintType.DISTANCE, {\n      maxDistance: maxDistance\n    }, scene);\n  }\n}\n/**\n * Creates a HingeConstraint, which is a type of PhysicsConstraint.\n *\n * @param pivotA - The first pivot point, in world space.\n * @param pivotB - The second pivot point, in world space.\n * @param scene - The scene the constraint is used in.\n * @returns The new HingeConstraint.\n *\n * This code is useful for creating a HingeConstraint, which is a type of PhysicsConstraint.\n * This constraint is used to simulate a hinge joint between two rigid bodies, allowing them to rotate around a single axis.\n */\nexport class HingeConstraint extends PhysicsConstraint {\n  constructor(pivotA, pivotB, axisA, axisB, scene) {\n    super(PhysicsConstraintType.HINGE, {\n      pivotA: pivotA,\n      pivotB: pivotB,\n      axisA: axisA,\n      axisB: axisB\n    }, scene);\n  }\n}\n/**\n * Creates a SliderConstraint, which is a type of PhysicsConstraint.\n *\n * @param pivotA - The first pivot of the constraint, in world space.\n * @param pivotB - The second pivot of the constraint, in world space.\n * @param axisA - The first axis of the constraint, in world space.\n * @param axisB - The second axis of the constraint, in world space.\n * @param scene - The scene the constraint belongs to.\n * @returns The created SliderConstraint.\n *\n * This code is useful for creating a SliderConstraint, which is a type of PhysicsConstraint.\n * It allows the user to specify the two pivots and two axes of the constraint in world space, as well as the scene the constraint belongs to.\n * This is useful for creating a constraint between two rigid bodies that allows them to move along a certain axis.\n */\nexport class SliderConstraint extends PhysicsConstraint {\n  constructor(pivotA, pivotB, axisA, axisB, scene) {\n    super(PhysicsConstraintType.SLIDER, {\n      pivotA: pivotA,\n      pivotB: pivotB,\n      axisA: axisA,\n      axisB: axisB\n    }, scene);\n  }\n}\n/**\n * Creates a LockConstraint, which is a type of PhysicsConstraint.\n *\n * @param pivotA - The first pivot of the constraint in local space.\n * @param pivotB - The second pivot of the constraint in local space.\n * @param axisA - The first axis of the constraint in local space.\n * @param axisB - The second axis of the constraint in local space.\n * @param scene - The scene the constraint belongs to.\n * @returns The created LockConstraint.\n *\n * This code is useful for creating a LockConstraint, which is a type of PhysicsConstraint.\n * It takes in two pivots and two axes in local space, as well as the scene the constraint belongs to, and creates a LockConstraint.\n */\nexport class LockConstraint extends PhysicsConstraint {\n  constructor(pivotA, pivotB, axisA, axisB, scene) {\n    super(PhysicsConstraintType.LOCK, {\n      pivotA: pivotA,\n      pivotB: pivotB,\n      axisA: axisA,\n      axisB: axisB\n    }, scene);\n  }\n}\n/**\n * Creates a PrismaticConstraint, which is a type of PhysicsConstraint.\n *\n * @param pivotA - The first pivot of the constraint in local space.\n * @param pivotB - The second pivot of the constraint in local space.\n * @param axisA - The first axis of the constraint in local space.\n * @param axisB - The second axis of the constraint in local space.\n * @param scene - The scene the constraint belongs to.\n * @returns The created LockConstraint.\n *\n * This code is useful for creating a PrismaticConstraint, which is a type of PhysicsConstraint.\n * It takes in two pivots and two axes in local space, as well as the scene the constraint belongs to, and creates a PrismaticConstraint.\n */\nexport class PrismaticConstraint extends PhysicsConstraint {\n  constructor(pivotA, pivotB, axisA, axisB, scene) {\n    super(PhysicsConstraintType.PRISMATIC, {\n      pivotA: pivotA,\n      pivotB: pivotB,\n      axisA: axisA,\n      axisB: axisB\n    }, scene);\n  }\n}\n/**\n * Creates a SpringConstraint, which is a type of Physics6DoFConstraint. This constraint applies a force at the ends which is proportional\n * to the distance between ends, and a stiffness and damping factor. The force is calculated as (stiffness * positionError) - (damping * velocity)\n *\n * @param pivotA - The first pivot of the constraint in local space.\n * @param pivotB - The second pivot of the constraint in local space.\n * @param axisA - The first axis of the constraint in local space.\n * @param axisB - The second axis of the constraint in local space.\n * @param minDistance - The minimum distance between the two pivots.\n * @param maxDistance - The maximum distance between the two pivots.\n * @param stiffness - The stiffness of the spring.\n * @param damping - The damping of the spring.\n * @param scene - The scene the constraint belongs to.\n * @returns The created SpringConstraint.\n */\nexport class SpringConstraint extends Physics6DoFConstraint {\n  constructor(pivotA, pivotB, axisA, axisB, minDistance, maxDistance, stiffness, damping, scene) {\n    super({\n      pivotA,\n      pivotB,\n      axisA,\n      axisB\n    }, [{\n      axis: PhysicsConstraintAxis.LINEAR_DISTANCE,\n      minLimit: minDistance,\n      maxLimit: maxDistance,\n      stiffness,\n      damping\n    }], scene);\n  }\n}","map":{"version":3,"names":["PhysicsConstraintAxis","PhysicsConstraintType","PhysicsConstraint","constructor","type","options","scene","_pluginData","undefined","Error","physicsEngine","getPhysicsEngine","getPluginVersion","physicsPlugin","getPhysicsPlugin","_physicsPlugin","_options","_type","isEnabled","setEnabled","getEnabled","isCollisionsEnabled","setCollisionsEnabled","getCollisionsEnabled","getBodiesUsingConstraint","dispose","disposeConstraint","Physics6DoFLimit","Physics6DoFConstraint","constraintParams","limits","SIX_DOF","setAxisFriction","axis","friction","getAxisFriction","setAxisMode","limitMode","getAxisMode","setAxisMinLimit","minLimit","getAxisMinLimit","setAxisMaxLimit","limit","getAxisMaxLimit","setAxisMotorType","motorType","getAxisMotorType","setAxisMotorTarget","target","getAxisMotorTarget","setAxisMotorMaxForce","maxForce","getAxisMotorMaxForce","BallAndSocketConstraint","pivotA","pivotB","axisA","axisB","BALL_AND_SOCKET","DistanceConstraint","maxDistance","DISTANCE","HingeConstraint","HINGE","SliderConstraint","SLIDER","LockConstraint","LOCK","PrismaticConstraint","PRISMATIC","SpringConstraint","minDistance","stiffness","damping","LINEAR_DISTANCE","maxLimit"],"sources":["../../../../../dev/core/src/Physics/v2/physicsConstraint.ts"],"sourcesContent":["import type { Scene } from \"../../scene\";\r\nimport type { Vector3 } from \"../../Maths/math.vector\";\r\nimport type { Nullable } from \"../../types\";\r\nimport type { IPhysicsEnginePluginV2, PhysicsConstraintParameters, PhysicsConstraintAxisLimitMode, PhysicsConstraintMotorType, ConstrainedBodyPair } from \"./IPhysicsEnginePlugin\";\r\nimport { PhysicsConstraintAxis, PhysicsConstraintType } from \"./IPhysicsEnginePlugin\";\r\n\r\n/**\r\n * This is a holder class for the physics constraint created by the physics plugin\r\n * It holds a set of functions to control the underlying constraint\r\n * @see https://doc.babylonjs.com/features/featuresDeepDive/physics/usingPhysicsEngine\r\n */\r\nexport class PhysicsConstraint {\r\n    /**\r\n     * V2 Physics plugin private data for a physics material\r\n     */\r\n    public _pluginData: any = undefined;\r\n    /**\r\n     * The V2 plugin used to create and manage this Physics Body\r\n     */\r\n    protected _physicsPlugin: IPhysicsEnginePluginV2;\r\n    protected _options: PhysicsConstraintParameters;\r\n    protected _type: PhysicsConstraintType;\r\n    /**\r\n     * @internal\r\n     * The internal options that were used to init the constraint\r\n     */\r\n    public _initOptions?: PhysicsConstraintParameters;\r\n\r\n    /**\r\n     * Constructs a new constraint for the physics constraint.\r\n     * @param type The type of constraint to create.\r\n     * @param options The options for the constraint.\r\n     * @param scene The scene the constraint belongs to.\r\n     *\r\n     * This code is useful for creating a new constraint for the physics engine. It checks if the scene has a physics engine, and if the plugin version is correct.\r\n     * If all checks pass, it initializes the constraint with the given type and options.\r\n     */\r\n    constructor(type: PhysicsConstraintType, options: PhysicsConstraintParameters, scene: Scene) {\r\n        if (!scene) {\r\n            throw new Error(\"Missing scene parameter for constraint constructor.\");\r\n        }\r\n        const physicsEngine = scene.getPhysicsEngine();\r\n        if (!physicsEngine) {\r\n            throw new Error(\"No Physics Engine available.\");\r\n        }\r\n        if (physicsEngine.getPluginVersion() != 2) {\r\n            throw new Error(\"Plugin version is incorrect. Expected version 2.\");\r\n        }\r\n        const physicsPlugin = physicsEngine.getPhysicsPlugin();\r\n        if (!physicsPlugin) {\r\n            throw new Error(\"No Physics Plugin available.\");\r\n        }\r\n\r\n        this._physicsPlugin = physicsPlugin as IPhysicsEnginePluginV2;\r\n        this._options = options;\r\n        this._type = type;\r\n    }\r\n\r\n    /**\r\n     * Gets the type of the constraint.\r\n     *\r\n     * @returns The type of the constraint.\r\n     *\r\n     */\r\n    public get type(): PhysicsConstraintType {\r\n        return this._type;\r\n    }\r\n\r\n    /**\r\n     * Retrieves the options of the physics constraint.\r\n     *\r\n     * @returns The physics constraint parameters.\r\n     *\r\n     */\r\n    public get options(): PhysicsConstraintParameters {\r\n        return this._options;\r\n    }\r\n\r\n    /**\r\n     * Enable/disable the constraint\r\n     * @param isEnabled value for the constraint\r\n     */\r\n    public set isEnabled(isEnabled: boolean) {\r\n        this._physicsPlugin.setEnabled(this, isEnabled);\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @returns true if constraint is enabled\r\n     */\r\n    public get isEnabled(): boolean {\r\n        return this._physicsPlugin.getEnabled(this);\r\n    }\r\n\r\n    /**\r\n     * Enables or disables collisions for the physics engine.\r\n     *\r\n     * @param isEnabled - A boolean value indicating whether collisions should be enabled or disabled.\r\n     *\r\n     */\r\n    public set isCollisionsEnabled(isEnabled: boolean) {\r\n        this._physicsPlugin.setCollisionsEnabled(this, isEnabled);\r\n    }\r\n\r\n    /**\r\n     * Gets whether collisions are enabled for this physics object.\r\n     *\r\n     * @returns `true` if collisions are enabled, `false` otherwise.\r\n     *\r\n     */\r\n    public get isCollisionsEnabled(): boolean {\r\n        return this._physicsPlugin.getCollisionsEnabled(this);\r\n    }\r\n\r\n    /**\r\n     * Gets all bodies that are using this constraint\r\n     * @returns\r\n     */\r\n    public getBodiesUsingConstraint(): ConstrainedBodyPair[] {\r\n        return this._physicsPlugin.getBodiesUsingConstraint(this);\r\n    }\r\n\r\n    /**\r\n     * Disposes the constraint from the physics engine.\r\n     *\r\n     * This method is useful for cleaning up the physics engine when a body is no longer needed. Disposing the body will free up resources and prevent memory leaks.\r\n     */\r\n    public dispose(): void {\r\n        this._physicsPlugin.disposeConstraint(this);\r\n    }\r\n}\r\n\r\n/**\r\n * This describes a single limit used by Physics6DoFConstraint\r\n */\r\nexport class Physics6DoFLimit {\r\n    /**\r\n     * The axis ID to limit\r\n     */\r\n    axis: PhysicsConstraintAxis;\r\n    /**\r\n     * An optional minimum limit for the axis.\r\n     * Corresponds to a distance in meters for linear axes, an angle in radians for angular axes.\r\n     */\r\n    minLimit?: number;\r\n    /**\r\n     * An optional maximum limit for the axis.\r\n     * Corresponds to a distance in meters for linear axes, an angle in radians for angular axes.\r\n     */\r\n    maxLimit?: number;\r\n    /**\r\n     * The stiffness of the constraint.\r\n     */\r\n    stiffness?: number;\r\n    /**\r\n     * A constraint parameter that specifies damping.\r\n     */\r\n    damping?: number;\r\n}\r\n\r\n/**\r\n * A generic constraint, which can be used to build more complex constraints than those specified\r\n * in PhysicsConstraintType. The axis and pivot options in PhysicsConstraintParameters define the space\r\n * the constraint operates in. This constraint contains a set of limits, which restrict the\r\n * relative movement of the bodies in that coordinate system\r\n */\r\nexport class Physics6DoFConstraint extends PhysicsConstraint {\r\n    /**\r\n     * The collection of limits which this constraint will apply\r\n     */\r\n    public limits: Physics6DoFLimit[];\r\n\r\n    constructor(constraintParams: PhysicsConstraintParameters, limits: Physics6DoFLimit[], scene: Scene) {\r\n        super(PhysicsConstraintType.SIX_DOF, constraintParams, scene);\r\n        this.limits = limits;\r\n    }\r\n\r\n    /**\r\n     * Sets the friction of the given axis of the physics engine.\r\n     * @param axis - The axis of the physics engine to set the friction for.\r\n     * @param friction - The friction to set for the given axis.\r\n     *\r\n     */\r\n    public setAxisFriction(axis: PhysicsConstraintAxis, friction: number): void {\r\n        this._physicsPlugin.setAxisFriction(this, axis, friction);\r\n    }\r\n\r\n    /**\r\n     * Gets the friction of the given axis of the physics engine.\r\n     * @param axis - The axis of the physics engine.\r\n     * @returns The friction of the given axis, or null if the constraint hasn't been initialized yet.\r\n     *\r\n     */\r\n    public getAxisFriction(axis: PhysicsConstraintAxis): Nullable<number> {\r\n        return this._physicsPlugin.getAxisFriction(this, axis);\r\n    }\r\n\r\n    /**\r\n     * Sets the limit mode for the given axis of the constraint.\r\n     * @param axis The axis to set the limit mode for.\r\n     * @param limitMode The limit mode to set.\r\n     *\r\n     * This method is useful for setting the limit mode for a given axis of the constraint. This is important for\r\n     * controlling the behavior of the physics engine when the constraint is reached. By setting the limit mode,\r\n     * the engine can be configured to either stop the motion of the objects, or to allow them to continue\r\n     * moving beyond the constraint.\r\n     */\r\n    public setAxisMode(axis: PhysicsConstraintAxis, limitMode: PhysicsConstraintAxisLimitMode): void {\r\n        this._physicsPlugin.setAxisMode(this, axis, limitMode);\r\n    }\r\n\r\n    /**\r\n     * Gets the limit mode of the given axis of the constraint.\r\n     *\r\n     * @param axis - The axis of the constraint.\r\n     * @returns The limit mode of the given axis, or null if the constraint hasn't been initialized yet.\r\n     *\r\n     */\r\n    public getAxisMode(axis: PhysicsConstraintAxis): Nullable<PhysicsConstraintAxisLimitMode> {\r\n        return this._physicsPlugin.getAxisMode(this, axis);\r\n    }\r\n\r\n    /**\r\n     * Sets the minimum limit of a given axis of a constraint.\r\n     * @param axis - The axis of the constraint.\r\n     * @param minLimit - The minimum limit of the axis.\r\n     *\r\n     */\r\n    public setAxisMinLimit(axis: PhysicsConstraintAxis, minLimit: number): void {\r\n        this._physicsPlugin.setAxisMinLimit(this, axis, minLimit);\r\n    }\r\n\r\n    /**\r\n     * Gets the minimum limit of the given axis of the physics engine.\r\n     * @param axis - The axis of the physics engine.\r\n     * @returns The minimum limit of the given axis, or null if the constraint hasn't been initialized yet.\r\n     *\r\n     */\r\n    public getAxisMinLimit(axis: PhysicsConstraintAxis): Nullable<number> {\r\n        return this._physicsPlugin.getAxisMinLimit(this, axis);\r\n    }\r\n\r\n    /**\r\n     * Sets the maximum limit of the given axis for the physics engine.\r\n     * @param axis - The axis to set the limit for.\r\n     * @param limit - The maximum limit of the axis.\r\n     *\r\n     * This method is useful for setting the maximum limit of the given axis for the physics engine,\r\n     * which can be used to control the movement of the physics object. This helps to ensure that the\r\n     * physics object does not move beyond the given limit.\r\n     */\r\n    public setAxisMaxLimit(axis: PhysicsConstraintAxis, limit: number): void {\r\n        this._physicsPlugin.setAxisMaxLimit(this, axis, limit);\r\n    }\r\n\r\n    /**\r\n     * Gets the maximum limit of the given axis of the physics engine.\r\n     * @param axis - The axis of the physics engine.\r\n     * @returns The maximum limit of the given axis, or null if the constraint hasn't been initialized yet.\r\n     *\r\n     */\r\n    public getAxisMaxLimit(axis: PhysicsConstraintAxis): Nullable<number> {\r\n        return this._physicsPlugin.getAxisMaxLimit(this, axis);\r\n    }\r\n\r\n    /**\r\n     * Sets the motor type of the given axis of the constraint.\r\n     * @param axis - The axis of the constraint.\r\n     * @param motorType - The type of motor to use.\r\n     * @returns void\r\n     *\r\n     */\r\n    public setAxisMotorType(axis: PhysicsConstraintAxis, motorType: PhysicsConstraintMotorType): void {\r\n        this._physicsPlugin.setAxisMotorType(this, axis, motorType);\r\n    }\r\n\r\n    /**\r\n     * Gets the motor type of the specified axis of the constraint.\r\n     *\r\n     * @param axis - The axis of the constraint.\r\n     * @returns The motor type of the specified axis, or null if the constraint hasn't been initialized yet.\r\n     *\r\n     */\r\n    public getAxisMotorType(axis: PhysicsConstraintAxis): Nullable<PhysicsConstraintMotorType> {\r\n        return this._physicsPlugin.getAxisMotorType(this, axis);\r\n    }\r\n\r\n    /**\r\n     * Sets the target velocity of the motor associated with the given axis of the constraint.\r\n     * @param axis - The axis of the constraint.\r\n     * @param target - The target velocity of the motor.\r\n     *\r\n     * This method is useful for setting the target velocity of the motor associated with the given axis of the constraint.\r\n     */\r\n    public setAxisMotorTarget(axis: PhysicsConstraintAxis, target: number): void {\r\n        this._physicsPlugin.setAxisMotorTarget(this, axis, target);\r\n    }\r\n\r\n    /**\r\n     * Gets the target velocity of the motor associated to the given constraint axis.\r\n     * @param axis - The constraint axis associated to the motor.\r\n     * @returns The target velocity of the motor, or null if the constraint hasn't been initialized yet.\r\n     *\r\n     */\r\n    public getAxisMotorTarget(axis: PhysicsConstraintAxis): Nullable<number> {\r\n        return this._physicsPlugin.getAxisMotorTarget(this, axis);\r\n    }\r\n\r\n    /**\r\n     * Sets the maximum force of the motor of the given axis of the constraint.\r\n     * @param axis - The axis of the constraint.\r\n     * @param maxForce - The maximum force of the motor.\r\n     *\r\n     */\r\n    public setAxisMotorMaxForce(axis: PhysicsConstraintAxis, maxForce: number): void {\r\n        this._physicsPlugin.setAxisMotorMaxForce(this, axis, maxForce);\r\n    }\r\n\r\n    /**\r\n     * Gets the maximum force of the motor of the given axis of the constraint.\r\n     * @param axis - The axis of the constraint.\r\n     * @returns The maximum force of the motor, or null if the constraint hasn't been initialized yet.\r\n     *\r\n     */\r\n    public getAxisMotorMaxForce(axis: PhysicsConstraintAxis): Nullable<number> {\r\n        return this._physicsPlugin.getAxisMotorMaxForce(this, axis);\r\n    }\r\n}\r\n\r\n/**\r\n * Represents a Ball and Socket Constraint, used to simulate a joint\r\n *\r\n * @param pivotA - The first pivot, defined locally in the first body frame\r\n * @param pivotB - The second pivot, defined locally in the second body frame\r\n * @param axisA - The axis of the first body\r\n * @param axisB - The axis of the second body\r\n * @param scene - The scene the constraint is applied to\r\n * @returns The Ball and Socket Constraint\r\n *\r\n * This class is useful for simulating a joint between two bodies in a physics engine.\r\n * It allows for the two bodies to move relative to each other in a way that mimics a ball and socket joint, such as a shoulder or hip joint.\r\n */\r\nexport class BallAndSocketConstraint extends PhysicsConstraint {\r\n    constructor(pivotA: Vector3, pivotB: Vector3, axisA: Vector3, axisB: Vector3, scene: Scene) {\r\n        super(PhysicsConstraintType.BALL_AND_SOCKET, { pivotA: pivotA, pivotB: pivotB, axisA: axisA, axisB: axisB }, scene);\r\n    }\r\n}\r\n\r\n/**\r\n * Creates a distance constraint.\r\n * @param maxDistance distance between bodies\r\n * @param scene The scene the constraint belongs to\r\n * @returns DistanceConstraint\r\n *\r\n * This code is useful for creating a distance constraint in a physics engine.\r\n * A distance constraint is a type of constraint that keeps two objects at a certain distance from each other.\r\n * The scene is used to add the constraint to the physics engine.\r\n */\r\nexport class DistanceConstraint extends PhysicsConstraint {\r\n    constructor(maxDistance: number, scene: Scene) {\r\n        super(PhysicsConstraintType.DISTANCE, { maxDistance: maxDistance }, scene);\r\n    }\r\n}\r\n\r\n/**\r\n * Creates a HingeConstraint, which is a type of PhysicsConstraint.\r\n *\r\n * @param pivotA - The first pivot point, in world space.\r\n * @param pivotB - The second pivot point, in world space.\r\n * @param scene - The scene the constraint is used in.\r\n * @returns The new HingeConstraint.\r\n *\r\n * This code is useful for creating a HingeConstraint, which is a type of PhysicsConstraint.\r\n * This constraint is used to simulate a hinge joint between two rigid bodies, allowing them to rotate around a single axis.\r\n */\r\nexport class HingeConstraint extends PhysicsConstraint {\r\n    constructor(pivotA: Vector3, pivotB: Vector3, axisA: Vector3, axisB: Vector3, scene: Scene) {\r\n        super(PhysicsConstraintType.HINGE, { pivotA: pivotA, pivotB: pivotB, axisA: axisA, axisB: axisB }, scene);\r\n    }\r\n}\r\n\r\n/**\r\n * Creates a SliderConstraint, which is a type of PhysicsConstraint.\r\n *\r\n * @param pivotA - The first pivot of the constraint, in world space.\r\n * @param pivotB - The second pivot of the constraint, in world space.\r\n * @param axisA - The first axis of the constraint, in world space.\r\n * @param axisB - The second axis of the constraint, in world space.\r\n * @param scene - The scene the constraint belongs to.\r\n * @returns The created SliderConstraint.\r\n *\r\n * This code is useful for creating a SliderConstraint, which is a type of PhysicsConstraint.\r\n * It allows the user to specify the two pivots and two axes of the constraint in world space, as well as the scene the constraint belongs to.\r\n * This is useful for creating a constraint between two rigid bodies that allows them to move along a certain axis.\r\n */\r\nexport class SliderConstraint extends PhysicsConstraint {\r\n    constructor(pivotA: Vector3, pivotB: Vector3, axisA: Vector3, axisB: Vector3, scene: Scene) {\r\n        super(PhysicsConstraintType.SLIDER, { pivotA: pivotA, pivotB: pivotB, axisA: axisA, axisB: axisB }, scene);\r\n    }\r\n}\r\n\r\n/**\r\n * Creates a LockConstraint, which is a type of PhysicsConstraint.\r\n *\r\n * @param pivotA - The first pivot of the constraint in local space.\r\n * @param pivotB - The second pivot of the constraint in local space.\r\n * @param axisA - The first axis of the constraint in local space.\r\n * @param axisB - The second axis of the constraint in local space.\r\n * @param scene - The scene the constraint belongs to.\r\n * @returns The created LockConstraint.\r\n *\r\n * This code is useful for creating a LockConstraint, which is a type of PhysicsConstraint.\r\n * It takes in two pivots and two axes in local space, as well as the scene the constraint belongs to, and creates a LockConstraint.\r\n */\r\nexport class LockConstraint extends PhysicsConstraint {\r\n    constructor(pivotA: Vector3, pivotB: Vector3, axisA: Vector3, axisB: Vector3, scene: Scene) {\r\n        super(PhysicsConstraintType.LOCK, { pivotA: pivotA, pivotB: pivotB, axisA: axisA, axisB: axisB }, scene);\r\n    }\r\n}\r\n\r\n/**\r\n * Creates a PrismaticConstraint, which is a type of PhysicsConstraint.\r\n *\r\n * @param pivotA - The first pivot of the constraint in local space.\r\n * @param pivotB - The second pivot of the constraint in local space.\r\n * @param axisA - The first axis of the constraint in local space.\r\n * @param axisB - The second axis of the constraint in local space.\r\n * @param scene - The scene the constraint belongs to.\r\n * @returns The created LockConstraint.\r\n *\r\n * This code is useful for creating a PrismaticConstraint, which is a type of PhysicsConstraint.\r\n * It takes in two pivots and two axes in local space, as well as the scene the constraint belongs to, and creates a PrismaticConstraint.\r\n */\r\nexport class PrismaticConstraint extends PhysicsConstraint {\r\n    constructor(pivotA: Vector3, pivotB: Vector3, axisA: Vector3, axisB: Vector3, scene: Scene) {\r\n        super(PhysicsConstraintType.PRISMATIC, { pivotA: pivotA, pivotB: pivotB, axisA: axisA, axisB: axisB }, scene);\r\n    }\r\n}\r\n\r\n/**\r\n * Creates a SpringConstraint, which is a type of Physics6DoFConstraint. This constraint applies a force at the ends which is proportional\r\n * to the distance between ends, and a stiffness and damping factor. The force is calculated as (stiffness * positionError) - (damping * velocity)\r\n *\r\n * @param pivotA - The first pivot of the constraint in local space.\r\n * @param pivotB - The second pivot of the constraint in local space.\r\n * @param axisA - The first axis of the constraint in local space.\r\n * @param axisB - The second axis of the constraint in local space.\r\n * @param minDistance - The minimum distance between the two pivots.\r\n * @param maxDistance - The maximum distance between the two pivots.\r\n * @param stiffness - The stiffness of the spring.\r\n * @param damping - The damping of the spring.\r\n * @param scene - The scene the constraint belongs to.\r\n * @returns The created SpringConstraint.\r\n */\r\nexport class SpringConstraint extends Physics6DoFConstraint {\r\n    constructor(pivotA: Vector3, pivotB: Vector3, axisA: Vector3, axisB: Vector3, minDistance: number, maxDistance: number, stiffness: number, damping: number, scene: Scene) {\r\n        super({ pivotA, pivotB, axisA, axisB }, [{ axis: PhysicsConstraintAxis.LINEAR_DISTANCE, minLimit: minDistance, maxLimit: maxDistance, stiffness, damping }], scene);\r\n    }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}