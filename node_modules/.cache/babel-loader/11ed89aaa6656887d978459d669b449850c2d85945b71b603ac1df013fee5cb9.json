{"ast":null,"code":"import { Observable } from \"@babylonjs/core/Misc/observable.js\";\nimport { Vector3 } from \"@babylonjs/core/Maths/math.vector.js\";\nimport { Control3D } from \"./control3D.js\";\nimport { CreateBox } from \"@babylonjs/core/Meshes/Builders/boxBuilder.js\";\nimport { PointerDragBehavior } from \"@babylonjs/core/Behaviors/Meshes/pointerDragBehavior.js\";\nimport { SceneLoader } from \"@babylonjs/core/Loading/sceneLoader.js\";\nimport { MRDLSliderBarMaterial } from \"../materials/mrdl/mrdlSliderBarMaterial.js\";\nimport { MRDLSliderThumbMaterial } from \"../materials/mrdl/mrdlSliderThumbMaterial.js\";\nimport { MRDLBackplateMaterial } from \"../materials/mrdl/mrdlBackplateMaterial.js\";\nconst SLIDER_MIN = 0;\nconst SLIDER_MAX = 100;\nconst SLIDER_VAL = 50;\nconst SLIDER_STEP = 0;\nconst SLIDER_SCALING = 1.0;\nconst SLIDER_MARGIN = 0.2;\n/**\n * Class used to create a slider in 3D\n */\nexport class Slider3D extends Control3D {\n  /**\n   * Creates a new slider\n   * @param name defines the control name\n   * @param sliderBackplateVisible defines if the control has a backplate, default is false\n   */\n  constructor(name, sliderBackplateVisible) {\n    super(name);\n    /** Observable raised when the sldier value changes */\n    this.onValueChangedObservable = new Observable();\n    this._sliderBackplateVisible = sliderBackplateVisible || false;\n    this._minimum = SLIDER_MIN;\n    this._maximum = SLIDER_MAX;\n    this._step = SLIDER_STEP;\n    this._value = SLIDER_VAL;\n  }\n  /**\n   * Gets the mesh used to render this control\n   */\n  get mesh() {\n    if (this.node) {\n      return this._sliderThumb;\n    }\n    return null;\n  }\n  /** Gets or sets minimum value */\n  get minimum() {\n    return this._minimum;\n  }\n  set minimum(value) {\n    if (this._minimum === value) {\n      return;\n    }\n    this._minimum = Math.max(value, SLIDER_MIN);\n    this._value = Math.max(Math.min(this._value, this._maximum), this._minimum);\n  }\n  /** Gets or sets maximum value */\n  get maximum() {\n    return this._maximum;\n  }\n  set maximum(value) {\n    if (this._maximum === value) {\n      return;\n    }\n    this._maximum = Math.max(value, this._minimum);\n    this._value = Math.max(Math.min(this._value, this._maximum), this._minimum);\n  }\n  /** Gets or sets step value */\n  get step() {\n    return this._step;\n  }\n  set step(value) {\n    if (this._step === value) {\n      return;\n    }\n    this._step = Math.max(Math.min(value, this._maximum - this._minimum), SLIDER_STEP);\n  }\n  /** Gets or sets current value */\n  get value() {\n    return this._value;\n  }\n  set value(value) {\n    if (this._value === value) {\n      return;\n    }\n    this._value = Math.max(Math.min(value, this._maximum), this._minimum);\n    if (this._sliderThumb) {\n      this._sliderThumb.position.x = this._convertToPosition(this.value);\n    }\n    this.onValueChangedObservable.notifyObservers(this._value);\n  }\n  get start() {\n    if (!this.node) {\n      return -SLIDER_SCALING / 2;\n    }\n    return this._sliderBar.position.x - this._sliderBar.scaling.x / 2;\n  }\n  get end() {\n    if (!this.node) {\n      return SLIDER_SCALING / 2;\n    }\n    return this._sliderBar.position.x + this._sliderBar.scaling.x / 2;\n  }\n  /**\n   * Gets the slider bar material used by this control\n   */\n  get sliderBarMaterial() {\n    return this._sliderBarMaterial;\n  }\n  /**\n   * Gets the slider thumb material used by this control\n   */\n  get sliderThumbMaterial() {\n    return this._sliderThumbMaterial;\n  }\n  /**\n   * Gets the slider backplate material used by this control\n   */\n  get sliderBackplateMaterial() {\n    return this._sliderBackplateMaterial;\n  }\n  /** Sets a boolean indicating if the control is visible */\n  set isVisible(value) {\n    var _a;\n    if (this._isVisible === value) {\n      return;\n    }\n    this._isVisible = value;\n    (_a = this.node) === null || _a === void 0 ? void 0 : _a.setEnabled(value);\n  }\n  // Mesh association\n  _createNode(scene) {\n    const sliderBackplate = CreateBox(`${this.name}_sliderbackplate`, {\n      width: 1.0,\n      height: 1.0,\n      depth: 1.0\n    }, scene);\n    sliderBackplate.isPickable = false;\n    sliderBackplate.visibility = 0;\n    sliderBackplate.scaling = new Vector3(1, 0.5, 0.8);\n    SceneLoader.ImportMeshAsync(undefined, Slider3D.MODEL_BASE_URL, Slider3D.MODEL_FILENAME, scene).then(result => {\n      // make all meshes not pickable. Required meshes' pickable state will be set later.\n      result.meshes.forEach(m => {\n        m.isPickable = false;\n      });\n      const sliderBackplateModel = result.meshes[1];\n      const sliderBarModel = result.meshes[1].clone(`${this.name}_sliderbar`, sliderBackplate);\n      const sliderThumbModel = result.meshes[1].clone(`${this.name}_sliderthumb`, sliderBackplate);\n      sliderBackplateModel.visibility = 0;\n      if (this._sliderBackplateVisible) {\n        sliderBackplateModel.visibility = 1;\n        sliderBackplateModel.name = `${this.name}_sliderbackplate`;\n        sliderBackplateModel.scaling.x = 1;\n        sliderBackplateModel.scaling.z = 0.2;\n        sliderBackplateModel.parent = sliderBackplate;\n        if (this._sliderBackplateMaterial) {\n          sliderBackplateModel.material = this._sliderBackplateMaterial;\n        }\n        this._sliderBackplate = sliderBackplateModel;\n      }\n      if (sliderBarModel) {\n        sliderBarModel.parent = sliderBackplate;\n        sliderBarModel.position.z = -0.1;\n        sliderBarModel.scaling = new Vector3(SLIDER_SCALING - SLIDER_MARGIN, 0.04, 0.3);\n        if (this._sliderBarMaterial) {\n          sliderBarModel.material = this._sliderBarMaterial;\n        }\n        this._sliderBar = sliderBarModel;\n      }\n      if (sliderThumbModel) {\n        sliderThumbModel.parent = sliderBackplate;\n        sliderThumbModel.isPickable = true;\n        sliderThumbModel.position.z = -0.115;\n        sliderThumbModel.scaling = new Vector3(0.025, 0.3, 0.6);\n        sliderThumbModel.position.x = this._convertToPosition(this.value);\n        sliderThumbModel.addBehavior(this._createBehavior());\n        if (this._sliderThumbMaterial) {\n          sliderThumbModel.material = this._sliderThumbMaterial;\n        }\n        this._sliderThumb = sliderThumbModel;\n      }\n      this._injectGUI3DReservedDataStore(sliderBackplate).control = this;\n      sliderBackplate.getChildMeshes().forEach(mesh => {\n        this._injectGUI3DReservedDataStore(mesh).control = this;\n      });\n    });\n    this._affectMaterial(sliderBackplate);\n    return sliderBackplate;\n  }\n  _affectMaterial(mesh) {\n    var _a, _b, _c;\n    this._sliderBackplateMaterial = (_a = this._sliderBackplateMaterial) !== null && _a !== void 0 ? _a : new MRDLBackplateMaterial(`${this.name}_sliderbackplate_material`, mesh.getScene());\n    this._sliderBarMaterial = (_b = this._sliderBarMaterial) !== null && _b !== void 0 ? _b : new MRDLSliderBarMaterial(`${this.name}_sliderbar_material`, mesh.getScene());\n    this._sliderThumbMaterial = (_c = this._sliderThumbMaterial) !== null && _c !== void 0 ? _c : new MRDLSliderThumbMaterial(`${this.name}_sliderthumb_material`, mesh.getScene());\n  }\n  _createBehavior() {\n    const pointerDragBehavior = new PointerDragBehavior({\n      dragAxis: Vector3.Right()\n    });\n    pointerDragBehavior.moveAttached = false;\n    pointerDragBehavior.onDragStartObservable.add(() => {\n      this._draggedPosition = this._sliderThumb.position.x;\n    });\n    pointerDragBehavior.onDragObservable.add(event => {\n      this._draggedPosition += event.dragDistance / this.scaling.x;\n      this.value = this._convertToValue(this._draggedPosition);\n    });\n    return pointerDragBehavior;\n  }\n  _convertToPosition(value) {\n    const position = (value - this.minimum) / (this.maximum - this.minimum) * (this.end - this.start) + this.start;\n    return Math.min(Math.max(position, this.start), this.end);\n  }\n  _convertToValue(position) {\n    let value = (position - this.start) / (this.end - this.start) * (this.maximum - this.minimum);\n    value = this.step ? Math.round(value / this.step) * this.step : value;\n    return Math.max(Math.min(this.minimum + value, this._maximum), this._minimum);\n  }\n  /**\n   * Releases all associated resources\n   */\n  dispose() {\n    var _a, _b, _c, _d, _e, _f;\n    super.dispose();\n    (_a = this._sliderBar) === null || _a === void 0 ? void 0 : _a.dispose();\n    (_b = this._sliderThumb) === null || _b === void 0 ? void 0 : _b.dispose();\n    (_c = this._sliderBarMaterial) === null || _c === void 0 ? void 0 : _c.dispose();\n    (_d = this._sliderThumbMaterial) === null || _d === void 0 ? void 0 : _d.dispose();\n    (_e = this._sliderBackplate) === null || _e === void 0 ? void 0 : _e.dispose();\n    (_f = this._sliderBackplateMaterial) === null || _f === void 0 ? void 0 : _f.dispose();\n  }\n}\n/**\n * Base Url for the models.\n */\nSlider3D.MODEL_BASE_URL = \"https://assets.babylonjs.com/meshes/MRTK/\";\n/**\n * File name for the 8x4 model.\n */\nSlider3D.MODEL_FILENAME = \"mrtk-fluent-backplate.glb\";","map":{"version":3,"names":["Observable","Vector3","Control3D","CreateBox","PointerDragBehavior","SceneLoader","MRDLSliderBarMaterial","MRDLSliderThumbMaterial","MRDLBackplateMaterial","SLIDER_MIN","SLIDER_MAX","SLIDER_VAL","SLIDER_STEP","SLIDER_SCALING","SLIDER_MARGIN","Slider3D","constructor","name","sliderBackplateVisible","onValueChangedObservable","_sliderBackplateVisible","_minimum","_maximum","_step","_value","mesh","node","_sliderThumb","minimum","value","Math","max","min","maximum","step","position","x","_convertToPosition","notifyObservers","start","_sliderBar","scaling","end","sliderBarMaterial","_sliderBarMaterial","sliderThumbMaterial","_sliderThumbMaterial","sliderBackplateMaterial","_sliderBackplateMaterial","isVisible","_isVisible","_a","setEnabled","_createNode","scene","sliderBackplate","width","height","depth","isPickable","visibility","ImportMeshAsync","undefined","MODEL_BASE_URL","MODEL_FILENAME","then","result","meshes","forEach","m","sliderBackplateModel","sliderBarModel","clone","sliderThumbModel","z","parent","material","_sliderBackplate","addBehavior","_createBehavior","_injectGUI3DReservedDataStore","control","getChildMeshes","_affectMaterial","getScene","_b","_c","pointerDragBehavior","dragAxis","Right","moveAttached","onDragStartObservable","add","_draggedPosition","onDragObservable","event","dragDistance","_convertToValue","round","dispose","_d","_e","_f"],"sources":["../../../../../dev/gui/src/3D/controls/slider3D.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/naming-convention */\r\nimport type { Nullable } from \"core/types\";\r\nimport { Observable } from \"core/Misc/observable\";\r\nimport { Vector3 } from \"core/Maths/math.vector\";\r\nimport type { TransformNode } from \"core/Meshes/transformNode\";\r\nimport type { Scene } from \"core/scene\";\r\nimport { Control3D } from \"./control3D\";\r\nimport { CreateBox } from \"core/Meshes/Builders/boxBuilder\";\r\nimport { PointerDragBehavior } from \"core/Behaviors/Meshes/pointerDragBehavior\";\r\nimport type { AbstractMesh } from \"core/Meshes/abstractMesh\";\r\nimport { SceneLoader } from \"core/Loading/sceneLoader\";\r\nimport { MRDLSliderBarMaterial } from \"../materials/mrdl/mrdlSliderBarMaterial\";\r\nimport { MRDLSliderThumbMaterial } from \"../materials/mrdl/mrdlSliderThumbMaterial\";\r\nimport { MRDLBackplateMaterial } from \"../materials/mrdl/mrdlBackplateMaterial\";\r\n\r\nconst SLIDER_MIN: number = 0;\r\nconst SLIDER_MAX: number = 100;\r\nconst SLIDER_VAL: number = 50;\r\nconst SLIDER_STEP: number = 0;\r\nconst SLIDER_SCALING: number = 1.0;\r\nconst SLIDER_MARGIN: number = 0.2;\r\n\r\n/**\r\n * Class used to create a slider in 3D\r\n */\r\nexport class Slider3D extends Control3D {\r\n    /**\r\n     * Base Url for the models.\r\n     */\r\n    public static MODEL_BASE_URL: string = \"https://assets.babylonjs.com/meshes/MRTK/\";\r\n\r\n    /**\r\n     * File name for the 8x4 model.\r\n     */\r\n    public static MODEL_FILENAME: string = \"mrtk-fluent-backplate.glb\";\r\n\r\n    private _sliderBackplate: AbstractMesh;\r\n    private _sliderBackplateMaterial: MRDLBackplateMaterial;\r\n    private _sliderBarMaterial: MRDLSliderBarMaterial;\r\n    private _sliderThumbMaterial: MRDLSliderThumbMaterial;\r\n    private _sliderThumb: AbstractMesh;\r\n    private _sliderBar: AbstractMesh;\r\n    private _sliderBackplateVisible: boolean;\r\n\r\n    private _minimum: number;\r\n    private _maximum: number;\r\n    private _value: number;\r\n    private _step: number;\r\n\r\n    private _draggedPosition: number;\r\n\r\n    /** Observable raised when the sldier value changes */\r\n    public onValueChangedObservable = new Observable<number>();\r\n\r\n    /**\r\n     * Creates a new slider\r\n     * @param name defines the control name\r\n     * @param sliderBackplateVisible defines if the control has a backplate, default is false\r\n     */\r\n    constructor(name?: string, sliderBackplateVisible?: boolean) {\r\n        super(name);\r\n        this._sliderBackplateVisible = sliderBackplateVisible || false;\r\n\r\n        this._minimum = SLIDER_MIN;\r\n        this._maximum = SLIDER_MAX;\r\n        this._step = SLIDER_STEP;\r\n        this._value = SLIDER_VAL;\r\n    }\r\n\r\n    /**\r\n     * Gets the mesh used to render this control\r\n     */\r\n    public get mesh(): Nullable<AbstractMesh> {\r\n        if (this.node) {\r\n            return this._sliderThumb;\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /** Gets or sets minimum value */\r\n    public get minimum(): number {\r\n        return this._minimum;\r\n    }\r\n\r\n    public set minimum(value: number) {\r\n        if (this._minimum === value) {\r\n            return;\r\n        }\r\n\r\n        this._minimum = Math.max(value, SLIDER_MIN);\r\n        this._value = Math.max(Math.min(this._value, this._maximum), this._minimum);\r\n    }\r\n\r\n    /** Gets or sets maximum value */\r\n    public get maximum(): number {\r\n        return this._maximum;\r\n    }\r\n\r\n    public set maximum(value: number) {\r\n        if (this._maximum === value) {\r\n            return;\r\n        }\r\n\r\n        this._maximum = Math.max(value, this._minimum);\r\n        this._value = Math.max(Math.min(this._value, this._maximum), this._minimum);\r\n    }\r\n\r\n    /** Gets or sets step value */\r\n    public get step(): number {\r\n        return this._step;\r\n    }\r\n\r\n    public set step(value: number) {\r\n        if (this._step === value) {\r\n            return;\r\n        }\r\n\r\n        this._step = Math.max(Math.min(value, this._maximum - this._minimum), SLIDER_STEP);\r\n    }\r\n\r\n    /** Gets or sets current value */\r\n    public get value(): number {\r\n        return this._value;\r\n    }\r\n\r\n    public set value(value: number) {\r\n        if (this._value === value) {\r\n            return;\r\n        }\r\n\r\n        this._value = Math.max(Math.min(value, this._maximum), this._minimum);\r\n        if (this._sliderThumb) {\r\n            this._sliderThumb.position.x = this._convertToPosition(this.value);\r\n        }\r\n        this.onValueChangedObservable.notifyObservers(this._value);\r\n    }\r\n\r\n    protected get start(): number {\r\n        if (!this.node) {\r\n            return -SLIDER_SCALING / 2;\r\n        }\r\n\r\n        return this._sliderBar.position.x - this._sliderBar.scaling.x / 2;\r\n    }\r\n\r\n    protected get end(): number {\r\n        if (!this.node) {\r\n            return SLIDER_SCALING / 2;\r\n        }\r\n\r\n        return this._sliderBar.position.x + this._sliderBar.scaling.x / 2;\r\n    }\r\n\r\n    /**\r\n     * Gets the slider bar material used by this control\r\n     */\r\n    public get sliderBarMaterial(): MRDLSliderBarMaterial {\r\n        return this._sliderBarMaterial;\r\n    }\r\n\r\n    /**\r\n     * Gets the slider thumb material used by this control\r\n     */\r\n    public get sliderThumbMaterial(): MRDLSliderThumbMaterial {\r\n        return this._sliderThumbMaterial;\r\n    }\r\n\r\n    /**\r\n     * Gets the slider backplate material used by this control\r\n     */\r\n    public get sliderBackplateMaterial(): MRDLBackplateMaterial {\r\n        return this._sliderBackplateMaterial;\r\n    }\r\n\r\n    /** Sets a boolean indicating if the control is visible */\r\n    public set isVisible(value: boolean) {\r\n        if (this._isVisible === value) {\r\n            return;\r\n        }\r\n\r\n        this._isVisible = value;\r\n\r\n        this.node?.setEnabled(value);\r\n    }\r\n\r\n    // Mesh association\r\n    protected _createNode(scene: Scene): TransformNode {\r\n        const sliderBackplate = CreateBox(\r\n            `${this.name}_sliderbackplate`,\r\n            {\r\n                width: 1.0,\r\n                height: 1.0,\r\n                depth: 1.0,\r\n            },\r\n            scene\r\n        );\r\n        sliderBackplate.isPickable = false;\r\n        sliderBackplate.visibility = 0;\r\n        sliderBackplate.scaling = new Vector3(1, 0.5, 0.8);\r\n\r\n        SceneLoader.ImportMeshAsync(undefined, Slider3D.MODEL_BASE_URL, Slider3D.MODEL_FILENAME, scene).then((result) => {\r\n            // make all meshes not pickable. Required meshes' pickable state will be set later.\r\n            result.meshes.forEach((m) => {\r\n                m.isPickable = false;\r\n            });\r\n            const sliderBackplateModel = result.meshes[1];\r\n            const sliderBarModel = result.meshes[1].clone(`${this.name}_sliderbar`, sliderBackplate);\r\n            const sliderThumbModel = result.meshes[1].clone(`${this.name}_sliderthumb`, sliderBackplate);\r\n            sliderBackplateModel.visibility = 0;\r\n\r\n            if (this._sliderBackplateVisible) {\r\n                sliderBackplateModel.visibility = 1;\r\n                sliderBackplateModel.name = `${this.name}_sliderbackplate`;\r\n                sliderBackplateModel.scaling.x = 1;\r\n                sliderBackplateModel.scaling.z = 0.2;\r\n                sliderBackplateModel.parent = sliderBackplate;\r\n                if (this._sliderBackplateMaterial) {\r\n                    sliderBackplateModel.material = this._sliderBackplateMaterial;\r\n                }\r\n                this._sliderBackplate = sliderBackplateModel;\r\n            }\r\n\r\n            if (sliderBarModel) {\r\n                sliderBarModel.parent = sliderBackplate;\r\n                sliderBarModel.position.z = -0.1;\r\n                sliderBarModel.scaling = new Vector3(SLIDER_SCALING - SLIDER_MARGIN, 0.04, 0.3);\r\n                if (this._sliderBarMaterial) {\r\n                    sliderBarModel.material = this._sliderBarMaterial;\r\n                }\r\n                this._sliderBar = sliderBarModel;\r\n            }\r\n\r\n            if (sliderThumbModel) {\r\n                sliderThumbModel.parent = sliderBackplate;\r\n                sliderThumbModel.isPickable = true;\r\n                sliderThumbModel.position.z = -0.115;\r\n                sliderThumbModel.scaling = new Vector3(0.025, 0.3, 0.6);\r\n                sliderThumbModel.position.x = this._convertToPosition(this.value);\r\n                sliderThumbModel.addBehavior(this._createBehavior());\r\n                if (this._sliderThumbMaterial) {\r\n                    sliderThumbModel.material = this._sliderThumbMaterial;\r\n                }\r\n                this._sliderThumb = sliderThumbModel;\r\n            }\r\n\r\n            this._injectGUI3DReservedDataStore(sliderBackplate).control = this;\r\n            sliderBackplate.getChildMeshes().forEach((mesh) => {\r\n                this._injectGUI3DReservedDataStore(mesh).control = this;\r\n            });\r\n        });\r\n\r\n        this._affectMaterial(sliderBackplate);\r\n        return sliderBackplate;\r\n    }\r\n\r\n    protected _affectMaterial(mesh: AbstractMesh) {\r\n        this._sliderBackplateMaterial = this._sliderBackplateMaterial ?? new MRDLBackplateMaterial(`${this.name}_sliderbackplate_material`, mesh.getScene());\r\n        this._sliderBarMaterial = this._sliderBarMaterial ?? new MRDLSliderBarMaterial(`${this.name}_sliderbar_material`, mesh.getScene());\r\n        this._sliderThumbMaterial = this._sliderThumbMaterial ?? new MRDLSliderThumbMaterial(`${this.name}_sliderthumb_material`, mesh.getScene());\r\n    }\r\n\r\n    private _createBehavior(): PointerDragBehavior {\r\n        const pointerDragBehavior = new PointerDragBehavior({ dragAxis: Vector3.Right() });\r\n        pointerDragBehavior.moveAttached = false;\r\n\r\n        pointerDragBehavior.onDragStartObservable.add(() => {\r\n            this._draggedPosition = this._sliderThumb.position.x;\r\n        });\r\n\r\n        pointerDragBehavior.onDragObservable.add((event) => {\r\n            this._draggedPosition += event.dragDistance / this.scaling.x;\r\n            this.value = this._convertToValue(this._draggedPosition);\r\n        });\r\n\r\n        return pointerDragBehavior;\r\n    }\r\n\r\n    private _convertToPosition(value: number): number {\r\n        const position = ((value - this.minimum) / (this.maximum - this.minimum)) * (this.end - this.start) + this.start;\r\n        return Math.min(Math.max(position, this.start), this.end);\r\n    }\r\n\r\n    private _convertToValue(position: number): number {\r\n        let value = ((position - this.start) / (this.end - this.start)) * (this.maximum - this.minimum);\r\n        value = this.step ? Math.round(value / this.step) * this.step : value;\r\n\r\n        return Math.max(Math.min(this.minimum + value, this._maximum), this._minimum);\r\n    }\r\n\r\n    /**\r\n     * Releases all associated resources\r\n     */\r\n    public dispose() {\r\n        super.dispose();\r\n        this._sliderBar?.dispose();\r\n        this._sliderThumb?.dispose();\r\n        this._sliderBarMaterial?.dispose();\r\n        this._sliderThumbMaterial?.dispose();\r\n        this._sliderBackplate?.dispose();\r\n        this._sliderBackplateMaterial?.dispose();\r\n    }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}