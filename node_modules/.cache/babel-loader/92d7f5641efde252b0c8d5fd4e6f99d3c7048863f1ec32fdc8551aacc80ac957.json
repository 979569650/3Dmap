{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { NodeMaterialBlock } from \"../nodeMaterialBlock.js\";\nimport { NodeMaterialBlockConnectionPointTypes } from \"../Enums/nodeMaterialBlockConnectionPointTypes.js\";\nimport { NodeMaterialBlockTargets } from \"../Enums/nodeMaterialBlockTargets.js\";\nimport { RegisterClass } from \"../../../Misc/typeStore.js\";\n/**\n * Types of curves supported by the Curve block\n */\nexport var CurveBlockTypes;\n(function (CurveBlockTypes) {\n  /** EaseInSine */\n  CurveBlockTypes[CurveBlockTypes[\"EaseInSine\"] = 0] = \"EaseInSine\";\n  /** EaseOutSine */\n  CurveBlockTypes[CurveBlockTypes[\"EaseOutSine\"] = 1] = \"EaseOutSine\";\n  /** EaseInOutSine */\n  CurveBlockTypes[CurveBlockTypes[\"EaseInOutSine\"] = 2] = \"EaseInOutSine\";\n  /** EaseInQuad */\n  CurveBlockTypes[CurveBlockTypes[\"EaseInQuad\"] = 3] = \"EaseInQuad\";\n  /** EaseOutQuad */\n  CurveBlockTypes[CurveBlockTypes[\"EaseOutQuad\"] = 4] = \"EaseOutQuad\";\n  /** EaseInOutQuad */\n  CurveBlockTypes[CurveBlockTypes[\"EaseInOutQuad\"] = 5] = \"EaseInOutQuad\";\n  /** EaseInCubic */\n  CurveBlockTypes[CurveBlockTypes[\"EaseInCubic\"] = 6] = \"EaseInCubic\";\n  /** EaseOutCubic */\n  CurveBlockTypes[CurveBlockTypes[\"EaseOutCubic\"] = 7] = \"EaseOutCubic\";\n  /** EaseInOutCubic */\n  CurveBlockTypes[CurveBlockTypes[\"EaseInOutCubic\"] = 8] = \"EaseInOutCubic\";\n  /** EaseInQuart */\n  CurveBlockTypes[CurveBlockTypes[\"EaseInQuart\"] = 9] = \"EaseInQuart\";\n  /** EaseOutQuart */\n  CurveBlockTypes[CurveBlockTypes[\"EaseOutQuart\"] = 10] = \"EaseOutQuart\";\n  /** EaseInOutQuart */\n  CurveBlockTypes[CurveBlockTypes[\"EaseInOutQuart\"] = 11] = \"EaseInOutQuart\";\n  /** EaseInQuint */\n  CurveBlockTypes[CurveBlockTypes[\"EaseInQuint\"] = 12] = \"EaseInQuint\";\n  /** EaseOutQuint */\n  CurveBlockTypes[CurveBlockTypes[\"EaseOutQuint\"] = 13] = \"EaseOutQuint\";\n  /** EaseInOutQuint */\n  CurveBlockTypes[CurveBlockTypes[\"EaseInOutQuint\"] = 14] = \"EaseInOutQuint\";\n  /** EaseInExpo */\n  CurveBlockTypes[CurveBlockTypes[\"EaseInExpo\"] = 15] = \"EaseInExpo\";\n  /** EaseOutExpo */\n  CurveBlockTypes[CurveBlockTypes[\"EaseOutExpo\"] = 16] = \"EaseOutExpo\";\n  /** EaseInOutExpo */\n  CurveBlockTypes[CurveBlockTypes[\"EaseInOutExpo\"] = 17] = \"EaseInOutExpo\";\n  /** EaseInCirc */\n  CurveBlockTypes[CurveBlockTypes[\"EaseInCirc\"] = 18] = \"EaseInCirc\";\n  /** EaseOutCirc */\n  CurveBlockTypes[CurveBlockTypes[\"EaseOutCirc\"] = 19] = \"EaseOutCirc\";\n  /** EaseInOutCirc */\n  CurveBlockTypes[CurveBlockTypes[\"EaseInOutCirc\"] = 20] = \"EaseInOutCirc\";\n  /** EaseInBack */\n  CurveBlockTypes[CurveBlockTypes[\"EaseInBack\"] = 21] = \"EaseInBack\";\n  /** EaseOutBack */\n  CurveBlockTypes[CurveBlockTypes[\"EaseOutBack\"] = 22] = \"EaseOutBack\";\n  /** EaseInOutBack */\n  CurveBlockTypes[CurveBlockTypes[\"EaseInOutBack\"] = 23] = \"EaseInOutBack\";\n  /** EaseInElastic */\n  CurveBlockTypes[CurveBlockTypes[\"EaseInElastic\"] = 24] = \"EaseInElastic\";\n  /** EaseOutElastic */\n  CurveBlockTypes[CurveBlockTypes[\"EaseOutElastic\"] = 25] = \"EaseOutElastic\";\n  /** EaseInOutElastic */\n  CurveBlockTypes[CurveBlockTypes[\"EaseInOutElastic\"] = 26] = \"EaseInOutElastic\";\n})(CurveBlockTypes || (CurveBlockTypes = {}));\n/**\n * Block used to apply curve operation\n */\nexport class CurveBlock extends NodeMaterialBlock {\n  /**\n   * Creates a new CurveBlock\n   * @param name defines the block name\n   */\n  constructor(name) {\n    super(name, NodeMaterialBlockTargets.Neutral);\n    /**\n     * Gets or sets the type of the curve applied by the block\n     */\n    this.type = CurveBlockTypes.EaseInOutSine;\n    this.registerInput(\"input\", NodeMaterialBlockConnectionPointTypes.AutoDetect);\n    this.registerOutput(\"output\", NodeMaterialBlockConnectionPointTypes.BasedOnInput);\n    this._outputs[0]._typeConnectionSource = this._inputs[0];\n    this._inputs[0].excludedConnectionPointTypes.push(NodeMaterialBlockConnectionPointTypes.Matrix);\n    this._inputs[0].excludedConnectionPointTypes.push(NodeMaterialBlockConnectionPointTypes.Object);\n    this._inputs[0].excludedConnectionPointTypes.push(NodeMaterialBlockConnectionPointTypes.Int);\n  }\n  /**\n   * Gets the current class name\n   * @returns the class name\n   */\n  getClassName() {\n    return \"CurveBlock\";\n  }\n  /**\n   * Gets the input component\n   */\n  get input() {\n    return this._inputs[0];\n  }\n  /**\n   * Gets the output component\n   */\n  get output() {\n    return this._outputs[0];\n  }\n  _duplicateEntry(entry, component) {\n    return `ret.${component} = ${entry.replace(/VAL/g, \"v.\" + component)}`;\n  }\n  _duplicateEntryDirect(entry) {\n    return `return ${entry.replace(/VAL/g, \"v\")}`;\n  }\n  _duplicateVector(entry, inputType) {\n    if (inputType === \"float\") {\n      return this._duplicateEntryDirect(entry);\n    }\n    const size = parseInt(inputType.replace(\"vec\", \"\"));\n    let code = `\n            vec${size} ret = vec${size}(0.0);\n        `;\n    for (let i = 1; i <= size; i++) {\n      code += this._duplicateEntry(entry, i === 1 ? \"x\" : i === 2 ? \"y\" : i === 3 ? \"z\" : \"w\") + \";\\n\";\n    }\n    code += \"return ret;\\n\";\n    return code;\n  }\n  _buildBlock(state) {\n    super._buildBlock(state);\n    const output = this._outputs[0];\n    let registeredFunction = \"\";\n    let registeredFunctionName = \"\";\n    let inputType = \"\";\n    switch (this.input.type) {\n      case NodeMaterialBlockConnectionPointTypes.Float:\n        inputType = \"float\";\n        break;\n      case NodeMaterialBlockConnectionPointTypes.Vector2:\n        inputType = \"vec2\";\n        break;\n      case NodeMaterialBlockConnectionPointTypes.Vector3:\n      case NodeMaterialBlockConnectionPointTypes.Color3:\n        inputType = \"vec3\";\n        break;\n      case NodeMaterialBlockConnectionPointTypes.Vector4:\n      case NodeMaterialBlockConnectionPointTypes.Color4:\n        inputType = \"vec4\";\n        break;\n    }\n    registeredFunctionName = CurveBlockTypes[this.type] + \"_\" + inputType;\n    switch (this.type) {\n      case CurveBlockTypes.EaseInSine:\n        registeredFunction = `return 1.0 - cos((v * 3.1415) / 2.0)`;\n        break;\n      case CurveBlockTypes.EaseOutSine:\n        registeredFunction = `return sin((v * 3.1415) / 2.0)`;\n        break;\n      case CurveBlockTypes.EaseInOutSine:\n        registeredFunction = `return -(cos(v * 3.1415) - 1.0) / 2.0`;\n        break;\n      case CurveBlockTypes.EaseInQuad:\n        registeredFunction = `return v * v`;\n        break;\n      case CurveBlockTypes.EaseOutQuad:\n        registeredFunction = `return (1.0 - v) * (1.0 - v)`;\n        break;\n      case CurveBlockTypes.EaseInOutQuad:\n        {\n          const entry = \"VAL < 0.5 ? 2.0 * VAL * VAL : 1.0 - pow(-2.0 * VAL + 2.0, 2.0) / 2.0\";\n          registeredFunction = this._duplicateVector(entry, inputType);\n          break;\n        }\n      case CurveBlockTypes.EaseInCubic:\n        registeredFunction = `return v * v * v`;\n        break;\n      case CurveBlockTypes.EaseOutCubic:\n        {\n          const entry = \"1.0 - pow(1.0 - VAL, 3.0)\";\n          registeredFunction = this._duplicateVector(entry, inputType);\n          break;\n        }\n      case CurveBlockTypes.EaseInOutCubic:\n        {\n          const entry = \"VAL < 0.5 ? 4.0 * VAL * VAL * VAL : 1.0 - pow(-2.0 * VAL + 2.0, 3.0) / 2.0\";\n          registeredFunction = this._duplicateVector(entry, inputType);\n          break;\n        }\n      case CurveBlockTypes.EaseInQuart:\n        registeredFunction = `return v * v * v * v`;\n        break;\n      case CurveBlockTypes.EaseOutQuart:\n        {\n          const entry = \"1.0 - pow(1.0 - VAL, 4.0)\";\n          registeredFunction = this._duplicateVector(entry, inputType);\n          break;\n        }\n      case CurveBlockTypes.EaseInOutQuart:\n        {\n          const entry = \"VAL < 0.5 ? 8.0 * VAL * VAL * VAL * VAL : 1.0 - pow(-2.0 * VAL + 2.0, 4.0) / 2.0\";\n          registeredFunction = this._duplicateVector(entry, inputType);\n          break;\n        }\n      case CurveBlockTypes.EaseInQuint:\n        registeredFunction = `return v * v * v * v * v`;\n        break;\n      case CurveBlockTypes.EaseOutQuint:\n        {\n          const entry = \"1.0 - pow(1.0 - VAL, 5.0)\";\n          registeredFunction = this._duplicateVector(entry, inputType);\n          break;\n        }\n      case CurveBlockTypes.EaseInOutQuint:\n        {\n          const entry = \"VAL < 0.5 ? 16.0 * VAL * VAL * VAL * VAL * VAL : 1.0 - pow(-2.0 * VAL + 2.0, 5.0) / 2.0\";\n          registeredFunction = this._duplicateVector(entry, inputType);\n          break;\n        }\n      case CurveBlockTypes.EaseInExpo:\n        {\n          const entry = \"VAL == 0.0 ? 0.0 : pow(2.0, 10.0 * VAL - 10.0)\";\n          registeredFunction = this._duplicateVector(entry, inputType);\n          break;\n        }\n      case CurveBlockTypes.EaseOutExpo:\n        {\n          const entry = \"VAL == 1.0 ? 1.0 : 1.0 - pow(2.0, -10.0 * VAL)\";\n          registeredFunction = this._duplicateVector(entry, inputType);\n          break;\n        }\n      case CurveBlockTypes.EaseInOutExpo:\n        {\n          const entry = \"VAL == 0.0 ? 0.0 : VAL == 1.0 ? 1.0 : VAL < 0.5 ? pow(2.0, 20.0 * VAL - 10.0) / 2.0 : (2.0 - pow(2.0, -20.0 * VAL + 10.0)) / 2.0\";\n          registeredFunction = this._duplicateVector(entry, inputType);\n          break;\n        }\n      case CurveBlockTypes.EaseInCirc:\n        {\n          const entry = \"1.0 - sqrt(1.0 - pow(VAL, 2.0))\";\n          registeredFunction = this._duplicateVector(entry, inputType);\n          break;\n        }\n      case CurveBlockTypes.EaseOutCirc:\n        {\n          const entry = \"sqrt(1.0 - pow(VAL - 1.0, 2.0))\";\n          registeredFunction = this._duplicateVector(entry, inputType);\n          break;\n        }\n      case CurveBlockTypes.EaseInOutCirc:\n        {\n          const entry = \"VAL < 0.5 ? (1.0 - sqrt(1.0 - pow(2.0 * VAL, 2.0))) / 2.0 : (sqrt(1.0 - pow(-2.0 * VAL + 2.0, 2.0)) + 1.0) / 2.0\";\n          registeredFunction = this._duplicateVector(entry, inputType);\n          break;\n        }\n      case CurveBlockTypes.EaseInBack:\n        {\n          registeredFunction = \"return 2.70158 * v * v * v - 1.70158 * v * v\";\n          break;\n        }\n      case CurveBlockTypes.EaseOutBack:\n        {\n          const entry = \"2.70158 * pow(VAL - 1.0, 3.0) + 1.70158 * pow(VAL - 1.0, 2.0)\";\n          registeredFunction = this._duplicateVector(entry, inputType);\n          break;\n        }\n      case CurveBlockTypes.EaseInOutBack:\n        {\n          const entry = \"VAL < 0.5 ? (pow(2.0 * VAL, 2.0) * ((3.5949095) * 2.0 * VAL - 2.5949095)) / 2.0 : (pow(2.0 * VAL - 2.0, 2.0) * (3.5949095 * (VAL * 2.0 - 2.0) + 3.5949095) + 2.0) / 2.0\";\n          registeredFunction = this._duplicateVector(entry, inputType);\n          break;\n        }\n      case CurveBlockTypes.EaseInElastic:\n        {\n          const entry = \"VAL == 0.0 ? 0.0 : VAL == 1.0 ? 1.0 : -pow(2.0, 10.0 * VAL - 10.0) * sin((VAL * 10.0 - 10.75) * ((2.0 * 3.1415) / 3.0))\";\n          registeredFunction = this._duplicateVector(entry, inputType);\n          break;\n        }\n      case CurveBlockTypes.EaseOutElastic:\n        {\n          const entry = \"VAL == 0.0 ? 0.0 : VAL == 1.0 ? 1.0 : pow(2.0, -10.0 * VAL) * sin((VAL * 10.0 - 0.75) * ((2.0 * 3.1415) / 3.0)) + 1.0\";\n          registeredFunction = this._duplicateVector(entry, inputType);\n          break;\n        }\n      case CurveBlockTypes.EaseInOutElastic:\n        {\n          const entry = \"VAL == 0.0 ? 0.0 : VAL == 1.0 ? 1.0 : VAL < 0.5 ? -(pow(2.0, 20.0 * VAL - 10.0) * sin((20.0 * VAL - 11.125) * ((2.0 * 3.1415) / 4.5))) / 2.0 : (pow(2.0, -20.0 * VAL + 10.0) * sin((20.0 * VAL - 11.125) * ((2.0 * 3.1415) / 4.5))) / 2.0 + 1.0\";\n          registeredFunction = this._duplicateVector(entry, inputType);\n          break;\n        }\n    }\n    state._emitFunction(registeredFunctionName, `${inputType} ${registeredFunctionName}(${inputType} v) {${registeredFunction};}\\n`, \"\");\n    state.compilationString += this._declareOutput(output, state) + ` = ${registeredFunctionName}(${this.input.associatedVariableName});\\n`;\n    return this;\n  }\n  serialize() {\n    const serializationObject = super.serialize();\n    serializationObject.curveType = this.type;\n    return serializationObject;\n  }\n  _deserialize(serializationObject, scene, rootUrl) {\n    super._deserialize(serializationObject, scene, rootUrl);\n    this.type = serializationObject.curveType;\n  }\n  _dumpPropertiesCode() {\n    const codeString = super._dumpPropertiesCode() + `${this._codeVariableName}.type = BABYLON.CurveBlockTypes.${CurveBlockTypes[this.type]};\\n`;\n    return codeString;\n  }\n}\nRegisterClass(\"BABYLON.CurveBlock\", CurveBlock);","map":{"version":3,"names":["NodeMaterialBlock","NodeMaterialBlockConnectionPointTypes","NodeMaterialBlockTargets","RegisterClass","CurveBlockTypes","CurveBlock","constructor","name","Neutral","type","EaseInOutSine","registerInput","AutoDetect","registerOutput","BasedOnInput","_outputs","_typeConnectionSource","_inputs","excludedConnectionPointTypes","push","Matrix","Object","Int","getClassName","input","output","_duplicateEntry","entry","component","replace","_duplicateEntryDirect","_duplicateVector","inputType","size","parseInt","code","i","_buildBlock","state","registeredFunction","registeredFunctionName","Float","Vector2","Vector3","Color3","Vector4","Color4","EaseInSine","EaseOutSine","EaseInQuad","EaseOutQuad","EaseInOutQuad","EaseInCubic","EaseOutCubic","EaseInOutCubic","EaseInQuart","EaseOutQuart","EaseInOutQuart","EaseInQuint","EaseOutQuint","EaseInOutQuint","EaseInExpo","EaseOutExpo","EaseInOutExpo","EaseInCirc","EaseOutCirc","EaseInOutCirc","EaseInBack","EaseOutBack","EaseInOutBack","EaseInElastic","EaseOutElastic","EaseInOutElastic","_emitFunction","compilationString","_declareOutput","associatedVariableName","serialize","serializationObject","curveType","_deserialize","scene","rootUrl","_dumpPropertiesCode","codeString","_codeVariableName"],"sources":["../../../../../../dev/core/src/Materials/Node/Blocks/curveBlock.ts"],"sourcesContent":["import { NodeMaterialBlock } from \"../nodeMaterialBlock\";\r\nimport { NodeMaterialBlockConnectionPointTypes } from \"../Enums/nodeMaterialBlockConnectionPointTypes\";\r\nimport type { NodeMaterialBuildState } from \"../nodeMaterialBuildState\";\r\nimport type { NodeMaterialConnectionPoint } from \"../nodeMaterialBlockConnectionPoint\";\r\nimport { NodeMaterialBlockTargets } from \"../Enums/nodeMaterialBlockTargets\";\r\nimport { RegisterClass } from \"../../../Misc/typeStore\";\r\nimport type { Scene } from \"../../../scene\";\r\n\r\n/**\r\n * Types of curves supported by the Curve block\r\n */\r\nexport enum CurveBlockTypes {\r\n    /** EaseInSine */\r\n    EaseInSine,\r\n    /** EaseOutSine */\r\n    EaseOutSine,\r\n    /** EaseInOutSine */\r\n    EaseInOutSine,\r\n    /** EaseInQuad */\r\n    EaseInQuad,\r\n    /** EaseOutQuad */\r\n    EaseOutQuad,\r\n    /** EaseInOutQuad */\r\n    EaseInOutQuad,\r\n    /** EaseInCubic */\r\n    EaseInCubic,\r\n    /** EaseOutCubic */\r\n    EaseOutCubic,\r\n    /** EaseInOutCubic */\r\n    EaseInOutCubic,\r\n    /** EaseInQuart */\r\n    EaseInQuart,\r\n    /** EaseOutQuart */\r\n    EaseOutQuart,\r\n    /** EaseInOutQuart */\r\n    EaseInOutQuart,\r\n    /** EaseInQuint */\r\n    EaseInQuint,\r\n    /** EaseOutQuint */\r\n    EaseOutQuint,\r\n    /** EaseInOutQuint */\r\n    EaseInOutQuint,\r\n    /** EaseInExpo */\r\n    EaseInExpo,\r\n    /** EaseOutExpo */\r\n    EaseOutExpo,\r\n    /** EaseInOutExpo */\r\n    EaseInOutExpo,\r\n    /** EaseInCirc */\r\n    EaseInCirc,\r\n    /** EaseOutCirc */\r\n    EaseOutCirc,\r\n    /** EaseInOutCirc */\r\n    EaseInOutCirc,\r\n    /** EaseInBack */\r\n    EaseInBack,\r\n    /** EaseOutBack */\r\n    EaseOutBack,\r\n    /** EaseInOutBack */\r\n    EaseInOutBack,\r\n    /** EaseInElastic */\r\n    EaseInElastic,\r\n    /** EaseOutElastic */\r\n    EaseOutElastic,\r\n    /** EaseInOutElastic */\r\n    EaseInOutElastic,\r\n}\r\n\r\n/**\r\n * Block used to apply curve operation\r\n */\r\nexport class CurveBlock extends NodeMaterialBlock {\r\n    /**\r\n     * Gets or sets the type of the curve applied by the block\r\n     */\r\n    public type = CurveBlockTypes.EaseInOutSine;\r\n\r\n    /**\r\n     * Creates a new CurveBlock\r\n     * @param name defines the block name\r\n     */\r\n    public constructor(name: string) {\r\n        super(name, NodeMaterialBlockTargets.Neutral);\r\n\r\n        this.registerInput(\"input\", NodeMaterialBlockConnectionPointTypes.AutoDetect);\r\n        this.registerOutput(\"output\", NodeMaterialBlockConnectionPointTypes.BasedOnInput);\r\n\r\n        this._outputs[0]._typeConnectionSource = this._inputs[0];\r\n\r\n        this._inputs[0].excludedConnectionPointTypes.push(NodeMaterialBlockConnectionPointTypes.Matrix);\r\n        this._inputs[0].excludedConnectionPointTypes.push(NodeMaterialBlockConnectionPointTypes.Object);\r\n        this._inputs[0].excludedConnectionPointTypes.push(NodeMaterialBlockConnectionPointTypes.Int);\r\n    }\r\n\r\n    /**\r\n     * Gets the current class name\r\n     * @returns the class name\r\n     */\r\n    public getClassName() {\r\n        return \"CurveBlock\";\r\n    }\r\n\r\n    /**\r\n     * Gets the input component\r\n     */\r\n    public get input(): NodeMaterialConnectionPoint {\r\n        return this._inputs[0];\r\n    }\r\n\r\n    /**\r\n     * Gets the output component\r\n     */\r\n    public get output(): NodeMaterialConnectionPoint {\r\n        return this._outputs[0];\r\n    }\r\n\r\n    private _duplicateEntry(entry: string, component: string) {\r\n        return `ret.${component} = ${entry.replace(/VAL/g, \"v.\" + component)}`;\r\n    }\r\n\r\n    private _duplicateEntryDirect(entry: string) {\r\n        return `return ${entry.replace(/VAL/g, \"v\")}`;\r\n    }\r\n\r\n    private _duplicateVector(entry: string, inputType: string) {\r\n        if (inputType === \"float\") {\r\n            return this._duplicateEntryDirect(entry);\r\n        }\r\n\r\n        const size = parseInt(inputType.replace(\"vec\", \"\"));\r\n        let code = `\r\n            vec${size} ret = vec${size}(0.0);\r\n        `;\r\n\r\n        for (let i = 1; i <= size; i++) {\r\n            code += this._duplicateEntry(entry, i === 1 ? \"x\" : i === 2 ? \"y\" : i === 3 ? \"z\" : \"w\") + \";\\n\";\r\n        }\r\n\r\n        code += \"return ret;\\n\";\r\n        return code;\r\n    }\r\n\r\n    protected _buildBlock(state: NodeMaterialBuildState) {\r\n        super._buildBlock(state);\r\n\r\n        const output = this._outputs[0];\r\n        let registeredFunction = \"\";\r\n        let registeredFunctionName = \"\";\r\n\r\n        let inputType = \"\";\r\n\r\n        switch (this.input.type) {\r\n            case NodeMaterialBlockConnectionPointTypes.Float:\r\n                inputType = \"float\";\r\n                break;\r\n            case NodeMaterialBlockConnectionPointTypes.Vector2:\r\n                inputType = \"vec2\";\r\n                break;\r\n            case NodeMaterialBlockConnectionPointTypes.Vector3:\r\n            case NodeMaterialBlockConnectionPointTypes.Color3:\r\n                inputType = \"vec3\";\r\n                break;\r\n            case NodeMaterialBlockConnectionPointTypes.Vector4:\r\n            case NodeMaterialBlockConnectionPointTypes.Color4:\r\n                inputType = \"vec4\";\r\n                break;\r\n        }\r\n\r\n        registeredFunctionName = CurveBlockTypes[this.type] + \"_\" + inputType;\r\n\r\n        switch (this.type) {\r\n            case CurveBlockTypes.EaseInSine:\r\n                registeredFunction = `return 1.0 - cos((v * 3.1415) / 2.0)`;\r\n                break;\r\n            case CurveBlockTypes.EaseOutSine:\r\n                registeredFunction = `return sin((v * 3.1415) / 2.0)`;\r\n                break;\r\n            case CurveBlockTypes.EaseInOutSine:\r\n                registeredFunction = `return -(cos(v * 3.1415) - 1.0) / 2.0`;\r\n                break;\r\n            case CurveBlockTypes.EaseInQuad:\r\n                registeredFunction = `return v * v`;\r\n                break;\r\n            case CurveBlockTypes.EaseOutQuad:\r\n                registeredFunction = `return (1.0 - v) * (1.0 - v)`;\r\n                break;\r\n            case CurveBlockTypes.EaseInOutQuad: {\r\n                const entry = \"VAL < 0.5 ? 2.0 * VAL * VAL : 1.0 - pow(-2.0 * VAL + 2.0, 2.0) / 2.0\";\r\n                registeredFunction = this._duplicateVector(entry, inputType);\r\n                break;\r\n            }\r\n            case CurveBlockTypes.EaseInCubic:\r\n                registeredFunction = `return v * v * v`;\r\n                break;\r\n            case CurveBlockTypes.EaseOutCubic: {\r\n                const entry = \"1.0 - pow(1.0 - VAL, 3.0)\";\r\n                registeredFunction = this._duplicateVector(entry, inputType);\r\n                break;\r\n            }\r\n            case CurveBlockTypes.EaseInOutCubic: {\r\n                const entry = \"VAL < 0.5 ? 4.0 * VAL * VAL * VAL : 1.0 - pow(-2.0 * VAL + 2.0, 3.0) / 2.0\";\r\n                registeredFunction = this._duplicateVector(entry, inputType);\r\n                break;\r\n            }\r\n            case CurveBlockTypes.EaseInQuart:\r\n                registeredFunction = `return v * v * v * v`;\r\n                break;\r\n            case CurveBlockTypes.EaseOutQuart: {\r\n                const entry = \"1.0 - pow(1.0 - VAL, 4.0)\";\r\n                registeredFunction = this._duplicateVector(entry, inputType);\r\n                break;\r\n            }\r\n            case CurveBlockTypes.EaseInOutQuart: {\r\n                const entry = \"VAL < 0.5 ? 8.0 * VAL * VAL * VAL * VAL : 1.0 - pow(-2.0 * VAL + 2.0, 4.0) / 2.0\";\r\n                registeredFunction = this._duplicateVector(entry, inputType);\r\n                break;\r\n            }\r\n            case CurveBlockTypes.EaseInQuint:\r\n                registeredFunction = `return v * v * v * v * v`;\r\n                break;\r\n            case CurveBlockTypes.EaseOutQuint: {\r\n                const entry = \"1.0 - pow(1.0 - VAL, 5.0)\";\r\n                registeredFunction = this._duplicateVector(entry, inputType);\r\n                break;\r\n            }\r\n            case CurveBlockTypes.EaseInOutQuint: {\r\n                const entry = \"VAL < 0.5 ? 16.0 * VAL * VAL * VAL * VAL * VAL : 1.0 - pow(-2.0 * VAL + 2.0, 5.0) / 2.0\";\r\n                registeredFunction = this._duplicateVector(entry, inputType);\r\n                break;\r\n            }\r\n            case CurveBlockTypes.EaseInExpo: {\r\n                const entry = \"VAL == 0.0 ? 0.0 : pow(2.0, 10.0 * VAL - 10.0)\";\r\n                registeredFunction = this._duplicateVector(entry, inputType);\r\n                break;\r\n            }\r\n            case CurveBlockTypes.EaseOutExpo: {\r\n                const entry = \"VAL == 1.0 ? 1.0 : 1.0 - pow(2.0, -10.0 * VAL)\";\r\n                registeredFunction = this._duplicateVector(entry, inputType);\r\n                break;\r\n            }\r\n            case CurveBlockTypes.EaseInOutExpo: {\r\n                const entry = \"VAL == 0.0 ? 0.0 : VAL == 1.0 ? 1.0 : VAL < 0.5 ? pow(2.0, 20.0 * VAL - 10.0) / 2.0 : (2.0 - pow(2.0, -20.0 * VAL + 10.0)) / 2.0\";\r\n                registeredFunction = this._duplicateVector(entry, inputType);\r\n                break;\r\n            }\r\n            case CurveBlockTypes.EaseInCirc: {\r\n                const entry = \"1.0 - sqrt(1.0 - pow(VAL, 2.0))\";\r\n                registeredFunction = this._duplicateVector(entry, inputType);\r\n                break;\r\n            }\r\n            case CurveBlockTypes.EaseOutCirc: {\r\n                const entry = \"sqrt(1.0 - pow(VAL - 1.0, 2.0))\";\r\n                registeredFunction = this._duplicateVector(entry, inputType);\r\n                break;\r\n            }\r\n            case CurveBlockTypes.EaseInOutCirc: {\r\n                const entry = \"VAL < 0.5 ? (1.0 - sqrt(1.0 - pow(2.0 * VAL, 2.0))) / 2.0 : (sqrt(1.0 - pow(-2.0 * VAL + 2.0, 2.0)) + 1.0) / 2.0\";\r\n                registeredFunction = this._duplicateVector(entry, inputType);\r\n                break;\r\n            }\r\n            case CurveBlockTypes.EaseInBack: {\r\n                registeredFunction = \"return 2.70158 * v * v * v - 1.70158 * v * v\";\r\n                break;\r\n            }\r\n            case CurveBlockTypes.EaseOutBack: {\r\n                const entry = \"2.70158 * pow(VAL - 1.0, 3.0) + 1.70158 * pow(VAL - 1.0, 2.0)\";\r\n                registeredFunction = this._duplicateVector(entry, inputType);\r\n                break;\r\n            }\r\n            case CurveBlockTypes.EaseInOutBack: {\r\n                const entry =\r\n                    \"VAL < 0.5 ? (pow(2.0 * VAL, 2.0) * ((3.5949095) * 2.0 * VAL - 2.5949095)) / 2.0 : (pow(2.0 * VAL - 2.0, 2.0) * (3.5949095 * (VAL * 2.0 - 2.0) + 3.5949095) + 2.0) / 2.0\";\r\n                registeredFunction = this._duplicateVector(entry, inputType);\r\n                break;\r\n            }\r\n            case CurveBlockTypes.EaseInElastic: {\r\n                const entry = \"VAL == 0.0 ? 0.0 : VAL == 1.0 ? 1.0 : -pow(2.0, 10.0 * VAL - 10.0) * sin((VAL * 10.0 - 10.75) * ((2.0 * 3.1415) / 3.0))\";\r\n                registeredFunction = this._duplicateVector(entry, inputType);\r\n                break;\r\n            }\r\n            case CurveBlockTypes.EaseOutElastic: {\r\n                const entry = \"VAL == 0.0 ? 0.0 : VAL == 1.0 ? 1.0 : pow(2.0, -10.0 * VAL) * sin((VAL * 10.0 - 0.75) * ((2.0 * 3.1415) / 3.0)) + 1.0\";\r\n                registeredFunction = this._duplicateVector(entry, inputType);\r\n                break;\r\n            }\r\n            case CurveBlockTypes.EaseInOutElastic: {\r\n                const entry =\r\n                    \"VAL == 0.0 ? 0.0 : VAL == 1.0 ? 1.0 : VAL < 0.5 ? -(pow(2.0, 20.0 * VAL - 10.0) * sin((20.0 * VAL - 11.125) * ((2.0 * 3.1415) / 4.5))) / 2.0 : (pow(2.0, -20.0 * VAL + 10.0) * sin((20.0 * VAL - 11.125) * ((2.0 * 3.1415) / 4.5))) / 2.0 + 1.0\";\r\n                registeredFunction = this._duplicateVector(entry, inputType);\r\n                break;\r\n            }\r\n        }\r\n\r\n        state._emitFunction(registeredFunctionName, `${inputType} ${registeredFunctionName}(${inputType} v) {${registeredFunction};}\\n`, \"\");\r\n\r\n        state.compilationString += this._declareOutput(output, state) + ` = ${registeredFunctionName}(${this.input.associatedVariableName});\\n`;\r\n\r\n        return this;\r\n    }\r\n\r\n    public serialize(): any {\r\n        const serializationObject = super.serialize();\r\n\r\n        serializationObject.curveType = this.type;\r\n\r\n        return serializationObject;\r\n    }\r\n\r\n    public _deserialize(serializationObject: any, scene: Scene, rootUrl: string) {\r\n        super._deserialize(serializationObject, scene, rootUrl);\r\n\r\n        this.type = serializationObject.curveType;\r\n    }\r\n\r\n    protected _dumpPropertiesCode() {\r\n        const codeString = super._dumpPropertiesCode() + `${this._codeVariableName}.type = BABYLON.CurveBlockTypes.${CurveBlockTypes[this.type]};\\n`;\r\n        return codeString;\r\n    }\r\n}\r\n\r\nRegisterClass(\"BABYLON.CurveBlock\", CurveBlock);\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}