{"ast":null,"code":"import { __decorate } from \"@babylonjs/core/tslib.es6.js\";\nimport { BaseSlider } from \"./baseSlider.js\";\nimport { Measure } from \"../../measure.js\";\nimport { serialize } from \"@babylonjs/core/Misc/decorators.js\";\nimport { Tools } from \"@babylonjs/core/Misc/tools.js\";\nimport { RegisterClass } from \"@babylonjs/core/Misc/typeStore.js\";\n/**\n * Class used to create slider controls\n */\nexport class ScrollBar extends BaseSlider {\n  /** Gets or sets border color */\n  get borderColor() {\n    return this._borderColor;\n  }\n  set borderColor(value) {\n    if (this._borderColor === value) {\n      return;\n    }\n    this._borderColor = value;\n    this._markAsDirty();\n  }\n  /** Gets or sets background color */\n  get background() {\n    return this._background;\n  }\n  set background(value) {\n    if (this._background === value) {\n      return;\n    }\n    this._background = value;\n    this._markAsDirty();\n  }\n  /** Gets or sets background gradient. Takes precedence over gradient. */\n  get backgroundGradient() {\n    return this._backgroundGradient;\n  }\n  set backgroundGradient(value) {\n    if (this._backgroundGradient === value) {\n      return;\n    }\n    this._backgroundGradient = value;\n    this._markAsDirty();\n  }\n  /** Inverts the scrolling direction (default: false) */\n  get invertScrollDirection() {\n    return this._invertScrollDirection;\n  }\n  set invertScrollDirection(invert) {\n    this._invertScrollDirection = invert;\n  }\n  /**\n   * Creates a new Slider\n   * @param name defines the control name\n   */\n  constructor(name) {\n    super(name);\n    this.name = name;\n    this._background = \"black\";\n    this._borderColor = \"white\";\n    this._tempMeasure = new Measure(0, 0, 0, 0);\n    this._invertScrollDirection = false;\n    this._backgroundGradient = null;\n  }\n  _getTypeName() {\n    return \"Scrollbar\";\n  }\n  _getThumbThickness() {\n    let thumbThickness = 0;\n    if (this._thumbWidth.isPixel) {\n      thumbThickness = this._thumbWidth.getValue(this._host);\n    } else {\n      thumbThickness = this._backgroundBoxThickness * this._thumbWidth.getValue(this._host);\n    }\n    return thumbThickness;\n  }\n  _getBackgroundColor(context) {\n    return this._backgroundGradient ? this._backgroundGradient.getCanvasGradient(context) : this._background;\n  }\n  _draw(context) {\n    context.save();\n    this._applyStates(context);\n    this._prepareRenderingData(\"rectangle\");\n    const left = this._renderLeft;\n    const thumbPosition = this._getThumbPosition();\n    context.fillStyle = this._getBackgroundColor(context);\n    context.fillRect(this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);\n    // Value bar\n    context.fillStyle = this._getColor(context);\n    // Thumb\n    if (this.isVertical) {\n      this._tempMeasure.left = left - this._effectiveBarOffset;\n      this._tempMeasure.top = this._currentMeasure.top + thumbPosition;\n      this._tempMeasure.width = this._currentMeasure.width;\n      this._tempMeasure.height = this._effectiveThumbThickness;\n    } else {\n      this._tempMeasure.left = this._currentMeasure.left + thumbPosition;\n      this._tempMeasure.top = this._currentMeasure.top;\n      this._tempMeasure.width = this._effectiveThumbThickness;\n      this._tempMeasure.height = this._currentMeasure.height;\n    }\n    context.fillRect(this._tempMeasure.left, this._tempMeasure.top, this._tempMeasure.width, this._tempMeasure.height);\n    context.restore();\n  }\n  /**\n   * @internal\n   */\n  _updateValueFromPointer(x, y) {\n    if (this.rotation != 0) {\n      this._invertTransformMatrix.transformCoordinates(x, y, this._transformedPosition);\n      x = this._transformedPosition.x;\n      y = this._transformedPosition.y;\n    }\n    const sign = this._invertScrollDirection ? -1 : 1;\n    if (this._first) {\n      this._first = false;\n      this._originX = x;\n      this._originY = y;\n      // Check if move is required\n      if (x < this._tempMeasure.left || x > this._tempMeasure.left + this._tempMeasure.width || y < this._tempMeasure.top || y > this._tempMeasure.top + this._tempMeasure.height) {\n        if (this.isVertical) {\n          this.value = this.minimum + (1 - (y - this._currentMeasure.top) / this._currentMeasure.height) * (this.maximum - this.minimum);\n        } else {\n          this.value = this.minimum + (x - this._currentMeasure.left) / this._currentMeasure.width * (this.maximum - this.minimum);\n        }\n      }\n    }\n    // Delta mode\n    let delta = 0;\n    if (this.isVertical) {\n      delta = -((y - this._originY) / (this._currentMeasure.height - this._effectiveThumbThickness));\n    } else {\n      delta = (x - this._originX) / (this._currentMeasure.width - this._effectiveThumbThickness);\n    }\n    this.value += sign * delta * (this.maximum - this.minimum);\n    this._originX = x;\n    this._originY = y;\n  }\n  _onPointerDown(target, coordinates, pointerId, buttonIndex, pi) {\n    this._first = true;\n    return super._onPointerDown(target, coordinates, pointerId, buttonIndex, pi);\n  }\n  serialize(serializationObject) {\n    super.serialize(serializationObject);\n    if (this.backgroundGradient) {\n      serializationObject.backgroundGradient = {};\n      this.backgroundGradient.serialize(serializationObject.backgroundGradient);\n    }\n  }\n  _parseFromContent(serializationObject, host) {\n    super._parseFromContent(serializationObject, host);\n    if (serializationObject.backgroundGradient) {\n      const className = Tools.Instantiate(\"BABYLON.GUI.\" + serializationObject.backgroundGradient.className);\n      this.backgroundGradient = new className();\n      this.backgroundGradient.parse(serializationObject.backgroundGradient);\n    }\n  }\n}\n__decorate([serialize()], ScrollBar.prototype, \"borderColor\", null);\n__decorate([serialize()], ScrollBar.prototype, \"background\", null);\n__decorate([serialize()], ScrollBar.prototype, \"invertScrollDirection\", null);\nRegisterClass(\"BABYLON.GUI.Scrollbar\", ScrollBar);","map":{"version":3,"names":["BaseSlider","Measure","serialize","Tools","RegisterClass","ScrollBar","borderColor","_borderColor","value","_markAsDirty","background","_background","backgroundGradient","_backgroundGradient","invertScrollDirection","_invertScrollDirection","invert","constructor","name","_tempMeasure","_getTypeName","_getThumbThickness","thumbThickness","_thumbWidth","isPixel","getValue","_host","_backgroundBoxThickness","_getBackgroundColor","context","getCanvasGradient","_draw","save","_applyStates","_prepareRenderingData","left","_renderLeft","thumbPosition","_getThumbPosition","fillStyle","fillRect","_currentMeasure","top","width","height","_getColor","isVertical","_effectiveBarOffset","_effectiveThumbThickness","restore","_updateValueFromPointer","x","y","rotation","_invertTransformMatrix","transformCoordinates","_transformedPosition","sign","_first","_originX","_originY","minimum","maximum","delta","_onPointerDown","target","coordinates","pointerId","buttonIndex","pi","serializationObject","_parseFromContent","host","className","Instantiate","parse","__decorate"],"sources":["../../../../../../dev/gui/src/2D/controls/sliders/scrollBar.ts"],"sourcesContent":["import type { Vector2 } from \"core/Maths/math.vector\";\r\nimport { BaseSlider } from \"./baseSlider\";\r\nimport type { Control } from \"../control\";\r\nimport { Measure } from \"../../measure\";\r\nimport type { PointerInfoBase } from \"core/Events/pointerEvents\";\r\nimport { serialize } from \"core/Misc/decorators\";\r\nimport type { ICanvasRenderingContext } from \"core/Engines/ICanvas\";\r\nimport type { Nullable } from \"core/types\";\r\nimport type { BaseGradient } from \"../gradient/BaseGradient\";\r\nimport type { AdvancedDynamicTexture } from \"gui/2D/advancedDynamicTexture\";\r\nimport { Tools } from \"core/Misc/tools\";\r\nimport { RegisterClass } from \"core/Misc/typeStore\";\r\n\r\n/**\r\n * Class used to create slider controls\r\n */\r\nexport class ScrollBar extends BaseSlider {\r\n    private _background = \"black\";\r\n    private _borderColor = \"white\";\r\n    private _tempMeasure = new Measure(0, 0, 0, 0);\r\n    private _invertScrollDirection = false;\r\n    private _backgroundGradient: Nullable<BaseGradient> = null;\r\n\r\n    /** Gets or sets border color */\r\n    @serialize()\r\n    public get borderColor(): string {\r\n        return this._borderColor;\r\n    }\r\n\r\n    public set borderColor(value: string) {\r\n        if (this._borderColor === value) {\r\n            return;\r\n        }\r\n\r\n        this._borderColor = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets background color */\r\n    @serialize()\r\n    public get background(): string {\r\n        return this._background;\r\n    }\r\n\r\n    public set background(value: string) {\r\n        if (this._background === value) {\r\n            return;\r\n        }\r\n\r\n        this._background = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets background gradient. Takes precedence over gradient. */\r\n    public get backgroundGradient(): Nullable<BaseGradient> {\r\n        return this._backgroundGradient;\r\n    }\r\n\r\n    public set backgroundGradient(value: Nullable<BaseGradient>) {\r\n        if (this._backgroundGradient === value) {\r\n            return;\r\n        }\r\n\r\n        this._backgroundGradient = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Inverts the scrolling direction (default: false) */\r\n    @serialize()\r\n    public get invertScrollDirection() {\r\n        return this._invertScrollDirection;\r\n    }\r\n\r\n    public set invertScrollDirection(invert: boolean) {\r\n        this._invertScrollDirection = invert;\r\n    }\r\n\r\n    /**\r\n     * Creates a new Slider\r\n     * @param name defines the control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Scrollbar\";\r\n    }\r\n\r\n    protected _getThumbThickness(): number {\r\n        let thumbThickness = 0;\r\n        if (this._thumbWidth.isPixel) {\r\n            thumbThickness = this._thumbWidth.getValue(this._host);\r\n        } else {\r\n            thumbThickness = this._backgroundBoxThickness * this._thumbWidth.getValue(this._host);\r\n        }\r\n        return thumbThickness;\r\n    }\r\n\r\n    private _getBackgroundColor(context: ICanvasRenderingContext) {\r\n        return this._backgroundGradient ? this._backgroundGradient.getCanvasGradient(context) : this._background;\r\n    }\r\n\r\n    public _draw(context: ICanvasRenderingContext): void {\r\n        context.save();\r\n\r\n        this._applyStates(context);\r\n        this._prepareRenderingData(\"rectangle\");\r\n        const left = this._renderLeft;\r\n\r\n        const thumbPosition = this._getThumbPosition();\r\n        context.fillStyle = this._getBackgroundColor(context);\r\n\r\n        context.fillRect(this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);\r\n\r\n        // Value bar\r\n        context.fillStyle = this._getColor(context);\r\n\r\n        // Thumb\r\n        if (this.isVertical) {\r\n            this._tempMeasure.left = left - this._effectiveBarOffset;\r\n            this._tempMeasure.top = this._currentMeasure.top + thumbPosition;\r\n            this._tempMeasure.width = this._currentMeasure.width;\r\n            this._tempMeasure.height = this._effectiveThumbThickness;\r\n        } else {\r\n            this._tempMeasure.left = this._currentMeasure.left + thumbPosition;\r\n            this._tempMeasure.top = this._currentMeasure.top;\r\n            this._tempMeasure.width = this._effectiveThumbThickness;\r\n            this._tempMeasure.height = this._currentMeasure.height;\r\n        }\r\n\r\n        context.fillRect(this._tempMeasure.left, this._tempMeasure.top, this._tempMeasure.width, this._tempMeasure.height);\r\n\r\n        context.restore();\r\n    }\r\n\r\n    private _first: boolean;\r\n    private _originX: number;\r\n    private _originY: number;\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    protected _updateValueFromPointer(x: number, y: number): void {\r\n        if (this.rotation != 0) {\r\n            this._invertTransformMatrix.transformCoordinates(x, y, this._transformedPosition);\r\n            x = this._transformedPosition.x;\r\n            y = this._transformedPosition.y;\r\n        }\r\n\r\n        const sign = this._invertScrollDirection ? -1 : 1;\r\n\r\n        if (this._first) {\r\n            this._first = false;\r\n            this._originX = x;\r\n            this._originY = y;\r\n\r\n            // Check if move is required\r\n            if (\r\n                x < this._tempMeasure.left ||\r\n                x > this._tempMeasure.left + this._tempMeasure.width ||\r\n                y < this._tempMeasure.top ||\r\n                y > this._tempMeasure.top + this._tempMeasure.height\r\n            ) {\r\n                if (this.isVertical) {\r\n                    this.value = this.minimum + (1 - (y - this._currentMeasure.top) / this._currentMeasure.height) * (this.maximum - this.minimum);\r\n                } else {\r\n                    this.value = this.minimum + ((x - this._currentMeasure.left) / this._currentMeasure.width) * (this.maximum - this.minimum);\r\n                }\r\n            }\r\n        }\r\n\r\n        // Delta mode\r\n        let delta = 0;\r\n        if (this.isVertical) {\r\n            delta = -((y - this._originY) / (this._currentMeasure.height - this._effectiveThumbThickness));\r\n        } else {\r\n            delta = (x - this._originX) / (this._currentMeasure.width - this._effectiveThumbThickness);\r\n        }\r\n\r\n        this.value += sign * delta * (this.maximum - this.minimum);\r\n\r\n        this._originX = x;\r\n        this._originY = y;\r\n    }\r\n\r\n    public _onPointerDown(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number, pi: PointerInfoBase): boolean {\r\n        this._first = true;\r\n\r\n        return super._onPointerDown(target, coordinates, pointerId, buttonIndex, pi);\r\n    }\r\n\r\n    public serialize(serializationObject: any) {\r\n        super.serialize(serializationObject);\r\n\r\n        if (this.backgroundGradient) {\r\n            serializationObject.backgroundGradient = {};\r\n            this.backgroundGradient.serialize(serializationObject.backgroundGradient);\r\n        }\r\n    }\r\n\r\n    public _parseFromContent(serializationObject: any, host: AdvancedDynamicTexture) {\r\n        super._parseFromContent(serializationObject, host);\r\n\r\n        if (serializationObject.backgroundGradient) {\r\n            const className = Tools.Instantiate(\"BABYLON.GUI.\" + serializationObject.backgroundGradient.className);\r\n            this.backgroundGradient = new className();\r\n            this.backgroundGradient!.parse(serializationObject.backgroundGradient);\r\n        }\r\n    }\r\n}\r\nRegisterClass(\"BABYLON.GUI.Scrollbar\", ScrollBar);\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}