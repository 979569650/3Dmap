{"ast":null,"code":"import \"core-js/modules/es.typed-array.to-reversed.js\";\nimport \"core-js/modules/es.typed-array.to-sorted.js\";\nimport \"core-js/modules/es.typed-array.with.js\";\nimport { WebGPUEngine } from \"../../webgpuEngine.js\";\nimport * as WebGPUConstants from \"../webgpuConstants.js\";\nWebGPUEngine.prototype.createUniformBuffer = function (elements, label) {\n  let view;\n  if (elements instanceof Array) {\n    view = new Float32Array(elements);\n  } else {\n    view = elements;\n  }\n  const dataBuffer = this._bufferManager.createBuffer(view, WebGPUConstants.BufferUsage.Uniform | WebGPUConstants.BufferUsage.CopyDst, label);\n  return dataBuffer;\n};\nWebGPUEngine.prototype.createDynamicUniformBuffer = function (elements, label) {\n  return this.createUniformBuffer(elements, label);\n};\nWebGPUEngine.prototype.updateUniformBuffer = function (uniformBuffer, elements, offset, count) {\n  if (offset === undefined) {\n    offset = 0;\n  }\n  const dataBuffer = uniformBuffer;\n  let view;\n  if (count === undefined) {\n    if (elements instanceof Float32Array) {\n      view = elements;\n    } else {\n      view = new Float32Array(elements);\n    }\n    count = view.byteLength;\n  } else {\n    if (elements instanceof Float32Array) {\n      view = elements;\n    } else {\n      view = new Float32Array(elements);\n    }\n  }\n  this._bufferManager.setSubData(dataBuffer, offset, view, 0, count);\n};\nWebGPUEngine.prototype.bindUniformBufferBase = function (buffer, _location, name) {\n  this._currentDrawContext.setBuffer(name, buffer);\n};\nWebGPUEngine.prototype.bindUniformBlock = function () {};","map":{"version":3,"names":["WebGPUEngine","WebGPUConstants","prototype","createUniformBuffer","elements","label","view","Array","Float32Array","dataBuffer","_bufferManager","createBuffer","BufferUsage","Uniform","CopyDst","createDynamicUniformBuffer","updateUniformBuffer","uniformBuffer","offset","count","undefined","byteLength","setSubData","bindUniformBufferBase","buffer","_location","name","_currentDrawContext","setBuffer","bindUniformBlock"],"sources":["../../../../../../dev/core/src/Engines/WebGPU/Extensions/engine.uniformBuffer.ts"],"sourcesContent":["import type { DataBuffer } from \"../../../Buffers/dataBuffer\";\r\nimport type { WebGPUDataBuffer } from \"../../../Meshes/WebGPU/webgpuDataBuffer\";\r\nimport type { FloatArray } from \"../../../types\";\r\nimport { WebGPUEngine } from \"../../webgpuEngine\";\r\nimport * as WebGPUConstants from \"../webgpuConstants\";\r\n\r\nWebGPUEngine.prototype.createUniformBuffer = function (elements: FloatArray, label?: string): DataBuffer {\r\n    let view: Float32Array;\r\n    if (elements instanceof Array) {\r\n        view = new Float32Array(elements);\r\n    } else {\r\n        view = elements;\r\n    }\r\n\r\n    const dataBuffer = this._bufferManager.createBuffer(view, WebGPUConstants.BufferUsage.Uniform | WebGPUConstants.BufferUsage.CopyDst, label);\r\n    return dataBuffer;\r\n};\r\n\r\nWebGPUEngine.prototype.createDynamicUniformBuffer = function (elements: FloatArray, label?: string): DataBuffer {\r\n    return this.createUniformBuffer(elements, label);\r\n};\r\n\r\nWebGPUEngine.prototype.updateUniformBuffer = function (uniformBuffer: DataBuffer, elements: FloatArray, offset?: number, count?: number): void {\r\n    if (offset === undefined) {\r\n        offset = 0;\r\n    }\r\n\r\n    const dataBuffer = uniformBuffer as WebGPUDataBuffer;\r\n    let view: Float32Array;\r\n    if (count === undefined) {\r\n        if (elements instanceof Float32Array) {\r\n            view = elements;\r\n        } else {\r\n            view = new Float32Array(elements);\r\n        }\r\n        count = view.byteLength;\r\n    } else {\r\n        if (elements instanceof Float32Array) {\r\n            view = elements;\r\n        } else {\r\n            view = new Float32Array(elements);\r\n        }\r\n    }\r\n\r\n    this._bufferManager.setSubData(dataBuffer, offset, view, 0, count);\r\n};\r\n\r\nWebGPUEngine.prototype.bindUniformBufferBase = function (buffer: DataBuffer, _location: number, name: string): void {\r\n    this._currentDrawContext.setBuffer(name, buffer as WebGPUDataBuffer);\r\n};\r\n\r\nWebGPUEngine.prototype.bindUniformBlock = function (): void {};\r\n"],"mappings":";;;AAGA,SAASA,YAAY,QAAQ,uBAAqB;AAClD,OAAO,KAAKC,eAAe,MAAM,uBAAqB;AAEtDD,YAAY,CAACE,SAAS,CAACC,mBAAmB,GAAG,UAAUC,QAAoB,EAAEC,KAAc;EACvF,IAAIC,IAAkB;EACtB,IAAIF,QAAQ,YAAYG,KAAK,EAAE;IAC3BD,IAAI,GAAG,IAAIE,YAAY,CAACJ,QAAQ,CAAC;GACpC,MAAM;IACHE,IAAI,GAAGF,QAAQ;;EAGnB,MAAMK,UAAU,GAAG,IAAI,CAACC,cAAc,CAACC,YAAY,CAACL,IAAI,EAAEL,eAAe,CAACW,WAAW,CAACC,OAAO,GAAGZ,eAAe,CAACW,WAAW,CAACE,OAAO,EAAET,KAAK,CAAC;EAC3I,OAAOI,UAAU;AACrB,CAAC;AAEDT,YAAY,CAACE,SAAS,CAACa,0BAA0B,GAAG,UAAUX,QAAoB,EAAEC,KAAc;EAC9F,OAAO,IAAI,CAACF,mBAAmB,CAACC,QAAQ,EAAEC,KAAK,CAAC;AACpD,CAAC;AAEDL,YAAY,CAACE,SAAS,CAACc,mBAAmB,GAAG,UAAUC,aAAyB,EAAEb,QAAoB,EAAEc,MAAe,EAAEC,KAAc;EACnI,IAAID,MAAM,KAAKE,SAAS,EAAE;IACtBF,MAAM,GAAG,CAAC;;EAGd,MAAMT,UAAU,GAAGQ,aAAiC;EACpD,IAAIX,IAAkB;EACtB,IAAIa,KAAK,KAAKC,SAAS,EAAE;IACrB,IAAIhB,QAAQ,YAAYI,YAAY,EAAE;MAClCF,IAAI,GAAGF,QAAQ;KAClB,MAAM;MACHE,IAAI,GAAG,IAAIE,YAAY,CAACJ,QAAQ,CAAC;;IAErCe,KAAK,GAAGb,IAAI,CAACe,UAAU;GAC1B,MAAM;IACH,IAAIjB,QAAQ,YAAYI,YAAY,EAAE;MAClCF,IAAI,GAAGF,QAAQ;KAClB,MAAM;MACHE,IAAI,GAAG,IAAIE,YAAY,CAACJ,QAAQ,CAAC;;;EAIzC,IAAI,CAACM,cAAc,CAACY,UAAU,CAACb,UAAU,EAAES,MAAM,EAAEZ,IAAI,EAAE,CAAC,EAAEa,KAAK,CAAC;AACtE,CAAC;AAEDnB,YAAY,CAACE,SAAS,CAACqB,qBAAqB,GAAG,UAAUC,MAAkB,EAAEC,SAAiB,EAAEC,IAAY;EACxG,IAAI,CAACC,mBAAmB,CAACC,SAAS,CAACF,IAAI,EAAEF,MAA0B,CAAC;AACxE,CAAC;AAEDxB,YAAY,CAACE,SAAS,CAAC2B,gBAAgB,GAAG,aAAmB,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}