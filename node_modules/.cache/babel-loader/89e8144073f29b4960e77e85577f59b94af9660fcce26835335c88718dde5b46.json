{"ast":null,"code":"import { __decorate } from \"@babylonjs/core/tslib.es6.js\";\nimport { Container } from \"./container.js\";\nimport { RegisterClass } from \"@babylonjs/core/Misc/typeStore.js\";\nimport { serialize } from \"@babylonjs/core/Misc/decorators.js\";\n/** Class used to create rectangle container */\nexport class Rectangle extends Container {\n  /** Gets or sets border thickness */\n  get thickness() {\n    return this._thickness;\n  }\n  set thickness(value) {\n    if (this._thickness === value) {\n      return;\n    }\n    this._thickness = value;\n    this._markAsDirty();\n  }\n  /** Gets or sets the corner radius of all angles */\n  get cornerRadius() {\n    return this._cornerRadius[0];\n  }\n  set cornerRadius(value) {\n    if (value < 0) {\n      value = 0;\n    }\n    if (this._cornerRadius[0] === value && this._cornerRadius[1] === value && this._cornerRadius[2] === value && this._cornerRadius[3] === value) {\n      return;\n    }\n    this._cornerRadius[0] = this._cornerRadius[1] = this._cornerRadius[2] = this._cornerRadius[3] = value;\n    this._markAsDirty();\n  }\n  /** Gets or sets the corner radius top left angle */\n  get cornerRadiusX() {\n    return this._cornerRadius[0];\n  }\n  set cornerRadiusX(value) {\n    if (this._cornerRadius[0] === value) {\n      return;\n    }\n    this._cornerRadius[0] = value;\n  }\n  /** Gets or sets the corner radius top right angle */\n  get cornerRadiusY() {\n    return this._cornerRadius[1];\n  }\n  set cornerRadiusY(value) {\n    if (this._cornerRadius[1] === value) {\n      return;\n    }\n    this._cornerRadius[1] = value;\n  }\n  /** Gets or sets the corner radius bottom left angle */\n  get cornerRadiusZ() {\n    return this._cornerRadius[2];\n  }\n  set cornerRadiusZ(value) {\n    if (this._cornerRadius[2] === value) {\n      return;\n    }\n    this._cornerRadius[2] = value;\n  }\n  /** Gets or sets the corner radius bottom right angle */\n  get cornerRadiusW() {\n    return this._cornerRadius[3];\n  }\n  set cornerRadiusW(value) {\n    if (this._cornerRadius[3] === value) {\n      return;\n    }\n    this._cornerRadius[3] = value;\n  }\n  /**\n   * Creates a new Rectangle\n   * @param name defines the control name\n   */\n  constructor(name) {\n    super(name);\n    this.name = name;\n    this._thickness = 1;\n    this._cornerRadius = [0, 0, 0, 0];\n    this._cachedRadius = [0, 0, 0, 0];\n  }\n  _getTypeName() {\n    return \"Rectangle\";\n  }\n  /** @internal */\n  _computeAdditionalOffsetX() {\n    let additionalWidth = 0;\n    if (this._cornerRadius[0] !== 0 || this._cornerRadius[1] !== 0 || this._cornerRadius[2] !== 0 || this._cornerRadius[3] !== 0) {\n      // Take in account the aliasing\n      additionalWidth += 1;\n    }\n    if (this.thickness) {\n      additionalWidth += this.thickness / 2;\n    }\n    return additionalWidth;\n  }\n  /** @internal */\n  _computeAdditionalOffsetY() {\n    let additionalHeight = 0;\n    if (this._cornerRadius[0] !== 0 || this._cornerRadius[1] !== 0 || this._cornerRadius[2] !== 0 || this._cornerRadius[3] !== 0) {\n      // Take in account the aliasing\n      additionalHeight += 1;\n    }\n    if (this.thickness) {\n      additionalHeight += this.thickness / 2;\n    }\n    return additionalHeight;\n  }\n  _getRectangleFill(context) {\n    return this._getBackgroundColor(context);\n  }\n  _localDraw(context) {\n    context.save();\n    if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\n      context.shadowColor = this.shadowColor;\n      context.shadowBlur = this.shadowBlur;\n      context.shadowOffsetX = this.shadowOffsetX;\n      context.shadowOffsetY = this.shadowOffsetY;\n    }\n    if (this._background || this._backgroundGradient) {\n      context.fillStyle = this._getRectangleFill(context);\n      if (this._cornerRadius[0] !== 0 || this._cornerRadius[1] !== 0 || this._cornerRadius[2] !== 0 || this._cornerRadius[3] !== 0) {\n        this._drawRoundedRect(context, this._thickness / 2);\n        context.fill();\n      } else {\n        context.fillRect(this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);\n      }\n    }\n    if (this._thickness) {\n      if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\n        context.shadowBlur = 0;\n        context.shadowOffsetX = 0;\n        context.shadowOffsetY = 0;\n      }\n      if (this.color || this.gradient) {\n        context.strokeStyle = this.gradient ? this.gradient.getCanvasGradient(context) : this.color;\n      }\n      context.lineWidth = this._thickness;\n      if (this._cornerRadius[0] !== 0 || this._cornerRadius[1] !== 0 || this._cornerRadius[2] !== 0 || this._cornerRadius[3] !== 0) {\n        this._drawRoundedRect(context, this._thickness / 2);\n        context.stroke();\n      } else {\n        context.strokeRect(this._currentMeasure.left + this._thickness / 2, this._currentMeasure.top + this._thickness / 2, this._currentMeasure.width - this._thickness, this._currentMeasure.height - this._thickness);\n      }\n    }\n    context.restore();\n  }\n  _additionalProcessing(parentMeasure, context) {\n    super._additionalProcessing(parentMeasure, context);\n    this._measureForChildren.width -= 2 * this._thickness;\n    this._measureForChildren.height -= 2 * this._thickness;\n    this._measureForChildren.left += this._thickness;\n    this._measureForChildren.top += this._thickness;\n  }\n  _drawRoundedRect(context, offset = 0) {\n    const x = this._currentMeasure.left + offset;\n    const y = this._currentMeasure.top + offset;\n    const width = this._currentMeasure.width - offset * 2;\n    const height = this._currentMeasure.height - offset * 2;\n    for (let index = 0; index < this._cornerRadius.length; index++) {\n      this._cachedRadius[index] = Math.abs(Math.min(height / 2, Math.min(width / 2, this._cornerRadius[index])));\n    }\n    context.beginPath();\n    context.moveTo(x + this._cachedRadius[0], y);\n    context.lineTo(x + width - this._cachedRadius[1], y);\n    context.arc(x + width - this._cachedRadius[1], y + this._cachedRadius[1], this._cachedRadius[1], 3 * Math.PI / 2, Math.PI * 2);\n    context.lineTo(x + width, y + height - this._cachedRadius[2]);\n    context.arc(x + width - this._cachedRadius[2], y + height - this._cachedRadius[2], this._cachedRadius[2], 0, Math.PI / 2);\n    context.lineTo(x + this._cachedRadius[3], y + height);\n    context.arc(x + this._cachedRadius[3], y + height - this._cachedRadius[3], this._cachedRadius[3], Math.PI / 2, Math.PI);\n    context.lineTo(x, y + this._cachedRadius[0]);\n    context.arc(x + this._cachedRadius[0], y + this._cachedRadius[0], this._cachedRadius[0], Math.PI, 3 * Math.PI / 2);\n    context.closePath();\n  }\n  _clipForChildren(context) {\n    if (this._cornerRadius[0] !== 0 || this._cornerRadius[1] !== 0 || this._cornerRadius[2] !== 0 || this._cornerRadius[3] !== 0) {\n      this._drawRoundedRect(context, this._thickness);\n      context.clip();\n    }\n  }\n}\n__decorate([serialize()], Rectangle.prototype, \"thickness\", null);\n__decorate([serialize()], Rectangle.prototype, \"cornerRadius\", null);\n__decorate([serialize()], Rectangle.prototype, \"cornerRadiusX\", null);\n__decorate([serialize()], Rectangle.prototype, \"cornerRadiusY\", null);\n__decorate([serialize()], Rectangle.prototype, \"cornerRadiusZ\", null);\n__decorate([serialize()], Rectangle.prototype, \"cornerRadiusW\", null);\nRegisterClass(\"BABYLON.GUI.Rectangle\", Rectangle);","map":{"version":3,"names":["Container","RegisterClass","serialize","Rectangle","thickness","_thickness","value","_markAsDirty","cornerRadius","_cornerRadius","cornerRadiusX","cornerRadiusY","cornerRadiusZ","cornerRadiusW","constructor","name","_cachedRadius","_getTypeName","_computeAdditionalOffsetX","additionalWidth","_computeAdditionalOffsetY","additionalHeight","_getRectangleFill","context","_getBackgroundColor","_localDraw","save","shadowBlur","shadowOffsetX","shadowOffsetY","shadowColor","_background","_backgroundGradient","fillStyle","_drawRoundedRect","fill","fillRect","_currentMeasure","left","top","width","height","color","gradient","strokeStyle","getCanvasGradient","lineWidth","stroke","strokeRect","restore","_additionalProcessing","parentMeasure","_measureForChildren","offset","x","y","index","length","Math","abs","min","beginPath","moveTo","lineTo","arc","PI","closePath","_clipForChildren","clip","__decorate"],"sources":["../../../../../dev/gui/src/2D/controls/rectangle.ts"],"sourcesContent":["import { Container } from \"./container\";\r\nimport type { Measure } from \"../measure\";\r\nimport { RegisterClass } from \"core/Misc/typeStore\";\r\nimport { serialize } from \"core/Misc/decorators\";\r\nimport type { ICanvasRenderingContext } from \"core/Engines/ICanvas\";\r\n\r\n/** Class used to create rectangle container */\r\nexport class Rectangle extends Container {\r\n    private _thickness = 1;\r\n    private _cornerRadius = [0, 0, 0, 0];\r\n    private _cachedRadius = [0, 0, 0, 0];\r\n\r\n    /** Gets or sets border thickness */\r\n    @serialize()\r\n    public get thickness(): number {\r\n        return this._thickness;\r\n    }\r\n\r\n    public set thickness(value: number) {\r\n        if (this._thickness === value) {\r\n            return;\r\n        }\r\n\r\n        this._thickness = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the corner radius of all angles */\r\n    @serialize()\r\n    public get cornerRadius(): number {\r\n        return this._cornerRadius[0];\r\n    }\r\n\r\n    public set cornerRadius(value: number) {\r\n        if (value < 0) {\r\n            value = 0;\r\n        }\r\n\r\n        if (this._cornerRadius[0] === value && this._cornerRadius[1] === value && this._cornerRadius[2] === value && this._cornerRadius[3] === value) {\r\n            return;\r\n        }\r\n\r\n        this._cornerRadius[0] = this._cornerRadius[1] = this._cornerRadius[2] = this._cornerRadius[3] = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the corner radius top left angle */\r\n    @serialize()\r\n    public get cornerRadiusX(): number {\r\n        return this._cornerRadius[0];\r\n    }\r\n\r\n    public set cornerRadiusX(value: number) {\r\n        if (this._cornerRadius[0] === value) {\r\n            return;\r\n        }\r\n        this._cornerRadius[0] = value;\r\n    }\r\n\r\n    /** Gets or sets the corner radius top right angle */\r\n    @serialize()\r\n    public get cornerRadiusY(): number {\r\n        return this._cornerRadius[1];\r\n    }\r\n\r\n    public set cornerRadiusY(value: number) {\r\n        if (this._cornerRadius[1] === value) {\r\n            return;\r\n        }\r\n        this._cornerRadius[1] = value;\r\n    }\r\n\r\n    /** Gets or sets the corner radius bottom left angle */\r\n    @serialize()\r\n    public get cornerRadiusZ(): number {\r\n        return this._cornerRadius[2];\r\n    }\r\n\r\n    public set cornerRadiusZ(value: number) {\r\n        if (this._cornerRadius[2] === value) {\r\n            return;\r\n        }\r\n        this._cornerRadius[2] = value;\r\n    }\r\n\r\n    /** Gets or sets the corner radius bottom right angle */\r\n    @serialize()\r\n    public get cornerRadiusW(): number {\r\n        return this._cornerRadius[3];\r\n    }\r\n\r\n    public set cornerRadiusW(value: number) {\r\n        if (this._cornerRadius[3] === value) {\r\n            return;\r\n        }\r\n        this._cornerRadius[3] = value;\r\n    }\r\n\r\n    /**\r\n     * Creates a new Rectangle\r\n     * @param name defines the control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Rectangle\";\r\n    }\r\n\r\n    /** @internal */\r\n    protected _computeAdditionalOffsetX() {\r\n        let additionalWidth = 0;\r\n        if (this._cornerRadius[0] !== 0 || this._cornerRadius[1] !== 0 || this._cornerRadius[2] !== 0 || this._cornerRadius[3] !== 0) {\r\n            // Take in account the aliasing\r\n            additionalWidth += 1;\r\n        }\r\n        if (this.thickness) {\r\n            additionalWidth += this.thickness / 2;\r\n        }\r\n        return additionalWidth;\r\n    }\r\n\r\n    /** @internal */\r\n    protected _computeAdditionalOffsetY() {\r\n        let additionalHeight = 0;\r\n        if (this._cornerRadius[0] !== 0 || this._cornerRadius[1] !== 0 || this._cornerRadius[2] !== 0 || this._cornerRadius[3] !== 0) {\r\n            // Take in account the aliasing\r\n            additionalHeight += 1;\r\n        }\r\n        if (this.thickness) {\r\n            additionalHeight += this.thickness / 2;\r\n        }\r\n        return additionalHeight;\r\n    }\r\n\r\n    protected _getRectangleFill(context: ICanvasRenderingContext) {\r\n        return this._getBackgroundColor(context);\r\n    }\r\n\r\n    protected _localDraw(context: ICanvasRenderingContext): void {\r\n        context.save();\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            context.shadowColor = this.shadowColor;\r\n            context.shadowBlur = this.shadowBlur;\r\n            context.shadowOffsetX = this.shadowOffsetX;\r\n            context.shadowOffsetY = this.shadowOffsetY;\r\n        }\r\n\r\n        if (this._background || this._backgroundGradient) {\r\n            context.fillStyle = this._getRectangleFill(context);\r\n\r\n            if (this._cornerRadius[0] !== 0 || this._cornerRadius[1] !== 0 || this._cornerRadius[2] !== 0 || this._cornerRadius[3] !== 0) {\r\n                this._drawRoundedRect(context, this._thickness / 2);\r\n                context.fill();\r\n            } else {\r\n                context.fillRect(this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);\r\n            }\r\n        }\r\n\r\n        if (this._thickness) {\r\n            if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n                context.shadowBlur = 0;\r\n                context.shadowOffsetX = 0;\r\n                context.shadowOffsetY = 0;\r\n            }\r\n\r\n            if (this.color || this.gradient) {\r\n                context.strokeStyle = this.gradient ? this.gradient.getCanvasGradient(context) : this.color;\r\n            }\r\n            context.lineWidth = this._thickness;\r\n\r\n            if (this._cornerRadius[0] !== 0 || this._cornerRadius[1] !== 0 || this._cornerRadius[2] !== 0 || this._cornerRadius[3] !== 0) {\r\n                this._drawRoundedRect(context, this._thickness / 2);\r\n                context.stroke();\r\n            } else {\r\n                context.strokeRect(\r\n                    this._currentMeasure.left + this._thickness / 2,\r\n                    this._currentMeasure.top + this._thickness / 2,\r\n                    this._currentMeasure.width - this._thickness,\r\n                    this._currentMeasure.height - this._thickness\r\n                );\r\n            }\r\n        }\r\n\r\n        context.restore();\r\n    }\r\n\r\n    protected _additionalProcessing(parentMeasure: Measure, context: ICanvasRenderingContext): void {\r\n        super._additionalProcessing(parentMeasure, context);\r\n\r\n        this._measureForChildren.width -= 2 * this._thickness;\r\n        this._measureForChildren.height -= 2 * this._thickness;\r\n        this._measureForChildren.left += this._thickness;\r\n        this._measureForChildren.top += this._thickness;\r\n    }\r\n\r\n    private _drawRoundedRect(context: ICanvasRenderingContext, offset: number = 0): void {\r\n        const x = this._currentMeasure.left + offset;\r\n        const y = this._currentMeasure.top + offset;\r\n        const width = this._currentMeasure.width - offset * 2;\r\n        const height = this._currentMeasure.height - offset * 2;\r\n\r\n        for (let index = 0; index < this._cornerRadius.length; index++) {\r\n            this._cachedRadius[index] = Math.abs(Math.min(height / 2, Math.min(width / 2, this._cornerRadius[index])));\r\n        }\r\n\r\n        context.beginPath();\r\n        context.moveTo(x + this._cachedRadius[0], y);\r\n        context.lineTo(x + width - this._cachedRadius[1], y);\r\n        context.arc(x + width - this._cachedRadius[1], y + this._cachedRadius[1], this._cachedRadius[1], (3 * Math.PI) / 2, Math.PI * 2);\r\n        context.lineTo(x + width, y + height - this._cachedRadius[2]);\r\n        context.arc(x + width - this._cachedRadius[2], y + height - this._cachedRadius[2], this._cachedRadius[2], 0, Math.PI / 2);\r\n        context.lineTo(x + this._cachedRadius[3], y + height);\r\n        context.arc(x + this._cachedRadius[3], y + height - this._cachedRadius[3], this._cachedRadius[3], Math.PI / 2, Math.PI);\r\n        context.lineTo(x, y + this._cachedRadius[0]);\r\n        context.arc(x + this._cachedRadius[0], y + this._cachedRadius[0], this._cachedRadius[0], Math.PI, (3 * Math.PI) / 2);\r\n        context.closePath();\r\n    }\r\n\r\n    protected _clipForChildren(context: ICanvasRenderingContext) {\r\n        if (this._cornerRadius[0] !== 0 || this._cornerRadius[1] !== 0 || this._cornerRadius[2] !== 0 || this._cornerRadius[3] !== 0) {\r\n            this._drawRoundedRect(context, this._thickness);\r\n            context.clip();\r\n        }\r\n    }\r\n}\r\nRegisterClass(\"BABYLON.GUI.Rectangle\", Rectangle);\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}