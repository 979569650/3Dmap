{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { __decorate } from \"../tslib.es6.js\";\nimport { serialize, expandToProperty } from \"../Misc/decorators.js\";\nimport { MaterialDefines } from \"./materialDefines.js\";\nimport { MaterialPluginBase } from \"./materialPluginBase.js\";\nimport { MaterialFlags } from \"./materialFlags.js\";\nimport { MaterialHelper } from \"./materialHelper.js\";\nimport { RegisterClass } from \"../Misc/typeStore.js\";\n/**\n * @internal\n */\nexport class DecalMapDefines extends MaterialDefines {\n  constructor() {\n    super(...arguments);\n    this.DECAL = false;\n    this.DECALDIRECTUV = 0;\n    this.DECAL_SMOOTHALPHA = false;\n    this.GAMMADECAL = false;\n  }\n}\n/**\n * Plugin that implements the decal map component of a material\n * @since 5.49.1\n */\nexport class DecalMapConfiguration extends MaterialPluginBase {\n  /** @internal */\n  _markAllSubMeshesAsTexturesDirty() {\n    this._enable(this._isEnabled);\n    this._internalMarkAllSubMeshesAsTexturesDirty();\n  }\n  /**\n   * Creates a new DecalMapConfiguration\n   * @param material The material to attach the decal map plugin to\n   * @param addToPluginList If the plugin should be added to the material plugin list\n   */\n  constructor(material, addToPluginList = true) {\n    super(material, \"DecalMap\", 150, new DecalMapDefines(), addToPluginList);\n    this._isEnabled = false;\n    /**\n     * Enables or disables the decal map on this material\n     */\n    this.isEnabled = false;\n    this._smoothAlpha = false;\n    /**\n     * Enables or disables the smooth alpha mode on this material. Default: false.\n     * When enabled, the alpha value used to blend the decal map will be the squared value and will produce a smoother result.\n     */\n    this.smoothAlpha = false;\n    this.registerForExtraEvents = true; // because we override the hardBindForSubMesh method\n    this._internalMarkAllSubMeshesAsTexturesDirty = material._dirtyCallbacks[1];\n  }\n  isReadyForSubMesh(defines, scene, engine, subMesh) {\n    const decalMap = subMesh.getMesh().decalMap;\n    if (!this._isEnabled || !(decalMap === null || decalMap === void 0 ? void 0 : decalMap.texture) || !MaterialFlags.DecalMapEnabled || !scene.texturesEnabled) {\n      return true;\n    }\n    return decalMap.isReady();\n  }\n  prepareDefines(defines, scene, mesh) {\n    const decalMap = mesh.decalMap;\n    if (!this._isEnabled || !(decalMap === null || decalMap === void 0 ? void 0 : decalMap.texture) || !MaterialFlags.DecalMapEnabled || !scene.texturesEnabled) {\n      const isDirty = defines.DECAL;\n      if (isDirty) {\n        defines.markAsTexturesDirty();\n      }\n      defines.DECAL = false;\n    } else {\n      const isDirty = !defines.DECAL || defines.GAMMADECAL !== decalMap.texture.gammaSpace;\n      if (isDirty) {\n        defines.markAsTexturesDirty();\n      }\n      defines.DECAL = true;\n      defines.GAMMADECAL = decalMap.texture.gammaSpace;\n      defines.DECAL_SMOOTHALPHA = this._smoothAlpha;\n      MaterialHelper.PrepareDefinesForMergedUV(decalMap.texture, defines, \"DECAL\");\n    }\n  }\n  /**\n   * Note that we override hardBindForSubMesh and not bindForSubMesh because the material can be shared by multiple meshes,\n   * in which case mustRebind could return false even though the decal map is different for each mesh: that's because the decal map\n   * is not part of the material but hosted by the decalMap of the mesh instead.\n   */\n  hardBindForSubMesh(uniformBuffer, scene, _engine, subMesh) {\n    const decalMap = subMesh.getMesh().decalMap;\n    if (!this._isEnabled || !(decalMap === null || decalMap === void 0 ? void 0 : decalMap.texture) || !MaterialFlags.DecalMapEnabled || !scene.texturesEnabled) {\n      return;\n    }\n    const isFrozen = this._material.isFrozen;\n    const texture = decalMap.texture;\n    if (!uniformBuffer.useUbo || !isFrozen || !uniformBuffer.isSync) {\n      uniformBuffer.updateFloat4(\"vDecalInfos\", texture.coordinatesIndex, 0, 0, 0);\n      MaterialHelper.BindTextureMatrix(texture, uniformBuffer, \"decal\");\n    }\n    uniformBuffer.setTexture(\"decalSampler\", texture);\n  }\n  getClassName() {\n    return \"DecalMapConfiguration\";\n  }\n  getSamplers(samplers) {\n    samplers.push(\"decalSampler\");\n  }\n  getUniforms() {\n    return {\n      ubo: [{\n        name: \"vDecalInfos\",\n        size: 4,\n        type: \"vec4\"\n      }, {\n        name: \"decalMatrix\",\n        size: 16,\n        type: \"mat4\"\n      }]\n    };\n  }\n}\n__decorate([serialize(), expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")], DecalMapConfiguration.prototype, \"isEnabled\", void 0);\n__decorate([serialize(), expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")], DecalMapConfiguration.prototype, \"smoothAlpha\", void 0);\nRegisterClass(\"BABYLON.DecalMapConfiguration\", DecalMapConfiguration);","map":{"version":3,"names":["serialize","expandToProperty","MaterialDefines","MaterialPluginBase","MaterialFlags","MaterialHelper","RegisterClass","DecalMapDefines","constructor","DECAL","DECALDIRECTUV","DECAL_SMOOTHALPHA","GAMMADECAL","DecalMapConfiguration","_markAllSubMeshesAsTexturesDirty","_enable","_isEnabled","_internalMarkAllSubMeshesAsTexturesDirty","material","addToPluginList","isEnabled","_smoothAlpha","smoothAlpha","registerForExtraEvents","_dirtyCallbacks","isReadyForSubMesh","defines","scene","engine","subMesh","decalMap","getMesh","texture","DecalMapEnabled","texturesEnabled","isReady","prepareDefines","mesh","isDirty","markAsTexturesDirty","gammaSpace","PrepareDefinesForMergedUV","hardBindForSubMesh","uniformBuffer","_engine","isFrozen","_material","useUbo","isSync","updateFloat4","coordinatesIndex","BindTextureMatrix","setTexture","getClassName","getSamplers","samplers","push","getUniforms","ubo","name","size","type","__decorate"],"sources":["../../../../dev/core/src/Materials/material.decalMapConfiguration.ts"],"sourcesContent":["import { serialize, expandToProperty } from \"../Misc/decorators\";\r\nimport { MaterialDefines } from \"./materialDefines\";\r\nimport { MaterialPluginBase } from \"./materialPluginBase\";\r\nimport { Constants } from \"../Engines/constants\";\r\nimport { MaterialFlags } from \"./materialFlags\";\r\nimport type { Scene } from \"core/scene\";\r\nimport type { Engine } from \"core/Engines/engine\";\r\nimport type { SubMesh } from \"core/Meshes/subMesh\";\r\nimport type { AbstractMesh } from \"core/Meshes/abstractMesh\";\r\nimport { MaterialHelper } from \"./materialHelper\";\r\nimport type { UniformBuffer } from \"./uniformBuffer\";\r\nimport type { PBRBaseMaterial } from \"./PBR/pbrBaseMaterial\";\r\nimport type { StandardMaterial } from \"./standardMaterial\";\r\nimport { RegisterClass } from \"core/Misc/typeStore\";\r\n\r\n/**\r\n * @internal\r\n */\r\nexport class DecalMapDefines extends MaterialDefines {\r\n    DECAL = false;\r\n    DECALDIRECTUV = 0;\r\n    DECAL_SMOOTHALPHA = false;\r\n    GAMMADECAL = false;\r\n}\r\n\r\n/**\r\n * Plugin that implements the decal map component of a material\r\n * @since 5.49.1\r\n */\r\nexport class DecalMapConfiguration extends MaterialPluginBase {\r\n    private _isEnabled = false;\r\n    /**\r\n     * Enables or disables the decal map on this material\r\n     */\r\n    @serialize()\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public isEnabled = false;\r\n\r\n    private _smoothAlpha = false;\r\n\r\n    /**\r\n     * Enables or disables the smooth alpha mode on this material. Default: false.\r\n     * When enabled, the alpha value used to blend the decal map will be the squared value and will produce a smoother result.\r\n     */\r\n    @serialize()\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public smoothAlpha = false;\r\n\r\n    private _internalMarkAllSubMeshesAsTexturesDirty: () => void;\r\n\r\n    /** @internal */\r\n    public _markAllSubMeshesAsTexturesDirty(): void {\r\n        this._enable(this._isEnabled);\r\n        this._internalMarkAllSubMeshesAsTexturesDirty();\r\n    }\r\n\r\n    /**\r\n     * Creates a new DecalMapConfiguration\r\n     * @param material The material to attach the decal map plugin to\r\n     * @param addToPluginList If the plugin should be added to the material plugin list\r\n     */\r\n    constructor(material: PBRBaseMaterial | StandardMaterial, addToPluginList = true) {\r\n        super(material, \"DecalMap\", 150, new DecalMapDefines(), addToPluginList);\r\n\r\n        this.registerForExtraEvents = true; // because we override the hardBindForSubMesh method\r\n        this._internalMarkAllSubMeshesAsTexturesDirty = material._dirtyCallbacks[Constants.MATERIAL_TextureDirtyFlag];\r\n    }\r\n\r\n    public isReadyForSubMesh(defines: DecalMapDefines, scene: Scene, engine: Engine, subMesh: SubMesh): boolean {\r\n        const decalMap = subMesh.getMesh().decalMap;\r\n\r\n        if (!this._isEnabled || !decalMap?.texture || !MaterialFlags.DecalMapEnabled || !scene.texturesEnabled) {\r\n            return true;\r\n        }\r\n\r\n        return decalMap.isReady();\r\n    }\r\n\r\n    public prepareDefines(defines: DecalMapDefines, scene: Scene, mesh: AbstractMesh): void {\r\n        const decalMap = mesh.decalMap;\r\n\r\n        if (!this._isEnabled || !decalMap?.texture || !MaterialFlags.DecalMapEnabled || !scene.texturesEnabled) {\r\n            const isDirty = defines.DECAL;\r\n            if (isDirty) {\r\n                defines.markAsTexturesDirty();\r\n            }\r\n            defines.DECAL = false;\r\n        } else {\r\n            const isDirty = !defines.DECAL || defines.GAMMADECAL !== decalMap.texture.gammaSpace;\r\n            if (isDirty) {\r\n                defines.markAsTexturesDirty();\r\n            }\r\n            defines.DECAL = true;\r\n            defines.GAMMADECAL = decalMap.texture.gammaSpace;\r\n            defines.DECAL_SMOOTHALPHA = this._smoothAlpha;\r\n            MaterialHelper.PrepareDefinesForMergedUV(decalMap.texture, defines, \"DECAL\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Note that we override hardBindForSubMesh and not bindForSubMesh because the material can be shared by multiple meshes,\r\n     * in which case mustRebind could return false even though the decal map is different for each mesh: that's because the decal map\r\n     * is not part of the material but hosted by the decalMap of the mesh instead.\r\n     */\r\n    public hardBindForSubMesh(uniformBuffer: UniformBuffer, scene: Scene, _engine: Engine, subMesh: SubMesh): void {\r\n        const decalMap = subMesh.getMesh().decalMap;\r\n\r\n        if (!this._isEnabled || !decalMap?.texture || !MaterialFlags.DecalMapEnabled || !scene.texturesEnabled) {\r\n            return;\r\n        }\r\n\r\n        const isFrozen = this._material.isFrozen;\r\n        const texture = decalMap.texture;\r\n\r\n        if (!uniformBuffer.useUbo || !isFrozen || !uniformBuffer.isSync) {\r\n            uniformBuffer.updateFloat4(\"vDecalInfos\", texture.coordinatesIndex, 0, 0, 0);\r\n            MaterialHelper.BindTextureMatrix(texture, uniformBuffer, \"decal\");\r\n        }\r\n\r\n        uniformBuffer.setTexture(\"decalSampler\", texture);\r\n    }\r\n\r\n    public getClassName(): string {\r\n        return \"DecalMapConfiguration\";\r\n    }\r\n\r\n    public getSamplers(samplers: string[]): void {\r\n        samplers.push(\"decalSampler\");\r\n    }\r\n\r\n    public getUniforms(): { ubo?: Array<{ name: string; size: number; type: string }>; vertex?: string; fragment?: string } {\r\n        return {\r\n            ubo: [\r\n                { name: \"vDecalInfos\", size: 4, type: \"vec4\" },\r\n                { name: \"decalMatrix\", size: 16, type: \"mat4\" },\r\n            ],\r\n        };\r\n    }\r\n}\r\n\r\nRegisterClass(\"BABYLON.DecalMapConfiguration\", DecalMapConfiguration);\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}