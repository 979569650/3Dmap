{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { Logger } from \"../../Misc/logger.js\";\nimport { ArrayTools } from \"../../Misc/arrayTools.js\";\nimport { Vector3, Quaternion } from \"../../Maths/math.vector.js\";\nimport { AbstractMesh } from \"../../Meshes/abstractMesh.js\";\nimport { Mesh } from \"../../Meshes/mesh.js\";\nimport { PhysicsJoint } from \"./physicsJoint.js\";\nimport { Space } from \"../../Maths/math.axis.js\";\nMesh._PhysicsImpostorParser = function (scene, physicObject, jsonObject) {\n  return new PhysicsImpostor(physicObject, jsonObject.physicsImpostor, {\n    mass: jsonObject.physicsMass,\n    friction: jsonObject.physicsFriction,\n    restitution: jsonObject.physicsRestitution\n  }, scene);\n};\n/**\n * Represents a physics imposter\n * @see https://doc.babylonjs.com/features/featuresDeepDive/physics/usingPhysicsEngine\n */\nexport class PhysicsImpostor {\n  /**\n   * Specifies if the physics imposter is disposed\n   */\n  get isDisposed() {\n    return this._isDisposed;\n  }\n  /**\n   * Gets the mass of the physics imposter\n   */\n  get mass() {\n    return this._physicsEngine ? this._physicsEngine.getPhysicsPlugin().getBodyMass(this) : 0;\n  }\n  set mass(value) {\n    this.setMass(value);\n  }\n  /**\n   * Gets the coefficient of friction\n   */\n  get friction() {\n    return this._physicsEngine ? this._physicsEngine.getPhysicsPlugin().getBodyFriction(this) : 0;\n  }\n  /**\n   * Sets the coefficient of friction\n   */\n  set friction(value) {\n    if (!this._physicsEngine) {\n      return;\n    }\n    this._physicsEngine.getPhysicsPlugin().setBodyFriction(this, value);\n  }\n  /**\n   * Gets the coefficient of restitution\n   */\n  get restitution() {\n    return this._physicsEngine ? this._physicsEngine.getPhysicsPlugin().getBodyRestitution(this) : 0;\n  }\n  /**\n   * Sets the coefficient of restitution\n   */\n  set restitution(value) {\n    if (!this._physicsEngine) {\n      return;\n    }\n    this._physicsEngine.getPhysicsPlugin().setBodyRestitution(this, value);\n  }\n  /**\n   * Gets the pressure of a soft body; only supported by the AmmoJSPlugin\n   */\n  get pressure() {\n    if (!this._physicsEngine) {\n      return 0;\n    }\n    const plugin = this._physicsEngine.getPhysicsPlugin();\n    if (!plugin.setBodyPressure) {\n      return 0;\n    }\n    return plugin.getBodyPressure(this);\n  }\n  /**\n   * Sets the pressure of a soft body; only supported by the AmmoJSPlugin\n   */\n  set pressure(value) {\n    if (!this._physicsEngine) {\n      return;\n    }\n    const plugin = this._physicsEngine.getPhysicsPlugin();\n    if (!plugin.setBodyPressure) {\n      return;\n    }\n    plugin.setBodyPressure(this, value);\n  }\n  /**\n   * Gets the stiffness of a soft body; only supported by the AmmoJSPlugin\n   */\n  get stiffness() {\n    if (!this._physicsEngine) {\n      return 0;\n    }\n    const plugin = this._physicsEngine.getPhysicsPlugin();\n    if (!plugin.getBodyStiffness) {\n      return 0;\n    }\n    return plugin.getBodyStiffness(this);\n  }\n  /**\n   * Sets the stiffness of a soft body; only supported by the AmmoJSPlugin\n   */\n  set stiffness(value) {\n    if (!this._physicsEngine) {\n      return;\n    }\n    const plugin = this._physicsEngine.getPhysicsPlugin();\n    if (!plugin.setBodyStiffness) {\n      return;\n    }\n    plugin.setBodyStiffness(this, value);\n  }\n  /**\n   * Gets the velocityIterations of a soft body; only supported by the AmmoJSPlugin\n   */\n  get velocityIterations() {\n    if (!this._physicsEngine) {\n      return 0;\n    }\n    const plugin = this._physicsEngine.getPhysicsPlugin();\n    if (!plugin.getBodyVelocityIterations) {\n      return 0;\n    }\n    return plugin.getBodyVelocityIterations(this);\n  }\n  /**\n   * Sets the velocityIterations of a soft body; only supported by the AmmoJSPlugin\n   */\n  set velocityIterations(value) {\n    if (!this._physicsEngine) {\n      return;\n    }\n    const plugin = this._physicsEngine.getPhysicsPlugin();\n    if (!plugin.setBodyVelocityIterations) {\n      return;\n    }\n    plugin.setBodyVelocityIterations(this, value);\n  }\n  /**\n   * Gets the positionIterations of a soft body; only supported by the AmmoJSPlugin\n   */\n  get positionIterations() {\n    if (!this._physicsEngine) {\n      return 0;\n    }\n    const plugin = this._physicsEngine.getPhysicsPlugin();\n    if (!plugin.getBodyPositionIterations) {\n      return 0;\n    }\n    return plugin.getBodyPositionIterations(this);\n  }\n  /**\n   * Sets the positionIterations of a soft body; only supported by the AmmoJSPlugin\n   */\n  set positionIterations(value) {\n    if (!this._physicsEngine) {\n      return;\n    }\n    const plugin = this._physicsEngine.getPhysicsPlugin();\n    if (!plugin.setBodyPositionIterations) {\n      return;\n    }\n    plugin.setBodyPositionIterations(this, value);\n  }\n  /**\n   * Initializes the physics imposter\n   * @param object The physics-enabled object used as the physics imposter\n   * @param type The type of the physics imposter. Types are available as static members of this class.\n   * @param _options The options for the physics imposter\n   * @param _scene The Babylon scene\n   */\n  constructor(\n  /**\n   * The physics-enabled object used as the physics imposter\n   */\n  object,\n  /**\n   * The type of the physics imposter\n   */\n  type, _options = {\n    mass: 0\n  }, _scene) {\n    this.object = object;\n    this.type = type;\n    this._options = _options;\n    this._scene = _scene;\n    /** @internal */\n    this._pluginData = {};\n    this._bodyUpdateRequired = false;\n    this._onBeforePhysicsStepCallbacks = new Array();\n    this._onAfterPhysicsStepCallbacks = new Array();\n    /** @internal */\n    this._onPhysicsCollideCallbacks = [];\n    this._deltaPosition = Vector3.Zero();\n    this._isDisposed = false;\n    /**\n     * @internal\n     */\n    this.soft = false;\n    /**\n     * @internal\n     */\n    this.segments = 0;\n    //temp variables for parent rotation calculations\n    //private _mats: Array<Matrix> = [new Matrix(), new Matrix()];\n    this._tmpQuat = new Quaternion();\n    this._tmpQuat2 = new Quaternion();\n    /**\n     * this function is executed by the physics engine.\n     */\n    this.beforeStep = () => {\n      if (!this._physicsEngine) {\n        return;\n      }\n      this.object.translate(this._deltaPosition, -1);\n      this._deltaRotationConjugated && this.object.rotationQuaternion && this.object.rotationQuaternion.multiplyToRef(this._deltaRotationConjugated, this.object.rotationQuaternion);\n      this.object.computeWorldMatrix(false);\n      if (this.object.parent && this.object.rotationQuaternion) {\n        this.getParentsRotation();\n        this._tmpQuat.multiplyToRef(this.object.rotationQuaternion, this._tmpQuat);\n      } else {\n        this._tmpQuat.copyFrom(this.object.rotationQuaternion || new Quaternion());\n      }\n      if (!this._options.disableBidirectionalTransformation) {\n        this.object.rotationQuaternion && this._physicsEngine.getPhysicsPlugin().setPhysicsBodyTransformation(this, /*bInfo.boundingBox.centerWorld*/this.object.getAbsolutePosition(), this._tmpQuat);\n      }\n      this._onBeforePhysicsStepCallbacks.forEach(func => {\n        func(this);\n      });\n    };\n    /**\n     * this function is executed by the physics engine\n     */\n    this.afterStep = () => {\n      if (!this._physicsEngine) {\n        return;\n      }\n      this._onAfterPhysicsStepCallbacks.forEach(func => {\n        func(this);\n      });\n      this._physicsEngine.getPhysicsPlugin().setTransformationFromPhysicsBody(this);\n      // object has now its world rotation. needs to be converted to local.\n      if (this.object.parent && this.object.rotationQuaternion) {\n        this.getParentsRotation();\n        this._tmpQuat.conjugateInPlace();\n        this._tmpQuat.multiplyToRef(this.object.rotationQuaternion, this.object.rotationQuaternion);\n      }\n      // take the position set and make it the absolute position of this object.\n      this.object.setAbsolutePosition(this.object.position);\n      if (this._deltaRotation) {\n        this.object.rotationQuaternion && this.object.rotationQuaternion.multiplyToRef(this._deltaRotation, this.object.rotationQuaternion);\n        this._deltaPosition.applyRotationQuaternionToRef(this._deltaRotation, PhysicsImpostor._TmpVecs[0]);\n        this.object.translate(PhysicsImpostor._TmpVecs[0], 1);\n      } else {\n        this.object.translate(this._deltaPosition, 1);\n      }\n      this.object.computeWorldMatrix(true);\n    };\n    /**\n     * Legacy collision detection event support\n     */\n    this.onCollideEvent = null;\n    /**\n     *\n     * @param e\n     * @returns\n     */\n    this.onCollide = e => {\n      if (!this._onPhysicsCollideCallbacks.length && !this.onCollideEvent) {\n        return;\n      }\n      if (!this._physicsEngine) {\n        return;\n      }\n      const otherImpostor = this._physicsEngine.getImpostorWithPhysicsBody(e.body);\n      if (otherImpostor) {\n        // Legacy collision detection event support\n        if (this.onCollideEvent) {\n          this.onCollideEvent(this, otherImpostor);\n        }\n        this._onPhysicsCollideCallbacks.filter(obj => {\n          return obj.otherImpostors.indexOf(otherImpostor) !== -1;\n        }).forEach(obj => {\n          obj.callback(this, otherImpostor, e.point, e.distance, e.impulse, e.normal);\n        });\n      }\n    };\n    //sanity check!\n    if (!this.object) {\n      Logger.Error(\"No object was provided. A physics object is obligatory\");\n      return;\n    }\n    if (this.object.parent && _options.mass !== 0) {\n      Logger.Warn(\"A physics impostor has been created for an object which has a parent. Babylon physics currently works in local space so unexpected issues may occur.\");\n    }\n    // Legacy support for old syntax.\n    if (!this._scene && object.getScene) {\n      this._scene = object.getScene();\n    }\n    if (!this._scene) {\n      return;\n    }\n    if (this.type > 100) {\n      this.soft = true;\n    }\n    this._physicsEngine = this._scene.getPhysicsEngine();\n    if (!this._physicsEngine) {\n      Logger.Error(\"Physics not enabled. Please use scene.enablePhysics(...) before creating impostors.\");\n    } else {\n      //set the object's quaternion, if not set\n      if (!this.object.rotationQuaternion) {\n        if (this.object.rotation) {\n          this.object.rotationQuaternion = Quaternion.RotationYawPitchRoll(this.object.rotation.y, this.object.rotation.x, this.object.rotation.z);\n        } else {\n          this.object.rotationQuaternion = new Quaternion();\n        }\n      }\n      //default options params\n      this._options.mass = _options.mass === void 0 ? 0 : _options.mass;\n      this._options.friction = _options.friction === void 0 ? 0.2 : _options.friction;\n      this._options.restitution = _options.restitution === void 0 ? 0.2 : _options.restitution;\n      if (this.soft) {\n        //softbody mass must be above 0;\n        this._options.mass = this._options.mass > 0 ? this._options.mass : 1;\n        this._options.pressure = _options.pressure === void 0 ? 200 : _options.pressure;\n        this._options.stiffness = _options.stiffness === void 0 ? 1 : _options.stiffness;\n        this._options.velocityIterations = _options.velocityIterations === void 0 ? 20 : _options.velocityIterations;\n        this._options.positionIterations = _options.positionIterations === void 0 ? 20 : _options.positionIterations;\n        this._options.fixedPoints = _options.fixedPoints === void 0 ? 0 : _options.fixedPoints;\n        this._options.margin = _options.margin === void 0 ? 0 : _options.margin;\n        this._options.damping = _options.damping === void 0 ? 0 : _options.damping;\n        this._options.path = _options.path === void 0 ? null : _options.path;\n        this._options.shape = _options.shape === void 0 ? null : _options.shape;\n      }\n      this._joints = [];\n      //If the mesh has a parent, don't initialize the physicsBody. Instead wait for the parent to do that.\n      if (!this.object.parent || this._options.ignoreParent) {\n        this._init();\n      } else if (this.object.parent.physicsImpostor) {\n        Logger.Warn(\"You must affect impostors to children before affecting impostor to parent.\");\n      }\n    }\n  }\n  /**\n   * This function will completely initialize this impostor.\n   * It will create a new body - but only if this mesh has no parent.\n   * If it has, this impostor will not be used other than to define the impostor\n   * of the child mesh.\n   * @internal\n   */\n  _init() {\n    if (!this._physicsEngine) {\n      return;\n    }\n    this._physicsEngine.removeImpostor(this);\n    this.physicsBody = null;\n    this._parent = this._parent || this._getPhysicsParent();\n    if (!this._isDisposed && (!this.parent || this._options.ignoreParent)) {\n      this._physicsEngine.addImpostor(this);\n    }\n  }\n  _getPhysicsParent() {\n    if (this.object.parent instanceof AbstractMesh) {\n      const parentMesh = this.object.parent;\n      return parentMesh.physicsImpostor;\n    }\n    return null;\n  }\n  /**\n   * Should a new body be generated.\n   * @returns boolean specifying if body initialization is required\n   */\n  isBodyInitRequired() {\n    return this._bodyUpdateRequired || !this._physicsBody && (!this._parent || !!this._options.ignoreParent);\n  }\n  /**\n   * Sets the updated scaling\n   */\n  setScalingUpdated() {\n    this.forceUpdate();\n  }\n  /**\n   * Force a regeneration of this or the parent's impostor's body.\n   * Use with caution - This will remove all previously-instantiated joints.\n   */\n  forceUpdate() {\n    this._init();\n    if (this.parent && !this._options.ignoreParent) {\n      this.parent.forceUpdate();\n    }\n  }\n  /*public get mesh(): AbstractMesh {\n      return this._mesh;\n  }*/\n  /**\n   * Gets the body that holds this impostor. Either its own, or its parent.\n   */\n  get physicsBody() {\n    return this._parent && !this._options.ignoreParent ? this._parent.physicsBody : this._physicsBody;\n  }\n  /**\n   * Get the parent of the physics imposter\n   * @returns Physics imposter or null\n   */\n  get parent() {\n    return !this._options.ignoreParent && this._parent ? this._parent : null;\n  }\n  /**\n   * Sets the parent of the physics imposter\n   */\n  set parent(value) {\n    this._parent = value;\n  }\n  /**\n   * Set the physics body. Used mainly by the physics engine/plugin\n   */\n  set physicsBody(physicsBody) {\n    if (this._physicsBody && this._physicsEngine) {\n      this._physicsEngine.getPhysicsPlugin().removePhysicsBody(this);\n    }\n    this._physicsBody = physicsBody;\n    this.resetUpdateFlags();\n  }\n  /**\n   * Resets the update flags\n   */\n  resetUpdateFlags() {\n    this._bodyUpdateRequired = false;\n  }\n  /**\n   * Gets the object extents\n   * @returns the object extents\n   */\n  getObjectExtents() {\n    if (this.object.getBoundingInfo) {\n      const q = this.object.rotationQuaternion;\n      const scaling = this.object.scaling.clone();\n      //reset rotation\n      this.object.rotationQuaternion = PhysicsImpostor.IDENTITY_QUATERNION;\n      //calculate the world matrix with no rotation\n      const worldMatrix = this.object.computeWorldMatrix && this.object.computeWorldMatrix(true);\n      if (worldMatrix) {\n        worldMatrix.decompose(scaling, undefined, undefined);\n      }\n      const boundingInfo = this.object.getBoundingInfo();\n      // get the global scaling of the object\n      const size = boundingInfo.boundingBox.extendSize.scale(2).multiplyInPlace(scaling);\n      size.x = Math.abs(size.x);\n      size.y = Math.abs(size.y);\n      size.z = Math.abs(size.z);\n      //bring back the rotation\n      this.object.rotationQuaternion = q;\n      //calculate the world matrix with the new rotation\n      this.object.computeWorldMatrix && this.object.computeWorldMatrix(true);\n      return size;\n    } else {\n      return PhysicsImpostor.DEFAULT_OBJECT_SIZE;\n    }\n  }\n  /**\n   * Gets the object center\n   * @returns The object center\n   */\n  getObjectCenter() {\n    if (this.object.getBoundingInfo) {\n      const boundingInfo = this.object.getBoundingInfo();\n      return boundingInfo.boundingBox.centerWorld;\n    } else {\n      return this.object.position;\n    }\n  }\n  /**\n   * Get a specific parameter from the options parameters\n   * @param paramName The object parameter name\n   * @returns The object parameter\n   */\n  getParam(paramName) {\n    return this._options[paramName];\n  }\n  /**\n   * Sets a specific parameter in the options given to the physics plugin\n   * @param paramName The parameter name\n   * @param value The value of the parameter\n   */\n  setParam(paramName, value) {\n    this._options[paramName] = value;\n    this._bodyUpdateRequired = true;\n  }\n  /**\n   * Specifically change the body's mass. Won't recreate the physics body object\n   * @param mass The mass of the physics imposter\n   */\n  setMass(mass) {\n    if (this.getParam(\"mass\") !== mass) {\n      this.setParam(\"mass\", mass);\n    }\n    if (this._physicsEngine) {\n      this._physicsEngine.getPhysicsPlugin().setBodyMass(this, mass);\n    }\n  }\n  /**\n   * Gets the linear velocity\n   * @returns  linear velocity or null\n   */\n  getLinearVelocity() {\n    return this._physicsEngine ? this._physicsEngine.getPhysicsPlugin().getLinearVelocity(this) : Vector3.Zero();\n  }\n  /**\n   * Sets the linear velocity\n   * @param velocity  linear velocity or null\n   */\n  setLinearVelocity(velocity) {\n    if (this._physicsEngine) {\n      this._physicsEngine.getPhysicsPlugin().setLinearVelocity(this, velocity);\n    }\n  }\n  /**\n   * Gets the angular velocity\n   * @returns angular velocity or null\n   */\n  getAngularVelocity() {\n    return this._physicsEngine ? this._physicsEngine.getPhysicsPlugin().getAngularVelocity(this) : Vector3.Zero();\n  }\n  /**\n   * Sets the angular velocity\n   * @param velocity The velocity or null\n   */\n  setAngularVelocity(velocity) {\n    if (this._physicsEngine) {\n      this._physicsEngine.getPhysicsPlugin().setAngularVelocity(this, velocity);\n    }\n  }\n  /**\n   * Execute a function with the physics plugin native code\n   * Provide a function the will have two variables - the world object and the physics body object\n   * @param func The function to execute with the physics plugin native code\n   */\n  executeNativeFunction(func) {\n    if (this._physicsEngine) {\n      func(this._physicsEngine.getPhysicsPlugin().world, this.physicsBody);\n    }\n  }\n  /**\n   * Register a function that will be executed before the physics world is stepping forward\n   * @param func The function to execute before the physics world is stepped forward\n   */\n  registerBeforePhysicsStep(func) {\n    this._onBeforePhysicsStepCallbacks.push(func);\n  }\n  /**\n   * Unregister a function that will be executed before the physics world is stepping forward\n   * @param func The function to execute before the physics world is stepped forward\n   */\n  unregisterBeforePhysicsStep(func) {\n    const index = this._onBeforePhysicsStepCallbacks.indexOf(func);\n    if (index > -1) {\n      this._onBeforePhysicsStepCallbacks.splice(index, 1);\n    } else {\n      Logger.Warn(\"Function to remove was not found\");\n    }\n  }\n  /**\n   * Register a function that will be executed after the physics step\n   * @param func The function to execute after physics step\n   */\n  registerAfterPhysicsStep(func) {\n    this._onAfterPhysicsStepCallbacks.push(func);\n  }\n  /**\n   * Unregisters a function that will be executed after the physics step\n   * @param func The function to execute after physics step\n   */\n  unregisterAfterPhysicsStep(func) {\n    const index = this._onAfterPhysicsStepCallbacks.indexOf(func);\n    if (index > -1) {\n      this._onAfterPhysicsStepCallbacks.splice(index, 1);\n    } else {\n      Logger.Warn(\"Function to remove was not found\");\n    }\n  }\n  /**\n   * register a function that will be executed when this impostor collides against a different body\n   * @param collideAgainst Physics imposter, or array of physics imposters to collide against\n   * @param func Callback that is executed on collision\n   */\n  registerOnPhysicsCollide(collideAgainst, func) {\n    const collidedAgainstList = collideAgainst instanceof Array ? collideAgainst : [collideAgainst];\n    this._onPhysicsCollideCallbacks.push({\n      callback: func,\n      otherImpostors: collidedAgainstList\n    });\n  }\n  /**\n   * Unregisters the physics imposter's collision callback\n   * @param collideAgainst The physics object to collide against\n   * @param func Callback to execute on collision\n   */\n  unregisterOnPhysicsCollide(collideAgainst, func) {\n    const collidedAgainstList = collideAgainst instanceof Array ? collideAgainst : [collideAgainst];\n    let index = -1;\n    const found = this._onPhysicsCollideCallbacks.some((cbDef, idx) => {\n      if (cbDef.callback === func && cbDef.otherImpostors.length === collidedAgainstList.length) {\n        // chcek the arrays match\n        const sameList = cbDef.otherImpostors.every(impostor => {\n          return collidedAgainstList.indexOf(impostor) > -1;\n        });\n        if (sameList) {\n          index = idx;\n        }\n        return sameList;\n      }\n      return false;\n    });\n    if (found) {\n      this._onPhysicsCollideCallbacks.splice(index, 1);\n    } else {\n      Logger.Warn(\"Function to remove was not found\");\n    }\n  }\n  /**\n   * Get the parent rotation\n   * @returns The parent rotation\n   */\n  getParentsRotation() {\n    let parent = this.object.parent;\n    this._tmpQuat.copyFromFloats(0, 0, 0, 1);\n    while (parent) {\n      if (parent.rotationQuaternion) {\n        this._tmpQuat2.copyFrom(parent.rotationQuaternion);\n      } else {\n        Quaternion.RotationYawPitchRollToRef(parent.rotation.y, parent.rotation.x, parent.rotation.z, this._tmpQuat2);\n      }\n      this._tmpQuat.multiplyToRef(this._tmpQuat2, this._tmpQuat);\n      parent = parent.parent;\n    }\n    return this._tmpQuat;\n  }\n  /**\n   * Apply a force\n   * @param force The force to apply\n   * @param contactPoint The contact point for the force\n   * @returns The physics imposter\n   */\n  applyForce(force, contactPoint) {\n    if (this._physicsEngine) {\n      this._physicsEngine.getPhysicsPlugin().applyForce(this, force, contactPoint);\n    }\n    return this;\n  }\n  /**\n   * Apply an impulse\n   * @param force The impulse force\n   * @param contactPoint The contact point for the impulse force\n   * @returns The physics imposter\n   */\n  applyImpulse(force, contactPoint) {\n    if (this._physicsEngine) {\n      this._physicsEngine.getPhysicsPlugin().applyImpulse(this, force, contactPoint);\n    }\n    return this;\n  }\n  /**\n   * A help function to create a joint\n   * @param otherImpostor A physics imposter used to create a joint\n   * @param jointType The type of joint\n   * @param jointData The data for the joint\n   * @returns The physics imposter\n   */\n  createJoint(otherImpostor, jointType, jointData) {\n    const joint = new PhysicsJoint(jointType, jointData);\n    this.addJoint(otherImpostor, joint);\n    return this;\n  }\n  /**\n   * Add a joint to this impostor with a different impostor\n   * @param otherImpostor A physics imposter used to add a joint\n   * @param joint The joint to add\n   * @returns The physics imposter\n   */\n  addJoint(otherImpostor, joint) {\n    this._joints.push({\n      otherImpostor: otherImpostor,\n      joint: joint\n    });\n    if (this._physicsEngine) {\n      this._physicsEngine.addJoint(this, otherImpostor, joint);\n    }\n    return this;\n  }\n  /**\n   * Add an anchor to a cloth impostor\n   * @param otherImpostor rigid impostor to anchor to\n   * @param width ratio across width from 0 to 1\n   * @param height ratio up height from 0 to 1\n   * @param influence the elasticity between cloth impostor and anchor from 0, very stretchy to 1, little stretch\n   * @param noCollisionBetweenLinkedBodies when true collisions between cloth impostor and anchor are ignored; default false\n   * @returns impostor the soft imposter\n   */\n  addAnchor(otherImpostor, width, height, influence, noCollisionBetweenLinkedBodies) {\n    if (!this._physicsEngine) {\n      return this;\n    }\n    const plugin = this._physicsEngine.getPhysicsPlugin();\n    if (!plugin.appendAnchor) {\n      return this;\n    }\n    if (this._physicsEngine) {\n      plugin.appendAnchor(this, otherImpostor, width, height, influence, noCollisionBetweenLinkedBodies);\n    }\n    return this;\n  }\n  /**\n   * Add a hook to a rope impostor\n   * @param otherImpostor rigid impostor to anchor to\n   * @param length ratio across rope from 0 to 1\n   * @param influence the elasticity between rope impostor and anchor from 0, very stretchy to 1, little stretch\n   * @param noCollisionBetweenLinkedBodies when true collisions between soft impostor and anchor are ignored; default false\n   * @returns impostor the rope imposter\n   */\n  addHook(otherImpostor, length, influence, noCollisionBetweenLinkedBodies) {\n    if (!this._physicsEngine) {\n      return this;\n    }\n    const plugin = this._physicsEngine.getPhysicsPlugin();\n    if (!plugin.appendAnchor) {\n      return this;\n    }\n    if (this._physicsEngine) {\n      plugin.appendHook(this, otherImpostor, length, influence, noCollisionBetweenLinkedBodies);\n    }\n    return this;\n  }\n  /**\n   * Will keep this body still, in a sleep mode.\n   * @returns the physics imposter\n   */\n  sleep() {\n    if (this._physicsEngine) {\n      this._physicsEngine.getPhysicsPlugin().sleepBody(this);\n    }\n    return this;\n  }\n  /**\n   * Wake the body up.\n   * @returns The physics imposter\n   */\n  wakeUp() {\n    if (this._physicsEngine) {\n      this._physicsEngine.getPhysicsPlugin().wakeUpBody(this);\n    }\n    return this;\n  }\n  /**\n   * Clones the physics imposter\n   * @param newObject The physics imposter clones to this physics-enabled object\n   * @returns A nullable physics imposter\n   */\n  clone(newObject) {\n    if (!newObject) {\n      return null;\n    }\n    return new PhysicsImpostor(newObject, this.type, this._options, this._scene);\n  }\n  /**\n   * Disposes the physics imposter\n   */\n  dispose( /*disposeChildren: boolean = true*/\n  ) {\n    //no dispose if no physics engine is available.\n    if (!this._physicsEngine) {\n      return;\n    }\n    this._joints.forEach(j => {\n      if (this._physicsEngine) {\n        this._physicsEngine.removeJoint(this, j.otherImpostor, j.joint);\n      }\n    });\n    //dispose the physics body\n    this._physicsEngine.removeImpostor(this);\n    if (this.parent) {\n      this.parent.forceUpdate();\n    } else {\n      /*this._object.getChildMeshes().forEach(function(mesh) {\n          if (mesh.physicsImpostor) {\n              if (disposeChildren) {\n                  mesh.physicsImpostor.dispose();\n                  mesh.physicsImpostor = null;\n              }\n          }\n      })*/\n    }\n    this._isDisposed = true;\n  }\n  /**\n   * Sets the delta position\n   * @param position The delta position amount\n   */\n  setDeltaPosition(position) {\n    this._deltaPosition.copyFrom(position);\n  }\n  /**\n   * Sets the delta rotation\n   * @param rotation The delta rotation amount\n   */\n  setDeltaRotation(rotation) {\n    if (!this._deltaRotation) {\n      this._deltaRotation = new Quaternion();\n    }\n    this._deltaRotation.copyFrom(rotation);\n    this._deltaRotationConjugated = this._deltaRotation.conjugate();\n  }\n  /**\n   * Gets the box size of the physics imposter and stores the result in the input parameter\n   * @param result Stores the box size\n   * @returns The physics imposter\n   */\n  getBoxSizeToRef(result) {\n    if (this._physicsEngine) {\n      this._physicsEngine.getPhysicsPlugin().getBoxSizeToRef(this, result);\n    }\n    return this;\n  }\n  /**\n   * Gets the radius of the physics imposter\n   * @returns Radius of the physics imposter\n   */\n  getRadius() {\n    return this._physicsEngine ? this._physicsEngine.getPhysicsPlugin().getRadius(this) : 0;\n  }\n  /**\n   * Sync a bone with this impostor\n   * @param bone The bone to sync to the impostor.\n   * @param boneMesh The mesh that the bone is influencing.\n   * @param jointPivot The pivot of the joint / bone in local space.\n   * @param distToJoint Optional distance from the impostor to the joint.\n   * @param adjustRotation Optional quaternion for adjusting the local rotation of the bone.\n   */\n  syncBoneWithImpostor(bone, boneMesh, jointPivot, distToJoint, adjustRotation) {\n    const tempVec = PhysicsImpostor._TmpVecs[0];\n    const mesh = this.object;\n    if (mesh.rotationQuaternion) {\n      if (adjustRotation) {\n        const tempQuat = PhysicsImpostor._TmpQuat;\n        mesh.rotationQuaternion.multiplyToRef(adjustRotation, tempQuat);\n        bone.setRotationQuaternion(tempQuat, Space.WORLD, boneMesh);\n      } else {\n        bone.setRotationQuaternion(mesh.rotationQuaternion, Space.WORLD, boneMesh);\n      }\n    }\n    tempVec.x = 0;\n    tempVec.y = 0;\n    tempVec.z = 0;\n    if (jointPivot) {\n      tempVec.x = jointPivot.x;\n      tempVec.y = jointPivot.y;\n      tempVec.z = jointPivot.z;\n      bone.getDirectionToRef(tempVec, boneMesh, tempVec);\n      if (distToJoint === undefined || distToJoint === null) {\n        distToJoint = jointPivot.length();\n      }\n      tempVec.x *= distToJoint;\n      tempVec.y *= distToJoint;\n      tempVec.z *= distToJoint;\n    }\n    if (bone.getParent()) {\n      tempVec.addInPlace(mesh.getAbsolutePosition());\n      bone.setAbsolutePosition(tempVec, boneMesh);\n    } else {\n      boneMesh.setAbsolutePosition(mesh.getAbsolutePosition());\n      boneMesh.position.x -= tempVec.x;\n      boneMesh.position.y -= tempVec.y;\n      boneMesh.position.z -= tempVec.z;\n    }\n  }\n  /**\n   * Sync impostor to a bone\n   * @param bone The bone that the impostor will be synced to.\n   * @param boneMesh The mesh that the bone is influencing.\n   * @param jointPivot The pivot of the joint / bone in local space.\n   * @param distToJoint Optional distance from the impostor to the joint.\n   * @param adjustRotation Optional quaternion for adjusting the local rotation of the bone.\n   * @param boneAxis Optional vector3 axis the bone is aligned with\n   */\n  syncImpostorWithBone(bone, boneMesh, jointPivot, distToJoint, adjustRotation, boneAxis) {\n    const mesh = this.object;\n    if (mesh.rotationQuaternion) {\n      if (adjustRotation) {\n        const tempQuat = PhysicsImpostor._TmpQuat;\n        bone.getRotationQuaternionToRef(Space.WORLD, boneMesh, tempQuat);\n        tempQuat.multiplyToRef(adjustRotation, mesh.rotationQuaternion);\n      } else {\n        bone.getRotationQuaternionToRef(Space.WORLD, boneMesh, mesh.rotationQuaternion);\n      }\n    }\n    const pos = PhysicsImpostor._TmpVecs[0];\n    const boneDir = PhysicsImpostor._TmpVecs[1];\n    if (!boneAxis) {\n      boneAxis = PhysicsImpostor._TmpVecs[2];\n      boneAxis.x = 0;\n      boneAxis.y = 1;\n      boneAxis.z = 0;\n    }\n    bone.getDirectionToRef(boneAxis, boneMesh, boneDir);\n    bone.getAbsolutePositionToRef(boneMesh, pos);\n    if ((distToJoint === undefined || distToJoint === null) && jointPivot) {\n      distToJoint = jointPivot.length();\n    }\n    if (distToJoint !== undefined && distToJoint !== null) {\n      pos.x += boneDir.x * distToJoint;\n      pos.y += boneDir.y * distToJoint;\n      pos.z += boneDir.z * distToJoint;\n    }\n    mesh.setAbsolutePosition(pos);\n  }\n}\n/**\n * The default object size of the imposter\n */\nPhysicsImpostor.DEFAULT_OBJECT_SIZE = new Vector3(1, 1, 1);\n/**\n * The identity quaternion of the imposter\n */\nPhysicsImpostor.IDENTITY_QUATERNION = Quaternion.Identity();\nPhysicsImpostor._TmpVecs = ArrayTools.BuildArray(3, Vector3.Zero);\nPhysicsImpostor._TmpQuat = Quaternion.Identity();\n//Impostor types\n/**\n * No-Imposter type\n */\nPhysicsImpostor.NoImpostor = 0;\n/**\n * Sphere-Imposter type\n */\nPhysicsImpostor.SphereImpostor = 1;\n/**\n * Box-Imposter type\n */\nPhysicsImpostor.BoxImpostor = 2;\n/**\n * Plane-Imposter type\n */\nPhysicsImpostor.PlaneImpostor = 3;\n/**\n * Mesh-imposter type (Only available to objects with vertices data)\n */\nPhysicsImpostor.MeshImpostor = 4;\n/**\n * Capsule-Impostor type (Ammo.js plugin only)\n */\nPhysicsImpostor.CapsuleImpostor = 6;\n/**\n * Cylinder-Imposter type\n */\nPhysicsImpostor.CylinderImpostor = 7;\n/**\n * Particle-Imposter type\n */\nPhysicsImpostor.ParticleImpostor = 8;\n/**\n * Heightmap-Imposter type\n */\nPhysicsImpostor.HeightmapImpostor = 9;\n/**\n * ConvexHull-Impostor type (Ammo.js plugin only)\n */\nPhysicsImpostor.ConvexHullImpostor = 10;\n/**\n * Custom-Imposter type (Ammo.js plugin only)\n */\nPhysicsImpostor.CustomImpostor = 100;\n/**\n * Rope-Imposter type\n */\nPhysicsImpostor.RopeImpostor = 101;\n/**\n * Cloth-Imposter type\n */\nPhysicsImpostor.ClothImpostor = 102;\n/**\n * Softbody-Imposter type\n */\nPhysicsImpostor.SoftbodyImpostor = 103;","map":{"version":3,"names":["Logger","ArrayTools","Vector3","Quaternion","AbstractMesh","Mesh","PhysicsJoint","Space","_PhysicsImpostorParser","scene","physicObject","jsonObject","PhysicsImpostor","physicsImpostor","mass","physicsMass","friction","physicsFriction","restitution","physicsRestitution","isDisposed","_isDisposed","_physicsEngine","getPhysicsPlugin","getBodyMass","value","setMass","getBodyFriction","setBodyFriction","getBodyRestitution","setBodyRestitution","pressure","plugin","setBodyPressure","getBodyPressure","stiffness","getBodyStiffness","setBodyStiffness","velocityIterations","getBodyVelocityIterations","setBodyVelocityIterations","positionIterations","getBodyPositionIterations","setBodyPositionIterations","constructor","object","type","_options","_scene","_pluginData","_bodyUpdateRequired","_onBeforePhysicsStepCallbacks","Array","_onAfterPhysicsStepCallbacks","_onPhysicsCollideCallbacks","_deltaPosition","Zero","soft","segments","_tmpQuat","_tmpQuat2","beforeStep","translate","_deltaRotationConjugated","rotationQuaternion","multiplyToRef","computeWorldMatrix","parent","getParentsRotation","copyFrom","disableBidirectionalTransformation","setPhysicsBodyTransformation","getAbsolutePosition","forEach","func","afterStep","setTransformationFromPhysicsBody","conjugateInPlace","setAbsolutePosition","position","_deltaRotation","applyRotationQuaternionToRef","_TmpVecs","onCollideEvent","onCollide","e","length","otherImpostor","getImpostorWithPhysicsBody","body","filter","obj","otherImpostors","indexOf","callback","point","distance","impulse","normal","Error","Warn","getScene","getPhysicsEngine","rotation","RotationYawPitchRoll","y","x","z","fixedPoints","margin","damping","path","shape","_joints","ignoreParent","_init","removeImpostor","physicsBody","_parent","_getPhysicsParent","addImpostor","parentMesh","isBodyInitRequired","_physicsBody","setScalingUpdated","forceUpdate","removePhysicsBody","resetUpdateFlags","getObjectExtents","getBoundingInfo","q","scaling","clone","IDENTITY_QUATERNION","worldMatrix","decompose","undefined","boundingInfo","size","boundingBox","extendSize","scale","multiplyInPlace","Math","abs","DEFAULT_OBJECT_SIZE","getObjectCenter","centerWorld","getParam","paramName","setParam","setBodyMass","getLinearVelocity","setLinearVelocity","velocity","getAngularVelocity","setAngularVelocity","executeNativeFunction","world","registerBeforePhysicsStep","push","unregisterBeforePhysicsStep","index","splice","registerAfterPhysicsStep","unregisterAfterPhysicsStep","registerOnPhysicsCollide","collideAgainst","collidedAgainstList","unregisterOnPhysicsCollide","found","some","cbDef","idx","sameList","every","impostor","copyFromFloats","RotationYawPitchRollToRef","applyForce","force","contactPoint","applyImpulse","createJoint","jointType","jointData","joint","addJoint","addAnchor","width","height","influence","noCollisionBetweenLinkedBodies","appendAnchor","addHook","appendHook","sleep","sleepBody","wakeUp","wakeUpBody","newObject","dispose","j","removeJoint","setDeltaPosition","setDeltaRotation","conjugate","getBoxSizeToRef","result","getRadius","syncBoneWithImpostor","bone","boneMesh","jointPivot","distToJoint","adjustRotation","tempVec","mesh","tempQuat","_TmpQuat","setRotationQuaternion","WORLD","getDirectionToRef","getParent","addInPlace","syncImpostorWithBone","boneAxis","getRotationQuaternionToRef","pos","boneDir","getAbsolutePositionToRef","Identity","BuildArray","NoImpostor","SphereImpostor","BoxImpostor","PlaneImpostor","MeshImpostor","CapsuleImpostor","CylinderImpostor","ParticleImpostor","HeightmapImpostor","ConvexHullImpostor","CustomImpostor","RopeImpostor","ClothImpostor","SoftbodyImpostor"],"sources":["../../../../../dev/core/src/Physics/v1/physicsImpostor.ts"],"sourcesContent":["import type { Nullable, IndicesArray } from \"../../types\";\r\nimport { Logger } from \"../../Misc/logger\";\r\nimport { ArrayTools } from \"../../Misc/arrayTools\";\r\nimport type { Matrix } from \"../../Maths/math.vector\";\r\nimport { Vector3, Quaternion } from \"../../Maths/math.vector\";\r\nimport type { TransformNode } from \"../../Meshes/transformNode\";\r\nimport { AbstractMesh } from \"../../Meshes/abstractMesh\";\r\nimport { Mesh } from \"../../Meshes/mesh\";\r\nimport type { Scene } from \"../../scene\";\r\nimport type { Bone } from \"../../Bones/bone\";\r\nimport type { BoundingInfo } from \"../../Culling/boundingInfo\";\r\nimport type { PhysicsEngine as PhysicsEngineV1 } from \"./physicsEngine\";\r\n\r\nimport type { PhysicsJointData } from \"./physicsJoint\";\r\nimport { PhysicsJoint } from \"./physicsJoint\";\r\nimport { Space } from \"../../Maths/math.axis\";\r\n\r\n/**\r\n * The interface for the physics imposter parameters\r\n * @see https://doc.babylonjs.com/features/featuresDeepDive/physics/usingPhysicsEngine\r\n */\r\nexport interface PhysicsImpostorParameters {\r\n    /**\r\n     * The mass of the physics imposter\r\n     */\r\n    mass: number;\r\n    /**\r\n     * The friction of the physics imposter\r\n     */\r\n    friction?: number;\r\n    /**\r\n     * The coefficient of restitution of the physics imposter\r\n     */\r\n    restitution?: number;\r\n    /**\r\n     * The native options of the physics imposter\r\n     */\r\n    nativeOptions?: any;\r\n    /**\r\n     * Specifies if the parent should be ignored\r\n     */\r\n    ignoreParent?: boolean;\r\n    /**\r\n     * Specifies if bi-directional transformations should be disabled\r\n     */\r\n    disableBidirectionalTransformation?: boolean;\r\n    /**\r\n     * The pressure inside the physics imposter, soft object only\r\n     */\r\n    pressure?: number;\r\n    /**\r\n     * The stiffness the physics imposter, soft object only\r\n     */\r\n    stiffness?: number;\r\n    /**\r\n     * The number of iterations used in maintaining consistent vertex velocities, soft object only\r\n     */\r\n    velocityIterations?: number;\r\n    /**\r\n     * The number of iterations used in maintaining consistent vertex positions, soft object only\r\n     */\r\n    positionIterations?: number;\r\n    /**\r\n     * The number used to fix points on a cloth (0, 1, 2, 4, 8) or rope (0, 1, 2) only\r\n     * 0 None, 1, back left or top, 2, back right or bottom, 4, front left, 8, front right\r\n     * Add to fix multiple points\r\n     */\r\n    fixedPoints?: number;\r\n    /**\r\n     * The collision margin around a soft object\r\n     */\r\n    margin?: number;\r\n    /**\r\n     * The collision margin around a soft object\r\n     */\r\n    damping?: number;\r\n    /**\r\n     * The path for a rope based on an extrusion\r\n     */\r\n    path?: any;\r\n    /**\r\n     * The shape of an extrusion used for a rope based on an extrusion\r\n     */\r\n    shape?: any;\r\n}\r\n\r\n/**\r\n * Interface for a physics-enabled object\r\n * @see https://doc.babylonjs.com/features/featuresDeepDive/physics/usingPhysicsEngine\r\n */\r\nexport interface IPhysicsEnabledObject {\r\n    /**\r\n     * The position of the physics-enabled object\r\n     */\r\n    position: Vector3;\r\n    /**\r\n     * The rotation of the physics-enabled object\r\n     */\r\n    rotationQuaternion: Nullable<Quaternion>;\r\n    /**\r\n     * The scale of the physics-enabled object\r\n     */\r\n    scaling: Vector3;\r\n    /**\r\n     * The rotation of the physics-enabled object\r\n     */\r\n    rotation?: Vector3;\r\n    /**\r\n     * The parent of the physics-enabled object\r\n     */\r\n    parent?: any;\r\n    /**\r\n     * The bounding info of the physics-enabled object\r\n     * @returns The bounding info of the physics-enabled object\r\n     */\r\n    getBoundingInfo(): BoundingInfo;\r\n    /**\r\n     * Computes the world matrix\r\n     * @param force Specifies if the world matrix should be computed by force\r\n     * @returns A world matrix\r\n     */\r\n    computeWorldMatrix(force: boolean): Matrix;\r\n    /**\r\n     * Gets the world matrix\r\n     * @returns A world matrix\r\n     */\r\n    getWorldMatrix?(): Matrix;\r\n    /**\r\n     * Gets the child meshes\r\n     * @param directDescendantsOnly Specifies if only direct-descendants should be obtained\r\n     * @returns An array of abstract meshes\r\n     */\r\n    getChildMeshes?(directDescendantsOnly?: boolean): Array<AbstractMesh>;\r\n    /**\r\n     * Gets the vertex data\r\n     * @param kind The type of vertex data\r\n     * @returns A nullable array of numbers, or a float32 array\r\n     */\r\n    getVerticesData(kind: string): Nullable<Array<number> | Float32Array>;\r\n    /**\r\n     * Gets the indices from the mesh\r\n     * @returns A nullable array of index arrays\r\n     */\r\n    getIndices?(): Nullable<IndicesArray>;\r\n    /**\r\n     * Gets the scene from the mesh\r\n     * @returns the indices array or null\r\n     */\r\n    getScene?(): Scene;\r\n    /**\r\n     * Gets the absolute position from the mesh\r\n     * @returns the absolute position\r\n     */\r\n    getAbsolutePosition(): Vector3;\r\n    /**\r\n     * Gets the absolute pivot point from the mesh\r\n     * @returns the absolute pivot point\r\n     */\r\n    getAbsolutePivotPoint(): Vector3;\r\n    /**\r\n     * Rotates the mesh\r\n     * @param axis The axis of rotation\r\n     * @param amount The amount of rotation\r\n     * @param space The space of the rotation\r\n     * @returns The rotation transform node\r\n     */\r\n    rotate(axis: Vector3, amount: number, space?: Space): TransformNode;\r\n    /**\r\n     * Translates the mesh\r\n     * @param axis The axis of translation\r\n     * @param distance The distance of translation\r\n     * @param space The space of the translation\r\n     * @returns The transform node\r\n     */\r\n    translate(axis: Vector3, distance: number, space?: Space): TransformNode;\r\n    /**\r\n     * Sets the absolute position of the mesh\r\n     * @param absolutePosition The absolute position of the mesh\r\n     * @returns The transform node\r\n     */\r\n    setAbsolutePosition(absolutePosition: Vector3): TransformNode;\r\n    /**\r\n     * Gets the class name of the mesh\r\n     * @returns The class name\r\n     */\r\n    getClassName(): string;\r\n}\r\n\r\nMesh._PhysicsImpostorParser = function (scene: Scene, physicObject: IPhysicsEnabledObject, jsonObject: any): PhysicsImpostor {\r\n    return new PhysicsImpostor(\r\n        physicObject,\r\n        jsonObject.physicsImpostor,\r\n        {\r\n            mass: jsonObject.physicsMass,\r\n            friction: jsonObject.physicsFriction,\r\n            restitution: jsonObject.physicsRestitution,\r\n        },\r\n        scene\r\n    );\r\n};\r\n\r\n/**\r\n * Represents a physics imposter\r\n * @see https://doc.babylonjs.com/features/featuresDeepDive/physics/usingPhysicsEngine\r\n */\r\nexport class PhysicsImpostor {\r\n    /**\r\n     * The default object size of the imposter\r\n     */\r\n    public static DEFAULT_OBJECT_SIZE: Vector3 = new Vector3(1, 1, 1);\r\n\r\n    /**\r\n     * The identity quaternion of the imposter\r\n     */\r\n    public static IDENTITY_QUATERNION = Quaternion.Identity();\r\n\r\n    /** @internal */\r\n    public _pluginData: any = {};\r\n\r\n    private _physicsEngine: Nullable<PhysicsEngineV1>;\r\n    //The native cannon/oimo/energy physics body object.\r\n    private _physicsBody: any;\r\n    private _bodyUpdateRequired: boolean = false;\r\n\r\n    private _onBeforePhysicsStepCallbacks = new Array<(impostor: PhysicsImpostor) => void>();\r\n    private _onAfterPhysicsStepCallbacks = new Array<(impostor: PhysicsImpostor) => void>();\r\n    /** @internal */\r\n    public _onPhysicsCollideCallbacks: Array<{\r\n        callback: (collider: PhysicsImpostor, collidedAgainst: PhysicsImpostor, point: Nullable<Vector3>, distance: number, impulse: number, normal: Nullable<Vector3>) => void;\r\n        otherImpostors: Array<PhysicsImpostor>;\r\n    }> = [];\r\n\r\n    private _deltaPosition: Vector3 = Vector3.Zero();\r\n    private _deltaRotation: Quaternion;\r\n    private _deltaRotationConjugated: Quaternion;\r\n\r\n    /** @internal */\r\n    public _isFromLine: boolean;\r\n\r\n    //If set, this is this impostor's parent\r\n    private _parent: Nullable<PhysicsImpostor>;\r\n\r\n    private _isDisposed = false;\r\n\r\n    private static _TmpVecs: Vector3[] = ArrayTools.BuildArray(3, Vector3.Zero);\r\n    private static _TmpQuat: Quaternion = Quaternion.Identity();\r\n\r\n    /**\r\n     * Specifies if the physics imposter is disposed\r\n     */\r\n    get isDisposed(): boolean {\r\n        return this._isDisposed;\r\n    }\r\n\r\n    /**\r\n     * Gets the mass of the physics imposter\r\n     */\r\n    get mass(): number {\r\n        return this._physicsEngine ? this._physicsEngine.getPhysicsPlugin().getBodyMass(this) : 0;\r\n    }\r\n\r\n    set mass(value: number) {\r\n        this.setMass(value);\r\n    }\r\n\r\n    /**\r\n     * Gets the coefficient of friction\r\n     */\r\n    get friction(): number {\r\n        return this._physicsEngine ? this._physicsEngine.getPhysicsPlugin().getBodyFriction(this) : 0;\r\n    }\r\n\r\n    /**\r\n     * Sets the coefficient of friction\r\n     */\r\n    set friction(value: number) {\r\n        if (!this._physicsEngine) {\r\n            return;\r\n        }\r\n        this._physicsEngine.getPhysicsPlugin().setBodyFriction(this, value);\r\n    }\r\n\r\n    /**\r\n     * Gets the coefficient of restitution\r\n     */\r\n    get restitution(): number {\r\n        return this._physicsEngine ? this._physicsEngine.getPhysicsPlugin().getBodyRestitution(this) : 0;\r\n    }\r\n\r\n    /**\r\n     * Sets the coefficient of restitution\r\n     */\r\n    set restitution(value: number) {\r\n        if (!this._physicsEngine) {\r\n            return;\r\n        }\r\n        this._physicsEngine.getPhysicsPlugin().setBodyRestitution(this, value);\r\n    }\r\n\r\n    /**\r\n     * Gets the pressure of a soft body; only supported by the AmmoJSPlugin\r\n     */\r\n    get pressure(): number {\r\n        if (!this._physicsEngine) {\r\n            return 0;\r\n        }\r\n        const plugin = this._physicsEngine.getPhysicsPlugin();\r\n        if (!plugin.setBodyPressure) {\r\n            return 0;\r\n        }\r\n        return plugin.getBodyPressure!(this);\r\n    }\r\n\r\n    /**\r\n     * Sets the pressure of a soft body; only supported by the AmmoJSPlugin\r\n     */\r\n    set pressure(value: number) {\r\n        if (!this._physicsEngine) {\r\n            return;\r\n        }\r\n        const plugin = this._physicsEngine.getPhysicsPlugin();\r\n        if (!plugin.setBodyPressure) {\r\n            return;\r\n        }\r\n        plugin.setBodyPressure!(this, value);\r\n    }\r\n\r\n    /**\r\n     * Gets the stiffness of a soft body; only supported by the AmmoJSPlugin\r\n     */\r\n    get stiffness(): number {\r\n        if (!this._physicsEngine) {\r\n            return 0;\r\n        }\r\n        const plugin = this._physicsEngine.getPhysicsPlugin();\r\n        if (!plugin.getBodyStiffness) {\r\n            return 0;\r\n        }\r\n        return plugin.getBodyStiffness!(this);\r\n    }\r\n\r\n    /**\r\n     * Sets the stiffness of a soft body; only supported by the AmmoJSPlugin\r\n     */\r\n    set stiffness(value: number) {\r\n        if (!this._physicsEngine) {\r\n            return;\r\n        }\r\n        const plugin = this._physicsEngine.getPhysicsPlugin();\r\n        if (!plugin.setBodyStiffness) {\r\n            return;\r\n        }\r\n        plugin.setBodyStiffness!(this, value);\r\n    }\r\n\r\n    /**\r\n     * Gets the velocityIterations of a soft body; only supported by the AmmoJSPlugin\r\n     */\r\n    get velocityIterations(): number {\r\n        if (!this._physicsEngine) {\r\n            return 0;\r\n        }\r\n        const plugin = this._physicsEngine.getPhysicsPlugin();\r\n        if (!plugin.getBodyVelocityIterations) {\r\n            return 0;\r\n        }\r\n        return plugin.getBodyVelocityIterations!(this);\r\n    }\r\n\r\n    /**\r\n     * Sets the velocityIterations of a soft body; only supported by the AmmoJSPlugin\r\n     */\r\n    set velocityIterations(value: number) {\r\n        if (!this._physicsEngine) {\r\n            return;\r\n        }\r\n        const plugin = this._physicsEngine.getPhysicsPlugin();\r\n        if (!plugin.setBodyVelocityIterations) {\r\n            return;\r\n        }\r\n        plugin.setBodyVelocityIterations!(this, value);\r\n    }\r\n\r\n    /**\r\n     * Gets the positionIterations of a soft body; only supported by the AmmoJSPlugin\r\n     */\r\n    get positionIterations(): number {\r\n        if (!this._physicsEngine) {\r\n            return 0;\r\n        }\r\n        const plugin = this._physicsEngine.getPhysicsPlugin();\r\n        if (!plugin.getBodyPositionIterations) {\r\n            return 0;\r\n        }\r\n        return plugin.getBodyPositionIterations!(this);\r\n    }\r\n\r\n    /**\r\n     * Sets the positionIterations of a soft body; only supported by the AmmoJSPlugin\r\n     */\r\n    set positionIterations(value: number) {\r\n        if (!this._physicsEngine) {\r\n            return;\r\n        }\r\n        const plugin = this._physicsEngine.getPhysicsPlugin();\r\n        if (!plugin.setBodyPositionIterations) {\r\n            return;\r\n        }\r\n        plugin.setBodyPositionIterations!(this, value);\r\n    }\r\n\r\n    /**\r\n     * The unique id of the physics imposter\r\n     * set by the physics engine when adding this impostor to the array\r\n     */\r\n    public uniqueId: number;\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public soft: boolean = false;\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public segments: number = 0;\r\n\r\n    private _joints: Array<{\r\n        joint: PhysicsJoint;\r\n        otherImpostor: PhysicsImpostor;\r\n    }>;\r\n\r\n    /**\r\n     * Initializes the physics imposter\r\n     * @param object The physics-enabled object used as the physics imposter\r\n     * @param type The type of the physics imposter. Types are available as static members of this class.\r\n     * @param _options The options for the physics imposter\r\n     * @param _scene The Babylon scene\r\n     */\r\n    constructor(\r\n        /**\r\n         * The physics-enabled object used as the physics imposter\r\n         */\r\n        public object: IPhysicsEnabledObject,\r\n        /**\r\n         * The type of the physics imposter\r\n         */\r\n        public type: number,\r\n        private _options: PhysicsImpostorParameters = { mass: 0 },\r\n        private _scene?: Scene\r\n    ) {\r\n        //sanity check!\r\n        if (!this.object) {\r\n            Logger.Error(\"No object was provided. A physics object is obligatory\");\r\n            return;\r\n        }\r\n        if (this.object.parent && _options.mass !== 0) {\r\n            Logger.Warn(\"A physics impostor has been created for an object which has a parent. Babylon physics currently works in local space so unexpected issues may occur.\");\r\n        }\r\n\r\n        // Legacy support for old syntax.\r\n        if (!this._scene && object.getScene) {\r\n            this._scene = object.getScene();\r\n        }\r\n\r\n        if (!this._scene) {\r\n            return;\r\n        }\r\n\r\n        if (this.type > 100) {\r\n            this.soft = true;\r\n        }\r\n\r\n        this._physicsEngine = this._scene.getPhysicsEngine() as any;\r\n        if (!this._physicsEngine) {\r\n            Logger.Error(\"Physics not enabled. Please use scene.enablePhysics(...) before creating impostors.\");\r\n        } else {\r\n            //set the object's quaternion, if not set\r\n            if (!this.object.rotationQuaternion) {\r\n                if (this.object.rotation) {\r\n                    this.object.rotationQuaternion = Quaternion.RotationYawPitchRoll(this.object.rotation.y, this.object.rotation.x, this.object.rotation.z);\r\n                } else {\r\n                    this.object.rotationQuaternion = new Quaternion();\r\n                }\r\n            }\r\n            //default options params\r\n            this._options.mass = _options.mass === void 0 ? 0 : _options.mass;\r\n            this._options.friction = _options.friction === void 0 ? 0.2 : _options.friction;\r\n            this._options.restitution = _options.restitution === void 0 ? 0.2 : _options.restitution;\r\n            if (this.soft) {\r\n                //softbody mass must be above 0;\r\n                this._options.mass = this._options.mass > 0 ? this._options.mass : 1;\r\n                this._options.pressure = _options.pressure === void 0 ? 200 : _options.pressure;\r\n                this._options.stiffness = _options.stiffness === void 0 ? 1 : _options.stiffness;\r\n                this._options.velocityIterations = _options.velocityIterations === void 0 ? 20 : _options.velocityIterations;\r\n                this._options.positionIterations = _options.positionIterations === void 0 ? 20 : _options.positionIterations;\r\n                this._options.fixedPoints = _options.fixedPoints === void 0 ? 0 : _options.fixedPoints;\r\n                this._options.margin = _options.margin === void 0 ? 0 : _options.margin;\r\n                this._options.damping = _options.damping === void 0 ? 0 : _options.damping;\r\n                this._options.path = _options.path === void 0 ? null : _options.path;\r\n                this._options.shape = _options.shape === void 0 ? null : _options.shape;\r\n            }\r\n            this._joints = [];\r\n            //If the mesh has a parent, don't initialize the physicsBody. Instead wait for the parent to do that.\r\n            if (!this.object.parent || this._options.ignoreParent) {\r\n                this._init();\r\n            } else if (this.object.parent.physicsImpostor) {\r\n                Logger.Warn(\"You must affect impostors to children before affecting impostor to parent.\");\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * This function will completely initialize this impostor.\r\n     * It will create a new body - but only if this mesh has no parent.\r\n     * If it has, this impostor will not be used other than to define the impostor\r\n     * of the child mesh.\r\n     * @internal\r\n     */\r\n    public _init() {\r\n        if (!this._physicsEngine) {\r\n            return;\r\n        }\r\n\r\n        this._physicsEngine.removeImpostor(this);\r\n        this.physicsBody = null;\r\n        this._parent = this._parent || this._getPhysicsParent();\r\n        if (!this._isDisposed && (!this.parent || this._options.ignoreParent)) {\r\n            this._physicsEngine.addImpostor(this);\r\n        }\r\n    }\r\n\r\n    private _getPhysicsParent(): Nullable<PhysicsImpostor> {\r\n        if (this.object.parent instanceof AbstractMesh) {\r\n            const parentMesh: AbstractMesh = <AbstractMesh>this.object.parent;\r\n            return parentMesh.physicsImpostor;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Should a new body be generated.\r\n     * @returns boolean specifying if body initialization is required\r\n     */\r\n    public isBodyInitRequired(): boolean {\r\n        return this._bodyUpdateRequired || (!this._physicsBody && (!this._parent || !!this._options.ignoreParent));\r\n    }\r\n\r\n    /**\r\n     * Sets the updated scaling\r\n     */\r\n    public setScalingUpdated() {\r\n        this.forceUpdate();\r\n    }\r\n\r\n    /**\r\n     * Force a regeneration of this or the parent's impostor's body.\r\n     * Use with caution - This will remove all previously-instantiated joints.\r\n     */\r\n    public forceUpdate() {\r\n        this._init();\r\n        if (this.parent && !this._options.ignoreParent) {\r\n            this.parent.forceUpdate();\r\n        }\r\n    }\r\n\r\n    /*public get mesh(): AbstractMesh {\r\n        return this._mesh;\r\n    }*/\r\n\r\n    /**\r\n     * Gets the body that holds this impostor. Either its own, or its parent.\r\n     */\r\n    public get physicsBody(): any {\r\n        return this._parent && !this._options.ignoreParent ? this._parent.physicsBody : this._physicsBody;\r\n    }\r\n\r\n    /**\r\n     * Get the parent of the physics imposter\r\n     * @returns Physics imposter or null\r\n     */\r\n    public get parent(): Nullable<PhysicsImpostor> {\r\n        return !this._options.ignoreParent && this._parent ? this._parent : null;\r\n    }\r\n\r\n    /**\r\n     * Sets the parent of the physics imposter\r\n     */\r\n    public set parent(value: Nullable<PhysicsImpostor>) {\r\n        this._parent = value;\r\n    }\r\n\r\n    /**\r\n     * Set the physics body. Used mainly by the physics engine/plugin\r\n     */\r\n    public set physicsBody(physicsBody: any) {\r\n        if (this._physicsBody && this._physicsEngine) {\r\n            this._physicsEngine.getPhysicsPlugin().removePhysicsBody(this);\r\n        }\r\n        this._physicsBody = physicsBody;\r\n        this.resetUpdateFlags();\r\n    }\r\n\r\n    /**\r\n     * Resets the update flags\r\n     */\r\n    public resetUpdateFlags() {\r\n        this._bodyUpdateRequired = false;\r\n    }\r\n\r\n    /**\r\n     * Gets the object extents\r\n     * @returns the object extents\r\n     */\r\n    public getObjectExtents(): Vector3 {\r\n        if (this.object.getBoundingInfo) {\r\n            const q = this.object.rotationQuaternion;\r\n            const scaling = this.object.scaling.clone();\r\n            //reset rotation\r\n            this.object.rotationQuaternion = PhysicsImpostor.IDENTITY_QUATERNION;\r\n            //calculate the world matrix with no rotation\r\n            const worldMatrix = this.object.computeWorldMatrix && this.object.computeWorldMatrix(true);\r\n            if (worldMatrix) {\r\n                worldMatrix.decompose(scaling, undefined, undefined);\r\n            }\r\n            const boundingInfo = this.object.getBoundingInfo();\r\n            // get the global scaling of the object\r\n            const size = boundingInfo.boundingBox.extendSize.scale(2).multiplyInPlace(scaling);\r\n            size.x = Math.abs(size.x);\r\n            size.y = Math.abs(size.y);\r\n            size.z = Math.abs(size.z);\r\n            //bring back the rotation\r\n            this.object.rotationQuaternion = q;\r\n            //calculate the world matrix with the new rotation\r\n            this.object.computeWorldMatrix && this.object.computeWorldMatrix(true);\r\n            return size;\r\n        } else {\r\n            return PhysicsImpostor.DEFAULT_OBJECT_SIZE;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets the object center\r\n     * @returns The object center\r\n     */\r\n    public getObjectCenter(): Vector3 {\r\n        if (this.object.getBoundingInfo) {\r\n            const boundingInfo = this.object.getBoundingInfo();\r\n            return boundingInfo.boundingBox.centerWorld;\r\n        } else {\r\n            return this.object.position;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Get a specific parameter from the options parameters\r\n     * @param paramName The object parameter name\r\n     * @returns The object parameter\r\n     */\r\n    public getParam(paramName: string): any {\r\n        return (<any>this._options)[paramName];\r\n    }\r\n\r\n    /**\r\n     * Sets a specific parameter in the options given to the physics plugin\r\n     * @param paramName The parameter name\r\n     * @param value The value of the parameter\r\n     */\r\n    public setParam(paramName: string, value: number) {\r\n        (<any>this._options)[paramName] = value;\r\n        this._bodyUpdateRequired = true;\r\n    }\r\n\r\n    /**\r\n     * Specifically change the body's mass. Won't recreate the physics body object\r\n     * @param mass The mass of the physics imposter\r\n     */\r\n    public setMass(mass: number) {\r\n        if (this.getParam(\"mass\") !== mass) {\r\n            this.setParam(\"mass\", mass);\r\n        }\r\n        if (this._physicsEngine) {\r\n            this._physicsEngine.getPhysicsPlugin().setBodyMass(this, mass);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets the linear velocity\r\n     * @returns  linear velocity or null\r\n     */\r\n    public getLinearVelocity(): Nullable<Vector3> {\r\n        return this._physicsEngine ? this._physicsEngine.getPhysicsPlugin().getLinearVelocity(this) : Vector3.Zero();\r\n    }\r\n\r\n    /**\r\n     * Sets the linear velocity\r\n     * @param velocity  linear velocity or null\r\n     */\r\n    public setLinearVelocity(velocity: Nullable<Vector3>) {\r\n        if (this._physicsEngine) {\r\n            this._physicsEngine.getPhysicsPlugin().setLinearVelocity(this, velocity);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets the angular velocity\r\n     * @returns angular velocity or null\r\n     */\r\n    public getAngularVelocity(): Nullable<Vector3> {\r\n        return this._physicsEngine ? this._physicsEngine.getPhysicsPlugin().getAngularVelocity(this) : Vector3.Zero();\r\n    }\r\n\r\n    /**\r\n     * Sets the angular velocity\r\n     * @param velocity The velocity or null\r\n     */\r\n    public setAngularVelocity(velocity: Nullable<Vector3>) {\r\n        if (this._physicsEngine) {\r\n            this._physicsEngine.getPhysicsPlugin().setAngularVelocity(this, velocity);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Execute a function with the physics plugin native code\r\n     * Provide a function the will have two variables - the world object and the physics body object\r\n     * @param func The function to execute with the physics plugin native code\r\n     */\r\n    public executeNativeFunction(func: (world: any, physicsBody: any) => void) {\r\n        if (this._physicsEngine) {\r\n            func(this._physicsEngine.getPhysicsPlugin().world, this.physicsBody);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Register a function that will be executed before the physics world is stepping forward\r\n     * @param func The function to execute before the physics world is stepped forward\r\n     */\r\n    public registerBeforePhysicsStep(func: (impostor: PhysicsImpostor) => void): void {\r\n        this._onBeforePhysicsStepCallbacks.push(func);\r\n    }\r\n\r\n    /**\r\n     * Unregister a function that will be executed before the physics world is stepping forward\r\n     * @param func The function to execute before the physics world is stepped forward\r\n     */\r\n    public unregisterBeforePhysicsStep(func: (impostor: PhysicsImpostor) => void): void {\r\n        const index = this._onBeforePhysicsStepCallbacks.indexOf(func);\r\n\r\n        if (index > -1) {\r\n            this._onBeforePhysicsStepCallbacks.splice(index, 1);\r\n        } else {\r\n            Logger.Warn(\"Function to remove was not found\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Register a function that will be executed after the physics step\r\n     * @param func The function to execute after physics step\r\n     */\r\n    public registerAfterPhysicsStep(func: (impostor: PhysicsImpostor) => void): void {\r\n        this._onAfterPhysicsStepCallbacks.push(func);\r\n    }\r\n\r\n    /**\r\n     * Unregisters a function that will be executed after the physics step\r\n     * @param func The function to execute after physics step\r\n     */\r\n    public unregisterAfterPhysicsStep(func: (impostor: PhysicsImpostor) => void): void {\r\n        const index = this._onAfterPhysicsStepCallbacks.indexOf(func);\r\n\r\n        if (index > -1) {\r\n            this._onAfterPhysicsStepCallbacks.splice(index, 1);\r\n        } else {\r\n            Logger.Warn(\"Function to remove was not found\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * register a function that will be executed when this impostor collides against a different body\r\n     * @param collideAgainst Physics imposter, or array of physics imposters to collide against\r\n     * @param func Callback that is executed on collision\r\n     */\r\n    public registerOnPhysicsCollide(\r\n        collideAgainst: PhysicsImpostor | Array<PhysicsImpostor>,\r\n        func: (collider: PhysicsImpostor, collidedAgainst: PhysicsImpostor, point: Nullable<Vector3>) => void\r\n    ): void {\r\n        const collidedAgainstList: Array<PhysicsImpostor> = collideAgainst instanceof Array ? <Array<PhysicsImpostor>>collideAgainst : [<PhysicsImpostor>collideAgainst];\r\n        this._onPhysicsCollideCallbacks.push({ callback: func, otherImpostors: collidedAgainstList });\r\n    }\r\n\r\n    /**\r\n     * Unregisters the physics imposter's collision callback\r\n     * @param collideAgainst The physics object to collide against\r\n     * @param func Callback to execute on collision\r\n     */\r\n    public unregisterOnPhysicsCollide(\r\n        collideAgainst: PhysicsImpostor | Array<PhysicsImpostor>,\r\n        func: (collider: PhysicsImpostor, collidedAgainst: PhysicsImpostor | Array<PhysicsImpostor>, point: Nullable<Vector3>) => void\r\n    ): void {\r\n        const collidedAgainstList: Array<PhysicsImpostor> = collideAgainst instanceof Array ? <Array<PhysicsImpostor>>collideAgainst : [<PhysicsImpostor>collideAgainst];\r\n        let index = -1;\r\n        const found = this._onPhysicsCollideCallbacks.some((cbDef, idx) => {\r\n            if (cbDef.callback === func && cbDef.otherImpostors.length === collidedAgainstList.length) {\r\n                // chcek the arrays match\r\n                const sameList = cbDef.otherImpostors.every((impostor) => {\r\n                    return collidedAgainstList.indexOf(impostor) > -1;\r\n                });\r\n                if (sameList) {\r\n                    index = idx;\r\n                }\r\n                return sameList;\r\n            }\r\n            return false;\r\n        });\r\n\r\n        if (found) {\r\n            this._onPhysicsCollideCallbacks.splice(index, 1);\r\n        } else {\r\n            Logger.Warn(\"Function to remove was not found\");\r\n        }\r\n    }\r\n\r\n    //temp variables for parent rotation calculations\r\n    //private _mats: Array<Matrix> = [new Matrix(), new Matrix()];\r\n    private _tmpQuat: Quaternion = new Quaternion();\r\n    private _tmpQuat2: Quaternion = new Quaternion();\r\n\r\n    /**\r\n     * Get the parent rotation\r\n     * @returns The parent rotation\r\n     */\r\n    public getParentsRotation(): Quaternion {\r\n        let parent = this.object.parent;\r\n        this._tmpQuat.copyFromFloats(0, 0, 0, 1);\r\n        while (parent) {\r\n            if (parent.rotationQuaternion) {\r\n                this._tmpQuat2.copyFrom(parent.rotationQuaternion);\r\n            } else {\r\n                Quaternion.RotationYawPitchRollToRef(parent.rotation.y, parent.rotation.x, parent.rotation.z, this._tmpQuat2);\r\n            }\r\n            this._tmpQuat.multiplyToRef(this._tmpQuat2, this._tmpQuat);\r\n            parent = parent.parent;\r\n        }\r\n        return this._tmpQuat;\r\n    }\r\n\r\n    /**\r\n     * this function is executed by the physics engine.\r\n     */\r\n    public beforeStep = () => {\r\n        if (!this._physicsEngine) {\r\n            return;\r\n        }\r\n\r\n        this.object.translate(this._deltaPosition, -1);\r\n        this._deltaRotationConjugated &&\r\n            this.object.rotationQuaternion &&\r\n            this.object.rotationQuaternion.multiplyToRef(this._deltaRotationConjugated, this.object.rotationQuaternion);\r\n        this.object.computeWorldMatrix(false);\r\n        if (this.object.parent && this.object.rotationQuaternion) {\r\n            this.getParentsRotation();\r\n            this._tmpQuat.multiplyToRef(this.object.rotationQuaternion, this._tmpQuat);\r\n        } else {\r\n            this._tmpQuat.copyFrom(this.object.rotationQuaternion || new Quaternion());\r\n        }\r\n        if (!this._options.disableBidirectionalTransformation) {\r\n            this.object.rotationQuaternion &&\r\n                this._physicsEngine.getPhysicsPlugin().setPhysicsBodyTransformation(this, /*bInfo.boundingBox.centerWorld*/ this.object.getAbsolutePosition(), this._tmpQuat);\r\n        }\r\n\r\n        this._onBeforePhysicsStepCallbacks.forEach((func) => {\r\n            func(this);\r\n        });\r\n    };\r\n\r\n    /**\r\n     * this function is executed by the physics engine\r\n     */\r\n    public afterStep = () => {\r\n        if (!this._physicsEngine) {\r\n            return;\r\n        }\r\n\r\n        this._onAfterPhysicsStepCallbacks.forEach((func) => {\r\n            func(this);\r\n        });\r\n\r\n        this._physicsEngine.getPhysicsPlugin().setTransformationFromPhysicsBody(this);\r\n        // object has now its world rotation. needs to be converted to local.\r\n        if (this.object.parent && this.object.rotationQuaternion) {\r\n            this.getParentsRotation();\r\n            this._tmpQuat.conjugateInPlace();\r\n            this._tmpQuat.multiplyToRef(this.object.rotationQuaternion, this.object.rotationQuaternion);\r\n        }\r\n        // take the position set and make it the absolute position of this object.\r\n        this.object.setAbsolutePosition(this.object.position);\r\n        if (this._deltaRotation) {\r\n            this.object.rotationQuaternion && this.object.rotationQuaternion.multiplyToRef(this._deltaRotation, this.object.rotationQuaternion);\r\n            this._deltaPosition.applyRotationQuaternionToRef(this._deltaRotation, PhysicsImpostor._TmpVecs[0]);\r\n            this.object.translate(PhysicsImpostor._TmpVecs[0], 1);\r\n        } else {\r\n            this.object.translate(this._deltaPosition, 1);\r\n        }\r\n        this.object.computeWorldMatrix(true);\r\n    };\r\n\r\n    /**\r\n     * Legacy collision detection event support\r\n     */\r\n    public onCollideEvent: Nullable<(collider: PhysicsImpostor, collidedWith: PhysicsImpostor) => void> = null;\r\n\r\n    /**\r\n     *\r\n     * @param e\r\n     * @returns\r\n     */\r\n    public onCollide = (e: { body: any; point: Nullable<Vector3>; distance: number; impulse: number; normal: Nullable<Vector3> }) => {\r\n        if (!this._onPhysicsCollideCallbacks.length && !this.onCollideEvent) {\r\n            return;\r\n        }\r\n\r\n        if (!this._physicsEngine) {\r\n            return;\r\n        }\r\n        const otherImpostor = this._physicsEngine.getImpostorWithPhysicsBody(e.body);\r\n        if (otherImpostor) {\r\n            // Legacy collision detection event support\r\n            if (this.onCollideEvent) {\r\n                this.onCollideEvent(this, otherImpostor);\r\n            }\r\n            this._onPhysicsCollideCallbacks\r\n                .filter((obj) => {\r\n                    return obj.otherImpostors.indexOf(<PhysicsImpostor>otherImpostor) !== -1;\r\n                })\r\n                .forEach((obj) => {\r\n                    obj.callback(this, <PhysicsImpostor>otherImpostor, e.point, e.distance, e.impulse, e.normal);\r\n                });\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Apply a force\r\n     * @param force The force to apply\r\n     * @param contactPoint The contact point for the force\r\n     * @returns The physics imposter\r\n     */\r\n    public applyForce(force: Vector3, contactPoint: Vector3): PhysicsImpostor {\r\n        if (this._physicsEngine) {\r\n            this._physicsEngine.getPhysicsPlugin().applyForce(this, force, contactPoint);\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Apply an impulse\r\n     * @param force The impulse force\r\n     * @param contactPoint The contact point for the impulse force\r\n     * @returns The physics imposter\r\n     */\r\n    public applyImpulse(force: Vector3, contactPoint: Vector3): PhysicsImpostor {\r\n        if (this._physicsEngine) {\r\n            this._physicsEngine.getPhysicsPlugin().applyImpulse(this, force, contactPoint);\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * A help function to create a joint\r\n     * @param otherImpostor A physics imposter used to create a joint\r\n     * @param jointType The type of joint\r\n     * @param jointData The data for the joint\r\n     * @returns The physics imposter\r\n     */\r\n    public createJoint(otherImpostor: PhysicsImpostor, jointType: number, jointData: PhysicsJointData): PhysicsImpostor {\r\n        const joint = new PhysicsJoint(jointType, jointData);\r\n        this.addJoint(otherImpostor, joint);\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Add a joint to this impostor with a different impostor\r\n     * @param otherImpostor A physics imposter used to add a joint\r\n     * @param joint The joint to add\r\n     * @returns The physics imposter\r\n     */\r\n    public addJoint(otherImpostor: PhysicsImpostor, joint: PhysicsJoint): PhysicsImpostor {\r\n        this._joints.push({\r\n            otherImpostor: otherImpostor,\r\n            joint: joint,\r\n        });\r\n\r\n        if (this._physicsEngine) {\r\n            this._physicsEngine.addJoint(this, otherImpostor, joint);\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Add an anchor to a cloth impostor\r\n     * @param otherImpostor rigid impostor to anchor to\r\n     * @param width ratio across width from 0 to 1\r\n     * @param height ratio up height from 0 to 1\r\n     * @param influence the elasticity between cloth impostor and anchor from 0, very stretchy to 1, little stretch\r\n     * @param noCollisionBetweenLinkedBodies when true collisions between cloth impostor and anchor are ignored; default false\r\n     * @returns impostor the soft imposter\r\n     */\r\n    public addAnchor(otherImpostor: PhysicsImpostor, width: number, height: number, influence: number, noCollisionBetweenLinkedBodies: boolean): PhysicsImpostor {\r\n        if (!this._physicsEngine) {\r\n            return this;\r\n        }\r\n        const plugin = this._physicsEngine.getPhysicsPlugin();\r\n        if (!plugin.appendAnchor) {\r\n            return this;\r\n        }\r\n        if (this._physicsEngine) {\r\n            plugin.appendAnchor!(this, otherImpostor, width, height, influence, noCollisionBetweenLinkedBodies);\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Add a hook to a rope impostor\r\n     * @param otherImpostor rigid impostor to anchor to\r\n     * @param length ratio across rope from 0 to 1\r\n     * @param influence the elasticity between rope impostor and anchor from 0, very stretchy to 1, little stretch\r\n     * @param noCollisionBetweenLinkedBodies when true collisions between soft impostor and anchor are ignored; default false\r\n     * @returns impostor the rope imposter\r\n     */\r\n    public addHook(otherImpostor: PhysicsImpostor, length: number, influence: number, noCollisionBetweenLinkedBodies: boolean): PhysicsImpostor {\r\n        if (!this._physicsEngine) {\r\n            return this;\r\n        }\r\n        const plugin = this._physicsEngine.getPhysicsPlugin();\r\n        if (!plugin.appendAnchor) {\r\n            return this;\r\n        }\r\n        if (this._physicsEngine) {\r\n            plugin.appendHook!(this, otherImpostor, length, influence, noCollisionBetweenLinkedBodies);\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Will keep this body still, in a sleep mode.\r\n     * @returns the physics imposter\r\n     */\r\n    public sleep(): PhysicsImpostor {\r\n        if (this._physicsEngine) {\r\n            this._physicsEngine.getPhysicsPlugin().sleepBody(this);\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Wake the body up.\r\n     * @returns The physics imposter\r\n     */\r\n    public wakeUp(): PhysicsImpostor {\r\n        if (this._physicsEngine) {\r\n            this._physicsEngine.getPhysicsPlugin().wakeUpBody(this);\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Clones the physics imposter\r\n     * @param newObject The physics imposter clones to this physics-enabled object\r\n     * @returns A nullable physics imposter\r\n     */\r\n    public clone(newObject: IPhysicsEnabledObject): Nullable<PhysicsImpostor> {\r\n        if (!newObject) {\r\n            return null;\r\n        }\r\n        return new PhysicsImpostor(newObject, this.type, this._options, this._scene);\r\n    }\r\n\r\n    /**\r\n     * Disposes the physics imposter\r\n     */\r\n    public dispose(/*disposeChildren: boolean = true*/) {\r\n        //no dispose if no physics engine is available.\r\n        if (!this._physicsEngine) {\r\n            return;\r\n        }\r\n\r\n        this._joints.forEach((j) => {\r\n            if (this._physicsEngine) {\r\n                this._physicsEngine.removeJoint(this, j.otherImpostor, j.joint);\r\n            }\r\n        });\r\n        //dispose the physics body\r\n        this._physicsEngine.removeImpostor(this);\r\n        if (this.parent) {\r\n            this.parent.forceUpdate();\r\n        } else {\r\n            /*this._object.getChildMeshes().forEach(function(mesh) {\r\n                if (mesh.physicsImpostor) {\r\n                    if (disposeChildren) {\r\n                        mesh.physicsImpostor.dispose();\r\n                        mesh.physicsImpostor = null;\r\n                    }\r\n                }\r\n            })*/\r\n        }\r\n\r\n        this._isDisposed = true;\r\n    }\r\n\r\n    /**\r\n     * Sets the delta position\r\n     * @param position The delta position amount\r\n     */\r\n    public setDeltaPosition(position: Vector3) {\r\n        this._deltaPosition.copyFrom(position);\r\n    }\r\n\r\n    /**\r\n     * Sets the delta rotation\r\n     * @param rotation The delta rotation amount\r\n     */\r\n    public setDeltaRotation(rotation: Quaternion) {\r\n        if (!this._deltaRotation) {\r\n            this._deltaRotation = new Quaternion();\r\n        }\r\n        this._deltaRotation.copyFrom(rotation);\r\n        this._deltaRotationConjugated = this._deltaRotation.conjugate();\r\n    }\r\n\r\n    /**\r\n     * Gets the box size of the physics imposter and stores the result in the input parameter\r\n     * @param result Stores the box size\r\n     * @returns The physics imposter\r\n     */\r\n    public getBoxSizeToRef(result: Vector3): PhysicsImpostor {\r\n        if (this._physicsEngine) {\r\n            this._physicsEngine.getPhysicsPlugin().getBoxSizeToRef(this, result);\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Gets the radius of the physics imposter\r\n     * @returns Radius of the physics imposter\r\n     */\r\n    public getRadius(): number {\r\n        return this._physicsEngine ? this._physicsEngine.getPhysicsPlugin().getRadius(this) : 0;\r\n    }\r\n\r\n    /**\r\n     * Sync a bone with this impostor\r\n     * @param bone The bone to sync to the impostor.\r\n     * @param boneMesh The mesh that the bone is influencing.\r\n     * @param jointPivot The pivot of the joint / bone in local space.\r\n     * @param distToJoint Optional distance from the impostor to the joint.\r\n     * @param adjustRotation Optional quaternion for adjusting the local rotation of the bone.\r\n     */\r\n    public syncBoneWithImpostor(bone: Bone, boneMesh: AbstractMesh, jointPivot: Vector3, distToJoint?: number, adjustRotation?: Quaternion) {\r\n        const tempVec = PhysicsImpostor._TmpVecs[0];\r\n        const mesh = <AbstractMesh>this.object;\r\n\r\n        if (mesh.rotationQuaternion) {\r\n            if (adjustRotation) {\r\n                const tempQuat = PhysicsImpostor._TmpQuat;\r\n                mesh.rotationQuaternion.multiplyToRef(adjustRotation, tempQuat);\r\n                bone.setRotationQuaternion(tempQuat, Space.WORLD, boneMesh);\r\n            } else {\r\n                bone.setRotationQuaternion(mesh.rotationQuaternion, Space.WORLD, boneMesh);\r\n            }\r\n        }\r\n\r\n        tempVec.x = 0;\r\n        tempVec.y = 0;\r\n        tempVec.z = 0;\r\n\r\n        if (jointPivot) {\r\n            tempVec.x = jointPivot.x;\r\n            tempVec.y = jointPivot.y;\r\n            tempVec.z = jointPivot.z;\r\n\r\n            bone.getDirectionToRef(tempVec, boneMesh, tempVec);\r\n\r\n            if (distToJoint === undefined || distToJoint === null) {\r\n                distToJoint = jointPivot.length();\r\n            }\r\n\r\n            tempVec.x *= distToJoint;\r\n            tempVec.y *= distToJoint;\r\n            tempVec.z *= distToJoint;\r\n        }\r\n\r\n        if (bone.getParent()) {\r\n            tempVec.addInPlace(mesh.getAbsolutePosition());\r\n            bone.setAbsolutePosition(tempVec, boneMesh);\r\n        } else {\r\n            boneMesh.setAbsolutePosition(mesh.getAbsolutePosition());\r\n            boneMesh.position.x -= tempVec.x;\r\n            boneMesh.position.y -= tempVec.y;\r\n            boneMesh.position.z -= tempVec.z;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sync impostor to a bone\r\n     * @param bone The bone that the impostor will be synced to.\r\n     * @param boneMesh The mesh that the bone is influencing.\r\n     * @param jointPivot The pivot of the joint / bone in local space.\r\n     * @param distToJoint Optional distance from the impostor to the joint.\r\n     * @param adjustRotation Optional quaternion for adjusting the local rotation of the bone.\r\n     * @param boneAxis Optional vector3 axis the bone is aligned with\r\n     */\r\n    public syncImpostorWithBone(bone: Bone, boneMesh: AbstractMesh, jointPivot: Vector3, distToJoint?: number, adjustRotation?: Quaternion, boneAxis?: Vector3) {\r\n        const mesh = <AbstractMesh>this.object;\r\n\r\n        if (mesh.rotationQuaternion) {\r\n            if (adjustRotation) {\r\n                const tempQuat = PhysicsImpostor._TmpQuat;\r\n                bone.getRotationQuaternionToRef(Space.WORLD, boneMesh, tempQuat);\r\n                tempQuat.multiplyToRef(adjustRotation, mesh.rotationQuaternion);\r\n            } else {\r\n                bone.getRotationQuaternionToRef(Space.WORLD, boneMesh, mesh.rotationQuaternion);\r\n            }\r\n        }\r\n\r\n        const pos = PhysicsImpostor._TmpVecs[0];\r\n        const boneDir = PhysicsImpostor._TmpVecs[1];\r\n\r\n        if (!boneAxis) {\r\n            boneAxis = PhysicsImpostor._TmpVecs[2];\r\n            boneAxis.x = 0;\r\n            boneAxis.y = 1;\r\n            boneAxis.z = 0;\r\n        }\r\n\r\n        bone.getDirectionToRef(boneAxis, boneMesh, boneDir);\r\n        bone.getAbsolutePositionToRef(boneMesh, pos);\r\n\r\n        if ((distToJoint === undefined || distToJoint === null) && jointPivot) {\r\n            distToJoint = jointPivot.length();\r\n        }\r\n\r\n        if (distToJoint !== undefined && distToJoint !== null) {\r\n            pos.x += boneDir.x * distToJoint;\r\n            pos.y += boneDir.y * distToJoint;\r\n            pos.z += boneDir.z * distToJoint;\r\n        }\r\n\r\n        mesh.setAbsolutePosition(pos);\r\n    }\r\n\r\n    //Impostor types\r\n    /**\r\n     * No-Imposter type\r\n     */\r\n    public static NoImpostor = 0;\r\n    /**\r\n     * Sphere-Imposter type\r\n     */\r\n    public static SphereImpostor = 1;\r\n    /**\r\n     * Box-Imposter type\r\n     */\r\n    public static BoxImpostor = 2;\r\n    /**\r\n     * Plane-Imposter type\r\n     */\r\n    public static PlaneImpostor = 3;\r\n    /**\r\n     * Mesh-imposter type (Only available to objects with vertices data)\r\n     */\r\n    public static MeshImpostor = 4;\r\n    /**\r\n     * Capsule-Impostor type (Ammo.js plugin only)\r\n     */\r\n    public static CapsuleImpostor = 6;\r\n    /**\r\n     * Cylinder-Imposter type\r\n     */\r\n    public static CylinderImpostor = 7;\r\n    /**\r\n     * Particle-Imposter type\r\n     */\r\n    public static ParticleImpostor = 8;\r\n    /**\r\n     * Heightmap-Imposter type\r\n     */\r\n    public static HeightmapImpostor = 9;\r\n    /**\r\n     * ConvexHull-Impostor type (Ammo.js plugin only)\r\n     */\r\n    public static ConvexHullImpostor = 10;\r\n    /**\r\n     * Custom-Imposter type (Ammo.js plugin only)\r\n     */\r\n    public static CustomImpostor = 100;\r\n    /**\r\n     * Rope-Imposter type\r\n     */\r\n    public static RopeImpostor = 101;\r\n    /**\r\n     * Cloth-Imposter type\r\n     */\r\n    public static ClothImpostor = 102;\r\n    /**\r\n     * Softbody-Imposter type\r\n     */\r\n    public static SoftbodyImpostor = 103;\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}