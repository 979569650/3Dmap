{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { __decorate } from \"@babylonjs/core/tslib.es6.js\";\nimport { SerializationHelper, serialize, serializeAsVector3 } from \"@babylonjs/core/Misc/decorators.js\";\nimport { Vector3, Vector4 } from \"@babylonjs/core/Maths/math.vector.js\";\nimport { Texture } from \"@babylonjs/core/Materials/Textures/texture.js\";\nimport { MaterialDefines } from \"@babylonjs/core/Materials/materialDefines.js\";\nimport { MaterialHelper } from \"@babylonjs/core/Materials/materialHelper.js\";\nimport { PushMaterial } from \"@babylonjs/core/Materials/pushMaterial.js\";\nimport { VertexBuffer } from \"@babylonjs/core/Buffers/buffer.js\";\nimport { RegisterClass } from \"@babylonjs/core/Misc/typeStore.js\";\nimport { Color4 } from \"@babylonjs/core/Maths/math.color.js\";\nimport { EffectFallbacks } from \"@babylonjs/core/Materials/effectFallbacks.js\";\nimport { Constants } from \"@babylonjs/core/Engines/constants.js\";\nimport \"./shaders/fluentBackplate.fragment.js\";\nimport \"./shaders/fluentBackplate.vertex.js\";\n/** @internal */\nclass FluentBackplateMaterialDefines extends MaterialDefines {\n  constructor() {\n    super();\n    this.BLOB_ENABLE = true;\n    this.BLOB_ENABLE_2 = true;\n    this.SMOOTH_EDGES = true;\n    this.IRIDESCENT_MAP_ENABLE = true;\n    this._needNormals = true;\n    this.rebuild();\n  }\n}\n/**\n * Class used to render square buttons with fluent design\n */\nexport class FluentBackplateMaterial extends PushMaterial {\n  constructor(name, scene) {\n    super(name, scene);\n    /**\n     * Gets or sets the corner radius on the backplate. Best to keep this value between 0.01 and 0.5. Default is 0.03.\n     */\n    this.radius = 0.03;\n    /**\n     * Gets or sets the line width of the backplate.\n     */\n    this.lineWidth = 0.01;\n    /**\n     * Gets or sets whether to use absolute sizes when calculating effects on the backplate.\n     * Since desktop and VR/AR have different relative sizes, it's usually best to keep this false.\n     */\n    this.absoluteSizes = false;\n    /** @internal */\n    this._filterWidth = 1;\n    /**\n     * Gets or sets the base color of the backplate.\n     */\n    this.baseColor = new Color4(0.0392157, 0.0666667, 0.207843, 1);\n    /**\n     * Gets or sets the line color of the backplate.\n     */\n    this.lineColor = new Color4(0.14902, 0.133333, 0.384314, 1);\n    /**\n     * Gets or sets the intensity of the fluent hover glow effect.\n     */\n    this.blobIntensity = 0.98;\n    /**\n     * Gets or sets the far size of the fluent hover glow effect.\n     */\n    this.blobFarSize = 0.04;\n    /**\n     * Gets or sets the distance considered \"near\" to the backplate, which controls the size of the fluent hover glow effect (see blobNearSize).\n     */\n    this.blobNearDistance = 0;\n    /**\n     * Gets or sets the distance considered \"far\" from the backplate, which controls the size of the fluent hover glow effect (see blobFarSize).\n     */\n    this.blobFarDistance = 0.08;\n    /**\n     * Gets or sets the length of the fluent hover glow effect fade.\n     */\n    this.blobFadeLength = 0.08;\n    /**\n     * Gets or sets the size of the fluent hover glow effect when the left pointer is considered \"near\" to the backplate (see blobNearDistance).\n     */\n    this.blobNearSize = 0.22;\n    /**\n     * Gets or sets the progress of the fluent hover glow effect selection animation corresponding to the left pointer (0.0 - 1.0).\n     */\n    this.blobPulse = 0;\n    /**\n     * Gets or sets the opacity of the fluent hover glow effect corresponding to the left pointer (0.0 - 1.0). Default is 0.\n     */\n    this.blobFade = 0;\n    /**\n     * Gets or sets the size of the fluent hover glow effect when the right pointer is considered \"near\" to the backplate (see blobNearDistance).\n     */\n    this.blobNearSize2 = 0.22;\n    /**\n     * Gets or sets the progress of the fluent hover glow effect selection animation corresponding to the right pointer (0.0 - 1.0).\n     */\n    this.blobPulse2 = 0;\n    /**\n     * Gets or sets the opacity of the fluent hover glow effect corresponding to the right pointer (0.0 - 1.0). Default is 0.\n     */\n    this.blobFade2 = 0;\n    /** @internal */\n    this._rate = 0.135;\n    /**\n     * Gets or sets the color of the highlights on the backplate line.\n     */\n    this.highlightColor = new Color4(0.98, 0.98, 0.98, 1);\n    /**\n     * Gets or sets the width of the highlights on the backplate line.\n     */\n    this.highlightWidth = 0.25;\n    /** @internal */\n    this._highlightTransform = new Vector4(1, 1, 0, 0);\n    /** @internal */\n    this._highlight = 1;\n    /**\n     * Gets or sets the intensity of the iridescence effect.\n     */\n    this.iridescenceIntensity = 0;\n    /**\n     * Gets or sets the intensity of the iridescence effect on the backplate edges.\n     */\n    this.iridescenceEdgeIntensity = 1;\n    /** @internal */\n    this._angle = -45;\n    /**\n     * Gets or sets the opacity of the backplate (0.0 - 1.0).\n     */\n    this.fadeOut = 1;\n    /** @internal */\n    this._reflected = true;\n    /** @internal */\n    this._frequency = 1;\n    /** @internal */\n    this._verticalOffset = 0;\n    /**\n     * Gets or sets the world-space position of the tip of the left index finger.\n     */\n    this.globalLeftIndexTipPosition = Vector3.Zero();\n    this._globalLeftIndexTipPosition4 = Vector4.Zero();\n    /**\n     * Gets or sets the world-space position of the tip of the right index finger.\n     */\n    this.globalRightIndexTipPosition = Vector3.Zero();\n    this._globalRightIndexTipPosition4 = Vector4.Zero();\n    this.alphaMode = Constants.ALPHA_DISABLE;\n    this.backFaceCulling = false;\n    this._blobTexture = new Texture(FluentBackplateMaterial.BLOB_TEXTURE_URL, this.getScene(), true, false, Texture.NEAREST_SAMPLINGMODE);\n    this._iridescentMap = new Texture(FluentBackplateMaterial.IM_TEXTURE_URL, this.getScene(), true, false, Texture.NEAREST_SAMPLINGMODE);\n  }\n  needAlphaBlending() {\n    return false;\n  }\n  needAlphaTesting() {\n    return false;\n  }\n  getAlphaTestTexture() {\n    return null;\n  }\n  isReadyForSubMesh(mesh, subMesh) {\n    if (this.isFrozen) {\n      if (subMesh.effect && subMesh.effect._wasPreviouslyReady) {\n        return true;\n      }\n    }\n    if (!subMesh.materialDefines) {\n      subMesh.materialDefines = new FluentBackplateMaterialDefines();\n    }\n    const defines = subMesh.materialDefines;\n    const scene = this.getScene();\n    if (this._isReadyForSubMesh(subMesh)) {\n      return true;\n    }\n    const engine = scene.getEngine();\n    // Attribs\n    MaterialHelper.PrepareDefinesForAttributes(mesh, defines, false, false);\n    // Get correct effect\n    if (defines.isDirty) {\n      defines.markAsProcessed();\n      scene.resetCachedMaterial();\n      // Fallbacks\n      const fallbacks = new EffectFallbacks();\n      if (defines.FOG) {\n        fallbacks.addFallback(1, \"FOG\");\n      }\n      MaterialHelper.HandleFallbacksForShadows(defines, fallbacks);\n      defines.IMAGEPROCESSINGPOSTPROCESS = scene.imageProcessingConfiguration.applyByPostProcess;\n      //Attributes\n      const attribs = [VertexBuffer.PositionKind];\n      if (defines.NORMAL) {\n        attribs.push(VertexBuffer.NormalKind);\n      }\n      if (defines.UV1) {\n        attribs.push(VertexBuffer.UVKind);\n      }\n      if (defines.UV2) {\n        attribs.push(VertexBuffer.UV2Kind);\n      }\n      if (defines.VERTEXCOLOR) {\n        attribs.push(VertexBuffer.ColorKind);\n      }\n      if (defines.TANGENT) {\n        attribs.push(VertexBuffer.TangentKind);\n      }\n      MaterialHelper.PrepareAttributesForInstances(attribs, defines);\n      // Legacy browser patch\n      const shaderName = \"fluentBackplate\";\n      const join = defines.toString();\n      const uniforms = [\"world\", \"viewProjection\", \"cameraPosition\", \"_Radius_\", \"_Line_Width_\", \"_Absolute_Sizes_\", \"_Filter_Width_\", \"_Base_Color_\", \"_Line_Color_\", \"_Radius_Top_Left_\", \"_Radius_Top_Right_\", \"_Radius_Bottom_Left_\", \"_Radius_Bottom_Right_\", \"_Blob_Position_\", \"_Blob_Intensity_\", \"_Blob_Near_Size_\", \"_Blob_Far_Size_\", \"_Blob_Near_Distance_\", \"_Blob_Far_Distance_\", \"_Blob_Fade_Length_\", \"_Blob_Pulse_\", \"_Blob_Fade_\", \"_Blob_Texture_\", \"_Blob_Position_2_\", \"_Blob_Near_Size_2_\", \"_Blob_Pulse_2_\", \"_Blob_Fade_2_\", \"_Rate_\", \"_Highlight_Color_\", \"_Highlight_Width_\", \"_Highlight_Transform_\", \"_Highlight_\", \"_Iridescence_Intensity_\", \"_Iridescence_Edge_Intensity_\", \"_Angle_\", \"_Fade_Out_\", \"_Reflected_\", \"_Frequency_\", \"_Vertical_Offset_\", \"_Iridescent_Map_\", \"_Use_Global_Left_Index_\", \"_Use_Global_Right_Index_\", \"Global_Left_Index_Tip_Position\", \"Global_Right_Index_Tip_Position\"];\n      const samplers = [\"_Blob_Texture_\", \"_Iridescent_Map_\"];\n      const uniformBuffers = new Array();\n      MaterialHelper.PrepareUniformsAndSamplersList({\n        uniformsNames: uniforms,\n        uniformBuffersNames: uniformBuffers,\n        samplers: samplers,\n        defines: defines,\n        maxSimultaneousLights: 4\n      });\n      subMesh.setEffect(scene.getEngine().createEffect(shaderName, {\n        attributes: attribs,\n        uniformsNames: uniforms,\n        uniformBuffersNames: uniformBuffers,\n        samplers: samplers,\n        defines: join,\n        fallbacks: fallbacks,\n        onCompiled: this.onCompiled,\n        onError: this.onError,\n        indexParameters: {\n          maxSimultaneousLights: 4\n        }\n      }, engine), defines, this._materialContext);\n    }\n    if (!subMesh.effect || !subMesh.effect.isReady()) {\n      return false;\n    }\n    defines._renderId = scene.getRenderId();\n    subMesh.effect._wasPreviouslyReady = true;\n    return true;\n  }\n  bindForSubMesh(world, mesh, subMesh) {\n    var _a, _b;\n    const defines = subMesh.materialDefines;\n    if (!defines) {\n      return;\n    }\n    const effect = subMesh.effect;\n    if (!effect) {\n      return;\n    }\n    this._activeEffect = effect;\n    // Matrices\n    this.bindOnlyWorldMatrix(world);\n    this._activeEffect.setMatrix(\"viewProjection\", this.getScene().getTransformMatrix());\n    this._activeEffect.setVector3(\"cameraPosition\", (_b = (_a = this.getScene().activeCamera) === null || _a === void 0 ? void 0 : _a.position) !== null && _b !== void 0 ? _b : Vector3.ZeroReadOnly);\n    // \"Round Rect\"\n    this._activeEffect.setFloat(\"_Radius_\", this.radius);\n    this._activeEffect.setFloat(\"_Line_Width_\", this.lineWidth);\n    this._activeEffect.setFloat(\"_Absolute_Sizes_\", this.absoluteSizes ? 1.0 : 0.0);\n    this._activeEffect.setFloat(\"_Filter_Width_\", this._filterWidth);\n    this._activeEffect.setDirectColor4(\"_Base_Color_\", this.baseColor);\n    this._activeEffect.setDirectColor4(\"_Line_Color_\", this.lineColor);\n    // \"Radii Multipliers\"\n    this._activeEffect.setFloat(\"_Radius_Top_Left_\", 1);\n    this._activeEffect.setFloat(\"_Radius_Top_Right_\", 1.0);\n    this._activeEffect.setFloat(\"_Radius_Bottom_Left_\", 1.0);\n    this._activeEffect.setFloat(\"_Radius_Bottom_Right_\", 1.0);\n    // \"Blob\"\n    //define BLOB_ENABLE true;\n    this._activeEffect.setFloat(\"_Blob_Intensity_\", this.blobIntensity);\n    this._activeEffect.setFloat(\"_Blob_Near_Size_\", this.blobNearSize);\n    this._activeEffect.setFloat(\"_Blob_Far_Size_\", this.blobFarSize);\n    this._activeEffect.setFloat(\"_Blob_Near_Distance_\", this.blobNearDistance);\n    this._activeEffect.setFloat(\"_Blob_Far_Distance_\", this.blobFarDistance);\n    this._activeEffect.setFloat(\"_Blob_Fade_Length_\", this.blobFadeLength);\n    this._activeEffect.setFloat(\"_Blob_Pulse_\", this.blobPulse);\n    this._activeEffect.setFloat(\"_Blob_Fade_\", this.blobFade);\n    // \"Blob Texture\"\n    this._activeEffect.setTexture(\"_Blob_Texture_\", this._blobTexture);\n    // \"Blob 2\"\n    //define BLOB_ENABLE_2 true;\n    this._activeEffect.setFloat(\"_Blob_Near_Size_2_\", this.blobNearSize2);\n    this._activeEffect.setFloat(\"_Blob_Pulse_2_\", this.blobPulse2);\n    this._activeEffect.setFloat(\"_Blob_Fade_2_\", this.blobFade2);\n    // \"Line Highlight\"\n    this._activeEffect.setFloat(\"_Rate_\", this._rate);\n    this._activeEffect.setDirectColor4(\"_Highlight_Color_\", this.highlightColor);\n    this._activeEffect.setFloat(\"_Highlight_Width_\", this.highlightWidth);\n    this._activeEffect.setVector4(\"_Highlight_Transform_\", this._highlightTransform);\n    this._activeEffect.setFloat(\"_Highlight_\", this._highlight);\n    // \"Iridescence\"\n    this._activeEffect.setFloat(\"_Iridescence_Intensity_\", this.iridescenceIntensity);\n    this._activeEffect.setFloat(\"_Iridescence_Edge_Intensity_\", this.iridescenceEdgeIntensity);\n    this._activeEffect.setFloat(\"_Angle_\", this._angle);\n    // \"Fade\"\n    this._activeEffect.setFloat(\"_Fade_Out_\", this.fadeOut);\n    // \"Antialiasing\"\n    //define SMOOTH_EDGES true;\n    // \"ChooseAngle\"\n    this._activeEffect.setFloat(\"_Reflected_\", this._reflected ? 1.0 : 0.0);\n    // \"Multiply\"\n    this._activeEffect.setFloat(\"_Frequency_\", this._frequency);\n    this._activeEffect.setFloat(\"_Vertical_Offset_\", this._verticalOffset);\n    // \"Color Texture\"\n    //define IRIDESCENT_MAP_ENABLE true;\n    this._activeEffect.setTexture(\"_Iridescent_Map_\", this._iridescentMap);\n    // \"Global\"\n    this._activeEffect.setFloat(\"_Use_Global_Left_Index_\", 1.0);\n    this._activeEffect.setFloat(\"_Use_Global_Right_Index_\", 1.0);\n    this._globalLeftIndexTipPosition4.set(this.globalLeftIndexTipPosition.x, this.globalLeftIndexTipPosition.y, this.globalLeftIndexTipPosition.z, 1.0);\n    this._activeEffect.setVector4(\"Global_Left_Index_Tip_Position\", this._globalLeftIndexTipPosition4);\n    this._globalRightIndexTipPosition4.set(this.globalRightIndexTipPosition.x, this.globalRightIndexTipPosition.y, this.globalRightIndexTipPosition.z, 1.0);\n    this._activeEffect.setVector4(\"Global_Right_Index_Tip_Position\", this._globalRightIndexTipPosition4);\n    this._afterBind(mesh, this._activeEffect);\n  }\n  /**\n   * Get the list of animatables in the material.\n   * @returns the list of animatables object used in the material\n   */\n  getAnimatables() {\n    return [];\n  }\n  dispose(forceDisposeEffect) {\n    super.dispose(forceDisposeEffect);\n    this._blobTexture.dispose();\n    this._iridescentMap.dispose();\n  }\n  clone(name) {\n    return SerializationHelper.Clone(() => new FluentBackplateMaterial(name, this.getScene()), this);\n  }\n  serialize() {\n    const serializationObject = super.serialize();\n    serializationObject.customType = \"BABYLON.FluentBackplateMaterial\";\n    return serializationObject;\n  }\n  getClassName() {\n    return \"FluentBackplateMaterial\";\n  }\n  // Statics\n  static Parse(source, scene, rootUrl) {\n    return SerializationHelper.Parse(() => new FluentBackplateMaterial(source.name, scene), source, scene, rootUrl);\n  }\n}\n/**\n * URL pointing to the texture used to define the coloring for the fluent blob effect.\n */\nFluentBackplateMaterial.BLOB_TEXTURE_URL = \"https://assets.babylonjs.com/meshes/MRTK/mrtk-fluent-backplate-blob.png\";\n/**\n * URL pointing to the texture used to define iridescent map.\n */\nFluentBackplateMaterial.IM_TEXTURE_URL = \"https://assets.babylonjs.com/meshes/MRTK/mrtk-fluent-backplate-iridescence.png\";\n__decorate([serialize()], FluentBackplateMaterial.prototype, \"radius\", void 0);\n__decorate([serialize()], FluentBackplateMaterial.prototype, \"lineWidth\", void 0);\n__decorate([serialize()], FluentBackplateMaterial.prototype, \"absoluteSizes\", void 0);\n__decorate([serialize()], FluentBackplateMaterial.prototype, \"baseColor\", void 0);\n__decorate([serialize()], FluentBackplateMaterial.prototype, \"lineColor\", void 0);\n__decorate([serialize()], FluentBackplateMaterial.prototype, \"blobIntensity\", void 0);\n__decorate([serialize()], FluentBackplateMaterial.prototype, \"blobFarSize\", void 0);\n__decorate([serialize()], FluentBackplateMaterial.prototype, \"blobNearDistance\", void 0);\n__decorate([serialize()], FluentBackplateMaterial.prototype, \"blobFarDistance\", void 0);\n__decorate([serialize()], FluentBackplateMaterial.prototype, \"blobFadeLength\", void 0);\n__decorate([serialize()], FluentBackplateMaterial.prototype, \"blobNearSize\", void 0);\n__decorate([serialize()], FluentBackplateMaterial.prototype, \"blobPulse\", void 0);\n__decorate([serialize()], FluentBackplateMaterial.prototype, \"blobFade\", void 0);\n__decorate([serialize()], FluentBackplateMaterial.prototype, \"blobNearSize2\", void 0);\n__decorate([serialize()], FluentBackplateMaterial.prototype, \"blobPulse2\", void 0);\n__decorate([serialize()], FluentBackplateMaterial.prototype, \"blobFade2\", void 0);\n__decorate([serialize()], FluentBackplateMaterial.prototype, \"highlightColor\", void 0);\n__decorate([serialize()], FluentBackplateMaterial.prototype, \"highlightWidth\", void 0);\n__decorate([serialize()], FluentBackplateMaterial.prototype, \"iridescenceIntensity\", void 0);\n__decorate([serialize()], FluentBackplateMaterial.prototype, \"iridescenceEdgeIntensity\", void 0);\n__decorate([serialize()], FluentBackplateMaterial.prototype, \"fadeOut\", void 0);\n__decorate([serializeAsVector3()], FluentBackplateMaterial.prototype, \"globalLeftIndexTipPosition\", void 0);\n__decorate([serializeAsVector3()], FluentBackplateMaterial.prototype, \"globalRightIndexTipPosition\", void 0);\nRegisterClass(\"BABYLON.GUI.FluentBackplateMaterial\", FluentBackplateMaterial);","map":{"version":3,"names":["SerializationHelper","serialize","serializeAsVector3","Vector3","Vector4","Texture","MaterialDefines","MaterialHelper","PushMaterial","VertexBuffer","RegisterClass","Color4","EffectFallbacks","Constants","FluentBackplateMaterialDefines","constructor","BLOB_ENABLE","BLOB_ENABLE_2","SMOOTH_EDGES","IRIDESCENT_MAP_ENABLE","_needNormals","rebuild","FluentBackplateMaterial","name","scene","radius","lineWidth","absoluteSizes","_filterWidth","baseColor","lineColor","blobIntensity","blobFarSize","blobNearDistance","blobFarDistance","blobFadeLength","blobNearSize","blobPulse","blobFade","blobNearSize2","blobPulse2","blobFade2","_rate","highlightColor","highlightWidth","_highlightTransform","_highlight","iridescenceIntensity","iridescenceEdgeIntensity","_angle","fadeOut","_reflected","_frequency","_verticalOffset","globalLeftIndexTipPosition","Zero","_globalLeftIndexTipPosition4","globalRightIndexTipPosition","_globalRightIndexTipPosition4","alphaMode","ALPHA_DISABLE","backFaceCulling","_blobTexture","BLOB_TEXTURE_URL","getScene","NEAREST_SAMPLINGMODE","_iridescentMap","IM_TEXTURE_URL","needAlphaBlending","needAlphaTesting","getAlphaTestTexture","isReadyForSubMesh","mesh","subMesh","isFrozen","effect","_wasPreviouslyReady","materialDefines","defines","_isReadyForSubMesh","engine","getEngine","PrepareDefinesForAttributes","isDirty","markAsProcessed","resetCachedMaterial","fallbacks","FOG","addFallback","HandleFallbacksForShadows","IMAGEPROCESSINGPOSTPROCESS","imageProcessingConfiguration","applyByPostProcess","attribs","PositionKind","NORMAL","push","NormalKind","UV1","UVKind","UV2","UV2Kind","VERTEXCOLOR","ColorKind","TANGENT","TangentKind","PrepareAttributesForInstances","shaderName","join","toString","uniforms","samplers","uniformBuffers","Array","PrepareUniformsAndSamplersList","uniformsNames","uniformBuffersNames","maxSimultaneousLights","setEffect","createEffect","attributes","onCompiled","onError","indexParameters","_materialContext","isReady","_renderId","getRenderId","bindForSubMesh","world","_activeEffect","bindOnlyWorldMatrix","setMatrix","getTransformMatrix","setVector3","_b","_a","activeCamera","position","ZeroReadOnly","setFloat","setDirectColor4","setTexture","setVector4","set","x","y","z","_afterBind","getAnimatables","dispose","forceDisposeEffect","clone","Clone","serializationObject","customType","getClassName","Parse","source","rootUrl","__decorate"],"sources":["../../../../../../dev/gui/src/3D/materials/fluentBackplate/fluentBackplateMaterial.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/naming-convention */\r\nimport type { Nullable } from \"core/types\";\r\nimport { SerializationHelper, serialize, serializeAsVector3 } from \"core/Misc/decorators\";\r\nimport type { Matrix } from \"core/Maths/math.vector\";\r\nimport { Vector3, Vector4 } from \"core/Maths/math.vector\";\r\nimport type { IAnimatable } from \"core/Animations/animatable.interface\";\r\nimport type { BaseTexture } from \"core/Materials/Textures/baseTexture\";\r\nimport { Texture } from \"core/Materials/Textures/texture\";\r\nimport { MaterialDefines } from \"core/Materials/materialDefines\";\r\nimport { MaterialHelper } from \"core/Materials/materialHelper\";\r\nimport type { IEffectCreationOptions } from \"core/Materials/effect\";\r\nimport { PushMaterial } from \"core/Materials/pushMaterial\";\r\nimport { VertexBuffer } from \"core/Buffers/buffer\";\r\nimport type { AbstractMesh } from \"core/Meshes/abstractMesh\";\r\nimport type { SubMesh } from \"core/Meshes/subMesh\";\r\nimport type { Mesh } from \"core/Meshes/mesh\";\r\nimport type { Scene } from \"core/scene\";\r\nimport { RegisterClass } from \"core/Misc/typeStore\";\r\nimport { Color4 } from \"core/Maths/math.color\";\r\nimport { EffectFallbacks } from \"core/Materials/effectFallbacks\";\r\nimport { Constants } from \"core/Engines/constants\";\r\n\r\nimport \"./shaders/fluentBackplate.fragment\";\r\nimport \"./shaders/fluentBackplate.vertex\";\r\n\r\n/** @internal */\r\nclass FluentBackplateMaterialDefines extends MaterialDefines {\r\n    public BLOB_ENABLE = true;\r\n    public BLOB_ENABLE_2 = true;\r\n    public SMOOTH_EDGES = true;\r\n    public IRIDESCENT_MAP_ENABLE = true;\r\n\r\n    constructor() {\r\n        super();\r\n        this._needNormals = true;\r\n        this.rebuild();\r\n    }\r\n}\r\n\r\n/**\r\n * Class used to render square buttons with fluent design\r\n */\r\nexport class FluentBackplateMaterial extends PushMaterial {\r\n    /**\r\n     * URL pointing to the texture used to define the coloring for the fluent blob effect.\r\n     */\r\n    public static BLOB_TEXTURE_URL = \"https://assets.babylonjs.com/meshes/MRTK/mrtk-fluent-backplate-blob.png\";\r\n\r\n    /**\r\n     * URL pointing to the texture used to define iridescent map.\r\n     */\r\n    public static IM_TEXTURE_URL = \"https://assets.babylonjs.com/meshes/MRTK/mrtk-fluent-backplate-iridescence.png\";\r\n\r\n    private _blobTexture: Texture;\r\n    private _iridescentMap: Texture;\r\n\r\n    /**\r\n     * Gets or sets the corner radius on the backplate. Best to keep this value between 0.01 and 0.5. Default is 0.03.\r\n     */\r\n    @serialize()\r\n    public radius = 0.03;\r\n\r\n    /**\r\n     * Gets or sets the line width of the backplate.\r\n     */\r\n    @serialize()\r\n    public lineWidth = 0.01;\r\n\r\n    /**\r\n     * Gets or sets whether to use absolute sizes when calculating effects on the backplate.\r\n     * Since desktop and VR/AR have different relative sizes, it's usually best to keep this false.\r\n     */\r\n    @serialize()\r\n    public absoluteSizes = false;\r\n\r\n    /** @internal */\r\n    public _filterWidth = 1;\r\n\r\n    /**\r\n     * Gets or sets the base color of the backplate.\r\n     */\r\n    @serialize()\r\n    public baseColor = new Color4(0.0392157, 0.0666667, 0.207843, 1);\r\n\r\n    /**\r\n     * Gets or sets the line color of the backplate.\r\n     */\r\n    @serialize()\r\n    public lineColor = new Color4(0.14902, 0.133333, 0.384314, 1);\r\n\r\n    /**\r\n     * Gets or sets the intensity of the fluent hover glow effect.\r\n     */\r\n    @serialize()\r\n    public blobIntensity = 0.98;\r\n\r\n    /**\r\n     * Gets or sets the far size of the fluent hover glow effect.\r\n     */\r\n    @serialize()\r\n    public blobFarSize = 0.04;\r\n\r\n    /**\r\n     * Gets or sets the distance considered \"near\" to the backplate, which controls the size of the fluent hover glow effect (see blobNearSize).\r\n     */\r\n    @serialize()\r\n    public blobNearDistance = 0;\r\n\r\n    /**\r\n     * Gets or sets the distance considered \"far\" from the backplate, which controls the size of the fluent hover glow effect (see blobFarSize).\r\n     */\r\n    @serialize()\r\n    public blobFarDistance = 0.08;\r\n\r\n    /**\r\n     * Gets or sets the length of the fluent hover glow effect fade.\r\n     */\r\n    @serialize()\r\n    public blobFadeLength = 0.08;\r\n\r\n    /**\r\n     * Gets or sets the size of the fluent hover glow effect when the left pointer is considered \"near\" to the backplate (see blobNearDistance).\r\n     */\r\n    @serialize()\r\n    public blobNearSize = 0.22;\r\n\r\n    /**\r\n     * Gets or sets the progress of the fluent hover glow effect selection animation corresponding to the left pointer (0.0 - 1.0).\r\n     */\r\n    @serialize()\r\n    public blobPulse = 0;\r\n\r\n    /**\r\n     * Gets or sets the opacity of the fluent hover glow effect corresponding to the left pointer (0.0 - 1.0). Default is 0.\r\n     */\r\n    @serialize()\r\n    public blobFade = 0;\r\n\r\n    /**\r\n     * Gets or sets the size of the fluent hover glow effect when the right pointer is considered \"near\" to the backplate (see blobNearDistance).\r\n     */\r\n    @serialize()\r\n    public blobNearSize2 = 0.22;\r\n\r\n    /**\r\n     * Gets or sets the progress of the fluent hover glow effect selection animation corresponding to the right pointer (0.0 - 1.0).\r\n     */\r\n    @serialize()\r\n    public blobPulse2 = 0;\r\n\r\n    /**\r\n     * Gets or sets the opacity of the fluent hover glow effect corresponding to the right pointer (0.0 - 1.0). Default is 0.\r\n     */\r\n    @serialize()\r\n    public blobFade2 = 0;\r\n\r\n    /** @internal */\r\n    public _rate = 0.135;\r\n\r\n    /**\r\n     * Gets or sets the color of the highlights on the backplate line.\r\n     */\r\n    @serialize()\r\n    public highlightColor = new Color4(0.98, 0.98, 0.98, 1);\r\n\r\n    /**\r\n     * Gets or sets the width of the highlights on the backplate line.\r\n     */\r\n    @serialize()\r\n    public highlightWidth = 0.25;\r\n\r\n    /** @internal */\r\n    public _highlightTransform = new Vector4(1, 1, 0, 0);\r\n\r\n    /** @internal */\r\n    public _highlight = 1;\r\n\r\n    /**\r\n     * Gets or sets the intensity of the iridescence effect.\r\n     */\r\n    @serialize()\r\n    public iridescenceIntensity = 0;\r\n\r\n    /**\r\n     * Gets or sets the intensity of the iridescence effect on the backplate edges.\r\n     */\r\n    @serialize()\r\n    public iridescenceEdgeIntensity = 1;\r\n\r\n    /** @internal */\r\n    public _angle = -45;\r\n\r\n    /**\r\n     * Gets or sets the opacity of the backplate (0.0 - 1.0).\r\n     */\r\n    @serialize()\r\n    public fadeOut = 1;\r\n\r\n    /** @internal */\r\n    public _reflected = true;\r\n\r\n    /** @internal */\r\n    public _frequency = 1;\r\n\r\n    /** @internal */\r\n    public _verticalOffset = 0;\r\n\r\n    /**\r\n     * Gets or sets the world-space position of the tip of the left index finger.\r\n     */\r\n    @serializeAsVector3()\r\n    public globalLeftIndexTipPosition = Vector3.Zero();\r\n    private _globalLeftIndexTipPosition4 = Vector4.Zero();\r\n\r\n    /**\r\n     * Gets or sets the world-space position of the tip of the right index finger.\r\n     */\r\n    @serializeAsVector3()\r\n    public globalRightIndexTipPosition = Vector3.Zero();\r\n    private _globalRightIndexTipPosition4 = Vector4.Zero();\r\n\r\n    constructor(name: string, scene?: Scene) {\r\n        super(name, scene);\r\n        this.alphaMode = Constants.ALPHA_DISABLE;\r\n        this.backFaceCulling = false;\r\n\r\n        this._blobTexture = new Texture(FluentBackplateMaterial.BLOB_TEXTURE_URL, this.getScene(), true, false, Texture.NEAREST_SAMPLINGMODE);\r\n        this._iridescentMap = new Texture(FluentBackplateMaterial.IM_TEXTURE_URL, this.getScene(), true, false, Texture.NEAREST_SAMPLINGMODE);\r\n    }\r\n\r\n    public needAlphaBlending(): boolean {\r\n        return false;\r\n    }\r\n\r\n    public needAlphaTesting(): boolean {\r\n        return false;\r\n    }\r\n\r\n    public getAlphaTestTexture(): Nullable<BaseTexture> {\r\n        return null;\r\n    }\r\n\r\n    public isReadyForSubMesh(mesh: AbstractMesh, subMesh: SubMesh): boolean {\r\n        if (this.isFrozen) {\r\n            if (subMesh.effect && subMesh.effect._wasPreviouslyReady) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        if (!subMesh.materialDefines) {\r\n            subMesh.materialDefines = new FluentBackplateMaterialDefines();\r\n        }\r\n\r\n        const defines = <FluentBackplateMaterialDefines>subMesh.materialDefines;\r\n        const scene = this.getScene();\r\n\r\n        if (this._isReadyForSubMesh(subMesh)) {\r\n            return true;\r\n        }\r\n\r\n        const engine = scene.getEngine();\r\n\r\n        // Attribs\r\n        MaterialHelper.PrepareDefinesForAttributes(mesh, defines, false, false);\r\n\r\n        // Get correct effect\r\n        if (defines.isDirty) {\r\n            defines.markAsProcessed();\r\n\r\n            scene.resetCachedMaterial();\r\n\r\n            // Fallbacks\r\n            const fallbacks = new EffectFallbacks();\r\n            if (defines.FOG) {\r\n                fallbacks.addFallback(1, \"FOG\");\r\n            }\r\n\r\n            MaterialHelper.HandleFallbacksForShadows(defines, fallbacks);\r\n\r\n            defines.IMAGEPROCESSINGPOSTPROCESS = scene.imageProcessingConfiguration.applyByPostProcess;\r\n\r\n            //Attributes\r\n            const attribs = [VertexBuffer.PositionKind];\r\n\r\n            if (defines.NORMAL) {\r\n                attribs.push(VertexBuffer.NormalKind);\r\n            }\r\n\r\n            if (defines.UV1) {\r\n                attribs.push(VertexBuffer.UVKind);\r\n            }\r\n\r\n            if (defines.UV2) {\r\n                attribs.push(VertexBuffer.UV2Kind);\r\n            }\r\n\r\n            if (defines.VERTEXCOLOR) {\r\n                attribs.push(VertexBuffer.ColorKind);\r\n            }\r\n\r\n            if (defines.TANGENT) {\r\n                attribs.push(VertexBuffer.TangentKind);\r\n            }\r\n\r\n            MaterialHelper.PrepareAttributesForInstances(attribs, defines);\r\n\r\n            // Legacy browser patch\r\n            const shaderName = \"fluentBackplate\";\r\n            const join = defines.toString();\r\n\r\n            const uniforms = [\r\n                \"world\",\r\n                \"viewProjection\",\r\n                \"cameraPosition\",\r\n                \"_Radius_\",\r\n                \"_Line_Width_\",\r\n                \"_Absolute_Sizes_\",\r\n                \"_Filter_Width_\",\r\n                \"_Base_Color_\",\r\n                \"_Line_Color_\",\r\n                \"_Radius_Top_Left_\",\r\n                \"_Radius_Top_Right_\",\r\n                \"_Radius_Bottom_Left_\",\r\n                \"_Radius_Bottom_Right_\",\r\n                \"_Blob_Position_\",\r\n                \"_Blob_Intensity_\",\r\n                \"_Blob_Near_Size_\",\r\n                \"_Blob_Far_Size_\",\r\n                \"_Blob_Near_Distance_\",\r\n                \"_Blob_Far_Distance_\",\r\n                \"_Blob_Fade_Length_\",\r\n                \"_Blob_Pulse_\",\r\n                \"_Blob_Fade_\",\r\n                \"_Blob_Texture_\",\r\n                \"_Blob_Position_2_\",\r\n                \"_Blob_Near_Size_2_\",\r\n                \"_Blob_Pulse_2_\",\r\n                \"_Blob_Fade_2_\",\r\n                \"_Rate_\",\r\n                \"_Highlight_Color_\",\r\n                \"_Highlight_Width_\",\r\n                \"_Highlight_Transform_\",\r\n                \"_Highlight_\",\r\n                \"_Iridescence_Intensity_\",\r\n                \"_Iridescence_Edge_Intensity_\",\r\n                \"_Angle_\",\r\n                \"_Fade_Out_\",\r\n                \"_Reflected_\",\r\n                \"_Frequency_\",\r\n                \"_Vertical_Offset_\",\r\n                \"_Iridescent_Map_\",\r\n                \"_Use_Global_Left_Index_\",\r\n                \"_Use_Global_Right_Index_\",\r\n                \"Global_Left_Index_Tip_Position\",\r\n                \"Global_Right_Index_Tip_Position\",\r\n            ];\r\n            const samplers: string[] = [\"_Blob_Texture_\", \"_Iridescent_Map_\"];\r\n            const uniformBuffers = new Array<string>();\r\n\r\n            MaterialHelper.PrepareUniformsAndSamplersList(<IEffectCreationOptions>{\r\n                uniformsNames: uniforms,\r\n                uniformBuffersNames: uniformBuffers,\r\n                samplers: samplers,\r\n                defines: defines,\r\n                maxSimultaneousLights: 4,\r\n            });\r\n\r\n            subMesh.setEffect(\r\n                scene.getEngine().createEffect(\r\n                    shaderName,\r\n                    <IEffectCreationOptions>{\r\n                        attributes: attribs,\r\n                        uniformsNames: uniforms,\r\n                        uniformBuffersNames: uniformBuffers,\r\n                        samplers: samplers,\r\n                        defines: join,\r\n                        fallbacks: fallbacks,\r\n                        onCompiled: this.onCompiled,\r\n                        onError: this.onError,\r\n                        indexParameters: { maxSimultaneousLights: 4 },\r\n                    },\r\n                    engine\r\n                ),\r\n                defines,\r\n                this._materialContext\r\n            );\r\n        }\r\n        if (!subMesh.effect || !subMesh.effect.isReady()) {\r\n            return false;\r\n        }\r\n\r\n        defines._renderId = scene.getRenderId();\r\n        subMesh.effect._wasPreviouslyReady = true;\r\n\r\n        return true;\r\n    }\r\n\r\n    public bindForSubMesh(world: Matrix, mesh: Mesh, subMesh: SubMesh): void {\r\n        const defines = <FluentBackplateMaterialDefines>subMesh.materialDefines;\r\n        if (!defines) {\r\n            return;\r\n        }\r\n\r\n        const effect = subMesh.effect;\r\n        if (!effect) {\r\n            return;\r\n        }\r\n\r\n        this._activeEffect = effect;\r\n\r\n        // Matrices\r\n        this.bindOnlyWorldMatrix(world);\r\n        this._activeEffect.setMatrix(\"viewProjection\", this.getScene().getTransformMatrix());\r\n        this._activeEffect.setVector3(\"cameraPosition\", this.getScene().activeCamera?.position ?? Vector3.ZeroReadOnly);\r\n\r\n        // \"Round Rect\"\r\n        this._activeEffect.setFloat(\"_Radius_\", this.radius);\r\n        this._activeEffect.setFloat(\"_Line_Width_\", this.lineWidth);\r\n        this._activeEffect.setFloat(\"_Absolute_Sizes_\", this.absoluteSizes ? 1.0 : 0.0);\r\n        this._activeEffect.setFloat(\"_Filter_Width_\", this._filterWidth);\r\n        this._activeEffect.setDirectColor4(\"_Base_Color_\", this.baseColor);\r\n        this._activeEffect.setDirectColor4(\"_Line_Color_\", this.lineColor);\r\n\r\n        // \"Radii Multipliers\"\r\n        this._activeEffect.setFloat(\"_Radius_Top_Left_\", 1);\r\n        this._activeEffect.setFloat(\"_Radius_Top_Right_\", 1.0);\r\n        this._activeEffect.setFloat(\"_Radius_Bottom_Left_\", 1.0);\r\n        this._activeEffect.setFloat(\"_Radius_Bottom_Right_\", 1.0);\r\n\r\n        // \"Blob\"\r\n        //define BLOB_ENABLE true;\r\n        this._activeEffect.setFloat(\"_Blob_Intensity_\", this.blobIntensity);\r\n        this._activeEffect.setFloat(\"_Blob_Near_Size_\", this.blobNearSize);\r\n        this._activeEffect.setFloat(\"_Blob_Far_Size_\", this.blobFarSize);\r\n        this._activeEffect.setFloat(\"_Blob_Near_Distance_\", this.blobNearDistance);\r\n        this._activeEffect.setFloat(\"_Blob_Far_Distance_\", this.blobFarDistance);\r\n        this._activeEffect.setFloat(\"_Blob_Fade_Length_\", this.blobFadeLength);\r\n        this._activeEffect.setFloat(\"_Blob_Pulse_\", this.blobPulse);\r\n        this._activeEffect.setFloat(\"_Blob_Fade_\", this.blobFade);\r\n\r\n        // \"Blob Texture\"\r\n        this._activeEffect.setTexture(\"_Blob_Texture_\", this._blobTexture);\r\n\r\n        // \"Blob 2\"\r\n        //define BLOB_ENABLE_2 true;\r\n        this._activeEffect.setFloat(\"_Blob_Near_Size_2_\", this.blobNearSize2);\r\n        this._activeEffect.setFloat(\"_Blob_Pulse_2_\", this.blobPulse2);\r\n        this._activeEffect.setFloat(\"_Blob_Fade_2_\", this.blobFade2);\r\n\r\n        // \"Line Highlight\"\r\n        this._activeEffect.setFloat(\"_Rate_\", this._rate);\r\n        this._activeEffect.setDirectColor4(\"_Highlight_Color_\", this.highlightColor);\r\n        this._activeEffect.setFloat(\"_Highlight_Width_\", this.highlightWidth);\r\n        this._activeEffect.setVector4(\"_Highlight_Transform_\", this._highlightTransform);\r\n        this._activeEffect.setFloat(\"_Highlight_\", this._highlight);\r\n\r\n        // \"Iridescence\"\r\n        this._activeEffect.setFloat(\"_Iridescence_Intensity_\", this.iridescenceIntensity);\r\n        this._activeEffect.setFloat(\"_Iridescence_Edge_Intensity_\", this.iridescenceEdgeIntensity);\r\n        this._activeEffect.setFloat(\"_Angle_\", this._angle);\r\n\r\n        // \"Fade\"\r\n        this._activeEffect.setFloat(\"_Fade_Out_\", this.fadeOut);\r\n\r\n        // \"Antialiasing\"\r\n        //define SMOOTH_EDGES true;\r\n\r\n        // \"ChooseAngle\"\r\n        this._activeEffect.setFloat(\"_Reflected_\", this._reflected ? 1.0 : 0.0);\r\n\r\n        // \"Multiply\"\r\n        this._activeEffect.setFloat(\"_Frequency_\", this._frequency);\r\n        this._activeEffect.setFloat(\"_Vertical_Offset_\", this._verticalOffset);\r\n\r\n        // \"Color Texture\"\r\n        //define IRIDESCENT_MAP_ENABLE true;\r\n        this._activeEffect.setTexture(\"_Iridescent_Map_\", this._iridescentMap);\r\n\r\n        // \"Global\"\r\n        this._activeEffect.setFloat(\"_Use_Global_Left_Index_\", 1.0);\r\n        this._activeEffect.setFloat(\"_Use_Global_Right_Index_\", 1.0);\r\n\r\n        this._globalLeftIndexTipPosition4.set(this.globalLeftIndexTipPosition.x, this.globalLeftIndexTipPosition.y, this.globalLeftIndexTipPosition.z, 1.0);\r\n        this._activeEffect.setVector4(\"Global_Left_Index_Tip_Position\", this._globalLeftIndexTipPosition4);\r\n\r\n        this._globalRightIndexTipPosition4.set(this.globalRightIndexTipPosition.x, this.globalRightIndexTipPosition.y, this.globalRightIndexTipPosition.z, 1.0);\r\n        this._activeEffect.setVector4(\"Global_Right_Index_Tip_Position\", this._globalRightIndexTipPosition4);\r\n\r\n        this._afterBind(mesh, this._activeEffect);\r\n    }\r\n\r\n    /**\r\n     * Get the list of animatables in the material.\r\n     * @returns the list of animatables object used in the material\r\n     */\r\n    public getAnimatables(): IAnimatable[] {\r\n        return [];\r\n    }\r\n\r\n    public dispose(forceDisposeEffect?: boolean): void {\r\n        super.dispose(forceDisposeEffect);\r\n\r\n        this._blobTexture.dispose();\r\n        this._iridescentMap.dispose();\r\n    }\r\n\r\n    public clone(name: string): FluentBackplateMaterial {\r\n        return SerializationHelper.Clone(() => new FluentBackplateMaterial(name, this.getScene()), this);\r\n    }\r\n\r\n    public serialize(): any {\r\n        const serializationObject = super.serialize();\r\n        serializationObject.customType = \"BABYLON.FluentBackplateMaterial\";\r\n        return serializationObject;\r\n    }\r\n\r\n    public getClassName(): string {\r\n        return \"FluentBackplateMaterial\";\r\n    }\r\n\r\n    // Statics\r\n    public static Parse(source: any, scene: Scene, rootUrl: string): FluentBackplateMaterial {\r\n        return SerializationHelper.Parse(() => new FluentBackplateMaterial(source.name, scene), source, scene, rootUrl);\r\n    }\r\n}\r\n\r\nRegisterClass(\"BABYLON.GUI.FluentBackplateMaterial\", FluentBackplateMaterial);\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}