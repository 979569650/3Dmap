{"ast":null,"code":"import { WebXRFeaturesManager, WebXRFeatureName } from \"../webXRFeaturesManager.js\";\nimport { Observable } from \"../../Misc/observable.js\";\nimport { WebXRAbstractFeature } from \"./WebXRAbstractFeature.js\";\n/**\n * A module that will automatically disable background meshes when entering AR and will enable them when leaving AR.\n */\nexport class WebXRBackgroundRemover extends WebXRAbstractFeature {\n  /**\n   * constructs a new background remover module\n   * @param _xrSessionManager the session manager for this module\n   * @param options read-only options to be used in this module\n   */\n  constructor(_xrSessionManager,\n  /**\n   * read-only options to be used in this module\n   */\n  options = {}) {\n    super(_xrSessionManager);\n    this.options = options;\n    /**\n     * registered observers will be triggered when the background state changes\n     */\n    this.onBackgroundStateChangedObservable = new Observable();\n  }\n  /**\n   * attach this feature\n   * Will usually be called by the features manager\n   *\n   * @returns true if successful.\n   */\n  attach() {\n    this._setBackgroundState(false);\n    return super.attach();\n  }\n  /**\n   * detach this feature.\n   * Will usually be called by the features manager\n   *\n   * @returns true if successful.\n   */\n  detach() {\n    this._setBackgroundState(true);\n    return super.detach();\n  }\n  /**\n   * Dispose this feature and all of the resources attached\n   */\n  dispose() {\n    super.dispose();\n    this.onBackgroundStateChangedObservable.clear();\n  }\n  _onXRFrame(_xrFrame) {\n    // no-op\n  }\n  _setBackgroundState(newState) {\n    const scene = this._xrSessionManager.scene;\n    if (!this.options.ignoreEnvironmentHelper) {\n      if (this.options.environmentHelperRemovalFlags) {\n        if (this.options.environmentHelperRemovalFlags.skyBox) {\n          const backgroundSkybox = scene.getMeshByName(\"BackgroundSkybox\");\n          if (backgroundSkybox) {\n            backgroundSkybox.setEnabled(newState);\n          }\n        }\n        if (this.options.environmentHelperRemovalFlags.ground) {\n          const backgroundPlane = scene.getMeshByName(\"BackgroundPlane\");\n          if (backgroundPlane) {\n            backgroundPlane.setEnabled(newState);\n          }\n        }\n      } else {\n        const backgroundHelper = scene.getMeshByName(\"BackgroundHelper\");\n        if (backgroundHelper) {\n          backgroundHelper.setEnabled(newState);\n        }\n      }\n    }\n    if (this.options.backgroundMeshes) {\n      this.options.backgroundMeshes.forEach(mesh => mesh.setEnabled(newState));\n    }\n    this.onBackgroundStateChangedObservable.notifyObservers(newState);\n  }\n}\n/**\n * The module's name\n */\nWebXRBackgroundRemover.Name = WebXRFeatureName.BACKGROUND_REMOVER;\n/**\n * The (Babylon) version of this module.\n * This is an integer representing the implementation version.\n * This number does not correspond to the WebXR specs version\n */\nWebXRBackgroundRemover.Version = 1;\n//register the plugin\nWebXRFeaturesManager.AddWebXRFeature(WebXRBackgroundRemover.Name, (xrSessionManager, options) => {\n  return () => new WebXRBackgroundRemover(xrSessionManager, options);\n}, WebXRBackgroundRemover.Version, true);","map":{"version":3,"names":["WebXRFeaturesManager","WebXRFeatureName","Observable","WebXRAbstractFeature","WebXRBackgroundRemover","constructor","_xrSessionManager","options","onBackgroundStateChangedObservable","attach","_setBackgroundState","detach","dispose","clear","_onXRFrame","_xrFrame","newState","scene","ignoreEnvironmentHelper","environmentHelperRemovalFlags","skyBox","backgroundSkybox","getMeshByName","setEnabled","ground","backgroundPlane","backgroundHelper","backgroundMeshes","forEach","mesh","notifyObservers","Name","BACKGROUND_REMOVER","Version","AddWebXRFeature","xrSessionManager"],"sources":["../../../../../dev/core/src/XR/features/WebXRBackgroundRemover.ts"],"sourcesContent":["import { WebXRFeaturesManager, WebXRFeatureName } from \"../webXRFeaturesManager\";\r\nimport type { WebXRSessionManager } from \"../webXRSessionManager\";\r\nimport type { AbstractMesh } from \"../../Meshes/abstractMesh\";\r\nimport { Observable } from \"../../Misc/observable\";\r\nimport { WebXRAbstractFeature } from \"./WebXRAbstractFeature\";\r\n\r\n/**\r\n * Options interface for the background remover plugin\r\n */\r\nexport interface IWebXRBackgroundRemoverOptions {\r\n    /**\r\n     * Further background meshes to disable when entering AR\r\n     */\r\n    backgroundMeshes?: AbstractMesh[];\r\n    /**\r\n     * flags to configure the removal of the environment helper.\r\n     * If not set, the entire background will be removed. If set, flags should be set as well.\r\n     */\r\n    environmentHelperRemovalFlags?: {\r\n        /**\r\n         * Should the skybox be removed (default false)\r\n         */\r\n        skyBox?: boolean;\r\n        /**\r\n         * Should the ground be removed (default false)\r\n         */\r\n        ground?: boolean;\r\n    };\r\n    /**\r\n     * don't disable the environment helper\r\n     */\r\n    ignoreEnvironmentHelper?: boolean;\r\n}\r\n\r\n/**\r\n * A module that will automatically disable background meshes when entering AR and will enable them when leaving AR.\r\n */\r\nexport class WebXRBackgroundRemover extends WebXRAbstractFeature {\r\n    /**\r\n     * The module's name\r\n     */\r\n    public static readonly Name = WebXRFeatureName.BACKGROUND_REMOVER;\r\n    /**\r\n     * The (Babylon) version of this module.\r\n     * This is an integer representing the implementation version.\r\n     * This number does not correspond to the WebXR specs version\r\n     */\r\n    public static readonly Version = 1;\r\n\r\n    /**\r\n     * registered observers will be triggered when the background state changes\r\n     */\r\n    public onBackgroundStateChangedObservable: Observable<boolean> = new Observable();\r\n\r\n    /**\r\n     * constructs a new background remover module\r\n     * @param _xrSessionManager the session manager for this module\r\n     * @param options read-only options to be used in this module\r\n     */\r\n    constructor(\r\n        _xrSessionManager: WebXRSessionManager,\r\n        /**\r\n         * read-only options to be used in this module\r\n         */\r\n        public readonly options: IWebXRBackgroundRemoverOptions = {}\r\n    ) {\r\n        super(_xrSessionManager);\r\n    }\r\n\r\n    /**\r\n     * attach this feature\r\n     * Will usually be called by the features manager\r\n     *\r\n     * @returns true if successful.\r\n     */\r\n    public attach(): boolean {\r\n        this._setBackgroundState(false);\r\n        return super.attach();\r\n    }\r\n\r\n    /**\r\n     * detach this feature.\r\n     * Will usually be called by the features manager\r\n     *\r\n     * @returns true if successful.\r\n     */\r\n    public detach(): boolean {\r\n        this._setBackgroundState(true);\r\n        return super.detach();\r\n    }\r\n\r\n    /**\r\n     * Dispose this feature and all of the resources attached\r\n     */\r\n    public dispose(): void {\r\n        super.dispose();\r\n        this.onBackgroundStateChangedObservable.clear();\r\n    }\r\n\r\n    protected _onXRFrame(_xrFrame: XRFrame) {\r\n        // no-op\r\n    }\r\n\r\n    private _setBackgroundState(newState: boolean) {\r\n        const scene = this._xrSessionManager.scene;\r\n        if (!this.options.ignoreEnvironmentHelper) {\r\n            if (this.options.environmentHelperRemovalFlags) {\r\n                if (this.options.environmentHelperRemovalFlags.skyBox) {\r\n                    const backgroundSkybox = scene.getMeshByName(\"BackgroundSkybox\");\r\n                    if (backgroundSkybox) {\r\n                        backgroundSkybox.setEnabled(newState);\r\n                    }\r\n                }\r\n                if (this.options.environmentHelperRemovalFlags.ground) {\r\n                    const backgroundPlane = scene.getMeshByName(\"BackgroundPlane\");\r\n                    if (backgroundPlane) {\r\n                        backgroundPlane.setEnabled(newState);\r\n                    }\r\n                }\r\n            } else {\r\n                const backgroundHelper = scene.getMeshByName(\"BackgroundHelper\");\r\n                if (backgroundHelper) {\r\n                    backgroundHelper.setEnabled(newState);\r\n                }\r\n            }\r\n        }\r\n\r\n        if (this.options.backgroundMeshes) {\r\n            this.options.backgroundMeshes.forEach((mesh) => mesh.setEnabled(newState));\r\n        }\r\n\r\n        this.onBackgroundStateChangedObservable.notifyObservers(newState);\r\n    }\r\n}\r\n\r\n//register the plugin\r\nWebXRFeaturesManager.AddWebXRFeature(\r\n    WebXRBackgroundRemover.Name,\r\n    (xrSessionManager, options) => {\r\n        return () => new WebXRBackgroundRemover(xrSessionManager, options);\r\n    },\r\n    WebXRBackgroundRemover.Version,\r\n    true\r\n);\r\n"],"mappings":"AAAA,SAASA,oBAAoB,EAAEC,gBAAgB,QAAQ,4BAA0B;AAGjF,SAASC,UAAU,QAAQ,0BAAwB;AACnD,SAASC,oBAAoB,QAAQ,2BAAyB;AA8B9D;;;AAGA,OAAM,MAAOC,sBAAuB,SAAQD,oBAAoB;EAiB5D;;;;;EAKAE,YACIC,iBAAsC;EACtC;;;EAGgBC,OAAA,GAA0C,EAAE;IAE5D,KAAK,CAACD,iBAAiB,CAAC;IAFR,KAAAC,OAAO,GAAPA,OAAO;IAf3B;;;IAGO,KAAAC,kCAAkC,GAAwB,IAAIN,UAAU,EAAE;EAejF;EAEA;;;;;;EAMOO,MAAMA,CAAA;IACT,IAAI,CAACC,mBAAmB,CAAC,KAAK,CAAC;IAC/B,OAAO,KAAK,CAACD,MAAM,EAAE;EACzB;EAEA;;;;;;EAMOE,MAAMA,CAAA;IACT,IAAI,CAACD,mBAAmB,CAAC,IAAI,CAAC;IAC9B,OAAO,KAAK,CAACC,MAAM,EAAE;EACzB;EAEA;;;EAGOC,OAAOA,CAAA;IACV,KAAK,CAACA,OAAO,EAAE;IACf,IAAI,CAACJ,kCAAkC,CAACK,KAAK,EAAE;EACnD;EAEUC,UAAUA,CAACC,QAAiB;IAClC;EAAA;EAGIL,mBAAmBA,CAACM,QAAiB;IACzC,MAAMC,KAAK,GAAG,IAAI,CAACX,iBAAiB,CAACW,KAAK;IAC1C,IAAI,CAAC,IAAI,CAACV,OAAO,CAACW,uBAAuB,EAAE;MACvC,IAAI,IAAI,CAACX,OAAO,CAACY,6BAA6B,EAAE;QAC5C,IAAI,IAAI,CAACZ,OAAO,CAACY,6BAA6B,CAACC,MAAM,EAAE;UACnD,MAAMC,gBAAgB,GAAGJ,KAAK,CAACK,aAAa,CAAC,kBAAkB,CAAC;UAChE,IAAID,gBAAgB,EAAE;YAClBA,gBAAgB,CAACE,UAAU,CAACP,QAAQ,CAAC;;;QAG7C,IAAI,IAAI,CAACT,OAAO,CAACY,6BAA6B,CAACK,MAAM,EAAE;UACnD,MAAMC,eAAe,GAAGR,KAAK,CAACK,aAAa,CAAC,iBAAiB,CAAC;UAC9D,IAAIG,eAAe,EAAE;YACjBA,eAAe,CAACF,UAAU,CAACP,QAAQ,CAAC;;;OAG/C,MAAM;QACH,MAAMU,gBAAgB,GAAGT,KAAK,CAACK,aAAa,CAAC,kBAAkB,CAAC;QAChE,IAAII,gBAAgB,EAAE;UAClBA,gBAAgB,CAACH,UAAU,CAACP,QAAQ,CAAC;;;;IAKjD,IAAI,IAAI,CAACT,OAAO,CAACoB,gBAAgB,EAAE;MAC/B,IAAI,CAACpB,OAAO,CAACoB,gBAAgB,CAACC,OAAO,CAAEC,IAAI,IAAKA,IAAI,CAACN,UAAU,CAACP,QAAQ,CAAC,CAAC;;IAG9E,IAAI,CAACR,kCAAkC,CAACsB,eAAe,CAACd,QAAQ,CAAC;EACrE;;AA9FA;;;AAGuBZ,sBAAA,CAAA2B,IAAI,GAAG9B,gBAAgB,CAAC+B,kBAAkB;AACjE;;;;;AAKuB5B,sBAAA,CAAA6B,OAAO,GAAG,CAAC;AAwFtC;AACAjC,oBAAoB,CAACkC,eAAe,CAChC9B,sBAAsB,CAAC2B,IAAI,EAC3B,CAACI,gBAAgB,EAAE5B,OAAO,KAAI;EAC1B,OAAO,MAAM,IAAIH,sBAAsB,CAAC+B,gBAAgB,EAAE5B,OAAO,CAAC;AACtE,CAAC,EACDH,sBAAsB,CAAC6B,OAAO,EAC9B,IAAI,CACP"},"metadata":{},"sourceType":"module","externalDependencies":[]}