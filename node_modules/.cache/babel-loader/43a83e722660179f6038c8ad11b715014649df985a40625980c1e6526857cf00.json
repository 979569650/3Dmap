{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { NodeMaterialBlock } from \"../../nodeMaterialBlock.js\";\nimport { NodeMaterialBlockConnectionPointTypes } from \"../../Enums/nodeMaterialBlockConnectionPointTypes.js\";\nimport { NodeMaterialBlockTargets } from \"../../Enums/nodeMaterialBlockTargets.js\";\nimport { RegisterClass } from \"../../../../Misc/typeStore.js\";\n/**\n * Block used to output values on the prepass textures\n */\nexport class PrePassOutputBlock extends NodeMaterialBlock {\n  /**\n   * Create a new PrePassOutputBlock\n   * @param name defines the block name\n   */\n  constructor(name) {\n    super(name, NodeMaterialBlockTargets.Fragment, true);\n    this.registerInput(\"viewDepth\", NodeMaterialBlockConnectionPointTypes.Float, true);\n    this.registerInput(\"worldPosition\", NodeMaterialBlockConnectionPointTypes.AutoDetect, true);\n    this.registerInput(\"viewNormal\", NodeMaterialBlockConnectionPointTypes.AutoDetect, true);\n    this.registerInput(\"reflectivity\", NodeMaterialBlockConnectionPointTypes.AutoDetect, true);\n    this.inputs[1].addExcludedConnectionPointFromAllowedTypes(NodeMaterialBlockConnectionPointTypes.Vector3 | NodeMaterialBlockConnectionPointTypes.Vector4);\n    this.inputs[2].addExcludedConnectionPointFromAllowedTypes(NodeMaterialBlockConnectionPointTypes.Vector3 | NodeMaterialBlockConnectionPointTypes.Vector4);\n    this.inputs[3].addExcludedConnectionPointFromAllowedTypes(NodeMaterialBlockConnectionPointTypes.Vector3 | NodeMaterialBlockConnectionPointTypes.Vector4 | NodeMaterialBlockConnectionPointTypes.Color3 | NodeMaterialBlockConnectionPointTypes.Color4);\n  }\n  /**\n   * Gets the current class name\n   * @returns the class name\n   */\n  getClassName() {\n    return \"PrePassOutputBlock\";\n  }\n  /**\n   * Gets the view depth component\n   */\n  get viewDepth() {\n    return this._inputs[0];\n  }\n  /**\n   * Gets the world position component\n   */\n  get worldPosition() {\n    return this._inputs[1];\n  }\n  /**\n   * Gets the view normal component\n   */\n  get viewNormal() {\n    return this._inputs[2];\n  }\n  /**\n   * Gets the reflectivity component\n   */\n  get reflectivity() {\n    return this._inputs[3];\n  }\n  _buildBlock(state) {\n    super._buildBlock(state);\n    const worldPosition = this.worldPosition;\n    const viewNormal = this.viewNormal;\n    const viewDepth = this.viewDepth;\n    const reflectivity = this.reflectivity;\n    state.sharedData.blocksWithDefines.push(this);\n    const comments = `//${this.name}`;\n    state._emitFunctionFromInclude(\"helperFunctions\", comments);\n    state.compilationString += `#if defined(PREPASS)\\r\\n`;\n    state.compilationString += `#ifdef PREPASS_DEPTH\\r\\n`;\n    if (viewDepth.connectedPoint) {\n      state.compilationString += ` gl_FragData[PREPASS_DEPTH_INDEX] = vec4(${viewDepth.associatedVariableName}, 0.0, 0.0, 1.0);\\r\\n`;\n    } else {\n      // We have to write something on the viewDepth output or it will raise a gl error\n      state.compilationString += ` gl_FragData[PREPASS_DEPTH_INDEX] = vec4(0.0, 0.0, 0.0, 0.0);\\r\\n`;\n    }\n    state.compilationString += `#endif\\r\\n`;\n    state.compilationString += `#ifdef PREPASS_POSITION\\r\\n`;\n    if (worldPosition.connectedPoint) {\n      state.compilationString += ` gl_FragData[PREPASS_POSITION_INDEX] = vec4(${worldPosition.associatedVariableName}.rgb, ${worldPosition.connectedPoint.type === NodeMaterialBlockConnectionPointTypes.Vector4 ? worldPosition.associatedVariableName + \".a\" : \"1.0\"});\\r\\n`;\n    } else {\n      // We have to write something on the position output or it will raise a gl error\n      state.compilationString += ` gl_FragData[PREPASS_POSITION_INDEX] = vec4(0.0, 0.0, 0.0, 0.0);\\r\\n`;\n    }\n    state.compilationString += `#endif\\r\\n`;\n    state.compilationString += `#ifdef PREPASS_NORMAL\\r\\n`;\n    if (viewNormal.connectedPoint) {\n      state.compilationString += ` gl_FragData[PREPASS_NORMAL_INDEX] = vec4(${viewNormal.associatedVariableName}.rgb, ${viewNormal.connectedPoint.type === NodeMaterialBlockConnectionPointTypes.Vector4 ? viewNormal.associatedVariableName + \".a\" : \"1.0\"});\\r\\n`;\n    } else {\n      // We have to write something on the normal output or it will raise a gl error\n      state.compilationString += ` gl_FragData[PREPASS_NORMAL_INDEX] = vec4(0.0, 0.0, 0.0, 0.0);\\r\\n`;\n    }\n    state.compilationString += `#endif\\r\\n`;\n    state.compilationString += `#ifdef PREPASS_REFLECTIVITY\\r\\n`;\n    if (reflectivity.connectedPoint) {\n      state.compilationString += ` gl_FragData[PREPASS_REFLECTIVITY_INDEX] = vec4(${reflectivity.associatedVariableName}.rgb, ${reflectivity.connectedPoint.type === NodeMaterialBlockConnectionPointTypes.Vector4 ? reflectivity.associatedVariableName + \".a\" : \"1.0\"});\\r\\n`;\n    } else {\n      // We have to write something on the reflectivity output or it will raise a gl error\n      state.compilationString += ` gl_FragData[PREPASS_REFLECTIVITY_INDEX] = vec4(0.0, 0.0, 0.0, 1.0);\\r\\n`;\n    }\n    state.compilationString += `#endif\\r\\n`;\n    state.compilationString += `#endif\\r\\n`;\n    return this;\n  }\n}\nRegisterClass(\"BABYLON.PrePassOutputBlock\", PrePassOutputBlock);","map":{"version":3,"names":["NodeMaterialBlock","NodeMaterialBlockConnectionPointTypes","NodeMaterialBlockTargets","RegisterClass","PrePassOutputBlock","constructor","name","Fragment","registerInput","Float","AutoDetect","inputs","addExcludedConnectionPointFromAllowedTypes","Vector3","Vector4","Color3","Color4","getClassName","viewDepth","_inputs","worldPosition","viewNormal","reflectivity","_buildBlock","state","sharedData","blocksWithDefines","push","comments","_emitFunctionFromInclude","compilationString","connectedPoint","associatedVariableName","type"],"sources":["../../../../../../../dev/core/src/Materials/Node/Blocks/Fragment/prePassOutputBlock.ts"],"sourcesContent":["import { NodeMaterialBlock } from \"../../nodeMaterialBlock\";\r\nimport { NodeMaterialBlockConnectionPointTypes } from \"../../Enums/nodeMaterialBlockConnectionPointTypes\";\r\nimport type { NodeMaterialBuildState } from \"../../nodeMaterialBuildState\";\r\nimport { NodeMaterialBlockTargets } from \"../../Enums/nodeMaterialBlockTargets\";\r\nimport type { NodeMaterialConnectionPoint } from \"../../nodeMaterialBlockConnectionPoint\";\r\nimport { RegisterClass } from \"../../../../Misc/typeStore\";\r\n\r\n/**\r\n * Block used to output values on the prepass textures\r\n */\r\nexport class PrePassOutputBlock extends NodeMaterialBlock {\r\n    /**\r\n     * Create a new PrePassOutputBlock\r\n     * @param name defines the block name\r\n     */\r\n    public constructor(name: string) {\r\n        super(name, NodeMaterialBlockTargets.Fragment, true);\r\n\r\n        this.registerInput(\"viewDepth\", NodeMaterialBlockConnectionPointTypes.Float, true);\r\n        this.registerInput(\"worldPosition\", NodeMaterialBlockConnectionPointTypes.AutoDetect, true);\r\n        this.registerInput(\"viewNormal\", NodeMaterialBlockConnectionPointTypes.AutoDetect, true);\r\n        this.registerInput(\"reflectivity\", NodeMaterialBlockConnectionPointTypes.AutoDetect, true);\r\n\r\n        this.inputs[1].addExcludedConnectionPointFromAllowedTypes(NodeMaterialBlockConnectionPointTypes.Vector3 | NodeMaterialBlockConnectionPointTypes.Vector4);\r\n        this.inputs[2].addExcludedConnectionPointFromAllowedTypes(NodeMaterialBlockConnectionPointTypes.Vector3 | NodeMaterialBlockConnectionPointTypes.Vector4);\r\n        this.inputs[3].addExcludedConnectionPointFromAllowedTypes(\r\n            NodeMaterialBlockConnectionPointTypes.Vector3 |\r\n                NodeMaterialBlockConnectionPointTypes.Vector4 |\r\n                NodeMaterialBlockConnectionPointTypes.Color3 |\r\n                NodeMaterialBlockConnectionPointTypes.Color4\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Gets the current class name\r\n     * @returns the class name\r\n     */\r\n    public getClassName() {\r\n        return \"PrePassOutputBlock\";\r\n    }\r\n\r\n    /**\r\n     * Gets the view depth component\r\n     */\r\n    public get viewDepth(): NodeMaterialConnectionPoint {\r\n        return this._inputs[0];\r\n    }\r\n\r\n    /**\r\n     * Gets the world position component\r\n     */\r\n    public get worldPosition(): NodeMaterialConnectionPoint {\r\n        return this._inputs[1];\r\n    }\r\n\r\n    /**\r\n     * Gets the view normal component\r\n     */\r\n    public get viewNormal(): NodeMaterialConnectionPoint {\r\n        return this._inputs[2];\r\n    }\r\n\r\n    /**\r\n     * Gets the reflectivity component\r\n     */\r\n    public get reflectivity(): NodeMaterialConnectionPoint {\r\n        return this._inputs[3];\r\n    }\r\n\r\n    protected _buildBlock(state: NodeMaterialBuildState) {\r\n        super._buildBlock(state);\r\n\r\n        const worldPosition = this.worldPosition;\r\n        const viewNormal = this.viewNormal;\r\n        const viewDepth = this.viewDepth;\r\n        const reflectivity = this.reflectivity;\r\n\r\n        state.sharedData.blocksWithDefines.push(this);\r\n\r\n        const comments = `//${this.name}`;\r\n        state._emitFunctionFromInclude(\"helperFunctions\", comments);\r\n\r\n        state.compilationString += `#if defined(PREPASS)\\r\\n`;\r\n        state.compilationString += `#ifdef PREPASS_DEPTH\\r\\n`;\r\n        if (viewDepth.connectedPoint) {\r\n            state.compilationString += ` gl_FragData[PREPASS_DEPTH_INDEX] = vec4(${viewDepth.associatedVariableName}, 0.0, 0.0, 1.0);\\r\\n`;\r\n        } else {\r\n            // We have to write something on the viewDepth output or it will raise a gl error\r\n            state.compilationString += ` gl_FragData[PREPASS_DEPTH_INDEX] = vec4(0.0, 0.0, 0.0, 0.0);\\r\\n`;\r\n        }\r\n        state.compilationString += `#endif\\r\\n`;\r\n        state.compilationString += `#ifdef PREPASS_POSITION\\r\\n`;\r\n        if (worldPosition.connectedPoint) {\r\n            state.compilationString += ` gl_FragData[PREPASS_POSITION_INDEX] = vec4(${worldPosition.associatedVariableName}.rgb, ${\r\n                worldPosition.connectedPoint.type === NodeMaterialBlockConnectionPointTypes.Vector4 ? worldPosition.associatedVariableName + \".a\" : \"1.0\"\r\n            });\\r\\n`;\r\n        } else {\r\n            // We have to write something on the position output or it will raise a gl error\r\n            state.compilationString += ` gl_FragData[PREPASS_POSITION_INDEX] = vec4(0.0, 0.0, 0.0, 0.0);\\r\\n`;\r\n        }\r\n        state.compilationString += `#endif\\r\\n`;\r\n        state.compilationString += `#ifdef PREPASS_NORMAL\\r\\n`;\r\n        if (viewNormal.connectedPoint) {\r\n            state.compilationString += ` gl_FragData[PREPASS_NORMAL_INDEX] = vec4(${viewNormal.associatedVariableName}.rgb, ${\r\n                viewNormal.connectedPoint.type === NodeMaterialBlockConnectionPointTypes.Vector4 ? viewNormal.associatedVariableName + \".a\" : \"1.0\"\r\n            });\\r\\n`;\r\n        } else {\r\n            // We have to write something on the normal output or it will raise a gl error\r\n            state.compilationString += ` gl_FragData[PREPASS_NORMAL_INDEX] = vec4(0.0, 0.0, 0.0, 0.0);\\r\\n`;\r\n        }\r\n        state.compilationString += `#endif\\r\\n`;\r\n        state.compilationString += `#ifdef PREPASS_REFLECTIVITY\\r\\n`;\r\n        if (reflectivity.connectedPoint) {\r\n            state.compilationString += ` gl_FragData[PREPASS_REFLECTIVITY_INDEX] = vec4(${reflectivity.associatedVariableName}.rgb, ${\r\n                reflectivity.connectedPoint.type === NodeMaterialBlockConnectionPointTypes.Vector4 ? reflectivity.associatedVariableName + \".a\" : \"1.0\"\r\n            });\\r\\n`;\r\n        } else {\r\n            // We have to write something on the reflectivity output or it will raise a gl error\r\n            state.compilationString += ` gl_FragData[PREPASS_REFLECTIVITY_INDEX] = vec4(0.0, 0.0, 0.0, 1.0);\\r\\n`;\r\n        }\r\n        state.compilationString += `#endif\\r\\n`;\r\n        state.compilationString += `#endif\\r\\n`;\r\n\r\n        return this;\r\n    }\r\n}\r\n\r\nRegisterClass(\"BABYLON.PrePassOutputBlock\", PrePassOutputBlock);\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}