{"ast":null,"code":"/**\n * ThinSprite Class used to represent a thin sprite\n * This is the base class for sprites but can also directly be used with ThinEngine\n * @see https://doc.babylonjs.com/features/featuresDeepDive/sprites\n */\nexport class ThinSprite {\n  /**\n   * Returns a boolean indicating if the animation is started\n   */\n  get animationStarted() {\n    return this._animationStarted;\n  }\n  /** Gets the initial key for the animation (setting it will restart the animation)  */\n  get fromIndex() {\n    return this._fromIndex;\n  }\n  /** Gets or sets the end key for the animation (setting it will restart the animation)  */\n  get toIndex() {\n    return this._toIndex;\n  }\n  /** Gets or sets a boolean indicating if the animation is looping (setting it will restart the animation)  */\n  get loopAnimation() {\n    return this._loopAnimation;\n  }\n  /** Gets or sets the delay between cell changes (setting it will restart the animation)  */\n  get delay() {\n    return Math.max(this._delay, 1);\n  }\n  /**\n   * Creates a new Thin Sprite\n   */\n  constructor() {\n    /** Gets or sets the width */\n    this.width = 1.0;\n    /** Gets or sets the height */\n    this.height = 1.0;\n    /** Gets or sets rotation angle */\n    this.angle = 0;\n    /** Gets or sets a boolean indicating if UV coordinates should be inverted in U axis */\n    this.invertU = false;\n    /** Gets or sets a boolean indicating if UV coordinates should be inverted in B axis */\n    this.invertV = false;\n    /** Gets or sets a boolean indicating if the sprite is visible (renderable). Default is true */\n    this.isVisible = true;\n    this._animationStarted = false;\n    this._loopAnimation = false;\n    this._fromIndex = 0;\n    this._toIndex = 0;\n    this._delay = 0;\n    this._direction = 1;\n    this._time = 0;\n    this._onBaseAnimationEnd = null;\n    this.position = {\n      x: 1.0,\n      y: 1.0,\n      z: 1.0\n    };\n    this.color = {\n      r: 1.0,\n      g: 1.0,\n      b: 1.0,\n      a: 1.0\n    };\n  }\n  /**\n   * Starts an animation\n   * @param from defines the initial key\n   * @param to defines the end key\n   * @param loop defines if the animation must loop\n   * @param delay defines the start delay (in ms)\n   * @param onAnimationEnd defines a callback for when the animation ends\n   */\n  playAnimation(from, to, loop, delay, onAnimationEnd) {\n    this._fromIndex = from;\n    this._toIndex = to;\n    this._loopAnimation = loop;\n    this._delay = delay || 1;\n    this._animationStarted = true;\n    this._onBaseAnimationEnd = onAnimationEnd;\n    if (from < to) {\n      this._direction = 1;\n    } else {\n      this._direction = -1;\n      this._toIndex = from;\n      this._fromIndex = to;\n    }\n    this.cellIndex = from;\n    this._time = 0;\n  }\n  /** Stops current animation (if any) */\n  stopAnimation() {\n    this._animationStarted = false;\n  }\n  /**\n   * @internal\n   */\n  _animate(deltaTime) {\n    if (!this._animationStarted) {\n      return;\n    }\n    this._time += deltaTime;\n    if (this._time > this._delay) {\n      this._time = this._time % this._delay;\n      this.cellIndex += this._direction;\n      if (this._direction > 0 && this.cellIndex > this._toIndex || this._direction < 0 && this.cellIndex < this._fromIndex) {\n        if (this._loopAnimation) {\n          this.cellIndex = this._direction > 0 ? this._fromIndex : this._toIndex;\n        } else {\n          this.cellIndex = this._toIndex;\n          this._animationStarted = false;\n          if (this._onBaseAnimationEnd) {\n            this._onBaseAnimationEnd();\n          }\n        }\n      }\n    }\n  }\n}","map":{"version":3,"names":["ThinSprite","animationStarted","_animationStarted","fromIndex","_fromIndex","toIndex","_toIndex","loopAnimation","_loopAnimation","delay","Math","max","_delay","constructor","width","height","angle","invertU","invertV","isVisible","_direction","_time","_onBaseAnimationEnd","position","x","y","z","color","r","g","b","a","playAnimation","from","to","loop","onAnimationEnd","cellIndex","stopAnimation","_animate","deltaTime"],"sources":["../../../../dev/core/src/Sprites/thinSprite.ts"],"sourcesContent":["import type { IVector3Like, IColor4Like } from \"../Maths/math.like\";\r\nimport type { Nullable } from \"../types\";\r\n\r\n/**\r\n * ThinSprite Class used to represent a thin sprite\r\n * This is the base class for sprites but can also directly be used with ThinEngine\r\n * @see https://doc.babylonjs.com/features/featuresDeepDive/sprites\r\n */\r\nexport class ThinSprite {\r\n    /** Gets or sets the cell index in the sprite sheet */\r\n    public cellIndex: number;\r\n    /** Gets or sets the cell reference in the sprite sheet, uses sprite's filename when added to sprite sheet */\r\n    public cellRef: string;\r\n    /** Gets or sets the current world position */\r\n    public position: IVector3Like;\r\n    /** Gets or sets the main color */\r\n    public color: IColor4Like;\r\n    /** Gets or sets the width */\r\n    public width = 1.0;\r\n    /** Gets or sets the height */\r\n    public height = 1.0;\r\n    /** Gets or sets rotation angle */\r\n    public angle = 0;\r\n    /** Gets or sets a boolean indicating if UV coordinates should be inverted in U axis */\r\n    public invertU = false;\r\n    /** Gets or sets a boolean indicating if UV coordinates should be inverted in B axis */\r\n    public invertV = false;\r\n    /** Gets or sets a boolean indicating if the sprite is visible (renderable). Default is true */\r\n    public isVisible = true;\r\n\r\n    /**\r\n     * Returns a boolean indicating if the animation is started\r\n     */\r\n    public get animationStarted() {\r\n        return this._animationStarted;\r\n    }\r\n\r\n    /** Gets the initial key for the animation (setting it will restart the animation)  */\r\n    public get fromIndex() {\r\n        return this._fromIndex;\r\n    }\r\n\r\n    /** Gets or sets the end key for the animation (setting it will restart the animation)  */\r\n    public get toIndex() {\r\n        return this._toIndex;\r\n    }\r\n\r\n    /** Gets or sets a boolean indicating if the animation is looping (setting it will restart the animation)  */\r\n    public get loopAnimation() {\r\n        return this._loopAnimation;\r\n    }\r\n\r\n    /** Gets or sets the delay between cell changes (setting it will restart the animation)  */\r\n    public get delay() {\r\n        return Math.max(this._delay, 1);\r\n    }\r\n\r\n    /** @internal */\r\n    public _xOffset: number;\r\n    /** @internal */\r\n    public _yOffset: number;\r\n    /** @internal */\r\n    public _xSize: number;\r\n    /** @internal */\r\n    public _ySize: number;\r\n\r\n    private _animationStarted = false;\r\n    protected _loopAnimation = false;\r\n    protected _fromIndex = 0;\r\n    protected _toIndex = 0;\r\n    protected _delay = 0;\r\n    private _direction = 1;\r\n    private _time = 0;\r\n    private _onBaseAnimationEnd: Nullable<() => void> = null;\r\n\r\n    /**\r\n     * Creates a new Thin Sprite\r\n     */\r\n    constructor() {\r\n        this.position = { x: 1.0, y: 1.0, z: 1.0 };\r\n        this.color = { r: 1.0, g: 1.0, b: 1.0, a: 1.0 };\r\n    }\r\n\r\n    /**\r\n     * Starts an animation\r\n     * @param from defines the initial key\r\n     * @param to defines the end key\r\n     * @param loop defines if the animation must loop\r\n     * @param delay defines the start delay (in ms)\r\n     * @param onAnimationEnd defines a callback for when the animation ends\r\n     */\r\n    public playAnimation(from: number, to: number, loop: boolean, delay: number, onAnimationEnd: Nullable<() => void>): void {\r\n        this._fromIndex = from;\r\n        this._toIndex = to;\r\n        this._loopAnimation = loop;\r\n        this._delay = delay || 1;\r\n        this._animationStarted = true;\r\n        this._onBaseAnimationEnd = onAnimationEnd;\r\n\r\n        if (from < to) {\r\n            this._direction = 1;\r\n        } else {\r\n            this._direction = -1;\r\n            this._toIndex = from;\r\n            this._fromIndex = to;\r\n        }\r\n\r\n        this.cellIndex = from;\r\n        this._time = 0;\r\n    }\r\n\r\n    /** Stops current animation (if any) */\r\n    public stopAnimation(): void {\r\n        this._animationStarted = false;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _animate(deltaTime: number): void {\r\n        if (!this._animationStarted) {\r\n            return;\r\n        }\r\n\r\n        this._time += deltaTime;\r\n        if (this._time > this._delay) {\r\n            this._time = this._time % this._delay;\r\n            this.cellIndex += this._direction;\r\n            if ((this._direction > 0 && this.cellIndex > this._toIndex) || (this._direction < 0 && this.cellIndex < this._fromIndex)) {\r\n                if (this._loopAnimation) {\r\n                    this.cellIndex = this._direction > 0 ? this._fromIndex : this._toIndex;\r\n                } else {\r\n                    this.cellIndex = this._toIndex;\r\n                    this._animationStarted = false;\r\n                    if (this._onBaseAnimationEnd) {\r\n                        this._onBaseAnimationEnd();\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}