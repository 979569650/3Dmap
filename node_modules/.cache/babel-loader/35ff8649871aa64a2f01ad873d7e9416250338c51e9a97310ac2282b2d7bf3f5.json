{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { RegisterClass } from \"../../../../Misc/typeStore.js\";\nimport { FlowGraphExecutionBlock } from \"../../../flowGraphExecutionBlock.js\";\nimport { RichTypeNumber } from \"../../../flowGraphRichTypes.js\";\n/**\n * @experimental\n * A block that has an input flow and routes it to any potential output flows, randomly or sequentially\n * @see https://docs.google.com/document/d/1MT7gL-IEn_PUw-4XGBazMxsyqsxqgAVGYcNeC4Cj_9Q/edit#heading=h.i2sn85fbjo60\n */\nexport class FlowGraphMultiGateBlock extends FlowGraphExecutionBlock {\n  constructor(config) {\n    super(config);\n    this.config = config;\n    this._cachedUnusedIndexes = [];\n    this.reset = this._registerSignalInput(\"reset\");\n    this.currentIndex = this._registerDataOutput(\"currentIndex\", RichTypeNumber);\n  }\n  configure() {\n    super.configure();\n    this.config.startIndex = this.config.startIndex !== undefined ? this.config.startIndex : 0;\n    this.config.startIndex = Math.max(0, Math.min(this.config.startIndex, this.config.numberOutputFlows - 1));\n    this.outFlows = [];\n    for (let i = 0; i < this.config.numberOutputFlows; i++) {\n      this.outFlows.push(this._registerSignalOutput(`out${i}`));\n    }\n  }\n  _getUnusedIndexes(context) {\n    const result = this._cachedUnusedIndexes;\n    result.length = 0;\n    if (!context._hasExecutionVariable(this, \"unusedIndexes\")) {\n      for (let i = 0; i < this.config.numberOutputFlows; i++) {\n        result.push(i);\n      }\n    } else {\n      const contextUnusedIndexes = context._getExecutionVariable(this, \"unusedIndexes\");\n      for (let i = 0; i < contextUnusedIndexes.length; i++) {\n        result.push(contextUnusedIndexes[i]);\n      }\n    }\n    return result;\n  }\n  _getNextOutput(currentIndex, unusedIndexes) {\n    if (this.config.isRandom) {\n      const nextIndex = Math.floor(Math.random() * unusedIndexes.length);\n      return unusedIndexes[nextIndex];\n    } else {\n      return currentIndex + 1;\n    }\n  }\n  _execute(context, callingSignal) {\n    var _a;\n    const currentIndex = (_a = context._getExecutionVariable(this, \"currentIndex\")) !== null && _a !== void 0 ? _a : this.config.startIndex - 1;\n    let unusedIndexes = this._getUnusedIndexes(context);\n    if (callingSignal === this.reset) {\n      context._deleteExecutionVariable(this, \"currentIndex\");\n      context._deleteExecutionVariable(this, \"unusedIndexes\");\n      return;\n    }\n    let nextIndex = this._getNextOutput(currentIndex, unusedIndexes);\n    if (nextIndex >= this.config.numberOutputFlows && this.config.loop) {\n      nextIndex = 0;\n    } else if (nextIndex >= this.config.numberOutputFlows && !this.config.loop) {\n      return;\n    }\n    unusedIndexes = unusedIndexes.filter(i => i !== nextIndex);\n    if (unusedIndexes.length === 0) {\n      for (let i = 0; i < this.config.numberOutputFlows; i++) {\n        unusedIndexes.push(i);\n      }\n    }\n    context._setExecutionVariable(this, \"unusedIndexes\", unusedIndexes);\n    context._setExecutionVariable(this, \"currentIndex\", nextIndex);\n    this.currentIndex.setValue(nextIndex, context);\n    this.outFlows[nextIndex]._activateSignal(context);\n  }\n  getClassName() {\n    return \"FGMultiGateBlock\";\n  }\n}\nRegisterClass(\"FGMultiGateBlock\", FlowGraphMultiGateBlock);","map":{"version":3,"names":["RegisterClass","FlowGraphExecutionBlock","RichTypeNumber","FlowGraphMultiGateBlock","constructor","config","_cachedUnusedIndexes","reset","_registerSignalInput","currentIndex","_registerDataOutput","configure","startIndex","undefined","Math","max","min","numberOutputFlows","outFlows","i","push","_registerSignalOutput","_getUnusedIndexes","context","result","length","_hasExecutionVariable","contextUnusedIndexes","_getExecutionVariable","_getNextOutput","unusedIndexes","isRandom","nextIndex","floor","random","_execute","callingSignal","_a","_deleteExecutionVariable","loop","filter","_setExecutionVariable","setValue","_activateSignal","getClassName"],"sources":["../../../../../../../dev/core/src/FlowGraph/Blocks/Execution/ControlFlow/flowGraphMultiGateBlock.ts"],"sourcesContent":["import { RegisterClass } from \"../../../../Misc/typeStore\";\r\nimport type { FlowGraphContext } from \"../../../flowGraphContext\";\r\nimport type { FlowGraphDataConnection } from \"../../../flowGraphDataConnection\";\r\nimport { FlowGraphExecutionBlock } from \"../../../flowGraphExecutionBlock\";\r\nimport { RichTypeNumber } from \"../../../flowGraphRichTypes\";\r\nimport type { FlowGraphSignalConnection } from \"../../../flowGraphSignalConnection\";\r\nimport type { IFlowGraphBlockConfiguration } from \"../../../flowGraphBlock\";\r\n/**\r\n * @experimental\r\n * Configuration for the multi gate block.\r\n */\r\nexport interface IFlowGraphMultiGateBlockConfiguration extends IFlowGraphBlockConfiguration {\r\n    /**\r\n     * The number of output flows.\r\n     */\r\n    numberOutputFlows: number;\r\n    /**\r\n     * If the block should pick a random output flow from the ones that haven't been executed. Default to false.\r\n     */\r\n    isRandom?: boolean;\r\n    /**\r\n     * If the block should loop back to the first output flow after executing the last one. Default to false.\r\n     */\r\n    loop?: boolean;\r\n    /**\r\n     * The index of the output flow to start with. Default to 0.\r\n     */\r\n    startIndex?: number;\r\n}\r\n/**\r\n * @experimental\r\n * A block that has an input flow and routes it to any potential output flows, randomly or sequentially\r\n * @see https://docs.google.com/document/d/1MT7gL-IEn_PUw-4XGBazMxsyqsxqgAVGYcNeC4Cj_9Q/edit#heading=h.i2sn85fbjo60\r\n */\r\nexport class FlowGraphMultiGateBlock extends FlowGraphExecutionBlock {\r\n    /**\r\n     * Input connection: Resets the gate.\r\n     */\r\n    public readonly reset: FlowGraphSignalConnection;\r\n    /**\r\n     * Output connections: The output flows.\r\n     */\r\n    public outFlows: FlowGraphSignalConnection[];\r\n    /**\r\n     * Output connection: The index of the current output flow.\r\n     */\r\n    public readonly currentIndex: FlowGraphDataConnection<number>;\r\n    private _cachedUnusedIndexes: number[] = [];\r\n\r\n    constructor(public config: IFlowGraphMultiGateBlockConfiguration) {\r\n        super(config);\r\n        this.reset = this._registerSignalInput(\"reset\");\r\n        this.currentIndex = this._registerDataOutput(\"currentIndex\", RichTypeNumber);\r\n    }\r\n\r\n    public configure() {\r\n        super.configure();\r\n        this.config.startIndex = this.config.startIndex !== undefined ? this.config.startIndex : 0;\r\n        this.config.startIndex = Math.max(0, Math.min(this.config.startIndex!, this.config.numberOutputFlows - 1));\r\n        this.outFlows = [];\r\n        for (let i = 0; i < this.config.numberOutputFlows; i++) {\r\n            this.outFlows.push(this._registerSignalOutput(`out${i}`));\r\n        }\r\n    }\r\n\r\n    private _getUnusedIndexes(context: FlowGraphContext): number[] {\r\n        const result = this._cachedUnusedIndexes;\r\n        result.length = 0;\r\n        if (!context._hasExecutionVariable(this, \"unusedIndexes\")) {\r\n            for (let i = 0; i < this.config.numberOutputFlows; i++) {\r\n                result.push(i);\r\n            }\r\n        } else {\r\n            const contextUnusedIndexes = context._getExecutionVariable(this, \"unusedIndexes\");\r\n            for (let i = 0; i < contextUnusedIndexes.length; i++) {\r\n                result.push(contextUnusedIndexes[i]);\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n\r\n    private _getNextOutput(currentIndex: number, unusedIndexes: number[]): number {\r\n        if (this.config.isRandom) {\r\n            const nextIndex = Math.floor(Math.random() * unusedIndexes.length);\r\n            return unusedIndexes[nextIndex];\r\n        } else {\r\n            return currentIndex + 1;\r\n        }\r\n    }\r\n\r\n    public _execute(context: FlowGraphContext, callingSignal: FlowGraphSignalConnection): void {\r\n        const currentIndex = context._getExecutionVariable(this, \"currentIndex\") ?? this.config.startIndex! - 1;\r\n        let unusedIndexes = this._getUnusedIndexes(context);\r\n\r\n        if (callingSignal === this.reset) {\r\n            context._deleteExecutionVariable(this, \"currentIndex\");\r\n            context._deleteExecutionVariable(this, \"unusedIndexes\");\r\n            return;\r\n        }\r\n\r\n        let nextIndex = this._getNextOutput(currentIndex, unusedIndexes);\r\n        if (nextIndex >= this.config.numberOutputFlows && this.config.loop) {\r\n            nextIndex = 0;\r\n        } else if (nextIndex >= this.config.numberOutputFlows && !this.config.loop) {\r\n            return;\r\n        }\r\n\r\n        unusedIndexes = unusedIndexes.filter((i) => i !== nextIndex);\r\n        if (unusedIndexes.length === 0) {\r\n            for (let i = 0; i < this.config.numberOutputFlows; i++) {\r\n                unusedIndexes.push(i);\r\n            }\r\n        }\r\n        context._setExecutionVariable(this, \"unusedIndexes\", unusedIndexes);\r\n        context._setExecutionVariable(this, \"currentIndex\", nextIndex);\r\n        this.currentIndex.setValue(nextIndex, context);\r\n        this.outFlows[nextIndex]._activateSignal(context);\r\n    }\r\n\r\n    public getClassName(): string {\r\n        return \"FGMultiGateBlock\";\r\n    }\r\n}\r\nRegisterClass(\"FGMultiGateBlock\", FlowGraphMultiGateBlock);\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}