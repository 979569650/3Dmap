{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { Logger } from \"../../Misc/logger.js\";\nimport { Observable } from \"../../Misc/observable.js\";\nimport { FreeCamera } from \"../../Cameras/freeCamera.js\";\nimport { TargetCamera } from \"../../Cameras/targetCamera.js\";\nimport { DeviceOrientationCamera } from \"../../Cameras/deviceOrientationCamera.js\";\nimport { VRDeviceOrientationFreeCamera } from \"../../Cameras/VR/vrDeviceOrientationFreeCamera.js\";\nimport { PointerEventTypes } from \"../../Events/pointerEvents.js\";\nimport { Quaternion, Matrix, Vector3 } from \"../../Maths/math.vector.js\";\nimport { Color3, Color4 } from \"../../Maths/math.color.js\";\nimport { Gamepad } from \"../../Gamepads/gamepad.js\";\nimport { Xbox360Button } from \"../../Gamepads/xboxGamepad.js\";\nimport { Ray } from \"../../Culling/ray.js\";\nimport { ImageProcessingConfiguration } from \"../../Materials/imageProcessingConfiguration.js\";\nimport { StandardMaterial } from \"../../Materials/standardMaterial.js\";\nimport { DynamicTexture } from \"../../Materials/Textures/dynamicTexture.js\";\nimport { SineEase, EasingFunction, CircleEase } from \"../../Animations/easing.js\";\nimport { Animation } from \"../../Animations/animation.js\";\nimport \"../../Gamepads/gamepadSceneComponent.js\";\nimport \"../../Animations/animatable.js\";\nimport { WebXRSessionManager } from \"../../XR/webXRSessionManager.js\";\nimport { WebXRState } from \"../../XR/webXRTypes.js\";\nimport { CreateGround } from \"../../Meshes/Builders/groundBuilder.js\";\nimport { CreateTorus } from \"../../Meshes/Builders/torusBuilder.js\";\nclass VRExperienceHelperGazer {\n  constructor(scene, gazeTrackerToClone = null) {\n    this.scene = scene;\n    /** @internal */\n    this._pointerDownOnMeshAsked = false;\n    /** @internal */\n    this._isActionableMesh = false;\n    /** @internal */\n    this._teleportationRequestInitiated = false;\n    /** @internal */\n    this._teleportationBackRequestInitiated = false;\n    /** @internal */\n    this._rotationRightAsked = false;\n    /** @internal */\n    this._rotationLeftAsked = false;\n    /** @internal */\n    this._dpadPressed = true;\n    /** @internal */\n    this._activePointer = false;\n    this._id = VRExperienceHelperGazer._IdCounter++;\n    // Gaze tracker\n    if (!gazeTrackerToClone) {\n      this._gazeTracker = CreateTorus(\"gazeTracker\", {\n        diameter: 0.0035,\n        thickness: 0.0025,\n        tessellation: 20,\n        updatable: false\n      }, scene);\n      this._gazeTracker.bakeCurrentTransformIntoVertices();\n      this._gazeTracker.isPickable = false;\n      this._gazeTracker.isVisible = false;\n      const targetMat = new StandardMaterial(\"targetMat\", scene);\n      targetMat.specularColor = Color3.Black();\n      targetMat.emissiveColor = new Color3(0.7, 0.7, 0.7);\n      targetMat.backFaceCulling = false;\n      this._gazeTracker.material = targetMat;\n    } else {\n      this._gazeTracker = gazeTrackerToClone.clone(\"gazeTracker\");\n    }\n  }\n  /**\n   * @internal\n   */\n  _getForwardRay(length) {\n    return new Ray(Vector3.Zero(), new Vector3(0, 0, length));\n  }\n  /** @internal */\n  _selectionPointerDown() {\n    this._pointerDownOnMeshAsked = true;\n    if (this._currentHit) {\n      this.scene.simulatePointerDown(this._currentHit, {\n        pointerId: this._id\n      });\n    }\n  }\n  /** @internal */\n  _selectionPointerUp() {\n    if (this._currentHit) {\n      this.scene.simulatePointerUp(this._currentHit, {\n        pointerId: this._id\n      });\n    }\n    this._pointerDownOnMeshAsked = false;\n  }\n  /** @internal */\n  _activatePointer() {\n    this._activePointer = true;\n  }\n  /** @internal */\n  _deactivatePointer() {\n    this._activePointer = false;\n  }\n  /**\n   * @internal\n   */\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  _updatePointerDistance(distance = 100) {}\n  dispose() {\n    this._interactionsEnabled = false;\n    this._teleportationEnabled = false;\n    if (this._gazeTracker) {\n      this._gazeTracker.dispose();\n    }\n  }\n}\nVRExperienceHelperGazer._IdCounter = 0;\nclass VRExperienceHelperCameraGazer extends VRExperienceHelperGazer {\n  constructor(_getCamera, scene) {\n    super(scene);\n    this._getCamera = _getCamera;\n  }\n  _getForwardRay(length) {\n    const camera = this._getCamera();\n    if (camera) {\n      return camera.getForwardRay(length);\n    } else {\n      return new Ray(Vector3.Zero(), Vector3.Forward());\n    }\n  }\n}\n/**\n * Event containing information after VR has been entered\n */\nexport class OnAfterEnteringVRObservableEvent {}\n/**\n * Helps to quickly add VR support to an existing scene.\n * See https://doc.babylonjs.com/features/featuresDeepDive/cameras/webVRHelper\n * @deprecated Use WebXR instead!\n */\nexport class VRExperienceHelper {\n  /** Return this.onEnteringVRObservable\n   * Note: This one is for backward compatibility. Please use onEnteringVRObservable directly\n   */\n  get onEnteringVR() {\n    return this.onEnteringVRObservable;\n  }\n  /** Return this.onExitingVRObservable\n   * Note: This one is for backward compatibility. Please use onExitingVRObservable directly\n   */\n  get onExitingVR() {\n    return this.onExitingVRObservable;\n  }\n  /**\n   * The mesh used to display where the user is going to teleport.\n   */\n  get teleportationTarget() {\n    return this._teleportationTarget;\n  }\n  /**\n   * Sets the mesh to be used to display where the user is going to teleport.\n   */\n  set teleportationTarget(value) {\n    if (value) {\n      value.name = \"teleportationTarget\";\n      this._isDefaultTeleportationTarget = false;\n      this._teleportationTarget = value;\n    }\n  }\n  /**\n   * The mesh used to display where the user is selecting, this mesh will be cloned and set as the gazeTracker for the left and right controller\n   * when set bakeCurrentTransformIntoVertices will be called on the mesh.\n   * See https://doc.babylonjs.com/features/featuresDeepDive/mesh/transforms/center_origin/bakingTransforms\n   */\n  get gazeTrackerMesh() {\n    return this._cameraGazer._gazeTracker;\n  }\n  set gazeTrackerMesh(value) {\n    if (value) {\n      // Dispose of existing meshes\n      if (this._cameraGazer._gazeTracker) {\n        this._cameraGazer._gazeTracker.dispose();\n      }\n      // Set and create gaze trackers on head and controllers\n      this._cameraGazer._gazeTracker = value;\n      this._cameraGazer._gazeTracker.bakeCurrentTransformIntoVertices();\n      this._cameraGazer._gazeTracker.isPickable = false;\n      this._cameraGazer._gazeTracker.isVisible = false;\n      this._cameraGazer._gazeTracker.name = \"gazeTracker\";\n    }\n  }\n  /**\n   * If the ray of the gaze should be displayed.\n   */\n  get displayGaze() {\n    return this._displayGaze;\n  }\n  /**\n   * Sets if the ray of the gaze should be displayed.\n   */\n  set displayGaze(value) {\n    this._displayGaze = value;\n    if (!value) {\n      this._cameraGazer._gazeTracker.isVisible = false;\n    }\n  }\n  /**\n   * If the ray of the LaserPointer should be displayed.\n   */\n  get displayLaserPointer() {\n    return this._displayLaserPointer;\n  }\n  /**\n   * Sets if the ray of the LaserPointer should be displayed.\n   */\n  set displayLaserPointer(value) {\n    this._displayLaserPointer = value;\n  }\n  /**\n   * The deviceOrientationCamera used as the camera when not in VR.\n   */\n  get deviceOrientationCamera() {\n    return this._deviceOrientationCamera;\n  }\n  /**\n   * Based on the current WebVR support, returns the current VR camera used.\n   */\n  get currentVRCamera() {\n    return this._scene.activeCamera;\n  }\n  /**\n   * The deviceOrientationCamera that is used as a fallback when vr device is not connected.\n   */\n  get vrDeviceOrientationCamera() {\n    return this._vrDeviceOrientationCamera;\n  }\n  /**\n   * The html button that is used to trigger entering into VR.\n   */\n  get vrButton() {\n    return this._btnVR;\n  }\n  get _teleportationRequestInitiated() {\n    return this._cameraGazer._teleportationRequestInitiated;\n  }\n  /**\n   * Instantiates a VRExperienceHelper.\n   * Helps to quickly add VR support to an existing scene.\n   * @param scene The scene the VRExperienceHelper belongs to.\n   * @param webVROptions Options to modify the vr experience helper's behavior.\n   */\n  constructor(scene, /** Options to modify the vr experience helper's behavior. */\n  webVROptions = {}) {\n    this.webVROptions = webVROptions;\n    // Are we presenting in the fullscreen fallback?\n    this._fullscreenVRpresenting = false;\n    /**\n     * Gets or sets a boolean indicating that gaze can be enabled even if pointer lock is not engage (useful on iOS where fullscreen mode and pointer lock are not supported)\n     */\n    this.enableGazeEvenWhenNoPointerLock = false;\n    /**\n     * Gets or sets a boolean indicating that the VREXperienceHelper will exit VR if double tap is detected\n     */\n    this.exitVROnDoubleTap = true;\n    /**\n     * Observable raised right before entering VR.\n     */\n    this.onEnteringVRObservable = new Observable();\n    /**\n     * Observable raised when entering VR has completed.\n     */\n    this.onAfterEnteringVRObservable = new Observable();\n    /**\n     * Observable raised when exiting VR.\n     */\n    this.onExitingVRObservable = new Observable();\n    this._useCustomVRButton = false;\n    this._teleportActive = false;\n    this._floorMeshesCollection = [];\n    this._teleportationMode = VRExperienceHelper.TELEPORTATIONMODE_CONSTANTTIME;\n    this._teleportationTime = 122;\n    this._teleportationSpeed = 20;\n    this._rotationAllowed = true;\n    this._teleportBackwardsVector = new Vector3(0, -1, -1);\n    this._isDefaultTeleportationTarget = true;\n    this._teleportationFillColor = \"#444444\";\n    this._teleportationBorderColor = \"#FFFFFF\";\n    this._rotationAngle = 0;\n    this._haloCenter = new Vector3(0, 0, 0);\n    this._padSensibilityUp = 0.65;\n    this._padSensibilityDown = 0.35;\n    this._pickedLaserColor = new Color3(0.2, 0.2, 1);\n    this._pickedGazeColor = new Color3(0, 0, 1);\n    /**\n     * Observable raised when a new mesh is selected based on meshSelectionPredicate\n     */\n    this.onNewMeshSelected = new Observable();\n    /**\n     * Observable raised when a new mesh is picked based on meshSelectionPredicate\n     */\n    this.onNewMeshPicked = new Observable();\n    /**\n     * Observable raised before camera teleportation\n     */\n    this.onBeforeCameraTeleport = new Observable();\n    /**\n     *  Observable raised after camera teleportation\n     */\n    this.onAfterCameraTeleport = new Observable();\n    /**\n     * Observable raised when current selected mesh gets unselected\n     */\n    this.onSelectedMeshUnselected = new Observable();\n    /**\n     * Set teleportation enabled. If set to false camera teleportation will be disabled but camera rotation will be kept.\n     */\n    this.teleportationEnabled = true;\n    this._teleportationInitialized = false;\n    this._interactionsEnabled = false;\n    this._displayGaze = true;\n    this._displayLaserPointer = true;\n    /**\n     * If the gaze trackers scale should be updated to be constant size when pointing at near/far meshes\n     */\n    this.updateGazeTrackerScale = true;\n    /**\n     * If the gaze trackers color should be updated when selecting meshes\n     */\n    this.updateGazeTrackerColor = true;\n    /**\n     * If the controller laser color should be updated when selecting meshes\n     */\n    this.updateControllerLaserColor = true;\n    /**\n     * Defines whether or not Pointer lock should be requested when switching to\n     * full screen.\n     */\n    this.requestPointerLockOnFullScreen = true;\n    /**\n     * Was the XR test done already. If this is true AND this.xr exists, xr is initialized.\n     * If this is true and no this.xr, xr exists but is not supported, using WebVR.\n     */\n    this.xrTestDone = false;\n    this._onResize = () => {\n      this._moveButtonToBottomRight();\n    };\n    this._onFullscreenChange = () => {\n      this._fullscreenVRpresenting = !!document.fullscreenElement;\n      if (!this._fullscreenVRpresenting && this._inputElement) {\n        this.exitVR();\n        if (!this._useCustomVRButton && this._btnVR) {\n          this._btnVR.style.top = this._inputElement.offsetTop + this._inputElement.offsetHeight - 70 + \"px\";\n          this._btnVR.style.left = this._inputElement.offsetLeft + this._inputElement.offsetWidth - 100 + \"px\";\n          // make sure the button is visible after setting its position\n          this._updateButtonVisibility();\n        }\n      }\n    };\n    this._cachedAngularSensibility = {\n      angularSensibilityX: null,\n      angularSensibilityY: null,\n      angularSensibility: null\n    };\n    this._beforeRender = () => {\n      if (this._scene.getEngine().isPointerLock || this.enableGazeEvenWhenNoPointerLock) {\n        // no-op\n      } else {\n        this._cameraGazer._gazeTracker.isVisible = false;\n      }\n    };\n    this._onNewGamepadConnected = gamepad => {\n      if (gamepad.type !== Gamepad.POSE_ENABLED) {\n        if (gamepad.leftStick) {\n          gamepad.onleftstickchanged(stickValues => {\n            if (this._teleportationInitialized && this.teleportationEnabled) {\n              // Listening to classic/xbox gamepad only if no VR controller is active\n              this._checkTeleportWithRay(stickValues, this._cameraGazer);\n              this._checkTeleportBackwards(stickValues, this._cameraGazer);\n            }\n          });\n        }\n        if (gamepad.rightStick) {\n          gamepad.onrightstickchanged(stickValues => {\n            if (this._teleportationInitialized) {\n              this._checkRotate(stickValues, this._cameraGazer);\n            }\n          });\n        }\n        if (gamepad.type === Gamepad.XBOX) {\n          gamepad.onbuttondown(buttonPressed => {\n            if (this._interactionsEnabled && buttonPressed === Xbox360Button.A) {\n              this._cameraGazer._selectionPointerDown();\n            }\n          });\n          gamepad.onbuttonup(buttonPressed => {\n            if (this._interactionsEnabled && buttonPressed === Xbox360Button.A) {\n              this._cameraGazer._selectionPointerUp();\n            }\n          });\n        }\n      }\n    };\n    this._workingVector = Vector3.Zero();\n    this._workingQuaternion = Quaternion.Identity();\n    this._workingMatrix = Matrix.Identity();\n    Logger.Warn(\"WebVR is deprecated. Please avoid using this experience helper and use the WebXR experience helper instead\");\n    this._scene = scene;\n    this._inputElement = scene.getEngine().getInputElement();\n    // check for VR support:\n    const vrSupported = (\"getVRDisplays\" in navigator);\n    // no VR support? force XR but only when it is not set because web vr can work without the getVRDisplays\n    if (!vrSupported && webVROptions.useXR === undefined) {\n      webVROptions.useXR = true;\n    }\n    // Parse options\n    if (webVROptions.createFallbackVRDeviceOrientationFreeCamera === undefined) {\n      webVROptions.createFallbackVRDeviceOrientationFreeCamera = true;\n    }\n    if (webVROptions.createDeviceOrientationCamera === undefined) {\n      webVROptions.createDeviceOrientationCamera = true;\n    }\n    if (webVROptions.laserToggle === undefined) {\n      webVROptions.laserToggle = true;\n    }\n    this._hasEnteredVR = false;\n    // Set position\n    if (this._scene.activeCamera) {\n      this._position = this._scene.activeCamera.position.clone();\n    } else {\n      this._position = new Vector3(0, this._defaultHeight, 0);\n    }\n    // Set non-vr camera\n    if (webVROptions.createDeviceOrientationCamera || !this._scene.activeCamera) {\n      this._deviceOrientationCamera = new DeviceOrientationCamera(\"deviceOrientationVRHelper\", this._position.clone(), scene);\n      // Copy data from existing camera\n      if (this._scene.activeCamera) {\n        this._deviceOrientationCamera.minZ = this._scene.activeCamera.minZ;\n        this._deviceOrientationCamera.maxZ = this._scene.activeCamera.maxZ;\n        // Set rotation from previous camera\n        if (this._scene.activeCamera instanceof TargetCamera && this._scene.activeCamera.rotation) {\n          const targetCamera = this._scene.activeCamera;\n          if (targetCamera.rotationQuaternion) {\n            this._deviceOrientationCamera.rotationQuaternion.copyFrom(targetCamera.rotationQuaternion);\n          } else {\n            this._deviceOrientationCamera.rotationQuaternion.copyFrom(Quaternion.RotationYawPitchRoll(targetCamera.rotation.y, targetCamera.rotation.x, targetCamera.rotation.z));\n          }\n          this._deviceOrientationCamera.rotation = targetCamera.rotation.clone();\n        }\n      }\n      this._scene.activeCamera = this._deviceOrientationCamera;\n      if (this._inputElement) {\n        this._scene.activeCamera.attachControl();\n      }\n    } else {\n      this._existingCamera = this._scene.activeCamera;\n    }\n    if (this.webVROptions.useXR && navigator.xr) {\n      // force-check XR session support\n      WebXRSessionManager.IsSessionSupportedAsync(\"immersive-vr\").then(supported => {\n        if (supported) {\n          Logger.Log(\"Using WebXR. It is recommended to use the WebXRDefaultExperience directly\");\n          // it is possible to use XR, let's do it!\n          scene.createDefaultXRExperienceAsync({\n            floorMeshes: webVROptions.floorMeshes || []\n          }).then(xr => {\n            this.xr = xr;\n            // connect observables\n            this.xrTestDone = true;\n            this._cameraGazer = new VRExperienceHelperCameraGazer(() => {\n              return this.xr.baseExperience.camera;\n            }, scene);\n            this.xr.baseExperience.onStateChangedObservable.add(state => {\n              // support for entering / exiting\n              switch (state) {\n                case WebXRState.ENTERING_XR:\n                  this.onEnteringVRObservable.notifyObservers(this);\n                  if (!this._interactionsEnabled) {\n                    this.xr.pointerSelection.detach();\n                  }\n                  this.xr.pointerSelection.displayLaserPointer = this._displayLaserPointer;\n                  break;\n                case WebXRState.EXITING_XR:\n                  this.onExitingVRObservable.notifyObservers(this);\n                  // resize to update width and height when exiting vr exits fullscreen\n                  this._scene.getEngine().resize();\n                  break;\n                case WebXRState.IN_XR:\n                  this._hasEnteredVR = true;\n                  break;\n                case WebXRState.NOT_IN_XR:\n                  this._hasEnteredVR = false;\n                  break;\n              }\n            });\n          });\n        } else {\n          // XR not supported (thou exists), continue WebVR init\n          this._completeVRInit(scene, webVROptions);\n        }\n      });\n    } else {\n      // no XR, continue init synchronous\n      this._completeVRInit(scene, webVROptions);\n    }\n  }\n  _completeVRInit(scene, webVROptions) {\n    this.xrTestDone = true;\n    // Create VR cameras\n    if (webVROptions.createFallbackVRDeviceOrientationFreeCamera) {\n      this._vrDeviceOrientationCamera = new VRDeviceOrientationFreeCamera(\"VRDeviceOrientationVRHelper\", this._position, this._scene, true, webVROptions.vrDeviceOrientationCameraMetrics);\n      this._vrDeviceOrientationCamera.angularSensibility = Number.MAX_VALUE;\n    }\n    this._cameraGazer = new VRExperienceHelperCameraGazer(() => {\n      return this.currentVRCamera;\n    }, scene);\n    // Create default button\n    if (!this._useCustomVRButton) {\n      this._btnVR = document.createElement(\"BUTTON\");\n      this._btnVR.className = \"babylonVRicon\";\n      this._btnVR.id = \"babylonVRiconbtn\";\n      this._btnVR.title = \"Click to switch to VR\";\n      const url = !window.SVGSVGElement ? \"https://cdn.babylonjs.com/Assets/vrButton.png\" : \"data:image/svg+xml;charset=UTF-8,%3Csvg%20xmlns%3D%22http%3A//www.w3.org/2000/svg%22%20width%3D%222048%22%20height%3D%221152%22%20viewBox%3D%220%200%202048%201152%22%20version%3D%221.1%22%3E%3Cpath%20transform%3D%22rotate%28180%201024%2C576.0000000000001%29%22%20d%3D%22m1109%2C896q17%2C0%2030%2C-12t13%2C-30t-12.5%2C-30.5t-30.5%2C-12.5l-170%2C0q-18%2C0%20-30.5%2C12.5t-12.5%2C30.5t13%2C30t30%2C12l170%2C0zm-85%2C256q59%2C0%20132.5%2C-1.5t154.5%2C-5.5t164.5%2C-11.5t163%2C-20t150%2C-30t124.5%2C-41.5q23%2C-11%2042%2C-24t38%2C-30q27%2C-25%2041%2C-61.5t14%2C-72.5l0%2C-257q0%2C-123%20-47%2C-232t-128%2C-190t-190%2C-128t-232%2C-47l-81%2C0q-37%2C0%20-68.5%2C14t-60.5%2C34.5t-55.5%2C45t-53%2C45t-53%2C34.5t-55.5%2C14t-55.5%2C-14t-53%2C-34.5t-53%2C-45t-55.5%2C-45t-60.5%2C-34.5t-68.5%2C-14l-81%2C0q-123%2C0%20-232%2C47t-190%2C128t-128%2C190t-47%2C232l0%2C257q0%2C68%2038%2C115t97%2C73q54%2C24%20124.5%2C41.5t150%2C30t163%2C20t164.5%2C11.5t154.5%2C5.5t132.5%2C1.5zm939%2C-298q0%2C39%20-24.5%2C67t-58.5%2C42q-54%2C23%20-122%2C39.5t-143.5%2C28t-155.5%2C19t-157%2C11t-148.5%2C5t-129.5%2C1.5q-59%2C0%20-130%2C-1.5t-148%2C-5t-157%2C-11t-155.5%2C-19t-143.5%2C-28t-122%2C-39.5q-34%2C-14%20-58.5%2C-42t-24.5%2C-67l0%2C-257q0%2C-106%2040.5%2C-199t110%2C-162.5t162.5%2C-109.5t199%2C-40l81%2C0q27%2C0%2052%2C14t50%2C34.5t51%2C44.5t55.5%2C44.5t63.5%2C34.5t74%2C14t74%2C-14t63.5%2C-34.5t55.5%2C-44.5t51%2C-44.5t50%2C-34.5t52%2C-14l14%2C0q37%2C0%2070%2C0.5t64.5%2C4.5t63.5%2C12t68%2C23q71%2C30%20128.5%2C78.5t98.5%2C110t63.5%2C133.5t22.5%2C149l0%2C257z%22%20fill%3D%22white%22%20/%3E%3C/svg%3E%0A\";\n      let css = \".babylonVRicon { position: absolute; right: 20px; height: 50px; width: 80px; background-color: rgba(51,51,51,0.7); background-image: url(\" + url + \"); background-size: 80%; background-repeat:no-repeat; background-position: center; border: none; outline: none; transition: transform 0.125s ease-out } .babylonVRicon:hover { transform: scale(1.05) } .babylonVRicon:active {background-color: rgba(51,51,51,1) } .babylonVRicon:focus {background-color: rgba(51,51,51,1) }\";\n      css += \".babylonVRicon.vrdisplaypresenting { display: none; }\";\n      // TODO: Add user feedback so that they know what state the VRDisplay is in (disconnected, connected, entering-VR)\n      // css += \".babylonVRicon.vrdisplaysupported { }\";\n      // css += \".babylonVRicon.vrdisplayready { }\";\n      // css += \".babylonVRicon.vrdisplayrequesting { }\";\n      const style = document.createElement(\"style\");\n      style.appendChild(document.createTextNode(css));\n      document.getElementsByTagName(\"head\")[0].appendChild(style);\n      this._moveButtonToBottomRight();\n    }\n    // VR button click event\n    if (this._btnVR) {\n      this._btnVR.addEventListener(\"click\", () => {\n        if (!this.isInVRMode) {\n          this.enterVR();\n        }\n      });\n    }\n    // Window events\n    const hostWindow = this._scene.getEngine().getHostWindow();\n    if (!hostWindow) {\n      return;\n    }\n    hostWindow.addEventListener(\"resize\", this._onResize);\n    document.addEventListener(\"fullscreenchange\", this._onFullscreenChange, false);\n    // Display vr button when headset is connected\n    if (webVROptions.createFallbackVRDeviceOrientationFreeCamera) {\n      this._displayVRButton();\n    }\n    // Exiting VR mode using 'ESC' key on desktop\n    this._onKeyDown = event => {\n      if (event.keyCode === 27 && this.isInVRMode) {\n        this.exitVR();\n      }\n    };\n    document.addEventListener(\"keydown\", this._onKeyDown);\n    // Exiting VR mode double tapping the touch screen\n    this._scene.onPrePointerObservable.add(() => {\n      if (this._hasEnteredVR && this.exitVROnDoubleTap) {\n        this.exitVR();\n        if (this._fullscreenVRpresenting) {\n          this._scene.getEngine().exitFullscreen();\n        }\n      }\n    }, PointerEventTypes.POINTERDOUBLETAP, false);\n    scene.onDisposeObservable.add(() => {\n      this.dispose();\n    });\n    this._updateButtonVisibility();\n    //create easing functions\n    this._circleEase = new CircleEase();\n    this._circleEase.setEasingMode(EasingFunction.EASINGMODE_EASEINOUT);\n    this._teleportationEasing = this._circleEase;\n    // Allow clicking in the vrDeviceOrientationCamera\n    scene.onPointerObservable.add(e => {\n      if (this._interactionsEnabled) {\n        if (scene.activeCamera === this.vrDeviceOrientationCamera && e.event.pointerType === \"mouse\") {\n          if (e.type === PointerEventTypes.POINTERDOWN) {\n            this._cameraGazer._selectionPointerDown();\n          } else if (e.type === PointerEventTypes.POINTERUP) {\n            this._cameraGazer._selectionPointerUp();\n          }\n        }\n      }\n    });\n    if (this.webVROptions.floorMeshes) {\n      this.enableTeleportation({\n        floorMeshes: this.webVROptions.floorMeshes\n      });\n    }\n  }\n  /**\n   * Gets a value indicating if we are currently in VR mode.\n   */\n  get isInVRMode() {\n    return this.xr && this.webVROptions.useXR && this.xr.baseExperience.state === WebXRState.IN_XR || this._fullscreenVRpresenting;\n  }\n  _moveButtonToBottomRight() {\n    if (this._inputElement && !this._useCustomVRButton && this._btnVR) {\n      const rect = this._inputElement.getBoundingClientRect();\n      this._btnVR.style.top = rect.top + rect.height - 70 + \"px\";\n      this._btnVR.style.left = rect.left + rect.width - 100 + \"px\";\n    }\n  }\n  _displayVRButton() {\n    if (!this._useCustomVRButton && !this._btnVRDisplayed && this._btnVR) {\n      document.body.appendChild(this._btnVR);\n      this._btnVRDisplayed = true;\n    }\n  }\n  _updateButtonVisibility() {\n    if (!this._btnVR || this._useCustomVRButton) {\n      return;\n    }\n    this._btnVR.className = \"babylonVRicon\";\n    if (this.isInVRMode) {\n      this._btnVR.className += \" vrdisplaypresenting\";\n    }\n  }\n  /**\n   * Attempt to enter VR. If a headset is connected and ready, will request present on that.\n   * Otherwise, will use the fullscreen API.\n   */\n  enterVR() {\n    if (this.xr) {\n      this.xr.baseExperience.enterXRAsync(\"immersive-vr\", \"local-floor\", this.xr.renderTarget);\n      return;\n    }\n    if (this.onEnteringVRObservable) {\n      try {\n        this.onEnteringVRObservable.notifyObservers(this);\n      } catch (err) {\n        Logger.Warn(\"Error in your custom logic onEnteringVR: \" + err);\n      }\n    }\n    if (this._scene.activeCamera) {\n      this._position = this._scene.activeCamera.position.clone();\n      if (this.vrDeviceOrientationCamera) {\n        this.vrDeviceOrientationCamera.rotation = Quaternion.FromRotationMatrix(this._scene.activeCamera.getWorldMatrix().getRotationMatrix()).toEulerAngles();\n        this.vrDeviceOrientationCamera.angularSensibility = 2000;\n      }\n      // make sure that we return to the last active camera\n      this._existingCamera = this._scene.activeCamera;\n      // Remove and cache angular sensability to avoid camera rotation when in VR\n      if (this._existingCamera.angularSensibilityX) {\n        this._cachedAngularSensibility.angularSensibilityX = this._existingCamera.angularSensibilityX;\n        this._existingCamera.angularSensibilityX = Number.MAX_VALUE;\n      }\n      if (this._existingCamera.angularSensibilityY) {\n        this._cachedAngularSensibility.angularSensibilityY = this._existingCamera.angularSensibilityY;\n        this._existingCamera.angularSensibilityY = Number.MAX_VALUE;\n      }\n      if (this._existingCamera.angularSensibility) {\n        this._cachedAngularSensibility.angularSensibility = this._existingCamera.angularSensibility;\n        this._existingCamera.angularSensibility = Number.MAX_VALUE;\n      }\n    }\n    // If WebVR is supported and a headset is connected\n    if (this._vrDeviceOrientationCamera) {\n      this._vrDeviceOrientationCamera.position = this._position;\n      if (this._scene.activeCamera) {\n        this._vrDeviceOrientationCamera.minZ = this._scene.activeCamera.minZ;\n      }\n      this._scene.activeCamera = this._vrDeviceOrientationCamera;\n      this._scene.getEngine().enterFullscreen(this.requestPointerLockOnFullScreen);\n      this._updateButtonVisibility();\n      this._vrDeviceOrientationCamera.onViewMatrixChangedObservable.addOnce(() => {\n        this.onAfterEnteringVRObservable.notifyObservers({\n          success: true\n        });\n      });\n    }\n    if (this._scene.activeCamera && this._inputElement) {\n      this._scene.activeCamera.attachControl();\n    }\n    if (this._interactionsEnabled) {\n      this._scene.registerBeforeRender(this._beforeRender);\n    }\n    this._hasEnteredVR = true;\n  }\n  /**\n   * Attempt to exit VR, or fullscreen.\n   */\n  exitVR() {\n    if (this.xr) {\n      this.xr.baseExperience.exitXRAsync();\n      return;\n    }\n    if (this._hasEnteredVR) {\n      if (this.onExitingVRObservable) {\n        try {\n          this.onExitingVRObservable.notifyObservers(this);\n        } catch (err) {\n          Logger.Warn(\"Error in your custom logic onExitingVR: \" + err);\n        }\n      }\n      if (this._scene.activeCamera) {\n        this._position = this._scene.activeCamera.position.clone();\n      }\n      if (this.vrDeviceOrientationCamera) {\n        this.vrDeviceOrientationCamera.angularSensibility = Number.MAX_VALUE;\n      }\n      if (this._deviceOrientationCamera) {\n        this._deviceOrientationCamera.position = this._position;\n        this._scene.activeCamera = this._deviceOrientationCamera;\n        // Restore angular sensibility\n        if (this._cachedAngularSensibility.angularSensibilityX) {\n          this._deviceOrientationCamera.angularSensibilityX = this._cachedAngularSensibility.angularSensibilityX;\n          this._cachedAngularSensibility.angularSensibilityX = null;\n        }\n        if (this._cachedAngularSensibility.angularSensibilityY) {\n          this._deviceOrientationCamera.angularSensibilityY = this._cachedAngularSensibility.angularSensibilityY;\n          this._cachedAngularSensibility.angularSensibilityY = null;\n        }\n        if (this._cachedAngularSensibility.angularSensibility) {\n          this._deviceOrientationCamera.angularSensibility = this._cachedAngularSensibility.angularSensibility;\n          this._cachedAngularSensibility.angularSensibility = null;\n        }\n      } else if (this._existingCamera) {\n        this._existingCamera.position = this._position;\n        this._scene.activeCamera = this._existingCamera;\n        if (this._inputElement) {\n          this._scene.activeCamera.attachControl();\n        }\n        // Restore angular sensibility\n        if (this._cachedAngularSensibility.angularSensibilityX) {\n          this._existingCamera.angularSensibilityX = this._cachedAngularSensibility.angularSensibilityX;\n          this._cachedAngularSensibility.angularSensibilityX = null;\n        }\n        if (this._cachedAngularSensibility.angularSensibilityY) {\n          this._existingCamera.angularSensibilityY = this._cachedAngularSensibility.angularSensibilityY;\n          this._cachedAngularSensibility.angularSensibilityY = null;\n        }\n        if (this._cachedAngularSensibility.angularSensibility) {\n          this._existingCamera.angularSensibility = this._cachedAngularSensibility.angularSensibility;\n          this._cachedAngularSensibility.angularSensibility = null;\n        }\n      }\n      this._updateButtonVisibility();\n      if (this._interactionsEnabled) {\n        this._scene.unregisterBeforeRender(this._beforeRender);\n        this._cameraGazer._gazeTracker.isVisible = false;\n      }\n      // resize to update width and height when exiting vr exits fullscreen\n      this._scene.getEngine().resize();\n      this._hasEnteredVR = false;\n    }\n  }\n  /**\n   * The position of the vr experience helper.\n   */\n  get position() {\n    return this._position;\n  }\n  /**\n   * Sets the position of the vr experience helper.\n   */\n  set position(value) {\n    this._position = value;\n    if (this._scene.activeCamera) {\n      this._scene.activeCamera.position = value;\n    }\n  }\n  /**\n   * Enables controllers and user interactions such as selecting and object or clicking on an object.\n   */\n  enableInteractions() {\n    if (!this._interactionsEnabled) {\n      // in XR it is enabled by default, but just to make sure, re-attach\n      if (this.xr) {\n        if (this.xr.baseExperience.state === WebXRState.IN_XR) {\n          this.xr.pointerSelection.attach();\n        }\n        return;\n      }\n      this.raySelectionPredicate = mesh => {\n        return mesh.isVisible && (mesh.isPickable || mesh.name === this._floorMeshName);\n      };\n      this.meshSelectionPredicate = () => {\n        return true;\n      };\n      this._raySelectionPredicate = mesh => {\n        if (this._isTeleportationFloor(mesh) || mesh.name.indexOf(\"gazeTracker\") === -1 && mesh.name.indexOf(\"teleportationTarget\") === -1 && mesh.name.indexOf(\"torusTeleportation\") === -1) {\n          return this.raySelectionPredicate(mesh);\n        }\n        return false;\n      };\n      this._interactionsEnabled = true;\n    }\n  }\n  _isTeleportationFloor(mesh) {\n    for (let i = 0; i < this._floorMeshesCollection.length; i++) {\n      if (this._floorMeshesCollection[i].id === mesh.id) {\n        return true;\n      }\n    }\n    if (this._floorMeshName && mesh.name === this._floorMeshName) {\n      return true;\n    }\n    return false;\n  }\n  /**\n   * Adds a floor mesh to be used for teleportation.\n   * @param floorMesh the mesh to be used for teleportation.\n   */\n  addFloorMesh(floorMesh) {\n    if (!this._floorMeshesCollection) {\n      return;\n    }\n    if (this._floorMeshesCollection.indexOf(floorMesh) > -1) {\n      return;\n    }\n    this._floorMeshesCollection.push(floorMesh);\n  }\n  /**\n   * Removes a floor mesh from being used for teleportation.\n   * @param floorMesh the mesh to be removed.\n   */\n  removeFloorMesh(floorMesh) {\n    if (!this._floorMeshesCollection) {\n      return;\n    }\n    const meshIndex = this._floorMeshesCollection.indexOf(floorMesh);\n    if (meshIndex !== -1) {\n      this._floorMeshesCollection.splice(meshIndex, 1);\n    }\n  }\n  /**\n   * Enables interactions and teleportation using the VR controllers and gaze.\n   * @param vrTeleportationOptions options to modify teleportation behavior.\n   */\n  enableTeleportation(vrTeleportationOptions = {}) {\n    if (!this._teleportationInitialized) {\n      this.enableInteractions();\n      if (this.webVROptions.useXR && (vrTeleportationOptions.floorMeshes || vrTeleportationOptions.floorMeshName)) {\n        const floorMeshes = vrTeleportationOptions.floorMeshes || [];\n        if (!floorMeshes.length) {\n          const floorMesh = this._scene.getMeshByName(vrTeleportationOptions.floorMeshName);\n          if (floorMesh) {\n            floorMeshes.push(floorMesh);\n          }\n        }\n        if (this.xr) {\n          floorMeshes.forEach(mesh => {\n            this.xr.teleportation.addFloorMesh(mesh);\n          });\n          if (!this.xr.teleportation.attached) {\n            this.xr.teleportation.attach();\n          }\n          return;\n        } else if (!this.xrTestDone) {\n          const waitForXr = () => {\n            if (this.xrTestDone) {\n              this._scene.unregisterBeforeRender(waitForXr);\n              if (this.xr) {\n                if (!this.xr.teleportation.attached) {\n                  this.xr.teleportation.attach();\n                }\n              } else {\n                this.enableTeleportation(vrTeleportationOptions);\n              }\n            }\n          };\n          this._scene.registerBeforeRender(waitForXr);\n          return;\n        }\n      }\n      if (vrTeleportationOptions.floorMeshName) {\n        this._floorMeshName = vrTeleportationOptions.floorMeshName;\n      }\n      if (vrTeleportationOptions.floorMeshes) {\n        this._floorMeshesCollection = vrTeleportationOptions.floorMeshes;\n      }\n      if (vrTeleportationOptions.teleportationMode) {\n        this._teleportationMode = vrTeleportationOptions.teleportationMode;\n      }\n      if (vrTeleportationOptions.teleportationTime && vrTeleportationOptions.teleportationTime > 0) {\n        this._teleportationTime = vrTeleportationOptions.teleportationTime;\n      }\n      if (vrTeleportationOptions.teleportationSpeed && vrTeleportationOptions.teleportationSpeed > 0) {\n        this._teleportationSpeed = vrTeleportationOptions.teleportationSpeed;\n      }\n      if (vrTeleportationOptions.easingFunction !== undefined) {\n        this._teleportationEasing = vrTeleportationOptions.easingFunction;\n      }\n      // Creates an image processing post process for the vignette not relying\n      // on the main scene configuration for image processing to reduce setup and spaces\n      // (gamma/linear) conflicts.\n      const imageProcessingConfiguration = new ImageProcessingConfiguration();\n      imageProcessingConfiguration.vignetteColor = new Color4(0, 0, 0, 0);\n      imageProcessingConfiguration.vignetteEnabled = true;\n      this._teleportationInitialized = true;\n      if (this._isDefaultTeleportationTarget) {\n        this._createTeleportationCircles();\n      }\n    }\n  }\n  _checkTeleportWithRay(stateObject, gazer) {\n    // Dont teleport if another gaze already requested teleportation\n    if (this._teleportationRequestInitiated && !gazer._teleportationRequestInitiated) {\n      return;\n    }\n    if (!gazer._teleportationRequestInitiated) {\n      if (stateObject.y < -this._padSensibilityUp && gazer._dpadPressed) {\n        gazer._activatePointer();\n        gazer._teleportationRequestInitiated = true;\n      }\n    } else {\n      // Listening to the proper controller values changes to confirm teleportation\n      if (Math.sqrt(stateObject.y * stateObject.y + stateObject.x * stateObject.x) < this._padSensibilityDown) {\n        if (this._teleportActive) {\n          this.teleportCamera(this._haloCenter);\n        }\n        gazer._teleportationRequestInitiated = false;\n      }\n    }\n  }\n  _checkRotate(stateObject, gazer) {\n    // Only rotate when user is not currently selecting a teleportation location\n    if (gazer._teleportationRequestInitiated) {\n      return;\n    }\n    if (!gazer._rotationLeftAsked) {\n      if (stateObject.x < -this._padSensibilityUp && gazer._dpadPressed) {\n        gazer._rotationLeftAsked = true;\n        if (this._rotationAllowed) {\n          this._rotateCamera(false);\n        }\n      }\n    } else {\n      if (stateObject.x > -this._padSensibilityDown) {\n        gazer._rotationLeftAsked = false;\n      }\n    }\n    if (!gazer._rotationRightAsked) {\n      if (stateObject.x > this._padSensibilityUp && gazer._dpadPressed) {\n        gazer._rotationRightAsked = true;\n        if (this._rotationAllowed) {\n          this._rotateCamera(true);\n        }\n      }\n    } else {\n      if (stateObject.x < this._padSensibilityDown) {\n        gazer._rotationRightAsked = false;\n      }\n    }\n  }\n  _checkTeleportBackwards(stateObject, gazer) {\n    // Only teleport backwards when user is not currently selecting a teleportation location\n    if (gazer._teleportationRequestInitiated) {\n      return;\n    }\n    // Teleport backwards\n    if (stateObject.y > this._padSensibilityUp && gazer._dpadPressed) {\n      if (!gazer._teleportationBackRequestInitiated) {\n        if (!this.currentVRCamera) {\n          return;\n        }\n        // Get rotation and position of the current camera\n        const rotation = Quaternion.FromRotationMatrix(this.currentVRCamera.getWorldMatrix().getRotationMatrix());\n        const position = this.currentVRCamera.position;\n        // Get matrix with only the y rotation of the device rotation\n        rotation.toEulerAnglesToRef(this._workingVector);\n        this._workingVector.z = 0;\n        this._workingVector.x = 0;\n        Quaternion.RotationYawPitchRollToRef(this._workingVector.y, this._workingVector.x, this._workingVector.z, this._workingQuaternion);\n        this._workingQuaternion.toRotationMatrix(this._workingMatrix);\n        // Rotate backwards ray by device rotation to cast at the ground behind the user\n        Vector3.TransformCoordinatesToRef(this._teleportBackwardsVector, this._workingMatrix, this._workingVector);\n        // Teleport if ray hit the ground and is not to far away eg. backwards off a cliff\n        const ray = new Ray(position, this._workingVector);\n        const hit = this._scene.pickWithRay(ray, this._raySelectionPredicate);\n        if (hit && hit.pickedPoint && hit.pickedMesh && this._isTeleportationFloor(hit.pickedMesh) && hit.distance < 5) {\n          this.teleportCamera(hit.pickedPoint);\n        }\n        gazer._teleportationBackRequestInitiated = true;\n      }\n    } else {\n      gazer._teleportationBackRequestInitiated = false;\n    }\n  }\n  _createTeleportationCircles() {\n    this._teleportationTarget = CreateGround(\"teleportationTarget\", {\n      width: 2,\n      height: 2,\n      subdivisions: 2\n    }, this._scene);\n    this._teleportationTarget.isPickable = false;\n    const length = 512;\n    const dynamicTexture = new DynamicTexture(\"DynamicTexture\", length, this._scene, true);\n    dynamicTexture.hasAlpha = true;\n    const context = dynamicTexture.getContext();\n    const centerX = length / 2;\n    const centerY = length / 2;\n    const radius = 200;\n    context.beginPath();\n    context.arc(centerX, centerY, radius, 0, 2 * Math.PI, false);\n    context.fillStyle = this._teleportationFillColor;\n    context.fill();\n    context.lineWidth = 10;\n    context.strokeStyle = this._teleportationBorderColor;\n    context.stroke();\n    context.closePath();\n    dynamicTexture.update();\n    const teleportationCircleMaterial = new StandardMaterial(\"TextPlaneMaterial\", this._scene);\n    teleportationCircleMaterial.diffuseTexture = dynamicTexture;\n    this._teleportationTarget.material = teleportationCircleMaterial;\n    const torus = CreateTorus(\"torusTeleportation\", {\n      diameter: 0.75,\n      thickness: 0.1,\n      tessellation: 25,\n      updatable: false\n    }, this._scene);\n    torus.isPickable = false;\n    torus.parent = this._teleportationTarget;\n    const animationInnerCircle = new Animation(\"animationInnerCircle\", \"position.y\", 30, Animation.ANIMATIONTYPE_FLOAT, Animation.ANIMATIONLOOPMODE_CYCLE);\n    const keys = [];\n    keys.push({\n      frame: 0,\n      value: 0\n    });\n    keys.push({\n      frame: 30,\n      value: 0.4\n    });\n    keys.push({\n      frame: 60,\n      value: 0\n    });\n    animationInnerCircle.setKeys(keys);\n    const easingFunction = new SineEase();\n    easingFunction.setEasingMode(EasingFunction.EASINGMODE_EASEINOUT);\n    animationInnerCircle.setEasingFunction(easingFunction);\n    torus.animations = [];\n    torus.animations.push(animationInnerCircle);\n    this._scene.beginAnimation(torus, 0, 60, true);\n    this._hideTeleportationTarget();\n  }\n  _hideTeleportationTarget() {\n    this._teleportActive = false;\n    if (this._teleportationInitialized) {\n      this._teleportationTarget.isVisible = false;\n      if (this._isDefaultTeleportationTarget) {\n        this._teleportationTarget.getChildren()[0].isVisible = false;\n      }\n    }\n  }\n  _rotateCamera(right) {\n    if (!(this.currentVRCamera instanceof FreeCamera)) {\n      return;\n    }\n    if (right) {\n      this._rotationAngle++;\n    } else {\n      this._rotationAngle--;\n    }\n    this.currentVRCamera.animations = [];\n    const target = Quaternion.FromRotationMatrix(Matrix.RotationY(Math.PI / 4 * this._rotationAngle));\n    const animationRotation = new Animation(\"animationRotation\", \"rotationQuaternion\", 90, Animation.ANIMATIONTYPE_QUATERNION, Animation.ANIMATIONLOOPMODE_CONSTANT);\n    const animationRotationKeys = [];\n    animationRotationKeys.push({\n      frame: 0,\n      value: this.currentVRCamera.rotationQuaternion\n    });\n    animationRotationKeys.push({\n      frame: 6,\n      value: target\n    });\n    animationRotation.setKeys(animationRotationKeys);\n    animationRotation.setEasingFunction(this._circleEase);\n    this.currentVRCamera.animations.push(animationRotation);\n    this._postProcessMove.animations = [];\n    const animationPP = new Animation(\"animationPP\", \"vignetteWeight\", 90, Animation.ANIMATIONTYPE_FLOAT, Animation.ANIMATIONLOOPMODE_CONSTANT);\n    const vignetteWeightKeys = [];\n    vignetteWeightKeys.push({\n      frame: 0,\n      value: 0\n    });\n    vignetteWeightKeys.push({\n      frame: 3,\n      value: 4\n    });\n    vignetteWeightKeys.push({\n      frame: 6,\n      value: 0\n    });\n    animationPP.setKeys(vignetteWeightKeys);\n    animationPP.setEasingFunction(this._circleEase);\n    this._postProcessMove.animations.push(animationPP);\n    const animationPP2 = new Animation(\"animationPP2\", \"vignetteStretch\", 90, Animation.ANIMATIONTYPE_FLOAT, Animation.ANIMATIONLOOPMODE_CONSTANT);\n    const vignetteStretchKeys = [];\n    vignetteStretchKeys.push({\n      frame: 0,\n      value: 0\n    });\n    vignetteStretchKeys.push({\n      frame: 3,\n      value: 10\n    });\n    vignetteStretchKeys.push({\n      frame: 6,\n      value: 0\n    });\n    animationPP2.setKeys(vignetteStretchKeys);\n    animationPP2.setEasingFunction(this._circleEase);\n    this._postProcessMove.animations.push(animationPP2);\n    this._postProcessMove.imageProcessingConfiguration.vignetteWeight = 0;\n    this._postProcessMove.imageProcessingConfiguration.vignetteStretch = 0;\n    this._postProcessMove.samples = 4;\n    this._scene.beginAnimation(this.currentVRCamera, 0, 6, false, 1);\n  }\n  /**\n   * Teleports the users feet to the desired location\n   * @param location The location where the user's feet should be placed\n   */\n  teleportCamera(location) {\n    if (!(this.currentVRCamera instanceof FreeCamera)) {\n      return;\n    }\n    // Teleport the hmd to where the user is looking by moving the anchor to where they are looking minus the\n    // offset of the headset from the anchor.\n    this._workingVector.copyFrom(location);\n    // Add height to account for user's height offset\n    if (this.isInVRMode) {\n      // no-op\n    } else {\n      this._workingVector.y += this._defaultHeight;\n    }\n    this.onBeforeCameraTeleport.notifyObservers(this._workingVector);\n    // Animations FPS\n    const FPS = 90;\n    let speedRatio, lastFrame;\n    if (this._teleportationMode == VRExperienceHelper.TELEPORTATIONMODE_CONSTANTSPEED) {\n      lastFrame = FPS;\n      const dist = Vector3.Distance(this.currentVRCamera.position, this._workingVector);\n      speedRatio = this._teleportationSpeed / dist;\n    } else {\n      // teleportationMode is TELEPORTATIONMODE_CONSTANTTIME\n      lastFrame = Math.round(this._teleportationTime * FPS / 1000);\n      speedRatio = 1;\n    }\n    // Create animation from the camera's position to the new location\n    this.currentVRCamera.animations = [];\n    const animationCameraTeleportation = new Animation(\"animationCameraTeleportation\", \"position\", FPS, Animation.ANIMATIONTYPE_VECTOR3, Animation.ANIMATIONLOOPMODE_CONSTANT);\n    const animationCameraTeleportationKeys = [{\n      frame: 0,\n      value: this.currentVRCamera.position\n    }, {\n      frame: lastFrame,\n      value: this._workingVector\n    }];\n    animationCameraTeleportation.setKeys(animationCameraTeleportationKeys);\n    animationCameraTeleportation.setEasingFunction(this._teleportationEasing);\n    this.currentVRCamera.animations.push(animationCameraTeleportation);\n    this._postProcessMove.animations = [];\n    // Calculate the mid frame for vignette animations\n    const midFrame = Math.round(lastFrame / 2);\n    const animationPP = new Animation(\"animationPP\", \"vignetteWeight\", FPS, Animation.ANIMATIONTYPE_FLOAT, Animation.ANIMATIONLOOPMODE_CONSTANT);\n    const vignetteWeightKeys = [];\n    vignetteWeightKeys.push({\n      frame: 0,\n      value: 0\n    });\n    vignetteWeightKeys.push({\n      frame: midFrame,\n      value: 8\n    });\n    vignetteWeightKeys.push({\n      frame: lastFrame,\n      value: 0\n    });\n    animationPP.setKeys(vignetteWeightKeys);\n    this._postProcessMove.animations.push(animationPP);\n    const animationPP2 = new Animation(\"animationPP2\", \"vignetteStretch\", FPS, Animation.ANIMATIONTYPE_FLOAT, Animation.ANIMATIONLOOPMODE_CONSTANT);\n    const vignetteStretchKeys = [];\n    vignetteStretchKeys.push({\n      frame: 0,\n      value: 0\n    });\n    vignetteStretchKeys.push({\n      frame: midFrame,\n      value: 10\n    });\n    vignetteStretchKeys.push({\n      frame: lastFrame,\n      value: 0\n    });\n    animationPP2.setKeys(vignetteStretchKeys);\n    this._postProcessMove.animations.push(animationPP2);\n    this._postProcessMove.imageProcessingConfiguration.vignetteWeight = 0;\n    this._postProcessMove.imageProcessingConfiguration.vignetteStretch = 0;\n    this._scene.beginAnimation(this.currentVRCamera, 0, lastFrame, false, speedRatio, () => {\n      this.onAfterCameraTeleport.notifyObservers(this._workingVector);\n    });\n    this._hideTeleportationTarget();\n  }\n  /**\n   * Permanently set new colors for the laser pointer\n   * @param color the new laser color\n   * @param pickedColor the new laser color when picked mesh detected\n   */\n  setLaserColor(color, pickedColor = this._pickedLaserColor) {\n    this._pickedLaserColor = pickedColor;\n  }\n  /**\n   * Set lighting enabled / disabled on the laser pointer of both controllers\n   * @param enabled should the lighting be enabled on the laser pointer\n   */\n  setLaserLightingState(_enabled = true) {\n    // no-op\n  }\n  /**\n   * Permanently set new colors for the gaze pointer\n   * @param color the new gaze color\n   * @param pickedColor the new gaze color when picked mesh detected\n   */\n  setGazeColor(color, pickedColor = this._pickedGazeColor) {\n    this._pickedGazeColor = pickedColor;\n  }\n  /**\n   * Sets the color of the laser ray from the vr controllers.\n   * @param color new color for the ray.\n   */\n  changeLaserColor(_color) {\n    if (!this.updateControllerLaserColor) {\n      return;\n    }\n  }\n  /**\n   * Sets the color of the ray from the vr headsets gaze.\n   * @param color new color for the ray.\n   */\n  changeGazeColor(color) {\n    if (!this.updateGazeTrackerColor) {\n      return;\n    }\n    if (!this._cameraGazer._gazeTracker.material) {\n      return;\n    }\n    this._cameraGazer._gazeTracker.material.emissiveColor = color;\n  }\n  /**\n   * Exits VR and disposes of the vr experience helper\n   */\n  dispose() {\n    if (this.isInVRMode) {\n      this.exitVR();\n    }\n    if (this._postProcessMove) {\n      this._postProcessMove.dispose();\n    }\n    if (this._vrDeviceOrientationCamera) {\n      this._vrDeviceOrientationCamera.dispose();\n    }\n    if (!this._useCustomVRButton && this._btnVR && this._btnVR.parentNode) {\n      document.body.removeChild(this._btnVR);\n    }\n    if (this._deviceOrientationCamera && this._scene.activeCamera != this._deviceOrientationCamera) {\n      this._deviceOrientationCamera.dispose();\n    }\n    if (this._cameraGazer) {\n      this._cameraGazer.dispose();\n    }\n    if (this._teleportationTarget) {\n      this._teleportationTarget.dispose();\n    }\n    if (this.xr) {\n      this.xr.dispose();\n    }\n    this._floorMeshesCollection.length = 0;\n    document.removeEventListener(\"keydown\", this._onKeyDown);\n    window.removeEventListener(\"vrdisplaypresentchange\", this._onVrDisplayPresentChangeBind);\n    window.removeEventListener(\"resize\", this._onResize);\n    document.removeEventListener(\"fullscreenchange\", this._onFullscreenChange);\n    this._scene.gamepadManager.onGamepadConnectedObservable.removeCallback(this._onNewGamepadConnected);\n    this._scene.unregisterBeforeRender(this._beforeRender);\n  }\n  /**\n   * Gets the name of the VRExperienceHelper class\n   * @returns \"VRExperienceHelper\"\n   */\n  getClassName() {\n    return \"VRExperienceHelper\";\n  }\n}\n/**\n * Time Constant Teleportation Mode\n */\nVRExperienceHelper.TELEPORTATIONMODE_CONSTANTTIME = 0;\n/**\n * Speed Constant Teleportation Mode\n */\nVRExperienceHelper.TELEPORTATIONMODE_CONSTANTSPEED = 1;","map":{"version":3,"names":["Logger","Observable","FreeCamera","TargetCamera","DeviceOrientationCamera","VRDeviceOrientationFreeCamera","PointerEventTypes","Quaternion","Matrix","Vector3","Color3","Color4","Gamepad","Xbox360Button","Ray","ImageProcessingConfiguration","StandardMaterial","DynamicTexture","SineEase","EasingFunction","CircleEase","Animation","WebXRSessionManager","WebXRState","CreateGround","CreateTorus","VRExperienceHelperGazer","constructor","scene","gazeTrackerToClone","_pointerDownOnMeshAsked","_isActionableMesh","_teleportationRequestInitiated","_teleportationBackRequestInitiated","_rotationRightAsked","_rotationLeftAsked","_dpadPressed","_activePointer","_id","_IdCounter","_gazeTracker","diameter","thickness","tessellation","updatable","bakeCurrentTransformIntoVertices","isPickable","isVisible","targetMat","specularColor","Black","emissiveColor","backFaceCulling","material","clone","_getForwardRay","length","Zero","_selectionPointerDown","_currentHit","simulatePointerDown","pointerId","_selectionPointerUp","simulatePointerUp","_activatePointer","_deactivatePointer","_updatePointerDistance","distance","dispose","_interactionsEnabled","_teleportationEnabled","VRExperienceHelperCameraGazer","_getCamera","camera","getForwardRay","Forward","OnAfterEnteringVRObservableEvent","VRExperienceHelper","onEnteringVR","onEnteringVRObservable","onExitingVR","onExitingVRObservable","teleportationTarget","_teleportationTarget","value","name","_isDefaultTeleportationTarget","gazeTrackerMesh","_cameraGazer","displayGaze","_displayGaze","displayLaserPointer","_displayLaserPointer","deviceOrientationCamera","_deviceOrientationCamera","currentVRCamera","_scene","activeCamera","vrDeviceOrientationCamera","_vrDeviceOrientationCamera","vrButton","_btnVR","webVROptions","_fullscreenVRpresenting","enableGazeEvenWhenNoPointerLock","exitVROnDoubleTap","onAfterEnteringVRObservable","_useCustomVRButton","_teleportActive","_floorMeshesCollection","_teleportationMode","TELEPORTATIONMODE_CONSTANTTIME","_teleportationTime","_teleportationSpeed","_rotationAllowed","_teleportBackwardsVector","_teleportationFillColor","_teleportationBorderColor","_rotationAngle","_haloCenter","_padSensibilityUp","_padSensibilityDown","_pickedLaserColor","_pickedGazeColor","onNewMeshSelected","onNewMeshPicked","onBeforeCameraTeleport","onAfterCameraTeleport","onSelectedMeshUnselected","teleportationEnabled","_teleportationInitialized","updateGazeTrackerScale","updateGazeTrackerColor","updateControllerLaserColor","requestPointerLockOnFullScreen","xrTestDone","_onResize","_moveButtonToBottomRight","_onFullscreenChange","document","fullscreenElement","_inputElement","exitVR","style","top","offsetTop","offsetHeight","left","offsetLeft","offsetWidth","_updateButtonVisibility","_cachedAngularSensibility","angularSensibilityX","angularSensibilityY","angularSensibility","_beforeRender","getEngine","isPointerLock","_onNewGamepadConnected","gamepad","type","POSE_ENABLED","leftStick","onleftstickchanged","stickValues","_checkTeleportWithRay","_checkTeleportBackwards","rightStick","onrightstickchanged","_checkRotate","XBOX","onbuttondown","buttonPressed","A","onbuttonup","_workingVector","_workingQuaternion","Identity","_workingMatrix","Warn","getInputElement","vrSupported","navigator","useXR","undefined","createFallbackVRDeviceOrientationFreeCamera","createDeviceOrientationCamera","laserToggle","_hasEnteredVR","_position","position","_defaultHeight","minZ","maxZ","rotation","targetCamera","rotationQuaternion","copyFrom","RotationYawPitchRoll","y","x","z","attachControl","_existingCamera","xr","IsSessionSupportedAsync","then","supported","Log","createDefaultXRExperienceAsync","floorMeshes","baseExperience","onStateChangedObservable","add","state","ENTERING_XR","notifyObservers","pointerSelection","detach","EXITING_XR","resize","IN_XR","NOT_IN_XR","_completeVRInit","vrDeviceOrientationCameraMetrics","Number","MAX_VALUE","createElement","className","id","title","url","window","SVGSVGElement","css","appendChild","createTextNode","getElementsByTagName","addEventListener","isInVRMode","enterVR","hostWindow","getHostWindow","_displayVRButton","_onKeyDown","event","keyCode","onPrePointerObservable","exitFullscreen","POINTERDOUBLETAP","onDisposeObservable","_circleEase","setEasingMode","EASINGMODE_EASEINOUT","_teleportationEasing","onPointerObservable","e","pointerType","POINTERDOWN","POINTERUP","enableTeleportation","rect","getBoundingClientRect","height","width","_btnVRDisplayed","body","enterXRAsync","renderTarget","err","FromRotationMatrix","getWorldMatrix","getRotationMatrix","toEulerAngles","enterFullscreen","onViewMatrixChangedObservable","addOnce","success","registerBeforeRender","exitXRAsync","unregisterBeforeRender","enableInteractions","attach","raySelectionPredicate","mesh","_floorMeshName","meshSelectionPredicate","_raySelectionPredicate","_isTeleportationFloor","indexOf","i","addFloorMesh","floorMesh","push","removeFloorMesh","meshIndex","splice","vrTeleportationOptions","floorMeshName","getMeshByName","forEach","teleportation","attached","waitForXr","teleportationMode","teleportationTime","teleportationSpeed","easingFunction","imageProcessingConfiguration","vignetteColor","vignetteEnabled","_createTeleportationCircles","stateObject","gazer","Math","sqrt","teleportCamera","_rotateCamera","toEulerAnglesToRef","RotationYawPitchRollToRef","toRotationMatrix","TransformCoordinatesToRef","ray","hit","pickWithRay","pickedPoint","pickedMesh","subdivisions","dynamicTexture","hasAlpha","context","getContext","centerX","centerY","radius","beginPath","arc","PI","fillStyle","fill","lineWidth","strokeStyle","stroke","closePath","update","teleportationCircleMaterial","diffuseTexture","torus","parent","animationInnerCircle","ANIMATIONTYPE_FLOAT","ANIMATIONLOOPMODE_CYCLE","keys","frame","setKeys","setEasingFunction","animations","beginAnimation","_hideTeleportationTarget","getChildren","right","target","RotationY","animationRotation","ANIMATIONTYPE_QUATERNION","ANIMATIONLOOPMODE_CONSTANT","animationRotationKeys","_postProcessMove","animationPP","vignetteWeightKeys","animationPP2","vignetteStretchKeys","vignetteWeight","vignetteStretch","samples","location","FPS","speedRatio","lastFrame","TELEPORTATIONMODE_CONSTANTSPEED","dist","Distance","round","animationCameraTeleportation","ANIMATIONTYPE_VECTOR3","animationCameraTeleportationKeys","midFrame","setLaserColor","color","pickedColor","setLaserLightingState","_enabled","setGazeColor","changeLaserColor","_color","changeGazeColor","parentNode","removeChild","removeEventListener","_onVrDisplayPresentChangeBind","gamepadManager","onGamepadConnectedObservable","removeCallback","getClassName"],"sources":["../../../../../dev/core/src/Cameras/VR/vrExperienceHelper.ts"],"sourcesContent":["import { Logger } from \"../../Misc/logger\";\r\nimport { Observable } from \"../../Misc/observable\";\r\nimport type { Nullable } from \"../../types\";\r\nimport type { Camera } from \"../../Cameras/camera\";\r\nimport { FreeCamera } from \"../../Cameras/freeCamera\";\r\nimport { TargetCamera } from \"../../Cameras/targetCamera\";\r\nimport { DeviceOrientationCamera } from \"../../Cameras/deviceOrientationCamera\";\r\nimport { VRDeviceOrientationFreeCamera } from \"../../Cameras/VR/vrDeviceOrientationFreeCamera\";\r\nimport { PointerEventTypes } from \"../../Events/pointerEvents\";\r\nimport type { Scene, IDisposable } from \"../../scene\";\r\nimport { Quaternion, Matrix, Vector3 } from \"../../Maths/math.vector\";\r\nimport { Color3, Color4 } from \"../../Maths/math.color\";\r\nimport type { StickValues } from \"../../Gamepads/gamepad\";\r\nimport { Gamepad } from \"../../Gamepads/gamepad\";\r\nimport type { Xbox360Pad } from \"../../Gamepads/xboxGamepad\";\r\nimport { Xbox360Button } from \"../../Gamepads/xboxGamepad\";\r\nimport type { AbstractMesh } from \"../../Meshes/abstractMesh\";\r\nimport type { PickingInfo } from \"../../Collisions/pickingInfo\";\r\nimport { Ray } from \"../../Culling/ray\";\r\nimport { ImageProcessingConfiguration } from \"../../Materials/imageProcessingConfiguration\";\r\nimport { StandardMaterial } from \"../../Materials/standardMaterial\";\r\nimport { DynamicTexture } from \"../../Materials/Textures/dynamicTexture\";\r\nimport type { ImageProcessingPostProcess } from \"../../PostProcesses/imageProcessingPostProcess\";\r\nimport { SineEase, EasingFunction, CircleEase } from \"../../Animations/easing\";\r\nimport { Animation } from \"../../Animations/animation\";\r\nimport type { VRCameraMetrics } from \"../../Cameras/VR/vrCameraMetrics\";\r\nimport \"../../Gamepads/gamepadSceneComponent\";\r\nimport \"../../Animations/animatable\";\r\nimport { WebXRSessionManager } from \"../../XR/webXRSessionManager\";\r\nimport type { WebXRDefaultExperience } from \"../../XR/webXRDefaultExperience\";\r\nimport { WebXRState } from \"../../XR/webXRTypes\";\r\nimport { CreateGround } from \"../../Meshes/Builders/groundBuilder\";\r\nimport type { IPointerEvent } from \"../../Events/deviceInputEvents\";\r\nimport type { Mesh } from \"core/Meshes/mesh\";\r\nimport { CreateTorus } from \"core/Meshes/Builders/torusBuilder\";\r\n\r\n/**\r\n * Options to modify the vr teleportation behavior.\r\n */\r\nexport interface VRTeleportationOptions {\r\n    /**\r\n     * The name of the mesh which should be used as the teleportation floor. (default: null)\r\n     */\r\n    floorMeshName?: string;\r\n    /**\r\n     * A list of meshes to be used as the teleportation floor. (default: empty)\r\n     */\r\n    floorMeshes?: Mesh[];\r\n    /**\r\n     * The teleportation mode. (default: TELEPORTATIONMODE_CONSTANTTIME)\r\n     */\r\n    teleportationMode?: number;\r\n    /**\r\n     * The duration of the animation in ms, apply when animationMode is TELEPORTATIONMODE_CONSTANTTIME. (default 122ms)\r\n     */\r\n    teleportationTime?: number;\r\n    /**\r\n     * The speed of the animation in distance/sec, apply when animationMode is TELEPORTATIONMODE_CONSTANTSPEED. (default 20 units / sec)\r\n     */\r\n    teleportationSpeed?: number;\r\n    /**\r\n     * The easing function used in the animation or null for Linear. (default CircleEase)\r\n     */\r\n    easingFunction?: EasingFunction;\r\n}\r\n\r\n/**\r\n * Options to modify the vr experience helper's behavior.\r\n */\r\nexport interface VRExperienceHelperOptions {\r\n    /**\r\n     * Create a DeviceOrientationCamera to be used as your out of vr camera. (default: true)\r\n     */\r\n    createDeviceOrientationCamera?: boolean;\r\n    /**\r\n     * Create a VRDeviceOrientationFreeCamera to be used for VR when no external HMD is found. (default: true)\r\n     */\r\n    createFallbackVRDeviceOrientationFreeCamera?: boolean;\r\n    /**\r\n     * Uses the main button on the controller to toggle the laser casted. (default: true)\r\n     */\r\n    laserToggle?: boolean;\r\n    /**\r\n     * A list of meshes to be used as the teleportation floor. If specified, teleportation will be enabled (default: undefined)\r\n     */\r\n    floorMeshes?: Mesh[];\r\n    /**\r\n     * Distortion metrics for the fallback vrDeviceOrientationCamera (default: VRCameraMetrics.Default)\r\n     */\r\n    vrDeviceOrientationCameraMetrics?: VRCameraMetrics;\r\n    /**\r\n     * Defines if WebXR should be used (if available)\r\n     */\r\n    useXR?: boolean;\r\n}\r\n\r\nclass VRExperienceHelperGazer implements IDisposable {\r\n    /** @internal */\r\n    public _gazeTracker: Mesh;\r\n\r\n    /** @internal */\r\n    public _currentMeshSelected: Nullable<AbstractMesh>;\r\n    /** @internal */\r\n    public _currentHit: Nullable<PickingInfo>;\r\n\r\n    public static _IdCounter = 0;\r\n    /** @internal */\r\n    public _id: number;\r\n\r\n    /** @internal */\r\n    public _pointerDownOnMeshAsked: boolean = false;\r\n    /** @internal */\r\n    public _isActionableMesh: boolean = false;\r\n\r\n    /** @internal */\r\n    public _interactionsEnabled: boolean;\r\n    /** @internal */\r\n    public _teleportationEnabled: boolean;\r\n    /** @internal */\r\n    public _teleportationRequestInitiated = false;\r\n    /** @internal */\r\n    public _teleportationBackRequestInitiated = false;\r\n    /** @internal */\r\n    public _rotationRightAsked = false;\r\n    /** @internal */\r\n    public _rotationLeftAsked = false;\r\n    /** @internal */\r\n    public _dpadPressed = true;\r\n\r\n    /** @internal */\r\n    public _activePointer = false;\r\n\r\n    constructor(public scene: Scene, gazeTrackerToClone: Nullable<Mesh> = null) {\r\n        this._id = VRExperienceHelperGazer._IdCounter++;\r\n\r\n        // Gaze tracker\r\n        if (!gazeTrackerToClone) {\r\n            this._gazeTracker = CreateTorus(\r\n                \"gazeTracker\",\r\n                {\r\n                    diameter: 0.0035,\r\n                    thickness: 0.0025,\r\n                    tessellation: 20,\r\n                    updatable: false,\r\n                },\r\n                scene\r\n            );\r\n            this._gazeTracker.bakeCurrentTransformIntoVertices();\r\n            this._gazeTracker.isPickable = false;\r\n            this._gazeTracker.isVisible = false;\r\n            const targetMat = new StandardMaterial(\"targetMat\", scene);\r\n            targetMat.specularColor = Color3.Black();\r\n            targetMat.emissiveColor = new Color3(0.7, 0.7, 0.7);\r\n            targetMat.backFaceCulling = false;\r\n            this._gazeTracker.material = targetMat;\r\n        } else {\r\n            this._gazeTracker = gazeTrackerToClone.clone(\"gazeTracker\") as Mesh;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _getForwardRay(length: number): Ray {\r\n        return new Ray(Vector3.Zero(), new Vector3(0, 0, length));\r\n    }\r\n\r\n    /** @internal */\r\n    public _selectionPointerDown() {\r\n        this._pointerDownOnMeshAsked = true;\r\n        if (this._currentHit) {\r\n            this.scene.simulatePointerDown(this._currentHit, { pointerId: this._id });\r\n        }\r\n    }\r\n\r\n    /** @internal */\r\n    public _selectionPointerUp() {\r\n        if (this._currentHit) {\r\n            this.scene.simulatePointerUp(this._currentHit, { pointerId: this._id });\r\n        }\r\n        this._pointerDownOnMeshAsked = false;\r\n    }\r\n\r\n    /** @internal */\r\n    public _activatePointer() {\r\n        this._activePointer = true;\r\n    }\r\n\r\n    /** @internal */\r\n    public _deactivatePointer() {\r\n        this._activePointer = false;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    public _updatePointerDistance(distance: number = 100) {}\r\n\r\n    public dispose() {\r\n        this._interactionsEnabled = false;\r\n        this._teleportationEnabled = false;\r\n        if (this._gazeTracker) {\r\n            this._gazeTracker.dispose();\r\n        }\r\n    }\r\n}\r\n\r\nclass VRExperienceHelperCameraGazer extends VRExperienceHelperGazer {\r\n    constructor(private _getCamera: () => Nullable<Camera>, scene: Scene) {\r\n        super(scene);\r\n    }\r\n\r\n    _getForwardRay(length: number): Ray {\r\n        const camera = this._getCamera();\r\n        if (camera) {\r\n            return camera.getForwardRay(length);\r\n        } else {\r\n            return new Ray(Vector3.Zero(), Vector3.Forward());\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * Event containing information after VR has been entered\r\n */\r\nexport class OnAfterEnteringVRObservableEvent {\r\n    /**\r\n     * If entering vr was successful\r\n     */\r\n    public success: boolean;\r\n}\r\n\r\n/**\r\n * Helps to quickly add VR support to an existing scene.\r\n * See https://doc.babylonjs.com/features/featuresDeepDive/cameras/webVRHelper\r\n * @deprecated Use WebXR instead!\r\n */\r\nexport class VRExperienceHelper {\r\n    private _scene: Scene;\r\n    private _position: Vector3;\r\n    private _btnVR: Nullable<HTMLButtonElement>;\r\n    private _btnVRDisplayed: boolean;\r\n\r\n    // Have we entered VR? (this is the VRExperienceHelper state)\r\n    private _hasEnteredVR: boolean;\r\n\r\n    // Are we presenting in the fullscreen fallback?\r\n    private _fullscreenVRpresenting = false;\r\n\r\n    private _inputElement: Nullable<HTMLElement>;\r\n    private _vrDeviceOrientationCamera: Nullable<VRDeviceOrientationFreeCamera>;\r\n    private _deviceOrientationCamera: Nullable<DeviceOrientationCamera>;\r\n    private _existingCamera: Camera;\r\n\r\n    private _onKeyDown: (event: KeyboardEvent) => void;\r\n    private _onVrDisplayPresentChangeBind: any;\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating that gaze can be enabled even if pointer lock is not engage (useful on iOS where fullscreen mode and pointer lock are not supported)\r\n     */\r\n    public enableGazeEvenWhenNoPointerLock = false;\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating that the VREXperienceHelper will exit VR if double tap is detected\r\n     */\r\n    public exitVROnDoubleTap = true;\r\n\r\n    /**\r\n     * Observable raised right before entering VR.\r\n     */\r\n    public onEnteringVRObservable = new Observable<VRExperienceHelper>();\r\n\r\n    /**\r\n     * Observable raised when entering VR has completed.\r\n     */\r\n    public onAfterEnteringVRObservable = new Observable<OnAfterEnteringVRObservableEvent>();\r\n\r\n    /**\r\n     * Observable raised when exiting VR.\r\n     */\r\n    public onExitingVRObservable = new Observable<VRExperienceHelper>();\r\n\r\n    /** Return this.onEnteringVRObservable\r\n     * Note: This one is for backward compatibility. Please use onEnteringVRObservable directly\r\n     */\r\n    public get onEnteringVR(): Observable<VRExperienceHelper> {\r\n        return this.onEnteringVRObservable;\r\n    }\r\n\r\n    /** Return this.onExitingVRObservable\r\n     * Note: This one is for backward compatibility. Please use onExitingVRObservable directly\r\n     */\r\n    public get onExitingVR(): Observable<VRExperienceHelper> {\r\n        return this.onExitingVRObservable;\r\n    }\r\n\r\n    private _useCustomVRButton: boolean = false;\r\n    private _teleportActive = false;\r\n    private _floorMeshName: string;\r\n    private _floorMeshesCollection: Mesh[] = [];\r\n    private _teleportationMode: number = VRExperienceHelper.TELEPORTATIONMODE_CONSTANTTIME;\r\n    private _teleportationTime: number = 122;\r\n    private _teleportationSpeed: number = 20;\r\n    private _teleportationEasing: EasingFunction;\r\n    private _rotationAllowed: boolean = true;\r\n    private _teleportBackwardsVector = new Vector3(0, -1, -1);\r\n    private _teleportationTarget: Mesh;\r\n    private _isDefaultTeleportationTarget = true;\r\n    private _postProcessMove: ImageProcessingPostProcess;\r\n    private _teleportationFillColor: string = \"#444444\";\r\n    private _teleportationBorderColor: string = \"#FFFFFF\";\r\n    private _rotationAngle: number = 0;\r\n    private _haloCenter = new Vector3(0, 0, 0);\r\n    private _cameraGazer: VRExperienceHelperCameraGazer;\r\n    private _padSensibilityUp = 0.65;\r\n    private _padSensibilityDown = 0.35;\r\n\r\n    private _pickedLaserColor: Color3 = new Color3(0.2, 0.2, 1);\r\n    private _pickedGazeColor: Color3 = new Color3(0, 0, 1);\r\n\r\n    /**\r\n     * Observable raised when a new mesh is selected based on meshSelectionPredicate\r\n     */\r\n    public onNewMeshSelected = new Observable<AbstractMesh>();\r\n\r\n    /**\r\n     * Observable raised when a new mesh is picked based on meshSelectionPredicate\r\n     */\r\n    public onNewMeshPicked = new Observable<PickingInfo>();\r\n\r\n    private _circleEase: CircleEase;\r\n\r\n    /**\r\n     * Observable raised before camera teleportation\r\n     */\r\n    public onBeforeCameraTeleport = new Observable<Vector3>();\r\n\r\n    /**\r\n     *  Observable raised after camera teleportation\r\n     */\r\n    public onAfterCameraTeleport = new Observable<Vector3>();\r\n\r\n    /**\r\n     * Observable raised when current selected mesh gets unselected\r\n     */\r\n    public onSelectedMeshUnselected = new Observable<AbstractMesh>();\r\n\r\n    private _raySelectionPredicate: (mesh: AbstractMesh) => boolean;\r\n\r\n    /**\r\n     * To be optionally changed by user to define custom ray selection\r\n     */\r\n    public raySelectionPredicate: (mesh: AbstractMesh) => boolean;\r\n\r\n    /**\r\n     * To be optionally changed by user to define custom selection logic (after ray selection)\r\n     */\r\n    public meshSelectionPredicate: (mesh: AbstractMesh) => boolean;\r\n\r\n    /**\r\n     * Set teleportation enabled. If set to false camera teleportation will be disabled but camera rotation will be kept.\r\n     */\r\n    public teleportationEnabled: boolean = true;\r\n\r\n    private _defaultHeight: number;\r\n    private _teleportationInitialized = false;\r\n    private _interactionsEnabled = false;\r\n    private _displayGaze = true;\r\n    private _displayLaserPointer = true;\r\n\r\n    /**\r\n     * The mesh used to display where the user is going to teleport.\r\n     */\r\n    public get teleportationTarget(): Mesh {\r\n        return this._teleportationTarget;\r\n    }\r\n\r\n    /**\r\n     * Sets the mesh to be used to display where the user is going to teleport.\r\n     */\r\n    public set teleportationTarget(value: Mesh) {\r\n        if (value) {\r\n            value.name = \"teleportationTarget\";\r\n            this._isDefaultTeleportationTarget = false;\r\n            this._teleportationTarget = value;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * The mesh used to display where the user is selecting, this mesh will be cloned and set as the gazeTracker for the left and right controller\r\n     * when set bakeCurrentTransformIntoVertices will be called on the mesh.\r\n     * See https://doc.babylonjs.com/features/featuresDeepDive/mesh/transforms/center_origin/bakingTransforms\r\n     */\r\n    public get gazeTrackerMesh(): Mesh {\r\n        return this._cameraGazer._gazeTracker;\r\n    }\r\n\r\n    public set gazeTrackerMesh(value: Mesh) {\r\n        if (value) {\r\n            // Dispose of existing meshes\r\n            if (this._cameraGazer._gazeTracker) {\r\n                this._cameraGazer._gazeTracker.dispose();\r\n            }\r\n\r\n            // Set and create gaze trackers on head and controllers\r\n            this._cameraGazer._gazeTracker = value;\r\n            this._cameraGazer._gazeTracker.bakeCurrentTransformIntoVertices();\r\n            this._cameraGazer._gazeTracker.isPickable = false;\r\n            this._cameraGazer._gazeTracker.isVisible = false;\r\n            this._cameraGazer._gazeTracker.name = \"gazeTracker\";\r\n        }\r\n    }\r\n\r\n    /**\r\n     * If the gaze trackers scale should be updated to be constant size when pointing at near/far meshes\r\n     */\r\n    public updateGazeTrackerScale = true;\r\n    /**\r\n     * If the gaze trackers color should be updated when selecting meshes\r\n     */\r\n    public updateGazeTrackerColor = true;\r\n    /**\r\n     * If the controller laser color should be updated when selecting meshes\r\n     */\r\n    public updateControllerLaserColor = true;\r\n\r\n    /**\r\n     * If the ray of the gaze should be displayed.\r\n     */\r\n    public get displayGaze(): boolean {\r\n        return this._displayGaze;\r\n    }\r\n\r\n    /**\r\n     * Sets if the ray of the gaze should be displayed.\r\n     */\r\n    public set displayGaze(value: boolean) {\r\n        this._displayGaze = value;\r\n        if (!value) {\r\n            this._cameraGazer._gazeTracker.isVisible = false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * If the ray of the LaserPointer should be displayed.\r\n     */\r\n    public get displayLaserPointer(): boolean {\r\n        return this._displayLaserPointer;\r\n    }\r\n\r\n    /**\r\n     * Sets if the ray of the LaserPointer should be displayed.\r\n     */\r\n    public set displayLaserPointer(value: boolean) {\r\n        this._displayLaserPointer = value;\r\n    }\r\n\r\n    /**\r\n     * The deviceOrientationCamera used as the camera when not in VR.\r\n     */\r\n    public get deviceOrientationCamera(): Nullable<DeviceOrientationCamera> {\r\n        return this._deviceOrientationCamera;\r\n    }\r\n\r\n    /**\r\n     * Based on the current WebVR support, returns the current VR camera used.\r\n     */\r\n    public get currentVRCamera(): Nullable<Camera> {\r\n        return this._scene.activeCamera;\r\n    }\r\n\r\n    /**\r\n     * The deviceOrientationCamera that is used as a fallback when vr device is not connected.\r\n     */\r\n    public get vrDeviceOrientationCamera(): Nullable<VRDeviceOrientationFreeCamera> {\r\n        return this._vrDeviceOrientationCamera;\r\n    }\r\n\r\n    /**\r\n     * The html button that is used to trigger entering into VR.\r\n     */\r\n    public get vrButton(): Nullable<HTMLButtonElement> {\r\n        return this._btnVR;\r\n    }\r\n\r\n    private get _teleportationRequestInitiated(): boolean {\r\n        return this._cameraGazer._teleportationRequestInitiated;\r\n    }\r\n\r\n    /**\r\n     * Defines whether or not Pointer lock should be requested when switching to\r\n     * full screen.\r\n     */\r\n    public requestPointerLockOnFullScreen = true;\r\n\r\n    // XR\r\n\r\n    /**\r\n     * If asking to force XR, this will be populated with the default xr experience\r\n     */\r\n    public xr: WebXRDefaultExperience;\r\n\r\n    /**\r\n     * Was the XR test done already. If this is true AND this.xr exists, xr is initialized.\r\n     * If this is true and no this.xr, xr exists but is not supported, using WebVR.\r\n     */\r\n    public xrTestDone: boolean = false;\r\n\r\n    /**\r\n     * Instantiates a VRExperienceHelper.\r\n     * Helps to quickly add VR support to an existing scene.\r\n     * @param scene The scene the VRExperienceHelper belongs to.\r\n     * @param webVROptions Options to modify the vr experience helper's behavior.\r\n     */\r\n    constructor(\r\n        scene: Scene,\r\n        /** Options to modify the vr experience helper's behavior. */\r\n        public webVROptions: VRExperienceHelperOptions = {}\r\n    ) {\r\n        Logger.Warn(\"WebVR is deprecated. Please avoid using this experience helper and use the WebXR experience helper instead\");\r\n        this._scene = scene;\r\n        this._inputElement = scene.getEngine().getInputElement();\r\n\r\n        // check for VR support:\r\n\r\n        const vrSupported = \"getVRDisplays\" in navigator;\r\n        // no VR support? force XR but only when it is not set because web vr can work without the getVRDisplays\r\n        if (!vrSupported && webVROptions.useXR === undefined) {\r\n            webVROptions.useXR = true;\r\n        }\r\n\r\n        // Parse options\r\n        if (webVROptions.createFallbackVRDeviceOrientationFreeCamera === undefined) {\r\n            webVROptions.createFallbackVRDeviceOrientationFreeCamera = true;\r\n        }\r\n        if (webVROptions.createDeviceOrientationCamera === undefined) {\r\n            webVROptions.createDeviceOrientationCamera = true;\r\n        }\r\n        if (webVROptions.laserToggle === undefined) {\r\n            webVROptions.laserToggle = true;\r\n        }\r\n\r\n        this._hasEnteredVR = false;\r\n\r\n        // Set position\r\n        if (this._scene.activeCamera) {\r\n            this._position = this._scene.activeCamera.position.clone();\r\n        } else {\r\n            this._position = new Vector3(0, this._defaultHeight, 0);\r\n        }\r\n\r\n        // Set non-vr camera\r\n        if (webVROptions.createDeviceOrientationCamera || !this._scene.activeCamera) {\r\n            this._deviceOrientationCamera = new DeviceOrientationCamera(\"deviceOrientationVRHelper\", this._position.clone(), scene);\r\n\r\n            // Copy data from existing camera\r\n            if (this._scene.activeCamera) {\r\n                this._deviceOrientationCamera.minZ = this._scene.activeCamera.minZ;\r\n                this._deviceOrientationCamera.maxZ = this._scene.activeCamera.maxZ;\r\n                // Set rotation from previous camera\r\n                if (this._scene.activeCamera instanceof TargetCamera && this._scene.activeCamera.rotation) {\r\n                    const targetCamera = this._scene.activeCamera;\r\n                    if (targetCamera.rotationQuaternion) {\r\n                        this._deviceOrientationCamera.rotationQuaternion.copyFrom(targetCamera.rotationQuaternion);\r\n                    } else {\r\n                        this._deviceOrientationCamera.rotationQuaternion.copyFrom(\r\n                            Quaternion.RotationYawPitchRoll(targetCamera.rotation.y, targetCamera.rotation.x, targetCamera.rotation.z)\r\n                        );\r\n                    }\r\n                    this._deviceOrientationCamera.rotation = targetCamera.rotation.clone();\r\n                }\r\n            }\r\n\r\n            this._scene.activeCamera = this._deviceOrientationCamera;\r\n            if (this._inputElement) {\r\n                this._scene.activeCamera.attachControl();\r\n            }\r\n        } else {\r\n            this._existingCamera = this._scene.activeCamera;\r\n        }\r\n\r\n        if (this.webVROptions.useXR && (navigator as any).xr) {\r\n            // force-check XR session support\r\n            WebXRSessionManager.IsSessionSupportedAsync(\"immersive-vr\").then((supported) => {\r\n                if (supported) {\r\n                    Logger.Log(\"Using WebXR. It is recommended to use the WebXRDefaultExperience directly\");\r\n                    // it is possible to use XR, let's do it!\r\n                    scene\r\n                        .createDefaultXRExperienceAsync({\r\n                            floorMeshes: webVROptions.floorMeshes || [],\r\n                        })\r\n                        .then((xr) => {\r\n                            this.xr = xr;\r\n                            // connect observables\r\n                            this.xrTestDone = true;\r\n\r\n                            this._cameraGazer = new VRExperienceHelperCameraGazer(() => {\r\n                                return this.xr.baseExperience.camera;\r\n                            }, scene);\r\n\r\n                            this.xr.baseExperience.onStateChangedObservable.add((state) => {\r\n                                // support for entering / exiting\r\n                                switch (state) {\r\n                                    case WebXRState.ENTERING_XR:\r\n                                        this.onEnteringVRObservable.notifyObservers(this);\r\n                                        if (!this._interactionsEnabled) {\r\n                                            this.xr.pointerSelection.detach();\r\n                                        }\r\n                                        this.xr.pointerSelection.displayLaserPointer = this._displayLaserPointer;\r\n                                        break;\r\n                                    case WebXRState.EXITING_XR:\r\n                                        this.onExitingVRObservable.notifyObservers(this);\r\n\r\n                                        // resize to update width and height when exiting vr exits fullscreen\r\n                                        this._scene.getEngine().resize();\r\n                                        break;\r\n                                    case WebXRState.IN_XR:\r\n                                        this._hasEnteredVR = true;\r\n                                        break;\r\n                                    case WebXRState.NOT_IN_XR:\r\n                                        this._hasEnteredVR = false;\r\n                                        break;\r\n                                }\r\n                            });\r\n                        });\r\n                } else {\r\n                    // XR not supported (thou exists), continue WebVR init\r\n                    this._completeVRInit(scene, webVROptions);\r\n                }\r\n            });\r\n        } else {\r\n            // no XR, continue init synchronous\r\n            this._completeVRInit(scene, webVROptions);\r\n        }\r\n    }\r\n\r\n    private _completeVRInit(scene: Scene, webVROptions: VRExperienceHelperOptions): void {\r\n        this.xrTestDone = true;\r\n        // Create VR cameras\r\n        if (webVROptions.createFallbackVRDeviceOrientationFreeCamera) {\r\n            this._vrDeviceOrientationCamera = new VRDeviceOrientationFreeCamera(\r\n                \"VRDeviceOrientationVRHelper\",\r\n                this._position,\r\n                this._scene,\r\n                true,\r\n                webVROptions.vrDeviceOrientationCameraMetrics\r\n            );\r\n            this._vrDeviceOrientationCamera.angularSensibility = Number.MAX_VALUE;\r\n        }\r\n\r\n        this._cameraGazer = new VRExperienceHelperCameraGazer(() => {\r\n            return this.currentVRCamera;\r\n        }, scene);\r\n        // Create default button\r\n        if (!this._useCustomVRButton) {\r\n            this._btnVR = <HTMLButtonElement>document.createElement(\"BUTTON\");\r\n            this._btnVR.className = \"babylonVRicon\";\r\n            this._btnVR.id = \"babylonVRiconbtn\";\r\n            this._btnVR.title = \"Click to switch to VR\";\r\n            const url = !window.SVGSVGElement\r\n                ? \"https://cdn.babylonjs.com/Assets/vrButton.png\"\r\n                : \"data:image/svg+xml;charset=UTF-8,%3Csvg%20xmlns%3D%22http%3A//www.w3.org/2000/svg%22%20width%3D%222048%22%20height%3D%221152%22%20viewBox%3D%220%200%202048%201152%22%20version%3D%221.1%22%3E%3Cpath%20transform%3D%22rotate%28180%201024%2C576.0000000000001%29%22%20d%3D%22m1109%2C896q17%2C0%2030%2C-12t13%2C-30t-12.5%2C-30.5t-30.5%2C-12.5l-170%2C0q-18%2C0%20-30.5%2C12.5t-12.5%2C30.5t13%2C30t30%2C12l170%2C0zm-85%2C256q59%2C0%20132.5%2C-1.5t154.5%2C-5.5t164.5%2C-11.5t163%2C-20t150%2C-30t124.5%2C-41.5q23%2C-11%2042%2C-24t38%2C-30q27%2C-25%2041%2C-61.5t14%2C-72.5l0%2C-257q0%2C-123%20-47%2C-232t-128%2C-190t-190%2C-128t-232%2C-47l-81%2C0q-37%2C0%20-68.5%2C14t-60.5%2C34.5t-55.5%2C45t-53%2C45t-53%2C34.5t-55.5%2C14t-55.5%2C-14t-53%2C-34.5t-53%2C-45t-55.5%2C-45t-60.5%2C-34.5t-68.5%2C-14l-81%2C0q-123%2C0%20-232%2C47t-190%2C128t-128%2C190t-47%2C232l0%2C257q0%2C68%2038%2C115t97%2C73q54%2C24%20124.5%2C41.5t150%2C30t163%2C20t164.5%2C11.5t154.5%2C5.5t132.5%2C1.5zm939%2C-298q0%2C39%20-24.5%2C67t-58.5%2C42q-54%2C23%20-122%2C39.5t-143.5%2C28t-155.5%2C19t-157%2C11t-148.5%2C5t-129.5%2C1.5q-59%2C0%20-130%2C-1.5t-148%2C-5t-157%2C-11t-155.5%2C-19t-143.5%2C-28t-122%2C-39.5q-34%2C-14%20-58.5%2C-42t-24.5%2C-67l0%2C-257q0%2C-106%2040.5%2C-199t110%2C-162.5t162.5%2C-109.5t199%2C-40l81%2C0q27%2C0%2052%2C14t50%2C34.5t51%2C44.5t55.5%2C44.5t63.5%2C34.5t74%2C14t74%2C-14t63.5%2C-34.5t55.5%2C-44.5t51%2C-44.5t50%2C-34.5t52%2C-14l14%2C0q37%2C0%2070%2C0.5t64.5%2C4.5t63.5%2C12t68%2C23q71%2C30%20128.5%2C78.5t98.5%2C110t63.5%2C133.5t22.5%2C149l0%2C257z%22%20fill%3D%22white%22%20/%3E%3C/svg%3E%0A\";\r\n            let css =\r\n                \".babylonVRicon { position: absolute; right: 20px; height: 50px; width: 80px; background-color: rgba(51,51,51,0.7); background-image: url(\" +\r\n                url +\r\n                \"); background-size: 80%; background-repeat:no-repeat; background-position: center; border: none; outline: none; transition: transform 0.125s ease-out } .babylonVRicon:hover { transform: scale(1.05) } .babylonVRicon:active {background-color: rgba(51,51,51,1) } .babylonVRicon:focus {background-color: rgba(51,51,51,1) }\";\r\n            css += \".babylonVRicon.vrdisplaypresenting { display: none; }\";\r\n            // TODO: Add user feedback so that they know what state the VRDisplay is in (disconnected, connected, entering-VR)\r\n            // css += \".babylonVRicon.vrdisplaysupported { }\";\r\n            // css += \".babylonVRicon.vrdisplayready { }\";\r\n            // css += \".babylonVRicon.vrdisplayrequesting { }\";\r\n\r\n            const style = document.createElement(\"style\");\r\n            style.appendChild(document.createTextNode(css));\r\n            document.getElementsByTagName(\"head\")[0].appendChild(style);\r\n\r\n            this._moveButtonToBottomRight();\r\n        }\r\n\r\n        // VR button click event\r\n        if (this._btnVR) {\r\n            this._btnVR.addEventListener(\"click\", () => {\r\n                if (!this.isInVRMode) {\r\n                    this.enterVR();\r\n                }\r\n            });\r\n        }\r\n\r\n        // Window events\r\n\r\n        const hostWindow = this._scene.getEngine().getHostWindow();\r\n        if (!hostWindow) {\r\n            return;\r\n        }\r\n\r\n        hostWindow.addEventListener(\"resize\", this._onResize);\r\n        document.addEventListener(\"fullscreenchange\", this._onFullscreenChange, false);\r\n\r\n        // Display vr button when headset is connected\r\n        if (webVROptions.createFallbackVRDeviceOrientationFreeCamera) {\r\n            this._displayVRButton();\r\n        }\r\n\r\n        // Exiting VR mode using 'ESC' key on desktop\r\n        this._onKeyDown = (event: KeyboardEvent) => {\r\n            if (event.keyCode === 27 && this.isInVRMode) {\r\n                this.exitVR();\r\n            }\r\n        };\r\n        document.addEventListener(\"keydown\", this._onKeyDown);\r\n\r\n        // Exiting VR mode double tapping the touch screen\r\n        this._scene.onPrePointerObservable.add(\r\n            () => {\r\n                if (this._hasEnteredVR && this.exitVROnDoubleTap) {\r\n                    this.exitVR();\r\n                    if (this._fullscreenVRpresenting) {\r\n                        this._scene.getEngine().exitFullscreen();\r\n                    }\r\n                }\r\n            },\r\n            PointerEventTypes.POINTERDOUBLETAP,\r\n            false\r\n        );\r\n\r\n        scene.onDisposeObservable.add(() => {\r\n            this.dispose();\r\n        });\r\n\r\n        this._updateButtonVisibility();\r\n\r\n        //create easing functions\r\n        this._circleEase = new CircleEase();\r\n        this._circleEase.setEasingMode(EasingFunction.EASINGMODE_EASEINOUT);\r\n        this._teleportationEasing = this._circleEase;\r\n\r\n        // Allow clicking in the vrDeviceOrientationCamera\r\n        scene.onPointerObservable.add((e) => {\r\n            if (this._interactionsEnabled) {\r\n                if (scene.activeCamera === this.vrDeviceOrientationCamera && (e.event as IPointerEvent).pointerType === \"mouse\") {\r\n                    if (e.type === PointerEventTypes.POINTERDOWN) {\r\n                        this._cameraGazer._selectionPointerDown();\r\n                    } else if (e.type === PointerEventTypes.POINTERUP) {\r\n                        this._cameraGazer._selectionPointerUp();\r\n                    }\r\n                }\r\n            }\r\n        });\r\n\r\n        if (this.webVROptions.floorMeshes) {\r\n            this.enableTeleportation({ floorMeshes: this.webVROptions.floorMeshes });\r\n        }\r\n    }\r\n\r\n    private _onResize = () => {\r\n        this._moveButtonToBottomRight();\r\n    };\r\n\r\n    private _onFullscreenChange = () => {\r\n        this._fullscreenVRpresenting = !!document.fullscreenElement;\r\n        if (!this._fullscreenVRpresenting && this._inputElement) {\r\n            this.exitVR();\r\n            if (!this._useCustomVRButton && this._btnVR) {\r\n                this._btnVR.style.top = this._inputElement.offsetTop + this._inputElement.offsetHeight - 70 + \"px\";\r\n                this._btnVR.style.left = this._inputElement.offsetLeft + this._inputElement.offsetWidth - 100 + \"px\";\r\n                // make sure the button is visible after setting its position\r\n                this._updateButtonVisibility();\r\n            }\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Gets a value indicating if we are currently in VR mode.\r\n     */\r\n    public get isInVRMode(): boolean {\r\n        return (this.xr && this.webVROptions.useXR && this.xr.baseExperience.state === WebXRState.IN_XR) || this._fullscreenVRpresenting;\r\n    }\r\n\r\n    private _moveButtonToBottomRight() {\r\n        if (this._inputElement && !this._useCustomVRButton && this._btnVR) {\r\n            const rect: ClientRect = this._inputElement.getBoundingClientRect();\r\n            this._btnVR.style.top = rect.top + rect.height - 70 + \"px\";\r\n            this._btnVR.style.left = rect.left + rect.width - 100 + \"px\";\r\n        }\r\n    }\r\n\r\n    private _displayVRButton() {\r\n        if (!this._useCustomVRButton && !this._btnVRDisplayed && this._btnVR) {\r\n            document.body.appendChild(this._btnVR);\r\n            this._btnVRDisplayed = true;\r\n        }\r\n    }\r\n\r\n    private _updateButtonVisibility() {\r\n        if (!this._btnVR || this._useCustomVRButton) {\r\n            return;\r\n        }\r\n        this._btnVR.className = \"babylonVRicon\";\r\n        if (this.isInVRMode) {\r\n            this._btnVR.className += \" vrdisplaypresenting\";\r\n        }\r\n    }\r\n\r\n    private _cachedAngularSensibility = { angularSensibilityX: null, angularSensibilityY: null, angularSensibility: null };\r\n    /**\r\n     * Attempt to enter VR. If a headset is connected and ready, will request present on that.\r\n     * Otherwise, will use the fullscreen API.\r\n     */\r\n    public enterVR() {\r\n        if (this.xr) {\r\n            this.xr.baseExperience.enterXRAsync(\"immersive-vr\", \"local-floor\", this.xr.renderTarget);\r\n            return;\r\n        }\r\n        if (this.onEnteringVRObservable) {\r\n            try {\r\n                this.onEnteringVRObservable.notifyObservers(this);\r\n            } catch (err) {\r\n                Logger.Warn(\"Error in your custom logic onEnteringVR: \" + err);\r\n            }\r\n        }\r\n\r\n        if (this._scene.activeCamera) {\r\n            this._position = this._scene.activeCamera.position.clone();\r\n\r\n            if (this.vrDeviceOrientationCamera) {\r\n                this.vrDeviceOrientationCamera.rotation = Quaternion.FromRotationMatrix(this._scene.activeCamera.getWorldMatrix().getRotationMatrix()).toEulerAngles();\r\n                this.vrDeviceOrientationCamera.angularSensibility = 2000;\r\n            }\r\n\r\n            // make sure that we return to the last active camera\r\n            this._existingCamera = this._scene.activeCamera;\r\n\r\n            // Remove and cache angular sensability to avoid camera rotation when in VR\r\n            if ((<any>this._existingCamera).angularSensibilityX) {\r\n                this._cachedAngularSensibility.angularSensibilityX = (<any>this._existingCamera).angularSensibilityX;\r\n                (<any>this._existingCamera).angularSensibilityX = Number.MAX_VALUE;\r\n            }\r\n            if ((<any>this._existingCamera).angularSensibilityY) {\r\n                this._cachedAngularSensibility.angularSensibilityY = (<any>this._existingCamera).angularSensibilityY;\r\n                (<any>this._existingCamera).angularSensibilityY = Number.MAX_VALUE;\r\n            }\r\n            if ((<any>this._existingCamera).angularSensibility) {\r\n                this._cachedAngularSensibility.angularSensibility = (<any>this._existingCamera).angularSensibility;\r\n                (<any>this._existingCamera).angularSensibility = Number.MAX_VALUE;\r\n            }\r\n        }\r\n\r\n        // If WebVR is supported and a headset is connected\r\n        if (this._vrDeviceOrientationCamera) {\r\n            this._vrDeviceOrientationCamera.position = this._position;\r\n            if (this._scene.activeCamera) {\r\n                this._vrDeviceOrientationCamera.minZ = this._scene.activeCamera.minZ;\r\n            }\r\n            this._scene.activeCamera = this._vrDeviceOrientationCamera;\r\n            this._scene.getEngine().enterFullscreen(this.requestPointerLockOnFullScreen);\r\n            this._updateButtonVisibility();\r\n            this._vrDeviceOrientationCamera.onViewMatrixChangedObservable.addOnce(() => {\r\n                this.onAfterEnteringVRObservable.notifyObservers({ success: true });\r\n            });\r\n        }\r\n\r\n        if (this._scene.activeCamera && this._inputElement) {\r\n            this._scene.activeCamera.attachControl();\r\n        }\r\n\r\n        if (this._interactionsEnabled) {\r\n            this._scene.registerBeforeRender(this._beforeRender);\r\n        }\r\n\r\n        this._hasEnteredVR = true;\r\n    }\r\n\r\n    /**\r\n     * Attempt to exit VR, or fullscreen.\r\n     */\r\n    public exitVR() {\r\n        if (this.xr) {\r\n            this.xr.baseExperience.exitXRAsync();\r\n            return;\r\n        }\r\n        if (this._hasEnteredVR) {\r\n            if (this.onExitingVRObservable) {\r\n                try {\r\n                    this.onExitingVRObservable.notifyObservers(this);\r\n                } catch (err) {\r\n                    Logger.Warn(\"Error in your custom logic onExitingVR: \" + err);\r\n                }\r\n            }\r\n            if (this._scene.activeCamera) {\r\n                this._position = this._scene.activeCamera.position.clone();\r\n            }\r\n\r\n            if (this.vrDeviceOrientationCamera) {\r\n                this.vrDeviceOrientationCamera.angularSensibility = Number.MAX_VALUE;\r\n            }\r\n\r\n            if (this._deviceOrientationCamera) {\r\n                this._deviceOrientationCamera.position = this._position;\r\n                this._scene.activeCamera = this._deviceOrientationCamera;\r\n\r\n                // Restore angular sensibility\r\n                if (this._cachedAngularSensibility.angularSensibilityX) {\r\n                    (<any>this._deviceOrientationCamera).angularSensibilityX = this._cachedAngularSensibility.angularSensibilityX;\r\n                    this._cachedAngularSensibility.angularSensibilityX = null;\r\n                }\r\n                if (this._cachedAngularSensibility.angularSensibilityY) {\r\n                    (<any>this._deviceOrientationCamera).angularSensibilityY = this._cachedAngularSensibility.angularSensibilityY;\r\n                    this._cachedAngularSensibility.angularSensibilityY = null;\r\n                }\r\n                if (this._cachedAngularSensibility.angularSensibility) {\r\n                    (<any>this._deviceOrientationCamera).angularSensibility = this._cachedAngularSensibility.angularSensibility;\r\n                    this._cachedAngularSensibility.angularSensibility = null;\r\n                }\r\n            } else if (this._existingCamera) {\r\n                this._existingCamera.position = this._position;\r\n                this._scene.activeCamera = this._existingCamera;\r\n                if (this._inputElement) {\r\n                    this._scene.activeCamera.attachControl();\r\n                }\r\n\r\n                // Restore angular sensibility\r\n                if (this._cachedAngularSensibility.angularSensibilityX) {\r\n                    (<any>this._existingCamera).angularSensibilityX = this._cachedAngularSensibility.angularSensibilityX;\r\n                    this._cachedAngularSensibility.angularSensibilityX = null;\r\n                }\r\n                if (this._cachedAngularSensibility.angularSensibilityY) {\r\n                    (<any>this._existingCamera).angularSensibilityY = this._cachedAngularSensibility.angularSensibilityY;\r\n                    this._cachedAngularSensibility.angularSensibilityY = null;\r\n                }\r\n                if (this._cachedAngularSensibility.angularSensibility) {\r\n                    (<any>this._existingCamera).angularSensibility = this._cachedAngularSensibility.angularSensibility;\r\n                    this._cachedAngularSensibility.angularSensibility = null;\r\n                }\r\n            }\r\n\r\n            this._updateButtonVisibility();\r\n\r\n            if (this._interactionsEnabled) {\r\n                this._scene.unregisterBeforeRender(this._beforeRender);\r\n                this._cameraGazer._gazeTracker.isVisible = false;\r\n            }\r\n\r\n            // resize to update width and height when exiting vr exits fullscreen\r\n            this._scene.getEngine().resize();\r\n\r\n            this._hasEnteredVR = false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * The position of the vr experience helper.\r\n     */\r\n    public get position(): Vector3 {\r\n        return this._position;\r\n    }\r\n\r\n    /**\r\n     * Sets the position of the vr experience helper.\r\n     */\r\n    public set position(value: Vector3) {\r\n        this._position = value;\r\n\r\n        if (this._scene.activeCamera) {\r\n            this._scene.activeCamera.position = value;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Enables controllers and user interactions such as selecting and object or clicking on an object.\r\n     */\r\n    public enableInteractions() {\r\n        if (!this._interactionsEnabled) {\r\n            // in XR it is enabled by default, but just to make sure, re-attach\r\n            if (this.xr) {\r\n                if (this.xr.baseExperience.state === WebXRState.IN_XR) {\r\n                    this.xr.pointerSelection.attach();\r\n                }\r\n                return;\r\n            }\r\n\r\n            this.raySelectionPredicate = (mesh) => {\r\n                return mesh.isVisible && (mesh.isPickable || mesh.name === this._floorMeshName);\r\n            };\r\n\r\n            this.meshSelectionPredicate = () => {\r\n                return true;\r\n            };\r\n\r\n            this._raySelectionPredicate = (mesh) => {\r\n                if (\r\n                    this._isTeleportationFloor(mesh) ||\r\n                    (mesh.name.indexOf(\"gazeTracker\") === -1 && mesh.name.indexOf(\"teleportationTarget\") === -1 && mesh.name.indexOf(\"torusTeleportation\") === -1)\r\n                ) {\r\n                    return this.raySelectionPredicate(mesh);\r\n                }\r\n                return false;\r\n            };\r\n\r\n            this._interactionsEnabled = true;\r\n        }\r\n    }\r\n\r\n    private _beforeRender = () => {\r\n        if (this._scene.getEngine().isPointerLock || this.enableGazeEvenWhenNoPointerLock) {\r\n            // no-op\r\n        } else {\r\n            this._cameraGazer._gazeTracker.isVisible = false;\r\n        }\r\n    };\r\n\r\n    private _isTeleportationFloor(mesh: AbstractMesh): boolean {\r\n        for (let i = 0; i < this._floorMeshesCollection.length; i++) {\r\n            if (this._floorMeshesCollection[i].id === mesh.id) {\r\n                return true;\r\n            }\r\n        }\r\n        if (this._floorMeshName && mesh.name === this._floorMeshName) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Adds a floor mesh to be used for teleportation.\r\n     * @param floorMesh the mesh to be used for teleportation.\r\n     */\r\n    public addFloorMesh(floorMesh: Mesh): void {\r\n        if (!this._floorMeshesCollection) {\r\n            return;\r\n        }\r\n\r\n        if (this._floorMeshesCollection.indexOf(floorMesh) > -1) {\r\n            return;\r\n        }\r\n\r\n        this._floorMeshesCollection.push(floorMesh);\r\n    }\r\n\r\n    /**\r\n     * Removes a floor mesh from being used for teleportation.\r\n     * @param floorMesh the mesh to be removed.\r\n     */\r\n    public removeFloorMesh(floorMesh: Mesh): void {\r\n        if (!this._floorMeshesCollection) {\r\n            return;\r\n        }\r\n\r\n        const meshIndex = this._floorMeshesCollection.indexOf(floorMesh);\r\n        if (meshIndex !== -1) {\r\n            this._floorMeshesCollection.splice(meshIndex, 1);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Enables interactions and teleportation using the VR controllers and gaze.\r\n     * @param vrTeleportationOptions options to modify teleportation behavior.\r\n     */\r\n    public enableTeleportation(vrTeleportationOptions: VRTeleportationOptions = {}) {\r\n        if (!this._teleportationInitialized) {\r\n            this.enableInteractions();\r\n\r\n            if (this.webVROptions.useXR && (vrTeleportationOptions.floorMeshes || vrTeleportationOptions.floorMeshName)) {\r\n                const floorMeshes: AbstractMesh[] = vrTeleportationOptions.floorMeshes || [];\r\n                if (!floorMeshes.length) {\r\n                    const floorMesh = this._scene.getMeshByName(vrTeleportationOptions.floorMeshName!);\r\n                    if (floorMesh) {\r\n                        floorMeshes.push(floorMesh);\r\n                    }\r\n                }\r\n                if (this.xr) {\r\n                    floorMeshes.forEach((mesh) => {\r\n                        this.xr.teleportation.addFloorMesh(mesh);\r\n                    });\r\n                    if (!this.xr.teleportation.attached) {\r\n                        this.xr.teleportation.attach();\r\n                    }\r\n                    return;\r\n                } else if (!this.xrTestDone) {\r\n                    const waitForXr = () => {\r\n                        if (this.xrTestDone) {\r\n                            this._scene.unregisterBeforeRender(waitForXr);\r\n                            if (this.xr) {\r\n                                if (!this.xr.teleportation.attached) {\r\n                                    this.xr.teleportation.attach();\r\n                                }\r\n                            } else {\r\n                                this.enableTeleportation(vrTeleportationOptions);\r\n                            }\r\n                        }\r\n                    };\r\n                    this._scene.registerBeforeRender(waitForXr);\r\n                    return;\r\n                }\r\n            }\r\n\r\n            if (vrTeleportationOptions.floorMeshName) {\r\n                this._floorMeshName = vrTeleportationOptions.floorMeshName;\r\n            }\r\n            if (vrTeleportationOptions.floorMeshes) {\r\n                this._floorMeshesCollection = vrTeleportationOptions.floorMeshes;\r\n            }\r\n\r\n            if (vrTeleportationOptions.teleportationMode) {\r\n                this._teleportationMode = vrTeleportationOptions.teleportationMode;\r\n            }\r\n            if (vrTeleportationOptions.teleportationTime && vrTeleportationOptions.teleportationTime > 0) {\r\n                this._teleportationTime = vrTeleportationOptions.teleportationTime;\r\n            }\r\n            if (vrTeleportationOptions.teleportationSpeed && vrTeleportationOptions.teleportationSpeed > 0) {\r\n                this._teleportationSpeed = vrTeleportationOptions.teleportationSpeed;\r\n            }\r\n            if (vrTeleportationOptions.easingFunction !== undefined) {\r\n                this._teleportationEasing = vrTeleportationOptions.easingFunction;\r\n            }\r\n\r\n            // Creates an image processing post process for the vignette not relying\r\n            // on the main scene configuration for image processing to reduce setup and spaces\r\n            // (gamma/linear) conflicts.\r\n            const imageProcessingConfiguration = new ImageProcessingConfiguration();\r\n            imageProcessingConfiguration.vignetteColor = new Color4(0, 0, 0, 0);\r\n            imageProcessingConfiguration.vignetteEnabled = true;\r\n            this._teleportationInitialized = true;\r\n            if (this._isDefaultTeleportationTarget) {\r\n                this._createTeleportationCircles();\r\n            }\r\n        }\r\n    }\r\n\r\n    private _onNewGamepadConnected = (gamepad: Gamepad) => {\r\n        if (gamepad.type !== Gamepad.POSE_ENABLED) {\r\n            if (gamepad.leftStick) {\r\n                gamepad.onleftstickchanged((stickValues) => {\r\n                    if (this._teleportationInitialized && this.teleportationEnabled) {\r\n                        // Listening to classic/xbox gamepad only if no VR controller is active\r\n                        this._checkTeleportWithRay(stickValues, this._cameraGazer);\r\n                        this._checkTeleportBackwards(stickValues, this._cameraGazer);\r\n                    }\r\n                });\r\n            }\r\n            if (gamepad.rightStick) {\r\n                gamepad.onrightstickchanged((stickValues) => {\r\n                    if (this._teleportationInitialized) {\r\n                        this._checkRotate(stickValues, this._cameraGazer);\r\n                    }\r\n                });\r\n            }\r\n            if (gamepad.type === Gamepad.XBOX) {\r\n                (<Xbox360Pad>gamepad).onbuttondown((buttonPressed: Xbox360Button) => {\r\n                    if (this._interactionsEnabled && buttonPressed === Xbox360Button.A) {\r\n                        this._cameraGazer._selectionPointerDown();\r\n                    }\r\n                });\r\n                (<Xbox360Pad>gamepad).onbuttonup((buttonPressed: Xbox360Button) => {\r\n                    if (this._interactionsEnabled && buttonPressed === Xbox360Button.A) {\r\n                        this._cameraGazer._selectionPointerUp();\r\n                    }\r\n                });\r\n            }\r\n        }\r\n    };\r\n\r\n    private _checkTeleportWithRay(stateObject: StickValues, gazer: VRExperienceHelperGazer) {\r\n        // Dont teleport if another gaze already requested teleportation\r\n        if (this._teleportationRequestInitiated && !gazer._teleportationRequestInitiated) {\r\n            return;\r\n        }\r\n        if (!gazer._teleportationRequestInitiated) {\r\n            if (stateObject.y < -this._padSensibilityUp && gazer._dpadPressed) {\r\n                gazer._activatePointer();\r\n                gazer._teleportationRequestInitiated = true;\r\n            }\r\n        } else {\r\n            // Listening to the proper controller values changes to confirm teleportation\r\n            if (Math.sqrt(stateObject.y * stateObject.y + stateObject.x * stateObject.x) < this._padSensibilityDown) {\r\n                if (this._teleportActive) {\r\n                    this.teleportCamera(this._haloCenter);\r\n                }\r\n\r\n                gazer._teleportationRequestInitiated = false;\r\n            }\r\n        }\r\n    }\r\n    private _checkRotate(stateObject: StickValues, gazer: VRExperienceHelperGazer) {\r\n        // Only rotate when user is not currently selecting a teleportation location\r\n        if (gazer._teleportationRequestInitiated) {\r\n            return;\r\n        }\r\n\r\n        if (!gazer._rotationLeftAsked) {\r\n            if (stateObject.x < -this._padSensibilityUp && gazer._dpadPressed) {\r\n                gazer._rotationLeftAsked = true;\r\n                if (this._rotationAllowed) {\r\n                    this._rotateCamera(false);\r\n                }\r\n            }\r\n        } else {\r\n            if (stateObject.x > -this._padSensibilityDown) {\r\n                gazer._rotationLeftAsked = false;\r\n            }\r\n        }\r\n\r\n        if (!gazer._rotationRightAsked) {\r\n            if (stateObject.x > this._padSensibilityUp && gazer._dpadPressed) {\r\n                gazer._rotationRightAsked = true;\r\n                if (this._rotationAllowed) {\r\n                    this._rotateCamera(true);\r\n                }\r\n            }\r\n        } else {\r\n            if (stateObject.x < this._padSensibilityDown) {\r\n                gazer._rotationRightAsked = false;\r\n            }\r\n        }\r\n    }\r\n    private _checkTeleportBackwards(stateObject: StickValues, gazer: VRExperienceHelperGazer) {\r\n        // Only teleport backwards when user is not currently selecting a teleportation location\r\n        if (gazer._teleportationRequestInitiated) {\r\n            return;\r\n        }\r\n        // Teleport backwards\r\n        if (stateObject.y > this._padSensibilityUp && gazer._dpadPressed) {\r\n            if (!gazer._teleportationBackRequestInitiated) {\r\n                if (!this.currentVRCamera) {\r\n                    return;\r\n                }\r\n\r\n                // Get rotation and position of the current camera\r\n                const rotation = Quaternion.FromRotationMatrix(this.currentVRCamera.getWorldMatrix().getRotationMatrix());\r\n                const position = this.currentVRCamera.position;\r\n\r\n                // Get matrix with only the y rotation of the device rotation\r\n                rotation.toEulerAnglesToRef(this._workingVector);\r\n                this._workingVector.z = 0;\r\n                this._workingVector.x = 0;\r\n                Quaternion.RotationYawPitchRollToRef(this._workingVector.y, this._workingVector.x, this._workingVector.z, this._workingQuaternion);\r\n                this._workingQuaternion.toRotationMatrix(this._workingMatrix);\r\n\r\n                // Rotate backwards ray by device rotation to cast at the ground behind the user\r\n                Vector3.TransformCoordinatesToRef(this._teleportBackwardsVector, this._workingMatrix, this._workingVector);\r\n\r\n                // Teleport if ray hit the ground and is not to far away eg. backwards off a cliff\r\n                const ray = new Ray(position, this._workingVector);\r\n                const hit = this._scene.pickWithRay(ray, this._raySelectionPredicate);\r\n                if (hit && hit.pickedPoint && hit.pickedMesh && this._isTeleportationFloor(hit.pickedMesh) && hit.distance < 5) {\r\n                    this.teleportCamera(hit.pickedPoint);\r\n                }\r\n\r\n                gazer._teleportationBackRequestInitiated = true;\r\n            }\r\n        } else {\r\n            gazer._teleportationBackRequestInitiated = false;\r\n        }\r\n    }\r\n\r\n    private _createTeleportationCircles() {\r\n        this._teleportationTarget = CreateGround(\"teleportationTarget\", { width: 2, height: 2, subdivisions: 2 }, this._scene);\r\n        this._teleportationTarget.isPickable = false;\r\n\r\n        const length = 512;\r\n        const dynamicTexture = new DynamicTexture(\"DynamicTexture\", length, this._scene, true);\r\n        dynamicTexture.hasAlpha = true;\r\n        const context = dynamicTexture.getContext();\r\n\r\n        const centerX = length / 2;\r\n        const centerY = length / 2;\r\n        const radius = 200;\r\n\r\n        context.beginPath();\r\n        context.arc(centerX, centerY, radius, 0, 2 * Math.PI, false);\r\n        context.fillStyle = this._teleportationFillColor;\r\n        context.fill();\r\n        context.lineWidth = 10;\r\n        context.strokeStyle = this._teleportationBorderColor;\r\n        context.stroke();\r\n        context.closePath();\r\n        dynamicTexture.update();\r\n\r\n        const teleportationCircleMaterial = new StandardMaterial(\"TextPlaneMaterial\", this._scene);\r\n        teleportationCircleMaterial.diffuseTexture = dynamicTexture;\r\n        this._teleportationTarget.material = teleportationCircleMaterial;\r\n\r\n        const torus = CreateTorus(\r\n            \"torusTeleportation\",\r\n            {\r\n                diameter: 0.75,\r\n                thickness: 0.1,\r\n                tessellation: 25,\r\n                updatable: false,\r\n            },\r\n            this._scene\r\n        );\r\n        torus.isPickable = false;\r\n        torus.parent = this._teleportationTarget;\r\n\r\n        const animationInnerCircle = new Animation(\"animationInnerCircle\", \"position.y\", 30, Animation.ANIMATIONTYPE_FLOAT, Animation.ANIMATIONLOOPMODE_CYCLE);\r\n\r\n        const keys = [];\r\n        keys.push({\r\n            frame: 0,\r\n            value: 0,\r\n        });\r\n        keys.push({\r\n            frame: 30,\r\n            value: 0.4,\r\n        });\r\n        keys.push({\r\n            frame: 60,\r\n            value: 0,\r\n        });\r\n\r\n        animationInnerCircle.setKeys(keys);\r\n\r\n        const easingFunction = new SineEase();\r\n        easingFunction.setEasingMode(EasingFunction.EASINGMODE_EASEINOUT);\r\n        animationInnerCircle.setEasingFunction(easingFunction);\r\n\r\n        torus.animations = [];\r\n        torus.animations.push(animationInnerCircle);\r\n\r\n        this._scene.beginAnimation(torus, 0, 60, true);\r\n\r\n        this._hideTeleportationTarget();\r\n    }\r\n\r\n    private _hideTeleportationTarget() {\r\n        this._teleportActive = false;\r\n        if (this._teleportationInitialized) {\r\n            this._teleportationTarget.isVisible = false;\r\n            if (this._isDefaultTeleportationTarget) {\r\n                (<Mesh>this._teleportationTarget.getChildren()[0]).isVisible = false;\r\n            }\r\n        }\r\n    }\r\n\r\n    private _rotateCamera(right: boolean) {\r\n        if (!(this.currentVRCamera instanceof FreeCamera)) {\r\n            return;\r\n        }\r\n\r\n        if (right) {\r\n            this._rotationAngle++;\r\n        } else {\r\n            this._rotationAngle--;\r\n        }\r\n\r\n        this.currentVRCamera.animations = [];\r\n\r\n        const target = Quaternion.FromRotationMatrix(Matrix.RotationY((Math.PI / 4) * this._rotationAngle));\r\n\r\n        const animationRotation = new Animation(\"animationRotation\", \"rotationQuaternion\", 90, Animation.ANIMATIONTYPE_QUATERNION, Animation.ANIMATIONLOOPMODE_CONSTANT);\r\n\r\n        const animationRotationKeys = [];\r\n        animationRotationKeys.push({\r\n            frame: 0,\r\n            value: this.currentVRCamera.rotationQuaternion,\r\n        });\r\n        animationRotationKeys.push({\r\n            frame: 6,\r\n            value: target,\r\n        });\r\n\r\n        animationRotation.setKeys(animationRotationKeys);\r\n\r\n        animationRotation.setEasingFunction(this._circleEase);\r\n\r\n        this.currentVRCamera.animations.push(animationRotation);\r\n\r\n        this._postProcessMove.animations = [];\r\n\r\n        const animationPP = new Animation(\"animationPP\", \"vignetteWeight\", 90, Animation.ANIMATIONTYPE_FLOAT, Animation.ANIMATIONLOOPMODE_CONSTANT);\r\n\r\n        const vignetteWeightKeys = [];\r\n        vignetteWeightKeys.push({\r\n            frame: 0,\r\n            value: 0,\r\n        });\r\n        vignetteWeightKeys.push({\r\n            frame: 3,\r\n            value: 4,\r\n        });\r\n        vignetteWeightKeys.push({\r\n            frame: 6,\r\n            value: 0,\r\n        });\r\n\r\n        animationPP.setKeys(vignetteWeightKeys);\r\n        animationPP.setEasingFunction(this._circleEase);\r\n        this._postProcessMove.animations.push(animationPP);\r\n\r\n        const animationPP2 = new Animation(\"animationPP2\", \"vignetteStretch\", 90, Animation.ANIMATIONTYPE_FLOAT, Animation.ANIMATIONLOOPMODE_CONSTANT);\r\n\r\n        const vignetteStretchKeys = [];\r\n        vignetteStretchKeys.push({\r\n            frame: 0,\r\n            value: 0,\r\n        });\r\n        vignetteStretchKeys.push({\r\n            frame: 3,\r\n            value: 10,\r\n        });\r\n        vignetteStretchKeys.push({\r\n            frame: 6,\r\n            value: 0,\r\n        });\r\n\r\n        animationPP2.setKeys(vignetteStretchKeys);\r\n        animationPP2.setEasingFunction(this._circleEase);\r\n        this._postProcessMove.animations.push(animationPP2);\r\n\r\n        this._postProcessMove.imageProcessingConfiguration.vignetteWeight = 0;\r\n        this._postProcessMove.imageProcessingConfiguration.vignetteStretch = 0;\r\n        this._postProcessMove.samples = 4;\r\n        this._scene.beginAnimation(this.currentVRCamera, 0, 6, false, 1);\r\n    }\r\n\r\n    private _workingVector = Vector3.Zero();\r\n    private _workingQuaternion = Quaternion.Identity();\r\n    private _workingMatrix = Matrix.Identity();\r\n\r\n    /**\r\n     * Time Constant Teleportation Mode\r\n     */\r\n    public static readonly TELEPORTATIONMODE_CONSTANTTIME = 0;\r\n    /**\r\n     * Speed Constant Teleportation Mode\r\n     */\r\n    public static readonly TELEPORTATIONMODE_CONSTANTSPEED = 1;\r\n\r\n    /**\r\n     * Teleports the users feet to the desired location\r\n     * @param location The location where the user's feet should be placed\r\n     */\r\n    public teleportCamera(location: Vector3) {\r\n        if (!(this.currentVRCamera instanceof FreeCamera)) {\r\n            return;\r\n        }\r\n        // Teleport the hmd to where the user is looking by moving the anchor to where they are looking minus the\r\n        // offset of the headset from the anchor.\r\n\r\n        this._workingVector.copyFrom(location);\r\n        // Add height to account for user's height offset\r\n        if (this.isInVRMode) {\r\n            // no-op\r\n        } else {\r\n            this._workingVector.y += this._defaultHeight;\r\n        }\r\n\r\n        this.onBeforeCameraTeleport.notifyObservers(this._workingVector);\r\n\r\n        // Animations FPS\r\n        const FPS = 90;\r\n        let speedRatio, lastFrame;\r\n        if (this._teleportationMode == VRExperienceHelper.TELEPORTATIONMODE_CONSTANTSPEED) {\r\n            lastFrame = FPS;\r\n            const dist = Vector3.Distance(this.currentVRCamera.position, this._workingVector);\r\n            speedRatio = this._teleportationSpeed / dist;\r\n        } else {\r\n            // teleportationMode is TELEPORTATIONMODE_CONSTANTTIME\r\n            lastFrame = Math.round((this._teleportationTime * FPS) / 1000);\r\n            speedRatio = 1;\r\n        }\r\n\r\n        // Create animation from the camera's position to the new location\r\n        this.currentVRCamera.animations = [];\r\n        const animationCameraTeleportation = new Animation(\"animationCameraTeleportation\", \"position\", FPS, Animation.ANIMATIONTYPE_VECTOR3, Animation.ANIMATIONLOOPMODE_CONSTANT);\r\n        const animationCameraTeleportationKeys = [\r\n            {\r\n                frame: 0,\r\n                value: this.currentVRCamera.position,\r\n            },\r\n            {\r\n                frame: lastFrame,\r\n                value: this._workingVector,\r\n            },\r\n        ];\r\n\r\n        animationCameraTeleportation.setKeys(animationCameraTeleportationKeys);\r\n        animationCameraTeleportation.setEasingFunction(this._teleportationEasing);\r\n        this.currentVRCamera.animations.push(animationCameraTeleportation);\r\n\r\n        this._postProcessMove.animations = [];\r\n\r\n        // Calculate the mid frame for vignette animations\r\n        const midFrame = Math.round(lastFrame / 2);\r\n\r\n        const animationPP = new Animation(\"animationPP\", \"vignetteWeight\", FPS, Animation.ANIMATIONTYPE_FLOAT, Animation.ANIMATIONLOOPMODE_CONSTANT);\r\n\r\n        const vignetteWeightKeys = [];\r\n        vignetteWeightKeys.push({\r\n            frame: 0,\r\n            value: 0,\r\n        });\r\n        vignetteWeightKeys.push({\r\n            frame: midFrame,\r\n            value: 8,\r\n        });\r\n        vignetteWeightKeys.push({\r\n            frame: lastFrame,\r\n            value: 0,\r\n        });\r\n\r\n        animationPP.setKeys(vignetteWeightKeys);\r\n        this._postProcessMove.animations.push(animationPP);\r\n\r\n        const animationPP2 = new Animation(\"animationPP2\", \"vignetteStretch\", FPS, Animation.ANIMATIONTYPE_FLOAT, Animation.ANIMATIONLOOPMODE_CONSTANT);\r\n\r\n        const vignetteStretchKeys = [];\r\n        vignetteStretchKeys.push({\r\n            frame: 0,\r\n            value: 0,\r\n        });\r\n        vignetteStretchKeys.push({\r\n            frame: midFrame,\r\n            value: 10,\r\n        });\r\n        vignetteStretchKeys.push({\r\n            frame: lastFrame,\r\n            value: 0,\r\n        });\r\n\r\n        animationPP2.setKeys(vignetteStretchKeys);\r\n        this._postProcessMove.animations.push(animationPP2);\r\n\r\n        this._postProcessMove.imageProcessingConfiguration.vignetteWeight = 0;\r\n        this._postProcessMove.imageProcessingConfiguration.vignetteStretch = 0;\r\n\r\n        this._scene.beginAnimation(this.currentVRCamera, 0, lastFrame, false, speedRatio, () => {\r\n            this.onAfterCameraTeleport.notifyObservers(this._workingVector);\r\n        });\r\n\r\n        this._hideTeleportationTarget();\r\n    }\r\n\r\n    /**\r\n     * Permanently set new colors for the laser pointer\r\n     * @param color the new laser color\r\n     * @param pickedColor the new laser color when picked mesh detected\r\n     */\r\n    public setLaserColor(color: Color3, pickedColor: Color3 = this._pickedLaserColor) {\r\n        this._pickedLaserColor = pickedColor;\r\n    }\r\n\r\n    /**\r\n     * Set lighting enabled / disabled on the laser pointer of both controllers\r\n     * @param enabled should the lighting be enabled on the laser pointer\r\n     */\r\n    public setLaserLightingState(_enabled: boolean = true) {\r\n        // no-op\r\n    }\r\n\r\n    /**\r\n     * Permanently set new colors for the gaze pointer\r\n     * @param color the new gaze color\r\n     * @param pickedColor the new gaze color when picked mesh detected\r\n     */\r\n    public setGazeColor(color: Color3, pickedColor: Color3 = this._pickedGazeColor) {\r\n        this._pickedGazeColor = pickedColor;\r\n    }\r\n\r\n    /**\r\n     * Sets the color of the laser ray from the vr controllers.\r\n     * @param color new color for the ray.\r\n     */\r\n    public changeLaserColor(_color: Color3) {\r\n        if (!this.updateControllerLaserColor) {\r\n            return;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sets the color of the ray from the vr headsets gaze.\r\n     * @param color new color for the ray.\r\n     */\r\n    public changeGazeColor(color: Color3) {\r\n        if (!this.updateGazeTrackerColor) {\r\n            return;\r\n        }\r\n        if (!(<StandardMaterial>this._cameraGazer._gazeTracker.material)) {\r\n            return;\r\n        }\r\n        (<StandardMaterial>this._cameraGazer._gazeTracker.material).emissiveColor = color;\r\n    }\r\n\r\n    /**\r\n     * Exits VR and disposes of the vr experience helper\r\n     */\r\n    public dispose() {\r\n        if (this.isInVRMode) {\r\n            this.exitVR();\r\n        }\r\n\r\n        if (this._postProcessMove) {\r\n            this._postProcessMove.dispose();\r\n        }\r\n\r\n        if (this._vrDeviceOrientationCamera) {\r\n            this._vrDeviceOrientationCamera.dispose();\r\n        }\r\n        if (!this._useCustomVRButton && this._btnVR && this._btnVR.parentNode) {\r\n            document.body.removeChild(this._btnVR);\r\n        }\r\n\r\n        if (this._deviceOrientationCamera && this._scene.activeCamera != this._deviceOrientationCamera) {\r\n            this._deviceOrientationCamera.dispose();\r\n        }\r\n\r\n        if (this._cameraGazer) {\r\n            this._cameraGazer.dispose();\r\n        }\r\n\r\n        if (this._teleportationTarget) {\r\n            this._teleportationTarget.dispose();\r\n        }\r\n\r\n        if (this.xr) {\r\n            this.xr.dispose();\r\n        }\r\n\r\n        this._floorMeshesCollection.length = 0;\r\n\r\n        document.removeEventListener(\"keydown\", this._onKeyDown);\r\n        window.removeEventListener(\"vrdisplaypresentchange\", this._onVrDisplayPresentChangeBind);\r\n\r\n        window.removeEventListener(\"resize\", this._onResize);\r\n        document.removeEventListener(\"fullscreenchange\", this._onFullscreenChange);\r\n\r\n        this._scene.gamepadManager.onGamepadConnectedObservable.removeCallback(this._onNewGamepadConnected);\r\n\r\n        this._scene.unregisterBeforeRender(this._beforeRender);\r\n    }\r\n\r\n    /**\r\n     * Gets the name of the VRExperienceHelper class\r\n     * @returns \"VRExperienceHelper\"\r\n     */\r\n    public getClassName(): string {\r\n        return \"VRExperienceHelper\";\r\n    }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}