{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { __decorate } from \"@babylonjs/core/tslib.es6.js\";\nimport { Color4 } from \"@babylonjs/core/Maths/math.color.js\";\nimport { Constants } from \"@babylonjs/core/Engines/constants.js\";\nimport { EffectFallbacks } from \"@babylonjs/core/Materials/effectFallbacks.js\";\nimport { MaterialDefines } from \"@babylonjs/core/Materials/materialDefines.js\";\nimport { MaterialHelper } from \"@babylonjs/core/Materials/materialHelper.js\";\nimport { PushMaterial } from \"@babylonjs/core/Materials/pushMaterial.js\";\nimport { RegisterClass } from \"@babylonjs/core/Misc/typeStore.js\";\nimport { SerializationHelper, serialize } from \"@babylonjs/core/Misc/decorators.js\";\nimport { Vector3 } from \"@babylonjs/core/Maths/math.vector.js\";\nimport { VertexBuffer } from \"@babylonjs/core/Buffers/buffer.js\";\nimport { Texture } from \"@babylonjs/core/Materials/Textures/texture.js\";\nimport \"./shaders/mrdlFrontplate.fragment.js\";\nimport \"./shaders/mrdlFrontplate.vertex.js\";\n/** @hidden */\nclass MRDLFrontplateMaterialDefines extends MaterialDefines {\n  constructor() {\n    super();\n    /**\n     * Sets default value for \"SMOOTH_EDGES\"\n     */\n    this.SMOOTH_EDGES = true;\n    this._needNormals = true;\n    this._needUVs = true;\n    this.rebuild();\n  }\n}\nexport class MRDLFrontplateMaterial extends PushMaterial {\n  constructor(name, scene) {\n    super(name, scene);\n    /**\n     * Gets or sets the corner radius on the frontplate. If this value is changed, update the lineWidth to match.\n     */\n    this.radius = 0.12;\n    /**\n     * Gets or sets the line width of the frontplate.\n     */\n    this.lineWidth = 0.01;\n    /**\n     * Gets or sets whether the scale is relative to the frontplate height.\n     */\n    this.relativeToHeight = false;\n    /** @hidden */\n    this._filterWidth = 1.0;\n    /**\n     * Gets or sets the edge color of the frontplate.\n     */\n    this.edgeColor = new Color4(0.53, 0.53, 0.53, 1);\n    /**\n     * Gets or sets whether to enable blob effects on the frontplate.\n     */\n    this.blobEnable = true;\n    /**\n     * Gets or sets the blob position on the frontplate.\n     */\n    this.blobPosition = new Vector3(100, 100, 100);\n    /**\n     * Gets or sets the blob intensity of the frontplate.\n     */\n    this.blobIntensity = 0.5;\n    /**\n     * Gets or sets the blob near size of the frontplate.\n     */\n    this.blobNearSize = 0.032;\n    /**\n     * Gets or sets the blob far size of the frontplate.\n     */\n    this.blobFarSize = 0.048;\n    /**\n     * Gets or sets the blob near distance of the frontplate.\n     */\n    this.blobNearDistance = 0.008;\n    /**\n     * Gets or sets the blob far distance of the frontplate.\n     */\n    this.blobFarDistance = 0.064;\n    /**\n     * Gets or sets the blob fade length of the frontplate.\n     */\n    this.blobFadeLength = 0.04;\n    /**\n     * Gets or sets the blob inner fade of the frontplate.\n     */\n    this.blobInnerFade = 0.01;\n    /**\n     * Gets or sets the blob pulse of the frontplate.\n     */\n    this.blobPulse = 0.0;\n    /**\n     * Gets or sets the blob fade effect on the frontplate.\n     */\n    this.blobFade = 1.0;\n    /**\n     * Gets or sets the maximum size of the blob pulse on the frontplate.\n     */\n    this.blobPulseMaxSize = 0.05;\n    /**\n     * Gets or sets whether to enable extra blob effects of the frontplate.\n     */\n    this.blobEnable2 = true;\n    /**\n     * Gets or sets blob2 position of the frontplate.\n     */\n    this.blobPosition2 = new Vector3(10, 10.1, -0.6);\n    /**\n     * Gets or sets the blob2 near size of the frontplate.\n     */\n    this.blobNearSize2 = 0.008;\n    /**\n     * Gets or sets the blob2 inner fade of the frontplate.\n     */\n    this.blobInnerFade2 = 0.1;\n    /**\n     * Gets or sets the blob2 pulse of the frontplate.\n     */\n    this.blobPulse2 = 0.0;\n    /**\n     * Gets or sets the blob2 fade effect on the frontplate.\n     */\n    this.blobFade2 = 1.0;\n    /**\n     * Gets or sets the gaze intensity of the frontplate.\n     */\n    this.gazeIntensity = 0.8;\n    /**\n     * Gets or sets the gaze focus of the frontplate.\n     */\n    this.gazeFocus = 0.0;\n    /**\n     * Gets or sets the selection fuzz of the frontplate.\n     */\n    this.selectionFuzz = 0.5;\n    /**\n     * Gets or sets the fade intensity of the frontplate.\n     */\n    this.selected = 1.0;\n    /**\n     * Gets or sets the selection fade intensity of the frontplate.\n     */\n    this.selectionFade = 0.2;\n    /**\n     * Gets or sets the selection fade size of the frontplate.\n     */\n    this.selectionFadeSize = 0.0;\n    /**\n     * Gets or sets the selected distance of the frontplate.\n     */\n    this.selectedDistance = 0.08;\n    /**\n     * Gets or sets the selected fade length of the frontplate.\n     */\n    this.selectedFadeLength = 0.08;\n    /**\n     * Gets or sets the proximity maximum intensity of the frontplate.\n     */\n    this.proximityMaxIntensity = 0.45;\n    /**\n     * Gets or sets the proximity far distance of the frontplate.\n     */\n    this.proximityFarDistance = 0.16;\n    /**\n     * Gets or sets the proximity near radius of the frontplate.\n     */\n    this.proximityNearRadius = 0.016;\n    /**\n     * Gets or sets the proximity anisotropy of the frontplate.\n     */\n    this.proximityAnisotropy = 1.0;\n    /**\n     * Gets or sets whether to use global left index on the frontplate.\n     */\n    this.useGlobalLeftIndex = true;\n    /**\n     * Gets or sets  whether to use global right index of the frontplate.\n     */\n    this.useGlobalRightIndex = true;\n    /**\n     * Gets or sets the opacity of the frontplate (0.0 - 1.0).\n     */\n    this.fadeOut = 1.0;\n    this.alphaMode = Constants.ALPHA_ADD;\n    this.disableDepthWrite = true;\n    this.backFaceCulling = false;\n    this._blobTexture = new Texture(MRDLFrontplateMaterial.BLOB_TEXTURE_URL, scene, true, false, Texture.NEAREST_SAMPLINGMODE);\n  }\n  needAlphaBlending() {\n    return true;\n  }\n  needAlphaTesting() {\n    return false;\n  }\n  getAlphaTestTexture() {\n    return null;\n  }\n  // Methods\n  isReadyForSubMesh(mesh, subMesh) {\n    if (this.isFrozen) {\n      if (subMesh.effect && subMesh.effect._wasPreviouslyReady) {\n        return true;\n      }\n    }\n    if (!subMesh.materialDefines) {\n      subMesh.materialDefines = new MRDLFrontplateMaterialDefines();\n    }\n    const defines = subMesh.materialDefines;\n    const scene = this.getScene();\n    if (this._isReadyForSubMesh(subMesh)) {\n      return true;\n    }\n    const engine = scene.getEngine();\n    // Attribs\n    MaterialHelper.PrepareDefinesForAttributes(mesh, defines, false, false);\n    // Get correct effect\n    if (defines.isDirty) {\n      defines.markAsProcessed();\n      scene.resetCachedMaterial();\n      // Fallbacks\n      const fallbacks = new EffectFallbacks();\n      if (defines.FOG) {\n        fallbacks.addFallback(1, \"FOG\");\n      }\n      MaterialHelper.HandleFallbacksForShadows(defines, fallbacks);\n      defines.IMAGEPROCESSINGPOSTPROCESS = scene.imageProcessingConfiguration.applyByPostProcess;\n      //Attributes\n      const attribs = [VertexBuffer.PositionKind];\n      if (defines.NORMAL) {\n        attribs.push(VertexBuffer.NormalKind);\n      }\n      if (defines.UV1) {\n        attribs.push(VertexBuffer.UVKind);\n      }\n      if (defines.UV2) {\n        attribs.push(VertexBuffer.UV2Kind);\n      }\n      if (defines.VERTEXCOLOR) {\n        attribs.push(VertexBuffer.ColorKind);\n      }\n      if (defines.TANGENT) {\n        attribs.push(VertexBuffer.TangentKind);\n      }\n      MaterialHelper.PrepareAttributesForInstances(attribs, defines);\n      // Legacy browser patch\n      const shaderName = \"mrdlFrontplate\";\n      const join = defines.toString();\n      const uniforms = [\"world\", \"worldView\", \"worldViewProjection\", \"view\", \"projection\", \"viewProjection\", \"cameraPosition\", \"_Radius_\", \"_Line_Width_\", \"_Relative_To_Height_\", \"_Filter_Width_\", \"_Edge_Color_\", \"_Fade_Out_\", \"_Smooth_Edges_\", \"_Blob_Enable_\", \"_Blob_Position_\", \"_Blob_Intensity_\", \"_Blob_Near_Size_\", \"_Blob_Far_Size_\", \"_Blob_Near_Distance_\", \"_Blob_Far_Distance_\", \"_Blob_Fade_Length_\", \"_Blob_Inner_Fade_\", \"_Blob_Pulse_\", \"_Blob_Fade_\", \"_Blob_Pulse_Max_Size_\", \"_Blob_Enable_2_\", \"_Blob_Position_2_\", \"_Blob_Near_Size_2_\", \"_Blob_Inner_Fade_2_\", \"_Blob_Pulse_2_\", \"_Blob_Fade_2_\", \"_Gaze_Intensity_\", \"_Gaze_Focus_\", \"_Blob_Texture_\", \"_Selection_Fuzz_\", \"_Selected_\", \"_Selection_Fade_\", \"_Selection_Fade_Size_\", \"_Selected_Distance_\", \"_Selected_Fade_Length_\", \"_Proximity_Max_Intensity_\", \"_Proximity_Far_Distance_\", \"_Proximity_Near_Radius_\", \"_Proximity_Anisotropy_\", \"Global_Left_Index_Tip_Position\", \"Global_Right_Index_Tip_Position\", \"_Use_Global_Left_Index_\", \"_Use_Global_Right_Index_\"];\n      const samplers = [];\n      const uniformBuffers = new Array();\n      MaterialHelper.PrepareUniformsAndSamplersList({\n        uniformsNames: uniforms,\n        uniformBuffersNames: uniformBuffers,\n        samplers: samplers,\n        defines: defines,\n        maxSimultaneousLights: 4\n      });\n      subMesh.setEffect(scene.getEngine().createEffect(shaderName, {\n        attributes: attribs,\n        uniformsNames: uniforms,\n        uniformBuffersNames: uniformBuffers,\n        samplers: samplers,\n        defines: join,\n        fallbacks: fallbacks,\n        onCompiled: this.onCompiled,\n        onError: this.onError,\n        indexParameters: {\n          maxSimultaneousLights: 4\n        }\n      }, engine), defines);\n    }\n    if (!subMesh.effect || !subMesh.effect.isReady()) {\n      return false;\n    }\n    defines._renderId = scene.getRenderId();\n    subMesh.effect._wasPreviouslyReady = true;\n    return true;\n  }\n  bindForSubMesh(world, mesh, subMesh) {\n    const scene = this.getScene();\n    const defines = subMesh.materialDefines;\n    if (!defines) {\n      return;\n    }\n    const effect = subMesh.effect;\n    if (!effect) {\n      return;\n    }\n    this._activeEffect = effect;\n    // Matrices\n    this.bindOnlyWorldMatrix(world);\n    this._activeEffect.setMatrix(\"viewProjection\", scene.getTransformMatrix());\n    this._activeEffect.setVector3(\"cameraPosition\", scene.activeCamera.position);\n    // \"Round Rect\"\n    this._activeEffect.setFloat(\"_Radius_\", this.radius);\n    this._activeEffect.setFloat(\"_Line_Width_\", this.lineWidth);\n    this._activeEffect.setFloat(\"_Relative_To_Height_\", this.relativeToHeight ? 1.0 : 0.0);\n    this._activeEffect.setFloat(\"_Filter_Width_\", this._filterWidth);\n    this._activeEffect.setDirectColor4(\"_Edge_Color_\", this.edgeColor);\n    // \"Fade\"\n    this._activeEffect.setFloat(\"_Fade_Out_\", this.fadeOut);\n    // \"Blob\"\n    this._activeEffect.setFloat(\"_Blob_Enable_\", this.blobEnable ? 1.0 : 0.0);\n    this._activeEffect.setVector3(\"_Blob_Position_\", this.blobPosition);\n    this._activeEffect.setFloat(\"_Blob_Intensity_\", this.blobIntensity);\n    this._activeEffect.setFloat(\"_Blob_Near_Size_\", this.blobNearSize);\n    this._activeEffect.setFloat(\"_Blob_Far_Size_\", this.blobFarSize);\n    this._activeEffect.setFloat(\"_Blob_Near_Distance_\", this.blobNearDistance);\n    this._activeEffect.setFloat(\"_Blob_Far_Distance_\", this.blobFarDistance);\n    this._activeEffect.setFloat(\"_Blob_Fade_Length_\", this.blobFadeLength);\n    this._activeEffect.setFloat(\"_Blob_Inner_Fade_\", this.blobInnerFade);\n    this._activeEffect.setFloat(\"_Blob_Pulse_\", this.blobPulse);\n    this._activeEffect.setFloat(\"_Blob_Fade_\", this.blobFade);\n    this._activeEffect.setFloat(\"_Blob_Pulse_Max_Size_\", this.blobPulseMaxSize);\n    // \"Blob 2\"\n    this._activeEffect.setFloat(\"_Blob_Enable_2_\", this.blobEnable2 ? 1.0 : 0.0);\n    this._activeEffect.setVector3(\"_Blob_Position_2_\", this.blobPosition2);\n    this._activeEffect.setFloat(\"_Blob_Near_Size_2_\", this.blobNearSize2);\n    this._activeEffect.setFloat(\"_Blob_Inner_Fade_2_\", this.blobInnerFade2);\n    this._activeEffect.setFloat(\"_Blob_Pulse_2_\", this.blobPulse2);\n    this._activeEffect.setFloat(\"_Blob_Fade_2_\", this.blobFade2);\n    // \"Gaze\"\n    this._activeEffect.setFloat(\"_Gaze_Intensity_\", this.gazeIntensity);\n    this._activeEffect.setFloat(\"_Gaze_Focus_\", this.gazeFocus);\n    // \"Blob Texture\"\n    this._activeEffect.setTexture(\"_Blob_Texture_\", this._blobTexture);\n    // \"Selection\"\n    this._activeEffect.setFloat(\"_Selection_Fuzz_\", this.selectionFuzz);\n    this._activeEffect.setFloat(\"_Selected_\", this.selected);\n    this._activeEffect.setFloat(\"_Selection_Fade_\", this.selectionFade);\n    this._activeEffect.setFloat(\"_Selection_Fade_Size_\", this.selectionFadeSize);\n    this._activeEffect.setFloat(\"_Selected_Distance_\", this.selectedDistance);\n    this._activeEffect.setFloat(\"_Selected_Fade_Length_\", this.selectedFadeLength);\n    // \"Proximity\"\n    this._activeEffect.setFloat(\"_Proximity_Max_Intensity_\", this.proximityMaxIntensity);\n    this._activeEffect.setFloat(\"_Proximity_Far_Distance_\", this.proximityFarDistance);\n    this._activeEffect.setFloat(\"_Proximity_Near_Radius_\", this.proximityNearRadius);\n    this._activeEffect.setFloat(\"_Proximity_Anisotropy_\", this.proximityAnisotropy);\n    // \"Global\"\n    this._activeEffect.setFloat(\"_Use_Global_Left_Index_\", this.useGlobalLeftIndex ? 1.0 : 0.0);\n    this._activeEffect.setFloat(\"_Use_Global_Right_Index_\", this.useGlobalRightIndex ? 1.0 : 0.0);\n    // \"Antialiasing\"\n    //define SMOOTH_EDGES true;\n    this._afterBind(mesh, this._activeEffect);\n  }\n  /**\n   * Get the list of animatables in the material.\n   * @returns the list of animatables object used in the material\n   */\n  getAnimatables() {\n    return [];\n  }\n  dispose(forceDisposeEffect) {\n    super.dispose(forceDisposeEffect);\n  }\n  clone(name) {\n    return SerializationHelper.Clone(() => new MRDLFrontplateMaterial(name, this.getScene()), this);\n  }\n  serialize() {\n    const serializationObject = SerializationHelper.Serialize(this);\n    serializationObject.customType = \"BABYLON.MRDLFrontplateMaterial\";\n    return serializationObject;\n  }\n  getClassName() {\n    return \"MRDLFrontplateMaterial\";\n  }\n  // Statics\n  static Parse(source, scene, rootUrl) {\n    return SerializationHelper.Parse(() => new MRDLFrontplateMaterial(source.name, scene), source, scene, rootUrl);\n  }\n}\n/**\n * URL pointing to the texture used to define the coloring for the BLOB.\n */\nMRDLFrontplateMaterial.BLOB_TEXTURE_URL = \"\";\n__decorate([serialize()], MRDLFrontplateMaterial.prototype, \"radius\", void 0);\n__decorate([serialize()], MRDLFrontplateMaterial.prototype, \"lineWidth\", void 0);\n__decorate([serialize()], MRDLFrontplateMaterial.prototype, \"relativeToHeight\", void 0);\n__decorate([serialize()], MRDLFrontplateMaterial.prototype, \"edgeColor\", void 0);\n__decorate([serialize()], MRDLFrontplateMaterial.prototype, \"blobEnable\", void 0);\n__decorate([serialize()], MRDLFrontplateMaterial.prototype, \"blobPosition\", void 0);\n__decorate([serialize()], MRDLFrontplateMaterial.prototype, \"blobIntensity\", void 0);\n__decorate([serialize()], MRDLFrontplateMaterial.prototype, \"blobNearSize\", void 0);\n__decorate([serialize()], MRDLFrontplateMaterial.prototype, \"blobFarSize\", void 0);\n__decorate([serialize()], MRDLFrontplateMaterial.prototype, \"blobNearDistance\", void 0);\n__decorate([serialize()], MRDLFrontplateMaterial.prototype, \"blobFarDistance\", void 0);\n__decorate([serialize()], MRDLFrontplateMaterial.prototype, \"blobFadeLength\", void 0);\n__decorate([serialize()], MRDLFrontplateMaterial.prototype, \"blobInnerFade\", void 0);\n__decorate([serialize()], MRDLFrontplateMaterial.prototype, \"blobPulse\", void 0);\n__decorate([serialize()], MRDLFrontplateMaterial.prototype, \"blobFade\", void 0);\n__decorate([serialize()], MRDLFrontplateMaterial.prototype, \"blobPulseMaxSize\", void 0);\n__decorate([serialize()], MRDLFrontplateMaterial.prototype, \"blobEnable2\", void 0);\n__decorate([serialize()], MRDLFrontplateMaterial.prototype, \"blobPosition2\", void 0);\n__decorate([serialize()], MRDLFrontplateMaterial.prototype, \"blobNearSize2\", void 0);\n__decorate([serialize()], MRDLFrontplateMaterial.prototype, \"blobInnerFade2\", void 0);\n__decorate([serialize()], MRDLFrontplateMaterial.prototype, \"blobPulse2\", void 0);\n__decorate([serialize()], MRDLFrontplateMaterial.prototype, \"blobFade2\", void 0);\n__decorate([serialize()], MRDLFrontplateMaterial.prototype, \"gazeIntensity\", void 0);\n__decorate([serialize()], MRDLFrontplateMaterial.prototype, \"gazeFocus\", void 0);\n__decorate([serialize()], MRDLFrontplateMaterial.prototype, \"selectionFuzz\", void 0);\n__decorate([serialize()], MRDLFrontplateMaterial.prototype, \"selected\", void 0);\n__decorate([serialize()], MRDLFrontplateMaterial.prototype, \"selectionFade\", void 0);\n__decorate([serialize()], MRDLFrontplateMaterial.prototype, \"selectionFadeSize\", void 0);\n__decorate([serialize()], MRDLFrontplateMaterial.prototype, \"selectedDistance\", void 0);\n__decorate([serialize()], MRDLFrontplateMaterial.prototype, \"selectedFadeLength\", void 0);\n__decorate([serialize()], MRDLFrontplateMaterial.prototype, \"proximityMaxIntensity\", void 0);\n__decorate([serialize()], MRDLFrontplateMaterial.prototype, \"proximityFarDistance\", void 0);\n__decorate([serialize()], MRDLFrontplateMaterial.prototype, \"proximityNearRadius\", void 0);\n__decorate([serialize()], MRDLFrontplateMaterial.prototype, \"proximityAnisotropy\", void 0);\n__decorate([serialize()], MRDLFrontplateMaterial.prototype, \"useGlobalLeftIndex\", void 0);\n__decorate([serialize()], MRDLFrontplateMaterial.prototype, \"useGlobalRightIndex\", void 0);\nRegisterClass(\"BABYLON.GUI.MRDLFrontplateMaterial\", MRDLFrontplateMaterial);","map":{"version":3,"names":["Color4","Constants","EffectFallbacks","MaterialDefines","MaterialHelper","PushMaterial","RegisterClass","SerializationHelper","serialize","Vector3","VertexBuffer","Texture","MRDLFrontplateMaterialDefines","constructor","SMOOTH_EDGES","_needNormals","_needUVs","rebuild","MRDLFrontplateMaterial","name","scene","radius","lineWidth","relativeToHeight","_filterWidth","edgeColor","blobEnable","blobPosition","blobIntensity","blobNearSize","blobFarSize","blobNearDistance","blobFarDistance","blobFadeLength","blobInnerFade","blobPulse","blobFade","blobPulseMaxSize","blobEnable2","blobPosition2","blobNearSize2","blobInnerFade2","blobPulse2","blobFade2","gazeIntensity","gazeFocus","selectionFuzz","selected","selectionFade","selectionFadeSize","selectedDistance","selectedFadeLength","proximityMaxIntensity","proximityFarDistance","proximityNearRadius","proximityAnisotropy","useGlobalLeftIndex","useGlobalRightIndex","fadeOut","alphaMode","ALPHA_ADD","disableDepthWrite","backFaceCulling","_blobTexture","BLOB_TEXTURE_URL","NEAREST_SAMPLINGMODE","needAlphaBlending","needAlphaTesting","getAlphaTestTexture","isReadyForSubMesh","mesh","subMesh","isFrozen","effect","_wasPreviouslyReady","materialDefines","defines","getScene","_isReadyForSubMesh","engine","getEngine","PrepareDefinesForAttributes","isDirty","markAsProcessed","resetCachedMaterial","fallbacks","FOG","addFallback","HandleFallbacksForShadows","IMAGEPROCESSINGPOSTPROCESS","imageProcessingConfiguration","applyByPostProcess","attribs","PositionKind","NORMAL","push","NormalKind","UV1","UVKind","UV2","UV2Kind","VERTEXCOLOR","ColorKind","TANGENT","TangentKind","PrepareAttributesForInstances","shaderName","join","toString","uniforms","samplers","uniformBuffers","Array","PrepareUniformsAndSamplersList","uniformsNames","uniformBuffersNames","maxSimultaneousLights","setEffect","createEffect","attributes","onCompiled","onError","indexParameters","isReady","_renderId","getRenderId","bindForSubMesh","world","_activeEffect","bindOnlyWorldMatrix","setMatrix","getTransformMatrix","setVector3","activeCamera","position","setFloat","setDirectColor4","setTexture","_afterBind","getAnimatables","dispose","forceDisposeEffect","clone","Clone","serializationObject","Serialize","customType","getClassName","Parse","source","rootUrl","__decorate"],"sources":["../../../../../../dev/gui/src/3D/materials/mrdl/mrdlFrontplateMaterial.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/naming-convention */\r\nimport type { AbstractMesh } from \"core/Meshes/abstractMesh\";\r\nimport type { BaseTexture } from \"core/Materials/Textures/baseTexture\";\r\nimport type { IAnimatable } from \"core/Animations/animatable.interface\";\r\nimport type { IEffectCreationOptions } from \"core/Materials/effect\";\r\nimport type { Matrix } from \"core/Maths/math.vector\";\r\nimport type { Mesh } from \"core/Meshes/mesh\";\r\nimport type { Nullable } from \"core/types\";\r\nimport type { Scene } from \"core/scene\";\r\nimport type { SubMesh } from \"core/Meshes/subMesh\";\r\n\r\nimport { Color4 } from \"core/Maths/math.color\";\r\nimport { Constants } from \"core/Engines/constants\";\r\nimport { EffectFallbacks } from \"core/Materials/effectFallbacks\";\r\nimport { MaterialDefines } from \"core/Materials/materialDefines\";\r\nimport { MaterialHelper } from \"core/Materials/materialHelper\";\r\nimport { PushMaterial } from \"core/Materials/pushMaterial\";\r\nimport { RegisterClass } from \"core/Misc/typeStore\";\r\nimport { SerializationHelper, serialize } from \"core/Misc/decorators\";\r\nimport { Vector3 } from \"core/Maths/math.vector\";\r\nimport { VertexBuffer } from \"core/Buffers/buffer\";\r\nimport { Texture } from \"core/Materials/Textures/texture\";\r\n\r\nimport \"./shaders/mrdlFrontplate.fragment\";\r\nimport \"./shaders/mrdlFrontplate.vertex\";\r\n\r\n/** @hidden */\r\nclass MRDLFrontplateMaterialDefines extends MaterialDefines {\r\n    /**\r\n     * Sets default value for \"SMOOTH_EDGES\"\r\n     */\r\n    public SMOOTH_EDGES = true;\r\n\r\n    constructor() {\r\n        super();\r\n        this._needNormals = true;\r\n        this._needUVs = true;\r\n        this.rebuild();\r\n    }\r\n}\r\n\r\nexport class MRDLFrontplateMaterial extends PushMaterial {\r\n    /**\r\n     * Gets or sets the corner radius on the frontplate. If this value is changed, update the lineWidth to match.\r\n     */\r\n    @serialize()\r\n    public radius = 0.12;\r\n\r\n    /**\r\n     * Gets or sets the line width of the frontplate.\r\n     */\r\n    @serialize()\r\n    public lineWidth = 0.01;\r\n\r\n    /**\r\n     * Gets or sets whether the scale is relative to the frontplate height.\r\n     */\r\n    @serialize()\r\n    public relativeToHeight = false;\r\n\r\n    /** @hidden */\r\n    public _filterWidth = 1.0;\r\n\r\n    /**\r\n     * Gets or sets the edge color of the frontplate.\r\n     */\r\n    @serialize()\r\n    public edgeColor: Color4 = new Color4(0.53, 0.53, 0.53, 1);\r\n\r\n    /**\r\n     * Gets or sets whether to enable blob effects on the frontplate.\r\n     */\r\n    @serialize()\r\n    public blobEnable = true;\r\n\r\n    /**\r\n     * Gets or sets the blob position on the frontplate.\r\n     */\r\n    @serialize()\r\n    public blobPosition: Vector3 = new Vector3(100, 100, 100);\r\n\r\n    /**\r\n     * Gets or sets the blob intensity of the frontplate.\r\n     */\r\n    @serialize()\r\n    public blobIntensity = 0.5;\r\n\r\n    /**\r\n     * Gets or sets the blob near size of the frontplate.\r\n     */\r\n    @serialize()\r\n    public blobNearSize = 0.032;\r\n\r\n    /**\r\n     * Gets or sets the blob far size of the frontplate.\r\n     */\r\n    @serialize()\r\n    public blobFarSize = 0.048;\r\n\r\n    /**\r\n     * Gets or sets the blob near distance of the frontplate.\r\n     */\r\n    @serialize()\r\n    public blobNearDistance = 0.008;\r\n\r\n    /**\r\n     * Gets or sets the blob far distance of the frontplate.\r\n     */\r\n    @serialize()\r\n    public blobFarDistance = 0.064;\r\n\r\n    /**\r\n     * Gets or sets the blob fade length of the frontplate.\r\n     */\r\n    @serialize()\r\n    public blobFadeLength = 0.04;\r\n\r\n    /**\r\n     * Gets or sets the blob inner fade of the frontplate.\r\n     */\r\n    @serialize()\r\n    public blobInnerFade = 0.01;\r\n\r\n    /**\r\n     * Gets or sets the blob pulse of the frontplate.\r\n     */\r\n    @serialize()\r\n    public blobPulse = 0.0;\r\n\r\n    /**\r\n     * Gets or sets the blob fade effect on the frontplate.\r\n     */\r\n    @serialize()\r\n    public blobFade = 1.0;\r\n\r\n    /**\r\n     * Gets or sets the maximum size of the blob pulse on the frontplate.\r\n     */\r\n    @serialize()\r\n    public blobPulseMaxSize = 0.05;\r\n\r\n    /**\r\n     * Gets or sets whether to enable extra blob effects of the frontplate.\r\n     */\r\n    @serialize()\r\n    public blobEnable2 = true;\r\n\r\n    /**\r\n     * Gets or sets blob2 position of the frontplate.\r\n     */\r\n    @serialize()\r\n    public blobPosition2: Vector3 = new Vector3(10, 10.1, -0.6);\r\n\r\n    /**\r\n     * Gets or sets the blob2 near size of the frontplate.\r\n     */\r\n    @serialize()\r\n    public blobNearSize2 = 0.008;\r\n\r\n    /**\r\n     * Gets or sets the blob2 inner fade of the frontplate.\r\n     */\r\n    @serialize()\r\n    public blobInnerFade2 = 0.1;\r\n\r\n    /**\r\n     * Gets or sets the blob2 pulse of the frontplate.\r\n     */\r\n    @serialize()\r\n    public blobPulse2 = 0.0;\r\n\r\n    /**\r\n     * Gets or sets the blob2 fade effect on the frontplate.\r\n     */\r\n    @serialize()\r\n    public blobFade2 = 1.0;\r\n\r\n    /**\r\n     * Gets or sets the gaze intensity of the frontplate.\r\n     */\r\n    @serialize()\r\n    public gazeIntensity = 0.8;\r\n\r\n    /**\r\n     * Gets or sets the gaze focus of the frontplate.\r\n     */\r\n    @serialize()\r\n    public gazeFocus = 0.0;\r\n\r\n    /**\r\n     * Gets or sets the selection fuzz of the frontplate.\r\n     */\r\n    @serialize()\r\n    public selectionFuzz = 0.5;\r\n\r\n    /**\r\n     * Gets or sets the fade intensity of the frontplate.\r\n     */\r\n    @serialize()\r\n    public selected = 1.0;\r\n\r\n    /**\r\n     * Gets or sets the selection fade intensity of the frontplate.\r\n     */\r\n    @serialize()\r\n    public selectionFade = 0.2;\r\n\r\n    /**\r\n     * Gets or sets the selection fade size of the frontplate.\r\n     */\r\n    @serialize()\r\n    public selectionFadeSize = 0.0;\r\n\r\n    /**\r\n     * Gets or sets the selected distance of the frontplate.\r\n     */\r\n    @serialize()\r\n    public selectedDistance = 0.08;\r\n\r\n    /**\r\n     * Gets or sets the selected fade length of the frontplate.\r\n     */\r\n    @serialize()\r\n    public selectedFadeLength = 0.08;\r\n\r\n    /**\r\n     * Gets or sets the proximity maximum intensity of the frontplate.\r\n     */\r\n    @serialize()\r\n    public proximityMaxIntensity = 0.45;\r\n\r\n    /**\r\n     * Gets or sets the proximity far distance of the frontplate.\r\n     */\r\n    @serialize()\r\n    public proximityFarDistance = 0.16;\r\n\r\n    /**\r\n     * Gets or sets the proximity near radius of the frontplate.\r\n     */\r\n    @serialize()\r\n    public proximityNearRadius = 0.016;\r\n\r\n    /**\r\n     * Gets or sets the proximity anisotropy of the frontplate.\r\n     */\r\n    @serialize()\r\n    public proximityAnisotropy = 1.0;\r\n\r\n    /**\r\n     * Gets or sets whether to use global left index on the frontplate.\r\n     */\r\n    @serialize()\r\n    public useGlobalLeftIndex = true;\r\n\r\n    /**\r\n     * Gets or sets  whether to use global right index of the frontplate.\r\n     */\r\n    @serialize()\r\n    public useGlobalRightIndex = true;\r\n\r\n    /**\r\n     * URL pointing to the texture used to define the coloring for the BLOB.\r\n     */\r\n    public static BLOB_TEXTURE_URL = \"\";\r\n\r\n    /**\r\n     * Gets or sets the opacity of the frontplate (0.0 - 1.0).\r\n     */\r\n    public fadeOut = 1.0;\r\n\r\n    private _blobTexture: Texture;\r\n\r\n    constructor(name: string, scene: Scene) {\r\n        super(name, scene);\r\n        this.alphaMode = Constants.ALPHA_ADD;\r\n        this.disableDepthWrite = true;\r\n        this.backFaceCulling = false;\r\n        this._blobTexture = new Texture(MRDLFrontplateMaterial.BLOB_TEXTURE_URL, scene, true, false, Texture.NEAREST_SAMPLINGMODE);\r\n    }\r\n\r\n    public needAlphaBlending(): boolean {\r\n        return true;\r\n    }\r\n\r\n    public needAlphaTesting(): boolean {\r\n        return false;\r\n    }\r\n\r\n    public getAlphaTestTexture(): Nullable<BaseTexture> {\r\n        return null;\r\n    }\r\n\r\n    // Methods\r\n    public isReadyForSubMesh(mesh: AbstractMesh, subMesh: SubMesh): boolean {\r\n        if (this.isFrozen) {\r\n            if (subMesh.effect && subMesh.effect._wasPreviouslyReady) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        if (!subMesh.materialDefines) {\r\n            subMesh.materialDefines = new MRDLFrontplateMaterialDefines();\r\n        }\r\n\r\n        const defines = <MRDLFrontplateMaterialDefines>subMesh.materialDefines;\r\n        const scene = this.getScene();\r\n\r\n        if (this._isReadyForSubMesh(subMesh)) {\r\n            return true;\r\n        }\r\n\r\n        const engine = scene.getEngine();\r\n\r\n        // Attribs\r\n        MaterialHelper.PrepareDefinesForAttributes(mesh, defines, false, false);\r\n\r\n        // Get correct effect\r\n        if (defines.isDirty) {\r\n            defines.markAsProcessed();\r\n\r\n            scene.resetCachedMaterial();\r\n\r\n            // Fallbacks\r\n            const fallbacks = new EffectFallbacks();\r\n            if (defines.FOG) {\r\n                fallbacks.addFallback(1, \"FOG\");\r\n            }\r\n\r\n            MaterialHelper.HandleFallbacksForShadows(defines, fallbacks);\r\n\r\n            defines.IMAGEPROCESSINGPOSTPROCESS = scene.imageProcessingConfiguration.applyByPostProcess;\r\n\r\n            //Attributes\r\n            const attribs = [VertexBuffer.PositionKind];\r\n\r\n            if (defines.NORMAL) {\r\n                attribs.push(VertexBuffer.NormalKind);\r\n            }\r\n\r\n            if (defines.UV1) {\r\n                attribs.push(VertexBuffer.UVKind);\r\n            }\r\n\r\n            if (defines.UV2) {\r\n                attribs.push(VertexBuffer.UV2Kind);\r\n            }\r\n\r\n            if (defines.VERTEXCOLOR) {\r\n                attribs.push(VertexBuffer.ColorKind);\r\n            }\r\n\r\n            if (defines.TANGENT) {\r\n                attribs.push(VertexBuffer.TangentKind);\r\n            }\r\n\r\n            MaterialHelper.PrepareAttributesForInstances(attribs, defines);\r\n\r\n            // Legacy browser patch\r\n            const shaderName = \"mrdlFrontplate\";\r\n            const join = defines.toString();\r\n\r\n            const uniforms = [\r\n                \"world\",\r\n                \"worldView\",\r\n                \"worldViewProjection\",\r\n                \"view\",\r\n                \"projection\",\r\n                \"viewProjection\",\r\n                \"cameraPosition\",\r\n                \"_Radius_\",\r\n                \"_Line_Width_\",\r\n                \"_Relative_To_Height_\",\r\n                \"_Filter_Width_\",\r\n                \"_Edge_Color_\",\r\n                \"_Fade_Out_\",\r\n                \"_Smooth_Edges_\",\r\n                \"_Blob_Enable_\",\r\n                \"_Blob_Position_\",\r\n                \"_Blob_Intensity_\",\r\n                \"_Blob_Near_Size_\",\r\n                \"_Blob_Far_Size_\",\r\n                \"_Blob_Near_Distance_\",\r\n                \"_Blob_Far_Distance_\",\r\n                \"_Blob_Fade_Length_\",\r\n                \"_Blob_Inner_Fade_\",\r\n                \"_Blob_Pulse_\",\r\n                \"_Blob_Fade_\",\r\n                \"_Blob_Pulse_Max_Size_\",\r\n                \"_Blob_Enable_2_\",\r\n                \"_Blob_Position_2_\",\r\n                \"_Blob_Near_Size_2_\",\r\n                \"_Blob_Inner_Fade_2_\",\r\n                \"_Blob_Pulse_2_\",\r\n                \"_Blob_Fade_2_\",\r\n                \"_Gaze_Intensity_\",\r\n                \"_Gaze_Focus_\",\r\n                \"_Blob_Texture_\",\r\n                \"_Selection_Fuzz_\",\r\n                \"_Selected_\",\r\n                \"_Selection_Fade_\",\r\n                \"_Selection_Fade_Size_\",\r\n                \"_Selected_Distance_\",\r\n                \"_Selected_Fade_Length_\",\r\n                \"_Proximity_Max_Intensity_\",\r\n                \"_Proximity_Far_Distance_\",\r\n                \"_Proximity_Near_Radius_\",\r\n                \"_Proximity_Anisotropy_\",\r\n                \"Global_Left_Index_Tip_Position\",\r\n                \"Global_Right_Index_Tip_Position\",\r\n                \"_Use_Global_Left_Index_\",\r\n                \"_Use_Global_Right_Index_\",\r\n            ];\r\n            const samplers: string[] = [];\r\n            const uniformBuffers = new Array<string>();\r\n\r\n            MaterialHelper.PrepareUniformsAndSamplersList(<IEffectCreationOptions>{\r\n                uniformsNames: uniforms,\r\n                uniformBuffersNames: uniformBuffers,\r\n                samplers: samplers,\r\n                defines: defines,\r\n                maxSimultaneousLights: 4,\r\n            });\r\n\r\n            subMesh.setEffect(\r\n                scene.getEngine().createEffect(\r\n                    shaderName,\r\n                    <IEffectCreationOptions>{\r\n                        attributes: attribs,\r\n                        uniformsNames: uniforms,\r\n                        uniformBuffersNames: uniformBuffers,\r\n                        samplers: samplers,\r\n                        defines: join,\r\n                        fallbacks: fallbacks,\r\n                        onCompiled: this.onCompiled,\r\n                        onError: this.onError,\r\n                        indexParameters: { maxSimultaneousLights: 4 },\r\n                    },\r\n                    engine\r\n                ),\r\n                defines\r\n            );\r\n        }\r\n        if (!subMesh.effect || !subMesh.effect.isReady()) {\r\n            return false;\r\n        }\r\n\r\n        defines._renderId = scene.getRenderId();\r\n        subMesh.effect._wasPreviouslyReady = true;\r\n\r\n        return true;\r\n    }\r\n\r\n    public bindForSubMesh(world: Matrix, mesh: Mesh, subMesh: SubMesh): void {\r\n        const scene = this.getScene();\r\n\r\n        const defines = <MRDLFrontplateMaterialDefines>subMesh.materialDefines;\r\n        if (!defines) {\r\n            return;\r\n        }\r\n\r\n        const effect = subMesh.effect;\r\n        if (!effect) {\r\n            return;\r\n        }\r\n\r\n        this._activeEffect = effect;\r\n\r\n        // Matrices\r\n        this.bindOnlyWorldMatrix(world);\r\n        this._activeEffect.setMatrix(\"viewProjection\", scene.getTransformMatrix());\r\n        this._activeEffect.setVector3(\"cameraPosition\", scene.activeCamera!.position);\r\n\r\n        // \"Round Rect\"\r\n        this._activeEffect.setFloat(\"_Radius_\", this.radius);\r\n        this._activeEffect.setFloat(\"_Line_Width_\", this.lineWidth);\r\n        this._activeEffect.setFloat(\"_Relative_To_Height_\", this.relativeToHeight ? 1.0 : 0.0);\r\n        this._activeEffect.setFloat(\"_Filter_Width_\", this._filterWidth);\r\n        this._activeEffect.setDirectColor4(\"_Edge_Color_\", this.edgeColor);\r\n\r\n        // \"Fade\"\r\n        this._activeEffect.setFloat(\"_Fade_Out_\", this.fadeOut);\r\n\r\n        // \"Blob\"\r\n        this._activeEffect.setFloat(\"_Blob_Enable_\", this.blobEnable ? 1.0 : 0.0);\r\n        this._activeEffect.setVector3(\"_Blob_Position_\", this.blobPosition);\r\n        this._activeEffect.setFloat(\"_Blob_Intensity_\", this.blobIntensity);\r\n        this._activeEffect.setFloat(\"_Blob_Near_Size_\", this.blobNearSize);\r\n        this._activeEffect.setFloat(\"_Blob_Far_Size_\", this.blobFarSize);\r\n        this._activeEffect.setFloat(\"_Blob_Near_Distance_\", this.blobNearDistance);\r\n        this._activeEffect.setFloat(\"_Blob_Far_Distance_\", this.blobFarDistance);\r\n        this._activeEffect.setFloat(\"_Blob_Fade_Length_\", this.blobFadeLength);\r\n        this._activeEffect.setFloat(\"_Blob_Inner_Fade_\", this.blobInnerFade);\r\n        this._activeEffect.setFloat(\"_Blob_Pulse_\", this.blobPulse);\r\n        this._activeEffect.setFloat(\"_Blob_Fade_\", this.blobFade);\r\n        this._activeEffect.setFloat(\"_Blob_Pulse_Max_Size_\", this.blobPulseMaxSize);\r\n\r\n        // \"Blob 2\"\r\n        this._activeEffect.setFloat(\"_Blob_Enable_2_\", this.blobEnable2 ? 1.0 : 0.0);\r\n        this._activeEffect.setVector3(\"_Blob_Position_2_\", this.blobPosition2);\r\n        this._activeEffect.setFloat(\"_Blob_Near_Size_2_\", this.blobNearSize2);\r\n        this._activeEffect.setFloat(\"_Blob_Inner_Fade_2_\", this.blobInnerFade2);\r\n        this._activeEffect.setFloat(\"_Blob_Pulse_2_\", this.blobPulse2);\r\n        this._activeEffect.setFloat(\"_Blob_Fade_2_\", this.blobFade2);\r\n\r\n        // \"Gaze\"\r\n        this._activeEffect.setFloat(\"_Gaze_Intensity_\", this.gazeIntensity);\r\n        this._activeEffect.setFloat(\"_Gaze_Focus_\", this.gazeFocus);\r\n\r\n        // \"Blob Texture\"\r\n        this._activeEffect.setTexture(\"_Blob_Texture_\", this._blobTexture);\r\n\r\n        // \"Selection\"\r\n        this._activeEffect.setFloat(\"_Selection_Fuzz_\", this.selectionFuzz);\r\n        this._activeEffect.setFloat(\"_Selected_\", this.selected);\r\n        this._activeEffect.setFloat(\"_Selection_Fade_\", this.selectionFade);\r\n        this._activeEffect.setFloat(\"_Selection_Fade_Size_\", this.selectionFadeSize);\r\n        this._activeEffect.setFloat(\"_Selected_Distance_\", this.selectedDistance);\r\n        this._activeEffect.setFloat(\"_Selected_Fade_Length_\", this.selectedFadeLength);\r\n\r\n        // \"Proximity\"\r\n        this._activeEffect.setFloat(\"_Proximity_Max_Intensity_\", this.proximityMaxIntensity);\r\n        this._activeEffect.setFloat(\"_Proximity_Far_Distance_\", this.proximityFarDistance);\r\n        this._activeEffect.setFloat(\"_Proximity_Near_Radius_\", this.proximityNearRadius);\r\n        this._activeEffect.setFloat(\"_Proximity_Anisotropy_\", this.proximityAnisotropy);\r\n\r\n        // \"Global\"\r\n        this._activeEffect.setFloat(\"_Use_Global_Left_Index_\", this.useGlobalLeftIndex ? 1.0 : 0.0);\r\n        this._activeEffect.setFloat(\"_Use_Global_Right_Index_\", this.useGlobalRightIndex ? 1.0 : 0.0);\r\n\r\n        // \"Antialiasing\"\r\n        //define SMOOTH_EDGES true;\r\n\r\n        this._afterBind(mesh, this._activeEffect);\r\n    }\r\n\r\n    /**\r\n     * Get the list of animatables in the material.\r\n     * @returns the list of animatables object used in the material\r\n     */\r\n    public getAnimatables(): IAnimatable[] {\r\n        return [];\r\n    }\r\n\r\n    public dispose(forceDisposeEffect?: boolean): void {\r\n        super.dispose(forceDisposeEffect);\r\n    }\r\n\r\n    public clone(name: string): MRDLFrontplateMaterial {\r\n        return SerializationHelper.Clone(() => new MRDLFrontplateMaterial(name, this.getScene()), this);\r\n    }\r\n\r\n    public serialize(): unknown {\r\n        const serializationObject = SerializationHelper.Serialize(this);\r\n        serializationObject.customType = \"BABYLON.MRDLFrontplateMaterial\";\r\n        return serializationObject;\r\n    }\r\n\r\n    public getClassName(): string {\r\n        return \"MRDLFrontplateMaterial\";\r\n    }\r\n\r\n    // Statics\r\n    public static Parse(source: any, scene: Scene, rootUrl: string): MRDLFrontplateMaterial {\r\n        return SerializationHelper.Parse(() => new MRDLFrontplateMaterial(source.name, scene), source, scene, rootUrl);\r\n    }\r\n}\r\n\r\nRegisterClass(\"BABYLON.GUI.MRDLFrontplateMaterial\", MRDLFrontplateMaterial);\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}