{"ast":null,"code":"import { Observable } from \"../Misc/observable.js\";\nimport { Quaternion, Matrix, Vector3, TmpVectors } from \"../Maths/math.vector.js\";\nimport { Color3 } from \"../Maths/math.color.js\";\nimport \"../Meshes/Builders/linesBuilder.js\";\nimport { Mesh } from \"../Meshes/mesh.js\";\nimport { PointerDragBehavior } from \"../Behaviors/Meshes/pointerDragBehavior.js\";\nimport { Gizmo } from \"./gizmo.js\";\nimport { UtilityLayerRenderer } from \"../Rendering/utilityLayerRenderer.js\";\nimport { StandardMaterial } from \"../Materials/standardMaterial.js\";\nimport { ShaderMaterial } from \"../Materials/shaderMaterial.js\";\nimport { Effect } from \"../Materials/effect.js\";\nimport { CreatePlane } from \"../Meshes/Builders/planeBuilder.js\";\nimport { CreateTorus } from \"../Meshes/Builders/torusBuilder.js\";\nimport { Epsilon } from \"../Maths/math.constants.js\";\nimport { Logger } from \"../Misc/logger.js\";\n/**\n * Single plane rotation gizmo\n */\nexport class PlaneRotationGizmo extends Gizmo {\n  /** Default material used to render when gizmo is not disabled or hovered */\n  get coloredMaterial() {\n    return this._coloredMaterial;\n  }\n  /** Material used to render when gizmo is hovered with mouse*/\n  get hoverMaterial() {\n    return this._hoverMaterial;\n  }\n  /** Material used to render when gizmo is disabled. typically grey.*/\n  get disableMaterial() {\n    return this._disableMaterial;\n  }\n  /**\n   * Creates a PlaneRotationGizmo\n   * @param planeNormal The normal of the plane which the gizmo will be able to rotate on\n   * @param color The color of the gizmo\n   * @param gizmoLayer The utility layer the gizmo will be added to\n   * @param tessellation Amount of tessellation to be used when creating rotation circles\n   * @param parent\n   * @param useEulerRotation Use and update Euler angle instead of quaternion\n   * @param thickness display gizmo axis thickness\n   */\n  constructor(planeNormal, color = Color3.Gray(), gizmoLayer = UtilityLayerRenderer.DefaultUtilityLayer, tessellation = 32, parent = null,\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  useEulerRotation = false, thickness = 1) {\n    var _a;\n    super(gizmoLayer);\n    this._pointerObserver = null;\n    /**\n     * Rotation distance in radians that the gizmo will snap to (Default: 0)\n     */\n    this.snapDistance = 0;\n    /**\n     * Event that fires each time the gizmo snaps to a new location.\n     * * snapDistance is the the change in distance\n     */\n    this.onSnapObservable = new Observable();\n    /**\n     * Accumulated relative angle value for rotation on the axis. Reset to 0 when a dragStart occurs\n     */\n    this.angle = 0;\n    /**\n     * Custom sensitivity value for the drag strength\n     */\n    this.sensitivity = 1;\n    this._isEnabled = true;\n    this._parent = null;\n    this._dragging = false;\n    this._angles = new Vector3();\n    this._parent = parent;\n    // Create Material\n    this._coloredMaterial = new StandardMaterial(\"\", gizmoLayer.utilityLayerScene);\n    this._coloredMaterial.diffuseColor = color;\n    this._coloredMaterial.specularColor = color.subtract(new Color3(0.1, 0.1, 0.1));\n    this._hoverMaterial = new StandardMaterial(\"\", gizmoLayer.utilityLayerScene);\n    this._hoverMaterial.diffuseColor = Color3.Yellow();\n    this._disableMaterial = new StandardMaterial(\"\", gizmoLayer.utilityLayerScene);\n    this._disableMaterial.diffuseColor = Color3.Gray();\n    this._disableMaterial.alpha = 0.4;\n    // Build mesh on root node\n    this._gizmoMesh = new Mesh(\"\", gizmoLayer.utilityLayerScene);\n    const {\n      rotationMesh,\n      collider\n    } = this._createGizmoMesh(this._gizmoMesh, thickness, tessellation);\n    // Setup Rotation Circle\n    this._rotationDisplayPlane = CreatePlane(\"rotationDisplay\", {\n      size: 0.6,\n      updatable: false\n    }, this.gizmoLayer.utilityLayerScene);\n    this._rotationDisplayPlane.rotation.z = Math.PI * 0.5;\n    this._rotationDisplayPlane.parent = this._gizmoMesh;\n    this._rotationDisplayPlane.setEnabled(false);\n    Effect.ShadersStore[\"rotationGizmoVertexShader\"] = PlaneRotationGizmo._RotationGizmoVertexShader;\n    Effect.ShadersStore[\"rotationGizmoFragmentShader\"] = PlaneRotationGizmo._RotationGizmoFragmentShader;\n    this._rotationShaderMaterial = new ShaderMaterial(\"shader\", this.gizmoLayer.utilityLayerScene, {\n      vertex: \"rotationGizmo\",\n      fragment: \"rotationGizmo\"\n    }, {\n      attributes: [\"position\", \"uv\"],\n      uniforms: [\"worldViewProjection\", \"angles\"]\n    });\n    this._rotationShaderMaterial.backFaceCulling = false;\n    this._rotationDisplayPlane.material = this._rotationShaderMaterial;\n    this._rotationDisplayPlane.visibility = 0.999;\n    this._gizmoMesh.lookAt(this._rootMesh.position.add(planeNormal));\n    this._rootMesh.addChild(this._gizmoMesh, Gizmo.PreserveScaling);\n    this._gizmoMesh.scaling.scaleInPlace(1 / 3);\n    // Add drag behavior to handle events when the gizmo is dragged\n    this.dragBehavior = new PointerDragBehavior({\n      dragPlaneNormal: planeNormal\n    });\n    this.dragBehavior.moveAttached = false;\n    this.dragBehavior.maxDragAngle = PlaneRotationGizmo.MaxDragAngle;\n    this.dragBehavior._useAlternatePickedPointAboveMaxDragAngle = true;\n    this._rootMesh.addBehavior(this.dragBehavior);\n    // Closures for drag logic\n    const lastDragPosition = new Vector3();\n    const rotationMatrix = new Matrix();\n    const planeNormalTowardsCamera = new Vector3();\n    let localPlaneNormalTowardsCamera = new Vector3();\n    this.dragBehavior.onDragStartObservable.add(e => {\n      if (this.attachedNode) {\n        lastDragPosition.copyFrom(e.dragPlanePoint);\n        this._rotationDisplayPlane.setEnabled(true);\n        this._rotationDisplayPlane.getWorldMatrix().invertToRef(rotationMatrix);\n        Vector3.TransformCoordinatesToRef(e.dragPlanePoint, rotationMatrix, lastDragPosition);\n        this._angles.x = Math.atan2(lastDragPosition.y, lastDragPosition.x) + Math.PI;\n        this._angles.y = 0;\n        this._angles.z = this.updateGizmoRotationToMatchAttachedMesh ? 1 : 0;\n        this._dragging = true;\n        lastDragPosition.copyFrom(e.dragPlanePoint);\n        this._rotationShaderMaterial.setVector3(\"angles\", this._angles);\n        this.angle = 0;\n      }\n    });\n    this.dragBehavior.onDragEndObservable.add(() => {\n      this._dragging = false;\n      this._rotationDisplayPlane.setEnabled(false);\n    });\n    const tmpSnapEvent = {\n      snapDistance: 0\n    };\n    let currentSnapDragDistance = 0;\n    const tmpMatrix = new Matrix();\n    const amountToRotate = new Quaternion();\n    this.dragBehavior.onDragObservable.add(event => {\n      if (this.attachedNode) {\n        // Calc angle over full 360 degree (https://stackoverflow.com/questions/43493711/the-angle-between-two-3d-vectors-with-a-result-range-0-360)\n        const nodeScale = new Vector3(1, 1, 1);\n        const nodeQuaternion = new Quaternion(0, 0, 0, 1);\n        const nodeTranslation = new Vector3(0, 0, 0);\n        this.attachedNode.getWorldMatrix().decompose(nodeScale, nodeQuaternion, nodeTranslation);\n        // uniform scaling of absolute value of components\n        // (-1,1,1) is uniform but (1,1.001,1) is not\n        const uniformScaling = Math.abs(Math.abs(nodeScale.x) - Math.abs(nodeScale.y)) <= Epsilon && Math.abs(Math.abs(nodeScale.x) - Math.abs(nodeScale.z)) <= Epsilon;\n        if (!uniformScaling && this.updateGizmoRotationToMatchAttachedMesh) {\n          Logger.Warn(\"Unable to use a rotation gizmo matching mesh rotation with non uniform scaling. Use uniform scaling or set updateGizmoRotationToMatchAttachedMesh to false.\");\n          return;\n        }\n        nodeQuaternion.normalize();\n        const nodeTranslationForOperation = this.updateGizmoPositionToMatchAttachedMesh ? nodeTranslation : this._rootMesh.absolutePosition;\n        const newVector = event.dragPlanePoint.subtract(nodeTranslationForOperation).normalize();\n        const originalVector = lastDragPosition.subtract(nodeTranslationForOperation).normalize();\n        const cross = Vector3.Cross(newVector, originalVector);\n        const dot = Vector3.Dot(newVector, originalVector);\n        let angle = Math.atan2(cross.length(), dot) * this.sensitivity;\n        planeNormalTowardsCamera.copyFrom(planeNormal);\n        localPlaneNormalTowardsCamera.copyFrom(planeNormal);\n        if (this.updateGizmoRotationToMatchAttachedMesh) {\n          nodeQuaternion.toRotationMatrix(rotationMatrix);\n          localPlaneNormalTowardsCamera = Vector3.TransformCoordinates(planeNormalTowardsCamera, rotationMatrix);\n        }\n        // Flip up vector depending on which side the camera is on\n        let cameraFlipped = false;\n        if (gizmoLayer.utilityLayerScene.activeCamera) {\n          const camVec = gizmoLayer.utilityLayerScene.activeCamera.position.subtract(nodeTranslationForOperation).normalize();\n          if (Vector3.Dot(camVec, localPlaneNormalTowardsCamera) > 0) {\n            planeNormalTowardsCamera.scaleInPlace(-1);\n            localPlaneNormalTowardsCamera.scaleInPlace(-1);\n            cameraFlipped = true;\n          }\n        }\n        const halfCircleSide = Vector3.Dot(localPlaneNormalTowardsCamera, cross) > 0.0;\n        if (halfCircleSide) {\n          angle = -angle;\n        }\n        TmpVectors.Vector3[0].set(angle, 0, 0);\n        if (!this.dragBehavior.validateDrag(TmpVectors.Vector3[0])) {\n          angle = 0;\n        }\n        // Snapping logic\n        let snapped = false;\n        if (this.snapDistance != 0) {\n          currentSnapDragDistance += angle;\n          if (Math.abs(currentSnapDragDistance) > this.snapDistance) {\n            let dragSteps = Math.floor(Math.abs(currentSnapDragDistance) / this.snapDistance);\n            if (currentSnapDragDistance < 0) {\n              dragSteps *= -1;\n            }\n            currentSnapDragDistance = currentSnapDragDistance % this.snapDistance;\n            angle = this.snapDistance * dragSteps;\n            snapped = true;\n          } else {\n            angle = 0;\n          }\n        }\n        // Convert angle and axis to quaternion (http://www.euclideanspace.com/maths/geometry/rotations/conversions/angleToQuaternion/index.htm)\n        const quaternionCoefficient = Math.sin(angle / 2);\n        amountToRotate.set(planeNormalTowardsCamera.x * quaternionCoefficient, planeNormalTowardsCamera.y * quaternionCoefficient, planeNormalTowardsCamera.z * quaternionCoefficient, Math.cos(angle / 2));\n        // If the meshes local scale is inverted (eg. loaded gltf file parent with z scale of -1) the rotation needs to be inverted on the y axis\n        if (tmpMatrix.determinant() > 0) {\n          const tmpVector = new Vector3();\n          amountToRotate.toEulerAnglesToRef(tmpVector);\n          Quaternion.RotationYawPitchRollToRef(tmpVector.y, -tmpVector.x, -tmpVector.z, amountToRotate);\n        }\n        if (this.updateGizmoRotationToMatchAttachedMesh) {\n          // Rotate selected mesh quaternion over fixed axis\n          nodeQuaternion.multiplyToRef(amountToRotate, nodeQuaternion);\n          nodeQuaternion.normalize();\n          // recompose matrix\n          Matrix.ComposeToRef(nodeScale, nodeQuaternion, nodeTranslation, this.attachedNode.getWorldMatrix());\n        } else {\n          // Rotate selected mesh quaternion over rotated axis\n          amountToRotate.toRotationMatrix(TmpVectors.Matrix[0]);\n          const translation = this.attachedNode.getWorldMatrix().getTranslation();\n          this.attachedNode.getWorldMatrix().multiplyToRef(TmpVectors.Matrix[0], this.attachedNode.getWorldMatrix());\n          this.attachedNode.getWorldMatrix().setTranslation(translation);\n        }\n        lastDragPosition.copyFrom(event.dragPlanePoint);\n        if (snapped) {\n          tmpSnapEvent.snapDistance = angle;\n          this.onSnapObservable.notifyObservers(tmpSnapEvent);\n        }\n        this._angles.y += angle;\n        this.angle += cameraFlipped ? -angle : angle;\n        this._rotationShaderMaterial.setVector3(\"angles\", this._angles);\n        this._matrixChanged();\n      }\n    });\n    const light = gizmoLayer._getSharedGizmoLight();\n    light.includedOnlyMeshes = light.includedOnlyMeshes.concat(this._rootMesh.getChildMeshes(false));\n    const cache = {\n      colliderMeshes: [collider],\n      gizmoMeshes: [rotationMesh],\n      material: this._coloredMaterial,\n      hoverMaterial: this._hoverMaterial,\n      disableMaterial: this._disableMaterial,\n      active: false,\n      dragBehavior: this.dragBehavior\n    };\n    (_a = this._parent) === null || _a === void 0 ? void 0 : _a.addToAxisCache(this._gizmoMesh, cache);\n    this._pointerObserver = gizmoLayer.utilityLayerScene.onPointerObservable.add(pointerInfo => {\n      var _a;\n      if (this._customMeshSet) {\n        return;\n      }\n      // updating here the maxangle because ondragstart is too late (value already used) and the updated value is not taken into account\n      this.dragBehavior.maxDragAngle = PlaneRotationGizmo.MaxDragAngle;\n      this._isHovered = !!(cache.colliderMeshes.indexOf((_a = pointerInfo === null || pointerInfo === void 0 ? void 0 : pointerInfo.pickInfo) === null || _a === void 0 ? void 0 : _a.pickedMesh) != -1);\n      if (!this._parent) {\n        const material = cache.dragBehavior.enabled ? this._isHovered || this._dragging ? this._hoverMaterial : this._coloredMaterial : this._disableMaterial;\n        this._setGizmoMeshMaterial(cache.gizmoMeshes, material);\n      }\n    });\n    this.dragBehavior.onEnabledObservable.add(newState => {\n      this._setGizmoMeshMaterial(cache.gizmoMeshes, newState ? this._coloredMaterial : this._disableMaterial);\n    });\n  }\n  /**\n   * Create Geometry for Gizmo\n   * @param parentMesh\n   * @param thickness\n   * @param tessellation\n   */\n  _createGizmoMesh(parentMesh, thickness, tessellation) {\n    const collider = CreateTorus(\"ignore\", {\n      diameter: 0.6,\n      thickness: 0.03 * thickness,\n      tessellation\n    }, this.gizmoLayer.utilityLayerScene);\n    collider.visibility = 0;\n    const rotationMesh = CreateTorus(\"\", {\n      diameter: 0.6,\n      thickness: 0.005 * thickness,\n      tessellation\n    }, this.gizmoLayer.utilityLayerScene);\n    rotationMesh.material = this._coloredMaterial;\n    // Position arrow pointing in its drag axis\n    rotationMesh.rotation.x = Math.PI / 2;\n    collider.rotation.x = Math.PI / 2;\n    parentMesh.addChild(rotationMesh, Gizmo.PreserveScaling);\n    parentMesh.addChild(collider, Gizmo.PreserveScaling);\n    return {\n      rotationMesh,\n      collider\n    };\n  }\n  _attachedNodeChanged(value) {\n    if (this.dragBehavior) {\n      this.dragBehavior.enabled = value ? true : false;\n    }\n  }\n  /**\n   * If the gizmo is enabled\n   */\n  set isEnabled(value) {\n    this._isEnabled = value;\n    if (!value) {\n      this.attachedMesh = null;\n    } else {\n      if (this._parent) {\n        this.attachedMesh = this._parent.attachedMesh;\n      }\n    }\n  }\n  get isEnabled() {\n    return this._isEnabled;\n  }\n  /**\n   * Disposes of the gizmo\n   */\n  dispose() {\n    this.onSnapObservable.clear();\n    this.gizmoLayer.utilityLayerScene.onPointerObservable.remove(this._pointerObserver);\n    this.dragBehavior.detach();\n    if (this._gizmoMesh) {\n      this._gizmoMesh.dispose();\n    }\n    if (this._rotationDisplayPlane) {\n      this._rotationDisplayPlane.dispose();\n    }\n    if (this._rotationShaderMaterial) {\n      this._rotationShaderMaterial.dispose();\n    }\n    [this._coloredMaterial, this._hoverMaterial, this._disableMaterial].forEach(matl => {\n      if (matl) {\n        matl.dispose();\n      }\n    });\n    super.dispose();\n  }\n}\n/**\n * The maximum angle between the camera and the rotation allowed for interaction\n * If a rotation plane appears 'flat', a lower value allows interaction.\n */\nPlaneRotationGizmo.MaxDragAngle = Math.PI * 9 / 20;\nPlaneRotationGizmo._RotationGizmoVertexShader = `\n        precision highp float;\n        attribute vec3 position;\n        attribute vec2 uv;\n        uniform mat4 worldViewProjection;\n        varying vec3 vPosition;\n        varying vec2 vUV;\n        void main(void) {\n            gl_Position = worldViewProjection * vec4(position, 1.0);\n            vUV = uv;\n        }`;\nPlaneRotationGizmo._RotationGizmoFragmentShader = `\n        precision highp float;\n        varying vec2 vUV;\n        varying vec3 vPosition;\n        uniform vec3 angles;\n        #define twopi 6.283185307\n        void main(void) {\n            vec2 uv = vUV - vec2(0.5);\n            float angle = atan(uv.y, uv.x) + 3.141592;\n            float delta = gl_FrontFacing ? angles.y : -angles.y;\n            float begin = angles.x - delta * angles.z;\n            float start = (begin < (begin + delta)) ? begin : (begin + delta);\n            float end = (begin > (begin + delta)) ? begin : (begin + delta);\n            float len = sqrt(dot(uv,uv));\n            float opacity = 1. - step(0.5, len);\n\n            float base = abs(floor(start / twopi)) * twopi;\n            start += base;\n            end += base;\n\n            float intensity = 0.;\n            for (int i = 0; i < 5; i++)\n            {\n                intensity += max(step(start, angle) - step(end, angle), 0.);\n                angle += twopi;\n            }\n            gl_FragColor = vec4(1.,1.,0., min(intensity * 0.25, 0.8)) * opacity;\n        }`;","map":{"version":3,"names":["Observable","Quaternion","Matrix","Vector3","TmpVectors","Color3","Mesh","PointerDragBehavior","Gizmo","UtilityLayerRenderer","StandardMaterial","ShaderMaterial","Effect","CreatePlane","CreateTorus","Epsilon","Logger","PlaneRotationGizmo","coloredMaterial","_coloredMaterial","hoverMaterial","_hoverMaterial","disableMaterial","_disableMaterial","constructor","planeNormal","color","Gray","gizmoLayer","DefaultUtilityLayer","tessellation","parent","useEulerRotation","thickness","_pointerObserver","snapDistance","onSnapObservable","angle","sensitivity","_isEnabled","_parent","_dragging","_angles","utilityLayerScene","diffuseColor","specularColor","subtract","Yellow","alpha","_gizmoMesh","rotationMesh","collider","_createGizmoMesh","_rotationDisplayPlane","size","updatable","rotation","z","Math","PI","setEnabled","ShadersStore","_RotationGizmoVertexShader","_RotationGizmoFragmentShader","_rotationShaderMaterial","vertex","fragment","attributes","uniforms","backFaceCulling","material","visibility","lookAt","_rootMesh","position","add","addChild","PreserveScaling","scaling","scaleInPlace","dragBehavior","dragPlaneNormal","moveAttached","maxDragAngle","MaxDragAngle","_useAlternatePickedPointAboveMaxDragAngle","addBehavior","lastDragPosition","rotationMatrix","planeNormalTowardsCamera","localPlaneNormalTowardsCamera","onDragStartObservable","e","attachedNode","copyFrom","dragPlanePoint","getWorldMatrix","invertToRef","TransformCoordinatesToRef","x","atan2","y","updateGizmoRotationToMatchAttachedMesh","setVector3","onDragEndObservable","tmpSnapEvent","currentSnapDragDistance","tmpMatrix","amountToRotate","onDragObservable","event","nodeScale","nodeQuaternion","nodeTranslation","decompose","uniformScaling","abs","Warn","normalize","nodeTranslationForOperation","updateGizmoPositionToMatchAttachedMesh","absolutePosition","newVector","originalVector","cross","Cross","dot","Dot","length","toRotationMatrix","TransformCoordinates","cameraFlipped","activeCamera","camVec","halfCircleSide","set","validateDrag","snapped","dragSteps","floor","quaternionCoefficient","sin","cos","determinant","tmpVector","toEulerAnglesToRef","RotationYawPitchRollToRef","multiplyToRef","ComposeToRef","translation","getTranslation","setTranslation","notifyObservers","_matrixChanged","light","_getSharedGizmoLight","includedOnlyMeshes","concat","getChildMeshes","cache","colliderMeshes","gizmoMeshes","active","_a","addToAxisCache","onPointerObservable","pointerInfo","_customMeshSet","_isHovered","indexOf","pickInfo","pickedMesh","enabled","_setGizmoMeshMaterial","onEnabledObservable","newState","parentMesh","diameter","_attachedNodeChanged","value","isEnabled","attachedMesh","dispose","clear","remove","detach","forEach","matl"],"sources":["../../../../dev/core/src/Gizmos/planeRotationGizmo.ts"],"sourcesContent":["import type { Observer } from \"../Misc/observable\";\r\nimport { Observable } from \"../Misc/observable\";\r\nimport type { Nullable } from \"../types\";\r\nimport type { PointerInfo } from \"../Events/pointerEvents\";\r\nimport { Quaternion, Matrix, Vector3, TmpVectors } from \"../Maths/math.vector\";\r\nimport { Color3 } from \"../Maths/math.color\";\r\nimport \"../Meshes/Builders/linesBuilder\";\r\nimport type { AbstractMesh } from \"../Meshes/abstractMesh\";\r\nimport { Mesh } from \"../Meshes/mesh\";\r\nimport type { Node } from \"../node\";\r\nimport { PointerDragBehavior } from \"../Behaviors/Meshes/pointerDragBehavior\";\r\nimport type { GizmoAxisCache, IGizmo } from \"./gizmo\";\r\nimport { Gizmo } from \"./gizmo\";\r\nimport { UtilityLayerRenderer } from \"../Rendering/utilityLayerRenderer\";\r\nimport { StandardMaterial } from \"../Materials/standardMaterial\";\r\nimport type { RotationGizmo } from \"./rotationGizmo\";\r\nimport { ShaderMaterial } from \"../Materials/shaderMaterial\";\r\nimport { Effect } from \"../Materials/effect\";\r\nimport { CreatePlane } from \"../Meshes/Builders/planeBuilder\";\r\nimport { CreateTorus } from \"../Meshes/Builders/torusBuilder\";\r\nimport { Epsilon } from \"../Maths/math.constants\";\r\nimport { Logger } from \"../Misc/logger\";\r\n\r\n/**\r\n * Interface for plane rotation gizmo\r\n */\r\nexport interface IPlaneRotationGizmo extends IGizmo {\r\n    /** Drag behavior responsible for the gizmos dragging interactions */\r\n    dragBehavior: PointerDragBehavior;\r\n    /** Drag distance in babylon units that the gizmo will snap to when dragged */\r\n    snapDistance: number;\r\n    /** Sensitivity factor for dragging */\r\n    sensitivity: number;\r\n    /**\r\n     * Event that fires each time the gizmo snaps to a new location.\r\n     * * snapDistance is the the change in distance\r\n     */\r\n    onSnapObservable: Observable<{ snapDistance: number }>;\r\n    /** Accumulated relative angle value for rotation on the axis. */\r\n    angle: number;\r\n    /** If the gizmo is enabled */\r\n    isEnabled: boolean;\r\n\r\n    /** Default material used to render when gizmo is not disabled or hovered */\r\n    coloredMaterial: StandardMaterial;\r\n    /** Material used to render when gizmo is hovered with mouse*/\r\n    hoverMaterial: StandardMaterial;\r\n    /** Material used to render when gizmo is disabled. typically grey.*/\r\n    disableMaterial: StandardMaterial;\r\n}\r\n\r\n/**\r\n * Single plane rotation gizmo\r\n */\r\nexport class PlaneRotationGizmo extends Gizmo implements IPlaneRotationGizmo {\r\n    /**\r\n     * Drag behavior responsible for the gizmos dragging interactions\r\n     */\r\n    public dragBehavior: PointerDragBehavior;\r\n    protected _pointerObserver: Nullable<Observer<PointerInfo>> = null;\r\n\r\n    /**\r\n     * Rotation distance in radians that the gizmo will snap to (Default: 0)\r\n     */\r\n    public snapDistance = 0;\r\n    /**\r\n     * Event that fires each time the gizmo snaps to a new location.\r\n     * * snapDistance is the the change in distance\r\n     */\r\n    public onSnapObservable = new Observable<{ snapDistance: number }>();\r\n\r\n    /**\r\n     * The maximum angle between the camera and the rotation allowed for interaction\r\n     * If a rotation plane appears 'flat', a lower value allows interaction.\r\n     */\r\n    public static MaxDragAngle: number = (Math.PI * 9) / 20;\r\n\r\n    /**\r\n     * Accumulated relative angle value for rotation on the axis. Reset to 0 when a dragStart occurs\r\n     */\r\n    public angle: number = 0;\r\n\r\n    /**\r\n     * Custom sensitivity value for the drag strength\r\n     */\r\n    public sensitivity = 1;\r\n\r\n    /** Default material used to render when gizmo is not disabled or hovered */\r\n    public get coloredMaterial() {\r\n        return this._coloredMaterial;\r\n    }\r\n\r\n    /** Material used to render when gizmo is hovered with mouse*/\r\n    public get hoverMaterial() {\r\n        return this._hoverMaterial;\r\n    }\r\n\r\n    /** Material used to render when gizmo is disabled. typically grey.*/\r\n    public get disableMaterial() {\r\n        return this._disableMaterial;\r\n    }\r\n\r\n    protected _isEnabled: boolean = true;\r\n    protected _parent: Nullable<RotationGizmo> = null;\r\n    protected _coloredMaterial: StandardMaterial;\r\n    protected _hoverMaterial: StandardMaterial;\r\n    protected _disableMaterial: StandardMaterial;\r\n    protected _gizmoMesh: Mesh;\r\n    protected _rotationDisplayPlane: Mesh;\r\n    protected _dragging: boolean = false;\r\n    protected _angles = new Vector3();\r\n\r\n    protected static _RotationGizmoVertexShader = `\r\n        precision highp float;\r\n        attribute vec3 position;\r\n        attribute vec2 uv;\r\n        uniform mat4 worldViewProjection;\r\n        varying vec3 vPosition;\r\n        varying vec2 vUV;\r\n        void main(void) {\r\n            gl_Position = worldViewProjection * vec4(position, 1.0);\r\n            vUV = uv;\r\n        }`;\r\n\r\n    protected static _RotationGizmoFragmentShader = `\r\n        precision highp float;\r\n        varying vec2 vUV;\r\n        varying vec3 vPosition;\r\n        uniform vec3 angles;\r\n        #define twopi 6.283185307\r\n        void main(void) {\r\n            vec2 uv = vUV - vec2(0.5);\r\n            float angle = atan(uv.y, uv.x) + 3.141592;\r\n            float delta = gl_FrontFacing ? angles.y : -angles.y;\r\n            float begin = angles.x - delta * angles.z;\r\n            float start = (begin < (begin + delta)) ? begin : (begin + delta);\r\n            float end = (begin > (begin + delta)) ? begin : (begin + delta);\r\n            float len = sqrt(dot(uv,uv));\r\n            float opacity = 1. - step(0.5, len);\r\n\r\n            float base = abs(floor(start / twopi)) * twopi;\r\n            start += base;\r\n            end += base;\r\n\r\n            float intensity = 0.;\r\n            for (int i = 0; i < 5; i++)\r\n            {\r\n                intensity += max(step(start, angle) - step(end, angle), 0.);\r\n                angle += twopi;\r\n            }\r\n            gl_FragColor = vec4(1.,1.,0., min(intensity * 0.25, 0.8)) * opacity;\r\n        }`;\r\n\r\n    protected _rotationShaderMaterial: ShaderMaterial;\r\n\r\n    /**\r\n     * Creates a PlaneRotationGizmo\r\n     * @param planeNormal The normal of the plane which the gizmo will be able to rotate on\r\n     * @param color The color of the gizmo\r\n     * @param gizmoLayer The utility layer the gizmo will be added to\r\n     * @param tessellation Amount of tessellation to be used when creating rotation circles\r\n     * @param parent\r\n     * @param useEulerRotation Use and update Euler angle instead of quaternion\r\n     * @param thickness display gizmo axis thickness\r\n     */\r\n    constructor(\r\n        planeNormal: Vector3,\r\n        color: Color3 = Color3.Gray(),\r\n        gizmoLayer: UtilityLayerRenderer = UtilityLayerRenderer.DefaultUtilityLayer,\r\n        tessellation = 32,\r\n        parent: Nullable<RotationGizmo> = null,\r\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n        useEulerRotation = false,\r\n        thickness: number = 1\r\n    ) {\r\n        super(gizmoLayer);\r\n        this._parent = parent;\r\n        // Create Material\r\n        this._coloredMaterial = new StandardMaterial(\"\", gizmoLayer.utilityLayerScene);\r\n        this._coloredMaterial.diffuseColor = color;\r\n        this._coloredMaterial.specularColor = color.subtract(new Color3(0.1, 0.1, 0.1));\r\n\r\n        this._hoverMaterial = new StandardMaterial(\"\", gizmoLayer.utilityLayerScene);\r\n        this._hoverMaterial.diffuseColor = Color3.Yellow();\r\n\r\n        this._disableMaterial = new StandardMaterial(\"\", gizmoLayer.utilityLayerScene);\r\n        this._disableMaterial.diffuseColor = Color3.Gray();\r\n        this._disableMaterial.alpha = 0.4;\r\n\r\n        // Build mesh on root node\r\n        this._gizmoMesh = new Mesh(\"\", gizmoLayer.utilityLayerScene);\r\n        const { rotationMesh, collider } = this._createGizmoMesh(this._gizmoMesh, thickness, tessellation);\r\n\r\n        // Setup Rotation Circle\r\n        this._rotationDisplayPlane = CreatePlane(\"rotationDisplay\", { size: 0.6, updatable: false }, this.gizmoLayer.utilityLayerScene);\r\n        this._rotationDisplayPlane.rotation.z = Math.PI * 0.5;\r\n        this._rotationDisplayPlane.parent = this._gizmoMesh;\r\n        this._rotationDisplayPlane.setEnabled(false);\r\n\r\n        Effect.ShadersStore[\"rotationGizmoVertexShader\"] = PlaneRotationGizmo._RotationGizmoVertexShader;\r\n        Effect.ShadersStore[\"rotationGizmoFragmentShader\"] = PlaneRotationGizmo._RotationGizmoFragmentShader;\r\n        this._rotationShaderMaterial = new ShaderMaterial(\r\n            \"shader\",\r\n            this.gizmoLayer.utilityLayerScene,\r\n            {\r\n                vertex: \"rotationGizmo\",\r\n                fragment: \"rotationGizmo\",\r\n            },\r\n            {\r\n                attributes: [\"position\", \"uv\"],\r\n                uniforms: [\"worldViewProjection\", \"angles\"],\r\n            }\r\n        );\r\n        this._rotationShaderMaterial.backFaceCulling = false;\r\n\r\n        this._rotationDisplayPlane.material = this._rotationShaderMaterial;\r\n        this._rotationDisplayPlane.visibility = 0.999;\r\n\r\n        this._gizmoMesh.lookAt(this._rootMesh.position.add(planeNormal));\r\n        this._rootMesh.addChild(this._gizmoMesh, Gizmo.PreserveScaling);\r\n        this._gizmoMesh.scaling.scaleInPlace(1 / 3);\r\n        // Add drag behavior to handle events when the gizmo is dragged\r\n        this.dragBehavior = new PointerDragBehavior({ dragPlaneNormal: planeNormal });\r\n        this.dragBehavior.moveAttached = false;\r\n        this.dragBehavior.maxDragAngle = PlaneRotationGizmo.MaxDragAngle;\r\n        this.dragBehavior._useAlternatePickedPointAboveMaxDragAngle = true;\r\n        this._rootMesh.addBehavior(this.dragBehavior);\r\n\r\n        // Closures for drag logic\r\n        const lastDragPosition = new Vector3();\r\n\r\n        const rotationMatrix = new Matrix();\r\n        const planeNormalTowardsCamera = new Vector3();\r\n        let localPlaneNormalTowardsCamera = new Vector3();\r\n\r\n        this.dragBehavior.onDragStartObservable.add((e) => {\r\n            if (this.attachedNode) {\r\n                lastDragPosition.copyFrom(e.dragPlanePoint);\r\n                this._rotationDisplayPlane.setEnabled(true);\r\n\r\n                this._rotationDisplayPlane.getWorldMatrix().invertToRef(rotationMatrix);\r\n                Vector3.TransformCoordinatesToRef(e.dragPlanePoint, rotationMatrix, lastDragPosition);\r\n\r\n                this._angles.x = Math.atan2(lastDragPosition.y, lastDragPosition.x) + Math.PI;\r\n                this._angles.y = 0;\r\n                this._angles.z = this.updateGizmoRotationToMatchAttachedMesh ? 1 : 0;\r\n                this._dragging = true;\r\n                lastDragPosition.copyFrom(e.dragPlanePoint);\r\n                this._rotationShaderMaterial.setVector3(\"angles\", this._angles);\r\n                this.angle = 0;\r\n            }\r\n        });\r\n\r\n        this.dragBehavior.onDragEndObservable.add(() => {\r\n            this._dragging = false;\r\n            this._rotationDisplayPlane.setEnabled(false);\r\n        });\r\n\r\n        const tmpSnapEvent = { snapDistance: 0 };\r\n        let currentSnapDragDistance = 0;\r\n        const tmpMatrix = new Matrix();\r\n        const amountToRotate = new Quaternion();\r\n        this.dragBehavior.onDragObservable.add((event) => {\r\n            if (this.attachedNode) {\r\n                // Calc angle over full 360 degree (https://stackoverflow.com/questions/43493711/the-angle-between-two-3d-vectors-with-a-result-range-0-360)\r\n                const nodeScale = new Vector3(1, 1, 1);\r\n                const nodeQuaternion = new Quaternion(0, 0, 0, 1);\r\n                const nodeTranslation = new Vector3(0, 0, 0);\r\n\r\n                this.attachedNode.getWorldMatrix().decompose(nodeScale, nodeQuaternion, nodeTranslation);\r\n                // uniform scaling of absolute value of components\r\n                // (-1,1,1) is uniform but (1,1.001,1) is not\r\n                const uniformScaling = Math.abs(Math.abs(nodeScale.x) - Math.abs(nodeScale.y)) <= Epsilon && Math.abs(Math.abs(nodeScale.x) - Math.abs(nodeScale.z)) <= Epsilon;\r\n                if (!uniformScaling && this.updateGizmoRotationToMatchAttachedMesh) {\r\n                    Logger.Warn(\r\n                        \"Unable to use a rotation gizmo matching mesh rotation with non uniform scaling. Use uniform scaling or set updateGizmoRotationToMatchAttachedMesh to false.\"\r\n                    );\r\n                    return;\r\n                }\r\n                nodeQuaternion.normalize();\r\n\r\n                const nodeTranslationForOperation = this.updateGizmoPositionToMatchAttachedMesh ? nodeTranslation : this._rootMesh.absolutePosition;\r\n                const newVector = event.dragPlanePoint.subtract(nodeTranslationForOperation).normalize();\r\n                const originalVector = lastDragPosition.subtract(nodeTranslationForOperation).normalize();\r\n                const cross = Vector3.Cross(newVector, originalVector);\r\n                const dot = Vector3.Dot(newVector, originalVector);\r\n                let angle = Math.atan2(cross.length(), dot) * this.sensitivity;\r\n                planeNormalTowardsCamera.copyFrom(planeNormal);\r\n                localPlaneNormalTowardsCamera.copyFrom(planeNormal);\r\n                if (this.updateGizmoRotationToMatchAttachedMesh) {\r\n                    nodeQuaternion.toRotationMatrix(rotationMatrix);\r\n                    localPlaneNormalTowardsCamera = Vector3.TransformCoordinates(planeNormalTowardsCamera, rotationMatrix);\r\n                }\r\n                // Flip up vector depending on which side the camera is on\r\n                let cameraFlipped = false;\r\n                if (gizmoLayer.utilityLayerScene.activeCamera) {\r\n                    const camVec = gizmoLayer.utilityLayerScene.activeCamera.position.subtract(nodeTranslationForOperation).normalize();\r\n                    if (Vector3.Dot(camVec, localPlaneNormalTowardsCamera) > 0) {\r\n                        planeNormalTowardsCamera.scaleInPlace(-1);\r\n                        localPlaneNormalTowardsCamera.scaleInPlace(-1);\r\n                        cameraFlipped = true;\r\n                    }\r\n                }\r\n                const halfCircleSide = Vector3.Dot(localPlaneNormalTowardsCamera, cross) > 0.0;\r\n                if (halfCircleSide) {\r\n                    angle = -angle;\r\n                }\r\n\r\n                TmpVectors.Vector3[0].set(angle, 0, 0);\r\n                if (!this.dragBehavior.validateDrag(TmpVectors.Vector3[0])) {\r\n                    angle = 0;\r\n                }\r\n\r\n                // Snapping logic\r\n                let snapped = false;\r\n                if (this.snapDistance != 0) {\r\n                    currentSnapDragDistance += angle;\r\n                    if (Math.abs(currentSnapDragDistance) > this.snapDistance) {\r\n                        let dragSteps = Math.floor(Math.abs(currentSnapDragDistance) / this.snapDistance);\r\n                        if (currentSnapDragDistance < 0) {\r\n                            dragSteps *= -1;\r\n                        }\r\n                        currentSnapDragDistance = currentSnapDragDistance % this.snapDistance;\r\n                        angle = this.snapDistance * dragSteps;\r\n                        snapped = true;\r\n                    } else {\r\n                        angle = 0;\r\n                    }\r\n                }\r\n\r\n                // Convert angle and axis to quaternion (http://www.euclideanspace.com/maths/geometry/rotations/conversions/angleToQuaternion/index.htm)\r\n                const quaternionCoefficient = Math.sin(angle / 2);\r\n                amountToRotate.set(\r\n                    planeNormalTowardsCamera.x * quaternionCoefficient,\r\n                    planeNormalTowardsCamera.y * quaternionCoefficient,\r\n                    planeNormalTowardsCamera.z * quaternionCoefficient,\r\n                    Math.cos(angle / 2)\r\n                );\r\n\r\n                // If the meshes local scale is inverted (eg. loaded gltf file parent with z scale of -1) the rotation needs to be inverted on the y axis\r\n                if (tmpMatrix.determinant() > 0) {\r\n                    const tmpVector = new Vector3();\r\n                    amountToRotate.toEulerAnglesToRef(tmpVector);\r\n                    Quaternion.RotationYawPitchRollToRef(tmpVector.y, -tmpVector.x, -tmpVector.z, amountToRotate);\r\n                }\r\n\r\n                if (this.updateGizmoRotationToMatchAttachedMesh) {\r\n                    // Rotate selected mesh quaternion over fixed axis\r\n                    nodeQuaternion.multiplyToRef(amountToRotate, nodeQuaternion);\r\n                    nodeQuaternion.normalize();\r\n                    // recompose matrix\r\n                    Matrix.ComposeToRef(nodeScale, nodeQuaternion, nodeTranslation, this.attachedNode.getWorldMatrix());\r\n                } else {\r\n                    // Rotate selected mesh quaternion over rotated axis\r\n                    amountToRotate.toRotationMatrix(TmpVectors.Matrix[0]);\r\n                    const translation = this.attachedNode.getWorldMatrix().getTranslation();\r\n                    this.attachedNode.getWorldMatrix().multiplyToRef(TmpVectors.Matrix[0], this.attachedNode.getWorldMatrix());\r\n                    this.attachedNode.getWorldMatrix().setTranslation(translation);\r\n                }\r\n\r\n                lastDragPosition.copyFrom(event.dragPlanePoint);\r\n                if (snapped) {\r\n                    tmpSnapEvent.snapDistance = angle;\r\n                    this.onSnapObservable.notifyObservers(tmpSnapEvent);\r\n                }\r\n                this._angles.y += angle;\r\n                this.angle += cameraFlipped ? -angle : angle;\r\n                this._rotationShaderMaterial.setVector3(\"angles\", this._angles);\r\n                this._matrixChanged();\r\n            }\r\n        });\r\n\r\n        const light = gizmoLayer._getSharedGizmoLight();\r\n        light.includedOnlyMeshes = light.includedOnlyMeshes.concat(this._rootMesh.getChildMeshes(false));\r\n\r\n        const cache: GizmoAxisCache = {\r\n            colliderMeshes: [collider],\r\n            gizmoMeshes: [rotationMesh],\r\n            material: this._coloredMaterial,\r\n            hoverMaterial: this._hoverMaterial,\r\n            disableMaterial: this._disableMaterial,\r\n            active: false,\r\n            dragBehavior: this.dragBehavior,\r\n        };\r\n        this._parent?.addToAxisCache(this._gizmoMesh, cache);\r\n\r\n        this._pointerObserver = gizmoLayer.utilityLayerScene.onPointerObservable.add((pointerInfo) => {\r\n            if (this._customMeshSet) {\r\n                return;\r\n            }\r\n            // updating here the maxangle because ondragstart is too late (value already used) and the updated value is not taken into account\r\n            this.dragBehavior.maxDragAngle = PlaneRotationGizmo.MaxDragAngle;\r\n            this._isHovered = !!(cache.colliderMeshes.indexOf(<Mesh>pointerInfo?.pickInfo?.pickedMesh) != -1);\r\n            if (!this._parent) {\r\n                const material = cache.dragBehavior.enabled ? (this._isHovered || this._dragging ? this._hoverMaterial : this._coloredMaterial) : this._disableMaterial;\r\n                this._setGizmoMeshMaterial(cache.gizmoMeshes, material);\r\n            }\r\n        });\r\n\r\n        this.dragBehavior.onEnabledObservable.add((newState) => {\r\n            this._setGizmoMeshMaterial(cache.gizmoMeshes, newState ? this._coloredMaterial : this._disableMaterial);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Create Geometry for Gizmo\r\n     * @param parentMesh\r\n     * @param thickness\r\n     * @param tessellation\r\n     */\r\n    protected _createGizmoMesh(parentMesh: AbstractMesh, thickness: number, tessellation: number) {\r\n        const collider = CreateTorus(\r\n            \"ignore\",\r\n            {\r\n                diameter: 0.6,\r\n                thickness: 0.03 * thickness,\r\n                tessellation,\r\n            },\r\n            this.gizmoLayer.utilityLayerScene\r\n        );\r\n        collider.visibility = 0;\r\n        const rotationMesh = CreateTorus(\r\n            \"\",\r\n            {\r\n                diameter: 0.6,\r\n                thickness: 0.005 * thickness,\r\n                tessellation,\r\n            },\r\n            this.gizmoLayer.utilityLayerScene\r\n        );\r\n        rotationMesh.material = this._coloredMaterial;\r\n\r\n        // Position arrow pointing in its drag axis\r\n        rotationMesh.rotation.x = Math.PI / 2;\r\n        collider.rotation.x = Math.PI / 2;\r\n\r\n        parentMesh.addChild(rotationMesh, Gizmo.PreserveScaling);\r\n        parentMesh.addChild(collider, Gizmo.PreserveScaling);\r\n        return { rotationMesh, collider };\r\n    }\r\n\r\n    protected _attachedNodeChanged(value: Nullable<Node>) {\r\n        if (this.dragBehavior) {\r\n            this.dragBehavior.enabled = value ? true : false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * If the gizmo is enabled\r\n     */\r\n    public set isEnabled(value: boolean) {\r\n        this._isEnabled = value;\r\n        if (!value) {\r\n            this.attachedMesh = null;\r\n        } else {\r\n            if (this._parent) {\r\n                this.attachedMesh = this._parent.attachedMesh;\r\n            }\r\n        }\r\n    }\r\n    public get isEnabled(): boolean {\r\n        return this._isEnabled;\r\n    }\r\n    /**\r\n     * Disposes of the gizmo\r\n     */\r\n    public dispose() {\r\n        this.onSnapObservable.clear();\r\n        this.gizmoLayer.utilityLayerScene.onPointerObservable.remove(this._pointerObserver);\r\n        this.dragBehavior.detach();\r\n        if (this._gizmoMesh) {\r\n            this._gizmoMesh.dispose();\r\n        }\r\n        if (this._rotationDisplayPlane) {\r\n            this._rotationDisplayPlane.dispose();\r\n        }\r\n        if (this._rotationShaderMaterial) {\r\n            this._rotationShaderMaterial.dispose();\r\n        }\r\n        [this._coloredMaterial, this._hoverMaterial, this._disableMaterial].forEach((matl) => {\r\n            if (matl) {\r\n                matl.dispose();\r\n            }\r\n        });\r\n        super.dispose();\r\n    }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}