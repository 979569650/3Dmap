{"ast":null,"code":"import { Rectangle } from \"./rectangle.js\";\nimport { Control } from \"./control.js\";\nimport { TextBlock } from \"./textBlock.js\";\nimport { Image } from \"./image.js\";\nimport { RegisterClass } from \"@babylonjs/core/Misc/typeStore.js\";\n/**\n * Class used to create 2D buttons\n */\nexport class Button extends Rectangle {\n  /**\n   * Returns the image part of the button (if any)\n   */\n  get image() {\n    return this._image;\n  }\n  /**\n   * Returns the TextBlock part of the button (if any)\n   */\n  get textBlock() {\n    return this._textBlock;\n  }\n  /**\n   * Creates a new Button\n   * @param name defines the name of the button\n   */\n  constructor(name) {\n    super(name);\n    this.name = name;\n    /**\n     * Gets or sets a boolean indicating that the button will let internal controls handle picking instead of doing it directly using its bounding info\n     */\n    this.delegatePickingToChildren = false;\n    this.thickness = 1;\n    this.isPointerBlocker = true;\n    let alphaStore = null;\n    this.pointerEnterAnimation = () => {\n      alphaStore = this.alpha;\n      this.alpha -= 0.1;\n    };\n    this.pointerOutAnimation = () => {\n      if (alphaStore !== null) {\n        this.alpha = alphaStore;\n      }\n    };\n    this.pointerDownAnimation = () => {\n      this.scaleX -= 0.05;\n      this.scaleY -= 0.05;\n    };\n    this.pointerUpAnimation = () => {\n      this.scaleX += 0.05;\n      this.scaleY += 0.05;\n    };\n  }\n  _getTypeName() {\n    return \"Button\";\n  }\n  // While being a container, the button behaves like a control.\n  /**\n   * @internal\n   */\n  _processPicking(x, y, pi, type, pointerId, buttonIndex, deltaX, deltaY) {\n    if (!this._isEnabled || !this.isHitTestVisible || !this.isVisible || this.notRenderable) {\n      return false;\n    }\n    if (!super.contains(x, y)) {\n      return false;\n    }\n    if (this.delegatePickingToChildren) {\n      let contains = false;\n      for (let index = this._children.length - 1; index >= 0; index--) {\n        const child = this._children[index];\n        if (child.isEnabled && child.isHitTestVisible && child.isVisible && !child.notRenderable && child.contains(x, y)) {\n          contains = true;\n          break;\n        }\n      }\n      if (!contains) {\n        return false;\n      }\n    }\n    this._processObservables(type, x, y, pi, pointerId, buttonIndex, deltaX, deltaY);\n    return true;\n  }\n  /**\n   * @internal\n   */\n  _onPointerEnter(target, pi) {\n    if (!super._onPointerEnter(target, pi)) {\n      return false;\n    }\n    if (!this.isReadOnly && this.pointerEnterAnimation) {\n      this.pointerEnterAnimation();\n    }\n    return true;\n  }\n  /**\n   * @internal\n   */\n  _onPointerOut(target, pi, force = false) {\n    if (!this.isReadOnly && this.pointerOutAnimation) {\n      this.pointerOutAnimation();\n    }\n    super._onPointerOut(target, pi, force);\n  }\n  /**\n   * @internal\n   */\n  _onPointerDown(target, coordinates, pointerId, buttonIndex, pi) {\n    if (!super._onPointerDown(target, coordinates, pointerId, buttonIndex, pi)) {\n      return false;\n    }\n    if (!this.isReadOnly && this.pointerDownAnimation) {\n      this.pointerDownAnimation();\n    }\n    return true;\n  }\n  _getRectangleFill(context) {\n    if (this.isEnabled) {\n      return this._getBackgroundColor(context);\n    } else {\n      return this._disabledColor;\n    }\n  }\n  /**\n   * @internal\n   */\n  _onPointerUp(target, coordinates, pointerId, buttonIndex, notifyClick, pi) {\n    if (!this.isReadOnly && this.pointerUpAnimation) {\n      this.pointerUpAnimation();\n    }\n    super._onPointerUp(target, coordinates, pointerId, buttonIndex, notifyClick, pi);\n  }\n  /**\n   * Serializes the current button\n   * @param serializationObject defines the JSON serialized object\n   */\n  serialize(serializationObject) {\n    super.serialize(serializationObject);\n    if (this._textBlock) {\n      serializationObject.textBlockName = this._textBlock.name;\n    }\n    if (this._image) {\n      serializationObject.imageName = this._image.name;\n    }\n  }\n  /**\n   * @internal\n   */\n  _parseFromContent(serializedObject, host) {\n    super._parseFromContent(serializedObject, host);\n    if (serializedObject.textBlockName) {\n      this._textBlock = this.getChildByName(serializedObject.textBlockName);\n    }\n    if (serializedObject.imageName) {\n      this._image = this.getChildByName(serializedObject.imageName);\n    }\n  }\n  // Statics\n  /**\n   * Creates a new button made with an image and a text\n   * @param name defines the name of the button\n   * @param text defines the text of the button\n   * @param imageUrl defines the url of the image\n   * @returns a new Button\n   */\n  static CreateImageButton(name, text, imageUrl) {\n    const result = new this(name);\n    // Adding text\n    const textBlock = new TextBlock(name + \"_button\", text);\n    textBlock.textWrapping = true;\n    textBlock.textHorizontalAlignment = Control.HORIZONTAL_ALIGNMENT_CENTER;\n    textBlock.paddingLeft = \"20%\";\n    result.addControl(textBlock);\n    // Adding image\n    const iconImage = new Image(name + \"_icon\", imageUrl);\n    iconImage.width = \"20%\";\n    iconImage.stretch = Image.STRETCH_UNIFORM;\n    iconImage.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\n    result.addControl(iconImage);\n    // Store\n    result._image = iconImage;\n    result._textBlock = textBlock;\n    return result;\n  }\n  /**\n   * Creates a new button made with an image\n   * @param name defines the name of the button\n   * @param imageUrl defines the url of the image\n   * @returns a new Button\n   */\n  static CreateImageOnlyButton(name, imageUrl) {\n    const result = new this(name);\n    // Adding image\n    const iconImage = new Image(name + \"_icon\", imageUrl);\n    iconImage.stretch = Image.STRETCH_FILL;\n    iconImage.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\n    result.addControl(iconImage);\n    // Store\n    result._image = iconImage;\n    return result;\n  }\n  /**\n   * Creates a new button made with a text\n   * @param name defines the name of the button\n   * @param text defines the text of the button\n   * @returns a new Button\n   */\n  static CreateSimpleButton(name, text) {\n    const result = new this(name);\n    // Adding text\n    const textBlock = new TextBlock(name + \"_button\", text);\n    textBlock.textWrapping = true;\n    textBlock.textHorizontalAlignment = Control.HORIZONTAL_ALIGNMENT_CENTER;\n    result.addControl(textBlock);\n    // Store\n    result._textBlock = textBlock;\n    return result;\n  }\n  /**\n   * Creates a new button made with an image and a centered text\n   * @param name defines the name of the button\n   * @param text defines the text of the button\n   * @param imageUrl defines the url of the image\n   * @returns a new Button\n   */\n  static CreateImageWithCenterTextButton(name, text, imageUrl) {\n    const result = new this(name);\n    // Adding image\n    const iconImage = new Image(name + \"_icon\", imageUrl);\n    iconImage.stretch = Image.STRETCH_FILL;\n    result.addControl(iconImage);\n    // Adding text\n    const textBlock = new TextBlock(name + \"_button\", text);\n    textBlock.textWrapping = true;\n    textBlock.textHorizontalAlignment = Control.HORIZONTAL_ALIGNMENT_CENTER;\n    result.addControl(textBlock);\n    // Store\n    result._image = iconImage;\n    result._textBlock = textBlock;\n    return result;\n  }\n}\nRegisterClass(\"BABYLON.GUI.Button\", Button);","map":{"version":3,"names":["Rectangle","Control","TextBlock","Image","RegisterClass","Button","image","_image","textBlock","_textBlock","constructor","name","delegatePickingToChildren","thickness","isPointerBlocker","alphaStore","pointerEnterAnimation","alpha","pointerOutAnimation","pointerDownAnimation","scaleX","scaleY","pointerUpAnimation","_getTypeName","_processPicking","x","y","pi","type","pointerId","buttonIndex","deltaX","deltaY","_isEnabled","isHitTestVisible","isVisible","notRenderable","contains","index","_children","length","child","isEnabled","_processObservables","_onPointerEnter","target","isReadOnly","_onPointerOut","force","_onPointerDown","coordinates","_getRectangleFill","context","_getBackgroundColor","_disabledColor","_onPointerUp","notifyClick","serialize","serializationObject","textBlockName","imageName","_parseFromContent","serializedObject","host","getChildByName","CreateImageButton","text","imageUrl","result","textWrapping","textHorizontalAlignment","HORIZONTAL_ALIGNMENT_CENTER","paddingLeft","addControl","iconImage","width","stretch","STRETCH_UNIFORM","horizontalAlignment","HORIZONTAL_ALIGNMENT_LEFT","CreateImageOnlyButton","STRETCH_FILL","CreateSimpleButton","CreateImageWithCenterTextButton"],"sources":["../../../../../dev/gui/src/2D/controls/button.ts"],"sourcesContent":["import type { Nullable } from \"core/types\";\r\nimport type { Vector2 } from \"core/Maths/math.vector\";\r\n\r\nimport { Rectangle } from \"./rectangle\";\r\nimport { Control } from \"./control\";\r\nimport { TextBlock } from \"./textBlock\";\r\nimport { Image } from \"./image\";\r\nimport { RegisterClass } from \"core/Misc/typeStore\";\r\nimport type { PointerInfoBase } from \"core/Events/pointerEvents\";\r\nimport type { AdvancedDynamicTexture } from \"../advancedDynamicTexture\";\r\nimport type { ICanvasRenderingContext } from \"core/Engines/ICanvas\";\r\n\r\n/**\r\n * Class used to create 2D buttons\r\n */\r\nexport class Button extends Rectangle {\r\n    /**\r\n     * Function called to generate a pointer enter animation\r\n     */\r\n    public pointerEnterAnimation: () => void;\r\n    /**\r\n     * Function called to generate a pointer out animation\r\n     */\r\n    public pointerOutAnimation: () => void;\r\n    /**\r\n     * Function called to generate a pointer down animation\r\n     */\r\n    public pointerDownAnimation: () => void;\r\n    /**\r\n     * Function called to generate a pointer up animation\r\n     */\r\n    public pointerUpAnimation: () => void;\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating that the button will let internal controls handle picking instead of doing it directly using its bounding info\r\n     */\r\n    public delegatePickingToChildren = false;\r\n\r\n    private _image: Nullable<Image>;\r\n    /**\r\n     * Returns the image part of the button (if any)\r\n     */\r\n    public get image(): Nullable<Image> {\r\n        return this._image;\r\n    }\r\n\r\n    private _textBlock: Nullable<TextBlock>;\r\n    /**\r\n     * Returns the TextBlock part of the button (if any)\r\n     */\r\n    public get textBlock(): Nullable<TextBlock> {\r\n        return this._textBlock;\r\n    }\r\n\r\n    /**\r\n     * Creates a new Button\r\n     * @param name defines the name of the button\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n\r\n        this.thickness = 1;\r\n        this.isPointerBlocker = true;\r\n\r\n        let alphaStore: Nullable<number> = null;\r\n\r\n        this.pointerEnterAnimation = () => {\r\n            alphaStore = this.alpha;\r\n            this.alpha -= 0.1;\r\n        };\r\n\r\n        this.pointerOutAnimation = () => {\r\n            if (alphaStore !== null) {\r\n                this.alpha = alphaStore;\r\n            }\r\n        };\r\n\r\n        this.pointerDownAnimation = () => {\r\n            this.scaleX -= 0.05;\r\n            this.scaleY -= 0.05;\r\n        };\r\n\r\n        this.pointerUpAnimation = () => {\r\n            this.scaleX += 0.05;\r\n            this.scaleY += 0.05;\r\n        };\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Button\";\r\n    }\r\n\r\n    // While being a container, the button behaves like a control.\r\n    /**\r\n     * @internal\r\n     */\r\n    public _processPicking(x: number, y: number, pi: PointerInfoBase, type: number, pointerId: number, buttonIndex: number, deltaX?: number, deltaY?: number): boolean {\r\n        if (!this._isEnabled || !this.isHitTestVisible || !this.isVisible || this.notRenderable) {\r\n            return false;\r\n        }\r\n\r\n        if (!super.contains(x, y)) {\r\n            return false;\r\n        }\r\n\r\n        if (this.delegatePickingToChildren) {\r\n            let contains = false;\r\n            for (let index = this._children.length - 1; index >= 0; index--) {\r\n                const child = this._children[index];\r\n                if (child.isEnabled && child.isHitTestVisible && child.isVisible && !child.notRenderable && child.contains(x, y)) {\r\n                    contains = true;\r\n                    break;\r\n                }\r\n            }\r\n\r\n            if (!contains) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        this._processObservables(type, x, y, pi, pointerId, buttonIndex, deltaX, deltaY);\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _onPointerEnter(target: Control, pi: PointerInfoBase): boolean {\r\n        if (!super._onPointerEnter(target, pi)) {\r\n            return false;\r\n        }\r\n\r\n        if (!this.isReadOnly && this.pointerEnterAnimation) {\r\n            this.pointerEnterAnimation();\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _onPointerOut(target: Control, pi: PointerInfoBase, force = false): void {\r\n        if (!this.isReadOnly && this.pointerOutAnimation) {\r\n            this.pointerOutAnimation();\r\n        }\r\n\r\n        super._onPointerOut(target, pi, force);\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _onPointerDown(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number, pi: PointerInfoBase): boolean {\r\n        if (!super._onPointerDown(target, coordinates, pointerId, buttonIndex, pi)) {\r\n            return false;\r\n        }\r\n\r\n        if (!this.isReadOnly && this.pointerDownAnimation) {\r\n            this.pointerDownAnimation();\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    protected _getRectangleFill(context: ICanvasRenderingContext) {\r\n        if (this.isEnabled) {\r\n            return this._getBackgroundColor(context);\r\n        } else {\r\n            return this._disabledColor;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _onPointerUp(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number, notifyClick: boolean, pi: PointerInfoBase): void {\r\n        if (!this.isReadOnly && this.pointerUpAnimation) {\r\n            this.pointerUpAnimation();\r\n        }\r\n\r\n        super._onPointerUp(target, coordinates, pointerId, buttonIndex, notifyClick, pi);\r\n    }\r\n\r\n    /**\r\n     * Serializes the current button\r\n     * @param serializationObject defines the JSON serialized object\r\n     */\r\n    public serialize(serializationObject: any) {\r\n        super.serialize(serializationObject);\r\n\r\n        if (this._textBlock) {\r\n            serializationObject.textBlockName = this._textBlock.name;\r\n        }\r\n        if (this._image) {\r\n            serializationObject.imageName = this._image.name;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _parseFromContent(serializedObject: any, host: AdvancedDynamicTexture) {\r\n        super._parseFromContent(serializedObject, host);\r\n\r\n        if (serializedObject.textBlockName) {\r\n            this._textBlock = this.getChildByName(serializedObject.textBlockName) as Nullable<TextBlock>;\r\n        }\r\n\r\n        if (serializedObject.imageName) {\r\n            this._image = this.getChildByName(serializedObject.imageName) as Nullable<Image>;\r\n        }\r\n    }\r\n\r\n    // Statics\r\n    /**\r\n     * Creates a new button made with an image and a text\r\n     * @param name defines the name of the button\r\n     * @param text defines the text of the button\r\n     * @param imageUrl defines the url of the image\r\n     * @returns a new Button\r\n     */\r\n    public static CreateImageButton(name: string, text: string, imageUrl: string): Button {\r\n        const result = new this(name);\r\n\r\n        // Adding text\r\n        const textBlock = new TextBlock(name + \"_button\", text);\r\n        textBlock.textWrapping = true;\r\n        textBlock.textHorizontalAlignment = Control.HORIZONTAL_ALIGNMENT_CENTER;\r\n        textBlock.paddingLeft = \"20%\";\r\n        result.addControl(textBlock);\r\n\r\n        // Adding image\r\n        const iconImage = new Image(name + \"_icon\", imageUrl);\r\n        iconImage.width = \"20%\";\r\n        iconImage.stretch = Image.STRETCH_UNIFORM;\r\n        iconImage.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        result.addControl(iconImage);\r\n\r\n        // Store\r\n        result._image = iconImage;\r\n        result._textBlock = textBlock;\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Creates a new button made with an image\r\n     * @param name defines the name of the button\r\n     * @param imageUrl defines the url of the image\r\n     * @returns a new Button\r\n     */\r\n    public static CreateImageOnlyButton(name: string, imageUrl: string): Button {\r\n        const result = new this(name);\r\n\r\n        // Adding image\r\n        const iconImage = new Image(name + \"_icon\", imageUrl);\r\n        iconImage.stretch = Image.STRETCH_FILL;\r\n        iconImage.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        result.addControl(iconImage);\r\n\r\n        // Store\r\n        result._image = iconImage;\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Creates a new button made with a text\r\n     * @param name defines the name of the button\r\n     * @param text defines the text of the button\r\n     * @returns a new Button\r\n     */\r\n    public static CreateSimpleButton(name: string, text: string): Button {\r\n        const result = new this(name);\r\n\r\n        // Adding text\r\n        const textBlock = new TextBlock(name + \"_button\", text);\r\n        textBlock.textWrapping = true;\r\n        textBlock.textHorizontalAlignment = Control.HORIZONTAL_ALIGNMENT_CENTER;\r\n        result.addControl(textBlock);\r\n\r\n        // Store\r\n        result._textBlock = textBlock;\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Creates a new button made with an image and a centered text\r\n     * @param name defines the name of the button\r\n     * @param text defines the text of the button\r\n     * @param imageUrl defines the url of the image\r\n     * @returns a new Button\r\n     */\r\n    public static CreateImageWithCenterTextButton(name: string, text: string, imageUrl: string): Button {\r\n        const result = new this(name);\r\n\r\n        // Adding image\r\n        const iconImage = new Image(name + \"_icon\", imageUrl);\r\n        iconImage.stretch = Image.STRETCH_FILL;\r\n        result.addControl(iconImage);\r\n\r\n        // Adding text\r\n        const textBlock = new TextBlock(name + \"_button\", text);\r\n        textBlock.textWrapping = true;\r\n        textBlock.textHorizontalAlignment = Control.HORIZONTAL_ALIGNMENT_CENTER;\r\n        result.addControl(textBlock);\r\n\r\n        // Store\r\n        result._image = iconImage;\r\n        result._textBlock = textBlock;\r\n\r\n        return result;\r\n    }\r\n}\r\nRegisterClass(\"BABYLON.GUI.Button\", Button);\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}