{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { RandomGUID } from \"../Misc/guid.js\";\nimport { FlowGraphConnectionType } from \"./flowGraphConnection.js\";\nimport { FlowGraphDataConnection } from \"./flowGraphDataConnection.js\";\nimport { Tools } from \"../Misc/tools.js\";\nimport { FlowGraphExecutionBlock } from \"./flowGraphExecutionBlock.js\";\n/**\n * @experimental\n * A block in a flow graph. The most basic form\n * of a block has inputs and outputs that contain\n * data.\n */\nexport class FlowGraphBlock {\n  /** Constructor is protected so only subclasses can be instantiated */\n  constructor(config) {\n    this.config = config;\n    /**\n     * A randomly generated GUID for each block.\n     */\n    this.uniqueId = RandomGUID();\n    this.configure();\n  }\n  configure() {\n    var _a, _b;\n    // overriden in child classes, uses config\n    this.name = (_b = (_a = this.config) === null || _a === void 0 ? void 0 : _a.name) !== null && _b !== void 0 ? _b : this.getClassName();\n    this.dataInputs = [];\n    this.dataOutputs = [];\n  }\n  /**\n   * @internal\n   */\n  _updateOutputs(_context) {\n    // empty by default, overriden in data blocks\n  }\n  _registerDataInput(name, className) {\n    const input = new FlowGraphDataConnection(name, FlowGraphConnectionType.Input, this, className);\n    this.dataInputs.push(input);\n    return input;\n  }\n  _registerDataOutput(name, className) {\n    const output = new FlowGraphDataConnection(name, FlowGraphConnectionType.Output, this, className);\n    this.dataOutputs.push(output);\n    return output;\n  }\n  serialize(serializationObject = {}) {\n    serializationObject.uniqueId = this.uniqueId;\n    serializationObject.config = this.config;\n    serializationObject.dataInputs = [];\n    serializationObject.dataOutputs = [];\n    serializationObject.className = this.getClassName();\n    for (const input of this.dataInputs) {\n      const serializedInput = {};\n      input.serialize(serializedInput);\n      serializationObject.dataInputs.push(serializedInput);\n    }\n    for (const output of this.dataOutputs) {\n      const serializedOutput = {};\n      output.serialize(serializedOutput);\n      serializationObject.dataOutputs.push(serializedOutput);\n    }\n  }\n  getClassName() {\n    return \"FGBlock\";\n  }\n  static Parse(serializationObject) {\n    const classType = Tools.Instantiate(serializationObject.className);\n    const obj = new classType(serializationObject.config);\n    obj.uniqueId = serializationObject.uniqueId;\n    for (let i = 0; i < serializationObject.dataInputs.length; i++) {\n      obj.dataInputs[i].deserialize(serializationObject.dataInputs[i]);\n    }\n    for (let i = 0; i < serializationObject.dataOutputs.length; i++) {\n      obj.dataOutputs[i].deserialize(serializationObject.dataOutputs[i]);\n    }\n    if (obj instanceof FlowGraphExecutionBlock) {\n      for (let i = 0; i < serializationObject.signalInputs.length; i++) {\n        obj.signalInputs[i].deserialize(serializationObject.signalInputs[i]);\n      }\n      for (let i = 0; i < serializationObject.signalOutputs.length; i++) {\n        obj.signalOutputs[i].deserialize(serializationObject.signalOutputs[i]);\n      }\n    }\n    return obj;\n  }\n}","map":{"version":3,"names":["RandomGUID","FlowGraphConnectionType","FlowGraphDataConnection","Tools","FlowGraphExecutionBlock","FlowGraphBlock","constructor","config","uniqueId","configure","name","_b","_a","getClassName","dataInputs","dataOutputs","_updateOutputs","_context","_registerDataInput","className","input","Input","push","_registerDataOutput","output","Output","serialize","serializationObject","serializedInput","serializedOutput","Parse","classType","Instantiate","obj","i","length","deserialize","signalInputs","signalOutputs"],"sources":["../../../../dev/core/src/FlowGraph/flowGraphBlock.ts"],"sourcesContent":["import { RandomGUID } from \"../Misc/guid\";\r\nimport { FlowGraphConnectionType } from \"./flowGraphConnection\";\r\nimport type { FlowGraphContext } from \"./flowGraphContext\";\r\nimport { FlowGraphDataConnection } from \"./flowGraphDataConnection\";\r\nimport type { RichType } from \"./flowGraphRichTypes\";\r\nimport { Tools } from \"core/Misc/tools\";\r\nimport { FlowGraphExecutionBlock } from \"./flowGraphExecutionBlock\";\r\n\r\nexport interface IFlowGraphBlockConfiguration {\r\n    name?: string;\r\n}\r\n\r\n/**\r\n * @experimental\r\n * A block in a flow graph. The most basic form\r\n * of a block has inputs and outputs that contain\r\n * data.\r\n */\r\nexport class FlowGraphBlock {\r\n    /**\r\n     * A randomly generated GUID for each block.\r\n     */\r\n    public uniqueId = RandomGUID();\r\n    /**\r\n     * The name of the block.\r\n     */\r\n    public name: string;\r\n    /**\r\n     * The data inputs of the block.\r\n     */\r\n    public dataInputs: FlowGraphDataConnection<any>[];\r\n    /**\r\n     * The data outputs of the block.\r\n     */\r\n    public dataOutputs: FlowGraphDataConnection<any>[];\r\n\r\n    /** Constructor is protected so only subclasses can be instantiated */\r\n    protected constructor(public config?: IFlowGraphBlockConfiguration) {\r\n        this.configure();\r\n    }\r\n\r\n    public configure() {\r\n        // overriden in child classes, uses config\r\n        this.name = this.config?.name ?? this.getClassName();\r\n        this.dataInputs = [];\r\n        this.dataOutputs = [];\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _updateOutputs(_context: FlowGraphContext): void {\r\n        // empty by default, overriden in data blocks\r\n    }\r\n\r\n    protected _registerDataInput<T>(name: string, className: RichType<T>): FlowGraphDataConnection<T> {\r\n        const input = new FlowGraphDataConnection(name, FlowGraphConnectionType.Input, this, className);\r\n        this.dataInputs.push(input);\r\n        return input;\r\n    }\r\n\r\n    protected _registerDataOutput<T>(name: string, className: RichType<T>): FlowGraphDataConnection<T> {\r\n        const output = new FlowGraphDataConnection(name, FlowGraphConnectionType.Output, this, className);\r\n        this.dataOutputs.push(output);\r\n        return output;\r\n    }\r\n\r\n    public serialize(serializationObject: any = {}) {\r\n        serializationObject.uniqueId = this.uniqueId;\r\n        serializationObject.config = this.config;\r\n        serializationObject.dataInputs = [];\r\n        serializationObject.dataOutputs = [];\r\n        serializationObject.className = this.getClassName();\r\n        for (const input of this.dataInputs) {\r\n            const serializedInput: any = {};\r\n            input.serialize(serializedInput);\r\n            serializationObject.dataInputs.push(serializedInput);\r\n        }\r\n        for (const output of this.dataOutputs) {\r\n            const serializedOutput: any = {};\r\n            output.serialize(serializedOutput);\r\n            serializationObject.dataOutputs.push(serializedOutput);\r\n        }\r\n    }\r\n\r\n    public getClassName() {\r\n        return \"FGBlock\";\r\n    }\r\n\r\n    public static Parse(serializationObject: any): FlowGraphBlock {\r\n        const classType = Tools.Instantiate(serializationObject.className);\r\n        const obj = new classType(serializationObject.config);\r\n        obj.uniqueId = serializationObject.uniqueId;\r\n        for (let i = 0; i < serializationObject.dataInputs.length; i++) {\r\n            obj.dataInputs[i].deserialize(serializationObject.dataInputs[i]);\r\n        }\r\n        for (let i = 0; i < serializationObject.dataOutputs.length; i++) {\r\n            obj.dataOutputs[i].deserialize(serializationObject.dataOutputs[i]);\r\n        }\r\n        if (obj instanceof FlowGraphExecutionBlock) {\r\n            for (let i = 0; i < serializationObject.signalInputs.length; i++) {\r\n                obj.signalInputs[i].deserialize(serializationObject.signalInputs[i]);\r\n            }\r\n            for (let i = 0; i < serializationObject.signalOutputs.length; i++) {\r\n                obj.signalOutputs[i].deserialize(serializationObject.signalOutputs[i]);\r\n            }\r\n        }\r\n        return obj;\r\n    }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}