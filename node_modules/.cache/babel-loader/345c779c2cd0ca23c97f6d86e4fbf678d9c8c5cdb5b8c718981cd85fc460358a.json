{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { __decorate } from \"../../../tslib.es6.js\";\nimport { NodeGeometryBlock } from \"../nodeGeometryBlock.js\";\nimport { RegisterClass } from \"../../../Misc/typeStore.js\";\nimport { NodeGeometryBlockConnectionPointTypes } from \"../Enums/nodeGeometryConnectionPointTypes.js\";\nimport { GeometryInputBlock } from \"./geometryInputBlock.js\";\nimport { Vector2, Vector3, Vector4 } from \"../../../Maths/math.vector.js\";\nimport { PropertyTypeForEdition, editableInPropertyPage } from \"../../../Decorators/nodeDecorator.js\";\nimport { NodeGeometryContextualSources } from \"../Enums/nodeGeometryContextualSources.js\";\n/**\n * Locks supported by the random block\n */\nexport var RandomBlockLocks;\n(function (RandomBlockLocks) {\n  /** None */\n  RandomBlockLocks[RandomBlockLocks[\"None\"] = 0] = \"None\";\n  /** LoopID */\n  RandomBlockLocks[RandomBlockLocks[\"LoopID\"] = 1] = \"LoopID\";\n  /** InstanceID */\n  RandomBlockLocks[RandomBlockLocks[\"InstanceID\"] = 2] = \"InstanceID\";\n})(RandomBlockLocks || (RandomBlockLocks = {}));\n/**\n * Block used to get a random number\n */\nexport class RandomBlock extends NodeGeometryBlock {\n  /**\n   * Create a new RandomBlock\n   * @param name defines the block name\n   */\n  constructor(name) {\n    super(name);\n    this._currentLockId = -1;\n    /**\n     * Gets or sets a value indicating if that block will lock its value for a specific duration\n     */\n    this.lockMode = RandomBlockLocks.None;\n    this.registerInput(\"min\", NodeGeometryBlockConnectionPointTypes.AutoDetect);\n    this.registerInput(\"max\", NodeGeometryBlockConnectionPointTypes.AutoDetect);\n    this.registerOutput(\"output\", NodeGeometryBlockConnectionPointTypes.BasedOnInput);\n    this._inputs[0].excludedConnectionPointTypes.push(NodeGeometryBlockConnectionPointTypes.Matrix);\n    this._inputs[0].excludedConnectionPointTypes.push(NodeGeometryBlockConnectionPointTypes.Geometry);\n    this._inputs[0].excludedConnectionPointTypes.push(NodeGeometryBlockConnectionPointTypes.Texture);\n    this._inputs[1].excludedConnectionPointTypes.push(NodeGeometryBlockConnectionPointTypes.Matrix);\n    this._inputs[1].excludedConnectionPointTypes.push(NodeGeometryBlockConnectionPointTypes.Geometry);\n    this._inputs[1].excludedConnectionPointTypes.push(NodeGeometryBlockConnectionPointTypes.Texture);\n    this._outputs[0]._typeConnectionSource = this._inputs[0];\n    this._linkConnectionTypes(0, 1);\n  }\n  /**\n   * Gets the current class name\n   * @returns the class name\n   */\n  getClassName() {\n    return \"RandomBlock\";\n  }\n  /**\n   * Gets the min input component\n   */\n  get min() {\n    return this._inputs[0];\n  }\n  /**\n   * Gets the max input component\n   */\n  get max() {\n    return this._inputs[1];\n  }\n  /**\n   * Gets the geometry output component\n   */\n  get output() {\n    return this._outputs[0];\n  }\n  autoConfigure() {\n    if (!this.min.isConnected) {\n      const minInput = new GeometryInputBlock(\"Min\");\n      minInput.value = 0;\n      minInput.output.connectTo(this.min);\n    }\n    if (!this.max.isConnected) {\n      const maxInput = new GeometryInputBlock(\"Max\");\n      maxInput.value = 1;\n      maxInput.output.connectTo(this.max);\n    }\n  }\n  _buildBlock() {\n    let func = null;\n    this._currentLockId = -1;\n    switch (this.min.type) {\n      case NodeGeometryBlockConnectionPointTypes.Int:\n      case NodeGeometryBlockConnectionPointTypes.Float:\n        {\n          func = state => {\n            const min = this.min.getConnectedValue(state) || 0;\n            const max = this.max.getConnectedValue(state) || 0;\n            return min + Math.random() * (max - min);\n          };\n          break;\n        }\n      case NodeGeometryBlockConnectionPointTypes.Vector2:\n        {\n          func = state => {\n            const min = this.min.getConnectedValue(state) || Vector2.Zero();\n            const max = this.max.getConnectedValue(state) || Vector2.Zero();\n            return new Vector2(min.x + Math.random() * (max.x - min.x), min.y + Math.random() * (max.y - min.y));\n          };\n          break;\n        }\n      case NodeGeometryBlockConnectionPointTypes.Vector3:\n        {\n          func = state => {\n            const min = this.min.getConnectedValue(state) || Vector3.Zero();\n            const max = this.max.getConnectedValue(state) || Vector3.Zero();\n            return new Vector3(min.x + Math.random() * (max.x - min.x), min.y + Math.random() * (max.y - min.y), min.z + Math.random() * (max.z - min.z));\n          };\n          break;\n        }\n      case NodeGeometryBlockConnectionPointTypes.Vector4:\n        {\n          func = state => {\n            const min = this.min.getConnectedValue(state) || Vector4.Zero();\n            const max = this.max.getConnectedValue(state) || Vector4.Zero();\n            return new Vector4(min.x + Math.random() * (max.x - min.x), min.y + Math.random() * (max.y - min.y), min.z + Math.random() * (max.z - min.z), min.w + Math.random() * (max.w - min.w));\n          };\n          break;\n        }\n    }\n    if (this.lockMode === RandomBlockLocks.None || !func) {\n      this.output._storedFunction = func;\n    } else {\n      this.output._storedFunction = state => {\n        let lockId = 0;\n        switch (this.lockMode) {\n          case RandomBlockLocks.InstanceID:\n            lockId = state.getContextualValue(NodeGeometryContextualSources.InstanceID, true) || 0;\n            break;\n          case RandomBlockLocks.LoopID:\n            lockId = state.getContextualValue(NodeGeometryContextualSources.LoopID, true) || 0;\n            break;\n        }\n        if (this._currentLockId !== lockId) {\n          this._currentLockId = lockId;\n          this.output._storedValue = func(state);\n        }\n        return this.output._storedValue;\n      };\n    }\n  }\n  _dumpPropertiesCode() {\n    const codeString = super._dumpPropertiesCode() + `${this._codeVariableName}.lockMode = BABYLON.RandomBlockLocks.${RandomBlockLocks[this.lockMode]};\\n`;\n    return codeString;\n  }\n  /**\n   * Serializes this block in a JSON representation\n   * @returns the serialized block object\n   */\n  serialize() {\n    const serializationObject = super.serialize();\n    serializationObject.lockMode = this.lockMode;\n    return serializationObject;\n  }\n  _deserialize(serializationObject) {\n    super._deserialize(serializationObject);\n    this.lockMode = serializationObject.lockMode;\n  }\n}\n__decorate([editableInPropertyPage(\"LockMode\", PropertyTypeForEdition.List, \"ADVANCED\", {\n  notifiers: {\n    rebuild: true\n  },\n  options: [{\n    label: \"None\",\n    value: RandomBlockLocks.None\n  }, {\n    label: \"LoopID\",\n    value: RandomBlockLocks.LoopID\n  }, {\n    label: \"InstanceID\",\n    value: RandomBlockLocks.InstanceID\n  }]\n})], RandomBlock.prototype, \"lockMode\", void 0);\nRegisterClass(\"BABYLON.RandomBlock\", RandomBlock);","map":{"version":3,"names":["NodeGeometryBlock","RegisterClass","NodeGeometryBlockConnectionPointTypes","GeometryInputBlock","Vector2","Vector3","Vector4","PropertyTypeForEdition","editableInPropertyPage","NodeGeometryContextualSources","RandomBlockLocks","RandomBlock","constructor","name","_currentLockId","lockMode","None","registerInput","AutoDetect","registerOutput","BasedOnInput","_inputs","excludedConnectionPointTypes","push","Matrix","Geometry","Texture","_outputs","_typeConnectionSource","_linkConnectionTypes","getClassName","min","max","output","autoConfigure","isConnected","minInput","value","connectTo","maxInput","_buildBlock","func","type","Int","Float","state","getConnectedValue","Math","random","Zero","x","y","z","w","_storedFunction","lockId","InstanceID","getContextualValue","LoopID","_storedValue","_dumpPropertiesCode","codeString","_codeVariableName","serialize","serializationObject","_deserialize","__decorate","List","notifiers","rebuild","options","label"],"sources":["../../../../../../dev/core/src/Meshes/Node/Blocks/randomBlock.ts"],"sourcesContent":["import { NodeGeometryBlock } from \"../nodeGeometryBlock\";\r\nimport type { NodeGeometryConnectionPoint } from \"../nodeGeometryBlockConnectionPoint\";\r\nimport { RegisterClass } from \"../../../Misc/typeStore\";\r\nimport { NodeGeometryBlockConnectionPointTypes } from \"../Enums/nodeGeometryConnectionPointTypes\";\r\nimport type { NodeGeometryBuildState } from \"../nodeGeometryBuildState\";\r\nimport { GeometryInputBlock } from \"./geometryInputBlock\";\r\nimport { Vector2, Vector3, Vector4 } from \"../../../Maths/math.vector\";\r\nimport type { Nullable } from \"../../../types\";\r\nimport { PropertyTypeForEdition, editableInPropertyPage } from \"core/Decorators/nodeDecorator\";\r\nimport { NodeGeometryContextualSources } from \"../Enums/nodeGeometryContextualSources\";\r\n\r\n/**\r\n * Locks supported by the random block\r\n */\r\nexport enum RandomBlockLocks {\r\n    /** None */\r\n    None,\r\n    /** LoopID */\r\n    LoopID,\r\n    /** InstanceID */\r\n    InstanceID,\r\n}\r\n\r\n/**\r\n * Block used to get a random number\r\n */\r\nexport class RandomBlock extends NodeGeometryBlock {\r\n    private _currentLockId = -1;\r\n    /**\r\n     * Gets or sets a value indicating if that block will lock its value for a specific duration\r\n     */\r\n    @editableInPropertyPage(\"LockMode\", PropertyTypeForEdition.List, \"ADVANCED\", {\r\n        notifiers: { rebuild: true },\r\n        options: [\r\n            { label: \"None\", value: RandomBlockLocks.None },\r\n            { label: \"LoopID\", value: RandomBlockLocks.LoopID },\r\n            { label: \"InstanceID\", value: RandomBlockLocks.InstanceID },\r\n        ],\r\n    })\r\n    public lockMode = RandomBlockLocks.None;\r\n\r\n    /**\r\n     * Create a new RandomBlock\r\n     * @param name defines the block name\r\n     */\r\n    public constructor(name: string) {\r\n        super(name);\r\n\r\n        this.registerInput(\"min\", NodeGeometryBlockConnectionPointTypes.AutoDetect);\r\n        this.registerInput(\"max\", NodeGeometryBlockConnectionPointTypes.AutoDetect);\r\n\r\n        this.registerOutput(\"output\", NodeGeometryBlockConnectionPointTypes.BasedOnInput);\r\n\r\n        this._inputs[0].excludedConnectionPointTypes.push(NodeGeometryBlockConnectionPointTypes.Matrix);\r\n        this._inputs[0].excludedConnectionPointTypes.push(NodeGeometryBlockConnectionPointTypes.Geometry);\r\n        this._inputs[0].excludedConnectionPointTypes.push(NodeGeometryBlockConnectionPointTypes.Texture);\r\n        this._inputs[1].excludedConnectionPointTypes.push(NodeGeometryBlockConnectionPointTypes.Matrix);\r\n        this._inputs[1].excludedConnectionPointTypes.push(NodeGeometryBlockConnectionPointTypes.Geometry);\r\n        this._inputs[1].excludedConnectionPointTypes.push(NodeGeometryBlockConnectionPointTypes.Texture);\r\n\r\n        this._outputs[0]._typeConnectionSource = this._inputs[0];\r\n        this._linkConnectionTypes(0, 1);\r\n    }\r\n\r\n    /**\r\n     * Gets the current class name\r\n     * @returns the class name\r\n     */\r\n    public getClassName() {\r\n        return \"RandomBlock\";\r\n    }\r\n\r\n    /**\r\n     * Gets the min input component\r\n     */\r\n    public get min(): NodeGeometryConnectionPoint {\r\n        return this._inputs[0];\r\n    }\r\n\r\n    /**\r\n     * Gets the max input component\r\n     */\r\n    public get max(): NodeGeometryConnectionPoint {\r\n        return this._inputs[1];\r\n    }\r\n\r\n    /**\r\n     * Gets the geometry output component\r\n     */\r\n    public get output(): NodeGeometryConnectionPoint {\r\n        return this._outputs[0];\r\n    }\r\n\r\n    public autoConfigure() {\r\n        if (!this.min.isConnected) {\r\n            const minInput = new GeometryInputBlock(\"Min\");\r\n            minInput.value = 0;\r\n            minInput.output.connectTo(this.min);\r\n        }\r\n\r\n        if (!this.max.isConnected) {\r\n            const maxInput = new GeometryInputBlock(\"Max\");\r\n            maxInput.value = 1;\r\n            maxInput.output.connectTo(this.max);\r\n        }\r\n    }\r\n\r\n    protected _buildBlock() {\r\n        let func: Nullable<(state: NodeGeometryBuildState) => any> = null;\r\n        this._currentLockId = -1;\r\n\r\n        switch (this.min.type) {\r\n            case NodeGeometryBlockConnectionPointTypes.Int:\r\n            case NodeGeometryBlockConnectionPointTypes.Float: {\r\n                func = (state) => {\r\n                    const min = this.min.getConnectedValue(state) || 0;\r\n                    const max = this.max.getConnectedValue(state) || 0;\r\n                    return min + Math.random() * (max - min);\r\n                };\r\n                break;\r\n            }\r\n            case NodeGeometryBlockConnectionPointTypes.Vector2: {\r\n                func = (state) => {\r\n                    const min = this.min.getConnectedValue(state) || Vector2.Zero();\r\n                    const max = this.max.getConnectedValue(state) || Vector2.Zero();\r\n                    return new Vector2(min.x + Math.random() * (max.x - min.x), min.y + Math.random() * (max.y - min.y));\r\n                };\r\n                break;\r\n            }\r\n            case NodeGeometryBlockConnectionPointTypes.Vector3: {\r\n                func = (state) => {\r\n                    const min = this.min.getConnectedValue(state) || Vector3.Zero();\r\n                    const max = this.max.getConnectedValue(state) || Vector3.Zero();\r\n                    return new Vector3(min.x + Math.random() * (max.x - min.x), min.y + Math.random() * (max.y - min.y), min.z + Math.random() * (max.z - min.z));\r\n                };\r\n                break;\r\n            }\r\n            case NodeGeometryBlockConnectionPointTypes.Vector4: {\r\n                func = (state) => {\r\n                    const min = this.min.getConnectedValue(state) || Vector4.Zero();\r\n                    const max = this.max.getConnectedValue(state) || Vector4.Zero();\r\n                    return new Vector4(\r\n                        min.x + Math.random() * (max.x - min.x),\r\n                        min.y + Math.random() * (max.y - min.y),\r\n                        min.z + Math.random() * (max.z - min.z),\r\n                        min.w + Math.random() * (max.w - min.w)\r\n                    );\r\n                };\r\n                break;\r\n            }\r\n        }\r\n\r\n        if (this.lockMode === RandomBlockLocks.None || !func) {\r\n            this.output._storedFunction = func;\r\n        } else {\r\n            this.output._storedFunction = (state) => {\r\n                let lockId = 0;\r\n\r\n                switch (this.lockMode) {\r\n                    case RandomBlockLocks.InstanceID:\r\n                        lockId = state.getContextualValue(NodeGeometryContextualSources.InstanceID, true) || 0;\r\n                        break;\r\n                    case RandomBlockLocks.LoopID:\r\n                        lockId = state.getContextualValue(NodeGeometryContextualSources.LoopID, true) || 0;\r\n                        break;\r\n                }\r\n\r\n                if (this._currentLockId !== lockId) {\r\n                    this._currentLockId = lockId;\r\n                    this.output._storedValue = func!(state);\r\n                }\r\n                return this.output._storedValue;\r\n            };\r\n        }\r\n    }\r\n\r\n    protected _dumpPropertiesCode() {\r\n        const codeString = super._dumpPropertiesCode() + `${this._codeVariableName}.lockMode = BABYLON.RandomBlockLocks.${RandomBlockLocks[this.lockMode]};\\n`;\r\n        return codeString;\r\n    }\r\n\r\n    /**\r\n     * Serializes this block in a JSON representation\r\n     * @returns the serialized block object\r\n     */\r\n    public serialize(): any {\r\n        const serializationObject = super.serialize();\r\n\r\n        serializationObject.lockMode = this.lockMode;\r\n\r\n        return serializationObject;\r\n    }\r\n\r\n    public _deserialize(serializationObject: any) {\r\n        super._deserialize(serializationObject);\r\n\r\n        this.lockMode = serializationObject.lockMode;\r\n    }\r\n}\r\n\r\nRegisterClass(\"BABYLON.RandomBlock\", RandomBlock);\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}