{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { __decorate } from \"../tslib.es6.js\";\nimport { Material } from \"./material.js\";\nimport { serialize, expandToProperty, serializeAsTexture } from \"../Misc/decorators.js\";\nimport { MaterialFlags } from \"./materialFlags.js\";\nimport { MaterialHelper } from \"./materialHelper.js\";\nimport { MaterialDefines } from \"./materialDefines.js\";\nimport { MaterialPluginBase } from \"./materialPluginBase.js\";\n\n/**\n * @internal\n */\nexport class MaterialDetailMapDefines extends MaterialDefines {\n  constructor() {\n    super(...arguments);\n    this.DETAIL = false;\n    this.DETAILDIRECTUV = 0;\n    this.DETAIL_NORMALBLENDMETHOD = 0;\n  }\n}\n/**\n * Plugin that implements the detail map component of a material\n *\n * Inspired from:\n *   Unity: https://docs.unity3d.com/Packages/com.unity.render-pipelines.high-definition@9.0/manual/Mask-Map-and-Detail-Map.html and https://docs.unity3d.com/Manual/StandardShaderMaterialParameterDetail.html\n *   Unreal: https://docs.unrealengine.com/en-US/Engine/Rendering/Materials/HowTo/DetailTexturing/index.html\n *   Cryengine: https://docs.cryengine.com/display/SDKDOC2/Detail+Maps\n */\nexport class DetailMapConfiguration extends MaterialPluginBase {\n  /** @internal */\n  _markAllSubMeshesAsTexturesDirty() {\n    this._enable(this._isEnabled);\n    this._internalMarkAllSubMeshesAsTexturesDirty();\n  }\n  constructor(material, addToPluginList = true) {\n    super(material, \"DetailMap\", 140, new MaterialDetailMapDefines(), addToPluginList);\n    this._texture = null;\n    /**\n     * Defines how strongly the detail diffuse/albedo channel is blended with the regular diffuse/albedo texture\n     * Bigger values mean stronger blending\n     */\n    this.diffuseBlendLevel = 1;\n    /**\n     * Defines how strongly the detail roughness channel is blended with the regular roughness value\n     * Bigger values mean stronger blending. Only used with PBR materials\n     */\n    this.roughnessBlendLevel = 1;\n    /**\n     * Defines how strong the bump effect from the detail map is\n     * Bigger values mean stronger effect\n     */\n    this.bumpLevel = 1;\n    this._normalBlendMethod = Material.MATERIAL_NORMALBLENDMETHOD_WHITEOUT;\n    this._isEnabled = false;\n    /**\n     * Enable or disable the detail map on this material\n     */\n    this.isEnabled = false;\n    this._internalMarkAllSubMeshesAsTexturesDirty = material._dirtyCallbacks[1];\n  }\n  isReadyForSubMesh(defines, scene, engine) {\n    if (!this._isEnabled) {\n      return true;\n    }\n    if (defines._areTexturesDirty && scene.texturesEnabled) {\n      if (engine.getCaps().standardDerivatives && this._texture && MaterialFlags.DetailTextureEnabled) {\n        // Detail texture cannot be not blocking.\n        if (!this._texture.isReady()) {\n          return false;\n        }\n      }\n    }\n    return true;\n  }\n  prepareDefines(defines, scene) {\n    if (this._isEnabled) {\n      defines.DETAIL_NORMALBLENDMETHOD = this._normalBlendMethod;\n      const engine = scene.getEngine();\n      if (defines._areTexturesDirty) {\n        if (engine.getCaps().standardDerivatives && this._texture && MaterialFlags.DetailTextureEnabled && this._isEnabled) {\n          MaterialHelper.PrepareDefinesForMergedUV(this._texture, defines, \"DETAIL\");\n          defines.DETAIL_NORMALBLENDMETHOD = this._normalBlendMethod;\n        } else {\n          defines.DETAIL = false;\n        }\n      }\n    } else {\n      defines.DETAIL = false;\n    }\n  }\n  bindForSubMesh(uniformBuffer, scene) {\n    if (!this._isEnabled) {\n      return;\n    }\n    const isFrozen = this._material.isFrozen;\n    if (!uniformBuffer.useUbo || !isFrozen || !uniformBuffer.isSync) {\n      if (this._texture && MaterialFlags.DetailTextureEnabled) {\n        uniformBuffer.updateFloat4(\"vDetailInfos\", this._texture.coordinatesIndex, this.diffuseBlendLevel, this.bumpLevel, this.roughnessBlendLevel);\n        MaterialHelper.BindTextureMatrix(this._texture, uniformBuffer, \"detail\");\n      }\n    }\n    // Textures\n    if (scene.texturesEnabled) {\n      if (this._texture && MaterialFlags.DetailTextureEnabled) {\n        uniformBuffer.setTexture(\"detailSampler\", this._texture);\n      }\n    }\n  }\n  hasTexture(texture) {\n    if (this._texture === texture) {\n      return true;\n    }\n    return false;\n  }\n  getActiveTextures(activeTextures) {\n    if (this._texture) {\n      activeTextures.push(this._texture);\n    }\n  }\n  getAnimatables(animatables) {\n    if (this._texture && this._texture.animations && this._texture.animations.length > 0) {\n      animatables.push(this._texture);\n    }\n  }\n  dispose(forceDisposeTextures) {\n    var _a;\n    if (forceDisposeTextures) {\n      (_a = this._texture) === null || _a === void 0 ? void 0 : _a.dispose();\n    }\n  }\n  getClassName() {\n    return \"DetailMapConfiguration\";\n  }\n  getSamplers(samplers) {\n    samplers.push(\"detailSampler\");\n  }\n  getUniforms() {\n    return {\n      ubo: [{\n        name: \"vDetailInfos\",\n        size: 4,\n        type: \"vec4\"\n      }, {\n        name: \"detailMatrix\",\n        size: 16,\n        type: \"mat4\"\n      }]\n    };\n  }\n}\n__decorate([serializeAsTexture(\"detailTexture\"), expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")], DetailMapConfiguration.prototype, \"texture\", void 0);\n__decorate([serialize()], DetailMapConfiguration.prototype, \"diffuseBlendLevel\", void 0);\n__decorate([serialize()], DetailMapConfiguration.prototype, \"roughnessBlendLevel\", void 0);\n__decorate([serialize()], DetailMapConfiguration.prototype, \"bumpLevel\", void 0);\n__decorate([serialize(), expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")], DetailMapConfiguration.prototype, \"normalBlendMethod\", void 0);\n__decorate([serialize(), expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")], DetailMapConfiguration.prototype, \"isEnabled\", void 0);","map":{"version":3,"names":["Material","serialize","expandToProperty","serializeAsTexture","MaterialFlags","MaterialHelper","MaterialDefines","MaterialPluginBase","MaterialDetailMapDefines","constructor","DETAIL","DETAILDIRECTUV","DETAIL_NORMALBLENDMETHOD","DetailMapConfiguration","_markAllSubMeshesAsTexturesDirty","_enable","_isEnabled","_internalMarkAllSubMeshesAsTexturesDirty","material","addToPluginList","_texture","diffuseBlendLevel","roughnessBlendLevel","bumpLevel","_normalBlendMethod","MATERIAL_NORMALBLENDMETHOD_WHITEOUT","isEnabled","_dirtyCallbacks","isReadyForSubMesh","defines","scene","engine","_areTexturesDirty","texturesEnabled","getCaps","standardDerivatives","DetailTextureEnabled","isReady","prepareDefines","getEngine","PrepareDefinesForMergedUV","bindForSubMesh","uniformBuffer","isFrozen","_material","useUbo","isSync","updateFloat4","coordinatesIndex","BindTextureMatrix","setTexture","hasTexture","texture","getActiveTextures","activeTextures","push","getAnimatables","animatables","animations","length","dispose","forceDisposeTextures","_a","getClassName","getSamplers","samplers","getUniforms","ubo","name","size","type","__decorate"],"sources":["../../../../dev/core/src/Materials/material.detailMapConfiguration.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/naming-convention */\r\nimport type { Nullable } from \"../types\";\r\nimport { Material } from \"./material\";\r\nimport { serialize, expandToProperty, serializeAsTexture } from \"../Misc/decorators\";\r\nimport { MaterialFlags } from \"./materialFlags\";\r\nimport { MaterialHelper } from \"./materialHelper\";\r\nimport type { BaseTexture } from \"./Textures/baseTexture\";\r\nimport type { UniformBuffer } from \"./uniformBuffer\";\r\nimport type { IAnimatable } from \"../Animations/animatable.interface\";\r\nimport { MaterialDefines } from \"./materialDefines\";\r\nimport { MaterialPluginBase } from \"./materialPluginBase\";\r\nimport { Constants } from \"../Engines/constants\";\r\n\r\nimport type { Engine } from \"../Engines/engine\";\r\nimport type { Scene } from \"../scene\";\r\nimport type { StandardMaterial } from \"./standardMaterial\";\r\nimport type { PBRBaseMaterial } from \"./PBR/pbrBaseMaterial\";\r\n\r\n/**\r\n * @internal\r\n */\r\nexport class MaterialDetailMapDefines extends MaterialDefines {\r\n    DETAIL = false;\r\n    DETAILDIRECTUV = 0;\r\n    DETAIL_NORMALBLENDMETHOD = 0;\r\n}\r\n\r\n/**\r\n * Plugin that implements the detail map component of a material\r\n *\r\n * Inspired from:\r\n *   Unity: https://docs.unity3d.com/Packages/com.unity.render-pipelines.high-definition@9.0/manual/Mask-Map-and-Detail-Map.html and https://docs.unity3d.com/Manual/StandardShaderMaterialParameterDetail.html\r\n *   Unreal: https://docs.unrealengine.com/en-US/Engine/Rendering/Materials/HowTo/DetailTexturing/index.html\r\n *   Cryengine: https://docs.cryengine.com/display/SDKDOC2/Detail+Maps\r\n */\r\nexport class DetailMapConfiguration extends MaterialPluginBase {\r\n    private _texture: Nullable<BaseTexture> = null;\r\n    /**\r\n     * The detail texture of the material.\r\n     */\r\n    @serializeAsTexture(\"detailTexture\")\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public texture: Nullable<BaseTexture>;\r\n\r\n    /**\r\n     * Defines how strongly the detail diffuse/albedo channel is blended with the regular diffuse/albedo texture\r\n     * Bigger values mean stronger blending\r\n     */\r\n    @serialize()\r\n    public diffuseBlendLevel = 1;\r\n\r\n    /**\r\n     * Defines how strongly the detail roughness channel is blended with the regular roughness value\r\n     * Bigger values mean stronger blending. Only used with PBR materials\r\n     */\r\n    @serialize()\r\n    public roughnessBlendLevel = 1;\r\n\r\n    /**\r\n     * Defines how strong the bump effect from the detail map is\r\n     * Bigger values mean stronger effect\r\n     */\r\n    @serialize()\r\n    public bumpLevel = 1;\r\n\r\n    private _normalBlendMethod = Material.MATERIAL_NORMALBLENDMETHOD_WHITEOUT;\r\n    /**\r\n     * The method used to blend the bump and detail normals together\r\n     */\r\n    @serialize()\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public normalBlendMethod: number;\r\n\r\n    private _isEnabled = false;\r\n    /**\r\n     * Enable or disable the detail map on this material\r\n     */\r\n    @serialize()\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public isEnabled = false;\r\n\r\n    /** @internal */\r\n    private _internalMarkAllSubMeshesAsTexturesDirty: () => void;\r\n\r\n    /** @internal */\r\n    public _markAllSubMeshesAsTexturesDirty(): void {\r\n        this._enable(this._isEnabled);\r\n        this._internalMarkAllSubMeshesAsTexturesDirty();\r\n    }\r\n\r\n    constructor(material: PBRBaseMaterial | StandardMaterial, addToPluginList = true) {\r\n        super(material, \"DetailMap\", 140, new MaterialDetailMapDefines(), addToPluginList);\r\n\r\n        this._internalMarkAllSubMeshesAsTexturesDirty = material._dirtyCallbacks[Constants.MATERIAL_TextureDirtyFlag];\r\n    }\r\n\r\n    public isReadyForSubMesh(defines: MaterialDetailMapDefines, scene: Scene, engine: Engine): boolean {\r\n        if (!this._isEnabled) {\r\n            return true;\r\n        }\r\n\r\n        if (defines._areTexturesDirty && scene.texturesEnabled) {\r\n            if (engine.getCaps().standardDerivatives && this._texture && MaterialFlags.DetailTextureEnabled) {\r\n                // Detail texture cannot be not blocking.\r\n                if (!this._texture.isReady()) {\r\n                    return false;\r\n                }\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    public prepareDefines(defines: MaterialDetailMapDefines, scene: Scene): void {\r\n        if (this._isEnabled) {\r\n            defines.DETAIL_NORMALBLENDMETHOD = this._normalBlendMethod;\r\n\r\n            const engine = scene.getEngine();\r\n\r\n            if (defines._areTexturesDirty) {\r\n                if (engine.getCaps().standardDerivatives && this._texture && MaterialFlags.DetailTextureEnabled && this._isEnabled) {\r\n                    MaterialHelper.PrepareDefinesForMergedUV(this._texture, defines, \"DETAIL\");\r\n                    defines.DETAIL_NORMALBLENDMETHOD = this._normalBlendMethod;\r\n                } else {\r\n                    defines.DETAIL = false;\r\n                }\r\n            }\r\n        } else {\r\n            defines.DETAIL = false;\r\n        }\r\n    }\r\n\r\n    public bindForSubMesh(uniformBuffer: UniformBuffer, scene: Scene): void {\r\n        if (!this._isEnabled) {\r\n            return;\r\n        }\r\n\r\n        const isFrozen = this._material.isFrozen;\r\n\r\n        if (!uniformBuffer.useUbo || !isFrozen || !uniformBuffer.isSync) {\r\n            if (this._texture && MaterialFlags.DetailTextureEnabled) {\r\n                uniformBuffer.updateFloat4(\"vDetailInfos\", this._texture.coordinatesIndex, this.diffuseBlendLevel, this.bumpLevel, this.roughnessBlendLevel);\r\n                MaterialHelper.BindTextureMatrix(this._texture, uniformBuffer, \"detail\");\r\n            }\r\n        }\r\n\r\n        // Textures\r\n        if (scene.texturesEnabled) {\r\n            if (this._texture && MaterialFlags.DetailTextureEnabled) {\r\n                uniformBuffer.setTexture(\"detailSampler\", this._texture);\r\n            }\r\n        }\r\n    }\r\n\r\n    public hasTexture(texture: BaseTexture): boolean {\r\n        if (this._texture === texture) {\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    public getActiveTextures(activeTextures: BaseTexture[]): void {\r\n        if (this._texture) {\r\n            activeTextures.push(this._texture);\r\n        }\r\n    }\r\n\r\n    public getAnimatables(animatables: IAnimatable[]): void {\r\n        if (this._texture && this._texture.animations && this._texture.animations.length > 0) {\r\n            animatables.push(this._texture);\r\n        }\r\n    }\r\n\r\n    public dispose(forceDisposeTextures?: boolean): void {\r\n        if (forceDisposeTextures) {\r\n            this._texture?.dispose();\r\n        }\r\n    }\r\n\r\n    public getClassName(): string {\r\n        return \"DetailMapConfiguration\";\r\n    }\r\n\r\n    public getSamplers(samplers: string[]): void {\r\n        samplers.push(\"detailSampler\");\r\n    }\r\n\r\n    public getUniforms(): { ubo?: Array<{ name: string; size: number; type: string }>; vertex?: string; fragment?: string } {\r\n        return {\r\n            ubo: [\r\n                { name: \"vDetailInfos\", size: 4, type: \"vec4\" },\r\n                { name: \"detailMatrix\", size: 16, type: \"mat4\" },\r\n            ],\r\n        };\r\n    }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}